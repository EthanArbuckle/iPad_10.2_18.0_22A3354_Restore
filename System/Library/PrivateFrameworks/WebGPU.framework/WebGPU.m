void WebGPU::Adapter::~Adapter(id *this)
{
  void *v2;
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;

  v3 = (WTF *)this[21];
  if (v3)
  {
    this[21] = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v3, v2);
  }
  v4 = (unsigned int *)this[2];
  this[2] = 0;
  if (!v4)
    goto LABEL_6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v4);
    WebGPU::Instance::~Instance((id *)v4);
    WTF::fastFree(v7, v8);

  }
  else
  {
LABEL_6:

  }
}

void WebGPU::HardwareCapabilities::~HardwareCapabilities(id *this)
{
  void *v2;
  WTF *v3;

  v3 = (WTF *)this[18];
  if (v3)
  {
    this[18] = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v3, v2);
  }
}

WebGPU::Device *WebGPU::Device::createInvalid(WebGPU::Device *this, WebGPU::Adapter *a2)
{
  WebGPU::Device *v4;
  WebGPU::Device *result;

  v4 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1B8);
  result = WebGPU::Device::Device(v4, a2);
  *(_QWORD *)this = v4;
  return result;
}

void sub_1824200E0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuAdapterReference(_DWORD *result)
{
  ++*result;
  return result;
}

id *wgpuAdapterRelease(id *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::Adapter::~Adapter(result);
    return (id *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t wgpuAdapterEnumerateFeatures(uint64_t a1, void *__dst)
{
  uint64_t v3;

  if (__dst)
  {
    v3 = *(unsigned int *)(a1 + 180);
    if ((_DWORD)v3)
      memmove(__dst, *(const void **)(a1 + 168), 4 * v3);
  }
  return *(unsigned int *)(a1 + 180);
}

uint64_t wgpuAdapterGetLimits(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_QWORD *)a2)
    return 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  v6 = *(_OWORD *)(a1 + 104);
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 120) = v8;
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  return 1;
}

uint64_t wgpuAdapterGetProperties(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t result;

  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  objc_msgSend(*(id *)(a1 + 8), "name");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  *(_QWORD *)(a2 + 40) = objc_msgSend(v4, "UTF8String");

  *(_QWORD *)(a2 + 48) = "";
  result = objc_msgSend(*(id *)(a1 + 8), "hasUnifiedMemory");
  *(_DWORD *)(a2 + 56) = result;
  *(_DWORD *)(a2 + 60) = 5;
  return result;
}

void sub_182420244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t wgpuAdapterHasFeature(uint64_t a1, int a2)
{
  uint64_t v2;
  int *v3;
  int v4;

  v2 = *(unsigned int *)(a1 + 180);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(int **)(a1 + 168);
  while (1)
  {
    v4 = *v3++;
    if (v4 == a2)
      break;
    if (!--v2)
      return 0;
  }
  return 1;
}

void wgpuAdapterRequestDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  WebGPU::Device *v9;
  void *v10;
  _DWORD *v11;
  unsigned __int8 **v12;
  WebGPU::Device *v13;
  void *v14;
  _DWORD *v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  WebGPU::Device *v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  WebGPU::Device *v25;
  int *v26;
  int v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  uint64_t v31;
  uint64_t v32;
  WebGPU::Device *v33;
  BOOL v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  unint64_t v50;
  _DWORD *v51;
  int *v52;
  unint64_t v53;
  uint64_t v54;
  __int128 *v55;
  _OWORD *v56;
  uint64_t v57;
  __int128 v58;
  void *v59;
  _DWORD *v60;
  WebGPU::Device *v61;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int *v67;
  int v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  int *v72;
  _DWORD *v73;
  int v74;
  WebGPU::Device *v75;
  void *v76;
  _DWORD *v77;
  unsigned __int8 **v78;
  unsigned __int8 *v79;
  uint64_t v81;
  uint64_t v82;
  WebGPU::Device *v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  void *v87;
  _DWORD *v88;
  unsigned __int8 **v89;
  unsigned __int8 *v90;
  uint64_t v92;
  uint64_t v93;
  WebGPU::Device *v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  WTF *v103;
  void *v104;
  uint64_t v105;
  WTF *v106;
  void *v107;
  unsigned __int8 **v108;
  void *v109;
  WTF *v110;
  uint64_t v111;
  WTF *v112;
  void *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _DWORD *v122;
  _OWORD v123[3];
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  WTF *v131;
  int v132;
  int v133;
  uint64_t v134;
  char v135;
  id v136;
  id v137;
  char v138;
  _DWORD *v139;
  unsigned __int8 **v140;

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E0FD1568;
  v8[1] = a3;
  v8[2] = a4;
  if (*(_QWORD *)a2)
  {
    v9 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1B8);
    WebGPU::Device::Device(v9, (WebGPU::Adapter *)a1);
    v140 = (unsigned __int8 **)v9;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v139 = *(_DWORD **)&v123[0];
    (*(void (**)(_QWORD *, uint64_t, unsigned __int8 ***, _DWORD **))(*v8 + 16))(v8, 1, &v140, &v139);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    v11 = v139;
    v139 = 0;
    if (v11)
    {
      if (*v11 == 2)
      {
        WTF::StringImpl::destroy();
        v12 = v140;
        v140 = 0;
        if (!v12)
          return;
LABEL_14:
        v17 = *v12;
        if (__ldaxr(*v12))
        {
          __clrex();
        }
        else if (!__stxr(1u, v17))
        {
          goto LABEL_18;
        }
        MEMORY[0x186DAB1AC](v17);
LABEL_18:
        v19 = *((_QWORD *)v17 + 1);
        v20 = v19 - 1;
        *((_QWORD *)v17 + 1) = v19 - 1;
        if (v19 == 1)
        {
          v97 = *((_QWORD *)v17 + 2);
          v21 = (WebGPU::Device *)*((_QWORD *)v17 + 3);
          *((_QWORD *)v17 + 3) = 0;
          v22 = v97 != 0;
          LODWORD(v97) = __ldxr(v17);
          if ((_DWORD)v97 == 1)
          {
LABEL_20:
            if (__stlxr(0, v17))
            {
              WTF::Lock::unlockSlow((WTF::Lock *)v17);
              if (v20)
                return;
LABEL_128:
              if (v21)
              {
                WebGPU::Device::~Device(v21);
                WTF::fastFree(v103, v104);
              }
              if (!v22)
                WTF::fastFree((WTF *)v17, v10);
              return;
            }
LABEL_127:
            if (v20)
              return;
            goto LABEL_128;
          }
        }
        else
        {
          v21 = 0;
          v22 = 1;
          v23 = __ldxr(v17);
          if (v23 == 1)
            goto LABEL_20;
        }
        __clrex();
        WTF::Lock::unlockSlow((WTF::Lock *)v17);
        if (v20)
          return;
        goto LABEL_128;
      }
      *v11 -= 2;
    }
    v12 = v140;
    v140 = 0;
    if (!v12)
      return;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v13 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1B8);
    WebGPU::Device::Device(v13, (WebGPU::Adapter *)a1);
    v140 = (unsigned __int8 **)v13;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v139 = *(_DWORD **)&v123[0];
    (*(void (**)(_QWORD *, uint64_t, unsigned __int8 ***, _DWORD **))(*v8 + 16))(v8, 1, &v140, &v139);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    v15 = v139;
    v139 = 0;
    if (v15)
    {
      if (*v15 == 2)
      {
        WTF::StringImpl::destroy();
        v16 = v140;
        v140 = 0;
        if (!v16)
        {
LABEL_123:
          v101 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

          return;
        }
LABEL_30:
        v29 = *v16;
        if (__ldaxr(*v16))
        {
          __clrex();
        }
        else if (!__stxr(1u, v29))
        {
          goto LABEL_34;
        }
        MEMORY[0x186DAB1AC](v29);
LABEL_34:
        v31 = *((_QWORD *)v29 + 1);
        v32 = v31 - 1;
        *((_QWORD *)v29 + 1) = v31 - 1;
        if (v31 == 1)
        {
          v98 = *((_QWORD *)v29 + 2);
          v33 = (WebGPU::Device *)*((_QWORD *)v29 + 3);
          *((_QWORD *)v29 + 3) = 0;
          v34 = v98 != 0;
          LODWORD(v98) = __ldxr(v29);
          if ((_DWORD)v98 == 1)
          {
LABEL_36:
            if (!__stlxr(0, v29))
            {
LABEL_118:
              if (!v32)
              {
                if (v33)
                {
                  WebGPU::Device::~Device(v33);
                  WTF::fastFree(v99, v100);
                }
                if (!v34)
                  WTF::fastFree((WTF *)v29, v14);
              }
              goto LABEL_123;
            }
LABEL_117:
            WTF::Lock::unlockSlow((WTF::Lock *)v29);
            goto LABEL_118;
          }
        }
        else
        {
          v33 = 0;
          v34 = 1;
          v35 = __ldxr(v29);
          if (v35 == 1)
            goto LABEL_36;
        }
        __clrex();
        goto LABEL_117;
      }
      *v15 -= 2;
    }
    v16 = v140;
    v140 = 0;
    if (!v16)
      goto LABEL_123;
    goto LABEL_30;
  }
  v24 = *(_QWORD *)(a2 + 32);
  if (v24)
  {
    if (*(_QWORD *)v24)
    {
      v25 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1B8);
      WebGPU::Device::Device(v25, (WebGPU::Adapter *)a1);
      v140 = (unsigned __int8 **)v25;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v139 = *(_DWORD **)&v123[0];
      (*(void (**)(_QWORD *, uint64_t, unsigned __int8 ***, _DWORD **))(*v8 + 16))(v8, 1, &v140, &v139);
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      v26 = v139;
      v139 = 0;
      if (!v26)
        goto LABEL_55;
      v27 = *v26 - 2;
      if (*v26 == 2)
      {
        WTF::StringImpl::destroy();
        v28 = v140;
        v140 = 0;
        if (!v28)
          return;
        goto LABEL_56;
      }
      goto LABEL_54;
    }
    if ((*(_DWORD *)(v24 + 80) & (*(_DWORD *)(v24 + 80) - 1)) != 0
      || (*(_DWORD *)(v24 + 84) & (*(_DWORD *)(v24 + 84) - 1)) != 0)
    {
      v61 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1B8);
      WebGPU::Device::Device(v61, (WebGPU::Adapter *)a1);
      v140 = (unsigned __int8 **)v61;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v139 = *(_DWORD **)&v123[0];
      (*(void (**)(_QWORD *, uint64_t, unsigned __int8 ***, _DWORD **))(*v8 + 16))(v8, 1, &v140, &v139);
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      v26 = v139;
      v139 = 0;
      if (!v26)
        goto LABEL_55;
      v27 = *v26 - 2;
      if (*v26 == 2)
      {
        WTF::StringImpl::destroy();
        v28 = v140;
        v140 = 0;
        if (!v28)
          return;
        goto LABEL_56;
      }
LABEL_54:
      *v26 = v27;
LABEL_55:
      v28 = v140;
      v140 = 0;
      if (!v28)
        return;
LABEL_56:
      v17 = *v28;
      if (__ldaxr(*v28))
      {
        __clrex();
      }
      else if (!__stxr(1u, v17))
      {
        goto LABEL_60;
      }
      MEMORY[0x186DAB1AC](v17);
LABEL_60:
      v63 = *((_QWORD *)v17 + 1);
      v20 = v63 - 1;
      *((_QWORD *)v17 + 1) = v63 - 1;
      if (v63 == 1)
      {
        v102 = *((_QWORD *)v17 + 2);
        v21 = (WebGPU::Device *)*((_QWORD *)v17 + 3);
        *((_QWORD *)v17 + 3) = 0;
        v22 = v102 != 0;
        LODWORD(v102) = __ldxr(v17);
        if ((_DWORD)v102 == 1)
        {
LABEL_62:
          if (!__stlxr(0, v17))
            goto LABEL_127;
LABEL_126:
          WTF::Lock::unlockSlow((WTF::Lock *)v17);
          goto LABEL_127;
        }
      }
      else
      {
        v21 = 0;
        v22 = 1;
        v64 = __ldxr(v17);
        if (v64 == 1)
          goto LABEL_62;
      }
      __clrex();
      goto LABEL_126;
    }
    if (WebGPU::anyLimitIsBetterThan(v24 + 8, a1 + 24))
    {
      WebGPU::Device::createInvalid((WebGPU::Device *)&v140, (WebGPU::Adapter *)a1);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v139 = *(_DWORD **)&v123[0];
      (*(void (**)(_QWORD *, uint64_t, unsigned __int8 ***, _DWORD **))(*v8 + 16))(v8, 1, &v140, &v139);
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      v60 = v139;
      v139 = 0;
      if (v60)
      {
        if (*v60 == 2)
          WTF::StringImpl::destroy();
        else
          *v60 -= 2;
      }
      WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(&v140, v59);
      return;
    }
    v86 = *(_QWORD *)(a2 + 32);
    v43 = *(_OWORD *)(v86 + 8);
    v42 = *(_OWORD *)(v86 + 24);
    v41 = *(_OWORD *)(v86 + 40);
    v40 = *(_QWORD *)(v86 + 56);
    v44 = *(_OWORD *)(v86 + 64);
    v39 = *(_OWORD *)(v86 + 80);
    v45 = *(_QWORD *)(v86 + 96);
    v38 = *(_OWORD *)(v86 + 104);
    v37 = *(_OWORD *)(v86 + 120);
    v36 = *(_OWORD *)(v86 + 136);
    v46 = *(_QWORD *)(a2 + 16);
    if (!v46)
      goto LABEL_94;
LABEL_39:
    v114 = v44;
    v115 = v43;
    v116 = v42;
    v117 = v41;
    v118 = v39;
    v119 = v38;
    v120 = v37;
    v121 = v36;
    if (v46 >> 30)
    {
      __break(0xC471u);
      return;
    }
    v47 = *(_QWORD *)(a2 + 24);
    v48 = WTF::fastMalloc((WTF *)(4 * v46));
    v49 = (WTF *)v48;
    v50 = (v46 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v50 < 7)
    {
      v51 = (_DWORD *)v48;
      v52 = (int *)v47;
      v39 = v118;
      v38 = v119;
      v42 = v116;
      v41 = v117;
      v44 = v114;
      v43 = v115;
    }
    else
    {
      v51 = (_DWORD *)v48;
      v52 = (int *)v47;
      v39 = v118;
      v38 = v119;
      v42 = v116;
      v41 = v117;
      v44 = v114;
      v43 = v115;
      if ((unint64_t)(v48 - v47) >= 0x20)
      {
        v53 = v50 + 1;
        v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
        v51 = (_DWORD *)(v48 + v54);
        v52 = (int *)(v47 + v54);
        v55 = (__int128 *)(v47 + 16);
        v56 = (_OWORD *)(v48 + 16);
        v57 = v53 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v58 = *v55;
          *(v56 - 1) = *(v55 - 1);
          *v56 = v58;
          v55 += 2;
          v56 += 2;
          v57 -= 8;
        }
        while (v57);
        if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_68:
          v37 = v120;
          v36 = v121;
          if (!(_DWORD)v46)
            goto LABEL_95;
          v66 = *(unsigned int *)(a1 + 180);
          if ((_DWORD)v66)
          {
            v67 = (int *)v48;
            while (1)
            {
              v68 = *v67;
              v69 = *(_DWORD **)(a1 + 168);
              v70 = *(unsigned int *)(a1 + 180);
              do
              {
                v71 = v70 >> 1;
                v72 = &v69[v70 >> 1];
                v74 = *v72;
                v73 = v72 + 1;
                v70 += ~(v70 >> 1);
                if (v74 < v68)
                  v69 = v73;
                else
                  v70 = v71;
              }
              while (v70);
              if (v69 == (_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v66) || v68 < *v69)
                break;
              if (++v67 == (int *)(v48 + 4 * v46))
                goto LABEL_95;
            }
          }
          v75 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1B8);
          WebGPU::Device::Device(v75, (WebGPU::Adapter *)a1);
          v140 = (unsigned __int8 **)v75;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v139 = *(_DWORD **)&v123[0];
          (*(void (**)(_QWORD *, uint64_t, unsigned __int8 ***, _DWORD **))(*v8 + 16))(v8, 1, &v140, &v139);
          (*(void (**)(_QWORD *))(*v8 + 8))(v8);
          v77 = v139;
          v139 = 0;
          if (v77)
          {
            if (*v77 == 2)
              WTF::StringImpl::destroy();
            else
              *v77 -= 2;
          }
          v78 = v140;
          v140 = 0;
          if (!v78)
          {
LABEL_154:
            WTF::fastFree(v49, v76);
            return;
          }
          v79 = *v78;
          if (__ldaxr(*v78))
          {
            __clrex();
          }
          else if (!__stxr(1u, v79))
          {
            goto LABEL_89;
          }
          MEMORY[0x186DAB1AC](v79);
LABEL_89:
          v81 = *((_QWORD *)v79 + 1);
          v82 = v81 - 1;
          *((_QWORD *)v79 + 1) = v81 - 1;
          if (v81 == 1)
          {
            v111 = *((_QWORD *)v79 + 2);
            v83 = (WebGPU::Device *)*((_QWORD *)v79 + 3);
            *((_QWORD *)v79 + 3) = 0;
            v84 = v111 != 0;
            LODWORD(v111) = __ldxr(v79);
            if ((_DWORD)v111 == 1)
            {
LABEL_91:
              if (!__stlxr(0, v79))
              {
LABEL_149:
                if (!v82)
                {
                  if (v83)
                  {
                    WebGPU::Device::~Device(v83);
                    WTF::fastFree(v112, v113);
                  }
                  if (!v84)
                    WTF::fastFree((WTF *)v79, v76);
                }
                goto LABEL_154;
              }
LABEL_148:
              WTF::Lock::unlockSlow((WTF::Lock *)v79);
              goto LABEL_149;
            }
          }
          else
          {
            v83 = 0;
            v84 = 1;
            v85 = __ldxr(v79);
            if (v85 == 1)
              goto LABEL_91;
          }
          __clrex();
          goto LABEL_148;
        }
      }
    }
    do
    {
      v65 = *v52++;
      *v51++ = v65;
    }
    while (v52 != (int *)(v47 + 4 * v46));
    goto LABEL_68;
  }
  v36 = xmmword_18260ECA0;
  v37 = xmmword_18260ECB0;
  v38 = xmmword_18260ECC0;
  v39 = xmmword_18260ECD0;
  v40 = 0xC00000004;
  v41 = xmmword_18260ECE0;
  v42 = xmmword_18260ECF0;
  v43 = xmmword_18260ED00;
  v44 = xmmword_18260ED10;
  v45 = 0x10000000;
  v46 = *(_QWORD *)(a2 + 16);
  if (v46)
    goto LABEL_39;
LABEL_94:
  v49 = 0;
LABEL_95:
  v123[0] = v43;
  v123[1] = v42;
  v123[2] = v41;
  v124 = v40;
  v125 = v44;
  v126 = v39;
  v127 = v45;
  v128 = v38;
  v129 = v37;
  v130 = v36;
  v131 = v49;
  v132 = v46;
  v133 = v46;
  v134 = *(_QWORD *)(a1 + 184);
  v135 = *(_BYTE *)(a1 + 192);
  v136 = *(id *)(a1 + 200);
  v137 = *(id *)(a1 + 208);
  v138 = *(_BYTE *)(a1 + 216);
  if (*(_QWORD *)(a2 + 8))
    strlen(*(const char **)(a2 + 8));
  WTF::String::fromUTF8();
  *(_BYTE *)(a1 + 224) = 1;
  WebGPU::Device::create(*(void **)(a1 + 8), (uint64_t)&v140, (uint64_t)v123, (WebGPU::Adapter *)a1, (uint64_t *)&v139);
  v122 = 0;
  (*(void (**)(_QWORD *, _QWORD, _DWORD **, _DWORD **))(*v8 + 16))(v8, 0, &v139, &v122);
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  v88 = v122;
  v122 = 0;
  if (v88)
  {
    if (*v88 == 2)
      WTF::StringImpl::destroy();
    else
      *v88 -= 2;
  }
  v89 = (unsigned __int8 **)v139;
  v139 = 0;
  if (!v89)
    goto LABEL_140;
  v90 = *v89;
  if (__ldaxr(*v89))
  {
    __clrex();
  }
  else if (!__stxr(1u, v90))
  {
    goto LABEL_106;
  }
  MEMORY[0x186DAB1AC](v90);
LABEL_106:
  v92 = *((_QWORD *)v90 + 1);
  v93 = v92 - 1;
  *((_QWORD *)v90 + 1) = v92 - 1;
  if (v92 != 1)
  {
    v94 = 0;
    v95 = 1;
    v96 = __ldxr(v90);
    if (v96 == 1)
      goto LABEL_108;
LABEL_133:
    __clrex();
    goto LABEL_134;
  }
  v105 = *((_QWORD *)v90 + 2);
  v94 = (WebGPU::Device *)*((_QWORD *)v90 + 3);
  *((_QWORD *)v90 + 3) = 0;
  v95 = v105 != 0;
  LODWORD(v105) = __ldxr(v90);
  if ((_DWORD)v105 != 1)
    goto LABEL_133;
LABEL_108:
  if (__stlxr(0, v90))
LABEL_134:
    WTF::Lock::unlockSlow((WTF::Lock *)v90);
  if (!v93)
  {
    if (v94)
    {
      WebGPU::Device::~Device(v94);
      WTF::fastFree(v106, v107);
    }
    if (!v95)
      WTF::fastFree((WTF *)v90, v87);
  }
LABEL_140:
  v108 = v140;
  v140 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v108 -= 2;
  }

  v110 = v131;
  if (v131)
  {
    v131 = 0;
    v132 = 0;
    WTF::fastFree(v110, v109);
  }
}

void sub_182420CFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  _DWORD *v5;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v5 = *(_DWORD **)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v2 - 88), v4);
  _Unwind_Resume(a1);
}

unsigned __int8 ***WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(unsigned __int8 ***a1, void *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  WebGPU::Device *v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  WTF *v13;
  void *v14;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_6:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 != 1)
  {
    v8 = 0;
    v9 = 1;
    v10 = __ldxr(v4);
    if (v10 == 1)
      goto LABEL_8;
LABEL_12:
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      return a1;
    goto LABEL_14;
  }
  v12 = *((_QWORD *)v4 + 2);
  v8 = (WebGPU::Device *)*((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 3) = 0;
  v9 = v12 != 0;
  LODWORD(v12) = __ldxr(v4);
  if ((_DWORD)v12 != 1)
    goto LABEL_12;
LABEL_8:
  if (__stlxr(0, v4))
    goto LABEL_13;
  if (v7)
    return a1;
LABEL_14:
  if (v8)
  {
    WebGPU::Device::~Device(v8);
    WTF::fastFree(v13, v14);
  }
  if (v9)
    return a1;
  WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<wgpuAdapterRequestDevice::$_0,void,WGPURequestDeviceStatus,WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>> &&,WTF::String &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void (*v5)(uint64_t, uint64_t, char *, _QWORD);
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t result;
  WTF *v10;

  v5 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 8);
  v6 = *a3;
  *a3 = 0;
  WTF::String::utf8();
  if (v10)
    v7 = (char *)v10 + 16;
  else
    v7 = 0;
  v5(a2, v6, v7, *(_QWORD *)(a1 + 16));
  result = (uint64_t)v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      return WTF::fastFree(v10, v8);
    else
      --*(_DWORD *)v10;
  }
  return result;
}

void sub_182421050(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::Device::createExternalTextureFromPixelBuffer(uint64_t a1, uint64_t a2, __CVBuffer *a3)
{
  unsigned __int8 v6;
  __CVMetalTextureCache *v7;
  MTLPixelFormat v8;
  size_t v9;
  size_t v10;
  CVReturn v11;
  CVReturn TextureFromImage;
  size_t PlaneCount;
  unint64_t v14;
  unint64_t v15;
  MTLPixelFormat v16;
  __CVMetalTextureCache *v17;
  size_t v18;
  size_t v19;
  CVReturn v20;
  MTLPixelFormat v21;
  __CVMetalTextureCache *v22;
  size_t v23;
  size_t v24;
  id v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CVMetalTextureRef v35;
  CFTypeRef v36;
  _QWORD *v37;
  __CVBuffer *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x2_t v56;
  uint64_t v57;
  float32x2_t v58;
  int WidthOfPlane;
  int HeightOfPlane;
  void *v61;
  uint64_t v62;
  id v63;
  void *BaseAddressOfPlane;
  void *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  int BytesPerRowOfPlane;
  __CVBuffer *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  __int128 v82;
  float32x2_t v83;
  __int128 v84;
  float32x2_t v85;
  __int128 v86;
  _QWORD *v87;
  CFTypeRef cf;
  CVMetalTextureRef image;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned __int8 v97;
  float upperLeft[2];
  float upperRight[2];
  float lowerRight[2];
  float lowerLeft[2];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  LOBYTE(v96) = 0;
  v97 = 0;
  v6 = objc_msgSend(*(id *)(a2 + 8), "supportsFamily:", 1004);
  if (!CVPixelBufferGetIOSurface(a3))
  {
    PlaneCount = CVPixelBufferGetPlaneCount(a3);
    if (PlaneCount <= 1)
      v14 = 1;
    else
      v14 = PlaneCount;
    if (v14 >= 3)
      goto LABEL_11;
    v15 = PlaneCount;
    if (CVPixelBufferLockBaseAddress(a3, 1uLL))
      goto LABEL_11;
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(a3, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(a3, 0);
    v61 = (void *)objc_opt_new();
    objc_msgSend(v61, "setUsage:", 1);
    objc_msgSend(v61, "setTextureType:", 2);
    objc_msgSend(v61, "setWidth:");
    objc_msgSend(v61, "setHeight:");
    objc_msgSend(v61, "setPixelFormat:", WebGPU::metalPixelFormat(a3, 0, (uint64_t)&v96, v6));
    v81 = v97;
    if (v97)
    {
      v79 = v96;
      objc_msgSend(v61, "setSwizzle:");
    }
    objc_msgSend(v61, "setMipmapLevelCount:", 1);
    objc_msgSend(v61, "setSampleCount:", 1);
    if (objc_msgSend(*(id *)(a2 + 8), "hasUnifiedMemory"))
      v62 = 0;
    else
      v62 = 2;
    objc_msgSend(v61, "setStorageMode:", v62);
    v63 = (id)objc_msgSend(*(id *)(a2 + 8), "newTextureWithDescriptor:", v61);
    if (v63)
    {
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = WidthOfPlane;
      v94 = HeightOfPlane;
      v95 = 1;
      objc_msgSend(v63, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", &v90, 0, BaseAddressOfPlane, (int)CVPixelBufferGetBytesPerRowOfPlane(a3, 0));

      if (v15 < 2)
      {
        v65 = 0;
LABEL_47:
        CVPixelBufferUnlockBaseAddress(a3, 1uLL);
        if (v15 < 2)
        {
          ___ZNK6WebGPU6Device36createExternalTextureFromPixelBufferEP10__CVBuffer14WGPUColorSpace_block_invoke(v63, v81 != 0);
          v78 = objc_claimAutoreleasedReturnValue();

          v86 = xmmword_18260ED30;
          v84 = xmmword_18260ED40;
          v80 = 0u;
          v82 = xmmword_18260ED50;
          v65 = (void *)v78;
        }
        else
        {
          *(double *)&v73 = WebGPU::colorSpaceConversionMatrixForPixelBuffer(a3, v72);
          HIDWORD(v73) = 0;
          HIDWORD(v74) = 0;
          v82 = v73;
          v84 = v74;
          HIDWORD(v75) = 0;
          v86 = v75;
          HIDWORD(v76) = 0;
          v80 = v76;
        }
        v63 = v63;
        *(_QWORD *)a1 = v63;
        v77 = v65;
        *(_QWORD *)(a1 + 8) = v77;
        *(_QWORD *)(a1 + 16) = 1065353216;
        *(_QWORD *)(a1 + 24) = 0x3F80000000000000;
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)(a1 + 48) = v82;
        *(_OWORD *)(a1 + 64) = v84;
        *(_OWORD *)(a1 + 80) = v86;
        *(_OWORD *)(a1 + 96) = v80;
        goto LABEL_52;
      }
      v66 = CVPixelBufferGetWidthOfPlane(a3, 1uLL);
      v67 = CVPixelBufferGetHeightOfPlane(a3, 1uLL);
      v61 = (void *)objc_opt_new();
      objc_msgSend(v61, "setUsage:", 1);
      objc_msgSend(v61, "setTextureType:", 2);
      objc_msgSend(v61, "setWidth:");
      v68 = v67;
      objc_msgSend(v61, "setHeight:", v67);
      objc_msgSend(v61, "setPixelFormat:", WebGPU::metalPixelFormat(a3, 1, (uint64_t)&v96, v6));
      v81 = v97;
      if (v97)
        objc_msgSend(v61, "setSwizzle:", v79 & 0xFFFFFFFF00000000 | v96);
      objc_msgSend(v61, "setMipmapLevelCount:", 1);
      objc_msgSend(v61, "setSampleCount:", 1);
      if (objc_msgSend(*(id *)(a2 + 8), "hasUnifiedMemory"))
        v69 = 0;
      else
        v69 = 2;
      objc_msgSend(v61, "setStorageMode:", v69);
      v65 = (void *)objc_msgSend(*(id *)(a2 + 8), "newTextureWithDescriptor:", v61);
      if (v65)
      {
        v70 = CVPixelBufferGetBaseAddressOfPlane(a3, 1uLL);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL);
        v90 = 0;
        v91 = 0;
        v92 = 0;
        v93 = v66;
        v94 = v68;
        v95 = 1;
        objc_msgSend(v65, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", &v90, 0, v70, BytesPerRowOfPlane);

        goto LABEL_47;
      }
    }
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 0;

    v77 = 0;
LABEL_52:

    return;
  }
  cf = 0;
  image = 0;
  if (CVPixelBufferGetPlaneCount(a3) <= 1)
  {
    v7 = *(__CVMetalTextureCache **)(a2 + 432);
    v8 = WebGPU::metalPixelFormat(a3, 0, (uint64_t)&v96, v6);
    v9 = CVPixelBufferGetWidthOfPlane(a3, 0);
    v10 = CVPixelBufferGetHeightOfPlane(a3, 0);
    v11 = CVMetalTextureCacheCreateTextureFromImage(0, v7, a3, 0, v8, v9, v10, 0, &image);
    TextureFromImage = -6680;
    if (v11)
      goto LABEL_4;
    goto LABEL_17;
  }
  v16 = WebGPU::metalPixelFormat(a3, 0, (uint64_t)&v96, v6);
  if (v16)
  {
    v17 = *(__CVMetalTextureCache **)(a2 + 432);
    v18 = CVPixelBufferGetWidthOfPlane(a3, 0);
    v19 = CVPixelBufferGetHeightOfPlane(a3, 0);
    v20 = CVMetalTextureCacheCreateTextureFromImage(0, v17, a3, 0, v16, v18, v19, 0, &image);
  }
  else
  {
    v20 = -6680;
  }
  v21 = WebGPU::metalPixelFormat(a3, 1, (uint64_t)&v96, v6);
  if (v21 == MTLPixelFormatInvalid)
  {
    TextureFromImage = -6680;
    if (!v20)
      goto LABEL_17;
LABEL_4:
    if (cf)
      CFRelease(cf);
LABEL_11:
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 0;
    return;
  }
  v22 = *(__CVMetalTextureCache **)(a2 + 432);
  v23 = CVPixelBufferGetWidthOfPlane(a3, 1uLL);
  v24 = CVPixelBufferGetHeightOfPlane(a3, 1uLL);
  TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v22, a3, 0, v21, v23, v24, 1uLL, (CVMetalTextureRef *)&cf);
  if (v20)
    goto LABEL_4;
LABEL_17:
  CVMetalTextureGetTexture(image);
  v25 = (id)objc_claimAutoreleasedReturnValue();
  CVMetalTextureGetCleanTexCoords(image, lowerLeft, lowerRight, upperRight, upperLeft);
  v26 = v97;
  v27 = (uint64_t)v25;
  if (v97)
  {
    v28 = objc_msgSend(v25, "pixelFormat");
    v29 = objc_msgSend(v25, "textureType");
    v30 = objc_msgSend(v25, "mipmapLevelCount");
    v31 = objc_msgSend(v25, "arrayLength");
    v32 = objc_msgSend(v25, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:", v28, v29, 0, v30, 0, v31, v96);

    v27 = v32;
  }
  if (TextureFromImage)
  {
    v33 = 0;
  }
  else
  {
    CVMetalTextureGetTexture((CVMetalTextureRef)cf);
    v33 = objc_claimAutoreleasedReturnValue();
  }
  v34 = *(_QWORD *)(a2 + 16);
  v36 = cf;
  v35 = image;
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v37 = off_1E0FD15A8;
  v37[1] = v35;
  v37[2] = v36;
  v87 = v37;
  WebGPU::Queue::onSubmittedWorkDone(v34, (uint64_t *)&v87);
  v39 = (uint64_t)v87;
  v87 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v83 = (float32x2_t)__PAIR64__(LODWORD(lowerRight[1]), LODWORD(upperRight[0]));
  v85 = (float32x2_t)__PAIR64__(LODWORD(upperLeft[1]), LODWORD(lowerLeft[0]));
  if (v33)
  {
    *(double *)&v40 = WebGPU::colorSpaceConversionMatrixForPixelBuffer(a3, v38);
  }
  else
  {
    v44 = v25;
    v45 = objc_msgSend(v44, "pixelFormat");
    v46 = objc_msgSend(v44, "textureType");
    v47 = objc_msgSend(v44, "mipmapLevelCount");
    v48 = objc_msgSend(v44, "arrayLength");
    v49 = 1284;
    if (!v26)
      v49 = 1027;
    v50 = objc_msgSend(v44, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:", v45, v46, 0, v47, 0, v48, v49);

    v42 = xmmword_18260ED30;
    v41 = xmmword_18260ED40;
    v40 = xmmword_18260ED50;
    v43 = 0uLL;
    v33 = v50;
  }
  __asm { FMOV            V5.2S, #1.0 }
  v56 = vdiv_f32(_D5, vsub_f32(v83, v85));
  v57 = v56.u32[0];
  v58 = vmul_f32(v85, vneg_f32(v56));
  v56.i32[0] = 0;
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v57;
  *(float32x2_t *)(a1 + 24) = v56;
  *(float32x2_t *)(a1 + 32) = v58;
  *(_OWORD *)(a1 + 48) = v40;
  *(_OWORD *)(a1 + 64) = v41;
  *(_OWORD *)(a1 + 80) = v42;
  *(_OWORD *)(a1 + 96) = v43;

}

void sub_1824218E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ___ZNK6WebGPU6Device36createExternalTextureFromPixelBufferEP10__CVBuffer14WGPUColorSpace_block_invoke(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = a1;
  v4 = objc_msgSend(v3, "pixelFormat");
  v5 = objc_msgSend(v3, "textureType");
  v6 = objc_msgSend(v3, "mipmapLevelCount");
  v7 = objc_msgSend(v3, "arrayLength");
  v8 = 1027;
  if (a2)
    v8 = 1284;
  v9 = (void *)objc_msgSend(v3, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:", v4, v5, 0, v6, 0, v7, v8);

  return v9;
}

void sub_182421A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebGPU::metalPixelFormat(__CVBuffer *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  signed int PixelFormatType;
  uint64_t result;
  int v9;
  int v10;
  int v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType > 1380410944)
  {
    if (PixelFormatType > 1919379251)
    {
      if (PixelFormatType > 1999908972)
      {
        if (PixelFormatType <= 2019963955)
        {
          if (PixelFormatType > 2016687155)
          {
            if (PixelFormatType == 2016687156 || PixelFormatType == 2019963440)
              goto LABEL_126;
            v10 = 2019963442;
          }
          else
          {
            if (PixelFormatType == 1999908973)
              return 0;
            if (PixelFormatType == 2016686640)
              goto LABEL_126;
            v10 = 2016686642;
          }
          goto LABEL_125;
        }
        if (PixelFormatType > 2033463855)
        {
          if (PixelFormatType == 2033463856 || PixelFormatType == 2037741158)
            goto LABEL_126;
          v10 = 2037741171;
          goto LABEL_125;
        }
        if (PixelFormatType == 2019963956)
          goto LABEL_126;
        if (PixelFormatType == 2033463352)
          return 80;
        v9 = 2033463606;
      }
      else
      {
        if (PixelFormatType <= 1983000885)
        {
          if (PixelFormatType > 1937126451)
          {
            if (PixelFormatType == 1937126452)
              return 0;
            if (PixelFormatType == 1982882104)
              goto LABEL_126;
            v10 = 1983000880;
            goto LABEL_125;
          }
          if (PixelFormatType != 1919379252)
            return 0;
          return 80;
        }
        if (PixelFormatType > 1983131951)
        {
          if (PixelFormatType == 1983131952)
            goto LABEL_126;
          if (PixelFormatType == 1999843442)
            return 90;
          return 0;
        }
        if (PixelFormatType == 1983000886 || PixelFormatType == 1983066168)
          goto LABEL_126;
        v9 = 1983131704;
      }
LABEL_116:
      if (PixelFormatType != v9)
        return 0;
      return 80;
    }
    if (PixelFormatType <= 1717855599)
    {
      if (PixelFormatType <= 1647589489)
      {
        if (PixelFormatType <= 1630697080)
        {
          if (PixelFormatType == 1380410945)
            return 125;
          if (PixelFormatType == 1380411457)
            return 115;
          return 0;
        }
        if (PixelFormatType == 1630697081)
          goto LABEL_126;
        if (PixelFormatType == 1647392359)
          return 25;
        if (PixelFormatType != 1647522401)
          return 0;
        return 55;
      }
      if (PixelFormatType > 1651519797)
      {
        if (PixelFormatType != 1651519798 && PixelFormatType != 1651521076)
        {
          v10 = 1714696752;
          goto LABEL_125;
        }
        return 80;
      }
      if (PixelFormatType == 1647589490)
        return 80;
      if (PixelFormatType != 1647719521)
      {
        v9 = 1650943796;
        goto LABEL_116;
      }
      if (!*(_BYTE *)(a3 + 4))
        *(_BYTE *)(a3 + 4) = 1;
      *(_DWORD *)a3 = 3;
    }
    else
    {
      if (PixelFormatType <= 1815162993)
      {
        if (PixelFormatType > 1735549491)
        {
          if (PixelFormatType == 1735549492)
            return 80;
          if (PixelFormatType == 1751410032)
            return 250;
          v9 = 1751411059;
        }
        else
        {
          if (PixelFormatType == 1717855600)
            return 252;
          if (PixelFormatType == 1717856627)
            return 80;
          v9 = 1734505012;
        }
        goto LABEL_116;
      }
      if (PixelFormatType > 1882468913)
      {
        if (PixelFormatType == 1882468914)
        {
          if (((a2 == 0) & a4) != 0)
            return 509;
          else
            return 0;
        }
        if (PixelFormatType == 1882469428)
        {
          if (((a2 == 0) & a4) != 0)
            return 510;
          else
            return 0;
        }
        v9 = 1916022840;
        goto LABEL_116;
      }
      if (PixelFormatType == 1815162994)
      {
        if (!*(_BYTE *)(a3 + 4))
          *(_BYTE *)(a3 + 4) = 1;
        *(_DWORD *)a3 = 3;
        return 90;
      }
      if (PixelFormatType != 1815491698)
      {
        if (PixelFormatType == 1882468912)
        {
          if (((a2 == 0) & a4) != 0)
            return 508;
          else
            return 0;
        }
        return 0;
      }
    }
    return 110;
  }
  if (PixelFormatType <= 843264101)
  {
    if (PixelFormatType <= 641230383)
    {
      v11 = PixelFormatType - 1;
      result = 1;
      switch(v11)
      {
        case 0:
        case 1:
        case 3:
        case 7:
        case 32:
        case 33:
        case 35:
        case 39:
          return result;
        case 15:
          return 43;
        case 23:
          return 70;
        case 31:
          if (!*(_BYTE *)(a3 + 4))
            *(_BYTE *)(a3 + 4) = 1;
          *(_DWORD *)a3 = 3;
          result = 70;
          break;
        default:
          return 0;
      }
      return result;
    }
    if (PixelFormatType > 758674991)
    {
      if (PixelFormatType > 762869297)
      {
        if (PixelFormatType == 762869298)
          goto LABEL_126;
        if (PixelFormatType != 842285639)
        {
          if (PixelFormatType == 843264056)
            return 30;
          return 0;
        }
      }
      else
      {
        if (PixelFormatType == 758674992)
          goto LABEL_126;
        if (PixelFormatType != 759318337)
        {
          v10 = 762869296;
          goto LABEL_125;
        }
      }
    }
    else
    {
      if (PixelFormatType > 645428783)
      {
        if (PixelFormatType == 645428784 || PixelFormatType == 645428786)
          goto LABEL_126;
        v10 = 758670896;
        goto LABEL_125;
      }
      if (PixelFormatType == 641230384 || PixelFormatType == 641234480)
        goto LABEL_126;
      if (PixelFormatType != 641877825)
        return 0;
    }
    return 80;
  }
  if (PixelFormatType > 1110783540)
  {
    if (PixelFormatType > 1278226737)
    {
      if (PixelFormatType <= 1278555700)
      {
        if (PixelFormatType == 1278226738)
          return 0;
        if (PixelFormatType == 1278226742)
          return 20;
        if (PixelFormatType != 1278555445)
          return 0;
        return 43;
      }
      if (PixelFormatType != 1278555701)
      {
        if (PixelFormatType == 1378955371)
          return 94;
        if (PixelFormatType == 1380401729)
          return 70;
        return 0;
      }
      return 40;
    }
    if (PixelFormatType <= 1278226533)
    {
      if (PixelFormatType != 1110783541)
      {
        if (PixelFormatType != 1111970369)
        {
          if (PixelFormatType == 1278226488)
            return 10;
          return 0;
        }
        return 80;
      }
      return 40;
    }
    if (PixelFormatType != 1278226534)
    {
      if (PixelFormatType != 1278226536)
        return 0;
      return 25;
    }
    return 55;
  }
  if (PixelFormatType > 875704933)
  {
    if (PixelFormatType <= 875836533)
    {
      if (PixelFormatType == 875704934 || PixelFormatType == 875704950)
        goto LABEL_126;
      v10 = 875836518;
      goto LABEL_125;
    }
    if (PixelFormatType == 875836534)
      goto LABEL_126;
    if (PixelFormatType != 892679473)
    {
      if (PixelFormatType == 1094862674)
      {
        if (!*(_BYTE *)(a3 + 4))
          *(_BYTE *)(a3 + 4) = 1;
        *(_DWORD *)a3 = 3;
        return 80;
      }
      return 0;
    }
    return 43;
  }
  if (PixelFormatType > 846624120)
  {
    if (PixelFormatType == 846624121 || PixelFormatType == 875704422)
      goto LABEL_126;
    v10 = 875704438;
LABEL_125:
    if (PixelFormatType == v10)
    {
LABEL_126:
      if ((_DWORD)a2)
        return 30;
      else
        return 10;
    }
    return 0;
  }
  if (PixelFormatType == 843264102)
    return 105;
  if (PixelFormatType != 843264104)
  {
    if (PixelFormatType == 843264310)
      return 60;
    return 0;
  }
  return 65;
}

double WebGPU::colorSpaceConversionMatrixForPixelBuffer(WebGPU *this, __CVBuffer *a2)
{
  signed int PixelFormatType;
  char v4;
  CFTypeRef v5;
  const void *v6;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  v4 = 0;
  if (PixelFormatType > 2019963439)
  {
    if (PixelFormatType > 2019963955)
    {
      if (PixelFormatType == 2037741158 || PixelFormatType == 2019963956)
        goto LABEL_15;
    }
    else if (PixelFormatType == 2019963440 || PixelFormatType == 2019963442)
    {
      goto LABEL_15;
    }
  }
  else
  {
    if (PixelFormatType <= 1714696751)
    {
      if (PixelFormatType != 641230384 && PixelFormatType != 875704422)
        goto LABEL_16;
LABEL_15:
      v4 = 1;
      goto LABEL_16;
    }
    if (PixelFormatType == 1714696752 || PixelFormatType == 1815162994)
      goto LABEL_15;
  }
LABEL_16:
  v5 = CVBufferCopyAttachment(this, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
  if (!v5)
    goto LABEL_19;
  v6 = v5;
  if (!CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA8F18]))
  {
    if (CFEqual(v6, (CFTypeRef)*MEMORY[0x1E0CA8F10]))
    {
      CFRelease(v6);
      if ((v4 & 1) != 0)
      {
        __asm { FMOV            V0.4S, #1.0 }
        return *(double *)&_Q0;
      }
    }
    else
    {
      if (!CFEqual(v6, (CFTypeRef)*MEMORY[0x1E0CA8F00]))
        goto LABEL_18;
      CFRelease(v6);
      if ((v4 & 1) != 0)
      {
        __asm { FMOV            V0.4S, #1.0 }
        return *(double *)&_Q0;
      }
    }
LABEL_28:
    *(_QWORD *)&_Q0 = vdupq_n_s32(0x3F95A027u).u64[0];
    return *(double *)&_Q0;
  }
LABEL_18:
  CFRelease(v6);
LABEL_19:
  if ((v4 & 1) == 0)
    goto LABEL_28;
  __asm { FMOV            V0.4S, #1.0 }
  return *(double *)&_Q0;
}

void sub_182422698(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebGPU::Device::createBindGroup(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 **v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  id v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  int *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  WTF *v84;
  WTF *v85;
  int v86;
  _OWORD *v87;
  _OWORD *v88;
  unsigned int *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  WTF *v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  WTF **v104;
  uint64_t v105;
  WTF *v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  WTF *v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  int *v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  int *v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  int *v142;
  int v143;
  int v144;
  WebGPU::Sampler *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  int *v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  int v161;
  uint64_t v162;
  int v163;
  void *v164;
  WTF **v165;
  uint64_t v166;
  WTF *v167;
  uint64_t v168;
  int v169;
  _OWORD *v170;
  uint64_t v171;
  void *v172;
  int v173;
  uint64_t v174;
  int *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  WTF **v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  uint64_t v183;
  unsigned int v184;
  _OWORD *v185;
  uint64_t v186;
  WTF *v187;
  uint64_t v188;
  WTF **v189;
  uint64_t v190;
  unsigned int v191;
  WTF *v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  _OWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 *v203;
  unsigned int v204;
  WTF *v205;
  _OWORD *v206;
  WTF *v207;
  WTF *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  WTF *v214;
  WTF *v215;
  WTF *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  id *v220;
  uint64_t v221;
  WTF *v222;
  id v223;
  void *v224;
  id v225;
  id v226;
  void *v227;
  id v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  WTF *v235;
  void *v236;
  WTF *v237;
  WTF *v238;
  void *v239;
  WTF *v240;
  void *v241;
  WTF *v242;
  WTF *v243;
  void *v244;
  void *v245;
  void *v246;
  WTF *v247;
  void *v248;
  WTF *v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  WTF *v253;
  WTF *v254;
  WTF *v255;
  WTF *v256;
  void *v257;
  WTF *v258;
  void *v259;
  WTF *v260;
  uint64_t v261;
  void *v262;
  WTF *v263;
  void *v264;
  WTF *v265;
  void *v266;
  WTF *v267;
  WTF *v268;
  WTF *v269;
  WTF *v270;
  void *v271;
  WTF *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  void *v277;
  _DWORD *v278;
  void *v279;
  __int128 *v280;
  WTF *v281;
  __int128 *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  id *v287;
  uint64_t v288;
  WTF *v289;
  id *v290;
  uint64_t v291;
  WTF *v292;
  id *v293;
  uint64_t v294;
  WTF *v295;
  id *v296;
  uint64_t v297;
  WTF *v298;
  id *v299;
  uint64_t v300;
  WTF *v301;
  id *v302;
  uint64_t v303;
  WTF *v304;
  id *v305;
  uint64_t v306;
  WTF *v307;
  id *v308;
  uint64_t v309;
  WTF *v310;
  id *v311;
  uint64_t v312;
  WTF *v313;
  id *v314;
  uint64_t v315;
  WTF *v316;
  id *v317;
  uint64_t v318;
  WTF *v319;
  id *v320;
  uint64_t v321;
  WTF *v322;
  void *v323;
  WTF *v324;
  WTF *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  WTF *v330;
  WTF *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  WTF *v335;
  unsigned int *v336;
  uint64_t v337;
  WTF **v338;
  uint64_t *v339;
  uint64_t v340;
  WTF *v341;
  _BOOL8 v342;
  WebGPU::TextureView **v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  WTF *v347;
  unint64_t *v348;
  uint64_t v349;
  char v350;
  int v351;
  WTF *v352;
  uint64_t v353;
  WTF *v354;
  WebGPU::Sampler **v355;
  unint64_t v356;
  uint64_t v357;
  WTF *v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  id v362;
  uint64_t v364;
  uint64_t v365;
  WTF *v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;
  WTF *v370[2];
  WTF *v371[2];
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  WTF *v377;
  uint64_t *v378;
  WTF *v379;
  uint64_t v380;
  id v381;
  void *v382;
  void *v383;
  id v384;
  id v385;
  id v386;
  char v387;
  _OWORD v388[12];
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  uint64_t v401;

  v3 = (unsigned __int8 **)a1;
  v401 = *MEMORY[0x1E0C80C00];
  if (*a2 || (v7 = a2[2]) == 0 || !*(_QWORD *)(a1 + 8))
  {
    v5 = WTF::fastMalloc((WTF *)0x68);
    WebGPU::BindGroup::BindGroup(v5, v3);
LABEL_3:
    *a3 = v5;
    return;
  }
  if (!*(_BYTE *)(v7 + 72))
    goto LABEL_12;
  if (!*(_BYTE *)(v7 + 120))
  {
    v8 = *(_QWORD *)(v7 + 48);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
    if (a2[3] != v8)
      goto LABEL_12;
  }
  if (*(_QWORD *)(v7 + 104) != a1)
  {
LABEL_12:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("invalid BindGroupLayout createBindGroup"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v389, v9);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = 32 * *(unsigned int *)(a1 + 44);
    v12 = v10 + v11;
    while (v11)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v12 -= 32;
      v11 -= 32;
      if (!v13)
      {
        v14 = v10 + v11;
        if (!*(_BYTE *)(v14 + 16))
        {
          v15 = v389;
          *(_QWORD *)&v389 = 0;
          *(_DWORD *)v14 = 1;
          *(_QWORD *)(v14 + 8) = v15;
          *(_BYTE *)(v14 + 16) = 1;
        }
        goto LABEL_20;
      }
    }
    v16 = *(_QWORD *)(a1 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v16 + 16))(v16, 1, &v389);
      v17 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
LABEL_20:
    v18 = (_DWORD *)v389;
    *(_QWORD *)&v389 = 0;
    if (v18)
    {
      if (*v18 == 2)
        WTF::StringImpl::destroy();
      else
        *v18 -= 2;
    }

    v5 = WTF::fastMalloc((WTF *)0x68);
    WebGPU::BindGroup::BindGroup(v5, (unsigned __int8 **)a1);
    goto LABEL_3;
  }
  v19 = *(id *)(v7 + 24);
  v20 = *(id *)(v7 + 32);
  v21 = *(id *)(v7 + 40);
  v384 = v19;
  v385 = v20;
  v386 = v21;
  v381 = 0;
  v382 = 0;
  v383 = 0;
  v22 = objc_msgSend(*(id *)(v7 + 24), "encodedLength");
  if (v22)
  {
    WebGPU::Device::safeCreateBuffer((WebGPU::Device *)v3, v22, MTLStorageModeShared, MTLCPUCacheModeDefaultCache, MTLHazardTrackingModeDefault);
    v23 = (id)objc_claimAutoreleasedReturnValue();
    v381 = v23;
  }
  else
  {
    v23 = 0;
    v381 = 0;
  }

  objc_msgSend(v19, "setArgumentBuffer:offset:", v23, 0);
  v24 = objc_msgSend(*(id *)(v7 + 32), "encodedLength");
  if (v24)
  {
    WebGPU::Device::safeCreateBuffer((WebGPU::Device *)v3, v24, MTLStorageModeShared, MTLCPUCacheModeDefaultCache, MTLHazardTrackingModeDefault);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    v382 = v25;
  }
  else
  {
    v25 = 0;
    v382 = 0;
  }

  objc_msgSend(v20, "setArgumentBuffer:offset:", v382, 0);
  v26 = objc_msgSend(*(id *)(v7 + 40), "encodedLength");
  if (v26)
  {
    WebGPU::Device::safeCreateBuffer((WebGPU::Device *)v3, v26, MTLStorageModeShared, MTLCPUCacheModeDefaultCache, MTLHazardTrackingModeDefault);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    v383 = v27;
  }
  else
  {
    v27 = 0;
    v383 = 0;
  }

  objc_msgSend(v21, "setArgumentBuffer:offset:", v383, 0);
  v334 = a3;
  v28 = 0uLL;
  v399 = 0u;
  v400 = 0u;
  v397 = 0u;
  v398 = 0u;
  v395 = 0u;
  v396 = 0u;
  v393 = 0u;
  v394 = 0u;
  v391 = 0u;
  v392 = 0u;
  v389 = 0u;
  v390 = 0u;
  memset(v388, 0, sizeof(v388));
  v29 = a2[3];
  v360 = v7;
  if (v29)
  {
    if (v29 >= 0x4924925)
    {
      __break(0xC471u);
LABEL_585:
      JUMPOUT(0x182425190);
    }
    v30 = a2[4];
    v31 = WTF::fastMalloc((WTF *)(56 * v29));
    v32 = 0;
    do
    {
      v33 = v31 + v32;
      v28 = *(__n128 *)(v30 + v32);
      v34 = *(_OWORD *)(v30 + v32 + 16);
      v35 = *(_OWORD *)(v30 + v32 + 32);
      *(_QWORD *)(v33 + 48) = *(_QWORD *)(v30 + v32 + 48);
      *(_OWORD *)(v33 + 16) = v34;
      *(_OWORD *)(v33 + 32) = v35;
      *(__n128 *)v33 = v28;
      v32 += 56;
    }
    while (56 * v29 != v32);
  }
  else
  {
    v31 = 0;
  }
  v36 = 126 - 2 * __clz(v29);
  if ((_DWORD)v29)
    v37 = v36;
  else
    v37 = 0;
  v335 = (WTF *)v31;
  *(double *)&v39 = std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *,false>(v31, v31 + 56 * v29, v37, 1, v28);
  v379 = 0;
  v380 = 0;
  v378 = 0;
  if (!*((_DWORD *)a2 + 6))
  {
LABEL_332:
    v199 = 0;
    v367 = 0uLL;
    while (1)
    {
      v200 = 0;
      v365 = v199;
      v201 = (int)(dword_18260EE80[v199] - 1);
      do
      {
        if (v201 > 2)
        {
          v202 = 1;
          v203 = &v392 + v200;
          v204 = *((_DWORD *)v203 + 3);
          if (!v204)
          {
LABEL_335:
            ++v200;
            continue;
          }
        }
        else
        {
          v202 = qword_18260EF10[v201];
          v203 = &v389 + 3 * v202 + v200;
          v204 = *((_DWORD *)v203 + 3);
          if (!v204)
            goto LABEL_335;
        }
        v205 = *(WTF **)v203;
        *(_QWORD *)v203 = 0;
        v206 = &v388[3 * v202 + v200];
        v370[0] = v205;
        LODWORD(v205) = *((_DWORD *)v203 + 2);
        *((_QWORD *)v203 + 1) = 0;
        v370[1] = (WTF *)__PAIR64__(v204, v205);
        v207 = *(WTF **)v206;
        *(_QWORD *)v206 = 0;
        v371[0] = v207;
        v208 = (WTF *)*((_QWORD *)v206 + 1);
        *((_QWORD *)v206 + 1) = 0;
        v371[1] = v208;
        *(_QWORD *)&v372 = ++v200;
        *((_QWORD *)&v372 + 1) = v202;
        if (HIDWORD(v367) == DWORD2(v367))
        {
          v209 = WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v367, HIDWORD(v367) + 1, (unint64_t)v370);
          v210 = v367 + 48 * HIDWORD(v367);
          *(_QWORD *)v210 = 0;
          *(_QWORD *)(v210 + 8) = 0;
          v211 = *(_QWORD *)v209;
          *(_QWORD *)v209 = 0;
          *(_QWORD *)v210 = v211;
          LODWORD(v211) = *((_DWORD *)v209 + 2);
          *((_DWORD *)v209 + 2) = 0;
          *(_DWORD *)(v210 + 8) = v211;
          LODWORD(v211) = *((_DWORD *)v209 + 3);
          *((_DWORD *)v209 + 3) = 0;
          *(_DWORD *)(v210 + 12) = v211;
          *(_QWORD *)(v210 + 16) = 0;
          *(_QWORD *)(v210 + 24) = 0;
          v212 = *((_QWORD *)v209 + 2);
          *((_QWORD *)v209 + 2) = 0;
          *(_QWORD *)(v210 + 16) = v212;
          LODWORD(v212) = *((_DWORD *)v209 + 6);
          *((_DWORD *)v209 + 6) = 0;
          *(_DWORD *)(v210 + 24) = v212;
          LODWORD(v212) = *((_DWORD *)v209 + 7);
          *((_DWORD *)v209 + 7) = 0;
          *(_DWORD *)(v210 + 28) = v212;
          v213 = *((_OWORD *)v209 + 2);
        }
        else
        {
          v210 = v367 + 48 * HIDWORD(v367);
          *(_QWORD *)v210 = 0;
          *(_QWORD *)(v210 + 8) = 0;
          v214 = v370[0];
          v370[0] = 0;
          *(_QWORD *)v210 = v214;
          LODWORD(v214) = v370[1];
          LODWORD(v370[1]) = 0;
          *(_DWORD *)(v210 + 8) = (_DWORD)v214;
          LODWORD(v214) = HIDWORD(v370[1]);
          HIDWORD(v370[1]) = 0;
          *(_DWORD *)(v210 + 12) = (_DWORD)v214;
          *(_QWORD *)(v210 + 16) = 0;
          *(_QWORD *)(v210 + 24) = 0;
          v215 = v371[0];
          v371[0] = 0;
          *(_QWORD *)(v210 + 16) = v215;
          LODWORD(v215) = v371[1];
          LODWORD(v371[1]) = 0;
          *(_DWORD *)(v210 + 24) = (_DWORD)v215;
          LODWORD(v215) = HIDWORD(v371[1]);
          HIDWORD(v371[1]) = 0;
          *(_DWORD *)(v210 + 28) = (_DWORD)v215;
          v213 = v372;
        }
        *(_OWORD *)(v210 + 32) = v213;
        ++HIDWORD(v367);
        v216 = v371[0];
        if (HIDWORD(v371[1]))
        {
          v217 = 32 * HIDWORD(v371[1]);
          v218 = (char *)v371[0] + 8;
          do
          {
            v219 = *((unsigned int *)v218 + 2);
            if ((_DWORD)v219 != -1)
              ((void (*)(WTF **, char *))off_1E0FD1580[v219])(&v377, v218);
            *((_DWORD *)v218 + 2) = -1;
            v218 += 32;
            v217 -= 32;
          }
          while (v217);
          v216 = v371[0];
        }
        if (v216)
        {
          v371[0] = 0;
          LODWORD(v371[1]) = 0;
          WTF::fastFree(v216, v38);
        }
        if (HIDWORD(v370[1]))
        {
          v220 = (id *)v370[0];
          v221 = 8 * HIDWORD(v370[1]);
          do
          {

            v221 -= 8;
          }
          while (v221);
        }
        v222 = v370[0];
        if (v370[0])
        {
          v370[0] = 0;
          LODWORD(v370[1]) = 0;
          WTF::fastFree(v222, v38);
        }
      }
      while (v200 != 3);
      v199 = v365 + 1;
      if (v365 == 3)
      {
        v223 = *(id *)(v360 + 24);
        objc_msgSend(v223, "label");
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        v225 = v381;
        objc_msgSend(v381, "setLabel:", v224);

        v226 = *(id *)(v360 + 32);
        objc_msgSend(v226, "label");
        v227 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v382, "setLabel:", v227);

        v228 = *(id *)(v360 + 40);
        objc_msgSend(v228, "label");
        v229 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v383, "setLabel:", v229);

        WebGPU::BindGroup::create(v334, v225, v382, v383, (uint64_t *)&v367, (_DWORD *)v360, (uint64_t *)&v379, (uint64_t *)&v378, (unsigned __int8 **)a1);
        WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v367, v230);
        goto LABEL_458;
      }
    }
  }
  v40 = 0;
  v332 = *((unsigned int *)a2 + 6);
LABEL_45:
  v41 = a2[4];
  v42 = (uint64_t *)(v41 + 56 * v40);
  v43 = *v42;
  if (*v42)
  {
    if (*(_DWORD *)(v43 + 8) != -140055559)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), *(double *)&v39, CFSTR("Unknown chain object in WGPUBindGroupEntry"));
      v236 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](v370, v236);
      WebGPU::Device::generateAValidationError((uint64_t)v3, (uint64_t *)v370);
      v254 = v370[0];
      v370[0] = 0;
      if (v254)
      {
        if (*(_DWORD *)v254 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v254 -= 2;
      }
      goto LABEL_437;
    }
    if (*(_QWORD *)v43)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), *(double *)&v39, CFSTR("Unknown chain object in WGPUBindGroupEntry"));
      v236 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](v370, v236);
      WebGPU::Device::generateAValidationError((uint64_t)v3, (uint64_t *)v370);
      v255 = v370[0];
      v370[0] = 0;
      if (v255)
      {
        if (*(_DWORD *)v255 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v255 -= 2;
      }
      goto LABEL_437;
    }
    v44 = *(_QWORD *)(v43 + 16);
  }
  else
  {
    v44 = 0;
  }
  v45 = v42[2];
  v46 = v44 != 0;
  if (v45)
    ++v46;
  v47 = v42[6];
  v361 = v42[5];
  if (v361)
    v48 = v46 + 1;
  else
    v48 = v46;
  v357 = v47;
  if (v47)
    ++v48;
  v49 = v360;
  if (v48 != 1)
  {
    v250 = WTF::fastMalloc((WTF *)0x68);
    WebGPU::BindGroup::BindGroup(v250, v3);
    goto LABEL_438;
  }
  v333 = v40;
  v50 = v41 + 56 * v40;
  v52 = *(_DWORD *)(v50 + 8);
  v51 = v50 + 8;
  v53 = 9 * ((v52 + ~(v52 << 15)) ^ ((v52 + ~(v52 << 15)) >> 10));
  v359 = ((v53 ^ (v53 >> 6)) + ~((v53 ^ (v53 >> 6)) << 11)) ^ (((v53 ^ (v53 >> 6)) + ~((v53 ^ (v53 >> 6)) << 11)) >> 16);
  v364 = v52;
  v356 = ~((unint64_t)v52 << 32);
  v336 = (unsigned int *)v51;
  if (v45)
  {
    v54 = 0;
    v350 = 0;
    v55 = 0;
    v348 = (unint64_t *)(v51 + 16);
    v338 = (WTF **)(v51 + 24);
    v339 = (uint64_t *)(v51 + 8);
    while (1)
    {
      v56 = dword_18260EE80[v54];
      v57 = WebGPU::BindGroupLayout::argumentBufferIndexForEntryIndex(v49, v364, dword_18260EE80[v54]);
      if (v57 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_62;
      v58 = *(_QWORD *)(v49 + 16);
      if (!v58)
        goto LABEL_578;
      v353 = (int)v56;
      v59 = v364 | ((uint64_t)(int)v56 << 32);
      v60 = *(_DWORD *)(v58 - 8);
      v61 = ((v59 + v356) ^ ((v59 + v356) >> 22)) + ~(((v59 + v356) ^ ((v59 + v356) >> 22)) << 13);
      v62 = (9 * (v61 ^ (v61 >> 8))) ^ ((9 * (v61 ^ (v61 >> 8))) >> 15);
      v63 = v60 & (((v62 + ~(v62 << 27)) >> 31) ^ ((_DWORD)v62 + ~((_DWORD)v62 << 27)));
      v64 = *(_QWORD *)(v58 + 16 * v63);
      if (v64 != v59)
      {
        v65 = 1;
        while (v64 != -1)
        {
          v63 = ((_DWORD)v63 + v65) & v60;
          v64 = *(_QWORD *)(v58 + 16 * v63);
          ++v65;
          if (v64 == v59)
            goto LABEL_71;
        }
        v63 = *(unsigned int *)(v58 - 4);
      }
LABEL_71:
      if (v63 == *(_DWORD *)(v58 - 4))
        goto LABEL_578;
      v66 = *(_QWORD *)(v58 + 16 * v63 + 8);
      v67 = *(_QWORD *)(v49 + 48);
      if ((_DWORD)v56 == 3)
      {
        v68 = a1;
        v69 = v364;
        if (!v67)
          goto LABEL_579;
      }
      else
      {
        v68 = a1;
        v69 = v364;
        if (!v67)
          goto LABEL_579;
        v70 = *(_DWORD *)(v67 - 8);
        v71 = v70 & v359;
        v72 = (int *)(v67 + 136 * (v70 & v359));
        v73 = *v72;
        if (*v72 != (_DWORD)v364)
        {
          v74 = 1;
          while (v73 != -1)
          {
            v71 = (v71 + v74) & v70;
            v72 = (int *)(v67 + 136 * v71);
            v73 = *v72;
            ++v74;
            if (*v72 == (_DWORD)v364)
              goto LABEL_82;
          }
          v72 = (int *)(v67 + 136 * *(unsigned int *)(v67 - 4));
        }
LABEL_82:
        if (v72 != (int *)(v67 + 136 * *(unsigned int *)(v67 - 4)))
        {
          if (v56 >= 3)
            goto LABEL_568;
          v75 = *(_QWORD *)&v72[2 * v56 + 20];
          v76 = v75 & 0xFF00000000;
          v77 = v75;
          goto LABEL_86;
        }
      }
      v77 = 0;
      v76 = 0;
LABEL_86:
      v78 = *(_DWORD *)(v67 - 8);
      v79 = v78 & v359;
      v55 = v67 + 136 * (v78 & v359);
      v80 = *(_DWORD *)v55;
      if (*(_DWORD *)v55 != v69)
      {
        v81 = 1;
        while (v80 != -1)
        {
          v79 = (v79 + v81) & v78;
          v55 = v67 + 136 * v79;
          v80 = *(_DWORD *)v55;
          ++v81;
          if (*(_DWORD *)v55 == v69)
            goto LABEL_92;
        }
        v55 = v67 + 136 * *(unsigned int *)(v67 - 4);
      }
LABEL_92:
      if (v55 == v67 + 136 * *(unsigned int *)(v67 - 4))
      {
LABEL_579:
        __break(0xC471u);
        JUMPOUT(0x1824251B0);
      }
      if (*(_DWORD *)(v55 + 48))
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Expected buffer but it was not present in the bind group layout"));
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x186DAB230](v370, v236);
        WebGPU::Device::generateAValidationError(v68, (uint64_t *)v370);
        v237 = v370[0];
        v370[0] = 0;
        if (v237)
        {
          if (*(_DWORD *)v237 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v237 -= 2;
        }
        goto LABEL_437;
      }
      v340 = v76;
      v342 = v66 == 2;
      v337 = v77;
      v344 = v66;
      v82 = *v339;
      v362 = *(id *)(*v339 + 16);
      *(_QWORD *)&v367 = v362;
      if (*(_BYTE *)(v82 + 52) == 4)
        v83 = 0;
      else
        v83 = *v348;
      if (objc_msgSend(v362, "length") <= v83)
        v84 = 0;
      else
        v84 = (WTF *)(objc_msgSend(v362, "length") - v83);
      v85 = *v338;
      if (*v338 == (WTF *)-1)
        v85 = v84;
      v358 = v85;
      if (!((*(_DWORD *)(v55 + 28) == 0) | v350 & 1))
      {
        LODWORD(v370[0]) = *(_DWORD *)(v55 + 24);
        v370[1] = v85;
        v371[0] = v84;
        LODWORD(v371[1]) = v69;
        v86 = HIDWORD(v380);
        if (HIDWORD(v380) == (_DWORD)v380)
        {
          v87 = (_OWORD *)WTF::Vector<WebGPU::BindGroup::BufferAndType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v379, HIDWORD(v380) + 1, (unint64_t)v370);
          v86 = HIDWORD(v380);
          v88 = (_OWORD *)((char *)v379 + 32 * HIDWORD(v380));
          v39 = v87[1];
          *v88 = *v87;
        }
        else
        {
          v88 = (_OWORD *)((char *)v379 + 32 * HIDWORD(v380));
          v39 = *(_OWORD *)v371;
          *v88 = *(_OWORD *)v370;
        }
        v88[1] = v39;
        HIDWORD(v380) = v86 + 1;
        v350 = 1;
      }
      v354 = (WTF *)v83;
      if (*(_BYTE *)(v82 + 52) == 4)
      {
        if (*(_QWORD *)(v82 + 256) != v68)
          goto LABEL_391;
        v89 = (unsigned int *)(v55 + 24);
      }
      else
      {
        if (!*(_QWORD *)(v82 + 16) || *(_QWORD *)(v82 + 256) != v68)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Buffer is invalid or created from a different device"));
          v239 = (void *)objc_claimAutoreleasedReturnValue();
          MEMORY[0x186DAB230](v370, v239);
          WebGPU::Device::generateAValidationError(v68, (uint64_t *)v370);
          v240 = v370[0];
          v370[0] = 0;
          if (v240)
          {
            if (*(_DWORD *)v240 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v240 -= 2;
          }

          v68 = a1;
LABEL_391:
          v251 = WTF::fastMalloc((WTF *)0x68);
          WebGPU::BindGroup::BindGroup(v251, (unsigned __int8 **)v68);
          *v334 = v251;
          goto LABEL_457;
        }
        v89 = (unsigned int *)(v55 + 24);
        v68 = *(unsigned int *)(v55 + 24);
        v90 = *v348;
        if (v90 >= objc_msgSend(v362, "length"))
        {
          v248 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected entry.offset(%llu) >= buffer length(%lu)"), *v348, objc_msgSend(v362, "length"));
          v233 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v248, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v233);
          v234 = (void *)objc_claimAutoreleasedReturnValue();
          MEMORY[0x186DAB230](v370, v234);
          WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
          v249 = v370[0];
          v370[0] = 0;
          if (v249)
          {
            if (*(_DWORD *)v249 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v249 -= 2;
          }
LABEL_456:

          WebGPU::BindGroup::createInvalid((WebGPU::BindGroup *)v334, (unsigned __int8 **)a1);
LABEL_457:

          goto LABEL_458;
        }
        v91 = *(unsigned int *)(v82 + 48);
        if (*v89 - 2 >= 2)
        {
          if (*v89 != 1 || (v91 & 0x40) == 0)
          {
LABEL_370:
            v241 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected type(%u), buffer.usage(%u)"), *v89, v91);
            v233 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v241, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v233);
            v234 = (void *)objc_claimAutoreleasedReturnValue();
            MEMORY[0x186DAB230](v370, v234);
            WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
            v242 = v370[0];
            v370[0] = 0;
            if (v242)
            {
              if (*(_DWORD *)v242 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v242 -= 2;
            }
            goto LABEL_456;
          }
        }
        else if ((v91 & 0x80) == 0)
        {
          goto LABEL_370;
        }
        if ((_DWORD)v68 == 1)
        {
          v92 = *v348;
          v93 = a1;
          if (*v348 % *(unsigned int *)(a1 + 144))
          {
            v96 = *(unsigned int *)(a1 + 148);
LABEL_421:
            v261 = v93;
            v262 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer offset(%llu) is not a multiple of the device buffer alignment(%u)"), v92, v96);
            v233 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v262, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v233);
            v234 = (void *)objc_claimAutoreleasedReturnValue();
            MEMORY[0x186DAB230](v370, v234);
            WebGPU::Device::generateAValidationError(v261, (uint64_t *)v370);
            v263 = v370[0];
            v370[0] = 0;
            if (v263)
            {
              if (*(_DWORD *)v263 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v263 -= 2;
            }
            goto LABEL_456;
          }
          v94 = *(_QWORD *)(a1 + 128);
          v95 = v358;
          if ((unint64_t)v358 > v94)
            goto LABEL_392;
        }
        else
        {
          v95 = v358;
          if ((v68 & 0xFFFFFFFE) == 2)
          {
            v92 = *v348;
            v93 = a1;
            v96 = *(unsigned int *)(a1 + 148);
            if (*v348 % v96)
              goto LABEL_421;
            v94 = *(_QWORD *)(a1 + 136);
            if ((unint64_t)v358 > v94)
            {
LABEL_392:
              v252 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer size(%llu) is larger than the device limits(%llu)"), v95, v94);
              v233 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v252, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v233);
              v234 = (void *)objc_claimAutoreleasedReturnValue();
              MEMORY[0x186DAB230](v370, v234);
              WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
              v253 = v370[0];
              v370[0] = 0;
              if (v253)
              {
                if (*(_DWORD *)v253 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v253 -= 2;
              }
              goto LABEL_456;
            }
            if ((v358 & 3) != 0)
            {
              v264 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Storage buffer size(%llu) is not multiple of 4"), v358);
              v233 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v264, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v233);
              v234 = (void *)objc_claimAutoreleasedReturnValue();
              MEMORY[0x186DAB230](v370, v234);
              WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
              v265 = v370[0];
              v370[0] = 0;
              if (v265)
              {
                if (*(_DWORD *)v265 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v265 -= 2;
              }
              goto LABEL_456;
            }
          }
        }
        if (!v95
          || (WTF *)((char *)v354 + (_QWORD)v358) > (WTF *)objc_msgSend(v362, "length")
          || (v97 = *(_QWORD *)(v55 + 32)) != 0 && v97 > (unint64_t)v358)
        {
          v232 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("entrySize == 0 or entrySize(%llu) + entryOffset(%llu) > buffer size(%lu) or layoutBinding->minBindingSize(%llu) > entrySize(%llu)"), v358, v354, objc_msgSend(v362, "length"), *(_QWORD *)(v55 + 32), v358);
          v233 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v232, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v233);
          v234 = (void *)objc_claimAutoreleasedReturnValue();
          MEMORY[0x186DAB230](v370, v234);
          WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
          v235 = v370[0];
          v370[0] = 0;
          if (v235)
          {
            if (*(_DWORD *)v235 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v235 -= 2;
          }
          goto LABEL_456;
        }
      }
      if ((_DWORD)v56 != 3 && objc_msgSend(v362, "length"))
      {
        if (v56 > 2)
          goto LABEL_568;
        v98 = *(&v384 + v56);
        objc_msgSend(v98, "setBuffer:offset:atIndex:", v362, v354, v57);
        if (v340)
        {
          v99 = objc_msgSend(v362, "length");
          v100 = (unsigned int *)objc_msgSend(v98, "constantDataAtIndex:", v337);
          if (v99 >= v358)
            v101 = v358;
          else
            v101 = v99;
          *v100 = v101;
        }
      }
      if (v362)
      {
        if ((v56 - 1) > 2)
          v102 = 1;
        else
          v102 = qword_18260EF10[(int)v56 - 1];
        if (v344 == 1)
          v103 = 2;
        else
          v103 = v342;
        v104 = (WTF **)(&v389 + 3 * v102 + v103);
        v105 = *((unsigned int *)v104 + 3);
        if ((_DWORD)v105 == *((_DWORD *)v104 + 2))
        {
          WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(v104, (id *)&v367);
        }
        else
        {
          v106 = *v104;
          *((_QWORD *)v106 + v105) = v362;
          ++*((_DWORD *)v104 + 3);
        }
        if ((v353 - 1) > 2)
          v107 = 1;
        else
          v107 = qword_18260EF10[(int)v353 - 1];
        v108 = 0;
        v109 = *v89;
        if ((int)*v89 > 2)
        {
          v110 = v354;
          if (v109 == 3)
          {
            v108 = 8;
          }
          else if (v109 == 0x7FFFFFFF)
          {
            __break(0xC471u);
            JUMPOUT(0x182425210);
          }
        }
        else
        {
          v110 = v354;
          if (v109 == 1)
          {
            v108 = 2;
          }
          else if (v109 == 2)
          {
            v108 = 4;
          }
        }
        v370[0] = (WTF *)__PAIR64__(*v336, v108);
        ++*(_DWORD *)v82;
        v370[1] = (WTF *)v82;
        LODWORD(v371[0]) = 0;
        v371[1] = v110;
        v111 = &v388[3 * v107 + v103];
        v112 = *((unsigned int *)v111 + 3);
        if ((_DWORD)v112 == *((_DWORD *)v111 + 2))
        {
          WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>((uint64_t)v111, (unint64_t)v370);
        }
        else
        {
          WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(*(_QWORD *)v111 + 32 * v112, (uint64_t)v370);
          ++*((_DWORD *)v111 + 3);
        }
        if (LODWORD(v371[0]) != -1)
          ((void (*)(WTF **, WTF **))off_1E0FD1580[LODWORD(v371[0])])(&v377, &v370[1]);

      }
      v55 = 1;
      v49 = v360;
LABEL_62:
      if (++v54 == 4)
        goto LABEL_329;
    }
  }
  v349 = v44;
  v113 = 0;
  v55 = 0;
  v343 = (WebGPU::TextureView **)(v51 + 40);
  v355 = (WebGPU::Sampler **)(v51 + 32);
  while (1)
  {
    v114 = dword_18260EE80[v113];
    v115 = WebGPU::BindGroupLayout::argumentBufferIndexForEntryIndex(v49, v364, dword_18260EE80[v113]);
    if (v115 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_167;
    v116 = *(_QWORD *)(v49 + 16);
    if (!v116)
      goto LABEL_578;
    v117 = v114;
    v118 = v364 | ((uint64_t)(int)v114 << 32);
    v119 = *(_DWORD *)(v116 - 8);
    v120 = ((v118 + v356) ^ ((v118 + v356) >> 22)) + ~(((v118 + v356) ^ ((v118 + v356) >> 22)) << 13);
    v121 = (9 * (v120 ^ (v120 >> 8))) ^ ((9 * (v120 ^ (v120 >> 8))) >> 15);
    v122 = v119 & (((v121 + ~(v121 << 27)) >> 31) ^ ((_DWORD)v121 + ~((_DWORD)v121 << 27)));
    v123 = *(_QWORD *)(v116 + 16 * v122);
    if (v123 != v118)
    {
      v124 = 1;
      while (v123 != -1)
      {
        v122 = ((_DWORD)v122 + v124) & v119;
        v123 = *(_QWORD *)(v116 + 16 * v122);
        ++v124;
        if (v123 == v118)
          goto LABEL_176;
      }
      v122 = *(unsigned int *)(v116 - 4);
    }
LABEL_176:
    if (v122 == *(_DWORD *)(v116 - 4))
    {
LABEL_578:
      __break(0xC471u);
      goto LABEL_585;
    }
    v125 = *(_QWORD *)(v116 + 16 * v122 + 8);
    v68 = a1;
    if ((_DWORD)v114 != 3)
    {
      v126 = *(_QWORD *)(v49 + 48);
      if (v126)
      {
        v127 = *(_DWORD *)(v126 - 8);
        v128 = v127 & v359;
        v129 = (int *)(v126 + 136 * (v127 & v359));
        v130 = *v129;
        if (*v129 != (_DWORD)v364)
        {
          v131 = 1;
          while (v130 != -1)
          {
            v128 = (v128 + v131) & v127;
            v129 = (int *)(v126 + 136 * v128);
            v130 = *v129;
            ++v131;
            if (*v129 == (_DWORD)v364)
              goto LABEL_185;
          }
          v129 = (int *)(v126 + 136 * *(unsigned int *)(v126 - 4));
        }
LABEL_185:
        if (v114 >= 3 && v129 != (int *)(v126 + 136 * *(unsigned int *)(v126 - 4)))
        {
LABEL_568:
          __break(1u);
LABEL_569:
          WTF::StringImpl::destroy();
          goto LABEL_452;
        }
      }
    }
    v132 = 1;
    if (v125 == 2)
      v132 = 2;
    if (v125 == 1)
      v55 = 3;
    else
      v55 = v132;
    if (v361)
    {
      v133 = *(_QWORD *)(v49 + 48);
      if (!v133)
        goto LABEL_580;
      v134 = *(_DWORD *)(v133 - 8);
      v135 = v134 & v359;
      v136 = (int *)(v133 + 136 * (v134 & v359));
      v137 = *v136;
      if (*v136 != (_DWORD)v364)
      {
        v138 = 1;
        while (v137 != -1)
        {
          v135 = (v135 + v138) & v134;
          v136 = (int *)(v133 + 136 * v135);
          v137 = *v136;
          ++v138;
          if (*v136 == (_DWORD)v364)
            goto LABEL_207;
        }
        v136 = (int *)(v133 + 136 * *(unsigned int *)(v133 - 4));
      }
LABEL_207:
      if (v136 == (int *)(v133 + 136 * *(unsigned int *)(v133 - 4)))
      {
LABEL_580:
        __break(0xC471u);
        JUMPOUT(0x1824251D0);
      }
      if (v136[12] == 1)
      {
        v145 = *v355;
        if (*((_QWORD *)*v355 + 1) && *((_QWORD *)v145 + 9) == a1)
        {
          v146 = v115;
          v147 = v136[6];
          if (!WebGPU::validateSamplerType(v136[6], *v355))
          {
            v244 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Expected sampler type(%u) has wrong comparison or filtering modes"), v147);
            v245 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v244, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v245);
            v246 = (void *)objc_claimAutoreleasedReturnValue();
            MEMORY[0x186DAB230](v370, v246);
            WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
            v247 = v370[0];
            v370[0] = 0;
            if (v247)
            {
              if (*(_DWORD *)v247 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v247 -= 2;
            }
            goto LABEL_410;
          }
          WebGPU::Sampler::samplerState(v145);
          v55 = objc_claimAutoreleasedReturnValue();
          if ((_DWORD)v114 != 3)
          {
            if (v114 >= 3)
              goto LABEL_568;
            objc_msgSend(*(&v384 + v114), "setSamplerState:atIndex:", v55, v146);
            ++*(_DWORD *)v145;
            v377 = v145;
            v367 = 0uLL;
            v368 = 0;
            WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::add<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>((uint64_t)v370, (uint64_t *)&v378, (uint64_t *)&v377, &v367);
            v148 = (char *)v370[0] + 8 * v114;
            if (!v148[12])
              v148[12] = 1;
            *((_DWORD *)v148 + 2) = v146;
            if (v377)
              WTF::RefCounted<WebGPU::Sampler>::deref((uint64_t)v377);
          }

          goto LABEL_166;
        }
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Underlying sampler is not valid or created from a different device"));
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x186DAB230](v370, v236);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
        v238 = v370[0];
        v370[0] = 0;
        if (v238)
        {
          if (*(_DWORD *)v238 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v238 -= 2;
        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Expected sampler but it was not present in the bind group layout"));
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x186DAB230](v370, v236);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
        v243 = v370[0];
        v370[0] = 0;
        if (v243)
        {
          if (*(_DWORD *)v243 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v243 -= 2;
        }
      }
LABEL_437:

      v250 = WTF::fastMalloc((WTF *)0x68);
      WebGPU::BindGroup::BindGroup(v250, (unsigned __int8 **)a1);
LABEL_438:
      *v334 = v250;
      goto LABEL_458;
    }
    if (!v357)
    {
      if (!v349)
      {
        v55 = 1;
        goto LABEL_167;
      }
      v149 = *(_QWORD *)(v49 + 48);
      if (!v149)
        goto LABEL_583;
      v150 = *(_DWORD *)(v149 - 8);
      v151 = v150 & v359;
      v152 = (int *)(v149 + 136 * (v150 & v359));
      v153 = *v152;
      if (*v152 != (_DWORD)v364)
      {
        v154 = 1;
        while (v153 != -1)
        {
          v151 = (v151 + v154) & v150;
          v152 = (int *)(v149 + 136 * v151);
          v153 = *v152;
          ++v154;
          if (*v152 == (_DWORD)v364)
            goto LABEL_288;
        }
        v152 = (int *)(v149 + 136 * *(unsigned int *)(v149 - 4));
      }
LABEL_288:
      if (v152 == (int *)(v149 + 136 * *(unsigned int *)(v149 - 4)))
      {
LABEL_583:
        __break(0xC471u);
        JUMPOUT(0x182425230);
      }
      if (v152[12] != 4)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Expected external texture but it was not present in the bind group layout"));
        v266 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x186DAB230](v370, v266);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
        v267 = v370[0];
        v370[0] = 0;
        if (v267)
        {
          if (*(_DWORD *)v267 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v267 -= 2;
        }

        WebGPU::BindGroup::createInvalid((WebGPU::BindGroup *)v334, (unsigned __int8 **)a1);
        goto LABEL_458;
      }
      v353 = v115;
      WebGPU::Device::createExternalTextureFromPixelBuffer((uint64_t)v370, a1, *(__CVBuffer **)(v349 + 16));
      v341 = v370[0];
      if (v370[0])
      {
        v352 = v370[0];
        v377 = v352;
LABEL_293:
        if ((v114 - 1) > 2)
          v177 = 1;
        else
          v177 = qword_18260EF10[(int)v114 - 1];
        v346 = v55;
        v178 = v55 - 1;
        v179 = (WTF **)(&v389 + 3 * v177 + v178);
        v180 = *((unsigned int *)v179 + 3);
        if ((_DWORD)v180 == *((_DWORD *)v179 + 2))
        {
          WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(v179, (id *)&v377);
        }
        else
        {
          v181 = v68;
          v182 = *v179;
          *((_QWORD *)v182 + v180) = v352;
          v68 = v181;
          v117 = v114;
          ++*((_DWORD *)v179 + 3);
        }
        if (v117 - 1 > 2)
          v183 = 1;
        else
          v183 = qword_18260EF10[v117 - 1];
        v184 = *v336;
        LODWORD(v367) = 64;
        DWORD1(v367) = v184;
        ++*(_DWORD *)v349;
        *((_QWORD *)&v367 + 1) = v349;
        LODWORD(v368) = 2;
        v369 = 0;
        v185 = &v388[3 * v183 + v178];
        v186 = *((unsigned int *)v185 + 3);
        if ((_DWORD)v186 == *((_DWORD *)v185 + 2))
        {
          WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>((uint64_t)v185, (unint64_t)&v367);
          v55 = v346;
        }
        else
        {
          WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(*(_QWORD *)v185 + 32 * v186, (uint64_t)&v367);
          v55 = v346;
          ++*((_DWORD *)v185 + 3);
        }
        if ((_DWORD)v368 != -1)
          ((void (*)(WTF **, char *))off_1E0FD1580[v368])(&v366, (char *)&v367 + 8);
      }
      else
      {
        v377 = (WTF *)*(id *)(a1 + 280);
        v352 = v377;

        v68 = a1;
        if (v352)
          goto LABEL_293;
        v352 = 0;
      }
      v347 = v370[1];
      if (v370[1])
      {
        v187 = v370[1];
        v366 = v187;
LABEL_311:
        if ((v114 - 1) > 2)
          v188 = 1;
        else
          v188 = qword_18260EF10[(int)v114 - 1];
        v68 = v55 - 1;
        v189 = (WTF **)(&v389 + 3 * v188 + v55 - 1);
        v190 = *((unsigned int *)v189 + 3);
        if ((_DWORD)v190 == *((_DWORD *)v189 + 2))
        {
          WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(v189, (id *)&v366);
        }
        else
        {
          v191 = v117;
          v192 = *v189;
          *((_QWORD *)v192 + v190) = v187;
          v117 = v191;
          ++*((_DWORD *)v189 + 3);
        }
        if ((v114 - 1) > 2)
          v193 = 1;
        else
          v193 = qword_18260EF10[(int)v114 - 1];
        v194 = *v336;
        LODWORD(v367) = 64;
        DWORD1(v367) = v194;
        ++*(_DWORD *)v349;
        *((_QWORD *)&v367 + 1) = v349;
        LODWORD(v368) = 2;
        v369 = 0;
        v55 = (uint64_t)&v388[3 * v193 + v68];
        v195 = *(unsigned int *)(v55 + 12);
        if ((_DWORD)v195 == *(_DWORD *)(v55 + 8))
        {
          WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>(v55, (unint64_t)&v367);
        }
        else
        {
          WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(*(_QWORD *)v55 + 32 * v195, (uint64_t)&v367);
          ++*(_DWORD *)(v55 + 12);
        }
        if ((_DWORD)v368 != -1)
          ((void (*)(char *, char *))off_1E0FD1580[v368])(&v387, (char *)&v367 + 8);
      }
      else
      {
        v187 = (WTF *)*(id *)(v68 + 280);
        v366 = v187;

        if (v187)
          goto LABEL_311;
      }
      if ((_DWORD)v114 != 3)
      {
        if (v117 >= 3)
          goto LABEL_568;
        objc_msgSend(*(&v384 + v114), "setTexture:atIndex:", v352, v353);
        v196 = *(&v384 + v114);
        v187 = v366;
        objc_msgSend(v196, "setTexture:atIndex:", v366, v353 + 1);
        v197 = objc_msgSend(v196, "constantDataAtIndex:", v353 + 2);
        *(_OWORD *)v197 = *(_OWORD *)v371;
        *(_QWORD *)(v197 + 16) = v372;
        v198 = (_OWORD *)objc_msgSend(v196, "constantDataAtIndex:", v353 + 3);
        *v198 = v373;
        v198[1] = v374;
        v198[2] = v375;
        v198[3] = v376;
      }

LABEL_166:
      v55 = 1;
      v49 = v360;
      goto LABEL_167;
    }
    v139 = *(_QWORD *)(v49 + 48);
    if (!v139)
      goto LABEL_581;
    v140 = *(_DWORD *)(v139 - 8);
    v141 = v140 & v359;
    v142 = (int *)(v139 + 136 * (v140 & v359));
    v143 = *v142;
    if (*v142 != (_DWORD)v364)
    {
      v144 = 1;
      while (v143 != -1)
      {
        v141 = (v141 + v144) & v140;
        v142 = (int *)(v139 + 136 * v141);
        v143 = *v142;
        ++v144;
        if (*v142 == (_DWORD)v364)
          goto LABEL_226;
      }
      v142 = (int *)(v139 + 136 * *(unsigned int *)(v139 - 4));
    }
LABEL_226:
    if (v142 == (int *)(v139 + 136 * *(unsigned int *)(v139 - 4)))
    {
LABEL_581:
      __break(0xC471u);
      JUMPOUT(0x1824251F0);
    }
    v155 = v142[12];
    if (v155 == 2)
      v156 = (uint64_t)(v142 + 4);
    else
      v156 = 0;
    v351 = v142[12];
    if (v155 == 3)
      v68 = (uint64_t)(v142 + 4);
    else
      v68 = 0;
    if ((v155 - 2) >= 3)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Expected texture or storage texture but it was not present in the bind group layout"));
      v236 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](v370, v236);
      WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
      v256 = v370[0];
      v370[0] = 0;
      if (v256)
      {
        if (*(_DWORD *)v256 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v256 -= 2;
      }
      goto LABEL_437;
    }
    v345 = v55;
    v157 = v115;
    v55 = (uint64_t)*v343;
    WebGPU::Queue::clearTextureViewIfNeeded(*(WebGPU::Queue **)(a1 + 16), *v343);
    WebGPU::TextureView::texture((WebGPU::TextureView *)v55);
    v353 = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v367 = v353;
    v158 = *(_QWORD *)(v55 + 96);
    if (!*(_BYTE *)(v158 + 96))
      break;
LABEL_235:
    if ((_DWORD)v114 != 3)
    {
      if (v114 >= 3)
        goto LABEL_568;
      objc_msgSend(*(&v384 + v114), "setTexture:atIndex:", v353, v157);
    }
    if (v353)
    {
      if ((v114 - 1) > 2)
        v159 = 1;
      else
        v159 = qword_18260EF10[(int)v114 - 1];
      v165 = (WTF **)(&v389 + 3 * v159 + v345 - 1);
      v166 = *((unsigned int *)v165 + 3);
      if ((_DWORD)v166 == *((_DWORD *)v165 + 2))
      {
        WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(v165, (id *)&v367);
      }
      else
      {
        v167 = *v165;
        *((_QWORD *)v167 + v166) = (id)v353;
        ++*((_DWORD *)v165 + 3);
      }
      if ((v114 - 1) > 2)
        v168 = 1;
      else
        v168 = qword_18260EF10[(int)v114 - 1];
      v169 = 64;
      if (v351 == 3)
        v169 = WebGPU::usageForStorageTexture(v142[6]);
      v170 = &v388[3 * v168 - 1 + v345];
      v370[0] = (WTF *)__PAIR64__(*v336, v169);
      ++*(_DWORD *)v55;
      v370[1] = (WTF *)v55;
      LODWORD(v371[0]) = 1;
      v371[1] = 0;
      v171 = *((unsigned int *)v170 + 3);
      if ((_DWORD)v171 == *((_DWORD *)v170 + 2))
      {
        WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>((uint64_t)v170, (unint64_t)v370);
        v172 = (void *)v353;
      }
      else
      {
        WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(*(_QWORD *)v170 + 32 * v171, (uint64_t)v370);
        v172 = (void *)v353;
        ++*((_DWORD *)v170 + 3);
      }
      if (LODWORD(v371[0]) != -1)
        ((void (*)(WTF **, WTF **))off_1E0FD1580[LODWORD(v371[0])])(&v377, &v370[1]);

      v49 = v360;
    }
    v55 = 1;
LABEL_167:
    if (++v113 == 4)
    {
LABEL_329:
      if ((v55 & 1) == 0 && !*(_BYTE *)(v49 + 120))
      {
        v271 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Binding %d was not contained in the bind group"), *v336);
        v245 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v271, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v245);
        v246 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x186DAB230](v370, v246);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
        v272 = v370[0];
        v370[0] = 0;
        if (v272)
        {
          if (*(_DWORD *)v272 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v272 -= 2;
        }
LABEL_410:

        WebGPU::BindGroup::createInvalid((WebGPU::BindGroup *)v334, (unsigned __int8 **)a1);
        goto LABEL_458;
      }
      v40 = v333 + 1;
      v3 = (unsigned __int8 **)a1;
      if (v333 + 1 == v332)
        goto LABEL_332;
      goto LABEL_45;
    }
  }
  v160 = *(void **)(v55 + 16);
  if (!v160)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Underlying texture is not valid"));
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](v370, v259);
    WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
    v268 = v370[0];
    v370[0] = 0;
    if (v268)
    {
      if (*(_DWORD *)v268 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v268 -= 2;
    }
    goto LABEL_576;
  }
  if (*(_QWORD *)(v55 + 88) != a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Underlying texture was created from a different device"));
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](v370, v259);
    WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
    v269 = v370[0];
    v370[0] = 0;
    if (v269)
    {
      if (*(_DWORD *)v269 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v269 -= 2;
    }
    goto LABEL_576;
  }
  v161 = *(_DWORD *)(v158 + 44);
  if (v351 == 2 && (v161 & 4) == 0 || v351 == 3 && (v161 & 8) == 0)
  {
    v257 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Storage texture usage(%u) did not have storage usage or storage texture entry did not have storage binding"), *(unsigned int *)(v158 + 44));
    v55 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v257, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v55);
    v68 = objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](v370, v68);
    WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
    v258 = v370[0];
    v370[0] = 0;
    if (v258)
    {
      if (*(_DWORD *)v258 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v258 -= 2;
    }
    goto LABEL_452;
  }
  if (v351 != 2 || ((v162 = *(unsigned int *)(v158 + 32), !v142[8]) ? (v163 = 1) : (v163 = 4), v163 == (_DWORD)v162))
  {
    if (!*(_BYTE *)(v49 + 120))
    {
      if (!WebGPU::validateTextureSampleType(v156, *(_DWORD *)(v55 + 40), *(_DWORD *)(v55 + 64), *(int **)(a1 + 216), *(_DWORD *)(a1 + 228)))
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Bind group entry sampleType does not match TextureView sampleType"));
        v259 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x186DAB230](v370, v259);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
        v331 = v370[0];
        v370[0] = 0;
        if (v331)
        {
          if (*(_DWORD *)v331 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v331 -= 2;
        }
        goto LABEL_576;
      }
      v160 = *(void **)(v55 + 16);
      v158 = *(_QWORD *)(v55 + 96);
    }
    if (WebGPU::validateTextureViewDimension<WGPUTextureBindingLayout>(v156, v160, v158)
      && WebGPU::validateTextureViewDimension<WGPUStorageTextureBindingLayout>(v68, *(void **)(v55 + 16), *(_QWORD *)(v55 + 96)))
    {
      if (v351 == 3)
      {
        if (v142[7] == *(_DWORD *)(v55 + 40))
        {
          WebGPU::TextureView::texture((WebGPU::TextureView *)v55);
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = objc_msgSend(v164, "mipmapLevelCount") == 1;

          v49 = v360;
          if ((v68 & 1) == 0)
          {
            v326 = (void *)MEMORY[0x1E0CB3940];
            WebGPU::TextureView::texture((WebGPU::TextureView *)v55);
            v327 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v326, "stringWithFormat:", CFSTR("Storage textures must have a single mip level(%lu)"), objc_msgSend(v327, "mipmapLevelCount"));
            v328 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v326, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v328);
            v329 = (void *)objc_claimAutoreleasedReturnValue();
            MEMORY[0x186DAB230](v370, v329);
            WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
            v330 = v370[0];
            v370[0] = 0;
            if (v330)
            {
              if (*(_DWORD *)v330 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v330 -= 2;
            }

            goto LABEL_577;
          }
          goto LABEL_235;
        }
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Bind group storage texture entry format does not match TextureView format"));
        v259 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x186DAB230](v370, v259);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
        v325 = v370[0];
        v370[0] = 0;
        if (v325)
        {
          if (*(_DWORD *)v325 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v325 -= 2;
        }
      }
      else
      {
        if (v351 != 2 || !WebGPU::is32bppFloatFormat((void *)v353))
          goto LABEL_235;
        v173 = v142[6];
        if ((v173 - 1) > 1)
          goto LABEL_445;
        if (v173 != 1)
          goto LABEL_235;
        v174 = *(unsigned int *)(a1 + 228);
        if ((_DWORD)v174)
        {
          v175 = *(int **)(a1 + 216);
          do
          {
            v176 = *v175++;
            if (v176 == 11)
              goto LABEL_235;
          }
          while (--v174);
        }
LABEL_445:
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Can not create bind group with filterable 32bpp floating point texture as float32-filterable feature is not enabled"));
        v259 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x186DAB230](v370, v259);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
        v270 = v370[0];
        v370[0] = 0;
        if (v270)
        {
          if (*(_DWORD *)v270 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v270 -= 2;
        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), CFSTR("Bind group entry viewDimension does not match TextureView viewDimension"));
      v259 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](v370, v259);
      WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
      v260 = v370[0];
      v370[0] = 0;
      if (v260)
      {
        if (*(_DWORD *)v260 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v260 -= 2;
      }
    }
LABEL_576:

    goto LABEL_577;
  }
  v323 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Bind group entry multisampled(%d) state does not match underlying texture sample count(%d)"), v142[8], v162);
  v55 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v323, "stringWithFormat:", CFSTR("GPUDevice.createBindGroup: %@"), v55);
  v68 = objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](v370, v68);
  WebGPU::Device::generateAValidationError(a1, (uint64_t *)v370);
  v324 = v370[0];
  v370[0] = 0;
  if (v324)
  {
    if (*(_DWORD *)v324 == 2)
      goto LABEL_569;
    *(_DWORD *)v324 -= 2;
  }
LABEL_452:

LABEL_577:
  WebGPU::BindGroup::createInvalid((WebGPU::BindGroup *)v334, (unsigned __int8 **)a1);

LABEL_458:
  v273 = (uint64_t)v378;
  if (v378)
  {
    v274 = *((unsigned int *)v378 - 1);
    if ((_DWORD)v274)
    {
      v275 = v378;
      do
      {
        v276 = *v275;
        if (*v275 != -1)
        {
          *v275 = 0;
          if (v276)
          {
            if (*(_DWORD *)v276 == 1)
            {
              objc_destroyWeak((id *)(v276 + 80));
              WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v276 + 72), v277);
              v278 = *(_DWORD **)(v276 + 24);
              *(_QWORD *)(v276 + 24) = 0;
              if (v278)
              {
                if (*v278 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v278 -= 2;
              }

              WTF::fastFree((WTF *)v276, v279);
            }
            else
            {
              --*(_DWORD *)v276;
            }
          }
        }
        v275 += 4;
        --v274;
      }
      while (v274);
    }
    WTF::fastFree((WTF *)(v273 - 16), v231);
  }
  v280 = &v389;
  if (v379)
    WTF::fastFree(v379, v231);
  if (v335)
    WTF::fastFree(v335, v231);
  do
  {
    v282 = v280 - 1;
    v281 = (WTF *)*((_QWORD *)v280 - 2);
    v283 = *((unsigned int *)v280 - 1);
    if ((_DWORD)v283)
    {
      v284 = 32 * v283;
      v285 = (char *)v281 + 8;
      do
      {
        v286 = *((unsigned int *)v285 + 2);
        if ((_DWORD)v286 != -1)
          ((void (*)(WTF **, char *))off_1E0FD1580[v286])(v370, v285);
        *((_DWORD *)v285 + 2) = -1;
        v285 += 32;
        v284 -= 32;
      }
      while (v284);
      v281 = *(WTF **)v282;
    }
    if (v281)
    {
      *((_QWORD *)v280 - 2) = 0;
      *((_DWORD *)v280 - 2) = 0;
      WTF::fastFree(v281, v231);
    }
    --v280;
  }
  while (v282 != v388);
  if (HIDWORD(v400))
  {
    v287 = (id *)v400;
    v288 = 8 * HIDWORD(v400);
    do
    {

      v288 -= 8;
    }
    while (v288);
  }
  v289 = (WTF *)v400;
  if ((_QWORD)v400)
  {
    *(_QWORD *)&v400 = 0;
    DWORD2(v400) = 0;
    WTF::fastFree(v289, v231);
  }
  if (HIDWORD(v399))
  {
    v290 = (id *)v399;
    v291 = 8 * HIDWORD(v399);
    do
    {

      v291 -= 8;
    }
    while (v291);
  }
  v292 = (WTF *)v399;
  if ((_QWORD)v399)
  {
    *(_QWORD *)&v399 = 0;
    DWORD2(v399) = 0;
    WTF::fastFree(v292, v231);
  }
  if (HIDWORD(v398))
  {
    v293 = (id *)v398;
    v294 = 8 * HIDWORD(v398);
    do
    {

      v294 -= 8;
    }
    while (v294);
  }
  v295 = (WTF *)v398;
  if ((_QWORD)v398)
  {
    *(_QWORD *)&v398 = 0;
    DWORD2(v398) = 0;
    WTF::fastFree(v295, v231);
  }
  if (HIDWORD(v397))
  {
    v296 = (id *)v397;
    v297 = 8 * HIDWORD(v397);
    do
    {

      v297 -= 8;
    }
    while (v297);
  }
  v298 = (WTF *)v397;
  if ((_QWORD)v397)
  {
    *(_QWORD *)&v397 = 0;
    DWORD2(v397) = 0;
    WTF::fastFree(v298, v231);
  }
  if (HIDWORD(v396))
  {
    v299 = (id *)v396;
    v300 = 8 * HIDWORD(v396);
    do
    {

      v300 -= 8;
    }
    while (v300);
  }
  v301 = (WTF *)v396;
  if ((_QWORD)v396)
  {
    *(_QWORD *)&v396 = 0;
    DWORD2(v396) = 0;
    WTF::fastFree(v301, v231);
  }
  if (HIDWORD(v395))
  {
    v302 = (id *)v395;
    v303 = 8 * HIDWORD(v395);
    do
    {

      v303 -= 8;
    }
    while (v303);
  }
  v304 = (WTF *)v395;
  if ((_QWORD)v395)
  {
    *(_QWORD *)&v395 = 0;
    DWORD2(v395) = 0;
    WTF::fastFree(v304, v231);
  }
  if (HIDWORD(v394))
  {
    v305 = (id *)v394;
    v306 = 8 * HIDWORD(v394);
    do
    {

      v306 -= 8;
    }
    while (v306);
  }
  v307 = (WTF *)v394;
  if ((_QWORD)v394)
  {
    *(_QWORD *)&v394 = 0;
    DWORD2(v394) = 0;
    WTF::fastFree(v307, v231);
  }
  if (HIDWORD(v393))
  {
    v308 = (id *)v393;
    v309 = 8 * HIDWORD(v393);
    do
    {

      v309 -= 8;
    }
    while (v309);
  }
  v310 = (WTF *)v393;
  if ((_QWORD)v393)
  {
    *(_QWORD *)&v393 = 0;
    DWORD2(v393) = 0;
    WTF::fastFree(v310, v231);
  }
  if (HIDWORD(v392))
  {
    v311 = (id *)v392;
    v312 = 8 * HIDWORD(v392);
    do
    {

      v312 -= 8;
    }
    while (v312);
  }
  v313 = (WTF *)v392;
  if ((_QWORD)v392)
  {
    *(_QWORD *)&v392 = 0;
    DWORD2(v392) = 0;
    WTF::fastFree(v313, v231);
  }
  if (HIDWORD(v391))
  {
    v314 = (id *)v391;
    v315 = 8 * HIDWORD(v391);
    do
    {

      v315 -= 8;
    }
    while (v315);
  }
  v316 = (WTF *)v391;
  if ((_QWORD)v391)
  {
    *(_QWORD *)&v391 = 0;
    DWORD2(v391) = 0;
    WTF::fastFree(v316, v231);
  }
  if (HIDWORD(v390))
  {
    v317 = (id *)v390;
    v318 = 8 * HIDWORD(v390);
    do
    {

      v318 -= 8;
    }
    while (v318);
  }
  v319 = (WTF *)v390;
  if ((_QWORD)v390)
  {
    *(_QWORD *)&v390 = 0;
    DWORD2(v390) = 0;
    WTF::fastFree(v319, v231);
  }
  if (HIDWORD(v389))
  {
    v320 = (id *)v389;
    v321 = 8 * HIDWORD(v389);
    do
    {

      v321 -= 8;
    }
    while (v321);
  }
  v322 = (WTF *)v389;
  if ((_QWORD)v389)
  {
    *(_QWORD *)&v389 = 0;
    DWORD2(v389) = 0;
    WTF::fastFree(v322, v231);
  }

}

void sub_18242523C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,_DWORD *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t *a61,WTF *a62,uint64_t a63)
{
  id a64;
  id a67;
  char a71;
  void *v71;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;

  if (a45)
  {
    if (*a45 == 2)
      WTF::StringImpl::destroy();
    else
      *a45 -= 2;
  }

  WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::~HashMap(&a61, v73);
  if (a62)
    WTF::fastFree(a62, v74);
  if (a21)
    WTF::fastFree(a21, v74);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2A0], v74);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x290], v75);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x280], v76);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x270], v77);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x260], v78);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x250], v79);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x240], v80);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x230], v81);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x220], v82);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x210], v83);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x200], v84);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a71, v85);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x360], v86);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x350], v87);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x340], v88);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x330], v89);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x320], v90);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x310], v91);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x300], v92);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2F0], v93);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2E0], v94);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2D0], v95);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2C0], v96);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2B0], v97);
  WTF::EnumeratedArray<WebGPU::ShaderStage,objc_object  {objcproto9MTLBuffer}* {__strong},(WebGPU::ShaderStage)2>::~EnumeratedArray(&a64);
  WTF::EnumeratedArray<WebGPU::ShaderStage,objc_object  {objcproto9MTLBuffer}* {__strong},(WebGPU::ShaderStage)2>::~EnumeratedArray(&a67);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::BindGroup::createInvalid(WebGPU::BindGroup *this, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x68);
  result = WebGPU::BindGroup::BindGroup(v4, a2);
  *(_QWORD *)this = v4;
  return result;
}

void sub_182425C98(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(void ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;

      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (char *)v4 + 8;
    do
    {
      v7 = *((unsigned int *)v6 + 2);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, char *))off_1E0FD1580[v7])(&v9, v6);
      *((_DWORD *)v6 + 2) = -1;
      v6 += 32;
      v5 -= 32;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

BOOL WebGPU::validateSamplerType(int a1, _DWORD *a2)
{
  switch(a1)
  {
    case 3:
      return a2[16] != 0;
    case 2:
      if (!a2[16] && a2[12] != 1 && a2[11] != 1)
        return a2[13] != 1;
      break;
    case 1:
      return a2[16] == 0;
  }
  return 0;
}

uint64_t WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::add<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>(uint64_t result, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  _DWORD *v28;
  char v29;
  uint64_t v30;
  void *v31;
  __int128 v32;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27)));
  v16 = (_OWORD *)(v8 + 32 * v15);
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 32 * v26;
        goto LABEL_38;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = ((_DWORD)v15 + v19) & v10;
      v16 = (_OWORD *)(v8 + 32 * v15);
      v17 = *(_QWORD *)v16;
      ++v19;
    }
    while (*(_QWORD *)v16);
    if (v18)
    {
      *v18 = 0u;
      v18[1] = 0u;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *a3 = 0;
  v20 = *(_QWORD *)v16;
  *(_QWORD *)v16 = v11;
  if (!v20)
  {
LABEL_15:
    v21 = *a4;
    *((_QWORD *)v16 + 3) = *((_QWORD *)a4 + 2);
    *(_OWORD *)((char *)v16 + 8) = v21;
    v22 = *a2;
    if (*a2)
      goto LABEL_16;
    goto LABEL_32;
  }
  if (*(_DWORD *)v20 != 1)
  {
    --*(_DWORD *)v20;
    goto LABEL_15;
  }
  objc_destroyWeak((id *)(v20 + 80));
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v20 + 72), v27);
  v28 = *(_DWORD **)(v20 + 24);
  *(_QWORD *)(v20 + 24) = 0;
  if (v28)
  {
    if (*v28 == 2)
      WTF::StringImpl::destroy();
    else
      *v28 -= 2;
  }

  result = WTF::fastFree((WTF *)v20, v31);
  v32 = *a4;
  *((_QWORD *)v16 + 3) = *((_QWORD *)a4 + 2);
  *(_OWORD *)((char *)v16 + 8) = v32;
  v22 = *a2;
  if (*a2)
  {
LABEL_16:
    ++*(_DWORD *)(v22 - 12);
    v23 = *a2;
    if (*a2)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  *(_DWORD *)(v22 - 12) = 1;
  v23 = *a2;
  if (*a2)
  {
LABEL_17:
    v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
    v25 = *(unsigned int *)(v23 - 4);
    if (v25 <= 0x400)
      goto LABEL_18;
LABEL_34:
    if (v25 > 2 * v24)
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_33:
  v24 = *(unsigned int *)(v23 - 16);
  v25 = *(unsigned int *)(v23 - 4);
  if (v25 > 0x400)
    goto LABEL_34;
LABEL_18:
  if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      result = WTF::HashTable<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>>::rehash(a2, 8u, (uint64_t *)v16);
      v16 = (_OWORD *)result;
      v23 = *a2;
      if (!*a2)
      {
LABEL_21:
        v25 = 0;
        goto LABEL_37;
      }
LABEL_36:
      v25 = *(unsigned int *)(v23 - 4);
      goto LABEL_37;
    }
LABEL_35:
    result = WTF::HashTable<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>>::rehash(a2, (_DWORD)v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25)), (uint64_t *)v16);
    v16 = (_OWORD *)result;
    v23 = *a2;
    if (!*a2)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_37:
  v30 = v23 + 32 * v25;
  v29 = 1;
LABEL_38:
  *(_QWORD *)v7 = v16;
  *(_QWORD *)(v7 + 8) = v30;
  *(_BYTE *)(v7 + 16) = v29;
  return result;
}

uint64_t WebGPU::validateTextureSampleType(uint64_t a1, int a2, int a3, int *a4, unsigned int a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  if (!a1)
    return 1;
  v5 = *(_DWORD *)(a1 + 8) - 1;
  if (v5 > 4)
    return 0;
  v6 = dword_18260EF28[v5];
  v7 = 3;
  switch(a2)
  {
    case 0:
      return 0;
    case 1:
    case 2:
    case 7:
    case 8:
    case 9:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 34:
      return (v7 & v6) != 0;
    case 3:
    case 5:
    case 10:
    case 13:
    case 15:
    case 21:
    case 25:
    case 30:
    case 32:
    case 36:
    case 38:
      return (v6 & 0x10) != 0;
    case 4:
    case 6:
    case 11:
    case 14:
    case 16:
    case 22:
    case 31:
    case 33:
    case 37:
      return (v6 & 8) != 0;
    case 12:
      if (!a5)
        return (v6 & 2) != 0;
      v9 = a5;
      while (1)
      {
        v10 = *a4++;
        if (v10 == 11)
          break;
        v7 = 2;
        if (!--v9)
          return (v7 & v6) != 0;
      }
      return (v6 & 3) != 0;
    case 29:
      if (!a5)
        return (v6 & 2) != 0;
      v11 = a5;
      do
      {
        v12 = *a4++;
        if (v12 == 11)
          return (v6 & 3) != 0;
        v7 = 2;
        --v11;
      }
      while (v11);
      return (v7 & v6) != 0;
    case 35:
      if (!a5)
        return (v6 & 2) != 0;
      v13 = a5;
      do
      {
        v14 = *a4++;
        if (v14 == 11)
          return (v6 & 3) != 0;
        v7 = 2;
        --v13;
      }
      while (v13);
      return (v7 & v6) != 0;
    case 39:
    case 40:
    case 42:
      goto LABEL_32;
    case 41:
    case 43:
      if (a3 > 1)
      {
        if (a3 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x182426220);
        }
LABEL_32:
        v7 = 6;
        return (v7 & v6) != 0;
      }
      if (a3)
      {
        if (a3 == 1)
          return (v6 & 0x10) != 0;
        goto LABEL_32;
      }
      result = (v6 & 0x16) != 0;
      break;
    default:
      if (a2 != 0x7FFFFFFF)
        return (v7 & v6) != 0;
      return 0;
  }
  return result;
}

BOOL WebGPU::validateTextureViewDimension<WGPUTextureBindingLayout>(uint64_t a1, void *a2, uint64_t a3)
{
  int v3;
  id v4;
  uint64_t v5;
  _BOOL8 result;

  if (!a1)
    return 1;
  if (*(_BYTE *)(a3 + 96))
    a2 = *(void **)(a3 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v4 = a2;
  v5 = objc_msgSend(v4, "textureType");

  switch(v3)
  {
    case 1:
      result = v5 == 0;
      break;
    case 2:
      result = v5 == 2 || v5 == 4;
      break;
    case 3:
      result = v5 == 3 || v5 == 8;
      break;
    case 4:
      result = v5 == 5;
      break;
    case 5:
      result = v5 == 6;
      break;
    case 6:
      result = v5 == 7;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_1824263F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL WebGPU::validateTextureViewDimension<WGPUStorageTextureBindingLayout>(uint64_t a1, void *a2, uint64_t a3)
{
  int v3;
  id v4;
  uint64_t v5;
  _BOOL8 result;

  if (!a1)
    return 1;
  if (*(_BYTE *)(a3 + 96))
    a2 = *(void **)(a3 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a2;
  v5 = objc_msgSend(v4, "textureType");

  switch(v3)
  {
    case 1:
      result = v5 == 0;
      break;
    case 2:
      result = v5 == 2 || v5 == 4;
      break;
    case 3:
      result = v5 == 3 || v5 == 8;
      break;
    case 4:
      result = v5 == 5;
      break;
    case 5:
      result = v5 == 6;
      break;
    case 6:
      result = v5 == 7;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_18242651C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebGPU::is32bppFloatFormat(void *a1)
{
  id v1;
  _BOOL8 v3;

  v1 = a1;
  if (objc_msgSend(v1, "pixelFormat") == 55 || objc_msgSend(v1, "pixelFormat") == 105)
  {

    return 1;
  }
  else
  {
    v3 = objc_msgSend(v1, "pixelFormat") == 125;

    return v3;
  }
}

void sub_1824265B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebGPU::usageForStorageTexture(uint64_t result)
{
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      result = 128;
      break;
    case 2:
      result = 256;
      break;
    case 3:
      result = 512;
      break;
    default:
      if ((_DWORD)result == 0x7FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x182426624);
      }
      __break(0xC471u);
      JUMPOUT(0x182426644);
  }
  return result;
}

void WebGPU::BindableResources::~BindableResources(WebGPU::BindableResources *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  char v13;

  v3 = *((unsigned int *)this + 7);
  v4 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (char *)v4 + 8;
    do
    {
      v7 = *((unsigned int *)v6 + 2);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, char *))off_1E0FD1580[v7])(&v13, v6);
      *((_DWORD *)v6 + 2) = -1;
      v6 += 32;
      v5 -= 32;
    }
    while (v5);
    v4 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v8 = *((unsigned int *)this + 3);
  if ((_DWORD)v8)
  {
    v9 = *(void ***)this;
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;

      v10 -= 8;
    }
    while (v10);
  }
  v12 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v12, a2);
  }
}

void WebGPU::BindGroup::create(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t *a5, _DWORD *a6, uint64_t *a7, uint64_t *a8, unsigned __int8 **a9)
{
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unsigned __int8 *v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  id v33;
  _BYTE v34[24];
  unint64_t v35;

  v15 = a2;
  v31 = a3;
  v30 = a4;
  v16 = WTF::fastMalloc((WTF *)0x68);
  v17 = v15;
  v18 = v31;
  v19 = v30;
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = 0;
  v33 = v17;
  *(_QWORD *)(v16 + 16) = v33;
  v20 = v18;
  *(_QWORD *)(v16 + 24) = v20;
  v21 = v19;
  *(_QWORD *)(v16 + 32) = v21;
  v22 = *a9;
  if (__ldaxr(*a9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v22);
LABEL_5:
  ++*((_QWORD *)v22 + 1);
  v24 = __ldxr(v22);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v22))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
  *(_QWORD *)(v16 + 40) = a9;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  v25 = *a5;
  *a5 = 0;
  *(_QWORD *)(v16 + 48) = v25;
  LODWORD(v25) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v16 + 56) = v25;
  LODWORD(v25) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(v16 + 60) = v25;
  ++*a6;
  *(_QWORD *)(v16 + 64) = a6;
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 80) = 0;
  v26 = *a7;
  *a7 = 0;
  *(_QWORD *)(v16 + 72) = v26;
  LODWORD(v26) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(v16 + 80) = v26;
  v27 = *((unsigned int *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  *(_DWORD *)(v16 + 84) = v27;
  *(_QWORD *)(v16 + 88) = 0;
  v28 = *a8;
  *a8 = 0;
  *(_QWORD *)(v16 + 96) = v28;
  v35 = 0;
  if ((_DWORD)v27)
  {
    v29 = 0;
    while (v29 < *(unsigned int *)(v16 + 84))
    {
      WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t *)(v16 + 88), (int *)(*(_QWORD *)(v16 + 72) + 32 * v29 + 24), (uint64_t *)&v35, (uint64_t)v34);
      v29 = v35 + 1;
      v35 = v29;
      if (v29 >= v27)
        goto LABEL_14;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_14:

    *a1 = v16;
  }
}

void sub_182426968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, void *a10, void *a11, void *a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  id *v16;
  void *v18;
  void *v19;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(a9, v18);
  WTF::fastFree((WTF *)v16, v19);

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebGPU::BindableResources>::destruct(*(WTF **)a1, (WTF *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t **WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::~HashMap(uint64_t **a1, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != -1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
            {
              objc_destroyWeak((id *)(v6 + 80));
              WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v6 + 72), v7);
              v8 = *(_DWORD **)(v6 + 24);
              *(_QWORD *)(v6 + 24) = 0;
              if (v8)
              {
                if (*v8 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v8 -= 2;
              }

              WTF::fastFree((WTF *)v6, v9);
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

id *WTF::EnumeratedArray<WebGPU::ShaderStage,objc_object  {objcproto9MTLBuffer}* {__strong},(WebGPU::ShaderStage)2>::~EnumeratedArray(id *a1)
{

  return a1;
}

uint64_t *WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 8 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    v19 = *a3;
    *(_DWORD *)v15 = v11;
    *((_DWORD *)v15 + 1) = v19;
    if (*v6)
    {
      ++*(_DWORD *)(*v6 - 12);
      v20 = *v6;
      if (*v6)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v20 = *v6;
      if (*v6)
      {
LABEL_14:
        v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v21 = *(unsigned int *)(v20 - 16);
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v20 + 8 * v22;
        *(_BYTE *)(a4 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v22)
      {
        result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, 8u, v15);
        v15 = result;
        v20 = *v6;
        if (!*v6)
        {
LABEL_18:
          v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v15);
      v15 = result;
      v20 = *v6;
      if (!*v6)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21)
      goto LABEL_26;
    goto LABEL_24;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v11)
  {
    if (v16 == -2)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (uint64_t *)(v8 + 8 * v14);
    v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == -1)
    {
      if (v17)
      {
        *v17 = 0xFFFFFFFFLL;
        --*(_DWORD *)(*v6 - 16);
        v11 = *a2;
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v8 + 8 * v23;
  *(_BYTE *)(a4 + 16) = 0;
  return result;
}

_QWORD *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(_QWORD *result, void *a2)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = result;
  if (*result)
  {
    *(_QWORD *)(*result + 8) = 0;
    v3 = (unsigned int *)*result;
    *v2 = 0;
    if (!v3)
      return v2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t WebGPU::BindGroup::BindGroup(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_5:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *(_QWORD *)(a1 + 40) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_182426EB0(_Unwind_Exception *a1)
{
  id *v1;
  _QWORD *v2;
  void *v4;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v2, v4);
  _Unwind_Resume(a1);
}

void WebGPU::BindGroup::~BindGroup(WebGPU::BindGroup *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WebGPU::BindGroupLayout *v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  void *v21;

  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 12);
      do
      {
        v6 = *v5;
        if (*v5 != -1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
            {
              objc_destroyWeak((id *)(v6 + 80));
              WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v6 + 72), v7);
              v8 = *(_DWORD **)(v6 + 24);
              *(_QWORD *)(v6 + 24) = 0;
              if (v8)
              {
                if (*v8 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v8 -= 2;
              }

              WTF::fastFree((WTF *)v6, v9);
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v10 = *((_QWORD *)this + 11);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = (WTF *)*((_QWORD *)this + 9);
  if (v11)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (WebGPU::BindGroupLayout *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (!v12)
  {
LABEL_22:
    v13 = *((_DWORD *)this + 15);
    if (!v13)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
    goto LABEL_22;
  }
  WebGPU::BindGroupLayout::~BindGroupLayout(v12, a2);
  WTF::fastFree(v20, v21);
  v13 = *((_DWORD *)this + 15);
  if (v13)
LABEL_23:
    WTF::VectorDestructor<true,WebGPU::BindableResources>::destruct(*((WTF **)this + 6), (WTF *)(*((_QWORD *)this + 6) + 48 * v13));
LABEL_24:
  v14 = (WTF *)*((_QWORD *)this + 6);
  if (v14)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v14, a2);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 5, a2);

  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 0;
    v17 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v15);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

__CFString *WebGPU::BindGroup::usageName(int *a1)
{
  int v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    objc_msgSend(&stru_1E0FD9588, "stringByAppendingString:", CFSTR("Input "));
    v4 = objc_claimAutoreleasedReturnValue();
    v2 = *a1;
    v3 = (__CFString *)v4;
    if ((*a1 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = &stru_1E0FD9588;
    if ((v2 & 2) == 0)
      goto LABEL_3;
  }
  -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("Constant "));
  v5 = objc_claimAutoreleasedReturnValue();

  v2 = *a1;
  v3 = (__CFString *)v5;
  if ((*a1 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("Storage "));
  v6 = objc_claimAutoreleasedReturnValue();

  v2 = *a1;
  v3 = (__CFString *)v6;
  if ((*a1 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("StorageRead "));
  v7 = objc_claimAutoreleasedReturnValue();

  v2 = *a1;
  v3 = (__CFString *)v7;
  if ((*a1 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("Attachment "));
  v8 = objc_claimAutoreleasedReturnValue();

  v2 = *a1;
  v3 = (__CFString *)v8;
  if ((*a1 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("AttachmentRead "));
  v9 = objc_claimAutoreleasedReturnValue();

  v2 = *a1;
  v3 = (__CFString *)v9;
  if ((*a1 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("ConstantTexture "));
  v10 = objc_claimAutoreleasedReturnValue();

  v2 = *a1;
  v3 = (__CFString *)v10;
  if ((*a1 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("StorageTextureRead "));
    v12 = objc_claimAutoreleasedReturnValue();

    v3 = (__CFString *)v12;
    if ((*a1 & 0x200) == 0)
      return v3;
LABEL_22:
    -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("StorageTextureReadWrite "));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    return (__CFString *)v13;
  }
LABEL_20:
  -[__CFString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR("StorageTextureWriteOnly "));
  v11 = objc_claimAutoreleasedReturnValue();

  v2 = *a1;
  v3 = (__CFString *)v11;
  if ((*a1 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v2 & 0x200) != 0)
    goto LABEL_22;
  return v3;
}

void sub_1824272A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebGPU::BindGroup::makeEntryMapKey(unsigned int a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  if (a3)
    return (a2 << 32) | (2 * a1) | (a3 - 1);
  result = 1292;
  __break(0xC471u);
  return result;
}

void WebGPU::BindGroup::rebindSamplersIfNeeded(WebGPU::BindGroup *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  id WeakRetained;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 32 * v3;
    if (!*(_DWORD *)(v2 - 12))
    {
      v5 = v2 + 32 * v3;
      v4 = v5;
      goto LABEL_10;
    }
    v5 = *((_QWORD *)this + 12);
    if ((_DWORD)v3)
    {
      v6 = 32 * v3;
      v5 = *((_QWORD *)this + 12);
      do
      {
        if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          goto LABEL_9;
        v5 += 32;
        v6 -= 32;
      }
      while (v6);
      v5 = v4;
LABEL_10:
      v7 = v2 + 32 * *(unsigned int *)(v2 - 4);
      if (v7 == v5)
        return;
      while (1)
      {
LABEL_16:
        v8 = *(id **)v5;
        if (*(_QWORD *)v5 && (WeakRetained = objc_loadWeakRetained(v8 + 10), WeakRetained, !WeakRetained))
        {
          WTFLogAlways();
          WebGPU::Sampler::samplerState((WebGPU::Sampler *)v8);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (*(_BYTE *)(v5 + 12))
          {
            v12 = *(id *)(*((_QWORD *)this + 8) + 24);
            v13 = *((id *)this + 2);
            objc_msgSend(v12, "setArgumentBuffer:offset:", v13, 0);

            v14 = *(id *)(*((_QWORD *)this + 8) + 24);
            if (!*(_BYTE *)(v5 + 12))
              goto LABEL_35;
            v15 = v14;
            objc_msgSend(v14, "setSamplerState:atIndex:", v11, *(unsigned int *)(v5 + 8));

          }
          if (*(_BYTE *)(v5 + 20))
          {
            v16 = *(id *)(*((_QWORD *)this + 8) + 32);
            v17 = *((id *)this + 3);
            objc_msgSend(v16, "setArgumentBuffer:offset:", v17, 0);

            v18 = *(id *)(*((_QWORD *)this + 8) + 32);
            if (!*(_BYTE *)(v5 + 20))
              goto LABEL_35;
            v19 = v18;
            objc_msgSend(v18, "setSamplerState:atIndex:", v11, *(unsigned int *)(v5 + 16));

          }
          if (*(_BYTE *)(v5 + 28))
          {
            v20 = *(id *)(*((_QWORD *)this + 8) + 40);
            v21 = *((id *)this + 4);
            objc_msgSend(v20, "setArgumentBuffer:offset:", v21, 0);

            v22 = *(id *)(*((_QWORD *)this + 8) + 40);
            if (!*(_BYTE *)(v5 + 28))
            {
LABEL_35:
              __break(1u);
              return;
            }
            v23 = v22;
            objc_msgSend(v22, "setSamplerState:atIndex:", v11, *(unsigned int *)(v5 + 24));

          }
          v10 = v5 + 32;
          v5 = v4;
          if (v10 != v4)
          {
LABEL_19:
            v5 = v10;
            while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
            {
              v5 += 32;
              if (v5 == v4)
              {
                v5 = v4;
                break;
              }
            }
          }
        }
        else
        {
          v10 = v5 + 32;
          v5 = v4;
          if (v10 != v4)
            goto LABEL_19;
        }
        if (v5 == v7)
          return;
      }
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
LABEL_9:
  if (v2)
    goto LABEL_10;
  v7 = 0;
  if (v5)
    goto LABEL_16;
}

void sub_182427580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1824275CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_DWORD *wgpuBindGroupReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::BindGroup *wgpuBindGroupRelease(WebGPU::BindGroup *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::BindGroup::~BindGroup(result, a2);
    return (WebGPU::BindGroup *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuBindGroupSetLabel(id *a1, char *__s)
{
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  _DWORD *result;
  _DWORD *v7;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v7)
  {
    *v7 += 2;
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else
  {
    v3 = &stru_1E0FD9588;
  }
  objc_msgSend(a1[2], "setLabel:", v3);

  if (v7)
    v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E0FD9588;
  objc_msgSend(a1[3], "setLabel:", v4);

  if (v7)
    v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E0FD9588;
  objc_msgSend(a1[4], "setLabel:", v5);

  if (!v7)
  {
LABEL_14:
    result = v7;
    if (!v7)
      return result;
    goto LABEL_17;
  }
  if (*v7 != 2)
  {
    *v7 -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy();
  result = v7;
LABEL_17:
  if (*result == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *result -= 2;
  return result;
}

void sub_18242776C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  _DWORD *v10;
  void *v11;

  if (v10)
  {
    if (*v10 == 2)
      WTF::StringImpl::destroy();
    else
      *v10 -= 2;
  }
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

double std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 *v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  unsigned int v111;
  unsigned int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  unint64_t v134;
  unsigned int v135;
  unint64_t v136;
  unsigned int v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  BOOL v141;
  __n128 v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  unint64_t v146;
  unsigned int v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  unsigned int v163;
  unsigned int v164;
  __n128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __n128 *v169;
  __n128 *v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __n128 v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  __n128 v182;
  __int128 v183;
  __int128 v184;
  BOOL v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  int64_t v196;
  int64_t v197;
  BOOL v198;
  uint64_t v199;
  unint64_t v200;
  unsigned int v201;
  unsigned int v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  int64_t v214;
  uint64_t v215;
  unint64_t v216;
  __n128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  __int128 v249;
  unint64_t v251;
  unsigned int v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  __n128 v260;
  __n128 v261;
  __int128 v262;
  _BYTE v263[28];
  _BYTE v264[28];
  _BYTE v265[28];
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __n128 v285;
  __n128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __n128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  _BYTE v319[28];
  _BYTE v320[28];
  __int128 v321;
  __int128 v322;
  __int128 v323;
  _BYTE v324[28];
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;

LABEL_1:
  v9 = a2 - 56;
  v10 = (__int128 *)(a2 - 112);
  v11 = (__int128 *)(a2 - 168);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(v12 + 8))
        {
          v369 = *(_QWORD *)(v12 + 48);
          v316 = *(_OWORD *)(v12 + 16);
          v345 = *(_OWORD *)(v12 + 32);
          v285 = *(__n128 *)v12;
          a5 = *(__n128 *)(a2 - 56);
          v161 = *(_OWORD *)(a2 - 40);
          v162 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v12 + 16) = v161;
          *(_OWORD *)(v12 + 32) = v162;
          *(__n128 *)v12 = a5;
          a5.n128_u64[0] = v285.n128_u64[0];
          *(_QWORD *)(a2 - 8) = v369;
          *(_OWORD *)(a2 - 24) = v345;
          *(_OWORD *)(a2 - 40) = v316;
          *(__n128 *)(a2 - 56) = v285;
        }
        return a5.n128_f64[0];
      case 3:
        v71 = v12 + 56;
        v163 = *(_DWORD *)(v12 + 64);
        v164 = *(_DWORD *)(a2 - 48);
        if (v163 < *(_DWORD *)(v12 + 8))
        {
          if (v164 >= v163)
            goto LABEL_183;
          v370 = *(_QWORD *)(v12 + 48);
          v317 = *(_OWORD *)(v12 + 16);
          v346 = *(_OWORD *)(v12 + 32);
          v286 = *(__n128 *)v12;
          v165 = *(__n128 *)v9;
          v166 = *(_OWORD *)(a2 - 40);
          v167 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v12 + 16) = v166;
          *(_OWORD *)(v12 + 32) = v167;
          *(__n128 *)v12 = v165;
          goto LABEL_115;
        }
        if (v164 < v163)
        {
          a5 = *(__n128 *)v71;
          v322 = *(_OWORD *)(v12 + 72);
          v236 = *(_OWORD *)(v12 + 88);
          v237 = *(_QWORD *)(v12 + 104);
          v238 = *(_QWORD *)(a2 - 8);
          v240 = *(_OWORD *)(a2 - 40);
          v239 = *(_OWORD *)(a2 - 24);
          *(_OWORD *)v71 = *(_OWORD *)v9;
          *(_OWORD *)(v12 + 72) = v240;
          *(_OWORD *)(v12 + 88) = v239;
          *(_QWORD *)(v12 + 104) = v238;
          *(_OWORD *)(a2 - 40) = v322;
          *(_OWORD *)(a2 - 24) = v236;
          *(_QWORD *)(a2 - 8) = v237;
          *(__n128 *)v9 = a5;
          if (*(_DWORD *)(v12 + 64) < *(_DWORD *)(v12 + 8))
          {
            v372 = *(_QWORD *)(v12 + 48);
            v323 = *(_OWORD *)(v12 + 16);
            v348 = *(_OWORD *)(v12 + 32);
            v290 = *(__n128 *)v12;
            v241 = *(_OWORD *)(v12 + 72);
            *(_OWORD *)v12 = *(_OWORD *)v71;
            *(_OWORD *)(v12 + 16) = v241;
            *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 88);
            *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 104);
            a5.n128_u64[0] = v290.n128_u64[0];
            *(_QWORD *)(v12 + 104) = v372;
            *(_OWORD *)(v12 + 72) = v323;
            *(_OWORD *)(v12 + 88) = v348;
            *(__n128 *)v71 = v290;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>((__int128 *)v12, (__int128 *)(v12 + 56), (__int128 *)(v12 + 112), (__int128 *)(a2 - 56), a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        v9 = v12 + 56;
        v169 = (__n128 *)(v12 + 112);
        v170 = (__n128 *)(v12 + 168);
        a5.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>((__int128 *)v12, (__int128 *)(v12 + 56), (__int128 *)(v12 + 112), (__int128 *)(v12 + 168), a5).n128_u64[0];
        if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(v12 + 176))
        {
          a5 = *v170;
          v318 = *(_OWORD *)(v12 + 184);
          v171 = *(_OWORD *)(v12 + 200);
          v172 = *(_QWORD *)(v12 + 216);
          v173 = *(_QWORD *)(a2 - 8);
          v174 = *(_OWORD *)(a2 - 24);
          v175 = *(_OWORD *)(a2 - 40);
          *v170 = *(__n128 *)(a2 - 56);
          *(_OWORD *)(v12 + 184) = v175;
          *(_OWORD *)(v12 + 200) = v174;
          *(_QWORD *)(v12 + 216) = v173;
          *(_OWORD *)(a2 - 40) = v318;
          *(_OWORD *)(a2 - 24) = v171;
          *(_QWORD *)(a2 - 8) = v172;
          *(__n128 *)(a2 - 56) = a5;
          if (*(_DWORD *)(v12 + 176) < *(_DWORD *)(v12 + 120))
          {
            v176 = *(_QWORD *)(v12 + 160);
            v177 = *(_OWORD *)(v12 + 128);
            a5 = *(__n128 *)(v12 + 144);
            v178 = *v169;
            v179 = *(_OWORD *)(v12 + 184);
            *v169 = *v170;
            *(_OWORD *)(v12 + 128) = v179;
            *(_OWORD *)(v12 + 144) = *(_OWORD *)(v12 + 200);
            *(_QWORD *)(v12 + 160) = *(_QWORD *)(v12 + 216);
            *v170 = v178;
            *(_OWORD *)(v12 + 184) = v177;
            *(__n128 *)(v12 + 200) = a5;
            *(_QWORD *)(v12 + 216) = v176;
            if (*(_DWORD *)(v12 + 120) < *(_DWORD *)(v12 + 64))
            {
              v180 = *(_QWORD *)(v12 + 104);
              v181 = *(_OWORD *)(v12 + 72);
              a5 = *(__n128 *)(v12 + 88);
              v182 = *(__n128 *)v9;
              v183 = *(_OWORD *)(v12 + 128);
              *(__n128 *)v9 = *v169;
              *(_OWORD *)(v12 + 72) = v183;
              *(_OWORD *)(v12 + 88) = *(_OWORD *)(v12 + 144);
              *(_QWORD *)(v12 + 104) = *(_QWORD *)(v12 + 160);
              *v169 = v182;
              *(_OWORD *)(v12 + 128) = v181;
              *(__n128 *)(v12 + 144) = a5;
              *(_QWORD *)(v12 + 160) = v180;
              if (*(_DWORD *)(v12 + 64) < *(_DWORD *)(v12 + 8))
              {
                v370 = *(_QWORD *)(v12 + 48);
                v317 = *(_OWORD *)(v12 + 16);
                v346 = *(_OWORD *)(v12 + 32);
                v286 = *(__n128 *)v12;
                v184 = *(_OWORD *)(v12 + 72);
                *(_OWORD *)v12 = *(_OWORD *)v9;
                *(_OWORD *)(v12 + 16) = v184;
                *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 88);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 104);
LABEL_115:
                a5 = v286;
                v168 = v317;
                *(_QWORD *)(v9 + 48) = v370;
                *(_OWORD *)(v9 + 32) = v346;
                goto LABEL_185;
              }
            }
          }
        }
        return a5.n128_f64[0];
      default:
        if (v13 > 1343)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v196 = (unint64_t)(v14 - 2) >> 1;
              v197 = v196;
              do
              {
                if (v196 >= v197)
                {
                  v199 = (2 * v197) | 1;
                  v200 = v12 + 56 * v199;
                  if (2 * v197 + 2 < v14)
                  {
                    v201 = *(_DWORD *)(v200 + 8);
                    v202 = *(_DWORD *)(v200 + 64);
                    v200 += 56 * (v201 < v202);
                    if (v201 < v202)
                      v199 = 2 * v197 + 2;
                  }
                  v203 = v12 + 56 * v197;
                  v204 = *(_DWORD *)(v203 + 8);
                  if (*(_DWORD *)(v200 + 8) >= v204)
                  {
                    v205 = *(_QWORD *)v203;
                    *(_OWORD *)&v320[12] = *(_OWORD *)(v203 + 40);
                    v288 = *(_OWORD *)(v203 + 12);
                    *(_OWORD *)v320 = *(_OWORD *)(v203 + 28);
                    do
                    {
                      v206 = v203;
                      v203 = v200;
                      v207 = *(_OWORD *)v200;
                      v208 = *(_OWORD *)(v200 + 16);
                      v209 = *(_OWORD *)(v200 + 32);
                      *(_QWORD *)(v206 + 48) = *(_QWORD *)(v200 + 48);
                      *(_OWORD *)(v206 + 16) = v208;
                      *(_OWORD *)(v206 + 32) = v209;
                      *(_OWORD *)v206 = v207;
                      if (v196 < v199)
                        break;
                      v210 = (2 * v199) | 1;
                      v200 = v12 + 56 * v210;
                      v211 = 2 * v199 + 2;
                      if (v211 < v14)
                      {
                        v212 = *(_DWORD *)(v200 + 8);
                        v213 = *(_DWORD *)(v200 + 64);
                        v200 += 56 * (v212 < v213);
                        if (v212 < v213)
                          v210 = v211;
                      }
                      v199 = v210;
                    }
                    while (*(_DWORD *)(v200 + 8) >= v204);
                    *(_QWORD *)v203 = v205;
                    *(_DWORD *)(v203 + 8) = v204;
                    *(_OWORD *)(v203 + 40) = *(_OWORD *)&v320[12];
                    *(_OWORD *)(v203 + 28) = *(_OWORD *)v320;
                    *(_OWORD *)(v203 + 12) = v288;
                  }
                }
                v198 = v197-- <= 0;
              }
              while (!v198);
              v214 = v13 / 0x38uLL;
              do
              {
                v215 = 0;
                v371 = *(_QWORD *)(v12 + 48);
                v321 = *(_OWORD *)(v12 + 16);
                v347 = *(_OWORD *)(v12 + 32);
                v289 = *(_OWORD *)v12;
                v216 = v12;
                do
                {
                  v220 = v216 + 56 * v215 + 56;
                  v221 = (2 * v215) | 1;
                  v222 = 2 * v215 + 2;
                  if (v222 < v214)
                  {
                    v223 = *(_DWORD *)(v220 + 8);
                    v224 = *(_DWORD *)(v220 + 64);
                    v220 += 56 * (v223 < v224);
                    if (v223 < v224)
                      v221 = v222;
                  }
                  v217 = *(__n128 *)v220;
                  v218 = *(_OWORD *)(v220 + 16);
                  v219 = *(_OWORD *)(v220 + 32);
                  *(_QWORD *)(v216 + 48) = *(_QWORD *)(v220 + 48);
                  *(_OWORD *)(v216 + 16) = v218;
                  *(_OWORD *)(v216 + 32) = v219;
                  *(__n128 *)v216 = v217;
                  v216 = v220;
                  v215 = v221;
                }
                while (v221 <= (uint64_t)((unint64_t)(v214 - 2) >> 1));
                a2 -= 56;
                if (v220 == a2)
                {
                  a5.n128_u64[0] = v289;
                  *(_QWORD *)(v220 + 48) = v371;
                  *(_OWORD *)(v220 + 16) = v321;
                  *(_OWORD *)(v220 + 32) = v347;
                  *(_OWORD *)v220 = v289;
                }
                else
                {
                  a5 = *(__n128 *)a2;
                  v225 = *(_OWORD *)(a2 + 16);
                  v226 = *(_OWORD *)(a2 + 32);
                  *(_QWORD *)(v220 + 48) = *(_QWORD *)(a2 + 48);
                  *(_OWORD *)(v220 + 16) = v225;
                  *(_OWORD *)(v220 + 32) = v226;
                  *(__n128 *)v220 = a5;
                  a5.n128_u64[0] = v289;
                  *(_QWORD *)(a2 + 48) = v371;
                  *(_OWORD *)(a2 + 16) = v321;
                  *(_OWORD *)(a2 + 32) = v347;
                  *(_OWORD *)a2 = v289;
                  v227 = v220 - v12 + 56;
                  if (v227 >= 57)
                  {
                    v228 = (v227 / 0x38uLL - 2) >> 1;
                    v229 = v12 + 56 * v228;
                    v230 = *(_DWORD *)(v220 + 8);
                    if (*(_DWORD *)(v229 + 8) < v230)
                    {
                      v231 = *(_QWORD *)v220;
                      *(_OWORD *)&v265[12] = *(_OWORD *)(v220 + 40);
                      v262 = *(_OWORD *)(v220 + 12);
                      *(_OWORD *)v265 = *(_OWORD *)(v220 + 28);
                      do
                      {
                        v232 = v220;
                        v220 = v229;
                        v233 = *(_OWORD *)v229;
                        v234 = *(_OWORD *)(v229 + 16);
                        v235 = *(_OWORD *)(v229 + 32);
                        *(_QWORD *)(v232 + 48) = *(_QWORD *)(v229 + 48);
                        *(_OWORD *)(v232 + 16) = v234;
                        *(_OWORD *)(v232 + 32) = v235;
                        *(_OWORD *)v232 = v233;
                        if (!v228)
                          break;
                        v228 = (v228 - 1) >> 1;
                        v229 = v12 + 56 * v228;
                      }
                      while (*(_DWORD *)(v229 + 8) < v230);
                      *(_QWORD *)v220 = v231;
                      *(_DWORD *)(v220 + 8) = v230;
                      a5.n128_u64[0] = v262;
                      *(_OWORD *)(v220 + 40) = *(_OWORD *)&v265[12];
                      *(_OWORD *)(v220 + 28) = *(_OWORD *)v265;
                      *(_OWORD *)(v220 + 12) = v262;
                    }
                  }
                }
                v198 = v214-- <= 2;
              }
              while (!v198);
            }
            return a5.n128_f64[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 56 * ((unint64_t)v14 >> 1);
          v17 = *(_DWORD *)(a2 - 48);
          if ((unint64_t)v13 < 0x1C01)
          {
            v22 = *(_DWORD *)(v12 + 8);
            if (v22 >= *(_DWORD *)(v16 + 8))
            {
              if (v17 < v22)
              {
                v354 = *(_QWORD *)(v12 + 48);
                v297 = *(_OWORD *)(v12 + 16);
                v330 = *(_OWORD *)(v12 + 32);
                v270 = *(_OWORD *)v12;
                v32 = *(__n128 *)v9;
                v33 = *(_OWORD *)(a2 - 40);
                v34 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v12 + 16) = v33;
                *(_OWORD *)(v12 + 32) = v34;
                *(__n128 *)v12 = v32;
                *(_QWORD *)(a2 - 8) = v354;
                *(_OWORD *)(a2 - 40) = v297;
                *(_OWORD *)(a2 - 24) = v330;
                *(_OWORD *)v9 = v270;
                if (*(_DWORD *)(v12 + 8) < *(_DWORD *)(v16 + 8))
                {
                  v355 = *(_QWORD *)(v16 + 48);
                  v298 = *(_OWORD *)(v16 + 16);
                  v331 = *(_OWORD *)(v16 + 32);
                  v271 = *(_OWORD *)v16;
                  v35 = *(_OWORD *)v12;
                  v36 = *(_OWORD *)(v12 + 16);
                  v37 = *(_OWORD *)(v12 + 32);
                  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v12 + 48);
                  *(_OWORD *)(v16 + 16) = v36;
                  *(_OWORD *)(v16 + 32) = v37;
                  *(_OWORD *)v16 = v35;
                  *(_QWORD *)(v12 + 48) = v355;
                  *(_OWORD *)(v12 + 16) = v298;
                  *(_OWORD *)(v12 + 32) = v331;
                  *(_OWORD *)v12 = v271;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v22)
              {
                v358 = *(_QWORD *)(v16 + 48);
                v302 = *(_OWORD *)(v16 + 16);
                v334 = *(_OWORD *)(v16 + 32);
                v274 = *(_OWORD *)v16;
                v65 = *(_OWORD *)v12;
                v66 = *(_OWORD *)(v12 + 16);
                v67 = *(_OWORD *)(v12 + 32);
                *(_QWORD *)(v16 + 48) = *(_QWORD *)(v12 + 48);
                *(_OWORD *)(v16 + 16) = v66;
                *(_OWORD *)(v16 + 32) = v67;
                *(_OWORD *)v16 = v65;
                *(_QWORD *)(v12 + 48) = v358;
                *(_OWORD *)(v12 + 16) = v302;
                *(_OWORD *)(v12 + 32) = v334;
                *(_OWORD *)v12 = v274;
                if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(v12 + 8))
                  goto LABEL_31;
                v351 = *(_QWORD *)(v12 + 48);
                v294 = *(_OWORD *)(v12 + 16);
                v327 = *(_OWORD *)(v12 + 32);
                v267 = *(_OWORD *)v12;
                v68 = *(__n128 *)v9;
                v69 = *(_OWORD *)(a2 - 40);
                v70 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v12 + 16) = v69;
                *(_OWORD *)(v12 + 32) = v70;
                *(__n128 *)v12 = v68;
              }
              else
              {
                v351 = *(_QWORD *)(v16 + 48);
                v294 = *(_OWORD *)(v16 + 16);
                v327 = *(_OWORD *)(v16 + 32);
                v267 = *(_OWORD *)v16;
                v23 = *(__n128 *)v9;
                v24 = *(_OWORD *)(a2 - 40);
                v25 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v16 + 16) = v24;
                *(_OWORD *)(v16 + 32) = v25;
                *(__n128 *)v16 = v23;
              }
              *(_QWORD *)(a2 - 8) = v351;
              *(_OWORD *)(a2 - 40) = v294;
              *(_OWORD *)(a2 - 24) = v327;
              *(_OWORD *)v9 = v267;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v71 = *(unsigned int *)(v12 + 8);
            if (*(_DWORD *)(v12 - 48) < v71)
              goto LABEL_56;
            v143 = *(_QWORD *)v12;
            *(_OWORD *)&v264[12] = *(_OWORD *)(v12 + 40);
            v261 = *(__n128 *)(v12 + 12);
            *(_OWORD *)v264 = *(_OWORD *)(v12 + 28);
            if (v71 >= *(_DWORD *)(a2 - 48))
            {
              v146 = v12 + 56;
              do
              {
                v12 = v146;
                if (v146 >= a2)
                  break;
                v147 = *(_DWORD *)(v146 + 8);
                v146 += 56;
              }
              while (v71 >= v147);
            }
            else
            {
              v144 = v12 + 56;
              do
              {
                if (v144 == a2)
                  goto LABEL_182;
                v145 = *(_DWORD *)(v144 + 8);
                v144 += 56;
              }
              while (v71 >= v145);
              v12 = v144 - 56;
            }
            v148 = a2;
            if (v12 < a2)
            {
              v149 = a2;
              while (v149 != a1)
              {
                v148 = v149 - 56;
                v150 = *(_DWORD *)(v149 - 48);
                v149 -= 56;
                if (v71 >= v150)
                  goto LABEL_95;
              }
              goto LABEL_182;
            }
LABEL_95:
            if (v12 < v148)
            {
              do
              {
                v368 = *(_QWORD *)(v12 + 48);
                v315 = *(_OWORD *)(v12 + 16);
                v344 = *(_OWORD *)(v12 + 32);
                v284 = *(_OWORD *)v12;
                v151 = *(_OWORD *)v148;
                v152 = *(_OWORD *)(v148 + 16);
                v153 = *(_OWORD *)(v148 + 32);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(v148 + 48);
                *(_OWORD *)(v12 + 16) = v152;
                *(_OWORD *)(v12 + 32) = v153;
                *(_OWORD *)v12 = v151;
                *(_QWORD *)(v148 + 48) = v368;
                *(_OWORD *)(v148 + 16) = v315;
                *(_OWORD *)(v148 + 32) = v344;
                *(_OWORD *)v148 = v284;
                v154 = v12 + 56;
                do
                {
                  if (v154 == a2)
                    goto LABEL_182;
                  v155 = *(_DWORD *)(v154 + 8);
                  v154 += 56;
                }
                while (v71 >= v155);
                v12 = v154 - 56;
                do
                {
                  if (v148 == a1)
                    goto LABEL_182;
                  v156 = v148 - 56;
                  v157 = *(_DWORD *)(v148 - 48);
                  v148 -= 56;
                }
                while (v71 < v157);
                v148 = v156;
              }
              while (v12 < v156);
            }
            if (v12 - 56 != a1)
            {
              v158 = *(_OWORD *)(v12 - 56);
              v159 = *(_OWORD *)(v12 - 40);
              v160 = *(_OWORD *)(v12 - 24);
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(v12 - 8);
              *(_OWORD *)(a1 + 16) = v159;
              *(_OWORD *)(a1 + 32) = v160;
              *(_OWORD *)a1 = v158;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 56) = v143;
            *(_DWORD *)(v12 - 48) = v71;
            a5 = v261;
            *(_OWORD *)(v12 - 16) = *(_OWORD *)&v264[12];
            *(_OWORD *)(v12 - 28) = *(_OWORD *)v264;
            *(__n128 *)(v12 - 44) = v261;
            continue;
          }
          v18 = *(_DWORD *)(v16 + 8);
          if (v18 >= *(_DWORD *)(v12 + 8))
          {
            if (v17 < v18)
            {
              v352 = *(_QWORD *)(v16 + 48);
              v295 = *(_OWORD *)(v16 + 16);
              v328 = *(_OWORD *)(v16 + 32);
              v268 = *(_OWORD *)v16;
              v26 = *(__n128 *)v9;
              v27 = *(_OWORD *)(a2 - 40);
              v28 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v16 + 16) = v27;
              *(_OWORD *)(v16 + 32) = v28;
              *(__n128 *)v16 = v26;
              *(_QWORD *)(a2 - 8) = v352;
              *(_OWORD *)(a2 - 40) = v295;
              *(_OWORD *)(a2 - 24) = v328;
              *(_OWORD *)v9 = v268;
              if (*(_DWORD *)(v16 + 8) < *(_DWORD *)(v12 + 8))
              {
                v353 = *(_QWORD *)(v12 + 48);
                v296 = *(_OWORD *)(v12 + 16);
                v329 = *(_OWORD *)(v12 + 32);
                v269 = *(_OWORD *)v12;
                v29 = *(_OWORD *)v16;
                v30 = *(_OWORD *)(v16 + 16);
                v31 = *(_OWORD *)(v16 + 32);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
                *(_OWORD *)(v12 + 16) = v30;
                *(_OWORD *)(v12 + 32) = v31;
                *(_OWORD *)v12 = v29;
                *(_QWORD *)(v16 + 48) = v353;
                *(_OWORD *)(v16 + 16) = v296;
                *(_OWORD *)(v16 + 32) = v329;
                *(_OWORD *)v16 = v269;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v356 = *(_QWORD *)(v12 + 48);
              v299 = *(_OWORD *)(v12 + 16);
              v332 = *(_OWORD *)(v12 + 32);
              v272 = *(_OWORD *)v12;
              v38 = *(_OWORD *)v16;
              v39 = *(_OWORD *)(v16 + 16);
              v40 = *(_OWORD *)(v16 + 32);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
              *(_OWORD *)(v12 + 16) = v39;
              *(_OWORD *)(v12 + 32) = v40;
              *(_OWORD *)v12 = v38;
              *(_QWORD *)(v16 + 48) = v356;
              *(_OWORD *)(v16 + 16) = v299;
              *(_OWORD *)(v16 + 32) = v332;
              *(_OWORD *)v16 = v272;
              if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(v16 + 8))
                goto LABEL_22;
              v350 = *(_QWORD *)(v16 + 48);
              v293 = *(_OWORD *)(v16 + 16);
              v326 = *(_OWORD *)(v16 + 32);
              v266 = *(_OWORD *)v16;
              v41 = *(__n128 *)v9;
              v42 = *(_OWORD *)(a2 - 40);
              v43 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v16 + 16) = v42;
              *(_OWORD *)(v16 + 32) = v43;
              *(__n128 *)v16 = v41;
            }
            else
            {
              v350 = *(_QWORD *)(v12 + 48);
              v293 = *(_OWORD *)(v12 + 16);
              v326 = *(_OWORD *)(v12 + 32);
              v266 = *(_OWORD *)v12;
              v19 = *(__n128 *)v9;
              v20 = *(_OWORD *)(a2 - 40);
              v21 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v12 + 16) = v20;
              *(_OWORD *)(v12 + 32) = v21;
              *(__n128 *)v12 = v19;
            }
            *(_QWORD *)(a2 - 8) = v350;
            *(_OWORD *)(a2 - 40) = v293;
            *(_OWORD *)(a2 - 24) = v326;
            *(_OWORD *)v9 = v266;
          }
LABEL_22:
          v44 = (__int128 *)(v12 + 56);
          v45 = v12 + 56 * v15;
          v46 = v45 - 56;
          v47 = *(_DWORD *)(v45 - 48);
          v48 = *(_DWORD *)(a2 - 104);
          if (v47 >= *(_DWORD *)(v12 + 64))
          {
            if (v48 < v47)
            {
              v357 = *(_QWORD *)(v46 + 48);
              v300 = *(_OWORD *)(v46 + 16);
              v333 = *(_OWORD *)(v46 + 32);
              v273 = *(_OWORD *)v46;
              v56 = *v10;
              v57 = *(_OWORD *)(a2 - 96);
              v58 = *(_OWORD *)(a2 - 80);
              *(_QWORD *)(v46 + 48) = *(_QWORD *)(a2 - 64);
              *(_OWORD *)(v46 + 16) = v57;
              *(_OWORD *)(v46 + 32) = v58;
              *(_OWORD *)v46 = v56;
              *(_QWORD *)(a2 - 64) = v357;
              *(_OWORD *)(a2 - 96) = v300;
              *(_OWORD *)(a2 - 80) = v333;
              *v10 = v273;
              if (*(_DWORD *)(v46 + 8) < *(_DWORD *)(v12 + 64))
              {
                v59 = *v44;
                v301 = *(_OWORD *)(v12 + 72);
                v60 = *(_OWORD *)(v12 + 88);
                v61 = *(_QWORD *)(v12 + 104);
                v62 = *(_QWORD *)(v46 + 48);
                v64 = *(_OWORD *)(v46 + 16);
                v63 = *(_OWORD *)(v46 + 32);
                *v44 = *(_OWORD *)v46;
                *(_OWORD *)(v12 + 72) = v64;
                *(_OWORD *)(v12 + 88) = v63;
                *(_QWORD *)(v12 + 104) = v62;
                *(_OWORD *)(v46 + 16) = v301;
                *(_OWORD *)(v46 + 32) = v60;
                *(_QWORD *)(v46 + 48) = v61;
                *(_OWORD *)v46 = v59;
              }
            }
          }
          else
          {
            if (v48 >= v47)
            {
              v72 = *v44;
              v303 = *(_OWORD *)(v12 + 72);
              v73 = *(_OWORD *)(v12 + 88);
              v74 = *(_QWORD *)(v12 + 104);
              v75 = *(_QWORD *)(v46 + 48);
              v77 = *(_OWORD *)(v46 + 16);
              v76 = *(_OWORD *)(v46 + 32);
              *v44 = *(_OWORD *)v46;
              *(_OWORD *)(v12 + 72) = v77;
              *(_OWORD *)(v12 + 88) = v76;
              *(_QWORD *)(v12 + 104) = v75;
              *(_OWORD *)(v46 + 16) = v303;
              *(_OWORD *)(v46 + 32) = v73;
              *(_QWORD *)(v46 + 48) = v74;
              *(_OWORD *)v46 = v72;
              if (*(_DWORD *)(a2 - 104) >= *(_DWORD *)(v46 + 8))
                goto LABEL_36;
              v359 = *(_QWORD *)(v46 + 48);
              v304 = *(_OWORD *)(v46 + 16);
              v335 = *(_OWORD *)(v46 + 32);
              v275 = *(_OWORD *)v46;
              v78 = *v10;
              v79 = *(_OWORD *)(a2 - 96);
              v80 = *(_OWORD *)(a2 - 80);
              *(_QWORD *)(v46 + 48) = *(_QWORD *)(a2 - 64);
              *(_OWORD *)(v46 + 16) = v79;
              *(_OWORD *)(v46 + 32) = v80;
              *(_OWORD *)v46 = v78;
              v49 = v275;
              v50 = v304;
              *(_QWORD *)(a2 - 64) = v359;
              *(_OWORD *)(a2 - 80) = v335;
            }
            else
            {
              v49 = *v44;
              v50 = *(_OWORD *)(v12 + 72);
              v51 = *(_OWORD *)(v12 + 88);
              v52 = *(_QWORD *)(v12 + 104);
              v53 = *(_QWORD *)(a2 - 64);
              v55 = *(_OWORD *)(a2 - 96);
              v54 = *(_OWORD *)(a2 - 80);
              *v44 = *v10;
              *(_OWORD *)(v12 + 72) = v55;
              *(_OWORD *)(v12 + 88) = v54;
              *(_QWORD *)(v12 + 104) = v53;
              *(_OWORD *)(a2 - 80) = v51;
              *(_QWORD *)(a2 - 64) = v52;
            }
            *v10 = v49;
            *(_OWORD *)(a2 - 96) = v50;
          }
LABEL_36:
          v81 = (__int128 *)(v12 + 112);
          v82 = v12 + 56 * v15;
          v83 = v82 + 56;
          v84 = *(_DWORD *)(v82 + 64);
          v85 = *(_DWORD *)(a2 - 160);
          if (v84 >= *(_DWORD *)(v12 + 120))
          {
            if (v85 < v84)
            {
              v360 = *(_QWORD *)(v83 + 48);
              v305 = *(_OWORD *)(v83 + 16);
              v336 = *(_OWORD *)(v83 + 32);
              v276 = *(_OWORD *)v83;
              v93 = *v11;
              v94 = *(_OWORD *)(a2 - 152);
              v95 = *(_OWORD *)(a2 - 136);
              *(_QWORD *)(v83 + 48) = *(_QWORD *)(a2 - 120);
              *(_OWORD *)(v83 + 16) = v94;
              *(_OWORD *)(v83 + 32) = v95;
              *(_OWORD *)v83 = v93;
              *(_QWORD *)(a2 - 120) = v360;
              *(_OWORD *)(a2 - 152) = v305;
              *(_OWORD *)(a2 - 136) = v336;
              *v11 = v276;
              if (*(_DWORD *)(v83 + 8) < *(_DWORD *)(v12 + 120))
              {
                v96 = *v81;
                v306 = *(_OWORD *)(v12 + 128);
                v97 = *(_OWORD *)(v12 + 144);
                v98 = *(_QWORD *)(v12 + 160);
                v99 = *(_QWORD *)(v83 + 48);
                v101 = *(_OWORD *)(v83 + 16);
                v100 = *(_OWORD *)(v83 + 32);
                *v81 = *(_OWORD *)v83;
                *(_OWORD *)(v12 + 128) = v101;
                *(_OWORD *)(v12 + 144) = v100;
                *(_QWORD *)(v12 + 160) = v99;
                *(_OWORD *)(v83 + 16) = v306;
                *(_OWORD *)(v83 + 32) = v97;
                *(_QWORD *)(v83 + 48) = v98;
                *(_OWORD *)v83 = v96;
              }
            }
          }
          else
          {
            if (v85 >= v84)
            {
              v102 = *v81;
              v307 = *(_OWORD *)(v12 + 128);
              v103 = *(_OWORD *)(v12 + 144);
              v104 = *(_QWORD *)(v12 + 160);
              v105 = *(_QWORD *)(v83 + 48);
              v107 = *(_OWORD *)(v83 + 16);
              v106 = *(_OWORD *)(v83 + 32);
              *v81 = *(_OWORD *)v83;
              *(_OWORD *)(v12 + 128) = v107;
              *(_OWORD *)(v12 + 144) = v106;
              *(_QWORD *)(v12 + 160) = v105;
              *(_OWORD *)(v83 + 16) = v307;
              *(_OWORD *)(v83 + 32) = v103;
              *(_QWORD *)(v83 + 48) = v104;
              *(_OWORD *)v83 = v102;
              if (*(_DWORD *)(a2 - 160) >= *(_DWORD *)(v83 + 8))
                goto LABEL_45;
              v361 = *(_QWORD *)(v83 + 48);
              v308 = *(_OWORD *)(v83 + 16);
              v337 = *(_OWORD *)(v83 + 32);
              v277 = *(_OWORD *)v83;
              v108 = *v11;
              v109 = *(_OWORD *)(a2 - 152);
              v110 = *(_OWORD *)(a2 - 136);
              *(_QWORD *)(v83 + 48) = *(_QWORD *)(a2 - 120);
              *(_OWORD *)(v83 + 16) = v109;
              *(_OWORD *)(v83 + 32) = v110;
              *(_OWORD *)v83 = v108;
              v86 = v277;
              v87 = v308;
              *(_QWORD *)(a2 - 120) = v361;
              *(_OWORD *)(a2 - 136) = v337;
            }
            else
            {
              v86 = *v81;
              v87 = *(_OWORD *)(v12 + 128);
              v88 = *(_OWORD *)(v12 + 144);
              v89 = *(_QWORD *)(v12 + 160);
              v90 = *(_QWORD *)(a2 - 120);
              v92 = *(_OWORD *)(a2 - 152);
              v91 = *(_OWORD *)(a2 - 136);
              *v81 = *v11;
              *(_OWORD *)(v12 + 128) = v92;
              *(_OWORD *)(v12 + 144) = v91;
              *(_QWORD *)(v12 + 160) = v90;
              *(_OWORD *)(a2 - 136) = v88;
              *(_QWORD *)(a2 - 120) = v89;
            }
            *v11 = v86;
            *(_OWORD *)(a2 - 152) = v87;
          }
LABEL_45:
          v111 = *(_DWORD *)(v16 + 8);
          v112 = *(_DWORD *)(v83 + 8);
          if (v111 >= *(_DWORD *)(v46 + 8))
          {
            if (v112 < v111)
            {
              v363 = *(_QWORD *)(v16 + 48);
              v310 = *(_OWORD *)(v16 + 16);
              v339 = *(_OWORD *)(v16 + 32);
              v279 = *(_OWORD *)v16;
              v114 = *(_OWORD *)(v83 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v83;
              *(_OWORD *)(v16 + 16) = v114;
              *(_OWORD *)(v16 + 32) = *(_OWORD *)(v83 + 32);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(v83 + 48);
              *(_OWORD *)(v83 + 16) = v310;
              *(_OWORD *)(v83 + 32) = v339;
              *(_QWORD *)(v83 + 48) = v363;
              *(_OWORD *)v83 = v279;
              if (*(_DWORD *)(v16 + 8) < *(_DWORD *)(v46 + 8))
              {
                v364 = *(_QWORD *)(v46 + 48);
                v311 = *(_OWORD *)(v46 + 16);
                v340 = *(_OWORD *)(v46 + 32);
                v280 = *(_OWORD *)v46;
                v115 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v46 = *(_OWORD *)v16;
                *(_OWORD *)(v46 + 16) = v115;
                *(_OWORD *)(v46 + 32) = *(_OWORD *)(v16 + 32);
                *(_QWORD *)(v46 + 48) = *(_QWORD *)(v16 + 48);
                *(_OWORD *)(v16 + 16) = v311;
                *(_OWORD *)(v16 + 32) = v340;
                *(_QWORD *)(v16 + 48) = v364;
                *(_OWORD *)v16 = v280;
              }
            }
          }
          else
          {
            if (v112 >= v111)
            {
              v365 = *(_QWORD *)(v46 + 48);
              v312 = *(_OWORD *)(v46 + 16);
              v341 = *(_OWORD *)(v46 + 32);
              v281 = *(_OWORD *)v46;
              v116 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v46 = *(_OWORD *)v16;
              *(_OWORD *)(v46 + 16) = v116;
              *(_OWORD *)(v46 + 32) = *(_OWORD *)(v16 + 32);
              *(_QWORD *)(v46 + 48) = *(_QWORD *)(v16 + 48);
              *(_OWORD *)(v16 + 16) = v312;
              *(_OWORD *)(v16 + 32) = v341;
              *(_QWORD *)(v16 + 48) = v365;
              *(_OWORD *)v16 = v281;
              if (*(_DWORD *)(v83 + 8) >= *(_DWORD *)(v16 + 8))
                goto LABEL_54;
              v362 = *(_QWORD *)(v16 + 48);
              v309 = *(_OWORD *)(v16 + 16);
              v338 = *(_OWORD *)(v16 + 32);
              v278 = *(_OWORD *)v16;
              v117 = *(_OWORD *)(v83 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v83;
              *(_OWORD *)(v16 + 16) = v117;
              *(_OWORD *)(v16 + 32) = *(_OWORD *)(v83 + 32);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(v83 + 48);
            }
            else
            {
              v362 = *(_QWORD *)(v46 + 48);
              v309 = *(_OWORD *)(v46 + 16);
              v338 = *(_OWORD *)(v46 + 32);
              v278 = *(_OWORD *)v46;
              v113 = *(_OWORD *)(v83 + 16);
              *(_OWORD *)v46 = *(_OWORD *)v83;
              *(_OWORD *)(v46 + 16) = v113;
              *(_OWORD *)(v46 + 32) = *(_OWORD *)(v83 + 32);
              *(_QWORD *)(v46 + 48) = *(_QWORD *)(v83 + 48);
            }
            *(_OWORD *)(v83 + 16) = v309;
            *(_OWORD *)(v83 + 32) = v338;
            *(_QWORD *)(v83 + 48) = v362;
            *(_OWORD *)v83 = v278;
          }
LABEL_54:
          v366 = *(_QWORD *)(v12 + 48);
          v313 = *(_OWORD *)(v12 + 16);
          v342 = *(_OWORD *)(v12 + 32);
          v282 = *(_OWORD *)v12;
          v118 = *(_OWORD *)v16;
          v119 = *(_OWORD *)(v16 + 16);
          v120 = *(_OWORD *)(v16 + 32);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
          *(_OWORD *)(v12 + 16) = v119;
          *(_OWORD *)(v12 + 32) = v120;
          *(_OWORD *)v12 = v118;
          *(_QWORD *)(v16 + 48) = v366;
          *(_OWORD *)(v16 + 16) = v313;
          *(_OWORD *)(v16 + 32) = v342;
          *(_OWORD *)v16 = v282;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v71 = *(unsigned int *)(v12 + 8);
LABEL_56:
          v121 = 0;
          v122 = *(_QWORD *)v12;
          *(_OWORD *)&v263[12] = *(_OWORD *)(v12 + 40);
          v260 = *(__n128 *)(v12 + 12);
          *(_OWORD *)v263 = *(_OWORD *)(v12 + 28);
          do
          {
            if (v12 + v121 + 56 == a2)
              goto LABEL_182;
            v123 = *(_DWORD *)(v12 + v121 + 64);
            v121 += 56;
          }
          while (v123 < v71);
          v124 = v12 + v121;
          v125 = a2;
          if (v121 != 56)
          {
            while (v125 != v12)
            {
              v126 = v125 - 56;
              v127 = *(_DWORD *)(v125 - 48);
              v125 -= 56;
              if (v127 < v71)
                goto LABEL_66;
            }
            goto LABEL_182;
          }
          v128 = a2;
          do
          {
            if (v124 >= v128)
            {
              v126 = v128;
              v12 = v124;
              goto LABEL_77;
            }
            v126 = v128 - 56;
            v129 = *(_DWORD *)(v128 - 48);
            v128 -= 56;
          }
          while (v129 >= v71);
LABEL_66:
          v12 = v124;
          if (v124 < v126)
          {
            v130 = v126;
            do
            {
              v367 = *(_QWORD *)(v12 + 48);
              v314 = *(_OWORD *)(v12 + 16);
              v343 = *(_OWORD *)(v12 + 32);
              v283 = *(_OWORD *)v12;
              v131 = *(_OWORD *)v130;
              v132 = *(_OWORD *)(v130 + 16);
              v133 = *(_OWORD *)(v130 + 32);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(v130 + 48);
              *(_OWORD *)(v12 + 16) = v132;
              *(_OWORD *)(v12 + 32) = v133;
              *(_OWORD *)v12 = v131;
              *(_QWORD *)(v130 + 48) = v367;
              *(_OWORD *)(v130 + 16) = v314;
              *(_OWORD *)(v130 + 32) = v343;
              *(_OWORD *)v130 = v283;
              v134 = v12 + 56;
              do
              {
                if (v134 == a2)
                  goto LABEL_182;
                v135 = *(_DWORD *)(v134 + 8);
                v134 += 56;
              }
              while (v135 < v71);
              v12 = v134 - 56;
              do
              {
                if (v130 == a1)
                  goto LABEL_182;
                v136 = v130 - 56;
                v137 = *(_DWORD *)(v130 - 48);
                v130 -= 56;
              }
              while (v137 >= v71);
              v130 = v136;
            }
            while (v12 < v136);
          }
LABEL_77:
          if (v12 - 56 != a1)
          {
            v138 = *(_OWORD *)(v12 - 56);
            v139 = *(_OWORD *)(v12 - 40);
            v140 = *(_OWORD *)(v12 - 24);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)(a1 + 16) = v139;
            *(_OWORD *)(a1 + 32) = v140;
            *(_OWORD *)a1 = v138;
          }
          *(_QWORD *)(v12 - 56) = v122;
          *(_DWORD *)(v12 - 48) = v71;
          *(_OWORD *)(v12 - 16) = *(_OWORD *)&v263[12];
          *(_OWORD *)(v12 - 28) = *(_OWORD *)v263;
          *(__n128 *)(v12 - 44) = v260;
          if (v124 < v126)
            goto LABEL_82;
          v141 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>(a1, v12 - 56, v260);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>(v12, a2, v142))
          {
            if (v141)
              continue;
LABEL_82:
            std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *,false>(a1, v12 - 56, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 56;
          if (v141)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v71 = v12 + 56;
        v186 = v12 == a2 || v71 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v186)
          {
            v187 = 0;
            v188 = (_QWORD *)v12;
            do
            {
              v190 = (_QWORD *)v71;
              v191 = *((_DWORD *)v188 + 16);
              if (v191 < *((_DWORD *)v188 + 2))
              {
                v192 = *v190;
                v287 = *(_OWORD *)((char *)v188 + 68);
                *(_OWORD *)v319 = *(_OWORD *)((char *)v188 + 84);
                *(_OWORD *)&v319[12] = *((_OWORD *)v188 + 6);
                v193 = v187;
                do
                {
                  v194 = v12 + v193;
                  v195 = *(_OWORD *)(v12 + v193 + 16);
                  *(_OWORD *)(v194 + 56) = *(_OWORD *)(v12 + v193);
                  *(_OWORD *)(v194 + 72) = v195;
                  *(_OWORD *)(v194 + 88) = *(_OWORD *)(v12 + v193 + 32);
                  *(_QWORD *)(v194 + 104) = *(_QWORD *)(v12 + v193 + 48);
                  if (!v193)
                  {
                    v189 = v12;
                    goto LABEL_132;
                  }
                  v193 -= 56;
                }
                while (v191 < *(_DWORD *)(v194 - 48));
                v189 = v12 + v193 + 56;
LABEL_132:
                *(_QWORD *)v189 = v192;
                *(_DWORD *)(v189 + 8) = v191;
                a5.n128_u64[0] = v287;
                *(_OWORD *)(v189 + 40) = *(_OWORD *)&v319[12];
                *(_OWORD *)(v189 + 28) = *(_OWORD *)v319;
                *(_OWORD *)(v189 + 12) = v287;
              }
              v71 = (unint64_t)(v190 + 7);
              v187 += 56;
              v188 = v190;
            }
            while (v190 + 7 != (_QWORD *)a2);
          }
        }
        else if (!v186)
        {
          v242 = -2;
          v243 = 1;
          v244 = v12;
          while (1)
          {
            v245 = *(_DWORD *)(v244 + 64);
            if (v245 < *(_DWORD *)(v244 + 8))
              break;
LABEL_176:
            v244 = v12 + 56 * v243++;
            v71 += 56;
            --v242;
            if (v71 == a2)
              return a5.n128_f64[0];
          }
          v246 = *(_QWORD *)v71;
          v291 = *(_OWORD *)(v244 + 68);
          *(_OWORD *)v324 = *(_OWORD *)(v244 + 84);
          *(_OWORD *)&v324[12] = *(_OWORD *)(v244 + 96);
          v247 = v242;
          v248 = v71;
          while (1)
          {
            v249 = *(_OWORD *)(v248 - 40);
            *(_OWORD *)v248 = *(_OWORD *)(v248 - 56);
            *(_OWORD *)(v248 + 16) = v249;
            *(_OWORD *)(v248 + 32) = *(_OWORD *)(v248 - 24);
            *(_QWORD *)(v248 + 48) = *(_QWORD *)(v248 - 8);
            if (__CFADD__(v247++, 1))
              break;
            v251 = v248 - 56;
            v252 = *(_DWORD *)(v248 - 104);
            v248 -= 56;
            if (v245 >= v252)
            {
              *(_QWORD *)v251 = v246;
              *(_DWORD *)(v251 + 8) = v245;
              a5.n128_u64[0] = v291;
              *(_OWORD *)(v251 + 40) = *(_OWORD *)&v324[12];
              *(_OWORD *)(v251 + 28) = *(_OWORD *)v324;
              *(_OWORD *)(v251 + 12) = v291;
              goto LABEL_176;
            }
          }
LABEL_182:
          __break(1u);
LABEL_183:
          v373 = *(_QWORD *)(a1 + 48);
          v325 = *(_OWORD *)(a1 + 16);
          v349 = *(_OWORD *)(a1 + 32);
          v292 = *(_OWORD *)a1;
          v253 = *(_OWORD *)(v71 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v71;
          *(_OWORD *)(a1 + 16) = v253;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v71 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v71 + 48);
          a5.n128_u64[0] = v292;
          *(_QWORD *)(v71 + 48) = v373;
          *(_OWORD *)(v71 + 16) = v325;
          *(_OWORD *)(v71 + 32) = v349;
          *(_OWORD *)v71 = v292;
          if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 64))
          {
            a5 = *(__n128 *)v71;
            v168 = *(_OWORD *)(v71 + 16);
            v254 = *(_OWORD *)(v71 + 32);
            v255 = *(_QWORD *)(v71 + 48);
            v256 = *(_QWORD *)(a2 - 8);
            v258 = *(_OWORD *)(a2 - 40);
            v257 = *(_OWORD *)(a2 - 24);
            *(_OWORD *)v71 = *(_OWORD *)v9;
            *(_OWORD *)(v71 + 16) = v258;
            *(_OWORD *)(v71 + 32) = v257;
            *(_QWORD *)(v71 + 48) = v256;
            *(_OWORD *)(a2 - 24) = v254;
            *(_QWORD *)(a2 - 8) = v255;
LABEL_185:
            *(__n128 *)v9 = a5;
            *(_OWORD *)(v9 + 16) = v168;
          }
        }
        return a5.n128_f64[0];
    }
  }
}

  v9 = a2 - 8;
  v10 = a2 - 16;
  v11 = a2 - 24;
  v373 = (unsigned int *)a2 - 94;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 7;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*((_DWORD *)a2 - 30) < *(_DWORD *)(v12 + 8))
        {
          v491 = *(_OWORD *)(v12 + 32);
          v525 = *(_OWORD *)(v12 + 48);
          v421 = *(_OWORD *)v12;
          v456 = *(_OWORD *)(v12 + 16);
          v630 = *(_OWORD *)(v12 + 96);
          v665 = *(_OWORD *)(v12 + 112);
          v560 = *(_OWORD *)(v12 + 64);
          v595 = *(_OWORD *)(v12 + 80);
          v230 = *(a2 - 1);
          v232 = *(a2 - 4);
          v231 = *(a2 - 3);
          *(_OWORD *)(v12 + 96) = *(a2 - 2);
          *(_OWORD *)(v12 + 112) = v230;
          *(_OWORD *)(v12 + 64) = v232;
          *(_OWORD *)(v12 + 80) = v231;
          v233 = *(a2 - 8);
          v234 = *(a2 - 7);
          v235 = *(a2 - 5);
          *(_OWORD *)(v12 + 32) = *(a2 - 6);
          *(_OWORD *)(v12 + 48) = v235;
          *(_OWORD *)v12 = v233;
          *(_OWORD *)(v12 + 16) = v234;
          *(a2 - 6) = v491;
          *(a2 - 5) = v525;
          *(a2 - 8) = v421;
          *(a2 - 7) = v456;
          result = *(double *)&v560;
          *(a2 - 2) = v630;
          *(a2 - 1) = v665;
          *(a2 - 4) = v560;
          *(a2 - 3) = v595;
        }
        return result;
      case 3:
        v103 = (__int128 *)(v12 + 128);
        v236 = *(_DWORD *)(v12 + 136);
        v237 = *((_DWORD *)a2 - 30);
        if (v236 < *(_DWORD *)(v12 + 8))
        {
          if (v237 >= v236)
            goto LABEL_182;
          v492 = *(_OWORD *)(v12 + 32);
          v526 = *(_OWORD *)(v12 + 48);
          v422 = *(_OWORD *)v12;
          v457 = *(_OWORD *)(v12 + 16);
          v631 = *(_OWORD *)(v12 + 96);
          v666 = *(_OWORD *)(v12 + 112);
          v561 = *(_OWORD *)(v12 + 64);
          v596 = *(_OWORD *)(v12 + 80);
          v238 = *(a2 - 1);
          v240 = *(a2 - 4);
          v239 = *(a2 - 3);
          *(_OWORD *)(v12 + 96) = *(a2 - 2);
          *(_OWORD *)(v12 + 112) = v238;
          *(_OWORD *)(v12 + 64) = v240;
          *(_OWORD *)(v12 + 80) = v239;
          v241 = *v9;
          v242 = *(a2 - 7);
          v243 = *(a2 - 5);
          *(_OWORD *)(v12 + 32) = *(a2 - 6);
          *(_OWORD *)(v12 + 48) = v243;
          *(_OWORD *)v12 = v241;
          *(_OWORD *)(v12 + 16) = v242;
          goto LABEL_184;
        }
        if (v237 < v236)
        {
          v568 = *(_OWORD *)(v12 + 192);
          v603 = *(_OWORD *)(v12 + 208);
          v638 = *(_OWORD *)(v12 + 224);
          v673 = *(_OWORD *)(v12 + 240);
          v429 = *v103;
          v464 = *(_OWORD *)(v12 + 144);
          v499 = *(_OWORD *)(v12 + 160);
          v533 = *(_OWORD *)(v12 + 176);
          v337 = *v9;
          v338 = *(a2 - 7);
          v339 = *(a2 - 5);
          *(_OWORD *)(v12 + 160) = *(a2 - 6);
          *(_OWORD *)(v12 + 176) = v339;
          *v103 = v337;
          *(_OWORD *)(v12 + 144) = v338;
          v341 = *(a2 - 2);
          v340 = *(a2 - 1);
          v342 = *(a2 - 3);
          *(_OWORD *)(v12 + 192) = *(a2 - 4);
          *(_OWORD *)(v12 + 208) = v342;
          *(_OWORD *)(v12 + 224) = v341;
          *(_OWORD *)(v12 + 240) = v340;
          *(a2 - 6) = v499;
          *(a2 - 5) = v533;
          *v9 = v429;
          *(a2 - 7) = v464;
          result = *(double *)&v568;
          *(a2 - 2) = v638;
          *(a2 - 1) = v673;
          *(a2 - 4) = v568;
          *(a2 - 3) = v603;
          if (*(_DWORD *)(v12 + 136) < *(_DWORD *)(v12 + 8))
          {
            v500 = *(_OWORD *)(v12 + 32);
            v534 = *(_OWORD *)(v12 + 48);
            v430 = *(_OWORD *)v12;
            v465 = *(_OWORD *)(v12 + 16);
            v639 = *(_OWORD *)(v12 + 96);
            v674 = *(_OWORD *)(v12 + 112);
            v569 = *(_OWORD *)(v12 + 64);
            v604 = *(_OWORD *)(v12 + 80);
            v343 = *(_OWORD *)(v12 + 208);
            *(_OWORD *)(v12 + 64) = *(_OWORD *)(v12 + 192);
            *(_OWORD *)(v12 + 80) = v343;
            v344 = *(_OWORD *)(v12 + 240);
            *(_OWORD *)(v12 + 96) = *(_OWORD *)(v12 + 224);
            *(_OWORD *)(v12 + 112) = v344;
            v345 = *(_OWORD *)(v12 + 144);
            *(_OWORD *)v12 = *v103;
            *(_OWORD *)(v12 + 16) = v345;
            v346 = *(_OWORD *)(v12 + 176);
            *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 160);
            *(_OWORD *)(v12 + 48) = v346;
            *(_OWORD *)(v12 + 160) = v500;
            *(_OWORD *)(v12 + 176) = v534;
            *v103 = v430;
            *(_OWORD *)(v12 + 144) = v465;
            result = *(double *)&v569;
            *(_OWORD *)(v12 + 224) = v639;
            *(_OWORD *)(v12 + 240) = v674;
            *(_OWORD *)(v12 + 192) = v569;
            *(_OWORD *)(v12 + 208) = v604;
          }
        }
        return result;
      case 4:
        *(_QWORD *)&result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>((__int128 *)v12, (__int128 *)(v12 + 128), (__int128 *)(v12 + 256), a2 - 8).n128_u64[0];
        return result;
      case 5:
        v9 = (__int128 *)(v12 + 128);
        v244 = (__int128 *)(v12 + 256);
        v245 = (__int128 *)(v12 + 384);
        *(_QWORD *)&result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>((__int128 *)v12, (__int128 *)(v12 + 128), (__int128 *)(v12 + 256), (__int128 *)(v12 + 384)).n128_u64[0];
        if (*((_DWORD *)a2 - 30) < *(_DWORD *)(v12 + 392))
        {
          v562 = *(_OWORD *)(v12 + 448);
          v597 = *(_OWORD *)(v12 + 464);
          v632 = *(_OWORD *)(v12 + 480);
          v667 = *(_OWORD *)(v12 + 496);
          v423 = *v245;
          v458 = *(_OWORD *)(v12 + 400);
          v493 = *(_OWORD *)(v12 + 416);
          v527 = *(_OWORD *)(v12 + 432);
          v246 = *(a2 - 8);
          v247 = *(a2 - 7);
          v248 = *(a2 - 5);
          *(_OWORD *)(v12 + 416) = *(a2 - 6);
          *(_OWORD *)(v12 + 432) = v248;
          *v245 = v246;
          *(_OWORD *)(v12 + 400) = v247;
          v250 = *(a2 - 2);
          v249 = *(a2 - 1);
          v251 = *(a2 - 3);
          *(_OWORD *)(v12 + 448) = *(a2 - 4);
          *(_OWORD *)(v12 + 464) = v251;
          *(_OWORD *)(v12 + 480) = v250;
          *(_OWORD *)(v12 + 496) = v249;
          *(a2 - 6) = v493;
          *(a2 - 5) = v527;
          *(a2 - 8) = v423;
          *(a2 - 7) = v458;
          result = *(double *)&v562;
          *(a2 - 2) = v632;
          *(a2 - 1) = v667;
          *(a2 - 4) = v562;
          *(a2 - 3) = v597;
          if (*(_DWORD *)(v12 + 392) < *(_DWORD *)(v12 + 264))
          {
            v563 = *(_OWORD *)(v12 + 320);
            v598 = *(_OWORD *)(v12 + 336);
            v633 = *(_OWORD *)(v12 + 352);
            v668 = *(_OWORD *)(v12 + 368);
            v424 = *v244;
            v459 = *(_OWORD *)(v12 + 272);
            v494 = *(_OWORD *)(v12 + 288);
            v528 = *(_OWORD *)(v12 + 304);
            v252 = *v245;
            v253 = *(_OWORD *)(v12 + 400);
            v254 = *(_OWORD *)(v12 + 432);
            *(_OWORD *)(v12 + 288) = *(_OWORD *)(v12 + 416);
            *(_OWORD *)(v12 + 304) = v254;
            *v244 = v252;
            *(_OWORD *)(v12 + 272) = v253;
            v255 = *(_OWORD *)(v12 + 448);
            v256 = *(_OWORD *)(v12 + 464);
            v257 = *(_OWORD *)(v12 + 496);
            *(_OWORD *)(v12 + 352) = *(_OWORD *)(v12 + 480);
            *(_OWORD *)(v12 + 368) = v257;
            *(_OWORD *)(v12 + 320) = v255;
            *(_OWORD *)(v12 + 336) = v256;
            *(_OWORD *)(v12 + 416) = v494;
            *(_OWORD *)(v12 + 432) = v528;
            *v245 = v424;
            *(_OWORD *)(v12 + 400) = v459;
            result = *(double *)&v563;
            *(_OWORD *)(v12 + 480) = v633;
            *(_OWORD *)(v12 + 496) = v668;
            *(_OWORD *)(v12 + 448) = v563;
            *(_OWORD *)(v12 + 464) = v598;
            if (*(_DWORD *)(v12 + 264) < *(_DWORD *)(v12 + 136))
            {
              v564 = *(_OWORD *)(v12 + 192);
              v599 = *(_OWORD *)(v12 + 208);
              v634 = *(_OWORD *)(v12 + 224);
              v669 = *(_OWORD *)(v12 + 240);
              v425 = *v9;
              v460 = *(_OWORD *)(v12 + 144);
              v495 = *(_OWORD *)(v12 + 160);
              v529 = *(_OWORD *)(v12 + 176);
              v258 = *v244;
              v259 = *(_OWORD *)(v12 + 272);
              v260 = *(_OWORD *)(v12 + 304);
              *(_OWORD *)(v12 + 160) = *(_OWORD *)(v12 + 288);
              *(_OWORD *)(v12 + 176) = v260;
              *v9 = v258;
              *(_OWORD *)(v12 + 144) = v259;
              v261 = *(_OWORD *)(v12 + 320);
              v262 = *(_OWORD *)(v12 + 336);
              v263 = *(_OWORD *)(v12 + 368);
              *(_OWORD *)(v12 + 224) = *(_OWORD *)(v12 + 352);
              *(_OWORD *)(v12 + 240) = v263;
              *(_OWORD *)(v12 + 192) = v261;
              *(_OWORD *)(v12 + 208) = v262;
              *(_OWORD *)(v12 + 288) = v495;
              *(_OWORD *)(v12 + 304) = v529;
              *v244 = v425;
              *(_OWORD *)(v12 + 272) = v460;
              result = *(double *)&v564;
              *(_OWORD *)(v12 + 352) = v634;
              *(_OWORD *)(v12 + 368) = v669;
              *(_OWORD *)(v12 + 320) = v564;
              *(_OWORD *)(v12 + 336) = v599;
              if (*(_DWORD *)(v12 + 136) < *(_DWORD *)(v12 + 8))
              {
                v492 = *(_OWORD *)(v12 + 32);
                v526 = *(_OWORD *)(v12 + 48);
                v422 = *(_OWORD *)v12;
                v457 = *(_OWORD *)(v12 + 16);
                v631 = *(_OWORD *)(v12 + 96);
                v666 = *(_OWORD *)(v12 + 112);
                v561 = *(_OWORD *)(v12 + 64);
                v596 = *(_OWORD *)(v12 + 80);
                v264 = *(_OWORD *)(v12 + 208);
                *(_OWORD *)(v12 + 64) = *(_OWORD *)(v12 + 192);
                *(_OWORD *)(v12 + 80) = v264;
                v265 = *(_OWORD *)(v12 + 240);
                *(_OWORD *)(v12 + 96) = *(_OWORD *)(v12 + 224);
                *(_OWORD *)(v12 + 112) = v265;
                v266 = *(_OWORD *)(v12 + 144);
                *(_OWORD *)v12 = *v9;
                *(_OWORD *)(v12 + 16) = v266;
                v267 = *(_OWORD *)(v12 + 176);
                *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 160);
                *(_OWORD *)(v12 + 48) = v267;
                goto LABEL_184;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 3071)
        {
          if (!a3)
          {
            if ((__int128 *)v12 != a2)
            {
              v284 = (unint64_t)(v14 - 2) >> 1;
              v285 = v284;
              do
              {
                if (v284 >= v285)
                {
                  v287 = (2 * v285) | 1;
                  v288 = v12 + (v287 << 7);
                  if (2 * v285 + 2 < v14)
                  {
                    v289 = *(_DWORD *)(v288 + 8);
                    v290 = *(_DWORD *)(v288 + 136);
                    v288 += (unint64_t)(v289 < v290) << 7;
                    if (v289 < v290)
                      v287 = 2 * v285 + 2;
                  }
                  v291 = v12 + (v285 << 7);
                  v292 = *(_DWORD *)(v291 + 8);
                  if (*(_DWORD *)(v288 + 8) >= v292)
                  {
                    v293 = *(_QWORD *)v291;
                    v497 = *(_OWORD *)(v291 + 44);
                    v531 = *(_OWORD *)(v291 + 60);
                    v427 = *(_OWORD *)(v291 + 12);
                    v462 = *(_OWORD *)(v291 + 28);
                    v671 = *(_DWORD *)(v291 + 124);
                    v601 = *(_OWORD *)(v291 + 92);
                    v636 = *(_OWORD *)(v291 + 108);
                    v566 = *(_OWORD *)(v291 + 76);
                    do
                    {
                      v294 = (_OWORD *)v291;
                      v291 = v288;
                      v295 = *(_OWORD *)v288;
                      v296 = *(_OWORD *)(v288 + 16);
                      v297 = *(_OWORD *)(v288 + 48);
                      v294[2] = *(_OWORD *)(v288 + 32);
                      v294[3] = v297;
                      *v294 = v295;
                      v294[1] = v296;
                      v298 = *(_OWORD *)(v288 + 64);
                      v299 = *(_OWORD *)(v288 + 80);
                      v300 = *(_OWORD *)(v288 + 112);
                      v294[6] = *(_OWORD *)(v288 + 96);
                      v294[7] = v300;
                      v294[4] = v298;
                      v294[5] = v299;
                      if (v284 < v287)
                        break;
                      v301 = (2 * v287) | 1;
                      v288 = v12 + (v301 << 7);
                      v302 = 2 * v287 + 2;
                      if (v302 < v14)
                      {
                        v303 = *(_DWORD *)(v288 + 8);
                        v304 = *(_DWORD *)(v288 + 136);
                        v288 += (unint64_t)(v303 < v304) << 7;
                        if (v303 < v304)
                          v301 = v302;
                      }
                      v287 = v301;
                    }
                    while (*(_DWORD *)(v288 + 8) >= v292);
                    *(_QWORD *)v291 = v293;
                    *(_DWORD *)(v291 + 8) = v292;
                    *(_DWORD *)(v291 + 124) = v671;
                    *(_OWORD *)(v291 + 60) = v531;
                    *(_OWORD *)(v291 + 44) = v497;
                    *(_OWORD *)(v291 + 28) = v462;
                    *(_OWORD *)(v291 + 12) = v427;
                    *(_OWORD *)(v291 + 108) = v636;
                    *(_OWORD *)(v291 + 92) = v601;
                    *(_OWORD *)(v291 + 76) = v566;
                  }
                }
                v286 = v285-- <= 0;
              }
              while (!v286);
              v305 = (unint64_t)v13 >> 7;
              do
              {
                v306 = 0;
                v498 = *(_OWORD *)(v12 + 32);
                v532 = *(_OWORD *)(v12 + 48);
                v428 = *(_OWORD *)v12;
                v463 = *(_OWORD *)(v12 + 16);
                v637 = *(_OWORD *)(v12 + 96);
                v672 = *(_OWORD *)(v12 + 112);
                v567 = *(_OWORD *)(v12 + 64);
                v602 = *(_OWORD *)(v12 + 80);
                v307 = (_OWORD *)v12;
                do
                {
                  v314 = (uint64_t)&v307[8 * v306 + 8];
                  v315 = (2 * v306) | 1;
                  v316 = 2 * v306 + 2;
                  if (v316 < v305)
                  {
                    v317 = *(_DWORD *)(v314 + 8);
                    v318 = *(_DWORD *)(v314 + 136);
                    v314 += (unint64_t)(v317 < v318) << 7;
                    if (v317 < v318)
                      v315 = v316;
                  }
                  v308 = *(_OWORD *)v314;
                  v309 = *(_OWORD *)(v314 + 16);
                  v310 = *(_OWORD *)(v314 + 48);
                  v307[2] = *(_OWORD *)(v314 + 32);
                  v307[3] = v310;
                  *v307 = v308;
                  v307[1] = v309;
                  v311 = *(_OWORD *)(v314 + 64);
                  v312 = *(_OWORD *)(v314 + 80);
                  v313 = *(_OWORD *)(v314 + 112);
                  v307[6] = *(_OWORD *)(v314 + 96);
                  v307[7] = v313;
                  v307[4] = v311;
                  v307[5] = v312;
                  v307 = (_OWORD *)v314;
                  v306 = v315;
                }
                while (v315 <= (uint64_t)((unint64_t)(v305 - 2) >> 1));
                a2 -= 8;
                if ((__int128 *)v314 == a2)
                {
                  *(_OWORD *)(v314 + 32) = v498;
                  *(_OWORD *)(v314 + 48) = v532;
                  *(_OWORD *)v314 = v428;
                  *(_OWORD *)(v314 + 16) = v463;
                  result = *(double *)&v567;
                  *(_OWORD *)(v314 + 96) = v637;
                  *(_OWORD *)(v314 + 112) = v672;
                  *(_OWORD *)(v314 + 64) = v567;
                  *(_OWORD *)(v314 + 80) = v602;
                }
                else
                {
                  v319 = *a2;
                  v320 = a2[1];
                  v321 = a2[3];
                  *(_OWORD *)(v314 + 32) = a2[2];
                  *(_OWORD *)(v314 + 48) = v321;
                  *(_OWORD *)v314 = v319;
                  *(_OWORD *)(v314 + 16) = v320;
                  v322 = a2[4];
                  v323 = a2[5];
                  v324 = a2[7];
                  *(_OWORD *)(v314 + 96) = a2[6];
                  *(_OWORD *)(v314 + 112) = v324;
                  *(_OWORD *)(v314 + 64) = v322;
                  *(_OWORD *)(v314 + 80) = v323;
                  a2[6] = v637;
                  a2[7] = v672;
                  a2[4] = v567;
                  a2[5] = v602;
                  result = *(double *)&v428;
                  a2[2] = v498;
                  a2[3] = v532;
                  *a2 = v428;
                  a2[1] = v463;
                  v325 = v314 - v12 + 128;
                  if (v325 >= 129)
                  {
                    v326 = (((unint64_t)v325 >> 7) - 2) >> 1;
                    v327 = v12 + (v326 << 7);
                    v328 = *(_DWORD *)(v314 + 8);
                    if (*(_DWORD *)(v327 + 8) < v328)
                    {
                      v329 = *(_QWORD *)v314;
                      v382 = *(_OWORD *)(v314 + 44);
                      v385 = *(_OWORD *)(v314 + 60);
                      v376 = *(_OWORD *)(v314 + 12);
                      v379 = *(_OWORD *)(v314 + 28);
                      v397 = *(_DWORD *)(v314 + 124);
                      v391 = *(_OWORD *)(v314 + 92);
                      v394 = *(_OWORD *)(v314 + 108);
                      v388 = *(_OWORD *)(v314 + 76);
                      do
                      {
                        v330 = (_OWORD *)v314;
                        v314 = v327;
                        v331 = *(_OWORD *)v327;
                        v332 = *(_OWORD *)(v327 + 16);
                        v333 = *(_OWORD *)(v327 + 48);
                        v330[2] = *(_OWORD *)(v327 + 32);
                        v330[3] = v333;
                        *v330 = v331;
                        v330[1] = v332;
                        v334 = *(_OWORD *)(v327 + 64);
                        v335 = *(_OWORD *)(v327 + 80);
                        v336 = *(_OWORD *)(v327 + 112);
                        v330[6] = *(_OWORD *)(v327 + 96);
                        v330[7] = v336;
                        v330[4] = v334;
                        v330[5] = v335;
                        if (!v326)
                          break;
                        v326 = (v326 - 1) >> 1;
                        v327 = v12 + (v326 << 7);
                      }
                      while (*(_DWORD *)(v327 + 8) < v328);
                      *(_QWORD *)v314 = v329;
                      *(_DWORD *)(v314 + 8) = v328;
                      result = *(double *)&v388;
                      *(_DWORD *)(v314 + 124) = v397;
                      *(_OWORD *)(v314 + 60) = v385;
                      *(_OWORD *)(v314 + 44) = v382;
                      *(_OWORD *)(v314 + 28) = v379;
                      *(_OWORD *)(v314 + 12) = v376;
                      *(_OWORD *)(v314 + 108) = v394;
                      *(_OWORD *)(v314 + 92) = v391;
                      *(_OWORD *)(v314 + 76) = v388;
                    }
                  }
                }
                v286 = v305-- <= 2;
              }
              while (!v286);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + ((unint64_t)v14 >> 1 << 7);
          v17 = *((_DWORD *)a2 - 30);
          if ((unint64_t)v13 <= 0x4000)
          {
            v25 = *(_DWORD *)(v12 + 8);
            if (v25 >= *(_DWORD *)(v16 + 8))
            {
              if (v17 < v25)
              {
                v472 = *(_OWORD *)(v12 + 32);
                v506 = *(_OWORD *)(v12 + 48);
                v402 = *(_OWORD *)v12;
                v437 = *(_OWORD *)(v12 + 16);
                v611 = *(_OWORD *)(v12 + 96);
                v646 = *(_OWORD *)(v12 + 112);
                v541 = *(_OWORD *)(v12 + 64);
                v576 = *(_OWORD *)(v12 + 80);
                v44 = *(a2 - 1);
                v46 = *(a2 - 4);
                v45 = *(a2 - 3);
                *(_OWORD *)(v12 + 96) = *(a2 - 2);
                *(_OWORD *)(v12 + 112) = v44;
                *(_OWORD *)(v12 + 64) = v46;
                *(_OWORD *)(v12 + 80) = v45;
                v47 = *v9;
                v48 = *(a2 - 7);
                v49 = *(a2 - 5);
                *(_OWORD *)(v12 + 32) = *(a2 - 6);
                *(_OWORD *)(v12 + 48) = v49;
                *(_OWORD *)v12 = v47;
                *(_OWORD *)(v12 + 16) = v48;
                *(a2 - 6) = v472;
                *(a2 - 5) = v506;
                *v9 = v402;
                *(a2 - 7) = v437;
                *(a2 - 2) = v611;
                *(a2 - 1) = v646;
                *(a2 - 4) = v541;
                *(a2 - 3) = v576;
                if (*(_DWORD *)(v12 + 8) < *(_DWORD *)(v16 + 8))
                {
                  v473 = *(_OWORD *)(v16 + 32);
                  v507 = *(_OWORD *)(v16 + 48);
                  v403 = *(_OWORD *)v16;
                  v438 = *(_OWORD *)(v16 + 16);
                  v612 = *(_OWORD *)(v16 + 96);
                  v647 = *(_OWORD *)(v16 + 112);
                  v542 = *(_OWORD *)(v16 + 64);
                  v577 = *(_OWORD *)(v16 + 80);
                  v50 = *(_OWORD *)(v12 + 112);
                  v52 = *(_OWORD *)(v12 + 64);
                  v51 = *(_OWORD *)(v12 + 80);
                  *(_OWORD *)(v16 + 96) = *(_OWORD *)(v12 + 96);
                  *(_OWORD *)(v16 + 112) = v50;
                  *(_OWORD *)(v16 + 64) = v52;
                  *(_OWORD *)(v16 + 80) = v51;
                  v53 = *(_OWORD *)v12;
                  v54 = *(_OWORD *)(v12 + 16);
                  v55 = *(_OWORD *)(v12 + 48);
                  *(_OWORD *)(v16 + 32) = *(_OWORD *)(v12 + 32);
                  *(_OWORD *)(v16 + 48) = v55;
                  *(_OWORD *)v16 = v53;
                  *(_OWORD *)(v16 + 16) = v54;
                  *(_OWORD *)(v12 + 32) = v473;
                  *(_OWORD *)(v12 + 48) = v507;
                  *(_OWORD *)v12 = v403;
                  *(_OWORD *)(v12 + 16) = v438;
                  *(_OWORD *)(v12 + 96) = v612;
                  *(_OWORD *)(v12 + 112) = v647;
                  *(_OWORD *)(v12 + 64) = v542;
                  *(_OWORD *)(v12 + 80) = v577;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v25)
              {
                v478 = *(_OWORD *)(v16 + 32);
                v512 = *(_OWORD *)(v16 + 48);
                v408 = *(_OWORD *)v16;
                v443 = *(_OWORD *)(v16 + 16);
                v617 = *(_OWORD *)(v16 + 96);
                v652 = *(_OWORD *)(v16 + 112);
                v547 = *(_OWORD *)(v16 + 64);
                v582 = *(_OWORD *)(v16 + 80);
                v91 = *(_OWORD *)(v12 + 112);
                v93 = *(_OWORD *)(v12 + 64);
                v92 = *(_OWORD *)(v12 + 80);
                *(_OWORD *)(v16 + 96) = *(_OWORD *)(v12 + 96);
                *(_OWORD *)(v16 + 112) = v91;
                *(_OWORD *)(v16 + 64) = v93;
                *(_OWORD *)(v16 + 80) = v92;
                v94 = *(_OWORD *)v12;
                v95 = *(_OWORD *)(v12 + 16);
                v96 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)(v16 + 32) = *(_OWORD *)(v12 + 32);
                *(_OWORD *)(v16 + 48) = v96;
                *(_OWORD *)v16 = v94;
                *(_OWORD *)(v16 + 16) = v95;
                *(_OWORD *)(v12 + 32) = v478;
                *(_OWORD *)(v12 + 48) = v512;
                *(_OWORD *)v12 = v408;
                *(_OWORD *)(v12 + 16) = v443;
                *(_OWORD *)(v12 + 96) = v617;
                *(_OWORD *)(v12 + 112) = v652;
                *(_OWORD *)(v12 + 64) = v547;
                *(_OWORD *)(v12 + 80) = v582;
                if (*((_DWORD *)a2 - 30) >= *(_DWORD *)(v12 + 8))
                  goto LABEL_31;
                v469 = *(_OWORD *)(v12 + 32);
                v503 = *(_OWORD *)(v12 + 48);
                v399 = *(_OWORD *)v12;
                v434 = *(_OWORD *)(v12 + 16);
                v608 = *(_OWORD *)(v12 + 96);
                v643 = *(_OWORD *)(v12 + 112);
                v538 = *(_OWORD *)(v12 + 64);
                v573 = *(_OWORD *)(v12 + 80);
                v97 = *(a2 - 1);
                v99 = *(a2 - 4);
                v98 = *(a2 - 3);
                *(_OWORD *)(v12 + 96) = *(a2 - 2);
                *(_OWORD *)(v12 + 112) = v97;
                *(_OWORD *)(v12 + 64) = v99;
                *(_OWORD *)(v12 + 80) = v98;
                v100 = *v9;
                v101 = *(a2 - 7);
                v102 = *(a2 - 5);
                *(_OWORD *)(v12 + 32) = *(a2 - 6);
                *(_OWORD *)(v12 + 48) = v102;
                *(_OWORD *)v12 = v100;
                *(_OWORD *)(v12 + 16) = v101;
              }
              else
              {
                v469 = *(_OWORD *)(v16 + 32);
                v503 = *(_OWORD *)(v16 + 48);
                v399 = *(_OWORD *)v16;
                v434 = *(_OWORD *)(v16 + 16);
                v608 = *(_OWORD *)(v16 + 96);
                v643 = *(_OWORD *)(v16 + 112);
                v538 = *(_OWORD *)(v16 + 64);
                v573 = *(_OWORD *)(v16 + 80);
                v26 = *(a2 - 1);
                v28 = *(a2 - 4);
                v27 = *(a2 - 3);
                *(_OWORD *)(v16 + 96) = *(a2 - 2);
                *(_OWORD *)(v16 + 112) = v26;
                *(_OWORD *)(v16 + 64) = v28;
                *(_OWORD *)(v16 + 80) = v27;
                v29 = *v9;
                v30 = *(a2 - 7);
                v31 = *(a2 - 5);
                *(_OWORD *)(v16 + 32) = *(a2 - 6);
                *(_OWORD *)(v16 + 48) = v31;
                *(_OWORD *)v16 = v29;
                *(_OWORD *)(v16 + 16) = v30;
              }
              *(a2 - 6) = v469;
              *(a2 - 5) = v503;
              *v9 = v399;
              *(a2 - 7) = v434;
              *(a2 - 2) = v608;
              *(a2 - 1) = v643;
              *(a2 - 4) = v538;
              *(a2 - 3) = v573;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v103 = (__int128 *)*(unsigned int *)(v12 + 8);
            if (*(_DWORD *)(v12 - 120) < v103)
              goto LABEL_56;
            v206 = *(_QWORD *)v12;
            v396 = *(_DWORD *)(v12 + 124);
            v390 = *(_OWORD *)(v12 + 92);
            v393 = *(_OWORD *)(v12 + 108);
            v387 = *(_OWORD *)(v12 + 76);
            v381 = *(_OWORD *)(v12 + 44);
            v384 = *(_OWORD *)(v12 + 60);
            v375 = *(_OWORD *)(v12 + 12);
            v378 = *(_OWORD *)(v12 + 28);
            if (v103 >= *((_DWORD *)a2 - 30))
            {
              v209 = v12 + 128;
              do
              {
                v12 = v209;
                if (v209 >= (unint64_t)a2)
                  break;
                v210 = *(_DWORD *)(v209 + 8);
                v209 += 128;
              }
              while (v103 >= v210);
            }
            else
            {
              v207 = v12 + 128;
              do
              {
                if ((__int128 *)v207 == a2)
                  goto LABEL_181;
                v208 = *(_DWORD *)(v207 + 8);
                v207 += 128;
              }
              while (v103 >= v208);
              v12 = v207 - 128;
            }
            v211 = a2;
            if (v12 < (unint64_t)a2)
            {
              v212 = a2;
              while (v212 != (__int128 *)a1)
              {
                v211 = v212 - 8;
                v213 = *((_DWORD *)v212 - 30);
                v212 -= 8;
                if (v103 >= v213)
                  goto LABEL_95;
              }
              goto LABEL_181;
            }
LABEL_95:
            if (v12 < (unint64_t)v211)
            {
              do
              {
                v490 = *(_OWORD *)(v12 + 32);
                v524 = *(_OWORD *)(v12 + 48);
                v420 = *(_OWORD *)v12;
                v455 = *(_OWORD *)(v12 + 16);
                v629 = *(_OWORD *)(v12 + 96);
                v664 = *(_OWORD *)(v12 + 112);
                v559 = *(_OWORD *)(v12 + 64);
                v594 = *(_OWORD *)(v12 + 80);
                v214 = v211[7];
                v216 = v211[4];
                v215 = v211[5];
                *(_OWORD *)(v12 + 96) = v211[6];
                *(_OWORD *)(v12 + 112) = v214;
                *(_OWORD *)(v12 + 64) = v216;
                *(_OWORD *)(v12 + 80) = v215;
                v217 = *v211;
                v218 = v211[1];
                v219 = v211[3];
                *(_OWORD *)(v12 + 32) = v211[2];
                *(_OWORD *)(v12 + 48) = v219;
                *(_OWORD *)v12 = v217;
                *(_OWORD *)(v12 + 16) = v218;
                v211[2] = v490;
                v211[3] = v524;
                *v211 = v420;
                v211[1] = v455;
                v211[6] = v629;
                v211[7] = v664;
                v211[4] = v559;
                v211[5] = v594;
                v220 = v12 + 128;
                do
                {
                  if ((__int128 *)v220 == a2)
                    goto LABEL_181;
                  v221 = *(_DWORD *)(v220 + 8);
                  v220 += 128;
                }
                while (v103 >= v221);
                v12 = v220 - 128;
                do
                {
                  if (v211 == (__int128 *)a1)
                    goto LABEL_181;
                  v222 = v211 - 8;
                  v223 = *((_DWORD *)v211 - 30);
                  v211 -= 8;
                }
                while (v103 < v223);
                v211 = v222;
              }
              while (v12 < (unint64_t)v222);
            }
            if (v12 - 128 != a1)
            {
              v224 = *(_OWORD *)(v12 - 128);
              v225 = *(_OWORD *)(v12 - 112);
              v226 = *(_OWORD *)(v12 - 80);
              *(_OWORD *)(a1 + 32) = *(_OWORD *)(v12 - 96);
              *(_OWORD *)(a1 + 48) = v226;
              *(_OWORD *)a1 = v224;
              *(_OWORD *)(a1 + 16) = v225;
              v227 = *(_OWORD *)(v12 - 64);
              v228 = *(_OWORD *)(v12 - 48);
              v229 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)(a1 + 96) = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 112) = v229;
              *(_OWORD *)(a1 + 64) = v227;
              *(_OWORD *)(a1 + 80) = v228;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 128) = v206;
            *(_DWORD *)(v12 - 120) = (_DWORD)v103;
            *(_OWORD *)(v12 - 68) = v384;
            *(_OWORD *)(v12 - 84) = v381;
            *(_OWORD *)(v12 - 100) = v378;
            *(_OWORD *)(v12 - 116) = v375;
            result = *(double *)&v387;
            *(_DWORD *)(v12 - 4) = v396;
            *(_OWORD *)(v12 - 20) = v393;
            *(_OWORD *)(v12 - 36) = v390;
            *(_OWORD *)(v12 - 52) = v387;
            continue;
          }
          v18 = *(_DWORD *)(v16 + 8);
          if (v18 >= *(_DWORD *)(v12 + 8))
          {
            if (v17 < v18)
            {
              v470 = *(_OWORD *)(v16 + 32);
              v504 = *(_OWORD *)(v16 + 48);
              v400 = *(_OWORD *)v16;
              v435 = *(_OWORD *)(v16 + 16);
              v609 = *(_OWORD *)(v16 + 96);
              v644 = *(_OWORD *)(v16 + 112);
              v539 = *(_OWORD *)(v16 + 64);
              v574 = *(_OWORD *)(v16 + 80);
              v32 = *(a2 - 1);
              v34 = *(a2 - 4);
              v33 = *(a2 - 3);
              *(_OWORD *)(v16 + 96) = *(a2 - 2);
              *(_OWORD *)(v16 + 112) = v32;
              *(_OWORD *)(v16 + 64) = v34;
              *(_OWORD *)(v16 + 80) = v33;
              v35 = *v9;
              v36 = *(a2 - 7);
              v37 = *(a2 - 5);
              *(_OWORD *)(v16 + 32) = *(a2 - 6);
              *(_OWORD *)(v16 + 48) = v37;
              *(_OWORD *)v16 = v35;
              *(_OWORD *)(v16 + 16) = v36;
              *(a2 - 6) = v470;
              *(a2 - 5) = v504;
              *v9 = v400;
              *(a2 - 7) = v435;
              *(a2 - 2) = v609;
              *(a2 - 1) = v644;
              *(a2 - 4) = v539;
              *(a2 - 3) = v574;
              if (*(_DWORD *)(v16 + 8) < *(_DWORD *)(v12 + 8))
              {
                v471 = *(_OWORD *)(v12 + 32);
                v505 = *(_OWORD *)(v12 + 48);
                v401 = *(_OWORD *)v12;
                v436 = *(_OWORD *)(v12 + 16);
                v610 = *(_OWORD *)(v12 + 96);
                v645 = *(_OWORD *)(v12 + 112);
                v540 = *(_OWORD *)(v12 + 64);
                v575 = *(_OWORD *)(v12 + 80);
                v38 = *(_OWORD *)(v16 + 112);
                v40 = *(_OWORD *)(v16 + 64);
                v39 = *(_OWORD *)(v16 + 80);
                *(_OWORD *)(v12 + 96) = *(_OWORD *)(v16 + 96);
                *(_OWORD *)(v12 + 112) = v38;
                *(_OWORD *)(v12 + 64) = v40;
                *(_OWORD *)(v12 + 80) = v39;
                v41 = *(_OWORD *)v16;
                v42 = *(_OWORD *)(v16 + 16);
                v43 = *(_OWORD *)(v16 + 48);
                *(_OWORD *)(v12 + 32) = *(_OWORD *)(v16 + 32);
                *(_OWORD *)(v12 + 48) = v43;
                *(_OWORD *)v12 = v41;
                *(_OWORD *)(v12 + 16) = v42;
                *(_OWORD *)(v16 + 32) = v471;
                *(_OWORD *)(v16 + 48) = v505;
                *(_OWORD *)v16 = v401;
                *(_OWORD *)(v16 + 16) = v436;
                *(_OWORD *)(v16 + 96) = v610;
                *(_OWORD *)(v16 + 112) = v645;
                *(_OWORD *)(v16 + 64) = v540;
                *(_OWORD *)(v16 + 80) = v575;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v474 = *(_OWORD *)(v12 + 32);
              v508 = *(_OWORD *)(v12 + 48);
              v404 = *(_OWORD *)v12;
              v439 = *(_OWORD *)(v12 + 16);
              v613 = *(_OWORD *)(v12 + 96);
              v648 = *(_OWORD *)(v12 + 112);
              v543 = *(_OWORD *)(v12 + 64);
              v578 = *(_OWORD *)(v12 + 80);
              v56 = *(_OWORD *)(v16 + 112);
              v58 = *(_OWORD *)(v16 + 64);
              v57 = *(_OWORD *)(v16 + 80);
              *(_OWORD *)(v12 + 96) = *(_OWORD *)(v16 + 96);
              *(_OWORD *)(v12 + 112) = v56;
              *(_OWORD *)(v12 + 64) = v58;
              *(_OWORD *)(v12 + 80) = v57;
              v59 = *(_OWORD *)v16;
              v60 = *(_OWORD *)(v16 + 16);
              v61 = *(_OWORD *)(v16 + 48);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v16 + 32);
              *(_OWORD *)(v12 + 48) = v61;
              *(_OWORD *)v12 = v59;
              *(_OWORD *)(v12 + 16) = v60;
              *(_OWORD *)(v16 + 32) = v474;
              *(_OWORD *)(v16 + 48) = v508;
              *(_OWORD *)v16 = v404;
              *(_OWORD *)(v16 + 16) = v439;
              *(_OWORD *)(v16 + 96) = v613;
              *(_OWORD *)(v16 + 112) = v648;
              *(_OWORD *)(v16 + 64) = v543;
              *(_OWORD *)(v16 + 80) = v578;
              if (*((_DWORD *)a2 - 30) >= *(_DWORD *)(v16 + 8))
                goto LABEL_22;
              v468 = *(_OWORD *)(v16 + 32);
              v502 = *(_OWORD *)(v16 + 48);
              v398 = *(_OWORD *)v16;
              v433 = *(_OWORD *)(v16 + 16);
              v607 = *(_OWORD *)(v16 + 96);
              v642 = *(_OWORD *)(v16 + 112);
              v537 = *(_OWORD *)(v16 + 64);
              v572 = *(_OWORD *)(v16 + 80);
              v62 = *(a2 - 1);
              v64 = *(a2 - 4);
              v63 = *(a2 - 3);
              *(_OWORD *)(v16 + 96) = *(a2 - 2);
              *(_OWORD *)(v16 + 112) = v62;
              *(_OWORD *)(v16 + 64) = v64;
              *(_OWORD *)(v16 + 80) = v63;
              v65 = *v9;
              v66 = *(a2 - 7);
              v67 = *(a2 - 5);
              *(_OWORD *)(v16 + 32) = *(a2 - 6);
              *(_OWORD *)(v16 + 48) = v67;
              *(_OWORD *)v16 = v65;
              *(_OWORD *)(v16 + 16) = v66;
            }
            else
            {
              v468 = *(_OWORD *)(v12 + 32);
              v502 = *(_OWORD *)(v12 + 48);
              v398 = *(_OWORD *)v12;
              v433 = *(_OWORD *)(v12 + 16);
              v607 = *(_OWORD *)(v12 + 96);
              v642 = *(_OWORD *)(v12 + 112);
              v537 = *(_OWORD *)(v12 + 64);
              v572 = *(_OWORD *)(v12 + 80);
              v19 = *(a2 - 1);
              v21 = *(a2 - 4);
              v20 = *(a2 - 3);
              *(_OWORD *)(v12 + 96) = *(a2 - 2);
              *(_OWORD *)(v12 + 112) = v19;
              *(_OWORD *)(v12 + 64) = v21;
              *(_OWORD *)(v12 + 80) = v20;
              v22 = *v9;
              v23 = *(a2 - 7);
              v24 = *(a2 - 5);
              *(_OWORD *)(v12 + 32) = *(a2 - 6);
              *(_OWORD *)(v12 + 48) = v24;
              *(_OWORD *)v12 = v22;
              *(_OWORD *)(v12 + 16) = v23;
            }
            *(a2 - 6) = v468;
            *(a2 - 5) = v502;
            *v9 = v398;
            *(a2 - 7) = v433;
            *(a2 - 2) = v607;
            *(a2 - 1) = v642;
            *(a2 - 4) = v537;
            *(a2 - 3) = v572;
          }
LABEL_22:
          v68 = (__int128 *)(v12 + 128);
          v69 = v12 + (v15 << 7);
          v70 = v69 - 128;
          v71 = *(_DWORD *)(v69 - 120);
          v72 = *((_DWORD *)a2 - 62);
          if (v71 >= *(_DWORD *)(v12 + 136))
          {
            if (v72 < v71)
            {
              v476 = *(_OWORD *)(v70 + 32);
              v510 = *(_OWORD *)(v70 + 48);
              v406 = *(_OWORD *)v70;
              v441 = *(_OWORD *)(v70 + 16);
              v615 = *(_OWORD *)(v70 + 96);
              v650 = *(_OWORD *)(v70 + 112);
              v545 = *(_OWORD *)(v70 + 64);
              v580 = *(_OWORD *)(v70 + 80);
              v79 = *(a2 - 9);
              v81 = *(a2 - 12);
              v80 = *(a2 - 11);
              *(_OWORD *)(v70 + 96) = *(a2 - 10);
              *(_OWORD *)(v70 + 112) = v79;
              *(_OWORD *)(v70 + 64) = v81;
              *(_OWORD *)(v70 + 80) = v80;
              v82 = *v10;
              v83 = *(a2 - 15);
              v84 = *(a2 - 13);
              *(_OWORD *)(v70 + 32) = *(a2 - 14);
              *(_OWORD *)(v70 + 48) = v84;
              *(_OWORD *)v70 = v82;
              *(_OWORD *)(v70 + 16) = v83;
              *(a2 - 14) = v476;
              *(a2 - 13) = v510;
              *v10 = v406;
              *(a2 - 15) = v441;
              *(a2 - 10) = v615;
              *(a2 - 9) = v650;
              *(a2 - 12) = v545;
              *(a2 - 11) = v580;
              if (*(_DWORD *)(v70 + 8) < *(_DWORD *)(v12 + 136))
              {
                v546 = *(_OWORD *)(v12 + 192);
                v581 = *(_OWORD *)(v12 + 208);
                v616 = *(_OWORD *)(v12 + 224);
                v651 = *(_OWORD *)(v12 + 240);
                v407 = *v68;
                v442 = *(_OWORD *)(v12 + 144);
                v477 = *(_OWORD *)(v12 + 160);
                v511 = *(_OWORD *)(v12 + 176);
                v85 = *(_OWORD *)v70;
                v86 = *(_OWORD *)(v70 + 16);
                v87 = *(_OWORD *)(v70 + 48);
                *(_OWORD *)(v12 + 160) = *(_OWORD *)(v70 + 32);
                *(_OWORD *)(v12 + 176) = v87;
                *v68 = v85;
                *(_OWORD *)(v12 + 144) = v86;
                v89 = *(_OWORD *)(v70 + 96);
                v88 = *(_OWORD *)(v70 + 112);
                v90 = *(_OWORD *)(v70 + 80);
                *(_OWORD *)(v12 + 192) = *(_OWORD *)(v70 + 64);
                *(_OWORD *)(v12 + 208) = v90;
                *(_OWORD *)(v12 + 224) = v89;
                *(_OWORD *)(v12 + 240) = v88;
                *(_OWORD *)(v70 + 32) = v477;
                *(_OWORD *)(v70 + 48) = v511;
                *(_OWORD *)v70 = v407;
                *(_OWORD *)(v70 + 16) = v442;
                *(_OWORD *)(v70 + 96) = v616;
                *(_OWORD *)(v70 + 112) = v651;
                *(_OWORD *)(v70 + 64) = v546;
                *(_OWORD *)(v70 + 80) = v581;
              }
            }
          }
          else
          {
            if (v72 >= v71)
            {
              v548 = *(_OWORD *)(v12 + 192);
              v583 = *(_OWORD *)(v12 + 208);
              v618 = *(_OWORD *)(v12 + 224);
              v653 = *(_OWORD *)(v12 + 240);
              v409 = *v68;
              v444 = *(_OWORD *)(v12 + 144);
              v479 = *(_OWORD *)(v12 + 160);
              v513 = *(_OWORD *)(v12 + 176);
              v104 = *(_OWORD *)v70;
              v105 = *(_OWORD *)(v70 + 16);
              v106 = *(_OWORD *)(v70 + 48);
              *(_OWORD *)(v12 + 160) = *(_OWORD *)(v70 + 32);
              *(_OWORD *)(v12 + 176) = v106;
              *v68 = v104;
              *(_OWORD *)(v12 + 144) = v105;
              v108 = *(_OWORD *)(v70 + 96);
              v107 = *(_OWORD *)(v70 + 112);
              v109 = *(_OWORD *)(v70 + 80);
              *(_OWORD *)(v12 + 192) = *(_OWORD *)(v70 + 64);
              *(_OWORD *)(v12 + 208) = v109;
              *(_OWORD *)(v12 + 224) = v108;
              *(_OWORD *)(v12 + 240) = v107;
              *(_OWORD *)(v70 + 32) = v479;
              *(_OWORD *)(v70 + 48) = v513;
              *(_OWORD *)v70 = v409;
              *(_OWORD *)(v70 + 16) = v444;
              *(_OWORD *)(v70 + 96) = v618;
              *(_OWORD *)(v70 + 112) = v653;
              *(_OWORD *)(v70 + 64) = v548;
              *(_OWORD *)(v70 + 80) = v583;
              if (*((_DWORD *)a2 - 62) >= *(_DWORD *)(v70 + 8))
                goto LABEL_36;
              v475 = *(_OWORD *)(v70 + 32);
              v509 = *(_OWORD *)(v70 + 48);
              v405 = *(_OWORD *)v70;
              v440 = *(_OWORD *)(v70 + 16);
              v614 = *(_OWORD *)(v70 + 96);
              v649 = *(_OWORD *)(v70 + 112);
              v544 = *(_OWORD *)(v70 + 64);
              v579 = *(_OWORD *)(v70 + 80);
              v110 = *(a2 - 9);
              v112 = *(a2 - 12);
              v111 = *(a2 - 11);
              *(_OWORD *)(v70 + 96) = *(a2 - 10);
              *(_OWORD *)(v70 + 112) = v110;
              *(_OWORD *)(v70 + 64) = v112;
              *(_OWORD *)(v70 + 80) = v111;
              v113 = *v10;
              v114 = *(a2 - 15);
              v115 = *(a2 - 13);
              *(_OWORD *)(v70 + 32) = *(a2 - 14);
              *(_OWORD *)(v70 + 48) = v115;
              *(_OWORD *)v70 = v113;
              *(_OWORD *)(v70 + 16) = v114;
            }
            else
            {
              v544 = *(_OWORD *)(v12 + 192);
              v579 = *(_OWORD *)(v12 + 208);
              v614 = *(_OWORD *)(v12 + 224);
              v649 = *(_OWORD *)(v12 + 240);
              v405 = *v68;
              v440 = *(_OWORD *)(v12 + 144);
              v475 = *(_OWORD *)(v12 + 160);
              v509 = *(_OWORD *)(v12 + 176);
              v73 = *v10;
              v74 = *(a2 - 15);
              v75 = *(a2 - 13);
              *(_OWORD *)(v12 + 160) = *(a2 - 14);
              *(_OWORD *)(v12 + 176) = v75;
              *v68 = v73;
              *(_OWORD *)(v12 + 144) = v74;
              v77 = *(a2 - 10);
              v76 = *(a2 - 9);
              v78 = *(a2 - 11);
              *(_OWORD *)(v12 + 192) = *(a2 - 12);
              *(_OWORD *)(v12 + 208) = v78;
              *(_OWORD *)(v12 + 224) = v77;
              *(_OWORD *)(v12 + 240) = v76;
            }
            *(a2 - 14) = v475;
            *(a2 - 13) = v509;
            *v10 = v405;
            *(a2 - 15) = v440;
            *(a2 - 10) = v614;
            *(a2 - 9) = v649;
            *(a2 - 12) = v544;
            *(a2 - 11) = v579;
          }
LABEL_36:
          v116 = (__int128 *)(v12 + 256);
          v117 = v12 + (v15 << 7);
          v118 = v117 + 128;
          v119 = *(_DWORD *)(v117 + 136);
          v120 = *v373;
          if (v119 >= *(_DWORD *)(v12 + 264))
          {
            if (v120 < v119)
            {
              v481 = *(_OWORD *)(v118 + 32);
              v515 = *(_OWORD *)(v118 + 48);
              v411 = *(_OWORD *)v118;
              v446 = *(_OWORD *)(v118 + 16);
              v620 = *(_OWORD *)(v118 + 96);
              v655 = *(_OWORD *)(v118 + 112);
              v550 = *(_OWORD *)(v118 + 64);
              v585 = *(_OWORD *)(v118 + 80);
              v127 = *(a2 - 17);
              v129 = *(a2 - 20);
              v128 = *(a2 - 19);
              *(_OWORD *)(v118 + 96) = *(a2 - 18);
              *(_OWORD *)(v118 + 112) = v127;
              *(_OWORD *)(v118 + 64) = v129;
              *(_OWORD *)(v118 + 80) = v128;
              v130 = *v11;
              v131 = *(a2 - 23);
              v132 = *(a2 - 21);
              *(_OWORD *)(v118 + 32) = *(a2 - 22);
              *(_OWORD *)(v118 + 48) = v132;
              *(_OWORD *)v118 = v130;
              *(_OWORD *)(v118 + 16) = v131;
              *(a2 - 22) = v481;
              *(a2 - 21) = v515;
              *v11 = v411;
              *(a2 - 23) = v446;
              *(a2 - 18) = v620;
              *(a2 - 17) = v655;
              *(a2 - 20) = v550;
              *(a2 - 19) = v585;
              if (*(_DWORD *)(v118 + 8) < *(_DWORD *)(v12 + 264))
              {
                v551 = *(_OWORD *)(v12 + 320);
                v586 = *(_OWORD *)(v12 + 336);
                v621 = *(_OWORD *)(v12 + 352);
                v656 = *(_OWORD *)(v12 + 368);
                v412 = *v116;
                v447 = *(_OWORD *)(v12 + 272);
                v482 = *(_OWORD *)(v12 + 288);
                v516 = *(_OWORD *)(v12 + 304);
                v133 = *(_OWORD *)v118;
                v134 = *(_OWORD *)(v118 + 16);
                v135 = *(_OWORD *)(v118 + 48);
                *(_OWORD *)(v12 + 288) = *(_OWORD *)(v118 + 32);
                *(_OWORD *)(v12 + 304) = v135;
                *v116 = v133;
                *(_OWORD *)(v12 + 272) = v134;
                v137 = *(_OWORD *)(v118 + 96);
                v136 = *(_OWORD *)(v118 + 112);
                v138 = *(_OWORD *)(v118 + 80);
                *(_OWORD *)(v12 + 320) = *(_OWORD *)(v118 + 64);
                *(_OWORD *)(v12 + 336) = v138;
                *(_OWORD *)(v12 + 352) = v137;
                *(_OWORD *)(v12 + 368) = v136;
                *(_OWORD *)(v118 + 32) = v482;
                *(_OWORD *)(v118 + 48) = v516;
                *(_OWORD *)v118 = v412;
                *(_OWORD *)(v118 + 16) = v447;
                *(_OWORD *)(v118 + 96) = v621;
                *(_OWORD *)(v118 + 112) = v656;
                *(_OWORD *)(v118 + 64) = v551;
                *(_OWORD *)(v118 + 80) = v586;
              }
            }
          }
          else
          {
            if (v120 >= v119)
            {
              v552 = *(_OWORD *)(v12 + 320);
              v587 = *(_OWORD *)(v12 + 336);
              v622 = *(_OWORD *)(v12 + 352);
              v657 = *(_OWORD *)(v12 + 368);
              v413 = *v116;
              v448 = *(_OWORD *)(v12 + 272);
              v483 = *(_OWORD *)(v12 + 288);
              v517 = *(_OWORD *)(v12 + 304);
              v139 = *(_OWORD *)v118;
              v140 = *(_OWORD *)(v118 + 16);
              v141 = *(_OWORD *)(v118 + 48);
              *(_OWORD *)(v12 + 288) = *(_OWORD *)(v118 + 32);
              *(_OWORD *)(v12 + 304) = v141;
              *v116 = v139;
              *(_OWORD *)(v12 + 272) = v140;
              v143 = *(_OWORD *)(v118 + 96);
              v142 = *(_OWORD *)(v118 + 112);
              v144 = *(_OWORD *)(v118 + 80);
              *(_OWORD *)(v12 + 320) = *(_OWORD *)(v118 + 64);
              *(_OWORD *)(v12 + 336) = v144;
              *(_OWORD *)(v12 + 352) = v143;
              *(_OWORD *)(v12 + 368) = v142;
              *(_OWORD *)(v118 + 32) = v483;
              *(_OWORD *)(v118 + 48) = v517;
              *(_OWORD *)v118 = v413;
              *(_OWORD *)(v118 + 16) = v448;
              *(_OWORD *)(v118 + 96) = v622;
              *(_OWORD *)(v118 + 112) = v657;
              *(_OWORD *)(v118 + 64) = v552;
              *(_OWORD *)(v118 + 80) = v587;
              if (*v373 >= *(_DWORD *)(v118 + 8))
                goto LABEL_45;
              v480 = *(_OWORD *)(v118 + 32);
              v514 = *(_OWORD *)(v118 + 48);
              v410 = *(_OWORD *)v118;
              v445 = *(_OWORD *)(v118 + 16);
              v619 = *(_OWORD *)(v118 + 96);
              v654 = *(_OWORD *)(v118 + 112);
              v549 = *(_OWORD *)(v118 + 64);
              v584 = *(_OWORD *)(v118 + 80);
              v145 = *(a2 - 17);
              v147 = *(a2 - 20);
              v146 = *(a2 - 19);
              *(_OWORD *)(v118 + 96) = *(a2 - 18);
              *(_OWORD *)(v118 + 112) = v145;
              *(_OWORD *)(v118 + 64) = v147;
              *(_OWORD *)(v118 + 80) = v146;
              v148 = *v11;
              v149 = *(a2 - 23);
              v150 = *(a2 - 21);
              *(_OWORD *)(v118 + 32) = *(a2 - 22);
              *(_OWORD *)(v118 + 48) = v150;
              *(_OWORD *)v118 = v148;
              *(_OWORD *)(v118 + 16) = v149;
            }
            else
            {
              v549 = *(_OWORD *)(v12 + 320);
              v584 = *(_OWORD *)(v12 + 336);
              v619 = *(_OWORD *)(v12 + 352);
              v654 = *(_OWORD *)(v12 + 368);
              v410 = *v116;
              v445 = *(_OWORD *)(v12 + 272);
              v480 = *(_OWORD *)(v12 + 288);
              v514 = *(_OWORD *)(v12 + 304);
              v121 = *v11;
              v122 = *(a2 - 23);
              v123 = *(a2 - 21);
              *(_OWORD *)(v12 + 288) = *(a2 - 22);
              *(_OWORD *)(v12 + 304) = v123;
              *v116 = v121;
              *(_OWORD *)(v12 + 272) = v122;
              v125 = *(a2 - 18);
              v124 = *(a2 - 17);
              v126 = *(a2 - 19);
              *(_OWORD *)(v12 + 320) = *(a2 - 20);
              *(_OWORD *)(v12 + 336) = v126;
              *(_OWORD *)(v12 + 352) = v125;
              *(_OWORD *)(v12 + 368) = v124;
            }
            *(a2 - 22) = v480;
            *(a2 - 21) = v514;
            *v11 = v410;
            *(a2 - 23) = v445;
            *(a2 - 18) = v619;
            *(a2 - 17) = v654;
            *(a2 - 20) = v549;
            *(a2 - 19) = v584;
          }
LABEL_45:
          v151 = *(_DWORD *)(v16 + 8);
          v152 = *(_DWORD *)(v118 + 8);
          if (v151 >= *(_DWORD *)(v70 + 8))
          {
            if (v152 < v151)
            {
              v485 = *(_OWORD *)(v16 + 32);
              v519 = *(_OWORD *)(v16 + 48);
              v415 = *(_OWORD *)v16;
              v450 = *(_OWORD *)(v16 + 16);
              v624 = *(_OWORD *)(v16 + 96);
              v659 = *(_OWORD *)(v16 + 112);
              v554 = *(_OWORD *)(v16 + 64);
              v589 = *(_OWORD *)(v16 + 80);
              v157 = *(_OWORD *)(v118 + 80);
              *(_OWORD *)(v16 + 64) = *(_OWORD *)(v118 + 64);
              *(_OWORD *)(v16 + 80) = v157;
              v158 = *(_OWORD *)(v118 + 112);
              *(_OWORD *)(v16 + 96) = *(_OWORD *)(v118 + 96);
              *(_OWORD *)(v16 + 112) = v158;
              v159 = *(_OWORD *)(v118 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v118;
              *(_OWORD *)(v16 + 16) = v159;
              v160 = *(_OWORD *)(v118 + 48);
              *(_OWORD *)(v16 + 32) = *(_OWORD *)(v118 + 32);
              *(_OWORD *)(v16 + 48) = v160;
              *(_OWORD *)(v118 + 32) = v485;
              *(_OWORD *)(v118 + 48) = v519;
              *(_OWORD *)v118 = v415;
              *(_OWORD *)(v118 + 16) = v450;
              *(_OWORD *)(v118 + 96) = v624;
              *(_OWORD *)(v118 + 112) = v659;
              *(_OWORD *)(v118 + 64) = v554;
              *(_OWORD *)(v118 + 80) = v589;
              if (*(_DWORD *)(v16 + 8) < *(_DWORD *)(v70 + 8))
              {
                v486 = *(_OWORD *)(v70 + 32);
                v520 = *(_OWORD *)(v70 + 48);
                v416 = *(_OWORD *)v70;
                v451 = *(_OWORD *)(v70 + 16);
                v625 = *(_OWORD *)(v70 + 96);
                v660 = *(_OWORD *)(v70 + 112);
                v555 = *(_OWORD *)(v70 + 64);
                v590 = *(_OWORD *)(v70 + 80);
                v161 = *(_OWORD *)(v16 + 80);
                *(_OWORD *)(v70 + 64) = *(_OWORD *)(v16 + 64);
                *(_OWORD *)(v70 + 80) = v161;
                v162 = *(_OWORD *)(v16 + 112);
                *(_OWORD *)(v70 + 96) = *(_OWORD *)(v16 + 96);
                *(_OWORD *)(v70 + 112) = v162;
                v163 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v70 = *(_OWORD *)v16;
                *(_OWORD *)(v70 + 16) = v163;
                v164 = *(_OWORD *)(v16 + 48);
                *(_OWORD *)(v70 + 32) = *(_OWORD *)(v16 + 32);
                *(_OWORD *)(v70 + 48) = v164;
                *(_OWORD *)(v16 + 32) = v486;
                *(_OWORD *)(v16 + 48) = v520;
                *(_OWORD *)v16 = v416;
                *(_OWORD *)(v16 + 16) = v451;
                *(_OWORD *)(v16 + 96) = v625;
                *(_OWORD *)(v16 + 112) = v660;
                *(_OWORD *)(v16 + 64) = v555;
                *(_OWORD *)(v16 + 80) = v590;
              }
            }
          }
          else
          {
            if (v152 >= v151)
            {
              v487 = *(_OWORD *)(v70 + 32);
              v521 = *(_OWORD *)(v70 + 48);
              v417 = *(_OWORD *)v70;
              v452 = *(_OWORD *)(v70 + 16);
              v626 = *(_OWORD *)(v70 + 96);
              v661 = *(_OWORD *)(v70 + 112);
              v556 = *(_OWORD *)(v70 + 64);
              v591 = *(_OWORD *)(v70 + 80);
              v165 = *(_OWORD *)(v16 + 80);
              *(_OWORD *)(v70 + 64) = *(_OWORD *)(v16 + 64);
              *(_OWORD *)(v70 + 80) = v165;
              v166 = *(_OWORD *)(v16 + 112);
              *(_OWORD *)(v70 + 96) = *(_OWORD *)(v16 + 96);
              *(_OWORD *)(v70 + 112) = v166;
              v167 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v70 = *(_OWORD *)v16;
              *(_OWORD *)(v70 + 16) = v167;
              v168 = *(_OWORD *)(v16 + 48);
              *(_OWORD *)(v70 + 32) = *(_OWORD *)(v16 + 32);
              *(_OWORD *)(v70 + 48) = v168;
              *(_OWORD *)(v16 + 32) = v487;
              *(_OWORD *)(v16 + 48) = v521;
              *(_OWORD *)v16 = v417;
              *(_OWORD *)(v16 + 16) = v452;
              *(_OWORD *)(v16 + 96) = v626;
              *(_OWORD *)(v16 + 112) = v661;
              *(_OWORD *)(v16 + 64) = v556;
              *(_OWORD *)(v16 + 80) = v591;
              if (*(_DWORD *)(v118 + 8) >= *(_DWORD *)(v16 + 8))
                goto LABEL_54;
              v484 = *(_OWORD *)(v16 + 32);
              v518 = *(_OWORD *)(v16 + 48);
              v414 = *(_OWORD *)v16;
              v449 = *(_OWORD *)(v16 + 16);
              v623 = *(_OWORD *)(v16 + 96);
              v658 = *(_OWORD *)(v16 + 112);
              v553 = *(_OWORD *)(v16 + 64);
              v588 = *(_OWORD *)(v16 + 80);
              v169 = *(_OWORD *)(v118 + 80);
              *(_OWORD *)(v16 + 64) = *(_OWORD *)(v118 + 64);
              *(_OWORD *)(v16 + 80) = v169;
              v170 = *(_OWORD *)(v118 + 112);
              *(_OWORD *)(v16 + 96) = *(_OWORD *)(v118 + 96);
              *(_OWORD *)(v16 + 112) = v170;
              v171 = *(_OWORD *)(v118 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v118;
              *(_OWORD *)(v16 + 16) = v171;
              v172 = *(_OWORD *)(v118 + 48);
              *(_OWORD *)(v16 + 32) = *(_OWORD *)(v118 + 32);
              *(_OWORD *)(v16 + 48) = v172;
            }
            else
            {
              v484 = *(_OWORD *)(v70 + 32);
              v518 = *(_OWORD *)(v70 + 48);
              v414 = *(_OWORD *)v70;
              v449 = *(_OWORD *)(v70 + 16);
              v623 = *(_OWORD *)(v70 + 96);
              v658 = *(_OWORD *)(v70 + 112);
              v553 = *(_OWORD *)(v70 + 64);
              v588 = *(_OWORD *)(v70 + 80);
              v153 = *(_OWORD *)(v118 + 80);
              *(_OWORD *)(v70 + 64) = *(_OWORD *)(v118 + 64);
              *(_OWORD *)(v70 + 80) = v153;
              v154 = *(_OWORD *)(v118 + 112);
              *(_OWORD *)(v70 + 96) = *(_OWORD *)(v118 + 96);
              *(_OWORD *)(v70 + 112) = v154;
              v155 = *(_OWORD *)(v118 + 16);
              *(_OWORD *)v70 = *(_OWORD *)v118;
              *(_OWORD *)(v70 + 16) = v155;
              v156 = *(_OWORD *)(v118 + 48);
              *(_OWORD *)(v70 + 32) = *(_OWORD *)(v118 + 32);
              *(_OWORD *)(v70 + 48) = v156;
            }
            *(_OWORD *)(v118 + 32) = v484;
            *(_OWORD *)(v118 + 48) = v518;
            *(_OWORD *)v118 = v414;
            *(_OWORD *)(v118 + 16) = v449;
            *(_OWORD *)(v118 + 96) = v623;
            *(_OWORD *)(v118 + 112) = v658;
            *(_OWORD *)(v118 + 64) = v553;
            *(_OWORD *)(v118 + 80) = v588;
          }
LABEL_54:
          v488 = *(_OWORD *)(v12 + 32);
          v522 = *(_OWORD *)(v12 + 48);
          v418 = *(_OWORD *)v12;
          v453 = *(_OWORD *)(v12 + 16);
          v627 = *(_OWORD *)(v12 + 96);
          v662 = *(_OWORD *)(v12 + 112);
          v557 = *(_OWORD *)(v12 + 64);
          v592 = *(_OWORD *)(v12 + 80);
          v173 = *(_OWORD *)(v16 + 112);
          v175 = *(_OWORD *)(v16 + 64);
          v174 = *(_OWORD *)(v16 + 80);
          *(_OWORD *)(v12 + 96) = *(_OWORD *)(v16 + 96);
          *(_OWORD *)(v12 + 112) = v173;
          *(_OWORD *)(v12 + 64) = v175;
          *(_OWORD *)(v12 + 80) = v174;
          v176 = *(_OWORD *)v16;
          v177 = *(_OWORD *)(v16 + 16);
          v178 = *(_OWORD *)(v16 + 48);
          *(_OWORD *)(v12 + 32) = *(_OWORD *)(v16 + 32);
          *(_OWORD *)(v12 + 48) = v178;
          *(_OWORD *)v12 = v176;
          *(_OWORD *)(v12 + 16) = v177;
          *(_OWORD *)(v16 + 32) = v488;
          *(_OWORD *)(v16 + 48) = v522;
          *(_OWORD *)v16 = v418;
          *(_OWORD *)(v16 + 16) = v453;
          *(_OWORD *)(v16 + 96) = v627;
          *(_OWORD *)(v16 + 112) = v662;
          *(_OWORD *)(v16 + 64) = v557;
          *(_OWORD *)(v16 + 80) = v592;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v103 = (__int128 *)*(unsigned int *)(v12 + 8);
LABEL_56:
          v179 = 0;
          v180 = *(_QWORD *)v12;
          v395 = *(_DWORD *)(v12 + 124);
          v389 = *(_OWORD *)(v12 + 92);
          v392 = *(_OWORD *)(v12 + 108);
          v386 = *(_OWORD *)(v12 + 76);
          v380 = *(_OWORD *)(v12 + 44);
          v383 = *(_OWORD *)(v12 + 60);
          v374 = *(_OWORD *)(v12 + 12);
          v377 = *(_OWORD *)(v12 + 28);
          do
          {
            if ((__int128 *)(v12 + v179 + 128) == a2)
              goto LABEL_181;
            v181 = *(_DWORD *)(v12 + v179 + 136);
            v179 += 128;
          }
          while (v181 < v103);
          v182 = v12 + v179;
          v183 = a2;
          if (v179 != 128)
          {
            while (v183 != (__int128 *)v12)
            {
              v184 = v183 - 8;
              v185 = *((_DWORD *)v183 - 30);
              v183 -= 8;
              if (v185 < v103)
                goto LABEL_66;
            }
            goto LABEL_181;
          }
          v186 = a2;
          do
          {
            if (v182 >= (unint64_t)v186)
            {
              v184 = v186;
              v12 = v182;
              goto LABEL_77;
            }
            v184 = v186 - 8;
            v187 = *((_DWORD *)v186 - 30);
            v186 -= 8;
          }
          while (v187 >= v103);
LABEL_66:
          v12 = v182;
          if (v182 < (unint64_t)v184)
          {
            v188 = v184;
            do
            {
              v489 = *(_OWORD *)(v12 + 32);
              v523 = *(_OWORD *)(v12 + 48);
              v419 = *(_OWORD *)v12;
              v454 = *(_OWORD *)(v12 + 16);
              v628 = *(_OWORD *)(v12 + 96);
              v663 = *(_OWORD *)(v12 + 112);
              v558 = *(_OWORD *)(v12 + 64);
              v593 = *(_OWORD *)(v12 + 80);
              v189 = v188[7];
              v191 = v188[4];
              v190 = v188[5];
              *(_OWORD *)(v12 + 96) = v188[6];
              *(_OWORD *)(v12 + 112) = v189;
              *(_OWORD *)(v12 + 64) = v191;
              *(_OWORD *)(v12 + 80) = v190;
              v192 = *v188;
              v193 = v188[1];
              v194 = v188[3];
              *(_OWORD *)(v12 + 32) = v188[2];
              *(_OWORD *)(v12 + 48) = v194;
              *(_OWORD *)v12 = v192;
              *(_OWORD *)(v12 + 16) = v193;
              v188[2] = v489;
              v188[3] = v523;
              *v188 = v419;
              v188[1] = v454;
              v188[6] = v628;
              v188[7] = v663;
              v188[4] = v558;
              v188[5] = v593;
              v195 = v12 + 128;
              do
              {
                if ((__int128 *)v195 == a2)
                  goto LABEL_181;
                v196 = *(_DWORD *)(v195 + 8);
                v195 += 128;
              }
              while (v196 < v103);
              v12 = v195 - 128;
              do
              {
                if (v188 == (__int128 *)a1)
                  goto LABEL_181;
                v197 = v188 - 8;
                v198 = *((_DWORD *)v188 - 30);
                v188 -= 8;
              }
              while (v198 >= v103);
              v188 = v197;
            }
            while (v12 < (unint64_t)v197);
          }
LABEL_77:
          if (v12 - 128 != a1)
          {
            v199 = *(_OWORD *)(v12 - 128);
            v200 = *(_OWORD *)(v12 - 112);
            v201 = *(_OWORD *)(v12 - 80);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v12 - 96);
            *(_OWORD *)(a1 + 48) = v201;
            *(_OWORD *)a1 = v199;
            *(_OWORD *)(a1 + 16) = v200;
            v202 = *(_OWORD *)(v12 - 64);
            v203 = *(_OWORD *)(v12 - 48);
            v204 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 112) = v204;
            *(_OWORD *)(a1 + 64) = v202;
            *(_OWORD *)(a1 + 80) = v203;
          }
          *(_QWORD *)(v12 - 128) = v180;
          *(_DWORD *)(v12 - 120) = (_DWORD)v103;
          *(_OWORD *)(v12 - 68) = v383;
          *(_OWORD *)(v12 - 84) = v380;
          *(_OWORD *)(v12 - 100) = v377;
          *(_OWORD *)(v12 - 116) = v374;
          *(_DWORD *)(v12 - 4) = v395;
          *(_OWORD *)(v12 - 20) = v392;
          *(_OWORD *)(v12 - 36) = v389;
          *(_OWORD *)(v12 - 52) = v386;
          if (v182 < (unint64_t)v184)
            goto LABEL_82;
          v205 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>(a1, v12 - 128);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>(v12, (uint64_t)a2))
          {
            if (v205)
              continue;
LABEL_82:
            std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *,false>(a1, v12 - 128, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v12 - 128);
          if (v205)
            return result;
          goto LABEL_1;
        }
        v103 = (__int128 *)(v12 + 128);
        v269 = (__int128 *)v12 == a2 || v103 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v269)
          {
            v270 = 0;
            v271 = (_QWORD *)v12;
            do
            {
              v273 = v103;
              v274 = *((_DWORD *)v271 + 34);
              if (v274 < *((_DWORD *)v271 + 2))
              {
                v275 = *(_QWORD *)v273;
                v565 = *(_OWORD *)((char *)v271 + 204);
                v600 = *(_OWORD *)((char *)v271 + 220);
                v635 = *(_OWORD *)((char *)v271 + 236);
                v670 = *((_DWORD *)v271 + 63);
                v426 = *(_OWORD *)((char *)v271 + 140);
                v461 = *(_OWORD *)((char *)v271 + 156);
                v276 = *(_OWORD *)((char *)v271 + 172);
                v277 = *(_OWORD *)((char *)v271 + 188);
                v278 = v270;
                v496 = v276;
                v530 = v277;
                do
                {
                  v279 = (_OWORD *)(v12 + v278);
                  v280 = *(_OWORD *)(v12 + v278 + 80);
                  v279[12] = *(_OWORD *)(v12 + v278 + 64);
                  v279[13] = v280;
                  v281 = *(_OWORD *)(v12 + v278 + 112);
                  v279[14] = *(_OWORD *)(v12 + v278 + 96);
                  v279[15] = v281;
                  v282 = *(_OWORD *)(v12 + v278 + 16);
                  v279[8] = *(_OWORD *)(v12 + v278);
                  v279[9] = v282;
                  v283 = *(_OWORD *)(v12 + v278 + 48);
                  v279[10] = *(_OWORD *)(v12 + v278 + 32);
                  v279[11] = v283;
                  if (!v278)
                  {
                    v272 = v12;
                    goto LABEL_131;
                  }
                  v278 -= 128;
                }
                while (v274 < *((_DWORD *)v279 - 30));
                v272 = v12 + v278 + 128;
LABEL_131:
                *(_QWORD *)v272 = v275;
                *(_DWORD *)(v272 + 8) = v274;
                result = *(double *)&v565;
                *(_DWORD *)(v272 + 124) = v670;
                *(_OWORD *)(v272 + 60) = v530;
                *(_OWORD *)(v272 + 44) = v496;
                *(_OWORD *)(v272 + 28) = v461;
                *(_OWORD *)(v272 + 12) = v426;
                *(_OWORD *)(v272 + 108) = v635;
                *(_OWORD *)(v272 + 92) = v600;
                *(_OWORD *)(v272 + 76) = v565;
              }
              v103 = v273 + 8;
              v270 += 128;
              v271 = v273;
            }
            while (v273 + 8 != a2);
          }
        }
        else if (!v269)
        {
          v347 = -2;
          v348 = 1;
          v349 = v12;
          while (1)
          {
            v350 = *(_DWORD *)(v349 + 136);
            if (v350 < *(_DWORD *)(v349 + 8))
              break;
LABEL_175:
            v349 = v12 + (v348++ << 7);
            v103 += 8;
            --v347;
            if (v103 == a2)
              return result;
          }
          v351 = *(_QWORD *)v103;
          v570 = *(_OWORD *)(v349 + 204);
          v605 = *(_OWORD *)(v349 + 220);
          v640 = *(_OWORD *)(v349 + 236);
          v675 = *(_DWORD *)(v349 + 252);
          v431 = *(_OWORD *)(v349 + 140);
          v466 = *(_OWORD *)(v349 + 156);
          v352 = *(_OWORD *)(v349 + 172);
          v353 = *(_OWORD *)(v349 + 188);
          v354 = v347;
          v355 = v103;
          v535 = v353;
          while (1)
          {
            v356 = *(v355 - 3);
            v355[4] = *(v355 - 4);
            v355[5] = v356;
            v357 = *(v355 - 1);
            v355[6] = *(v355 - 2);
            v355[7] = v357;
            v358 = *(v355 - 7);
            *v355 = *(v355 - 8);
            v355[1] = v358;
            v359 = *(v355 - 5);
            v355[2] = *(v355 - 6);
            v355[3] = v359;
            if (__CFADD__(v354++, 1))
              break;
            v361 = v355 - 8;
            v362 = *((_DWORD *)v355 - 62);
            v355 -= 8;
            if (v350 >= v362)
            {
              *(_QWORD *)v361 = v351;
              *((_DWORD *)v361 + 2) = v350;
              *(__int128 *)((char *)v361 + 60) = v535;
              *(__int128 *)((char *)v361 + 44) = v352;
              *(__int128 *)((char *)v361 + 28) = v466;
              *(__int128 *)((char *)v361 + 12) = v431;
              result = *(double *)&v570;
              *((_DWORD *)v361 + 31) = v675;
              *(__int128 *)((char *)v361 + 108) = v640;
              *(__int128 *)((char *)v361 + 92) = v605;
              *(__int128 *)((char *)v361 + 76) = v570;
              goto LABEL_175;
            }
          }
LABEL_181:
          __break(1u);
LABEL_182:
          v501 = *(_OWORD *)(a1 + 32);
          v536 = *(_OWORD *)(a1 + 48);
          v432 = *(_OWORD *)a1;
          v467 = *(_OWORD *)(a1 + 16);
          v641 = *(_OWORD *)(a1 + 96);
          v676 = *(_OWORD *)(a1 + 112);
          v571 = *(_OWORD *)(a1 + 64);
          v606 = *(_OWORD *)(a1 + 80);
          v363 = v103[5];
          *(_OWORD *)(a1 + 64) = v103[4];
          *(_OWORD *)(a1 + 80) = v363;
          v364 = v103[7];
          *(_OWORD *)(a1 + 96) = v103[6];
          *(_OWORD *)(a1 + 112) = v364;
          v365 = v103[1];
          *(_OWORD *)a1 = *v103;
          *(_OWORD *)(a1 + 16) = v365;
          v366 = v103[3];
          *(_OWORD *)(a1 + 32) = v103[2];
          *(_OWORD *)(a1 + 48) = v366;
          v103[2] = v501;
          v103[3] = v536;
          *v103 = v432;
          v103[1] = v467;
          result = *(double *)&v571;
          v103[6] = v641;
          v103[7] = v676;
          v103[4] = v571;
          v103[5] = v606;
          if (*((_DWORD *)a2 - 30) < *(_DWORD *)(a1 + 136))
          {
            v561 = v103[4];
            v596 = v103[5];
            v631 = v103[6];
            v666 = v103[7];
            v422 = *v103;
            v457 = v103[1];
            v492 = v103[2];
            v526 = v103[3];
            v367 = *v9;
            v368 = *(a2 - 7);
            v369 = *(a2 - 5);
            v103[2] = *(a2 - 6);
            v103[3] = v369;
            *v103 = v367;
            v103[1] = v368;
            v371 = *(a2 - 2);
            v370 = *(a2 - 1);
            v372 = *(a2 - 3);
            v103[4] = *(a2 - 4);
            v103[5] = v372;
            v103[6] = v371;
            v103[7] = v370;
LABEL_184:
            v9[2] = v492;
            v9[3] = v526;
            *v9 = v422;
            v9[1] = v457;
            result = *(double *)&v561;
            v9[6] = v631;
            v9[7] = v666;
            v9[4] = v561;
            v9[5] = v596;
          }
        }
        return result;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v65 = a2[-1].n128_u64[0];
        --a2;
        if (v65 < v12->n128_u64[0])
          goto LABEL_111;
        return result;
      case 3:
        v20 = v12 + 1;
        v66 = v12[1].n128_u64[0];
        v68 = a2[-1].n128_u64[0];
        --a2;
        v67 = v68;
        if (v66 >= v12->n128_u64[0])
        {
          if (v67 < v66)
          {
            result = *v20;
            *v20 = *a2;
            *a2 = result;
            goto LABEL_195;
          }
        }
        else
        {
          if (v67 >= v66)
            goto LABEL_187;
LABEL_111:
          v136 = *v12;
          *v12 = *a2;
          result = v136;
          *a2 = v136;
        }
        return result;
      case 4:
        v20 = v12 + 1;
        v69 = v12[1].n128_u64[0];
        v70 = v12 + 2;
        v71 = v12[2].n128_u64[0];
        if (v69 >= v12->n128_u64[0])
        {
          if (v71 < v69)
          {
            result = *v20;
            *v20 = *v70;
            *v70 = result;
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v139 = *v12;
              *v12 = *v20;
              result = v139;
              *v20 = v139;
            }
          }
        }
        else
        {
          if (v71 >= v69)
          {
            v141 = *v12;
            *v12 = *v20;
            result = v141;
            *v20 = v141;
            if (v71 >= v12[1].n128_u64[0])
              goto LABEL_192;
            result = *v20;
            *v20 = *v70;
          }
          else
          {
            v137 = *v12;
            *v12 = *v70;
            result = v137;
          }
          *v70 = result;
        }
LABEL_192:
        if (v9->n128_u64[0] < v70->n128_u64[0])
        {
          result = *v70;
          *v70 = *v9;
          *v9 = result;
          if (v70->n128_u64[0] < v20->n128_u64[0])
          {
            result = *v20;
            *v20 = *v70;
            *v70 = result;
LABEL_195:
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v142 = *v12;
              *v12 = *v20;
              result = v142;
              *v20 = v142;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(v12, v12 + 1, v12[2].n128_u64, (__n128 *)v12[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 == a2)
              return result;
            v82 = (unint64_t)(v14 - 2) >> 1;
            v83 = v82;
            while (1)
            {
              if (v82 >= v83)
              {
                v85 = (2 * v83) | 1;
                v86 = &v12[v85];
                if (2 * v83 + 2 >= v14)
                {
                  v89 = &v12[v83];
                  v90 = v89->n128_u64[0];
                  if (v86->n128_u64[0] >= v89->n128_u64[0])
                    goto LABEL_146;
                }
                else
                {
                  v87 = v86[1].n128_u64[0];
                  v88 = v86->n128_u64[0] >= v87;
                  if (v86->n128_u64[0] > v87)
                    v87 = v86->n128_u64[0];
                  if (!v88)
                  {
                    ++v86;
                    v85 = 2 * v83 + 2;
                  }
                  v89 = &v12[v83];
                  v90 = v89->n128_u64[0];
                  if (v87 >= v89->n128_u64[0])
                  {
LABEL_146:
                    v91 = v89->n128_i64[1];
                    while (1)
                    {
                      v94 = v89;
                      v89 = v86;
                      *v94 = *v86;
                      if (v82 < v85)
                        break;
                      v95 = (2 * v85) | 1;
                      v86 = &v12[v95];
                      v85 = 2 * v85 + 2;
                      if (v85 < v14)
                      {
                        v92 = v86->n128_u64[0];
                        v93 = v86[1].n128_u64[0];
                        if (v86->n128_u64[0] <= v93)
                          v92 = v86[1].n128_u64[0];
                        if (v86->n128_u64[0] >= v93)
                          v85 = v95;
                        else
                          ++v86;
                        if (v92 < v90)
                          break;
                      }
                      else
                      {
                        v85 = v95;
                        if (v86->n128_u64[0] < v90)
                          break;
                      }
                    }
                    v89->n128_u64[0] = v90;
                    v89->n128_u64[1] = v91;
                  }
                }
              }
              v84 = v83-- <= 0;
              if (v84)
              {
                v96 = (unint64_t)v13 >> 4;
                do
                {
                  v97 = 0;
                  v138 = *v12;
                  v98 = v12;
                  do
                  {
                    v99 = &v98[v97 + 1];
                    v100 = (2 * v97) | 1;
                    v101 = 2 * v97 + 2;
                    if (v101 < v96 && v99->n128_u64[0] < v99[1].n128_u64[0])
                    {
                      ++v99;
                      v100 = v101;
                    }
                    *v98 = *v99;
                    v98 = v99;
                    v97 = v100;
                  }
                  while (v100 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
                  if (v99 == --a2)
                  {
                    result = v138;
                    *v99 = v138;
                  }
                  else
                  {
                    *v99 = *a2;
                    result = v138;
                    *a2 = v138;
                    v102 = (char *)v99 - (char *)v12 + 16;
                    if (v102 >= 17)
                    {
                      v103 = (((unint64_t)v102 >> 4) - 2) >> 1;
                      v104 = &v12[v103];
                      v105 = v99->n128_u64[0];
                      if (v104->n128_u64[0] < v99->n128_u64[0])
                      {
                        v106 = v99->n128_u64[1];
                        do
                        {
                          v107 = v99;
                          v99 = v104;
                          result = *v104;
                          *v107 = *v104;
                          if (!v103)
                            break;
                          v103 = (v103 - 1) >> 1;
                          v104 = &v12[v103];
                        }
                        while (v104->n128_u64[0] < v105);
                        v99->n128_u64[0] = v105;
                        v99->n128_u64[1] = v106;
                      }
                    }
                  }
                  v84 = v96-- <= 2;
                }
                while (!v84);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = v9->n128_u64[0];
          if ((unint64_t)v13 < 0x801)
          {
            v19 = v12->n128_u64[0];
            if (v12->n128_u64[0] >= v16->n128_u64[0])
            {
              if (v17 < v19)
              {
                v121 = *v12;
                *v12 = *v9;
                result = v121;
                *v9 = v121;
                if (v12->n128_u64[0] < v16->n128_u64[0])
                {
                  v122 = *v16;
                  *v16 = *v12;
                  result = v122;
                  *v12 = v122;
                  --a3;
                  v20 = (__n128 *)v12->n128_u64[0];
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v19)
            {
              v125 = *v16;
              *v16 = *v12;
              result = v125;
              *v12 = v125;
              if (v9->n128_u64[0] >= v12->n128_u64[0])
                goto LABEL_31;
              v118 = *v12;
              *v12 = *v9;
            }
            else
            {
              v118 = *v16;
              *v16 = *v9;
            }
            result = v118;
            *v9 = v118;
LABEL_31:
            --a3;
            v20 = (__n128 *)v12->n128_u64[0];
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= v12->n128_u64[0])
          {
            if (v17 < v18)
            {
              v119 = *v16;
              *v16 = *v9;
              *v9 = v119;
              if (v16->n128_u64[0] < v12->n128_u64[0])
              {
                v120 = *v12;
                *v12 = *v16;
                *v16 = v120;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v123 = *v12;
              *v12 = *v16;
              *v16 = v123;
              if (v9->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_22;
              v117 = *v16;
              *v16 = *v9;
            }
            else
            {
              v117 = *v12;
              *v12 = *v9;
            }
            *v9 = v117;
          }
LABEL_22:
          v21 = v12 + 1;
          v22 = &v12[v15];
          v25 = v22[-1].n128_u64[0];
          v23 = v22 - 1;
          v24 = v25;
          v26 = v10->n128_u64[0];
          if (v25 >= v12[1].n128_u64[0])
          {
            if (v26 < v24)
            {
              v124 = *v23;
              *v23 = *v10;
              *v10 = v124;
              if (v23->n128_u64[0] < v21->n128_u64[0])
              {
                v28 = *v21;
                *v21 = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v26 >= v24)
            {
              v29 = *v21;
              *v21 = *v23;
              *v23 = v29;
              if (v10->n128_u64[0] >= v23->n128_u64[0])
                goto LABEL_36;
              v126 = *v23;
              *v23 = *v10;
              v27 = v126;
            }
            else
            {
              v27 = *v21;
              *v21 = *v10;
            }
            *v10 = v27;
          }
LABEL_36:
          v30 = v12 + 2;
          v31 = &v12[v15];
          v34 = v31[1].n128_u64[0];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v11->n128_u64[0];
          if (v34 >= v12[2].n128_u64[0])
          {
            if (v35 < v33)
            {
              v127 = *v32;
              *v32 = *v11;
              *v11 = v127;
              if (v32->n128_u64[0] < v30->n128_u64[0])
              {
                v37 = *v30;
                *v30 = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v35 >= v33)
            {
              v38 = *v30;
              *v30 = *v32;
              *v32 = v38;
              if (v11->n128_u64[0] >= v32->n128_u64[0])
                goto LABEL_45;
              v128 = *v32;
              *v32 = *v11;
              v36 = v128;
            }
            else
            {
              v36 = *v30;
              *v30 = *v11;
            }
            *v11 = v36;
          }
LABEL_45:
          v39 = v16->n128_u64[0];
          v40 = v32->n128_u64[0];
          if (v16->n128_u64[0] >= v23->n128_u64[0])
          {
            if (v40 < v39)
            {
              v130 = *v16;
              *v16 = *v32;
              *v32 = v130;
              if (v16->n128_u64[0] < v23->n128_u64[0])
              {
                v131 = *v23;
                *v23 = *v16;
                *v16 = v131;
              }
            }
          }
          else
          {
            if (v40 >= v39)
            {
              v132 = *v23;
              *v23 = *v16;
              *v16 = v132;
              if (v32->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_54;
              v129 = *v16;
              *v16 = *v32;
            }
            else
            {
              v129 = *v23;
              *v23 = *v32;
            }
            *v32 = v129;
          }
LABEL_54:
          v133 = *v12;
          *v12 = *v16;
          result = v133;
          *v16 = v133;
          --a3;
          v20 = (__n128 *)v12->n128_u64[0];
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (v12[-1].n128_u64[0] >= (unint64_t)v20)
          {
            v55 = v12->n128_u64[1];
            if ((unint64_t)v20 >= v9->n128_u64[0])
            {
              n128_u64 = (unint64_t)v12[1].n128_u64;
              do
              {
                v12 = (__n128 *)n128_u64;
                if (n128_u64 >= (unint64_t)a2)
                  break;
                n128_u64 += 16;
              }
              while ((unint64_t)v20 >= v12->n128_u64[0]);
            }
            else
            {
              v56 = v12 + 1;
              do
              {
                if (v56 == a2)
                  goto LABEL_186;
                v57 = v56->n128_u64[0];
                ++v56;
              }
              while ((unint64_t)v20 >= v57);
              v12 = v56 - 1;
            }
            v59 = a2;
            if (v12 < a2)
            {
              v59 = a2;
              while (v59 != a1)
              {
                v60 = v59[-1].n128_u64[0];
                --v59;
                if ((unint64_t)v20 >= v60)
                  goto LABEL_100;
              }
              goto LABEL_186;
            }
LABEL_100:
            if (v12 < v59)
            {
              v135 = *v12;
              *v12 = *v59;
              result = v135;
              *v59 = v135;
              v61 = v12 + 1;
              while (v61 != a2)
              {
                v62 = v61->n128_u64[0];
                ++v61;
                if ((unint64_t)v20 < v62)
                {
                  v12 = v61 - 1;
                  while (v59 != a1)
                  {
                    v63 = v59[-1].n128_u64[0];
                    --v59;
                    if ((unint64_t)v20 >= v63)
                      goto LABEL_100;
                  }
                  goto LABEL_186;
                }
              }
              goto LABEL_186;
            }
            v64 = v12 - 1;
            if (&v12[-1] != a1)
            {
              result = *v64;
              *a1 = *v64;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = (unint64_t)v20;
            v12[-1].n128_u64[1] = v55;
            continue;
          }
LABEL_56:
          v41 = 0;
          v42 = v12->n128_u64[1];
          do
          {
            v43 = &v12[v41 + 1];
            if (v43 == a2)
              goto LABEL_186;
            ++v41;
          }
          while (v43->n128_u64[0] < (unint64_t)v20);
          v44 = &v12[v41];
          v45 = a2;
          if (v41 != 1)
          {
            while (v45 != v12)
            {
              v46 = v45[-1].n128_u64[0];
              --v45;
              if (v46 < (unint64_t)v20)
                goto LABEL_66;
            }
            goto LABEL_186;
          }
          v45 = a2;
          do
          {
            if (v44 >= v45)
              break;
            v47 = v45[-1].n128_u64[0];
            --v45;
          }
          while (v47 >= (unint64_t)v20);
LABEL_66:
          v12 = (__n128 *)((char *)v12 + v41 * 16);
          if (v44 < v45)
          {
            v48 = v45;
            do
            {
              v134 = *v12;
              *v12 = *v48;
              result = v134;
              *v48 = v134;
              v49 = v12 + 1;
              do
              {
                if (v49 == a2)
                  goto LABEL_186;
                v50 = v49->n128_u64[0];
                ++v49;
              }
              while (v50 < (unint64_t)v20);
              v12 = v49 - 1;
              do
              {
                if (v48 == a1)
                  goto LABEL_186;
                v51 = v48[-1].n128_u64[0];
                --v48;
              }
              while (v51 >= (unint64_t)v20);
            }
            while (v12 < v48);
          }
          v52 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v52;
            *a1 = *v52;
          }
          v12[-1].n128_u64[0] = (unint64_t)v20;
          v12[-1].n128_u64[1] = v42;
          if (v44 < v45)
            goto LABEL_80;
          v53 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(a1, v12 - 1, result);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(v12, a2, v54))
          {
            if (v53)
              continue;
LABEL_80:
            std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v53)
            return result;
          goto LABEL_1;
        }
        v20 = v12 + 1;
        v73 = v12 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (v73)
            return result;
          v74 = 0;
          v75 = v12;
          while (1)
          {
            v77 = v20;
            v78 = v20->n128_u64[0];
            if (v78 < v75->n128_u64[0])
            {
              v79 = v75[1].n128_i64[1];
              v80 = v74;
              do
              {
                result = *(__n128 *)((char *)v12 + v80);
                *(__n128 *)((char *)v12 + v80 + 16) = result;
                if (!v80)
                {
                  v76 = v12;
                  goto LABEL_126;
                }
                v81 = *(unint64_t *)((char *)v12[-1].n128_u64 + v80);
                v80 -= 16;
              }
              while (v78 < v81);
              v76 = (__n128 *)((char *)v12 + v80 + 16);
LABEL_126:
              v76->n128_u64[0] = v78;
              v76->n128_u64[1] = v79;
            }
            v20 = v77 + 1;
            v74 += 16;
            v75 = v77;
            if (&v77[1] == a2)
              return result;
          }
        }
        if (v73)
          return result;
        v108 = -2;
        v109 = 1;
        v110 = v12;
        while (1)
        {
          v111 = v20->n128_u64[0];
          if (v20->n128_u64[0] < v110->n128_u64[0])
            break;
LABEL_180:
          v110 = &v12[v109++];
          ++v20;
          --v108;
          if (v20 == a2)
            return result;
        }
        v112 = v110[1].n128_u64[1];
        v113 = v108;
        v114 = v20;
        while (1)
        {
          result = v114[-1];
          *v114 = result;
          v88 = __CFADD__(v113++, 1);
          if (v88)
            break;
          v115 = v114 - 1;
          v116 = v114[-2].n128_u64[0];
          --v114;
          if (v111 >= v116)
          {
            v115->n128_u64[0] = v111;
            v115->n128_u64[1] = v112;
            goto LABEL_180;
          }
        }
LABEL_186:
        __break(1u);
LABEL_187:
        v140 = *a1;
        *a1 = *v20;
        result = v140;
        *v20 = v140;
        if (a2->n128_u64[0] < a1[1].n128_u64[0])
        {
          result = *v20;
          *v20 = *a2;
          *a2 = result;
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[28];

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 8))
      {
        v7 = *(_QWORD *)(a1 + 48);
        v9 = *(_OWORD *)(a1 + 16);
        v8 = *(_OWORD *)(a1 + 32);
        v10 = *(_OWORD *)a1;
        v11 = *(_OWORD *)(a2 - 40);
        v12 = *(_OWORD *)(a2 - 24);
        v13 = *(_OWORD *)(a2 - 56);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a2 - 56) = v10;
        *(_OWORD *)(a2 - 40) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      v24 = (__int128 *)(a1 + 56);
      v25 = (__int128 *)(a2 - 56);
      v26 = *(_DWORD *)(a1 + 64);
      v27 = *(_DWORD *)(a2 - 48);
      if (v26 >= *(_DWORD *)(a1 + 8))
      {
        if (v27 < v26)
        {
          v70 = *(_QWORD *)(a1 + 104);
          v72 = *(_OWORD *)(a1 + 72);
          v71 = *(_OWORD *)(a1 + 88);
          v73 = *v24;
          v75 = *(_OWORD *)(a2 - 40);
          v74 = *(_OWORD *)(a2 - 24);
          v76 = *v25;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v75;
          *(_OWORD *)(a1 + 88) = v74;
          *v24 = v76;
          *v25 = v73;
          *(_OWORD *)(a2 - 40) = v72;
          *(_OWORD *)(a2 - 24) = v71;
          *(_QWORD *)(a2 - 8) = v70;
          if (*(_DWORD *)(a1 + 64) < *(_DWORD *)(a1 + 8))
          {
            v77 = *(_QWORD *)(a1 + 48);
            v79 = *(_OWORD *)(a1 + 16);
            v78 = *(_OWORD *)(a1 + 32);
            v80 = *(_OWORD *)a1;
            v81 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v24;
            *(_OWORD *)(a1 + 16) = v81;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
            *v24 = v80;
            *(_OWORD *)(a1 + 72) = v79;
            *(_OWORD *)(a1 + 88) = v78;
            *(_QWORD *)(a1 + 104) = v77;
          }
        }
      }
      else if (v27 >= v26)
      {
        v101 = *(_QWORD *)(a1 + 48);
        v103 = *(_OWORD *)(a1 + 16);
        v102 = *(_OWORD *)(a1 + 32);
        v104 = *(_OWORD *)a1;
        v105 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v24;
        *(_OWORD *)(a1 + 16) = v105;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
        *v24 = v104;
        *(_OWORD *)(a1 + 72) = v103;
        *(_OWORD *)(a1 + 88) = v102;
        *(_QWORD *)(a1 + 104) = v101;
        if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 64))
        {
          v106 = *(_QWORD *)(a1 + 104);
          v108 = *(_OWORD *)(a1 + 72);
          v107 = *(_OWORD *)(a1 + 88);
          v109 = *v24;
          v111 = *(_OWORD *)(a2 - 40);
          v110 = *(_OWORD *)(a2 - 24);
          v112 = *v25;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v111;
          *(_OWORD *)(a1 + 88) = v110;
          *v24 = v112;
          *v25 = v109;
          *(_OWORD *)(a2 - 40) = v108;
          *(_OWORD *)(a2 - 24) = v107;
          *(_QWORD *)(a2 - 8) = v106;
        }
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 48);
        v30 = *(_OWORD *)(a1 + 16);
        v29 = *(_OWORD *)(a1 + 32);
        v31 = *(_OWORD *)a1;
        v33 = *(_OWORD *)(a2 - 40);
        v32 = *(_OWORD *)(a2 - 24);
        v34 = *v25;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v33;
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)a1 = v34;
        *v25 = v31;
        *(_OWORD *)(a2 - 40) = v30;
        *(_OWORD *)(a2 - 24) = v29;
        *(_QWORD *)(a2 - 8) = v28;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a2 - 56), a3);
      return 1;
    case 5:
      v35 = (__int128 *)(a1 + 56);
      v36 = (__int128 *)(a1 + 112);
      v37 = (__int128 *)(a1 + 168);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a1 + 168), a3);
      if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(a1 + 176))
        return 1;
      v38 = *(_QWORD *)(a1 + 216);
      v40 = *(_OWORD *)(a1 + 184);
      v39 = *(_OWORD *)(a1 + 200);
      v41 = *v37;
      v42 = *(_OWORD *)(a2 - 40);
      v43 = *(_OWORD *)(a2 - 24);
      v44 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 184) = v42;
      *(_OWORD *)(a1 + 200) = v43;
      *v37 = v44;
      *(_OWORD *)(a2 - 56) = v41;
      *(_OWORD *)(a2 - 40) = v40;
      *(_OWORD *)(a2 - 24) = v39;
      *(_QWORD *)(a2 - 8) = v38;
      if (*(_DWORD *)(a1 + 176) >= *(_DWORD *)(a1 + 120))
        return 1;
      v45 = *(_QWORD *)(a1 + 160);
      v47 = *(_OWORD *)(a1 + 128);
      v46 = *(_OWORD *)(a1 + 144);
      v48 = *v36;
      v49 = *(_OWORD *)(a1 + 184);
      *v36 = *v37;
      *(_OWORD *)(a1 + 128) = v49;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 216);
      *v37 = v48;
      *(_OWORD *)(a1 + 184) = v47;
      *(_OWORD *)(a1 + 200) = v46;
      *(_QWORD *)(a1 + 216) = v45;
      if (*(_DWORD *)(a1 + 120) >= *(_DWORD *)(a1 + 64))
        return 1;
      v50 = *(_QWORD *)(a1 + 104);
      v52 = *(_OWORD *)(a1 + 72);
      v51 = *(_OWORD *)(a1 + 88);
      v53 = *v35;
      v54 = *(_OWORD *)(a1 + 128);
      *v35 = *v36;
      *(_OWORD *)(a1 + 72) = v54;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
      *v36 = v53;
      *(_OWORD *)(a1 + 128) = v52;
      *(_OWORD *)(a1 + 144) = v51;
      *(_QWORD *)(a1 + 160) = v50;
      if (*(_DWORD *)(a1 + 64) >= *(_DWORD *)(a1 + 8))
        return 1;
      v55 = *(_QWORD *)(a1 + 48);
      v57 = *(_OWORD *)(a1 + 16);
      v56 = *(_OWORD *)(a1 + 32);
      v58 = *(_OWORD *)a1;
      v59 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)a1 = *v35;
      *(_OWORD *)(a1 + 16) = v59;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
      *v35 = v58;
      *(_OWORD *)(a1 + 72) = v57;
      *(_OWORD *)(a1 + 88) = v56;
      result = 1;
      *(_QWORD *)(a1 + 104) = v55;
      return result;
    default:
      v14 = a1 + 112;
      v15 = (__int128 *)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 64);
      v17 = *(_DWORD *)(a1 + 8);
      v18 = *(_DWORD *)(a1 + 120);
      if (v16 >= v17)
      {
        if (v18 < v16)
        {
          v60 = *(_QWORD *)(a1 + 104);
          v62 = *(_OWORD *)(a1 + 72);
          v61 = *(_OWORD *)(a1 + 88);
          v63 = *v15;
          v64 = *(_OWORD *)(a1 + 128);
          *v15 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 72) = v64;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
          *(_OWORD *)v14 = v63;
          *(_OWORD *)(a1 + 128) = v62;
          *(_OWORD *)(a1 + 144) = v61;
          *(_QWORD *)(a1 + 160) = v60;
          if (*(_DWORD *)(a1 + 64) < v17)
          {
            v65 = *(_QWORD *)(a1 + 48);
            v67 = *(_OWORD *)(a1 + 16);
            v66 = *(_OWORD *)(a1 + 32);
            v68 = *(_OWORD *)a1;
            v69 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v15;
            *(_OWORD *)(a1 + 16) = v69;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
            *v15 = v68;
            *(_OWORD *)(a1 + 72) = v67;
            *(_OWORD *)(a1 + 88) = v66;
            *(_QWORD *)(a1 + 104) = v65;
          }
        }
      }
      else if (v18 >= v16)
      {
        v82 = *(_QWORD *)(a1 + 48);
        v84 = *(_OWORD *)(a1 + 16);
        v83 = *(_OWORD *)(a1 + 32);
        v85 = *(_OWORD *)a1;
        v86 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v15;
        *(_OWORD *)(a1 + 16) = v86;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
        *v15 = v85;
        *(_OWORD *)(a1 + 72) = v84;
        *(_OWORD *)(a1 + 88) = v83;
        *(_QWORD *)(a1 + 104) = v82;
        if (v18 < *(_DWORD *)(a1 + 64))
        {
          v87 = *(_QWORD *)(a1 + 104);
          v89 = *(_OWORD *)(a1 + 72);
          v88 = *(_OWORD *)(a1 + 88);
          v90 = *v15;
          v91 = *(_OWORD *)(a1 + 128);
          *v15 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 72) = v91;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
          *(_OWORD *)v14 = v90;
          *(_OWORD *)(a1 + 128) = v89;
          *(_OWORD *)(a1 + 144) = v88;
          *(_QWORD *)(a1 + 160) = v87;
        }
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 48);
        v21 = *(_OWORD *)(a1 + 16);
        v20 = *(_OWORD *)(a1 + 32);
        v22 = *(_OWORD *)a1;
        v23 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)a1 = *(_OWORD *)v14;
        *(_OWORD *)(a1 + 16) = v23;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 160);
        *(_OWORD *)v14 = v22;
        *(_OWORD *)(a1 + 128) = v21;
        *(_OWORD *)(a1 + 144) = v20;
        *(_QWORD *)(a1 + 160) = v19;
      }
      v92 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v93 = 0;
      v94 = 0;
      break;
  }
  while (1)
  {
    v96 = *(_DWORD *)(v92 + 8);
    if (v96 < *(_DWORD *)(v14 + 8))
    {
      v97 = *(_QWORD *)v92;
      v113 = *(_OWORD *)(v92 + 12);
      *(_OWORD *)v114 = *(_OWORD *)(v92 + 28);
      *(_OWORD *)&v114[12] = *(_OWORD *)(v92 + 40);
      v98 = v93;
      do
      {
        v99 = a1 + v98;
        v100 = *(_OWORD *)(a1 + v98 + 128);
        *(_OWORD *)(v99 + 168) = *(_OWORD *)(a1 + v98 + 112);
        *(_OWORD *)(v99 + 184) = v100;
        *(_OWORD *)(v99 + 200) = *(_OWORD *)(a1 + v98 + 144);
        *(_QWORD *)(v99 + 216) = *(_QWORD *)(a1 + v98 + 160);
        if (v98 == -112)
        {
          v95 = a1;
          goto LABEL_27;
        }
        v98 -= 56;
      }
      while (v96 < *(_DWORD *)(v99 + 64));
      v95 = a1 + v98 + 168;
LABEL_27:
      *(_QWORD *)v95 = v97;
      *(_DWORD *)(v95 + 8) = v96;
      *(_OWORD *)(v95 + 12) = v113;
      *(_OWORD *)(v95 + 28) = *(_OWORD *)v114;
      *(_OWORD *)(v95 + 40) = *(_OWORD *)&v114[12];
      if (++v94 == 8)
        return v92 + 56 == a2;
    }
    v14 = v92;
    v93 += 56;
    v92 += 56;
    if (v92 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __n128 result)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v5 = *((_DWORD *)a2 + 2);
  v6 = *((_DWORD *)a3 + 2);
  if (v5 >= *((_DWORD *)a1 + 2))
  {
    if (v6 < v5)
    {
      v13 = *((_QWORD *)a2 + 6);
      v14 = a2[1];
      result = (__n128)a2[2];
      v15 = *a2;
      v17 = a3[1];
      v16 = a3[2];
      v18 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v17;
      a2[2] = v16;
      *a2 = v18;
      *a3 = v15;
      a3[1] = v14;
      a3[2] = (__int128)result;
      *((_QWORD *)a3 + 6) = v13;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        v19 = *((_QWORD *)a1 + 6);
        v20 = a1[1];
        result = (__n128)a1[2];
        v21 = *a1;
        v23 = a2[1];
        v22 = a2[2];
        v24 = *a2;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        a1[1] = v23;
        a1[2] = v22;
        *a1 = v24;
        *a2 = v21;
        a2[1] = v20;
        a2[2] = (__int128)result;
        *((_QWORD *)a2 + 6) = v19;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = *((_QWORD *)a1 + 6);
      v8 = a1[1];
      result = (__n128)a1[2];
      v9 = *a1;
      v11 = a3[1];
      v10 = a3[2];
      v12 = *a3;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a3 + 6);
      a1[1] = v11;
      a1[2] = v10;
      *a1 = v12;
LABEL_9:
      *a3 = v9;
      a3[1] = v8;
      a3[2] = (__int128)result;
      *((_QWORD *)a3 + 6) = v7;
      goto LABEL_10;
    }
    v25 = *((_QWORD *)a1 + 6);
    v26 = a1[1];
    result = (__n128)a1[2];
    v27 = *a1;
    v29 = a2[1];
    v28 = a2[2];
    v30 = *a2;
    *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
    a1[1] = v29;
    a1[2] = v28;
    *a1 = v30;
    *a2 = v27;
    a2[1] = v26;
    a2[2] = (__int128)result;
    *((_QWORD *)a2 + 6) = v25;
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v7 = *((_QWORD *)a2 + 6);
      v8 = a2[1];
      result = (__n128)a2[2];
      v9 = *a2;
      v32 = a3[1];
      v31 = a3[2];
      v33 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v32;
      a2[2] = v31;
      *a2 = v33;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
  {
    v34 = *((_QWORD *)a3 + 6);
    v35 = a3[1];
    result = (__n128)a3[2];
    v36 = *a3;
    v38 = a4[1];
    v37 = a4[2];
    v39 = *a4;
    *((_QWORD *)a3 + 6) = *((_QWORD *)a4 + 6);
    a3[1] = v38;
    a3[2] = v37;
    *a3 = v39;
    *a4 = v36;
    a4[1] = v35;
    a4[2] = (__int128)result;
    *((_QWORD *)a4 + 6) = v34;
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v40 = *((_QWORD *)a2 + 6);
      v41 = a2[1];
      result = (__n128)a2[2];
      v42 = *a2;
      v44 = a3[1];
      v43 = a3[2];
      v45 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v44;
      a2[2] = v43;
      *a2 = v45;
      *a3 = v42;
      a3[1] = v41;
      a3[2] = (__int128)result;
      *((_QWORD *)a3 + 6) = v40;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        v46 = *((_QWORD *)a1 + 6);
        v47 = a1[1];
        result = (__n128)a1[2];
        v48 = *a1;
        v50 = a2[1];
        v49 = a2[2];
        v51 = *a2;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        a1[1] = v50;
        a1[2] = v49;
        *a1 = v51;
        *a2 = v48;
        a2[1] = v47;
        a2[2] = (__int128)result;
        *((_QWORD *)a2 + 6) = v46;
      }
    }
  }
  return result;
}

WebGPU::Buffer *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSG_SL_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WebGPU::Buffer **a2)
{
  WebGPU::Buffer *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::Buffer::~Buffer(result, a2);
      return (WebGPU::Buffer *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebGPU::TextureView *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSG_SL_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WebGPU::TextureView **a2)
{
  WebGPU::TextureView *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::TextureView::~TextureView(result, a2);
      return (WebGPU::TextureView *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebGPU::ExternalTexture *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSG_SL_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WebGPU::ExternalTexture **a2)
{
  WebGPU::ExternalTexture *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::ExternalTexture::~ExternalTexture(result, a2);
      return (WebGPU::ExternalTexture *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebGPU::Device::createExternalTextureFromPixelBuffer(__CVBuffer *,WGPUColorSpace)::$_0,void,WGPUQueueWorkDoneStatus>::call(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
}

unint64_t WTF::Vector<WebGPU::BindGroup::BufferAndType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 32 * v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
        goto LABEL_30;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = (void *)WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      memcpy(v19, v5, 32 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 27))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 32 * v6);
      v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 32 * ((uint64_t)(a3 - (_QWORD)v5) >> 5);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x182429694);
  }
  v13 = *(void **)a1;
  return (unint64_t)v13 + 32 * ((uint64_t)(a3 - (_QWORD)v5) >> 5);
}

WTF **WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(WTF **result, id *a2)
{
  WTF **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v3 = result;
  v4 = *((unsigned int *)result + 2);
  v5 = *((unsigned int *)result + 3);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *result;
  if (v8 <= v4)
  {
LABEL_18:
    v16 = *((unsigned int *)v3 + 3);
    result = (WTF **)*a2;
    *((_QWORD *)v9 + v16) = result;
    ++*((_DWORD *)v3 + 3);
    return result;
  }
  if (!(v8 >> 29))
  {
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 2) = v8;
    *v3 = v11;
    if ((_DWORD)v5)
    {
      v12 = 8 * v5;
      v13 = (void **)v9;
      do
      {
        v14 = *v13;
        *v13 = 0;
        *(_QWORD *)v11 = v14;
        v11 = (WTF *)((char *)v11 + 8);
        v15 = *v13++;

        v12 -= 8;
      }
      while (v12);
      v11 = *v3;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      WTF::fastFree(v9, v10);
      v9 = *v3;
    }
    else
    {
      v9 = v11;
    }
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[2];

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E0FD15C0[v4])(v6, a1 + 8, a2 + 8);
    *(_DWORD *)(a1 + 16) = v4;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

void sub_182429810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1580[v16])(&a13, v14);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _BYTE v11[2];

  result = WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = result;
  v5 = *(unsigned int *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 32 * v5;
  *(_QWORD *)v7 = *(_QWORD *)result;
  *(_BYTE *)(v7 + 8) = 0;
  v8 = v7 + 8;
  *(_DWORD *)(v7 + 16) = -1;
  v9 = (_DWORD *)(v7 + 16);
  v10 = *(unsigned int *)(result + 16);
  if ((_DWORD)v10 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, unint64_t))off_1E0FD15C0[v10])(v11, v8, result + 8);
    *v9 = v10;
  }
  *(_QWORD *)(v6 + 32 * v5 + 24) = *(_QWORD *)(v4 + 24);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void sub_182429904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  _DWORD *v14;
  uint64_t v16;

  v16 = *v14;
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1580[v16])(&a13, v13);
  *v14 = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16[2];
  char v17;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 27))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    v15 = v3;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = 0;
      v10 = 32 * v5;
      do
      {
        v11 = v8 + v9;
        v12 = (char *)v4 + v9;
        *(_QWORD *)v11 = *(_QWORD *)((char *)v4 + v9);
        *(_BYTE *)(v8 + v9 + 8) = 0;
        v7 = (void *)(v8 + v9 + 8);
        *(_DWORD *)(v11 + 16) = -1;
        v13 = *(unsigned int *)((char *)v4 + v9 + 16);
        if ((_DWORD)v13 == -1)
        {
          *(_QWORD *)(v11 + 24) = *((_QWORD *)v12 + 3);
        }
        else
        {
          ((void (*)(char *, void *, char *))off_1E0FD15C0[v13])(v16, v7, v12 + 8);
          *(_DWORD *)(v11 + 16) = v13;
          v14 = *((unsigned int *)v12 + 4);
          *(_QWORD *)(v8 + v9 + 24) = *(_QWORD *)((char *)v4 + v9 + 24);
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, char *))off_1E0FD1580[v14])(&v17, v12 + 8);
        }
        *((_DWORD *)v12 + 4) = -1;
        v9 += 32;
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v15 == v4)
      {
        *(_QWORD *)v15 = 0;
        *(_DWORD *)(v15 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void sub_182429B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v15 = v12 + v13;
  v16 = *(unsigned int *)(v12 + v13 + 16);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1580[v16])(&a12, v15 + 8);
  *(_DWORD *)(v15 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  _DWORD *v32;
  void *v33;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 32 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 32 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 32 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 32 * v24;
          *(_QWORD *)v26 = 0;
          v27 = *v15;
          *v15 = 0;
          *(_QWORD *)v26 = v27;
          v28 = v6 + 32 * v13;
          v29 = *(_OWORD *)(v28 + 8);
          *(_QWORD *)(v26 + 24) = *(_QWORD *)(v28 + 24);
          *(_OWORD *)(v26 + 8) = v29;
          v30 = *v15;
          *v15 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
            {
              objc_destroyWeak((id *)(v30 + 80));
              WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v30 + 72), v31);
              v32 = *(_DWORD **)(v30 + 24);
              *(_QWORD *)(v30 + 24) = 0;
              if (v32)
              {
                if (*v32 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v32 -= 2;
              }

              WTF::fastFree((WTF *)v30, v33);
            }
            else
            {
              --*(_DWORD *)v30;
            }
          }
          if (v15 == a3)
            v14 = v26;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::RefCounted<WebGPU::Sampler>::deref(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _DWORD *v3;
  void *v4;
  WTF *v5;

  v1 = result;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  objc_destroyWeak((id *)(result + 80));
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v1 + 72), v2);
  v3 = *(_DWORD **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
  {
    if (*v3 == 2)
    {
      WTF::StringImpl::destroy();

      v5 = (WTF *)v1;
      return WTF::fastFree(v5, v4);
    }
    *v3 -= 2;
  }

  v5 = (WTF *)v1;
  return WTF::fastFree(v5, v4);
}

WTF *WTF::VectorDestructor<true,WebGPU::BindableResources>::destruct(WTF *result, WTF *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  if (result != a2)
  {
    v16 = v2;
    v17 = v3;
    v5 = result;
    do
    {
      v6 = *((unsigned int *)v5 + 7);
      v7 = (WTF *)*((_QWORD *)v5 + 2);
      if ((_DWORD)v6)
      {
        v8 = 32 * v6;
        v9 = (char *)v7 + 8;
        do
        {
          v10 = *((unsigned int *)v9 + 2);
          if ((_DWORD)v10 != -1)
            ((void (*)(char *, char *))off_1E0FD1580[v10])(&v15, v9);
          *((_DWORD *)v9 + 2) = -1;
          v9 += 32;
          v8 -= 32;
        }
        while (v8);
        v7 = (WTF *)*((_QWORD *)v5 + 2);
      }
      if (v7)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v7, a2);
      }
      v11 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v11)
      {
        v12 = *(void ***)v5;
        v13 = 8 * v11;
        do
        {
          v14 = *v12++;

          v13 -= 8;
        }
        while (v13);
      }
      result = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v5 = (WTF *)((char *)v5 + 48);
    }
    while (v5 != a2);
  }
  return result;
}

char *WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WTF *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x18242A0E8);
      }
      v17 = (WTF *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
      v18 = 48 * v16;
      v19 = WTF::fastMalloc((WTF *)(48 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebGPU::BindableResources>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
    return (char *)a3;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x18242A0F0);
      }
      v10 = 48 * v9;
      v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebGPU::BindableResources>::move(v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
  }
}

WTF *WTF::VectorMover<false,WebGPU::BindableResources>::move(WTF *result, WTF *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  if (result != a2)
  {
    v20 = v3;
    v21 = v4;
    v7 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v8 = *(void ***)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)a3 = v8;
      LODWORD(v8) = *((_DWORD *)v7 + 2);
      *((_DWORD *)v7 + 2) = 0;
      *(_DWORD *)(a3 + 8) = (_DWORD)v8;
      LODWORD(v8) = *((_DWORD *)v7 + 3);
      *((_DWORD *)v7 + 3) = 0;
      *(_DWORD *)(a3 + 12) = (_DWORD)v8;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v9 = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 6);
      *((_DWORD *)v7 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 7);
      *((_DWORD *)v7 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v9;
      *(_OWORD *)(a3 + 32) = *((_OWORD *)v7 + 2);
      v10 = *((unsigned int *)v7 + 7);
      v11 = (WTF *)*((_QWORD *)v7 + 2);
      if ((_DWORD)v10)
      {
        v12 = 32 * v10;
        v13 = (char *)v11 + 8;
        do
        {
          v14 = *((unsigned int *)v13 + 2);
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, char *))off_1E0FD1580[v14])(&v19, v13);
          *((_DWORD *)v13 + 2) = -1;
          v13 += 32;
          v12 -= 32;
        }
        while (v12);
        v11 = (WTF *)*((_QWORD *)v7 + 2);
      }
      if (v11)
      {
        *((_QWORD *)v7 + 2) = 0;
        *((_DWORD *)v7 + 6) = 0;
        WTF::fastFree(v11, a2);
      }
      v15 = *((unsigned int *)v7 + 3);
      if ((_DWORD)v15)
      {
        v16 = *(void ***)v7;
        v17 = 8 * v15;
        do
        {
          v18 = *v16++;

          v17 -= 8;
        }
        while (v17);
      }
      result = *(WTF **)v7;
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)v7 = 0;
        *((_DWORD *)v7 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      a3 += 48;
      v7 = (WTF *)((char *)v7 + 48);
    }
    while (v7 != a2);
  }
  return result;
}

WebGPU::BindGroupLayout *WTF::RefCounted<WebGPU::BindGroupLayout>::deref(WebGPU::BindGroupLayout *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::BindGroupLayout::~BindGroupLayout(result, a2);
    return (WebGPU::BindGroupLayout *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  if (a2 < 8)
  {
    v12 = 0;
LABEL_10:
    v16 = a2 - v12;
    v17 = (_QWORD *)(v9 + 8 * v12 + 16);
    do
    {
      *v17++ = 0xFFFFFFFFLL;
      --v16;
    }
    while (v16);
    goto LABEL_12;
  }
  v12 = a2 & 0xFFFFFFF8;
  v13 = (_OWORD *)(v9 + 48);
  *(_QWORD *)&v14 = 0xFFFFFFFFLL;
  *((_QWORD *)&v14 + 1) = 0xFFFFFFFFLL;
  v15 = v12;
  do
  {
    *(v13 - 2) = v14;
    *(v13 - 1) = v14;
    *v13 = v14;
    v13[1] = v14;
    v13 += 4;
    v15 -= 8;
  }
  while (v15);
  if (v12 != a2)
    goto LABEL_10;
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (_DWORD *)(v6 + 8 * v18);
      if (*v20 <= 0xFFFFFFFD)
      {
        v21 = *a1;
        if (*a1)
          v22 = *(_DWORD *)(v21 - 8);
        else
          v22 = 0;
        v23 = 0;
        v24 = 9 * ((*v20 + ~(*v20 << 15)) ^ ((*v20 + ~(*v20 << 15)) >> 10));
        v25 = ((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) ^ (((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) >> 16);
        do
        {
          v26 = v25 & v22;
          v25 = ++v23 + v26;
        }
        while (*(_DWORD *)(v21 + 8 * v26) != -1);
        v27 = (_QWORD *)(v21 + 8 * v26);
        *v27 = *(_QWORD *)v20;
        if (v20 == a3)
          v19 = v27;
      }
      ++v18;
    }
    while (v18 != v7);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v19;
}

void WebGPU::Device::createBindGroupLayout(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, WebGPU::BindGroupLayout *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  void *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  __CFString *v58;
  void *v59;
  int v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  _BYTE *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;
  void *v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  void *v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  void *v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  WTF *v126;
  int *v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  int v134;
  void *v135;
  const char *v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  int v147;
  uint64_t v148;
  _DWORD *v149;
  _DWORD *v150;
  uint64_t v151;
  _DWORD *v152;
  void *v153;
  void *v154;
  id v155;
  id *v156;
  id v157;
  _DWORD *v158;
  unsigned int *v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  int v166;
  unsigned int v167;
  id v168;
  void *v169;
  _DWORD *v170;
  __CFString *v171;
  void *v172;
  void *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  id v177;
  id v178;
  id v179;
  uint64_t v180;
  id v181;
  id v182;
  id v183;
  void *v184;
  void **v185;
  uint64_t v186;
  unsigned __int8 *v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  void *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _DWORD *v200;
  _DWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  uint64_t v205;
  _DWORD *v206;
  uint64_t v207;
  void *v208;
  void *v209;
  uint64_t v210;
  void *v211;
  void *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  WebGPU::BindGroupLayout *v221;
  _QWORD *v222;
  char *v223;
  unint64_t v224;
  uint64_t v225;
  unsigned int *v226;
  void *v227;
  int v228;
  WTF *v229;
  void *v230;
  WTF *v231;
  void *v233;
  id v234;
  void *v235;
  id v236;
  WTF *v238;
  id v239;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _DWORD *v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  __int128 v272;
  id v273;
  id v274;
  id v275;
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 || !*(_QWORD *)(a1 + 8))
  {
    v6 = WTF::fastMalloc((WTF *)0xC0);
    WebGPU::BindGroupLayout::BindGroupLayout(v6, (unsigned __int8 **)a1);
    *(_QWORD *)a4 = v6;
    return;
  }
  v260 = 0;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(_QWORD *)(a2 + 16));
  v273 = (id)objc_claimAutoreleasedReturnValue();
  v258 = 0;
  v256 = 0;
  v254 = 0;
  v252 = 0;
  v250 = 0;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(_QWORD *)(a2 + 16));
  v274 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(_QWORD *)(a2 + 16));
  v275 = (id)objc_claimAutoreleasedReturnValue();
  v259 = 0;
  v257 = 0;
  v255 = 0;
  v253 = 0;
  v251 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    if (v8 >> 25)
    {
      __break(0xC471u);
      JUMPOUT(0x18242BF94);
    }
    v9 = *(_QWORD *)(a2 + 24);
    v10 = WTF::fastMalloc((WTF *)(v8 << 7));
    v229 = (WTF *)v10;
    v11 = 0;
    do
    {
      v12 = (_OWORD *)(v10 + v11);
      v13 = *(_OWORD *)(v9 + v11);
      v14 = *(_OWORD *)(v9 + v11 + 16);
      v15 = *(_OWORD *)(v9 + v11 + 48);
      v12[2] = *(_OWORD *)(v9 + v11 + 32);
      v12[3] = v15;
      *v12 = v13;
      v12[1] = v14;
      v7 = *(_OWORD *)(v9 + v11 + 64);
      v16 = *(_OWORD *)(v9 + v11 + 80);
      v17 = *(_OWORD *)(v9 + v11 + 112);
      v12[6] = *(_OWORD *)(v9 + v11 + 96);
      v12[7] = v17;
      v12[4] = v7;
      v12[5] = v16;
      v11 += 128;
    }
    while (v8 << 7 != v11);
    v18 = v8;
    v224 = v8;
    if ((a3 & 1) != 0)
      goto LABEL_14;
    goto LABEL_10;
  }
  v229 = 0;
  v18 = 0;
  v224 = 0;
  if ((a3 & 1) == 0)
  {
LABEL_10:
    v19 = 126 - 2 * __clz(v18);
    if (v224)
      v20 = v19;
    else
      v20 = 0;
    std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *,false>((uint64_t)v229, (__int128 *)v229 + 8 * v18, v20, 1, *(double *)&v7);
    v18 = v224;
  }
LABEL_14:
  v248 = 0;
  v249 = 0;
  v271 = 0;
  v272 = 0uLL;
  v270 = 0;
  v269 = 0;
  v268 = 0;
  v267 = 0;
  v21 = v229;
  v231 = (WTF *)((char *)v229 + 128 * v18);
  v225 = *(unsigned int *)(a1 + 96);
  v247 = 0;
  if (!v18)
  {
    LODWORD(v219) = 0;
    LODWORD(v220) = 0;
    goto LABEL_196;
  }
  LODWORD(v219) = 0;
  LODWORD(v220) = 0;
  v223 = (char *)v229 + 12;
  while (1)
  {
    v238 = v21;
    v22 = *(_QWORD *)v21;
    if (*(_QWORD *)v21 && (*(_DWORD *)(v22 + 8) != 1683766698 || *(_QWORD *)v22))
    {
      v210 = WTF::fastMalloc((WTF *)0xC0);
      WebGPU::BindGroupLayout::BindGroupLayout(v210, (unsigned __int8 **)a1);
      goto LABEL_188;
    }
    v24 = (unsigned int *)((char *)v21 + 8);
    v23 = *((unsigned int *)v21 + 2);
    if (v23 >= v225)
    {
      v135 = (void *)MEMORY[0x1E0CB3940];
      if (v247)
      {
        v25 = *(_DWORD *)(v247 - 8);
        v137 = 9 * ((v23 + ~((_DWORD)v23 << 15)) ^ ((v23 + ~((_DWORD)v23 << 15)) >> 10));
        v138 = (v137 ^ (v137 >> 6)) + ~((v137 ^ (v137 >> 6)) << 11);
        v28 = v25 & (v138 ^ HIWORD(v138));
        v29 = *(_DWORD *)(v247 + 4 * v28);
        if (v29 != (_DWORD)v23)
          goto LABEL_183;
LABEL_178:
        v136 = "is";
      }
      else
      {
        v136 = "is not";
      }
LABEL_187:
      objc_msgSend(v135, "stringWithFormat:", CFSTR("Binding index is invalid: entry.binding(%u) >= maxBindingIndex(%u) || entry binding %s duplicated"), v23, v225, v136);
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      WebGPU::reportErrorInCreateBindGroupLayout(v140, a3, a1);

      v210 = WTF::fastMalloc((WTF *)0xC0);
      WebGPU::BindGroupLayout::BindGroupLayout(v210, (unsigned __int8 **)a1);
      goto LABEL_188;
    }
    if (!v247)
      goto LABEL_26;
    v25 = *(_DWORD *)(v247 - 8);
    v26 = 9 * ((v23 + ~((_DWORD)v23 << 15)) ^ ((v23 + ~((_DWORD)v23 << 15)) >> 10));
    v27 = (v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11);
    v28 = v25 & (v27 ^ HIWORD(v27));
    v29 = *(_DWORD *)(v247 + 4 * v28);
    if (v29 == (_DWORD)v23)
    {
LABEL_177:
      v135 = (void *)MEMORY[0x1E0CB3940];
      if (v29 == (_DWORD)v23)
        goto LABEL_178;
LABEL_183:
      v139 = 1;
      v136 = "is not";
      while (v29 != -1)
      {
        v28 = (v28 + v139) & v25;
        v29 = *(_DWORD *)(v247 + 4 * v28);
        ++v139;
        if (v29 == (_DWORD)v23)
        {
          v136 = "is";
          goto LABEL_187;
        }
      }
      goto LABEL_187;
    }
    v30 = 1;
    v31 = *(_DWORD *)(v247 + 4 * v28);
    v32 = v28;
    while (v31 != -1)
    {
      v32 = (v32 + v30) & v25;
      v31 = *(_DWORD *)(v247 + 4 * v32);
      ++v30;
      if (v31 == (_DWORD)v23)
        goto LABEL_177;
    }
LABEL_26:
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(&v247, (int *)v238 + 2, (uint64_t)&v265);
    if (*((_DWORD *)v238 + 11))
    {
      v33 = *((_DWORD *)v238 + 10);
      if (v33 == 1)
      {
        v34 = *(unsigned int *)(a1 + 100);
        v220 = (v220 + 1);
        if (v220 > v34)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Too many dynamic uniform buffers: used(%u), limit(%u)"), v220, v34);
          v209 = (void *)objc_claimAutoreleasedReturnValue();
          WebGPU::reportErrorInCreateBindGroupLayout(v209, a3, a1);

          v210 = WTF::fastMalloc((WTF *)0xC0);
          WebGPU::BindGroupLayout::BindGroupLayout(v210, (unsigned __int8 **)a1);
LABEL_188:
          *(_QWORD *)a4 = v210;
          goto LABEL_296;
        }
      }
      else if ((v33 & 0xFFFFFFFE) == 2)
      {
        v35 = *(unsigned int *)(a1 + 104);
        v219 = (v219 + 1);
        if (v219 > v35)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Too many dynamic storage buffers: used(%u), limit(%u)"), v219, v35);
          v212 = (void *)objc_claimAutoreleasedReturnValue();
          WebGPU::reportErrorInCreateBindGroupLayout(v212, a3, a1);

          v210 = WTF::fastMalloc((WTF *)0xC0);
          WebGPU::BindGroupLayout::BindGroupLayout(v210, (unsigned __int8 **)a1);
          goto LABEL_188;
        }
      }
    }
    v228 = *((_DWORD *)v238 + 22);
    if (v228 == 2147483646)
      break;
    v36 = (uint64_t *)((char *)v238 + 40);
    if (!*((_DWORD *)v238 + 10))
    {
      v36 = (uint64_t *)((char *)v238 + 72);
      if (!*((_DWORD *)v238 + 18))
      {
        v52 = 0;
        v218 = 0;
        if (v228)
        {
          v60 = *((_DWORD *)v238 + 23);
          v216 = 0;
          v217 = 0;
          v54 = 0;
          v235 = 0;
          if (v60)
          {
            if (*((_QWORD *)v238 + 10))
              goto LABEL_292;
            if (*((_DWORD *)v238 + 24))
            {
              v235 = 0;
              v58 = CFSTR("Texture layout not valid");
              if (v228 == 1 || v60 != 2)
                goto LABEL_294;
            }
            v61 = (void *)objc_opt_new();
            objc_msgSend(v61, "setDataType:", 58);
            objc_msgSend(v61, "setAccess:", 0);
            v235 = v61;
            if (!v61)
            {
LABEL_292:
              v235 = 0;
LABEL_293:
              v58 = CFSTR("Texture layout not valid");
LABEL_294:
              WebGPU::reportErrorInCreateBindGroupLayout(v58, a3, a1);
              WebGPU::BindGroupLayout::createInvalid(a4, (unsigned __int8 **)a1);
LABEL_295:

              goto LABEL_296;
            }
            v52 = 0;
            v54 = *((_QWORD *)v238 + 11);
            v218 = 2;
            v216 = *((_QWORD *)v238 + 10);
            v217 = *((_QWORD *)v238 + 12);
          }
        }
        else
        {
          v216 = 0;
          v217 = 0;
          v54 = 0;
          v235 = 0;
        }
        goto LABEL_63;
      }
      v50 = (uint64_t *)((char *)v238 + 64);
      if (*((_QWORD *)v238 + 8)
        || (v51 = (void *)objc_opt_new(),
            objc_msgSend(v51, "setDataType:", 59),
            objc_msgSend(v51, "setAccess:", 0),
            (v235 = v51) == 0))
      {
        v235 = 0;
LABEL_288:
        v207 = WTF::fastMalloc((WTF *)0xC0);
        WebGPU::BindGroupLayout::BindGroupLayout(v207, (unsigned __int8 **)a1);
        v49 = 0;
        v230 = 0;
        v208 = 0;
        goto LABEL_290;
      }
      v52 = 0;
      v217 = 0;
      v218 = 1;
      v53 = v238;
LABEL_61:
      v216 = *v50;
      v54 = *v36;
      if (*((_DWORD *)v53 + 22) && *((_DWORD *)v53 + 23))
        goto LABEL_293;
LABEL_63:
      v49 = 0;
      v55 = *((_DWORD *)v238 + 28);
      if (v55 && (v56 = *((_DWORD *)v238 + 29)) != 0 && (v57 = *((_DWORD *)v238 + 30)) != 0)
      {
        if (v235)
          goto LABEL_286;
        if (*((_QWORD *)v238 + 13))
          goto LABEL_285;
        v235 = 0;
        if (((v55 != 2) & *((_BYTE *)v238 + 24)) != 0)
        {
LABEL_286:
          v58 = CFSTR("Storage texture layout not valid");
          goto LABEL_294;
        }
        v58 = CFSTR("Storage texture layout not valid");
        if ((v57 & 0xFFFFFFFE) == 4)
          goto LABEL_294;
        if (!WebGPU::Texture::hasStorageBindingCapability(v56, a1, v55)
          || (v59 = (void *)objc_opt_new(),
              objc_msgSend(v59, "setDataType:", 58),
              objc_msgSend(v59, "setAccess:", 1),
              (v235 = v59) == 0))
        {
LABEL_285:
          v235 = 0;
          v58 = CFSTR("Storage texture layout not valid");
          goto LABEL_294;
        }
        v227 = 0;
        v230 = 0;
        v49 = 0;
        v54 = *((_QWORD *)v238 + 14);
        v218 = 3;
        v216 = *((_QWORD *)v238 + 13);
        v217 = *((_QWORD *)v238 + 15);
      }
      else
      {
        v230 = 0;
        v227 = 0;
        if (!v235)
          goto LABEL_283;
      }
      goto LABEL_92;
    }
    if (*((_DWORD *)v238 + 10) != 2147483644)
    {
      v50 = (uint64_t *)((char *)v238 + 32);
      WebGPU::createArgumentDescriptor((uint64_t)v238 + 32, *((_DWORD *)v238 + 6));
      v235 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v235)
      {
        WebGPU::reportErrorInCreateBindGroupLayout(CFSTR("Buffer layout is not valid"), a3, a1);
        v207 = WTF::fastMalloc((WTF *)0xC0);
        WebGPU::BindGroupLayout::BindGroupLayout(v207, (unsigned __int8 **)a1);
        v49 = 0;
        v230 = 0;
        v208 = 0;
        v235 = 0;
        goto LABEL_290;
      }
      v53 = v238;
      if (*((_DWORD *)v238 + 18))
        goto LABEL_288;
      v218 = 0;
      v52 = *((_QWORD *)v238 + 7);
      v217 = *((_QWORD *)v238 + 6);
      goto LABEL_61;
    }
    v37 = *((_DWORD *)v238 + 14);
    v38 = v248;
    if (v248
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v248, 8u, 0), (v38 = v248) != 0))
    {
      v39 = *(_DWORD *)(v38 - 8);
    }
    else
    {
      v39 = 0;
    }
    v40 = 9 * ((~(v37 << 15) + v37) ^ ((~(v37 << 15) + v37) >> 10));
    v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
    v42 = v39 & (v41 ^ HIWORD(v41));
    v43 = v38 + 16 * v42;
    v44 = *(_DWORD *)v43;
    if (*(_DWORD *)v43 != -1)
    {
      v45 = 0;
      v46 = 1;
      do
      {
        if (v44 == v37)
        {
          *(_QWORD *)(v43 + 8) = *v24;
          goto LABEL_146;
        }
        if (v44 == -2)
          v45 = v43;
        v42 = (v42 + v46) & v39;
        v43 = v38 + 16 * v42;
        v44 = *(_DWORD *)v43;
        ++v46;
      }
      while (*(_DWORD *)v43 != -1);
      if (v45)
      {
        *(_DWORD *)v45 = -1;
        *(_QWORD *)(v45 + 8) = 0;
        --*(_DWORD *)(v248 - 16);
        v43 = v45;
      }
    }
    *(_DWORD *)v43 = v37;
    *(_QWORD *)(v43 + 8) = *v24;
    if (v248)
      v47 = *(_DWORD *)(v248 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v248 - 12) = v47;
    if (v248)
      v120 = *(_DWORD *)(v248 - 12);
    else
      v120 = 0;
    v121 = (*(_DWORD *)(v248 - 16) + v120);
    v122 = *(unsigned int *)(v248 - 4);
    if (v122 > 0x400)
    {
      if (v122 <= 2 * v121)
        goto LABEL_158;
    }
    else if (3 * v122 <= 4 * v121)
    {
      if ((_DWORD)v122)
LABEL_158:
        v123 = (_DWORD)v122 << (6 * *(_DWORD *)(v248 - 12) >= (2 * v122));
      else
        v123 = 8;
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v248, v123, (_DWORD *)v43);
    }
LABEL_146:
    v21 = (WTF *)((char *)v238 + 128);
    v223 += 128;
    if ((WTF *)((char *)v238 + 128) == v231)
    {
      if (!v271 && v272 == 0)
        goto LABEL_196;
      if ((a3 & 1) != 0)
        goto LABEL_308;
      if (v224)
      {
        v124 = 0;
        v125 = (uint64_t)v249;
        v126 = v229;
        do
        {
          if (*((_DWORD *)v126 + 11))
          {
            v128 = *(_DWORD *)(v125 - 8);
            v129 = *((_DWORD *)v126 + 2);
            v130 = 9 * ((v129 + ~(v129 << 15)) ^ ((v129 + ~(v129 << 15)) >> 10));
            v131 = (v130 ^ (v130 >> 6)) + ~((v130 ^ (v130 >> 6)) << 11);
            v132 = (v131 ^ HIWORD(v131)) & v128;
            v127 = (int *)(v125 + 136 * v132);
            v133 = *v127;
            if (*v127 != v129)
            {
              v134 = 1;
              while (v133 != -1)
              {
                v132 = (v132 + v134) & v128;
                v127 = (int *)(v125 + 136 * v132);
                v133 = *v127;
                ++v134;
                if (*v127 == v129)
                  goto LABEL_169;
              }
              v127 = (int *)(v125 + 136 * *(unsigned int *)(v125 - 4));
            }
LABEL_169:
            v127[32] = v124++;
          }
          v126 = (WTF *)((char *)v126 + 128);
        }
        while (v126 != v231);
      }
LABEL_196:
      if (*(_QWORD *)(a2 + 8))
        strlen(*(const char **)(a2 + 8));
      v222 = a4;
      WTF::String::fromUTF8();
      v143 = 0;
      v265 = 0uLL;
      *(_QWORD *)&v266 = 0;
      while (2)
      {
        if (*((_DWORD *)&v267 + v143))
        {
          v144 = dword_18260EF68[v143];
          v145 = (void *)objc_opt_new();
          objc_msgSend(v145, "setDataType:", 29);
          objc_msgSend(v145, "setAccess:", 0);
          objc_msgSend(*(&v273 + v143), "objectAtIndex:", objc_msgSend(*(&v273 + v143), "count") - 1);
          v146 = (void *)objc_claimAutoreleasedReturnValue();
          v147 = objc_msgSend(v146, "index");

          if (!v249)
            goto LABEL_208;
          v148 = *(v249 - 1);
          v149 = &v249[34 * v148];
          if (*(v249 - 3))
          {
            v150 = v249;
            if ((_DWORD)v148)
            {
              v151 = 136 * v148;
              v150 = v249;
              while (*v150 >= 0xFFFFFFFE)
              {
                v150 += 34;
                v151 -= 136;
                if (!v151)
                {
                  v150 = v149;
                  break;
                }
              }
            }
          }
          else
          {
            v150 = &v249[34 * v148];
            v149 = v150;
          }
          v152 = &v249[34 * *(v249 - 1)];
          if (v152 == v150)
          {
LABEL_208:

            goto LABEL_209;
          }
          while (2)
          {
            v158 = &v150[2 * v144];
            if (!*((_BYTE *)v158 + 84))
              goto LABEL_225;
            v159 = v158 + 20;
            if ((a3 & 1) != 0)
            {
              if (!v248)
                goto LABEL_220;
              v160 = *(_DWORD *)(v248 - 8);
              v161 = v150[2];
              v162 = 9 * ((v161 + ~(v161 << 15)) ^ ((v161 + ~(v161 << 15)) >> 10));
              v163 = (v162 ^ (v162 >> 6)) + ~((v162 ^ (v162 >> 6)) << 11);
              v164 = (v163 ^ HIWORD(v163)) & v160;
              v165 = *(_DWORD *)(v248 + 16 * v164);
              if (v165 != v161)
              {
                v166 = 1;
                while (v165 != -1)
                {
                  v164 = ((_DWORD)v164 + v166) & v160;
                  v165 = *(_DWORD *)(v248 + 16 * v164);
                  ++v166;
                  if (v165 == v161)
                    goto LABEL_219;
                }
LABEL_220:
                *((_BYTE *)v159 + 4) = 0;
LABEL_225:
                v170 = v150 + 34;
                v150 = v149;
                if (v170 != v149)
                {
                  v150 = v170;
                  while (*v150 >= 0xFFFFFFFE)
                  {
                    v150 += 34;
                    if (v150 == v149)
                    {
                      v150 = v149;
                      break;
                    }
                  }
                }
                if (v150 == v152)
                  goto LABEL_208;
                continue;
              }
LABEL_219:
              if (v164 == *(_DWORD *)(v248 - 4))
                goto LABEL_220;
              v167 = *(_DWORD *)(v248 + 16 * v164 + 8);
            }
            else
            {
              v167 = *v159 + v147;
            }
            break;
          }
          *v159 = v167;
          v168 = *(&v273 + v143);
          v169 = (void *)objc_msgSend(v145, "copy");
          objc_msgSend(v169, "setIndex:", v167);
          objc_msgSend(v168, "addObject:", v169);

          goto LABEL_225;
        }
LABEL_209:
        v153 = *(&v273 + v143);
        objc_msgSend(v153, "sortedArrayUsingComparator:", &__block_literal_global_28);
        v154 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v153, "count"))
        {
          v155 = (id)objc_msgSend(*(id *)(a1 + 8), "newArgumentEncoderWithArguments:", v154);
          v156 = (id *)&v265 + v143;
          objc_storeStrong(v156, v155);
          v157 = v155;
        }
        else
        {
          v157 = 0;
          v156 = (id *)&v265 + v143;
          v155 = *v156;
          *v156 = 0;
        }

        if ((_QWORD)v243)
        {
          v171 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          v157 = *v156;
        }
        else
        {
          v171 = &stru_1E0FD9588;
        }
        objc_msgSend(v157, "setLabel:", v171);

        if (!objc_msgSend(*(&v273 + v143), "count") || *v156)
        {

          if (++v143 != 3)
            continue;
          v172 = (void *)*((_QWORD *)&v265 + 1);
          v173 = (void *)v266;
          v174 = v271;
          v175 = v272;
          v234 = (id)v265;
          v236 = v172;
          v239 = v173;
          v176 = WTF::fastMalloc((WTF *)0xC0);
          v177 = v234;
          v178 = v236;
          v179 = v239;
          *(_DWORD *)v176 = 1;
          *(_QWORD *)(v176 + 8) = 0;
          v180 = v260;
          v260 = 0;
          *(_QWORD *)(v176 + 16) = v180;
          v181 = v177;
          *(_QWORD *)(v176 + 24) = v181;
          v182 = v178;
          *(_QWORD *)(v176 + 32) = v182;
          v183 = v179;
          v184 = v183;
          *(_QWORD *)(v176 + 56) = 0;
          v185 = (void **)(v176 + 56);
          v186 = (uint64_t)v249;
          v249 = 0;
          *(_QWORD *)(v176 + 40) = v183;
          *(_QWORD *)(v176 + 48) = v186;
          *(_QWORD *)(v176 + 64) = 0;
          *(_BYTE *)(v176 + 72) = 1;
          *(_QWORD *)(v176 + 80) = v174;
          *(_OWORD *)(v176 + 88) = v175;
          v187 = *(unsigned __int8 **)a1;
          LODWORD(v186) = __ldaxr(*(unsigned __int8 **)a1);
          if ((_DWORD)v186)
          {
            __clrex();
            goto LABEL_243;
          }
          if (__stxr(1u, v187))
LABEL_243:
            MEMORY[0x186DAB1AC](v187);
          ++*((_QWORD *)v187 + 1);
          v189 = __ldxr(v187);
          if (v189 == 1)
          {
            if (!__stlxr(0, v187))
            {
LABEL_249:
              *(_QWORD *)(v176 + 104) = a1;
              *(_QWORD *)(v176 + 112) = 0;
              *(_BYTE *)(v176 + 120) = a3;
              *(_QWORD *)(v176 + 124) = v258;
              *(_DWORD *)(v176 + 132) = v259;
              *(_QWORD *)(v176 + 136) = v256;
              *(_DWORD *)(v176 + 144) = v257;
              *(_QWORD *)(v176 + 148) = v254;
              *(_DWORD *)(v176 + 156) = v255;
              *(_DWORD *)(v176 + 168) = v253;
              *(_QWORD *)(v176 + 160) = v252;
              v190 = v251;
              *(_QWORD *)(v176 + 172) = v250;
              *(_DWORD *)(v176 + 180) = v190;
              *(_DWORD *)(v176 + 184) = v220;
              *(_DWORD *)(v176 + 188) = v219;
              v191 = *(_QWORD *)(v176 + 48);
              if (!v191)
                goto LABEL_274;
              v192 = *(unsigned int *)(v191 - 12);
              if (*(_DWORD *)(v176 + 64) < v192)
              {
                if (!(v192 >> 29))
                {
                  v193 = *v185;
                  v194 = *(unsigned int *)(v176 + 68);
                  v195 = (void *)WTF::fastMalloc((WTF *)(8 * v192));
                  *(_DWORD *)(v176 + 64) = v192;
                  *(_QWORD *)(v176 + 56) = v195;
                  memcpy(v195, v193, 8 * v194);
                  if (v193)
                  {
                    if (*v185 == v193)
                    {
                      *(_QWORD *)(v176 + 56) = 0;
                      *(_DWORD *)(v176 + 64) = 0;
                    }
                    WTF::fastFree((WTF *)v193, v196);
                  }
                  goto LABEL_256;
                }
LABEL_308:
                __break(0xC471u);
                JUMPOUT(0x18242BF88);
              }
              v197 = *(_QWORD *)(v176 + 48);
              if (!v197 || !*(_DWORD *)(v197 - 12))
                goto LABEL_274;
LABEL_256:
              v198 = *(unsigned int *)(v197 - 4);
              if ((_DWORD)v198)
              {
                v199 = 136 * v198;
                v200 = *(_DWORD **)(v176 + 48);
                while (*v200 >= 0xFFFFFFFE)
                {
                  v200 += 34;
                  v199 -= 136;
                  if (!v199)
                    goto LABEL_274;
                }
              }
              else
              {
                v200 = *(_DWORD **)(v176 + 48);
              }
              v201 = (_DWORD *)(v197 + 136 * v198);
              if (v201 != v200)
              {
                LODWORD(v202) = *(_DWORD *)(v176 + 68);
LABEL_266:
                *(_QWORD *)&v245 = v200 + 2;
                if ((_DWORD)v202 == *(_DWORD *)(v176 + 64))
                {
                  v203 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v176 + 56, v202 + 1, (unint64_t)&v245);
                  v202 = *(unsigned int *)(v176 + 68);
                  *(_QWORD *)(*(_QWORD *)(v176 + 56) + 8 * v202) = *v203;
                }
                else
                {
                  *((_QWORD *)*v185 + v202) = v200 + 2;
                }
                LODWORD(v202) = v202 + 1;
                *(_DWORD *)(v176 + 68) = v202;
                while (1)
                {
                  v200 += 34;
                  if (v200 == v201)
                    break;
                  if (*v200 < 0xFFFFFFFE)
                  {
                    if (v200 != v201)
                      goto LABEL_266;
                    break;
                  }
                }
              }
              else
              {
LABEL_274:
                LODWORD(v202) = *(_DWORD *)(v176 + 68);
              }
              v204 = 126 - 2 * __clz(v202);
              if ((_DWORD)v202)
                v205 = v204;
              else
                v205 = 0;
              std::__introsort<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,false>(*(unsigned int ***)(v176 + 56), (unsigned int **)(*(_QWORD *)(v176 + 56) + 8 * v202), v205, 1);

              *v222 = v176;
LABEL_279:

              v206 = (_DWORD *)v243;
              *(_QWORD *)&v243 = 0;
              if (v206)
              {
                if (*v206 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v206 -= 2;
              }
              goto LABEL_296;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v187);
          goto LABEL_249;
        }
        break;
      }
      v188 = WTF::fastMalloc((WTF *)0xC0);
      WebGPU::BindGroupLayout::BindGroupLayout(v188, (unsigned __int8 **)a1);
      *v222 = v188;

      v182 = (id)*((_QWORD *)&v265 + 1);
      v184 = (void *)v266;
      v181 = (id)v265;
      goto LABEL_279;
    }
  }
  if (*((_QWORD *)v238 + 10))
  {
    v235 = 0;
    goto LABEL_53;
  }
  if (*((_DWORD *)v238 + 24) && *((_DWORD *)v238 + 23) != 2)
  {
    v62 = 0;
  }
  else
  {
    v48 = (void *)objc_opt_new();
    objc_msgSend(v48, "setDataType:", 58);
    objc_msgSend(v48, "setAccess:", 0);
    v235 = v48;
    if (*((_QWORD *)v238 + 10))
    {
LABEL_53:
      v49 = 0;
      goto LABEL_91;
    }
    v62 = v48;
  }
  if (!*((_DWORD *)v238 + 24) || (v49 = 0, *((_DWORD *)v238 + 23) == 2) && *((_DWORD *)v238 + 22) != 1)
  {
    v49 = (void *)objc_opt_new();
    objc_msgSend(v49, "setDataType:", 58);
    objc_msgSend(v49, "setAccess:", 0);
  }
  v235 = v62;
LABEL_91:
  v265 = xmmword_18260EF78;
  v266 = *(_OWORD *)algn_18260EF88;
  WebGPU::createArgumentDescriptor((uint64_t)&v265, *((_DWORD *)v238 + 6));
  v63 = objc_claimAutoreleasedReturnValue();
  DWORD2(v265) = 2147483645;
  WebGPU::createArgumentDescriptor((uint64_t)&v265, *((_DWORD *)v238 + 6));
  v227 = (void *)objc_claimAutoreleasedReturnValue();
  v230 = (void *)v63;
  v52 = 0;
  v216 = 0;
  v217 = 0;
  v54 = 0;
  v218 = 4;
  if (!v235)
  {
LABEL_283:
    v207 = WTF::fastMalloc((WTF *)0xC0);
    WebGPU::BindGroupLayout::BindGroupLayout(v207, (unsigned __int8 **)a1);
    v235 = 0;
    v208 = v227;
LABEL_290:
    *(_QWORD *)a4 = v207;

    goto LABEL_295;
  }
LABEL_92:
  LOBYTE(v265) = 0;
  BYTE4(v265) = 0;
  BYTE8(v265) = 0;
  BYTE12(v265) = 0;
  LOBYTE(v266) = 0;
  BYTE4(v266) = 0;
  LOBYTE(v245) = 0;
  BYTE4(v245) = 0;
  BYTE8(v245) = 0;
  BYTE12(v245) = 0;
  LOBYTE(v246) = 0;
  BYTE4(v246) = 0;
  LOBYTE(v243) = 0;
  BYTE4(v243) = 0;
  BYTE8(v243) = 0;
  BYTE12(v243) = 0;
  LOBYTE(v244) = 0;
  BYTE4(v244) = 0;
  v221 = a4;
  v233 = v49;
  v214 = v54;
  v215 = v52;
  if (!*((_DWORD *)v238 + 6))
  {
    *(_QWORD *)&v261 = *v24 | 0x300000000;
    *(_QWORD *)&v241 = objc_msgSend(v235, "access");
    WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::add<MTLBindingAccess>(&v263, &v260, (uint64_t *)&v261, (uint64_t *)&v241);
LABEL_125:
    v101 = *((_DWORD *)v238 + 2);
    v102 = *((_DWORD *)v238 + 6);
    v263 = v245;
    v264 = v246;
    v261 = v243;
    v262 = v244;
    LODWORD(v241) = v265;
    BYTE4(v241) = BYTE4(v265);
    BYTE12(v241) = BYTE12(v265);
    DWORD2(v241) = DWORD2(v265);
    BYTE4(v242) = BYTE4(v266);
    LODWORD(v242) = v266;
    v103 = (uint64_t)v249;
    if (v249
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::BindGroupLayout::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v249, 8u), (v103 = (uint64_t)v249) != 0))
    {
      v104 = *(_DWORD *)(v103 - 8);
    }
    else
    {
      v104 = 0;
    }
    v105 = *v24;
    v106 = 9 * ((v105 + ~(v105 << 15)) ^ ((v105 + ~(v105 << 15)) >> 10));
    v107 = (v106 ^ (v106 >> 6)) + ~((v106 ^ (v106 >> 6)) << 11);
    v108 = (v107 ^ HIWORD(v107)) & v104;
    v109 = v103 + 136 * v108;
    v110 = *(_DWORD *)v109;
    if (*(_DWORD *)v109 != -1)
    {
      v111 = 0;
      v112 = 1;
      while (v110 != v105)
      {
        if (v110 == -2)
          v111 = v109;
        v108 = (v108 + v112) & v104;
        v109 = v103 + 136 * v108;
        v110 = *(_DWORD *)v109;
        ++v112;
        if (*(_DWORD *)v109 == -1)
        {
          if (v111)
          {
            *(_DWORD *)v111 = -1;
            *(_OWORD *)(v111 + 8) = 0u;
            *(_OWORD *)(v111 + 24) = 0u;
            *(_OWORD *)(v111 + 40) = 0u;
            *(_OWORD *)(v111 + 56) = 0u;
            *(_OWORD *)(v111 + 72) = 0u;
            *(_OWORD *)(v111 + 88) = 0u;
            *(_OWORD *)(v111 + 104) = 0u;
            *(_OWORD *)(v111 + 120) = 0u;
            --*(v249 - 4);
            v105 = *v24;
            v109 = v111;
          }
          goto LABEL_136;
        }
      }
      goto LABEL_145;
    }
LABEL_136:
    *(_DWORD *)v109 = v105;
    *(_DWORD *)(v109 + 8) = v101;
    *(_DWORD *)(v109 + 12) = v102;
    *(_QWORD *)(v109 + 16) = v216;
    *(_QWORD *)(v109 + 24) = v214;
    *(_QWORD *)(v109 + 32) = v217;
    *(_QWORD *)(v109 + 40) = v215;
    *(_DWORD *)(v109 + 48) = v218;
    *(_OWORD *)(v109 + 56) = v263;
    *(_QWORD *)(v109 + 72) = v264;
    *(_OWORD *)(v109 + 80) = v261;
    *(_QWORD *)(v109 + 96) = v262;
    v113 = v241;
    *(_QWORD *)(v109 + 120) = v242;
    *(_OWORD *)(v109 + 104) = v113;
    *(_DWORD *)(v109 + 128) = -1;
    v114 = (uint64_t)v249;
    if (v249)
    {
      v115 = *(v249 - 4);
      v116 = *(v249 - 3) + 1;
      *(v249 - 3) = v116;
      v117 = (v115 + v116);
      v118 = *(unsigned int *)(v114 - 4);
      if (v118 <= 0x400)
        goto LABEL_138;
    }
    else
    {
      v116 = 1;
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v117 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
      v118 = MEMORY[0xFFFFFFFFFFFFFFFC];
      if (MEMORY[0xFFFFFFFFFFFFFFFC] <= 0x400u)
      {
LABEL_138:
        if (3 * v118 <= 4 * v117)
        {
          if (!(_DWORD)v118)
          {
            v119 = 8;
LABEL_144:
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::BindGroupLayout::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v249, v119);
            goto LABEL_145;
          }
LABEL_143:
          v119 = (_DWORD)v118 << (6 * v116 >= (2 * v118));
          goto LABEL_144;
        }
LABEL_145:

        a4 = v221;
        goto LABEL_146;
      }
    }
    if (v118 <= 2 * v117)
      goto LABEL_143;
    goto LABEL_145;
  }
  v64 = 0;
  v65 = 0;
  v66 = (unsigned int *)v223;
  v67 = (char *)&v265 + 4;
  v226 = v24;
  while (2)
  {
    if (((*((_DWORD *)v238 + 6) >> v65) & 1) == 0)
      goto LABEL_94;
    v68 = dword_18260EF68[v65];
    *(_QWORD *)&v261 = v64 + *v24;
    *(_QWORD *)&v241 = objc_msgSend(v235, "access");
    WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::add<MTLBindingAccess>(&v263, &v260, (uint64_t *)&v261, (uint64_t *)&v241);
    if (a3)
      v69 = v66;
    else
      v69 = v24;
    v70 = *v69;
    if ((a3 & 1) == 0)
      v70 += *((_DWORD *)&v269 + v65);
    v71 = (char *)&v245 + 8 * v68;
    *(_DWORD *)v71 = v70;
    v71[4] = 1;
    if (*((_DWORD *)v238 + 11))
    {
      v72 = *(&v271 + v65);
      *v67 = 1;
      *((_DWORD *)v67 - 1) = v72;
      *(&v271 + v65) = v72 + 4;
    }
    v73 = *((_DWORD *)v238 + 10);
    if (!v73)
    {
LABEL_109:
      if (*((_DWORD *)v238 + 18))
      {
        v80 = (*((_DWORD *)&v254 + v68) + 1);
        *((_DWORD *)&v254 + v68) = v80;
        v81 = *(unsigned int *)(a1 + 112);
        if (v80 > v81)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Sampler count(%u) exceeded max count per stage(%u)"), v80, v81);
          v141 = (void *)objc_claimAutoreleasedReturnValue();
          WebGPU::reportErrorInCreateBindGroupLayout(v141, a3, a1);
          goto LABEL_193;
        }
      }
      if (*((_DWORD *)v238 + 28))
      {
        if (*((_DWORD *)v238 + 29))
        {
          if (*((_DWORD *)v238 + 30))
          {
            v82 = (*((_DWORD *)&v250 + v68) + 1);
            *((_DWORD *)&v250 + v68) = v82;
            v83 = *(unsigned int *)(a1 + 120);
            if (v82 > v83)
            {
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Storage texture count(%u) exceeded max count per stage(%u)"), v82, v83);
              v141 = (void *)objc_claimAutoreleasedReturnValue();
              WebGPU::reportErrorInCreateBindGroupLayout(v141, a3, a1);
              goto LABEL_193;
            }
          }
        }
      }
      if (*((_DWORD *)v238 + 22))
      {
        if (*((_DWORD *)v238 + 23))
        {
          v84 = (*((_DWORD *)&v252 + v68) + 1);
          *((_DWORD *)&v252 + v68) = v84;
          v85 = *(unsigned int *)(a1 + 108);
          if (v84 > v85)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Texture count(%u) exceeded max count per stage(%u)"), v84, v85);
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            WebGPU::reportErrorInCreateBindGroupLayout(v141, a3, a1);
            goto LABEL_193;
          }
        }
      }
      v86 = v235;
      v87 = *(&v273 + v65);
      v88 = (void *)objc_msgSend(v86, "copy");
      objc_msgSend(v88, "setIndex:", v70);
      objc_msgSend(v87, "addObject:", v88);

      v89 = v233;
      if (v233)
      {
        v90 = v89;
        v91 = v87;
        v92 = (void *)objc_msgSend(v90, "copy");
        objc_msgSend(v92, "setIndex:", v70 + 1);
        objc_msgSend(v91, "addObject:", v92);

        v93 = v230;
        if (v230)
        {
          v94 = v93;
          v95 = v91;
          v96 = (void *)objc_msgSend(v94, "copy");
          objc_msgSend(v96, "setIndex:", v70 + 2);
          objc_msgSend(v95, "addObject:", v96);

          v97 = v227;
          if (v227)
          {
            v98 = v97;
            v99 = v95;
            v100 = (void *)objc_msgSend(v98, "copy");
            objc_msgSend(v100, "setIndex:", v70 + 3);
            objc_msgSend(v99, "addObject:", v100);

          }
        }
      }
      v24 = v226;
      if (v228 == 2147483646)
        *((_DWORD *)&v269 + v65) += 4;
LABEL_94:
      ++v65;
      v67 += 8;
      ++v66;
      v64 += 0x100000000;
      if (v65 == 3)
        goto LABEL_125;
      continue;
    }
    break;
  }
  v74 = *((_DWORD *)&v267 + v65) + 1;
  *((_DWORD *)&v267 + v65) = v74;
  v75 = (char *)&v243 + 8 * v68;
  *(_DWORD *)v75 = v74;
  v75[4] = 1;
  if (v73 == 1)
  {
    v76 = (*((_DWORD *)&v258 + v68) + 1);
    *((_DWORD *)&v258 + v68) = v76;
    v77 = *(unsigned int *)(a1 + 124);
    if (v76 > v77)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Uniform buffers count(%u) exceeded max count per stage(%u)"), v76, v77);
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      WebGPU::reportErrorInCreateBindGroupLayout(v141, a3, a1);
      goto LABEL_193;
    }
    goto LABEL_109;
  }
  if ((v73 & 0xFFFFFFFE) != 2)
    goto LABEL_109;
  v78 = (*((_DWORD *)&v256 + v68) + 1);
  *((_DWORD *)&v256 + v68) = v78;
  v79 = *(unsigned int *)(a1 + 116);
  if (v78 <= v79)
    goto LABEL_109;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Storage buffers count(%u) exceeded max count per stage(%u)"), v78, v79);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  WebGPU::reportErrorInCreateBindGroupLayout(v141, a3, a1);
LABEL_193:

  v142 = WTF::fastMalloc((WTF *)0xC0);
  WebGPU::BindGroupLayout::BindGroupLayout(v142, (unsigned __int8 **)a1);
  *(_QWORD *)v221 = v142;

LABEL_296:
  if (v247)
    WTF::fastFree((WTF *)(v247 - 16), v211);
  if (v248)
    WTF::fastFree((WTF *)(v248 - 16), v211);
  if (v249)
    WTF::fastFree((WTF *)(v249 - 4), v211);
  if (v229)
    WTF::fastFree(v229, v211);

  if (v260)
    WTF::fastFree((WTF *)(v260 - 16), v213);
}

void sub_18242BFA0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  WTF *v62;
  uint64_t v63;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  WTF::fastFree(v62, a2);
  if (a51)
  {
    WTF::fastFree((WTF *)(a51 - 16), v65);
    v66 = a52;
    if (!a52)
    {
LABEL_3:
      v67 = a53;
      if (!a53)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v66 = a52;
    if (!a52)
      goto LABEL_3;
  }
  WTF::fastFree((WTF *)(v66 - 16), v65);
  v67 = a53;
  if (!a53)
  {
LABEL_4:
    if (!a33)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_10:
  WTF::fastFree((WTF *)(v67 - 16), v65);
  if (!a33)
  {
LABEL_6:

    if (a62)
    {
      WTF::fastFree((WTF *)(a62 - 16), v68);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
LABEL_5:
  WTF::fastFree(a33, v65);
  goto LABEL_6;
}

uint64_t WebGPU::BindGroupLayout::createInvalid(WebGPU::BindGroupLayout *this, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0xC0);
  result = WebGPU::BindGroupLayout::BindGroupLayout(v4, a2);
  *(_QWORD *)this = v4;
  return result;
}

void sub_18242C3D8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebGPU::reportErrorInCreateBindGroupLayout(void *a1, char a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  v5 = a1;
  if ((a2 & 1) != 0)
    goto LABEL_13;
  MEMORY[0x186DAB230](&v15, v5);
  v6 = *(_QWORD *)(a3 + 32);
  v7 = 32 * *(unsigned int *)(a3 + 44);
  v8 = v6 + v7;
  while (v7)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v8 -= 32;
    v7 -= 32;
    if (!v9)
    {
      v10 = v6 + v7;
      if (!*(_BYTE *)(v10 + 16))
      {
        v11 = v15;
        v15 = 0;
        *(_DWORD *)v10 = 1;
        *(_QWORD *)(v10 + 8) = v11;
        *(_BYTE *)(v10 + 16) = 1;
      }
      goto LABEL_10;
    }
  }
  v12 = *(_QWORD *)(a3 + 24);
  if (v12)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v12 + 16))(v12, 1, &v15);
    v13 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
LABEL_10:
  v14 = v15;
  v15 = 0;
  if (!v14)
    goto LABEL_13;
  if (*v14 != 2)
  {
    *v14 -= 2;
LABEL_13:

    return;
  }
  WTF::StringImpl::destroy();

}

void sub_18242C4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

id WebGPU::createArgumentDescriptor(uint64_t a1, char a2)
{
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  if (*(_QWORD *)a1)
    return 0;
  v4 = (void *)objc_opt_new();
  v5 = v4;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == 2147483645)
  {
    v7 = 14;
  }
  else
  {
    if (v6 != 2147483646)
    {
      objc_msgSend(v4, "setDataType:", 60);
      v10 = 0;
      v8 = 0;
      v9 = v5;
      switch(v6)
      {
        case 0:
          goto LABEL_10;
        case 1:
        case 3:
          goto LABEL_8;
        case 2:
          if ((a2 & 1) != 0)
            goto LABEL_15;
          v8 = 1;
          goto LABEL_8;
        default:
          if (v6 != 0x7FFFFFFF)
            goto LABEL_9;
LABEL_15:

          return 0;
      }
    }
    v7 = 10;
  }
  objc_msgSend(v4, "setDataType:", v7);
  v8 = 0;
LABEL_8:
  objc_msgSend(v5, "setAccess:", v8);
LABEL_9:
  v9 = 0;
  v10 = v5;
LABEL_10:

  return v10;
}

void sub_18242C658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_OWORD *WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::add<MTLBindingAccess>(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16 == -1)
  {
LABEL_12:
    v20 = *a4;
    *v16 = v11;
    v16[1] = v20;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v21 = *a2;
      if (*a2)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v21 = *a2;
      if (*a2)
      {
LABEL_14:
        v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
        v23 = *(unsigned int *)(v21 - 4);
        if (v23 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v22 = *(unsigned int *)(v21 - 16);
    v23 = *(unsigned int *)(v21 - 4);
    if (v23 <= 0x400)
    {
LABEL_15:
      if (3 * v23 > 4 * v22)
      {
LABEL_26:
        *(_QWORD *)v7 = v16;
        *((_QWORD *)v7 + 1) = v21 + 16 * v23;
        *((_BYTE *)v7 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v23)
      {
        result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, v16);
        v16 = result;
        v21 = *a2;
        if (!*a2)
        {
LABEL_18:
          v23 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v23 = *(unsigned int *)(v21 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, (_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), v16);
      v16 = result;
      v21 = *a2;
      if (!*a2)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v23 > 2 * v22)
      goto LABEL_26;
    goto LABEL_24;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -2)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (_QWORD *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (*v16 == -1)
    {
      if (v18)
      {
        *v18 = xmmword_18260EFA0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v8 + 16 * v24;
  *((_BYTE *)v7 + 16) = 0;
  return result;
}

uint64_t ___ZN6WebGPU6Device21createBindGroupLayoutERK29WGPUBindGroupLayoutDescriptorb_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "index");
  if (v6 >= objc_msgSend(v5, "index"))
  {
    v8 = objc_msgSend(v4, "index");
    v7 = v8 != objc_msgSend(v5, "index");
  }
  else
  {
    v7 = -1;
  }

  return v7;
}

void sub_18242C8FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebGPU::BindGroupLayout::errorValidatingDynamicOffsets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  const char *v17;

  v4 = (*(_DWORD *)(a1 + 184) + *(_DWORD *)(a1 + 188));
  if (v4 == a3)
  {
    if (a3)
    {
      v5 = *(_QWORD *)(a4 + 72);
      if (v5)
      {
        v6 = 0;
        v7 = *(_QWORD *)(a1 + 104);
        v8 = *(_DWORD *)(v7 + 144);
        v9 = *(_DWORD *)(v7 + 148);
        v10 = *(unsigned int *)(a4 + 84);
        v11 = (_QWORD *)(v5 + 16);
        while ((_DWORD)v10 != (_DWORD)v6)
        {
          v12 = *(unsigned int *)(a2 + 4 * v6);
          if ((unint64_t)(*(v11 - 1) + v12) > *v11)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("dynamicBuffer(%zu): dynamicOffset(%u) + buffer->bindingSize(%llu) > buffer->bufferSize(%llu)"), v6, v12, *(v11 - 1), *v11);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            return v15;
          }
          v13 = *((_DWORD *)v11 - 4);
          if (v13 == 1)
            v14 = v8;
          else
            v14 = v9;
          if (v12 % v14)
          {
            v17 = "storage";
            if (v13 == 1)
              v17 = "uniform";
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("dynamicBuffer(%zu): dynamicOffset(%u) is not divisible by the %s buffer alignment(%u)"), v6, v12, v17, v14);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            return v15;
          }
          ++v6;
          v11 += 4;
          if (a3 == v6)
            goto LABEL_12;
        }
      }
      else
      {
        v10 = 0;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("dynamicBuffer(%zu) is nil"), v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
LABEL_12:
      v15 = 0;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("dynamicOffsetCount(%zu) in setBindGroupCall does not equal the dynamicBufferCount(%u) in bind group layout"), a3, v4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v15;
}

__CFString *WebGPU::BindGroupLayout::errorValidatingBindGroupCompatibility(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  __CFString *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v16;
  _QWORD v17[5];
  _QWORD *v18;

  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  v5 = *(_QWORD *)(a2 + 112);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  if (v4 != v5)
    return CFSTR("Auto-generated layouts mismatch");
  v7 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      goto LABEL_31;
    }
    v8 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    memcpy(v8, *(const void **)(a2 + 56), 8 * *(unsigned int *)(a2 + 68));
    v10 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v10 == (_DWORD)v7)
    {
      v11 = 0;
      v12 = CFSTR("entries are not equal");
      while (1)
      {
        if (v11 >= *(unsigned int *)(a1 + 68))
          goto LABEL_29;
        v13 = *(_DWORD **)(*(_QWORD *)(a1 + 56) + 8 * v11);
        v14 = (_DWORD *)*((_QWORD *)v8 + v11);
        if (!v13 || v14 == 0)
          break;
        if (*v13 != *v14 || v13[1] != v14[1])
          goto LABEL_24;
        v17[0] = v14 + 2;
        v17[1] = v14 + 2;
        v17[2] = v14 + 2;
        v17[3] = v14 + 2;
        v17[4] = v14 + 2;
        v16 = v13[10];
        if ((_DWORD)v16 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
LABEL_29:
          __break(0xC471u);
          JUMPOUT(0x18242CC1CLL);
        }
        v18 = v17;
        if ((((uint64_t (*)(_QWORD **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU15BindGroupLayout19equalBindingEntriesERKNS_7variantIJ23WGPUBufferBindingLayout24WGPUSamplerBindingLayout24WGPUTextureBindingLayout31WGPUStorageTextureBindingLayout32WGPUExternalTextureBindingLayoutEEESI_E3__0JZNS9_19equalBindingEntriesESI_SI_E3__1ZNS9_19equalBindingEntriesESI_SI_E3__2ZNS9_19equalBindingEntriesESI_SI_E3__3ZNS9_19equalBindingEntriesESI_SI_E3__4EEEEEJRKNS0_6__implIJSB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v18, v13 + 2) & 1) == 0)goto LABEL_24;
        if (v10 == ++v11)
        {
          v12 = 0;
          goto LABEL_24;
        }
      }
      __break(0xC471u);
LABEL_31:
      JUMPOUT(0x18242CC0CLL);
    }
    goto LABEL_23;
  }
  v8 = 0;
  v12 = 0;
  v10 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v10)
  {
LABEL_23:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("entries.size()(%zu) > otherEntries.size()(%zu)"), v10, v7);
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v8)
LABEL_24:
      WTF::fastFree((WTF *)v8, v9);
  }
  return v12;
}

void sub_18242CC28(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

unsigned int *WebGPU::BindGroupLayout::sortedEntries@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;

  v2 = this[17];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v2;
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = (uint64_t)this;
      v5 = (void *)WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = v5;
      return (unsigned int *)memcpy(v5, *(const void **)(v4 + 56), 8 * *(unsigned int *)(v4 + 68));
    }
  }
  return this;
}

uint64_t WebGPU::BindGroupLayout::BindGroupLayout(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_5:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_18242CD7C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  WTF *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v5 = *(WTF **)(v2 + 56);
  if (v5)
  {
    *(_QWORD *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(_QWORD *)(v2 + 48);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);

  v8 = *(_QWORD *)(v2 + 16);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v7);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v7);
  _Unwind_Resume(a1);
}

void WebGPU::BindGroupLayout::~BindGroupLayout(WebGPU::BindGroupLayout *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;

  v3 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
  {
LABEL_4:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 13, a2);
    v7 = (WTF *)*((_QWORD *)this + 7);
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  atomic_store(1u, v3);
  WTF::fastFree((WTF *)v3, a2);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 13, v15);
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
LABEL_5:
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, v6);
  }
LABEL_6:
  v8 = *((_QWORD *)this + 6);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v6);

  v10 = *((_QWORD *)this + 2);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), v9);
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v9);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebGPU::BindGroupLayout::argumentBufferIndexForEntryIndex(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int *v17;
  int v18;
  int v19;

  if (a3 != 3)
  {
    v12 = *(_QWORD *)(result + 48);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      v16 = v13 & (v15 ^ HIWORD(v15));
      v17 = (int *)(v12 + 136 * v16);
      v18 = *v17;
      if (*v17 == a2)
      {
LABEL_15:
        if (v17 != (int *)(v12 + 136 * *(unsigned int *)(v12 - 4)))
        {
          if (a3 >= 3)
          {
            __break(1u);
          }
          else if ((*(_QWORD *)&v17[2 * a3 + 14] & 0xFF00000000) != 0)
          {
            return *(_QWORD *)&v17[2 * a3 + 14];
          }
          else
          {
            return 0x7FFFFFFFFFFFFFFFLL;
          }
          return result;
        }
      }
      else
      {
        v19 = 1;
        while (v18 != -1)
        {
          v16 = (v16 + v19) & v13;
          v17 = (int *)(v12 + 136 * v16);
          v18 = *v17;
          ++v19;
          if (*v17 == a2)
            goto LABEL_15;
        }
      }
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return 0x7FFFFFFFFFFFFFFFLL;
  v4 = a2 | 0x300000000;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = (v4 + ~((unint64_t)a2 << 32)) ^ ((v4 + ~((unint64_t)a2 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(_QWORD *)(v3 + 16 * v9);
  if (v10 == v4)
  {
LABEL_7:
    if (v9 == *(_DWORD *)(v3 - 4))
      return 0x7FFFFFFFFFFFFFFFLL;
    else
      return 0;
  }
  else
  {
    v11 = 1;
    while (v10 != -1)
    {
      v9 = ((_DWORD)v9 + v11) & v5;
      v10 = *(_QWORD *)(v3 + 16 * v9);
      ++v11;
      if (v10 == v4)
        goto LABEL_7;
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

_DWORD *wgpuBindGroupLayoutReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::BindGroupLayout *wgpuBindGroupLayoutRelease(WebGPU::BindGroupLayout *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::BindGroupLayout::~BindGroupLayout(result, a2);
    return (WebGPU::BindGroupLayout *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuBindGroupLayoutSetLabel(id *a1, char *__s)
{
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  _DWORD *result;
  _DWORD *v7;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v7)
  {
    *v7 += 2;
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else
  {
    v3 = &stru_1E0FD9588;
  }
  objc_msgSend(a1[3], "setLabel:", v3);

  if (v7)
    v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E0FD9588;
  objc_msgSend(a1[4], "setLabel:", v4);

  if (v7)
    v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E0FD9588;
  objc_msgSend(a1[5], "setLabel:", v5);

  if (!v7)
  {
LABEL_14:
    result = v7;
    if (!v7)
      return result;
    goto LABEL_17;
  }
  if (*v7 != 2)
  {
    *v7 -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy();
  result = v7;
LABEL_17:
  if (*result == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *result -= 2;
  return result;
}

void sub_18242D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  _DWORD *v10;
  void *v11;

  if (v10)
  {
    if (*v10 == 2)
      WTF::StringImpl::destroy();
    else
      *v10 -= 2;
  }
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

double std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4, double result)
{
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 *v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  unsigned int v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unsigned int v151;
  unsigned int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t v182;
  __int128 *v183;
  __int128 *v184;
  unsigned int v185;
  __int128 *v186;
  unsigned int v187;
  __int128 *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  unint64_t v195;
  unsigned int v196;
  __int128 *v197;
  unsigned int v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  BOOL v205;
  uint64_t v206;
  unint64_t v207;
  unsigned int v208;
  unint64_t v209;
  unsigned int v210;
  __int128 *v211;
  __int128 *v212;
  unsigned int v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  unint64_t v220;
  unsigned int v221;
  __int128 *v222;
  unsigned int v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  unsigned int v236;
  unsigned int v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 *v244;
  __int128 *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  BOOL v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  __int128 *v273;
  unsigned int v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  uint64_t v278;
  _OWORD *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  int64_t v284;
  int64_t v285;
  BOOL v286;
  uint64_t v287;
  unint64_t v288;
  unsigned int v289;
  unsigned int v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t v293;
  _OWORD *v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  _OWORD *v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  _OWORD *v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unsigned int v350;
  uint64_t v351;
  __int128 v352;
  __int128 v353;
  uint64_t v354;
  __int128 *v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 *v361;
  unsigned int v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  unsigned int *v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  int v395;
  int v396;
  int v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  int v670;
  int v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  int v675;
  __int128 v676;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  __int128 *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  int v230;
  __int128 v231;

  v4 = (a2 - a1) >> 7;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 120) < *(_DWORD *)(a1 + 8))
      {
        v176 = *(_OWORD *)(a1 + 64);
        v190 = *(_OWORD *)(a1 + 80);
        v204 = *(_OWORD *)(a1 + 96);
        v218 = *(_OWORD *)(a1 + 112);
        v120 = *(_OWORD *)a1;
        v134 = *(_OWORD *)(a1 + 16);
        v148 = *(_OWORD *)(a1 + 32);
        v162 = *(_OWORD *)(a1 + 48);
        v6 = *(_OWORD *)(a2 - 64);
        v7 = *(_OWORD *)(a2 - 48);
        v8 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v8;
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 80) = v7;
        v9 = *(_OWORD *)(a2 - 128);
        v10 = *(_OWORD *)(a2 - 112);
        v11 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)a1 = v9;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 96) = v148;
        *(_OWORD *)(a2 - 80) = v162;
        *(_OWORD *)(a2 - 128) = v120;
        *(_OWORD *)(a2 - 112) = v134;
        *(_OWORD *)(a2 - 64) = v176;
        *(_OWORD *)(a2 - 48) = v190;
        *(_OWORD *)(a2 - 32) = v204;
        *(_OWORD *)(a2 - 16) = v218;
      }
      return result;
    case 3:
      v23 = (__int128 *)(a1 + 128);
      v24 = (__int128 *)(a2 - 128);
      v25 = *(_DWORD *)(a1 + 136);
      v26 = *(_DWORD *)(a2 - 120);
      if (v25 >= *(_DWORD *)(a1 + 8))
      {
        if (v26 < v25)
        {
          v185 = *(_OWORD *)(a1 + 192);
          v199 = *(_OWORD *)(a1 + 208);
          v213 = *(_OWORD *)(a1 + 224);
          v227 = *(_OWORD *)(a1 + 240);
          v129 = *v23;
          v143 = *(_OWORD *)(a1 + 144);
          v157 = *(_OWORD *)(a1 + 160);
          v171 = *(_OWORD *)(a1 + 176);
          v72 = *(_OWORD *)(a2 - 64);
          v73 = *(_OWORD *)(a2 - 48);
          v74 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 240) = v74;
          *(_OWORD *)(a1 + 192) = v72;
          *(_OWORD *)(a1 + 208) = v73;
          v75 = *v24;
          v76 = *(_OWORD *)(a2 - 112);
          v77 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(a1 + 176) = v77;
          *v23 = v75;
          *(_OWORD *)(a1 + 144) = v76;
          *(_OWORD *)(a2 - 96) = v157;
          *(_OWORD *)(a2 - 80) = v171;
          *v24 = v129;
          *(_OWORD *)(a2 - 112) = v143;
          *(_OWORD *)(a2 - 32) = v213;
          *(_OWORD *)(a2 - 16) = v227;
          *(_OWORD *)(a2 - 64) = v185;
          *(_OWORD *)(a2 - 48) = v199;
          if (*(_DWORD *)(a1 + 136) < *(_DWORD *)(a1 + 8))
          {
            v186 = *(_OWORD *)(a1 + 64);
            v200 = *(_OWORD *)(a1 + 80);
            v214 = *(_OWORD *)(a1 + 96);
            v228 = *(_OWORD *)(a1 + 112);
            v130 = *(_OWORD *)a1;
            v144 = *(_OWORD *)(a1 + 16);
            v158 = *(_OWORD *)(a1 + 32);
            v172 = *(_OWORD *)(a1 + 48);
            v78 = *v23;
            v79 = *(_OWORD *)(a1 + 144);
            v80 = *(_OWORD *)(a1 + 176);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
            *(_OWORD *)(a1 + 48) = v80;
            *(_OWORD *)a1 = v78;
            *(_OWORD *)(a1 + 16) = v79;
            v81 = *(_OWORD *)(a1 + 192);
            v82 = *(_OWORD *)(a1 + 208);
            v83 = *(_OWORD *)(a1 + 240);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
            *(_OWORD *)(a1 + 112) = v83;
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 80) = v82;
            *(_OWORD *)(a1 + 160) = v158;
            *(_OWORD *)(a1 + 176) = v172;
            *v23 = v130;
            *(_OWORD *)(a1 + 144) = v144;
            *(_OWORD *)(a1 + 224) = v214;
            *(_OWORD *)(a1 + 240) = v228;
            *(_OWORD *)(a1 + 192) = v186;
            *(_OWORD *)(a1 + 208) = v200;
          }
        }
      }
      else
      {
        if (v26 >= v25)
        {
          v189 = *(_OWORD *)(a1 + 64);
          v203 = *(_OWORD *)(a1 + 80);
          v217 = *(_OWORD *)(a1 + 96);
          v231 = *(_OWORD *)(a1 + 112);
          v133 = *(_OWORD *)a1;
          v147 = *(_OWORD *)(a1 + 16);
          v161 = *(_OWORD *)(a1 + 32);
          v175 = *(_OWORD *)(a1 + 48);
          v108 = *v23;
          v109 = *(_OWORD *)(a1 + 144);
          v110 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 48) = v110;
          *(_OWORD *)a1 = v108;
          *(_OWORD *)(a1 + 16) = v109;
          v111 = *(_OWORD *)(a1 + 192);
          v112 = *(_OWORD *)(a1 + 208);
          v113 = *(_OWORD *)(a1 + 240);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
          *(_OWORD *)(a1 + 112) = v113;
          *(_OWORD *)(a1 + 64) = v111;
          *(_OWORD *)(a1 + 80) = v112;
          *(_OWORD *)(a1 + 160) = v161;
          *(_OWORD *)(a1 + 176) = v175;
          *v23 = v133;
          *(_OWORD *)(a1 + 144) = v147;
          *(_OWORD *)(a1 + 224) = v217;
          *(_OWORD *)(a1 + 240) = v231;
          *(_OWORD *)(a1 + 192) = v189;
          *(_OWORD *)(a1 + 208) = v203;
          if (*(_DWORD *)(a2 - 120) >= *(_DWORD *)(a1 + 136))
            return result;
          v178 = *(_OWORD *)(a1 + 192);
          v192 = *(_OWORD *)(a1 + 208);
          v206 = *(_OWORD *)(a1 + 224);
          v220 = *(_OWORD *)(a1 + 240);
          v122 = *v23;
          v136 = *(_OWORD *)(a1 + 144);
          v150 = *(_OWORD *)(a1 + 160);
          v164 = *(_OWORD *)(a1 + 176);
          v114 = *(_OWORD *)(a2 - 64);
          v115 = *(_OWORD *)(a2 - 48);
          v116 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 240) = v116;
          *(_OWORD *)(a1 + 192) = v114;
          *(_OWORD *)(a1 + 208) = v115;
          v117 = *v24;
          v118 = *(_OWORD *)(a2 - 112);
          v119 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(a1 + 176) = v119;
          *v23 = v117;
          *(_OWORD *)(a1 + 144) = v118;
        }
        else
        {
          v178 = *(_OWORD *)(a1 + 64);
          v192 = *(_OWORD *)(a1 + 80);
          v206 = *(_OWORD *)(a1 + 96);
          v220 = *(_OWORD *)(a1 + 112);
          v122 = *(_OWORD *)a1;
          v136 = *(_OWORD *)(a1 + 16);
          v150 = *(_OWORD *)(a1 + 32);
          v164 = *(_OWORD *)(a1 + 48);
          v27 = *(_OWORD *)(a2 - 64);
          v28 = *(_OWORD *)(a2 - 48);
          v29 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 112) = v29;
          *(_OWORD *)(a1 + 64) = v27;
          *(_OWORD *)(a1 + 80) = v28;
          v30 = *v24;
          v31 = *(_OWORD *)(a2 - 112);
          v32 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(a1 + 48) = v32;
          *(_OWORD *)a1 = v30;
          *(_OWORD *)(a1 + 16) = v31;
        }
        *(_OWORD *)(a2 - 96) = v150;
        *(_OWORD *)(a2 - 80) = v164;
        *v24 = v122;
        *(_OWORD *)(a2 - 112) = v136;
        *(_OWORD *)(a2 - 32) = v206;
        *(_OWORD *)(a2 - 16) = v220;
        *(_OWORD *)(a2 - 64) = v178;
        *(_OWORD *)(a2 - 48) = v192;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>((__int128 *)a1, (__int128 *)(a1 + 128), (__int128 *)(a1 + 256), (__int128 *)(a2 - 128));
      return 1;
    case 5:
      v33 = (__int128 *)(a1 + 128);
      v34 = (__int128 *)(a1 + 256);
      v35 = (__int128 *)(a1 + 384);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>((__int128 *)a1, (__int128 *)(a1 + 128), (__int128 *)(a1 + 256), (__int128 *)(a1 + 384));
      if (*(_DWORD *)(a2 - 120) >= *(_DWORD *)(a1 + 392))
        return 1;
      v179 = *(_OWORD *)(a1 + 448);
      v193 = *(_OWORD *)(a1 + 464);
      v207 = *(_OWORD *)(a1 + 480);
      v221 = *(_OWORD *)(a1 + 496);
      v123 = *v35;
      v137 = *(_OWORD *)(a1 + 400);
      v151 = *(_OWORD *)(a1 + 416);
      v165 = *(_OWORD *)(a1 + 432);
      v36 = *(_OWORD *)(a2 - 64);
      v37 = *(_OWORD *)(a2 - 48);
      v38 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 496) = v38;
      *(_OWORD *)(a1 + 448) = v36;
      *(_OWORD *)(a1 + 464) = v37;
      v39 = *(_OWORD *)(a2 - 128);
      v40 = *(_OWORD *)(a2 - 112);
      v41 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 432) = v41;
      *v35 = v39;
      *(_OWORD *)(a1 + 400) = v40;
      *(_OWORD *)(a2 - 96) = v151;
      *(_OWORD *)(a2 - 80) = v165;
      *(_OWORD *)(a2 - 128) = v123;
      *(_OWORD *)(a2 - 112) = v137;
      *(_OWORD *)(a2 - 64) = v179;
      *(_OWORD *)(a2 - 48) = v193;
      *(_OWORD *)(a2 - 32) = v207;
      *(_OWORD *)(a2 - 16) = v221;
      if (*(_DWORD *)(a1 + 392) >= *(_DWORD *)(a1 + 264))
        return 1;
      v180 = *(_OWORD *)(a1 + 320);
      v194 = *(_OWORD *)(a1 + 336);
      v208 = *(_OWORD *)(a1 + 352);
      v222 = *(_OWORD *)(a1 + 368);
      v124 = *v34;
      v138 = *(_OWORD *)(a1 + 272);
      v152 = *(_OWORD *)(a1 + 288);
      v166 = *(_OWORD *)(a1 + 304);
      v42 = *v35;
      v43 = *(_OWORD *)(a1 + 400);
      v44 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 304) = v44;
      *v34 = v42;
      *(_OWORD *)(a1 + 272) = v43;
      v45 = *(_OWORD *)(a1 + 448);
      v46 = *(_OWORD *)(a1 + 464);
      v47 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 368) = v47;
      *(_OWORD *)(a1 + 320) = v45;
      *(_OWORD *)(a1 + 336) = v46;
      *(_OWORD *)(a1 + 416) = v152;
      *(_OWORD *)(a1 + 432) = v166;
      *v35 = v124;
      *(_OWORD *)(a1 + 400) = v138;
      *(_OWORD *)(a1 + 480) = v208;
      *(_OWORD *)(a1 + 496) = v222;
      *(_OWORD *)(a1 + 448) = v180;
      *(_OWORD *)(a1 + 464) = v194;
      if (*(_DWORD *)(a1 + 264) >= *(_DWORD *)(a1 + 136))
        return 1;
      v181 = *(_OWORD *)(a1 + 192);
      v195 = *(_OWORD *)(a1 + 208);
      v209 = *(_OWORD *)(a1 + 224);
      v223 = *(_OWORD *)(a1 + 240);
      v125 = *v33;
      v139 = *(_OWORD *)(a1 + 144);
      v153 = *(_OWORD *)(a1 + 160);
      v167 = *(_OWORD *)(a1 + 176);
      v48 = *v34;
      v49 = *(_OWORD *)(a1 + 272);
      v50 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 176) = v50;
      *v33 = v48;
      *(_OWORD *)(a1 + 144) = v49;
      v51 = *(_OWORD *)(a1 + 320);
      v52 = *(_OWORD *)(a1 + 336);
      v53 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 240) = v53;
      *(_OWORD *)(a1 + 192) = v51;
      *(_OWORD *)(a1 + 208) = v52;
      *(_OWORD *)(a1 + 288) = v153;
      *(_OWORD *)(a1 + 304) = v167;
      *v34 = v125;
      *(_OWORD *)(a1 + 272) = v139;
      *(_OWORD *)(a1 + 352) = v209;
      *(_OWORD *)(a1 + 368) = v223;
      *(_OWORD *)(a1 + 320) = v181;
      *(_OWORD *)(a1 + 336) = v195;
      if (*(_DWORD *)(a1 + 136) >= *(_DWORD *)(a1 + 8))
        return 1;
      v182 = *(_OWORD *)(a1 + 64);
      v196 = *(_OWORD *)(a1 + 80);
      v210 = *(_OWORD *)(a1 + 96);
      v224 = *(_OWORD *)(a1 + 112);
      v126 = *(_OWORD *)a1;
      v140 = *(_OWORD *)(a1 + 16);
      v154 = *(_OWORD *)(a1 + 32);
      v168 = *(_OWORD *)(a1 + 48);
      v54 = *v33;
      v55 = *(_OWORD *)(a1 + 144);
      v56 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 48) = v56;
      *(_OWORD *)a1 = v54;
      *(_OWORD *)(a1 + 16) = v55;
      v57 = *(_OWORD *)(a1 + 192);
      v58 = *(_OWORD *)(a1 + 208);
      v59 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 112) = v59;
      *(_OWORD *)(a1 + 64) = v57;
      *(_OWORD *)(a1 + 80) = v58;
      *(_OWORD *)(a1 + 160) = v154;
      *(_OWORD *)(a1 + 176) = v168;
      *v33 = v126;
      *(_OWORD *)(a1 + 144) = v140;
      *(_OWORD *)(a1 + 224) = v210;
      *(_OWORD *)(a1 + 240) = v224;
      result = 1;
      *(_OWORD *)(a1 + 192) = v182;
      *(_OWORD *)(a1 + 208) = v196;
      return result;
    default:
      v12 = a1 + 256;
      v13 = (__int128 *)(a1 + 128);
      v14 = *(_DWORD *)(a1 + 136);
      v15 = *(_DWORD *)(a1 + 8);
      v16 = *(_DWORD *)(a1 + 264);
      if (v14 >= v15)
      {
        if (v16 < v14)
        {
          v183 = *(_OWORD *)(a1 + 192);
          v197 = *(_OWORD *)(a1 + 208);
          v211 = *(_OWORD *)(a1 + 224);
          v225 = *(_OWORD *)(a1 + 240);
          v127 = *v13;
          v141 = *(_OWORD *)(a1 + 144);
          v155 = *(_OWORD *)(a1 + 160);
          v169 = *(_OWORD *)(a1 + 176);
          v60 = *(_OWORD *)v12;
          v61 = *(_OWORD *)(a1 + 272);
          v62 = *(_OWORD *)(a1 + 304);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 288);
          *(_OWORD *)(a1 + 176) = v62;
          *v13 = v60;
          *(_OWORD *)(a1 + 144) = v61;
          v63 = *(_OWORD *)(a1 + 320);
          v64 = *(_OWORD *)(a1 + 336);
          v65 = *(_OWORD *)(a1 + 368);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 352);
          *(_OWORD *)(a1 + 240) = v65;
          *(_OWORD *)(a1 + 192) = v63;
          *(_OWORD *)(a1 + 208) = v64;
          *(_OWORD *)(a1 + 288) = v155;
          *(_OWORD *)(a1 + 304) = v169;
          *(_OWORD *)v12 = v127;
          *(_OWORD *)(a1 + 272) = v141;
          *(_OWORD *)(a1 + 352) = v211;
          *(_OWORD *)(a1 + 368) = v225;
          *(_OWORD *)(a1 + 320) = v183;
          *(_OWORD *)(a1 + 336) = v197;
          if (*(_DWORD *)(a1 + 136) < v15)
          {
            v184 = *(_OWORD *)(a1 + 64);
            v198 = *(_OWORD *)(a1 + 80);
            v212 = *(_OWORD *)(a1 + 96);
            v226 = *(_OWORD *)(a1 + 112);
            v128 = *(_OWORD *)a1;
            v142 = *(_OWORD *)(a1 + 16);
            v156 = *(_OWORD *)(a1 + 32);
            v170 = *(_OWORD *)(a1 + 48);
            v66 = *v13;
            v67 = *(_OWORD *)(a1 + 144);
            v68 = *(_OWORD *)(a1 + 176);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
            *(_OWORD *)(a1 + 48) = v68;
            *(_OWORD *)a1 = v66;
            *(_OWORD *)(a1 + 16) = v67;
            v69 = *(_OWORD *)(a1 + 192);
            v70 = *(_OWORD *)(a1 + 208);
            v71 = *(_OWORD *)(a1 + 240);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
            *(_OWORD *)(a1 + 112) = v71;
            *(_OWORD *)(a1 + 64) = v69;
            *(_OWORD *)(a1 + 80) = v70;
            *(_OWORD *)(a1 + 160) = v156;
            *(_OWORD *)(a1 + 176) = v170;
            *v13 = v128;
            *(_OWORD *)(a1 + 144) = v142;
            *(_OWORD *)(a1 + 224) = v212;
            *(_OWORD *)(a1 + 240) = v226;
            *(_OWORD *)(a1 + 192) = v184;
            *(_OWORD *)(a1 + 208) = v198;
          }
        }
      }
      else
      {
        if (v16 >= v14)
        {
          v187 = *(_OWORD *)(a1 + 64);
          v201 = *(_OWORD *)(a1 + 80);
          v215 = *(_OWORD *)(a1 + 96);
          v229 = *(_OWORD *)(a1 + 112);
          v131 = *(_OWORD *)a1;
          v145 = *(_OWORD *)(a1 + 16);
          v159 = *(_OWORD *)(a1 + 32);
          v173 = *(_OWORD *)(a1 + 48);
          v84 = *v13;
          v85 = *(_OWORD *)(a1 + 144);
          v86 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 48) = v86;
          *(_OWORD *)a1 = v84;
          *(_OWORD *)(a1 + 16) = v85;
          v87 = *(_OWORD *)(a1 + 192);
          v88 = *(_OWORD *)(a1 + 208);
          v89 = *(_OWORD *)(a1 + 240);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
          *(_OWORD *)(a1 + 112) = v89;
          *(_OWORD *)(a1 + 64) = v87;
          *(_OWORD *)(a1 + 80) = v88;
          *(_OWORD *)(a1 + 160) = v159;
          *(_OWORD *)(a1 + 176) = v173;
          *v13 = v131;
          *(_OWORD *)(a1 + 144) = v145;
          *(_OWORD *)(a1 + 224) = v215;
          *(_OWORD *)(a1 + 240) = v229;
          *(_OWORD *)(a1 + 192) = v187;
          *(_OWORD *)(a1 + 208) = v201;
          if (v16 >= *(_DWORD *)(a1 + 136))
            goto LABEL_25;
          v177 = *(_OWORD *)(a1 + 192);
          v191 = *(_OWORD *)(a1 + 208);
          v205 = *(_OWORD *)(a1 + 224);
          v219 = *(_OWORD *)(a1 + 240);
          v121 = *v13;
          v135 = *(_OWORD *)(a1 + 144);
          v149 = *(_OWORD *)(a1 + 160);
          v163 = *(_OWORD *)(a1 + 176);
          v90 = *(_OWORD *)v12;
          v91 = *(_OWORD *)(a1 + 272);
          v92 = *(_OWORD *)(a1 + 304);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 288);
          *(_OWORD *)(a1 + 176) = v92;
          *v13 = v90;
          *(_OWORD *)(a1 + 144) = v91;
          v93 = *(_OWORD *)(a1 + 320);
          v94 = *(_OWORD *)(a1 + 336);
          v95 = *(_OWORD *)(a1 + 368);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 352);
          *(_OWORD *)(a1 + 240) = v95;
          *(_OWORD *)(a1 + 192) = v93;
          *(_OWORD *)(a1 + 208) = v94;
        }
        else
        {
          v177 = *(_OWORD *)(a1 + 64);
          v191 = *(_OWORD *)(a1 + 80);
          v205 = *(_OWORD *)(a1 + 96);
          v219 = *(_OWORD *)(a1 + 112);
          v121 = *(_OWORD *)a1;
          v135 = *(_OWORD *)(a1 + 16);
          v149 = *(_OWORD *)(a1 + 32);
          v163 = *(_OWORD *)(a1 + 48);
          v17 = *(_OWORD *)v12;
          v18 = *(_OWORD *)(a1 + 272);
          v19 = *(_OWORD *)(a1 + 304);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 288);
          *(_OWORD *)(a1 + 48) = v19;
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(a1 + 16) = v18;
          v20 = *(_OWORD *)(a1 + 320);
          v21 = *(_OWORD *)(a1 + 336);
          v22 = *(_OWORD *)(a1 + 368);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 352);
          *(_OWORD *)(a1 + 112) = v22;
          *(_OWORD *)(a1 + 64) = v20;
          *(_OWORD *)(a1 + 80) = v21;
        }
        *(_OWORD *)(a1 + 288) = v149;
        *(_OWORD *)(a1 + 304) = v163;
        *(_OWORD *)v12 = v121;
        *(_OWORD *)(a1 + 272) = v135;
        *(_OWORD *)(a1 + 352) = v205;
        *(_OWORD *)(a1 + 368) = v219;
        *(_OWORD *)(a1 + 320) = v177;
        *(_OWORD *)(a1 + 336) = v191;
      }
LABEL_25:
      v96 = a1 + 384;
      if (a1 + 384 == a2)
        return 1;
      v97 = 0;
      v98 = 0;
      break;
  }
  while (1)
  {
    v100 = *(_DWORD *)(v96 + 8);
    if (v100 < *(_DWORD *)(v12 + 8))
    {
      v101 = *(_QWORD *)v96;
      v188 = *(_OWORD *)(v96 + 76);
      v202 = *(_OWORD *)(v96 + 92);
      v216 = *(_OWORD *)(v96 + 108);
      v230 = *(_DWORD *)(v96 + 124);
      v132 = *(_OWORD *)(v96 + 12);
      v146 = *(_OWORD *)(v96 + 28);
      v102 = v97;
      v160 = *(_OWORD *)(v96 + 44);
      v174 = *(_OWORD *)(v96 + 60);
      do
      {
        v103 = a1 + v102;
        v104 = *(_OWORD *)(a1 + v102 + 336);
        *(_OWORD *)(v103 + 448) = *(_OWORD *)(a1 + v102 + 320);
        *(_OWORD *)(v103 + 464) = v104;
        v105 = *(_OWORD *)(a1 + v102 + 368);
        *(_OWORD *)(v103 + 480) = *(_OWORD *)(a1 + v102 + 352);
        *(_OWORD *)(v103 + 496) = v105;
        v106 = *(_OWORD *)(a1 + v102 + 272);
        *(_OWORD *)(v103 + 384) = *(_OWORD *)(a1 + v102 + 256);
        *(_OWORD *)(v103 + 400) = v106;
        v107 = *(_OWORD *)(a1 + v102 + 304);
        *(_OWORD *)(v103 + 416) = *(_OWORD *)(a1 + v102 + 288);
        *(_OWORD *)(v103 + 432) = v107;
        if (v102 == -256)
        {
          v99 = a1;
          goto LABEL_28;
        }
        v102 -= 128;
      }
      while (v100 < *(_DWORD *)(v103 + 136));
      v99 = a1 + v102 + 384;
LABEL_28:
      *(_OWORD *)(v99 + 76) = v188;
      *(_OWORD *)(v99 + 92) = v202;
      *(_OWORD *)(v99 + 108) = v216;
      *(_OWORD *)(v99 + 12) = v132;
      *(_OWORD *)(v99 + 28) = v146;
      *(_OWORD *)(v99 + 44) = v160;
      *(_QWORD *)v99 = v101;
      *(_DWORD *)(v99 + 8) = v100;
      *(_DWORD *)(v99 + 124) = v230;
      ++v98;
      *(_OWORD *)(v99 + 60) = v174;
      if (v98 == 8)
        return v96 + 128 == a2;
    }
    v12 = v96;
    v97 += 128;
    v96 += 128;
    if (v96 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;

  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_DWORD *)a3 + 2);
  if (v4 >= *((_DWORD *)a1 + 2))
  {
    if (v5 < v4)
    {
      v84 = a2[4];
      v91 = (__n128)a2[5];
      v98 = a2[6];
      v105 = a2[7];
      v56 = *a2;
      v63 = a2[1];
      v70 = a2[2];
      v77 = a2[3];
      v12 = a3[4];
      v13 = a3[5];
      v14 = a3[7];
      a2[6] = a3[6];
      a2[7] = v14;
      a2[4] = v12;
      a2[5] = v13;
      v15 = *a3;
      v16 = a3[1];
      v17 = a3[3];
      a2[2] = a3[2];
      a2[3] = v17;
      *a2 = v15;
      a2[1] = v16;
      a3[2] = v70;
      a3[3] = v77;
      *a3 = v56;
      a3[1] = v63;
      a3[6] = v98;
      a3[7] = v105;
      result = v91;
      a3[4] = v84;
      a3[5] = (__int128)v91;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        v85 = a1[4];
        v92 = (__n128)a1[5];
        v99 = a1[6];
        v106 = a1[7];
        v57 = *a1;
        v64 = a1[1];
        v71 = a1[2];
        v78 = a1[3];
        v19 = a2[4];
        v20 = a2[5];
        v21 = a2[7];
        a1[6] = a2[6];
        a1[7] = v21;
        a1[4] = v19;
        a1[5] = v20;
        v22 = *a2;
        v23 = a2[1];
        v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        *a1 = v22;
        a1[1] = v23;
        a2[2] = v71;
        a2[3] = v78;
        *a2 = v57;
        a2[1] = v64;
        a2[6] = v99;
        a2[7] = v106;
        result = v92;
        a2[4] = v85;
        a2[5] = (__int128)v92;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      v83 = a1[4];
      v90 = (__n128)a1[5];
      v97 = a1[6];
      v104 = a1[7];
      v55 = *a1;
      v62 = a1[1];
      v69 = a1[2];
      v76 = a1[3];
      v6 = a3[4];
      v7 = a3[5];
      v8 = a3[7];
      a1[6] = a3[6];
      a1[7] = v8;
      a1[4] = v6;
      a1[5] = v7;
      v9 = *a3;
      v10 = a3[1];
      v11 = a3[3];
      a1[2] = a3[2];
      a1[3] = v11;
      *a1 = v9;
      a1[1] = v10;
LABEL_9:
      a3[2] = v69;
      a3[3] = v76;
      *a3 = v55;
      a3[1] = v62;
      a3[6] = v97;
      a3[7] = v104;
      result = v90;
      a3[4] = v83;
      a3[5] = (__int128)v90;
      goto LABEL_10;
    }
    v86 = a1[4];
    v93 = (__n128)a1[5];
    v100 = a1[6];
    v107 = a1[7];
    v58 = *a1;
    v65 = a1[1];
    v72 = a1[2];
    v79 = a1[3];
    v25 = a2[4];
    v26 = a2[5];
    v27 = a2[7];
    a1[6] = a2[6];
    a1[7] = v27;
    a1[4] = v25;
    a1[5] = v26;
    v28 = *a2;
    v29 = a2[1];
    v30 = a2[3];
    a1[2] = a2[2];
    a1[3] = v30;
    *a1 = v28;
    a1[1] = v29;
    a2[2] = v72;
    a2[3] = v79;
    *a2 = v58;
    a2[1] = v65;
    a2[6] = v100;
    a2[7] = v107;
    result = v93;
    a2[4] = v86;
    a2[5] = (__int128)v93;
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v83 = a2[4];
      v90 = (__n128)a2[5];
      v97 = a2[6];
      v104 = a2[7];
      v55 = *a2;
      v62 = a2[1];
      v69 = a2[2];
      v76 = a2[3];
      v31 = a3[4];
      v32 = a3[5];
      v33 = a3[7];
      a2[6] = a3[6];
      a2[7] = v33;
      a2[4] = v31;
      a2[5] = v32;
      v34 = *a3;
      v35 = a3[1];
      v36 = a3[3];
      a2[2] = a3[2];
      a2[3] = v36;
      *a2 = v34;
      a2[1] = v35;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
  {
    v87 = a3[4];
    v94 = (__n128)a3[5];
    v101 = a3[6];
    v108 = a3[7];
    v59 = *a3;
    v66 = a3[1];
    v73 = a3[2];
    v80 = a3[3];
    v37 = a4[4];
    v38 = a4[5];
    v39 = a4[7];
    a3[6] = a4[6];
    a3[7] = v39;
    a3[4] = v37;
    a3[5] = v38;
    v40 = *a4;
    v41 = a4[1];
    v42 = a4[3];
    a3[2] = a4[2];
    a3[3] = v42;
    *a3 = v40;
    a3[1] = v41;
    a4[2] = v73;
    a4[3] = v80;
    *a4 = v59;
    a4[1] = v66;
    a4[6] = v101;
    a4[7] = v108;
    result = v94;
    a4[4] = v87;
    a4[5] = (__int128)v94;
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v88 = a2[4];
      v95 = (__n128)a2[5];
      v102 = a2[6];
      v109 = a2[7];
      v60 = *a2;
      v67 = a2[1];
      v74 = a2[2];
      v81 = a2[3];
      v43 = a3[4];
      v44 = a3[5];
      v45 = a3[7];
      a2[6] = a3[6];
      a2[7] = v45;
      a2[4] = v43;
      a2[5] = v44;
      v46 = *a3;
      v47 = a3[1];
      v48 = a3[3];
      a2[2] = a3[2];
      a2[3] = v48;
      *a2 = v46;
      a2[1] = v47;
      a3[2] = v74;
      a3[3] = v81;
      *a3 = v60;
      a3[1] = v67;
      a3[6] = v102;
      a3[7] = v109;
      result = v95;
      a3[4] = v88;
      a3[5] = (__int128)v95;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        v89 = a1[4];
        v96 = (__n128)a1[5];
        v103 = a1[6];
        v110 = a1[7];
        v61 = *a1;
        v68 = a1[1];
        v75 = a1[2];
        v82 = a1[3];
        v49 = a2[4];
        v50 = a2[5];
        v51 = a2[7];
        a1[6] = a2[6];
        a1[7] = v51;
        a1[4] = v49;
        a1[5] = v50;
        v52 = *a2;
        v53 = a2[1];
        v54 = a2[3];
        a1[2] = a2[2];
        a1[3] = v54;
        *a1 = v52;
        a1[1] = v53;
        a2[2] = v75;
        a2[3] = v82;
        *a2 = v61;
        a2[1] = v68;
        a2[6] = v103;
        a2[7] = v110;
        result = v96;
        a2[4] = v89;
        a2[5] = (__int128)v96;
      }
    }
  }
  return result;
}

unsigned int **std::__introsort<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,false>(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  int64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int **v27;
  unsigned int **v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int **v55;
  uint64_t v56;
  unsigned int **v57;
  unsigned int **v58;
  unsigned int **v59;
  _DWORD *v60;
  unsigned int *v61;
  unsigned int **v62;
  unsigned int **v63;
  unsigned int **v64;
  unsigned int *v65;
  unsigned int *v66;
  _DWORD *v67;
  BOOL v68;
  unsigned int **v69;
  unsigned int *v70;
  unsigned int **v71;
  unsigned int **v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int **v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int **v92;
  unsigned int **v93;
  BOOL v95;
  uint64_t v96;
  _DWORD **v97;
  unsigned int **v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  int64_t v105;
  BOOL v106;
  uint64_t v107;
  unsigned int **v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int **v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int **v121;
  unsigned int **v122;
  unsigned int **v123;
  unsigned int *v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int **v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int **v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int *v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int *v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int *v147;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *(a2 - 1);
        v80 = *v8;
        if (*v79 < **v8)
        {
          *v8 = v79;
          *(a2 - 1) = v80;
        }
        return result;
      case 3:
        v81 = *v8;
        v82 = v8[1];
        v83 = *v82;
        v84 = **v8;
        v85 = *(a2 - 1);
        v86 = *v85;
        if (*v82 >= v84)
        {
          if (v86 < v83)
          {
            v8[1] = v85;
            *(a2 - 1) = v82;
            v136 = *v8;
            v135 = v8[1];
            if (*v135 < **v8)
            {
              *v8 = v135;
              v8[1] = v136;
            }
          }
        }
        else
        {
          if (v86 >= v83)
          {
            *v8 = v82;
            v8[1] = v81;
            v147 = *(a2 - 1);
            if (*v147 >= v84)
              return result;
            v8[1] = v147;
          }
          else
          {
            *v8 = v85;
          }
          *(a2 - 1) = v81;
        }
        return result;
      case 4:
        v25 = (unsigned int *)(v8 + 1);
        v87 = v8[1];
        v20 = (int64_t)(v8 + 2);
        v13 = v8[2];
        v88 = *v8;
        v89 = *v87;
        v90 = **v8;
        v91 = *v13;
        if (*v87 < v90)
        {
          v92 = v8;
          v93 = v8 + 2;
          result = (unsigned int **)*v8;
          if (v91 >= v89)
          {
            *v8 = v87;
            v8[1] = v88;
            v92 = v8 + 1;
            v93 = v8 + 2;
            result = (unsigned int **)v88;
            if (v91 >= v90)
              goto LABEL_199;
          }
          goto LABEL_187;
        }
        if (v91 >= v89)
          goto LABEL_199;
        *(_QWORD *)v25 = v13;
        *(_QWORD *)v20 = v87;
        v92 = v8;
        v93 = v8 + 1;
        result = (unsigned int **)v87;
        if (v91 < v90)
        {
LABEL_187:
          *v92 = v13;
          *v93 = v88;
          v87 = (unsigned int *)result;
        }
        v137 = *(a2 - 1);
        if (*v137 < *v87)
          goto LABEL_200;
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,0>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v104 = (unint64_t)(v10 - 2) >> 1;
              v105 = v104;
              do
              {
                if (v104 >= v105)
                {
                  v107 = (2 * v105) | 1;
                  v108 = &v8[v107];
                  v109 = *v108;
                  if (2 * v105 + 2 >= v10)
                  {
                    result = &v8[v105];
                    v112 = *result;
                    v113 = **result;
                    if (*v109 >= v113)
                      goto LABEL_163;
                  }
                  else
                  {
                    v110 = *v109;
                    v111 = *v108[1];
                    if (*v109 <= v111)
                      v110 = *v108[1];
                    if (*v109 < v111)
                    {
                      v109 = v108[1];
                      ++v108;
                      v107 = 2 * v105 + 2;
                    }
                    result = &v8[v105];
                    v112 = *result;
                    v113 = **result;
                    if (v110 >= v113)
                    {
LABEL_163:
                      while (1)
                      {
                        v116 = v108;
                        *result = v109;
                        if (v104 < v107)
                          break;
                        v117 = (2 * v107) | 1;
                        v108 = &v8[v117];
                        v107 = 2 * v107 + 2;
                        v109 = *v108;
                        if (v107 < v10)
                        {
                          v114 = *v109;
                          v115 = *v108[1];
                          if (*v109 <= v115)
                            v114 = *v108[1];
                          if (*v109 >= v115)
                          {
                            v107 = v117;
                          }
                          else
                          {
                            v109 = v108[1];
                            ++v108;
                          }
                          result = v116;
                          if (v114 < v113)
                            break;
                        }
                        else
                        {
                          v107 = v117;
                          result = v116;
                          if (*v109 < v113)
                            break;
                        }
                      }
                      *v116 = v112;
                    }
                  }
                }
                v106 = v105-- <= 0;
              }
              while (!v106);
              v118 = (unint64_t)v9 >> 3;
              do
              {
                v119 = 0;
                v120 = *v8;
                v121 = v8;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = (unsigned int **)*v124;
                    if (result < *v123[1])
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v8 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v8[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = **v123;
                    if (**v130 < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v8[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (**v130 < v133);
                      *v134 = v132;
                    }
                  }
                }
                v106 = v118-- <= 2;
              }
              while (!v106);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          v14 = *v13;
          if ((unint64_t)v9 < 0x401)
          {
            v19 = *v8;
            v20 = (int64_t)*v12;
            v21 = **v8;
            v22 = **v12;
            if (v21 >= v22)
            {
              if (v14 < v21)
              {
                *v8 = v13;
                *(a2 - 1) = v19;
                v20 = (int64_t)*v8;
                v24 = *v12;
                v13 = (unsigned int *)**v8;
                if (v13 < **v12)
                {
                  *v12 = (unsigned int *)v20;
                  *v8 = v24;
                  --a3;
                  v25 = v24;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v14 >= v21)
            {
              *v12 = v19;
              *v8 = (unsigned int *)v20;
              v37 = *(a2 - 1);
              if (*v37 >= v22)
                goto LABEL_32;
              *v8 = v37;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = (unsigned int *)v20;
LABEL_32:
            --a3;
            v25 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v15 = *v12;
          v16 = *v8;
          v17 = **v12;
          v18 = **v8;
          if (v17 >= v18)
          {
            if (v14 < v17)
            {
              *v12 = v13;
              *(a2 - 1) = v15;
              v23 = *v8;
              if (**v12 < **v8)
              {
                *v8 = *v12;
                *v12 = v23;
              }
            }
          }
          else
          {
            if (v14 >= v17)
            {
              *v8 = v15;
              *v12 = v16;
              v26 = *(a2 - 1);
              if (*v26 >= v18)
                goto LABEL_23;
              *v12 = v26;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v16;
          }
LABEL_23:
          v27 = &v8[v11];
          v30 = *(v27 - 1);
          v28 = v27 - 1;
          v29 = v30;
          v31 = v8[1];
          v32 = *v30;
          v33 = *v31;
          v34 = *(a2 - 2);
          v35 = *v34;
          if (*v30 >= *v31)
          {
            if (v35 < v32)
            {
              *v28 = v34;
              *(a2 - 2) = v29;
              v36 = v8[1];
              if (**v28 < *v36)
              {
                v8[1] = *v28;
                *v28 = v36;
              }
            }
          }
          else
          {
            if (v35 >= v32)
            {
              v8[1] = v29;
              *v28 = v31;
              v38 = *(a2 - 2);
              if (*v38 >= v33)
                goto LABEL_37;
              *v28 = v38;
            }
            else
            {
              v8[1] = v34;
            }
            *(a2 - 2) = v31;
          }
LABEL_37:
          v39 = &v8[v11];
          v42 = v39[1];
          v40 = v39 + 1;
          v41 = v42;
          v43 = v8[2];
          v44 = *v42;
          v45 = *v43;
          v46 = *(a2 - 3);
          v47 = *v46;
          if (*v42 >= *v43)
          {
            if (v47 < v44)
            {
              *v40 = v46;
              *(a2 - 3) = v41;
              v48 = v8[2];
              if (**v40 < *v48)
              {
                v8[2] = *v40;
                *v40 = v48;
              }
            }
          }
          else
          {
            if (v47 >= v44)
            {
              v8[2] = v41;
              *v40 = v43;
              v49 = *(a2 - 3);
              if (*v49 >= v45)
                goto LABEL_46;
              *v40 = v49;
            }
            else
            {
              v8[2] = v46;
            }
            *(a2 - 3) = v43;
          }
LABEL_46:
          v13 = *v12;
          v50 = *v28;
          v51 = **v12;
          v52 = **v28;
          v53 = *v40;
          v54 = **v40;
          if (v51 < v52)
          {
            if (v54 >= v51)
            {
              *v28 = v13;
              *v12 = v50;
              v28 = v12;
              v13 = v53;
              if (v54 >= v52)
              {
                v13 = v50;
                v20 = (int64_t)*v8;
                *v8 = v50;
                *v12 = (unsigned int *)v20;
                --a3;
                v25 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v54 >= v51)
            goto LABEL_54;
          *v12 = v53;
          *v40 = v13;
          v40 = v12;
          v13 = v50;
          if (v54 < v52)
          {
LABEL_53:
            *v28 = v53;
            *v40 = v50;
LABEL_54:
            v20 = (int64_t)*v8;
            *v8 = v13;
            *v12 = (unsigned int *)v20;
            --a3;
            v25 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v20 = *v25;
            if (**(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= **(a2 - 1))
            {
              v71 = v8 + 1;
              do
              {
                v8 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
                v13 = (unsigned int *)**v8;
              }
              while (v20 >= v13);
            }
            else
            {
              v69 = v8 + 1;
              do
              {
                if (v69 == a2)
                  goto LABEL_198;
                v70 = *v69++;
                v13 = (unsigned int *)*v70;
              }
              while (v20 >= v13);
              v8 = v69 - 1;
            }
            v72 = a2;
            if (v8 < a2)
            {
              v72 = a2;
              while (v72 != v7)
              {
                v73 = *--v72;
                v13 = (unsigned int *)*v73;
                if (v20 >= v13)
                  goto LABEL_101;
              }
              goto LABEL_198;
            }
LABEL_101:
            if (v8 < v72)
            {
              v13 = *v8;
              v74 = *v72;
              do
              {
                *v8 = v74;
                v75 = v8 + 1;
                *v72 = v13;
                do
                {
                  if (v75 == a2)
                    goto LABEL_198;
                  v76 = *v75++;
                  v13 = v76;
                }
                while (v20 >= *v76);
                v8 = v75 - 1;
                do
                {
                  if (v72 == v7)
                    goto LABEL_198;
                  v77 = *--v72;
                  v74 = v77;
                }
                while (v20 < *v77);
              }
              while (v8 < v72);
            }
            v78 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v25;
            continue;
          }
          v13 = v53;
          v20 = (int64_t)*v8;
          *v8 = v53;
          *v12 = (unsigned int *)v20;
          --a3;
          v25 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v55 = v8 + 1;
          if (v8 + 1 == a2)
            goto LABEL_198;
          v13 = *v55;
          v20 = *v25;
          if (**v55 >= v20)
            goto LABEL_75;
          v56 = 0;
          do
          {
            v57 = &v8[v56 + 2];
            if (v57 == a2)
              goto LABEL_198;
            v13 = *v57;
            ++v56;
          }
          while (**v57 < v20);
          v58 = &v8[v56];
          v55 = &v8[v56 + 1];
          v59 = a2;
          if (!(v56 * 8))
          {
LABEL_75:
            v59 = a2;
            do
            {
              if (v55 >= v59)
              {
                v58 = v8;
                goto LABEL_81;
              }
              v67 = *--v59;
            }
            while (*v67 >= v20);
            v58 = v8;
            if (v55 < v59)
              goto LABEL_65;
LABEL_81:
            if (v58 != v8)
              goto LABEL_82;
            goto LABEL_83;
          }
          do
          {
            if (v59 == v8)
              goto LABEL_198;
            v60 = *--v59;
          }
          while (*v60 >= v20);
          if (v55 >= v59)
            goto LABEL_81;
LABEL_65:
          v61 = *v59;
          v62 = v55;
          v63 = v59;
          do
          {
            *v62 = v61;
            *v63 = v13;
            v64 = v62 + 1;
            do
            {
              if (v64 == a2)
                goto LABEL_198;
              v65 = *v64++;
              v13 = v65;
            }
            while (*v65 < v20);
            v62 = v64 - 1;
            do
            {
              if (v63 == v8)
                goto LABEL_198;
              v66 = *--v63;
              v61 = v66;
            }
            while (*v66 >= v20);
          }
          while (v62 < v63);
          v58 = v64 - 2;
          if (v64 - 2 == v8)
            goto LABEL_83;
LABEL_82:
          *v8 = *v58;
LABEL_83:
          *v58 = v25;
          if (v55 < v59)
            goto LABEL_86;
          v68 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**>(v8, v58);
          v8 = v58 + 1;
          result = (unsigned int **)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v68)
              continue;
LABEL_86:
            result = (unsigned int **)std::__introsort<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v8 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v68)
            return result;
          goto LABEL_2;
        }
        v25 = (unsigned int *)(v8 + 1);
        v95 = v8 == a2 || v25 == (unsigned int *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v95)
          {
            v96 = 8;
            v97 = v8;
            do
            {
              v99 = *v97;
              v97 = (_DWORD **)v25;
              v100 = *(unsigned int **)v25;
              v101 = *v100;
              if (*v100 < *v99)
              {
                v102 = v96;
                do
                {
                  *(unsigned int **)((char *)v8 + v102) = v99;
                  v103 = v102 - 8;
                  if (v102 == 8)
                  {
                    v98 = v8;
                    goto LABEL_136;
                  }
                  v99 = *(unsigned int **)((char *)v8 + v102 - 16);
                  v102 -= 8;
                }
                while (v101 < *v99);
                v98 = (unsigned int **)((char *)v8 + v103);
LABEL_136:
                *v98 = v100;
              }
              v25 = (unsigned int *)(v97 + 1);
              v96 += 8;
            }
            while (v97 + 1 != a2);
          }
        }
        else if (!v95)
        {
          v20 = 0;
          v138 = 1;
          while (1)
          {
            v139 = v8[v20];
            v20 = v138;
            v140 = *(unsigned int **)v25;
            v13 = (unsigned int *)**(unsigned int **)v25;
            if (v13 < *v139)
              break;
LABEL_192:
            v138 = v20 + 1;
            v25 += 2;
            if (v25 == (unsigned int *)a2)
              return result;
          }
          v141 = 0;
          while (1)
          {
            v142 = &v25[2 * v141];
            *(_QWORD *)v142 = v139;
            if (!(v20 + v141))
              break;
            v139 = (unsigned int *)*((_QWORD *)v142 - 2);
            --v141;
            if (v13 >= *v139)
            {
              *(_QWORD *)&v25[2 * v141] = v140;
              goto LABEL_192;
            }
          }
LABEL_198:
          __break(1u);
LABEL_199:
          v87 = v13;
          v137 = *(a2 - 1);
          if (*v137 < *v87)
          {
LABEL_200:
            *(_QWORD *)v20 = v137;
            *(a2 - 1) = v87;
            v143 = *(unsigned int **)v20;
            v144 = *(unsigned int **)v25;
            v145 = *v143;
            if (*v143 < *v144)
            {
              v7[1] = v143;
              v7[2] = v144;
              v146 = *v7;
              if (v145 < **v7)
              {
                *v7 = v143;
                v7[1] = v146;
              }
            }
          }
        }
        return result;
    }
  }
}

unsigned int **std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,0>(unsigned int **result, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;

  v5 = *a2;
  v6 = *result;
  v7 = **a2;
  v8 = **result;
  v9 = *a3;
  v10 = **a3;
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
      v12 = *a4;
      if (**a4 >= *v9)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    v11 = *result;
    if (**a2 < **result)
    {
      *result = *a2;
      *a2 = v11;
      v5 = *a3;
      v12 = *a4;
      if (**a4 >= **a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (**a3 >= v8)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v9;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v12 = *a4;
  if (**a4 >= *v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v12;
  *a4 = v5;
  v13 = *a2;
  if (**a3 < **a2)
  {
    *a2 = *a3;
    *a3 = v13;
    v14 = *result;
    if (**a2 < **result)
    {
      *result = *a2;
      *a2 = v14;
    }
  }
LABEL_17:
  v15 = *a4;
  if (**a5 < **a4)
  {
    *a4 = *a5;
    *a5 = v15;
    v16 = *a3;
    if (**a4 < **a3)
    {
      *a3 = *a4;
      *a4 = v16;
      v17 = *a2;
      if (**a3 < **a2)
      {
        *a2 = *a3;
        *a3 = v17;
        v18 = *result;
        if (**a2 < **result)
        {
          *result = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**>(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int **v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int **v31;
  int v32;
  uint64_t i;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v12 = *(a2 - 1);
      v13 = *a1;
      if (*v12 >= **a1)
        return 1;
      *a1 = v12;
      *(a2 - 1) = v13;
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *v15;
      v17 = **a1;
      v18 = *(a2 - 1);
      v19 = *v18;
      if (*v15 >= v17)
      {
        if (v19 >= v16)
          return 1;
        a1[1] = v18;
        *(a2 - 1) = v15;
        v40 = *a1;
        v39 = a1[1];
        if (*v39 >= **a1)
          return 1;
        *a1 = v39;
        a1[1] = v40;
        return 1;
      }
      else if (v19 >= v16)
      {
        *a1 = v15;
        a1[1] = v14;
        v46 = *(a2 - 1);
        if (*v46 >= v17)
          return 1;
        a1[1] = v46;
        *(a2 - 1) = v14;
        return 1;
      }
      else
      {
        *a1 = v18;
        *(a2 - 1) = v14;
        return 1;
      }
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *v21;
      v26 = **a1;
      v27 = *v23;
      if (*v21 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_38;
        }
LABEL_35:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
LABEL_36:
        v41 = *(a2 - 1);
        if (*v41 >= *v21)
          return 1;
        goto LABEL_39;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v21 = v23;
      v41 = *(a2 - 1);
      if (*v41 >= *v21)
        return 1;
LABEL_39:
      *v22 = v41;
      *(a2 - 1) = v21;
      v42 = *v22;
      v43 = *v20;
      v44 = *v42;
      if (*v42 >= *v43)
        return 1;
      a1[1] = v42;
      a1[2] = v43;
      v45 = *a1;
      if (v44 >= **a1)
        return 1;
      *a1 = v42;
      a1[1] = v45;
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      v7 = *v5;
      v8 = **a1;
      v9 = *v3;
      if (*v5 >= v8)
      {
        if (v9 >= v7)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v10 = a1;
        v11 = a1 + 1;
      }
      else
      {
        v10 = a1;
        v11 = a1 + 2;
        if (v9 < v7)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v10 = a1 + 1;
        v11 = a1 + 2;
      }
      if (v9 >= v8)
        goto LABEL_20;
LABEL_19:
      *v10 = v3;
      *v11 = v6;
LABEL_20:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v34 = *v31;
        v35 = *v4;
        v36 = **v31;
        if (v36 < *v35)
          break;
LABEL_23:
        v4 = v31++;
        if (v31 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(unsigned int **)((char *)a1 + v37) = v35;
        v38 = v37 - 8;
        if (v37 == 8)
        {
          *a1 = v34;
          if (++v32 != 8)
            goto LABEL_23;
          return v31 + 1 == a2;
        }
        v35 = *(unsigned int **)((char *)a1 + v37 - 16);
        v37 -= 8;
      }
      while (v36 < *v35);
      *(unsigned int **)((char *)a1 + v38) = v34;
      if (++v32 != 8)
        goto LABEL_23;
      return v31 + 1 == a2;
  }
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13 == -1)
  {
LABEL_12:
    *v13 = v9;
    if (*v4)
    {
      ++*(_DWORD *)(*v4 - 12);
      v17 = *v4;
      if (*v4)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v17 = *v4;
      if (*v4)
      {
LABEL_14:
        v18 = (*(_DWORD *)(v17 - 16) + *(_DWORD *)(v17 - 12));
        v19 = *(unsigned int *)(v17 - 4);
        if (v19 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v18 = *(unsigned int *)(v17 - 16);
    v19 = *(unsigned int *)(v17 - 4);
    if (v19 <= 0x400)
    {
LABEL_15:
      if (3 * v19 > 4 * v18)
      {
LABEL_26:
        *(_QWORD *)a3 = v13;
        *(_QWORD *)(a3 + 8) = v17 + 4 * v19;
        *(_BYTE *)(a3 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v19)
      {
        result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v4, 8u, v13);
        v13 = (int *)result;
        v17 = *v4;
        if (!*v4)
        {
LABEL_18:
          v19 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v19 = *(unsigned int *)(v17 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v4, (_DWORD)v19 << (6 * *(_DWORD *)(v17 - 12) >= (2 * v19)), v13);
      v13 = (int *)result;
      v17 = *v4;
      if (!*v4)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v19 > 2 * v18)
      goto LABEL_26;
    goto LABEL_24;
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v9)
  {
    if (v14 == -2)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (int *)(v6 + 4 * v12);
    v14 = *v13;
    ++v16;
    if (*v13 == -1)
    {
      if (v15)
      {
        *v15 = -1;
        --*(_DWORD *)(*v4 - 16);
        v9 = *a2;
        v13 = v15;
      }
      goto LABEL_12;
    }
  }
  if ((v7 & 1) != 0)
    v20 = 0;
  else
    v20 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v6 + 4 * v20;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = 4 * a2;
    v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    v12 = (void *)(v11 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = 0;
  v9 = 4 * a2;
  v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  v12 = (void *)(v11 + 16);
  if (a2)
LABEL_3:
    memset(v12, 255, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (int *)(v6 + 4 * v13);
      v16 = *v15;
      if (*v15 <= 0xFFFFFFFD)
      {
        v17 = *a1;
        v18 = *a1 ? *(_DWORD *)(v17 - 8) : 0;
        v19 = 0;
        v20 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
        v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
        do
        {
          v22 = v21 & v18;
          v21 = ++v19 + v22;
        }
        while (*(_DWORD *)(v17 + 4 * v22) != -1);
        v23 = (_DWORD *)(v17 + 4 * v22);
        *v23 = v16;
        if (v15 == a3)
          v14 = v23;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  if (a2 == 1)
  {
    v12 = 0;
LABEL_10:
    v15 = a2 - v12;
    v16 = (_QWORD *)(v9 + 16 * v12 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      *v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_12;
  }
  v12 = a2 & 0xFFFFFFFE;
  v13 = (_QWORD *)(v9 + 40);
  v14 = v12;
  do
  {
    *((_DWORD *)v13 - 6) = -1;
    *((_DWORD *)v13 - 2) = -1;
    *(v13 - 2) = 0;
    *v13 = 0;
    v13 += 4;
    v14 -= 2;
  }
  while (v14);
  if (v12 != a2)
    goto LABEL_10;
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = (_DWORD *)(v6 + 16 * v17);
      if (*v19 <= 0xFFFFFFFD)
      {
        v20 = *a1;
        if (*a1)
          v21 = *(_DWORD *)(v20 - 8);
        else
          v21 = 0;
        v22 = 0;
        v23 = 9 * ((*v19 + ~(*v19 << 15)) ^ ((*v19 + ~(*v19 << 15)) >> 10));
        v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
        do
        {
          v25 = v24 & v21;
          v24 = ++v22 + v25;
        }
        while (*(_DWORD *)(v20 + 16 * v25) != -1);
        v26 = (_OWORD *)(v20 + 16 * v25);
        *v26 = *(_OWORD *)v19;
        if (v19 == a3)
          v18 = v26;
      }
      ++v17;
    }
    while (v17 != v7);
  }
  else
  {
    v18 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v18;
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  if (a2 < 4)
  {
    v12 = 0;
LABEL_10:
    v15 = a2 - v12;
    v16 = (_OWORD *)(v9 + 16 * v12 + 16);
    do
    {
      *v16++ = xmmword_18260EFA0;
      --v15;
    }
    while (v15);
    goto LABEL_12;
  }
  v12 = a2 & 0xFFFFFFFC;
  v13 = (_OWORD *)(v9 + 48);
  v14 = v12;
  do
  {
    *(v13 - 2) = xmmword_18260EFA0;
    *(v13 - 1) = xmmword_18260EFA0;
    *v13 = xmmword_18260EFA0;
    v13[1] = xmmword_18260EFA0;
    v13 += 4;
    v14 -= 4;
  }
  while (v14);
  if (v12 != a2)
    goto LABEL_10;
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = (_QWORD *)(v6 + 16 * v17);
      if (*v19 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v20 = *a1;
        if (*a1)
          v21 = *(_DWORD *)(v20 - 8);
        else
          v21 = 0;
        v22 = (*v19 + ~(*v19 << 32)) ^ ((*v19 + ~(*v19 << 32)) >> 22);
        v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((unint64_t)(v22 + ~(v22 << 13)) >> 8));
        v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
        v25 = v21 & ((v24 >> 31) ^ v24);
        v26 = 1;
        do
        {
          v27 = v25;
          v28 = *(_QWORD *)(v20 + 16 * v25);
          v25 = (v25 + v26++) & v21;
        }
        while (v28 != -1);
        v29 = (_OWORD *)(v20 + 16 * v27);
        *v29 = *(_OWORD *)v19;
        if (v19 == a3)
          v18 = v29;
      }
      ++v17;
    }
    while (v17 != v7);
  }
  else
  {
    v18 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v18;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::BindGroupLayout::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t i;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    result = WTF::fastMalloc((WTF *)(136 * a2 + 16));
    v9 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    result = WTF::fastMalloc((WTF *)(136 * a2 + 16));
    v9 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  v10 = a2;
  v11 = (_OWORD *)(result + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *v11 = 0uLL;
    v11[1] = 0uLL;
    v11[2] = 0uLL;
    v11[3] = 0uLL;
    v11[4] = 0uLL;
    v11[5] = 0uLL;
    v11[6] = 0uLL;
    v11[7] = 0uLL;
    v11 = (_OWORD *)((char *)v11 + 136);
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v13 = *(_DWORD *)(v4 + 136 * i);
      if (v13 <= 0xFFFFFFFD)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = 0;
        v17 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
        v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
        v19 = v18 ^ HIWORD(v18);
        do
        {
          v8 = (void *)(v19 & v15);
          v20 = (unsigned int *)(v14 + 136 * v8);
          v19 = ++v16 + (_DWORD)v8;
        }
        while (*v20 != -1);
        *v20 = v13;
        v21 = v14 + 136 * v8;
        v22 = v4 + 136 * i;
        v23 = *(_OWORD *)(v22 + 8);
        v24 = *(_OWORD *)(v22 + 24);
        *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
        *(_OWORD *)(v21 + 24) = v24;
        *(_OWORD *)(v21 + 8) = v23;
        v25 = *(_OWORD *)(v22 + 56);
        *(_QWORD *)(v21 + 72) = *(_QWORD *)(v22 + 72);
        *(_OWORD *)(v21 + 56) = v25;
        v26 = *(_OWORD *)(v22 + 80);
        *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
        *(_OWORD *)(v21 + 80) = v26;
        v27 = *(_OWORD *)(v22 + 104);
        *(_OWORD *)(v21 + 116) = *(_OWORD *)(v22 + 116);
        *(_OWORD *)(v21 + 104) = v27;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

BOOL std::__throw_bad_variant_access[abi:sn180100]()
{
  uint64_t **v0;
  uint64_t v1;

  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(v0, v1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  return v2
      && !*(_DWORD *)(v2 + 32)
      && *(_DWORD *)(v2 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(v2 + 12) == *(_DWORD *)(a2 + 12)
      && *(_QWORD *)(v2 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 24);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  return v2 && *(_DWORD *)(v2 + 32) == 1 && *(_DWORD *)(v2 + 8) == *(_DWORD *)(a2 + 8);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  return v2 && v2[8] == 2 && v2[4] == a2[4] && v2[2] == a2[2] && v2[3] == a2[3];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 24);
  return v2 && v2[8] == 3 && v2[3] == a2[3] && v2[2] == a2[2] && v2[4] == a2[4];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::BindGroupLayout::equalBindingEntries(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&,std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  return v1 && *(_DWORD *)(v1 + 32) == 4;
}

unint64_t WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 8 * v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 29)
        goto LABEL_30;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      memcpy(v19, v5, 8 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 29))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 8 * v6);
      v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1824313CCLL);
  }
  v13 = *(void **)a1;
  return (unint64_t)v13 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
}

id WebGPU::Device::safeCreateBuffer(WebGPU::Device *this, unint64_t a2, MTLStorageMode a3, MTLCPUCacheMode a4, MTLHazardTrackingMode a5)
{
  unint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v6 = a4 | (16 * a3) | (a5 << 8);
  v7 = (void *)*((_QWORD *)this + 1);
  if (a2 <= 1)
    v8 = 1;
  else
    v8 = a2;
  v9 = (void *)objc_msgSend(v7, "newBufferWithLength:options:", v8, v6);
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v9);
  return v9;
}

void sub_182431420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebGPU::Device::createBuffer(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _DWORD *v25;
  __CFString *v26;
  int v27;
  uint64_t v28;
  int v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;

  if (*(_QWORD *)a2 || (v6 = *(void **)(a1 + 8)) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x118);
    WebGPU::Buffer::Buffer(v5, (unsigned __int8 **)a1);
LABEL_35:
    *a3 = v5;
    return;
  }
  v8 = *(_DWORD *)(a2 + 16);
  if (*(_BYTE *)(a1 + 56))
    v9 = 1;
  else
    v9 = (*(_DWORD *)(a2 + 16) & 3) == 3;
  v10 = v9 || v8 == 0;
  if (v10
    || (v8 <= 0x3FF ? (v11 = (*(_DWORD *)(a2 + 16) & 0x3FF) == 0) : (v11 = 1),
        v11
     || (v8 & 1) != 0 && (v8 & 0xFFFFFFF6) != 0
     || (v8 & 2) != 0 && (v8 & 0xFFFFFFF9) != 0
     || (v12 = *(_QWORD *)(a2 + 24), *(_DWORD *)(a2 + 32)) && (v12 & 3) != 0
     || v12 > *(_QWORD *)(a1 + 160)))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = *(_QWORD *)(a1 + 32);
    v14 = 32 * *(unsigned int *)(a1 + 44);
    v15 = v13 + v14;
    while (v14)
    {
      v16 = *(_DWORD *)(v15 - 8);
      v15 -= 32;
      v14 -= 32;
      if (!v16)
      {
        v17 = v13 + v14;
        if (!*(_BYTE *)(v17 + 16))
        {
          v18 = v35;
          v35 = 0;
          *(_DWORD *)v17 = 1;
          *(_QWORD *)(v17 + 8) = v18;
          *(_BYTE *)(v17 + 16) = 1;
        }
        goto LABEL_30;
      }
    }
    v19 = *(_QWORD *)(a1 + 24);
    if (v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v19 + 16))(v19, 1, &v35);
      v20 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
LABEL_30:
    v21 = (_DWORD *)v35;
    v35 = 0;
    if (v21)
    {
      if (*v21 == 2)
        WTF::StringImpl::destroy();
      else
        *v21 -= 2;
    }
    v5 = WTF::fastMalloc((WTF *)0x118);
    WebGPU::Buffer::Buffer(v5, (unsigned __int8 **)a1);
    goto LABEL_35;
  }
  if (objc_msgSend(v6, "hasUnifiedMemory"))
    v22 = 0;
  else
    v22 = 32 * ((*(_DWORD *)(a2 + 16) & 0x13) == 0);
  if (*(_QWORD *)(a2 + 24) <= 1uLL)
    v23 = 1;
  else
    v23 = *(_QWORD *)(a2 + 24);
  v24 = (void *)objc_msgSend(*(id *)(a1 + 8), "newBufferWithLength:options:", v23, v22);
  WebGPU::Device::setOwnerWithIdentity(a1, v24);
  if (v24)
  {
    if (*(_QWORD *)(a2 + 8))
      strlen(*(const char **)(a2 + 8));
    WTF::String::fromUTF8();
    if (v33)
      v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v26 = &stru_1E0FD9588;
    objc_msgSend(v24, "setLabel:", v26);

    if (v33)
    {
      if (*v33 == 2)
        WTF::StringImpl::destroy();
      else
        *v33 -= 2;
    }
    v27 = *(_DWORD *)(a2 + 32);
    v28 = *(_QWORD *)(a2 + 24);
    v29 = *(_DWORD *)(a2 + 16);
    if (v27)
    {
      v30 = v24;
      v31 = WTF::fastMalloc((WTF *)0x118);
      WebGPU::Buffer::Buffer(v31, v30, v28, v29, 1, 0, v28, a1);
    }
    else
    {
      v30 = v24;
      v31 = WTF::fastMalloc((WTF *)0x118);
      WebGPU::Buffer::Buffer(v31, v30, v28, v29, 3, 0, 0, a1);
    }
    *a3 = v31;

  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = (_DWORD *)v35;
    WebGPU::Device::generateAnOutOfMemoryError(a1, (uint64_t *)&v34);
    v25 = v34;
    v34 = 0;
    if (v25)
    {
      if (*v25 == 2)
        WTF::StringImpl::destroy();
      else
        *v25 -= 2;
    }
    v32 = WTF::fastMalloc((WTF *)0x118);
    WebGPU::Buffer::Buffer(v32, (unsigned __int8 **)a1);
    *a3 = v32;
  }

}

void sub_18243178C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;
  WTF *v13;

  WTF::fastFree(v13, a2);

  _Unwind_Resume(a1);
}

void sub_182431848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a12 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x182431840);
}

void sub_18243187C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_182431890(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::Buffer::Buffer(uint64_t a1, void *a2, uint64_t a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v15;
  id v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v15 = a2;
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v16 = v15;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 52) = a5;
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 8;
  *(_BYTE *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v17 = *(unsigned __int8 **)a8;
  if (__ldaxr(*(unsigned __int8 **)a8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v17);
LABEL_5:
  ++*((_QWORD *)v17 + 1);
  v19 = __ldxr(v17);
  if (v19 == 1)
  {
    if (!__stlxr(0, v17))
    {
      *(_QWORD *)(a1 + 264) = 0;
      *(_QWORD *)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 256) = a8;
      v20 = *(_DWORD *)(a1 + 48);
      if ((v20 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v17);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = a8;
  v20 = *(_DWORD *)(a1 + 48);
  if ((v20 & 0x100) == 0)
  {
LABEL_8:
    if ((v20 & 0x110) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_12:
  v21 = (void *)objc_msgSend(*(id *)(a8 + 8), "newBufferWithLength:options:", 16, 32);
  WebGPU::Device::setOwnerWithIdentity(a8, v21);
  v22 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v21;

  if ((*(_DWORD *)(a1 + 48) & 0x110) != 0)
  {
LABEL_13:
    v23 = (void *)objc_msgSend(*(id *)(a8 + 8), "newBufferWithLength:options:", 20, 32);
    WebGPU::Device::setOwnerWithIdentity(a8, v23);
    v24 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v23;

  }
LABEL_14:

  return a1;
}

void sub_182431A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  WTF *v5;
  void *v7;
  void *v8;
  void *v9;
  WTF *v10;
  void *v11;

  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet((uint64_t *)(v1 + 264), v7);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v1 + 256), v8);
  v10 = *(WTF **)(v1 + 72);
  if (v5 != v10)
  {
    if (v10)
    {
      *(_QWORD *)(v1 + 72) = 0;
      *(_DWORD *)(v1 + 80) = 0;
      WTF::fastFree(v10, v9);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v11);
  _Unwind_Resume(a1);
}

uint64_t *WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WebGPU::Buffer::Buffer(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_BYTE *)(a1 + 52) = 3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 8;
  *(_BYTE *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_5:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = a2;
  return a1;
}

void sub_182431C2C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  WTF *v4;
  WTF *v6;
  void *v7;

  v6 = *(WTF **)(v2 + 72);
  if (v4 != v6)
  {
    if (v6)
    {
      *(_QWORD *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v6, a2);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v7);
  _Unwind_Resume(a1);
}

void WebGPU::Buffer::~Buffer(WebGPU::Buffer *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  WTF *v10;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 32, a2);
  v10 = (WTF *)*((_QWORD *)this + 9);
  if ((WebGPU::Buffer *)((char *)this + 88) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v10, v9);
  }

  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v12);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebGPU::Buffer::decrementBufferMapCount(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(this + 264);
  if (!v1)
  {
    v3 = 0;
    v2 = 0;
LABEL_10:
    v5 = v3;
    v3 = v1 + 8 * v2;
    if (!v1)
    {
      v7 = 0;
      if (v5)
        goto LABEL_17;
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = v1 + 8 * v2;
  if (!*(_DWORD *)(v1 - 12))
    goto LABEL_10;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    v5 = *(_QWORD *)(this + 264);
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 += 8;
      v4 -= 8;
      if (!v4)
      {
        v5 = v3;
        break;
      }
    }
LABEL_8:
    v6 = *(unsigned int *)(v1 - 4);
    goto LABEL_14;
  }
  v6 = 0;
  v5 = *(_QWORD *)(this + 264);
LABEL_14:
  v7 = v1 + 8 * v6;
  if (v7 != v5)
  {
LABEL_17:
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v8 = v5 + 8;
      v5 = v3;
      if (v8 != v3)
      {
        v5 = v8;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v7)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_24:
  if (v1)
    v1 += 8 * *(unsigned int *)(v1 - 4);
  if (v5 != v1)
  {
    v9 = *(_DWORD *)(this + 272);
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      v11 = *(_DWORD *)(v10 + 72) - 1;
      *(_DWORD *)(v10 + 72) = v11;
      v12 = *(_QWORD *)(v10 + 56);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
          *(_DWORD *)(v13 + 40) = v11;
      }
      v14 = v5 + 8;
      v15 = v3;
      if (v14 != v3)
      {
        v15 = v14;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 += 8;
          if (v15 == v3)
          {
            v15 = v3;
            break;
          }
        }
      }
      v5 = v7;
      if (v15 != v7)
      {
        v5 = v15;
        if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
        {
          while (1)
          {
            v16 = v5 + 8;
            v5 = v3;
            if (v16 != v3)
            {
              v5 = v16;
              while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
              {
                v5 += 8;
                if (v5 == v3)
                {
                  v5 = v3;
                  break;
                }
              }
            }
            if (v5 == v7)
              break;
            if (*(_QWORD *)(*(_QWORD *)v5 + 8))
              goto LABEL_29;
          }
          v5 = v7;
        }
      }
LABEL_29:
      ++v9;
    }
    while (v5 != v1);
    *(_DWORD *)(this + 272) = v9;
  }
  return this;
}

void WebGPU::Buffer::setCommandEncoder(WebGPU::Buffer *this, WebGPU::CommandEncoder *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebGPU::CommandBuffer *v9;
  _BYTE v10[24];

  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>((uint64_t)this + 264, (uint64_t)a2, (uint64_t)v10);
  v4 = *((unsigned __int8 *)this + 52);
  if (v4 > 1)
  {
    if (v4 == 4)
    {
      *((_BYTE *)a2 + 76) = 1;
      v8 = *((_QWORD *)a2 + 7);
      if (v8)
      {
        v9 = *(WebGPU::CommandBuffer **)(v8 + 8);
        if (v9)
          WebGPU::CommandBuffer::makeInvalid(v9, *((NSString **)a2 + 8));
      }
    }
  }
  else
  {
    v5 = *((_DWORD *)a2 + 18) + 1;
    *((_DWORD *)a2 + 18) = v5;
    v6 = *((_QWORD *)a2 + 7);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        *(_DWORD *)(v7 + 40) = v5;
    }
  }
}

unsigned int *WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  unsigned int *result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  char v23;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebGPU14CommandEncoderES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v23);
    *(_DWORD *)(a1 + 8) = 0;
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE)
        LODWORD(v8) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v8;
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = a2;
    v11 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v9;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v10);
      }
      v9 = *(_QWORD *)(a2 + 8);
    }
  }
  do
    v14 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v14 + 1, (unsigned int *)v9));
  do
    v15 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v15 + 1, (unsigned int *)v9));
  v22 = (WTF *)v9;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v22, a3);
  result = (unsigned int *)v22;
  v22 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v18 = __ldaxr(result);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, result));
  if (!v19)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
    if (!v9)
      return result;
  }
  else
  {
LABEL_17:
    if (!v9)
      return result;
  }
  do
  {
    v20 = __ldaxr((unsigned int *)v9);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unsigned int *)v9));
  if (!v21)
  {
    atomic_store(1u, (unsigned int *)v9);
    return (unsigned int *)WTF::fastFree((WTF *)v9, v16);
  }
  return result;
}

void sub_182432198(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  unsigned int *v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  if (!a9)
    goto LABEL_4;
  do
  {
    v11 = __ldaxr((unsigned int *)a9);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)a9));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)a9);
    WTF::fastFree(a9, a2);
    if (!v9)
      goto LABEL_7;
  }
  else
  {
LABEL_4:
    if (!v9)
      goto LABEL_7;
  }
  do
  {
    v13 = __ldaxr(v9);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v9));
  if (!v14)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

unint64_t WebGPU::Buffer::getMappedRange(WebGPU::Buffer *this, unint64_t a2, unint64_t a3, __n128 a4)
{
  unint64_t v4;
  unsigned int v7;
  unint64_t result;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  __n128 **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  __n128 *v28;
  __n128 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 *v38;
  uint64_t v39;
  __n128 *v40;
  unint64_t v41;
  unint64_t v42;
  __n128 v43;
  unint64_t v44;
  __n128 *v45;
  __n128 *v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 *v51;
  __n128 *v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;

  v4 = a3;
  v7 = *((unsigned __int8 *)this + 52);
  if (v7 != 4 && !*((_QWORD *)this + 2))
    return 0;
  if (a3 == -1)
  {
    v10 = objc_msgSend(*((id *)this + 2), "length");
    if (v10 >= a2)
      v4 = v10 - a2;
    else
      v4 = 0;
    if (*((unsigned __int8 *)this + 52) > 1u || (v4 & 3 | a2 & 7) != 0)
      return 0;
  }
  else if (v7 > 1 || (a3 & 3 | a2 & 7) != 0)
  {
    return 0;
  }
  if (*((_QWORD *)this + 7) > a2)
    return 0;
  v12 = a2 + v4;
  if (__CFADD__(a2, v4) || v12 > *((_QWORD *)this + 8))
    return 0;
  if (v12 != a2)
  {
    v13 = *((unsigned int *)this + 21);
    if (!*((_BYTE *)this + 216))
    {
      if (*((_DWORD *)this + 21))
      {
        a4 = std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>((__n128 *)*((_QWORD *)this + 9), (__n128 *)(*((_QWORD *)this + 9) + 16 * v13), 126 - 2 * __clz(v13), 1, a4);
        v14 = *((unsigned int *)this + 21);
        if (!(_DWORD)v14)
        {
          __break(0xC471u);
          JUMPOUT(0x182432678);
        }
        v15 = v14 - 1;
        if (v14 == 1)
        {
          v13 = 1;
        }
        else
        {
          v45 = (__n128 *)*((_QWORD *)this + 9);
          v46 = v45 + 1;
          v13 = 1;
          v47 = v45;
          do
          {
            a4 = *v46;
            v50 = v47->n128_u64[1];
            v49 = v46->n128_u64[1];
            if (v49 > v50)
            {
              if (a4.n128_u64[0] <= v50)
              {
                v48 = v47->n128_u64[0];
                if (v47->n128_u64[0] == v49)
                {
                  v48 = 0;
                  v49 = 0;
                }
                v47->n128_u64[0] = v48;
                v47->n128_u64[1] = v49;
              }
              else
              {
                if (v14 <= v13)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182432660);
                }
                v47 = &v45[v13++];
                *v47 = a4;
              }
            }
            ++v46;
            --v15;
          }
          while (v15);
        }
        *((_DWORD *)this + 21) = v13;
      }
      *((_BYTE *)this + 216) = 1;
    }
    if (v13)
    {
      v16 = (unint64_t *)(*((_QWORD *)this + 9) + 8);
      v17 = 0xFFFFFFFFLL;
      do
      {
        if (v12 > *(v16 - 1) && *v16 > a2)
          break;
        v16 += 2;
        --v17;
        --v13;
      }
      while (v13);
      if (v17)
        return 0;
    }
  }
  v19 = (__n128 **)((char *)this + 72);
  v57.n128_u64[0] = a2;
  v57.n128_u64[1] = a2 + v4;
  if (v4 && v12 != a2)
  {
    v20 = *((unsigned int *)this + 21);
    if (!(_DWORD)v20)
    {
      v25 = 0;
      goto LABEL_49;
    }
    v21 = (uint64_t)&(*v19)[v20];
    v23 = *(_QWORD *)(v21 - 16);
    v22 = *(_QWORD *)(v21 - 8);
    v24 = v23 <= a2 && v22 >= v12;
    v25 = *((unsigned int *)this + 21);
    if (!v24)
    {
LABEL_49:
      *((_BYTE *)this + 216) = 0;
      v26 = (void *)(v25 + 1);
      v27 = *((unsigned int *)this + 20);
      if (v25 + 1 >= v27)
      {
        if ((_DWORD)v20 == (_DWORD)v27)
        {
          v29 = (__n128 *)WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v26, (unint64_t)&v57);
          a4 = *v29;
          *(__n128 *)(*((_QWORD *)this + 9) + 16 * *((unsigned int *)this + 21)) = *v29;
        }
        else
        {
          a4 = v57;
          (*v19)[v25] = v57;
        }
        v30 = (*((_DWORD *)this + 21) + 1);
        *((_DWORD *)this + 21) = v30;
        if (!*((_BYTE *)this + 216))
        {
          if ((_DWORD)v30)
          {
            a4 = std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>((__n128 *)*((_QWORD *)this + 9), (__n128 *)(*((_QWORD *)this + 9) + 16 * v30), 126 - 2 * __clz(v30), 1, a4);
            v31 = *((unsigned int *)this + 21);
            if (!(_DWORD)v31)
            {
LABEL_105:
              __break(0xC471u);
              JUMPOUT(0x182432658);
            }
            v32 = v31 - 1;
            if (v31 == 1)
            {
              LODWORD(v33) = 1;
            }
            else
            {
              v51 = *v19;
              v52 = *v19 + 1;
              v33 = 1;
              v53 = *v19;
              do
              {
                a4 = *v52;
                v56 = v53->n128_u64[1];
                v55 = v52->n128_u64[1];
                if (v55 > v56)
                {
                  if (a4.n128_u64[0] <= v56)
                  {
                    v54 = v53->n128_u64[0];
                    if (v53->n128_u64[0] == v55)
                    {
                      v54 = 0;
                      v55 = 0;
                    }
                    v53->n128_u64[0] = v54;
                    v53->n128_u64[1] = v55;
                  }
                  else
                  {
                    if (v31 <= v33)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x182432670);
                    }
                    v53 = &v51[v33++];
                    *v53 = a4;
                  }
                }
                ++v52;
                --v32;
              }
              while (v32);
            }
            *((_DWORD *)this + 21) = v33;
          }
          *((_BYTE *)this + 216) = 1;
        }
      }
      else
      {
        if ((_DWORD)v20 == (_DWORD)v27)
        {
          v28 = (__n128 *)WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v26, (unint64_t)&v57);
          a4 = *v28;
          *(__n128 *)(*((_QWORD *)this + 9) + 16 * *((unsigned int *)this + 21)) = *v28;
        }
        else
        {
          a4 = v57;
          *(__n128 *)(*((_QWORD *)this + 9) + 16 * v25) = v57;
        }
        ++*((_DWORD *)this + 21);
      }
    }
  }
  if (!*((_BYTE *)this + 216))
  {
    v34 = *((unsigned int *)this + 21);
    if ((_DWORD)v34)
    {
      std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(*((__n128 **)this + 9), (__n128 *)(*((_QWORD *)this + 9) + 16 * v34), 126 - 2 * __clz(v34), 1, a4);
      v35 = *((unsigned int *)this + 21);
      if (!(_DWORD)v35)
      {
        __break(0xC471u);
        JUMPOUT(0x182432668);
      }
      v36 = v35 - 1;
      if (v35 != 1)
      {
        v38 = *v19;
        v39 = (uint64_t)&(*v19)[1];
        v37 = 1;
        v40 = *v19;
        while (1)
        {
          v43 = *(__n128 *)v39;
          v44 = v40->n128_u64[1];
          v42 = *(_QWORD *)(v39 + 8);
          if (v42 > v44)
          {
            if (v43.n128_u64[0] <= v44)
            {
              v41 = v40->n128_u64[0];
              if (v40->n128_u64[0] == v42)
              {
                v41 = 0;
                v42 = 0;
              }
              v40->n128_u64[0] = v41;
              v40->n128_u64[1] = v42;
            }
            else
            {
              if (v35 <= v37)
                goto LABEL_105;
              v40 = &v38[v37++];
              *v40 = v43;
            }
          }
          v39 += 16;
          if (!--v36)
            goto LABEL_69;
        }
      }
      LODWORD(v37) = 1;
LABEL_69:
      *((_DWORD *)this + 21) = v37;
    }
    *((_BYTE *)this + 216) = 1;
  }
  result = objc_msgSend(*((id *)this + 2), "contents", *(_OWORD *)&v57);
  if (result)
    return objc_msgSend(*((id *)this + 2), "contents") + a2;
  return result;
}

uint64_t WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WebGPU::Buffer **)a1;
  *(_QWORD *)a1 = 0;
  if (!v4)
    return a1;
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v6, v7);
  return a1;
}

_DWORD *wgpuBufferReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::Buffer *wgpuBufferRelease(WebGPU::Buffer *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::Buffer::~Buffer(result, a2);
    return (WebGPU::Buffer *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void wgpuBufferDestroy(WebGPU::Buffer *this, void *a2)
{
  int v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebGPU::CommandBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _BYTE v27[128];
  char v28;

  v3 = *((unsigned __int8 *)this + 52);
  if ((v3 - 3) >= 2)
  {
    WebGPU::Buffer::decrementBufferMapCount((uint64_t)this);
    if (*((_BYTE *)this + 52) != 4)
      *((_BYTE *)this + 52) = 3;
    v25 = (WTF *)v27;
    v26 = 8;
    v28 = 1;
    WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebGPU::Buffer *)((char *)this + 72), (WTF *)&v25);
    *((_BYTE *)this + 216) = v28;
    v4 = v25;
    if (v27 != (_BYTE *)v25 && v25)
    {
      v25 = 0;
      LODWORD(v26) = 0;
      WTF::fastFree(v4, a2);
    }
    v3 = *((unsigned __int8 *)this + 52);
  }
  if (v3 != 4)
    *((_BYTE *)this + 52) = 4;
  v5 = *((_QWORD *)this + 33);
  if (!v5)
  {
    v7 = 0;
    v6 = 0;
LABEL_19:
    v9 = v7;
    v7 = v5 + 8 * v6;
    if (!v5)
    {
      v11 = 0;
      if (v9)
        goto LABEL_26;
      goto LABEL_33;
    }
    goto LABEL_17;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = v5 + 8 * v6;
  if (!*(_DWORD *)(v5 - 12))
    goto LABEL_19;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    v9 = *((_QWORD *)this + 33);
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 8;
      v8 -= 8;
      if (!v8)
      {
        v9 = v7;
        break;
      }
    }
LABEL_17:
    v10 = *(unsigned int *)(v5 - 4);
    goto LABEL_23;
  }
  v10 = 0;
  v9 = *((_QWORD *)this + 33);
LABEL_23:
  v11 = v5 + 8 * v10;
  if (v11 != v9)
  {
LABEL_26:
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v12 = v9 + 8;
      v9 = v7;
      if (v12 != v7)
      {
        v9 = v12;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v11)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_33:
  if (v5)
  {
    v13 = v5 + 8 * *(unsigned int *)(v5 - 4);
    if (v9 == v13)
      goto LABEL_35;
    do
    {
LABEL_51:
      v20 = *(_QWORD *)(*(_QWORD *)v9 + 8);
      *(_BYTE *)(v20 + 76) = 1;
      v21 = *(_QWORD *)(v20 + 56);
      if (v21)
      {
        v22 = *(WebGPU::CommandBuffer **)(v21 + 8);
        if (v22)
          WebGPU::CommandBuffer::makeInvalid(v22, *(NSString **)(v20 + 64));
      }
      v23 = v7;
      if (v9 + 8 != v7)
      {
        v23 = v9 + 8;
        while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
        {
          v23 += 8;
          if (v23 == v7)
          {
            v23 = v7;
            break;
          }
        }
      }
      v9 = v11;
      if (v23 != v11)
      {
        v9 = v23;
        if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
        {
          while (1)
          {
            v24 = v9 + 8;
            v9 = v7;
            if (v24 != v7)
            {
              v9 = v24;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v11)
              break;
            if (*(_QWORD *)(*(_QWORD *)v9 + 8))
              goto LABEL_50;
          }
          v9 = v11;
        }
      }
LABEL_50:
      ++*((_DWORD *)this + 68);
    }
    while (v9 != v13);
    v5 = *((_QWORD *)this + 33);
    if (v5)
      goto LABEL_36;
LABEL_70:
    LODWORD(v19) = 0;
    *((_DWORD *)this + 68) = 0;
    goto LABEL_71;
  }
  v13 = 0;
  if (v9)
    goto LABEL_51;
LABEL_35:
  if (!v5)
    goto LABEL_70;
LABEL_36:
  *((_QWORD *)this + 33) = 0;
  v14 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v14)
  {
    for (i = 0; i != v14; ++i)
    {
      v16 = *(unsigned int **)(v5 + 8 * i);
      if (v16 != (unsigned int *)-1)
      {
        *(_QWORD *)(v5 + 8 * i) = 0;
        if (v16)
        {
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, a2);
          }
        }
      }
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), a2);
  v19 = *((_QWORD *)this + 33);
  *((_DWORD *)this + 68) = 0;
  if (v19)
  {
    LODWORD(v19) = *(_DWORD *)(v19 - 12);
    if (v19 > 0x7FFFFFFE)
      LODWORD(v19) = 0x7FFFFFFF;
  }
LABEL_71:
  *((_DWORD *)this + 69) = 2 * v19;
  objc_storeStrong((id *)this + 2, *(id *)(*((_QWORD *)this + 32) + 272));
}

void sub_182432A84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  WTF *v11;

  if (v11 != a10)
  {
    if (a10)
      WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuBufferGetMapState(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 52) - 2;
  if (v1 > 2)
    return 2;
  else
    return dword_18260EFD0[(char)v1];
}

uint64_t wgpuBufferGetBufferContents(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 16), "contents");
}

uint64_t wgpuBufferGetInitialSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t wgpuBufferGetCurrentSize(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 16), "length");
}

uint64_t wgpuBufferMapAsync(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  unint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E0FD1678;
  v12[1] = a5;
  v12[2] = a6;
  if (a4 == -1)
  {
    v13 = objc_msgSend(*(id *)(a1 + 16), "length");
    if (v13 >= a3)
      a4 = v13 - a3;
    else
      a4 = 0;
    if (*(_BYTE *)(a1 + 52) == 4)
      goto LABEL_9;
  }
  else if (*(_BYTE *)(a1 + 52) == 4)
  {
    goto LABEL_9;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    v14 = CFSTR("GPUBuffer.mapAsync: Buffer is not valid");
    goto LABEL_17;
  }
LABEL_9:
  if ((a3 & 7) != 0)
  {
    v14 = CFSTR("GPUBuffer.mapAsync: Offset is not divisible by 8");
  }
  else if ((a4 & 3) != 0)
  {
    v14 = CFSTR("GPUBuffer.mapAsync: range size is not divisible by 4");
  }
  else if (__CFADD__(a3, a4) || a3 + a4 > objc_msgSend(*(id *)(a1 + 16), "length"))
  {
    v14 = CFSTR("GPUBuffer.mapAsync: offset and rangeSize overflowed");
  }
  else if (*(_BYTE *)(a1 + 52) == 3)
  {
    if ((a2 & 3u) - 3 >= 0xFFFFFFFE)
    {
      if ((a2 & 1) == 0 || (*(_BYTE *)(a1 + 48) & 1) != 0)
      {
        if ((a2 & 2) == 0 || (*(_BYTE *)(a1 + 48) & 2) != 0)
        {
          *(_BYTE *)(a1 + 52) = 2;
          *(_DWORD *)(a1 + 224) = a2;
          v26 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 16);
          ++*(_DWORD *)a1;
          *(_QWORD *)&v29 = a3;
          *((_QWORD *)&v29 + 1) = a4;
          v27 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v27 = &off_1E0FD1650;
          *(_QWORD *)(v27 + 8) = a1;
          *(_OWORD *)(v27 + 16) = v29;
          v28 = 0;
          v30 = 0;
          v31 = v27;
          *(_QWORD *)(v27 + 32) = v12;
          WebGPU::Queue::onSubmittedWorkDone(v26, &v31);
          result = v31;
          v31 = 0;
          if (result)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          return result;
        }
        v14 = CFSTR("GPUBuffer.mapAsync: (mode & Write) && !(usage & Write)");
      }
      else
      {
        v14 = CFSTR("GPUBuffer.mapAsync: (mode & Read) && !(usage & Read)");
      }
    }
    else
    {
      v14 = CFSTR("GPUBuffer.mapAsync: readWriteModeFlags != Read && readWriteModeFlags != Write");
    }
  }
  else
  {
    v14 = CFSTR("GPUBuffer.mapAsync: state != Unmapped");
  }
LABEL_17:
  v15 = *(_QWORD *)(a1 + 256);
  MEMORY[0x186DAB230](&v28, v14);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = 32 * *(unsigned int *)(v15 + 44);
  v18 = v16 + v17;
  while (v17)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v18 -= 32;
    v17 -= 32;
    if (!v19)
    {
      v20 = v16 + v17;
      if (!*(_BYTE *)(v20 + 16))
      {
        v21 = v28;
        v28 = 0;
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = v21;
        *(_BYTE *)(v20 + 16) = 1;
      }
      goto LABEL_25;
    }
  }
  v22 = *(_QWORD *)(v15 + 24);
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v22 + 16))(v22, 1, &v28);
    v23 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
LABEL_25:
  v24 = v28;
  v28 = 0;
  if (v24)
  {
    if (*v24 == 2)
      WTF::StringImpl::destroy();
    else
      *v24 -= 2;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v12 + 16))(v12, 1);
  return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
}

void sub_182432DAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  void *v16;

  v15 = a14;
  a14 = 0;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0::~$_0((uint64_t)&a10, v16);
    _Unwind_Resume(a1);
  }
  WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0::~$_0((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_182432DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    _Unwind_Resume(a1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

WTF *wgpuBufferUnmap(_BYTE *a1)
{
  void *v2;
  WTF *result;
  WTF *v5;
  uint64_t v6;
  _BYTE v7[128];
  char v8;

  WebGPU::Buffer::decrementBufferMapCount((uint64_t)a1);
  if (a1[52] != 4)
    a1[52] = 3;
  v5 = (WTF *)v7;
  v6 = 8;
  v8 = 1;
  WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 72), (WTF *)&v5);
  a1[216] = v8;
  result = v5;
  if (v7 != (_BYTE *)v5 && v5 != 0)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void sub_182432EF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  WTF *v11;

  if (v11 != a10 && a10 != 0)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

_DWORD *wgpuBufferSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 16), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_182432FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuBufferGetUsage(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

WTF *WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
    v6 = *(WTF **)result;
    if (!v5)
    {
LABEL_5:
      v7 = *((unsigned int *)a2 + 3);
      if (v5 != (_DWORD)v7)
      {
        v8 = 16 * v5;
        v9 = (_OWORD *)((char *)v6 + v8);
        v10 = (__int128 *)(*(_QWORD *)a2 + v8);
        v11 = 16 * v7 - v8;
        do
        {
          v12 = *v10++;
          *v9++ = v12;
          v11 -= 16;
        }
        while (v11);
        v5 = *((_DWORD *)a2 + 3);
      }
      *((_DWORD *)v2 + 3) = v5;
      return v2;
    }
LABEL_4:
    memmove(v6, *(const void **)a2, 16 * v5);
    v5 = *((_DWORD *)v2 + 3);
    v6 = *(WTF **)v2;
    goto LABEL_5;
  }
  v13 = *((_DWORD *)result + 2);
  if (v5 <= v13)
  {
LABEL_36:
    v5 = *((_DWORD *)v2 + 3);
    v6 = *(WTF **)v2;
    if (!v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v13)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if ((WTF *)((char *)v2 + 16) != *(WTF **)v2 && result)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(result, a2);
      result = *(WTF **)v2;
    }
    if (result)
    {
      v14 = *((unsigned int *)a2 + 3);
      if (*((_DWORD *)v2 + 2) >= v14)
        goto LABEL_36;
    }
    else
    {
      *(_QWORD *)v2 = (char *)v2 + 16;
      *((_DWORD *)v2 + 2) = 8;
      v14 = *((unsigned int *)a2 + 3);
      if (v14 <= 8)
        goto LABEL_36;
    }
  }
  else
  {
    v14 = *((unsigned int *)a2 + 3);
    if (!(_DWORD)v14)
      goto LABEL_36;
  }
  v15 = *(WTF **)v2;
  v16 = *((unsigned int *)v2 + 3);
  if (v14 < 9)
  {
    v17 = (_OWORD *)((char *)v2 + 16);
    *(_QWORD *)v2 = (char *)v2 + 16;
    *((_DWORD *)v2 + 2) = 8;
    goto LABEL_28;
  }
  if (!(v14 >> 28))
  {
    v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *((_DWORD *)v2 + 2) = v14;
    *(_QWORD *)v2 = v17;
LABEL_28:
    if ((_DWORD)v16)
    {
      v18 = 16 * v16;
      v19 = v15;
      do
      {
        v20 = *(_OWORD *)v19;
        v19 = (WTF *)((char *)v19 + 16);
        *v17++ = v20;
        v18 -= 16;
      }
      while (v18);
    }
    if ((WTF *)((char *)v2 + 16) != v15 && v15)
    {
      if (*(WTF **)v2 == v15)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v15, a2);
    }
    goto LABEL_36;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebGPU14CommandEncoderES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    if (!v3)
      return 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v2 + 8 * --v3);
      if ((unint64_t)(v6 + 1) >= 2 && !*(_QWORD *)(v6 + 8))
      {
        *(_QWORD *)(v2 + 8 * v3) = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)v6);
          WTF::fastFree((WTF *)v6, a2);
        }
        *(_QWORD *)(v2 + 8 * v3) = -1;
        ++v5;
      }
    }
    while (v3);
    v9 = *a1;
    v2 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v9 - 16) += v5;
      v10 = *a1;
      if (*a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v9 = *a1;
    }
    if (v9)
    {
      v12 = *(_DWORD *)(v9 - 4);
      v13 = *(unsigned int *)(v9 - 12);
      if (6 * (int)v13 < v12 && v12 >= 9)
      {
        v15 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
        v17 = (v16 | HIWORD(v16)) + 1;
        if (v17 > 0x400)
        {
          if (v17 > 2 * v13)
            goto LABEL_31;
        }
        else if (3 * v17 > 4 * v13)
        {
LABEL_29:
          if ((double)v17 * 0.604166667 > (double)v13)
            goto LABEL_33;
          goto LABEL_32;
        }
        LODWORD(v17) = 2 * v17;
        if (v17 <= 0x400)
          goto LABEL_29;
LABEL_31:
        if ((double)v17 * 0.416666667 > (double)v13)
        {
LABEL_33:
          if (v17 <= 8)
            v18 = 8;
          else
            v18 = v17;
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v18, 0);
          return v2;
        }
LABEL_32:
        LODWORD(v17) = 2 * v17;
        goto LABEL_33;
      }
    }
  }
  return v2;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (unsigned int **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int **v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = (unsigned int *)*a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (unsigned int **)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 == (unsigned int *)-1)
    {
      v9 = (unsigned int **)(v6 + 8 * v16);
      goto LABEL_6;
    }
    if (!v18)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = (unsigned int *)*a2;
        v17 = v9;
      }
      *a2 = 0;
      result = (uint64_t *)*v17;
      *v17 = v10;
      if (!result)
        goto LABEL_17;
      do
      {
        v20 = __ldaxr((unsigned int *)result);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unsigned int *)result));
      if (!v21)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        v22 = *v4;
        if (*v4)
        {
LABEL_18:
          ++*(_DWORD *)(v22 - 12);
          v23 = *v4;
          if (*v4)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else
      {
LABEL_17:
        v22 = *v4;
        if (*v4)
          goto LABEL_18;
      }
      *(_DWORD *)(v22 - 12) = 1;
      v23 = *v4;
      if (*v4)
      {
LABEL_19:
        v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
        v25 = *(unsigned int *)(v23 - 4);
        if (v25 <= 0x400)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      v24 = *(unsigned int *)(v23 - 16);
      v25 = *(unsigned int *)(v23 - 4);
      if (v25 <= 0x400)
      {
LABEL_20:
        if (3 * v25 > 4 * v24)
        {
LABEL_33:
          *(_QWORD *)a3 = v17;
          *(_QWORD *)(a3 + 8) = v23 + 8 * v25;
          *(_BYTE *)(a3 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v25)
        {
          result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v4, 8u, v17);
          v17 = (unsigned int **)result;
          v23 = *v4;
          if (!*v4)
          {
LABEL_23:
            v25 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v25 = *(unsigned int *)(v23 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v4, (_DWORD)v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25)), v17);
        v17 = (unsigned int **)result;
        v23 = *v4;
        if (!*v4)
          goto LABEL_23;
        goto LABEL_32;
      }
LABEL_30:
      if (v25 > 2 * v24)
        goto LABEL_33;
      goto LABEL_31;
    }
    if (v18 == v10)
      break;
LABEL_6:
    v14 = i + v16;
  }
  if ((v7 & 1) != 0)
    v19 = 0;
  else
    v19 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v6 + 8 * v19;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

unint64_t WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  WTF *v22;
  uint64_t v23;

  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 16 * v6 <= a3))
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= (unint64_t)a2)
      v15 = (unint64_t)a2;
    else
      v15 = v14;
    if (v15 <= v12)
      return a3;
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 9)
    {
      v17 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_43;
      v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 16 * v16;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      v19 = (WTF *)((char *)v19 + 16);
      *v17++ = v20;
      v18 -= 16;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (v10 < 9)
    {
      v11 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      goto LABEL_35;
    }
    if (!(v10 >> 28))
    {
      v11 = WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
LABEL_35:
      v23 = 0;
      do
      {
        *(_OWORD *)(v11 + v23) = *(_OWORD *)((char *)v5 + v23);
        v23 += 16;
      }
      while (16 * v6 != v23);
      v22 = *(WTF **)a1;
      if ((WTF *)(a1 + 16) != v5 && v5)
      {
        if (v22 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, a2);
        v22 = *(WTF **)a1;
      }
      return (unint64_t)v22 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x182433918);
  }
  v22 = *(WTF **)a1;
  return (unint64_t)v22 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 *v30;
  __n128 *v31;
  __n128 *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 *v49;
  unint64_t v50;
  unint64_t v51;
  __n128 *v52;
  BOOL v53;
  __n128 v54;
  unint64_t v55;
  __n128 *v56;
  unint64_t v57;
  unint64_t n128_u64;
  __n128 *v59;
  unint64_t v60;
  __n128 *v61;
  unint64_t v62;
  unint64_t v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __n128 *v70;
  unint64_t v71;
  BOOL v73;
  uint64_t v74;
  __n128 *v75;
  __n128 *v76;
  __n128 *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  int64_t v83;
  BOOL v84;
  uint64_t v85;
  __n128 *v86;
  unint64_t v87;
  BOOL v88;
  __n128 *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 *v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  __n128 *v104;
  unint64_t v105;
  unint64_t v106;
  __n128 *v107;
  uint64_t v108;
  uint64_t v109;
  __n128 *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  __n128 *v114;
  __n128 *v115;
  unint64_t v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;
  __n128 *v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  __int128 *v18;
  unint64_t v19;
  __n128 *v20;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v11 = a2[-1].n128_u64[0];
      v10 = a2 - 1;
      if (v11 < a1->n128_u64[0])
        goto LABEL_10;
      return 1;
    case 3:
      v12 = (__int128 *)&a1[1];
      v13 = a1[1].n128_u64[0];
      v15 = a2[-1].n128_u64[0];
      v10 = a2 - 1;
      v14 = v15;
      if (v13 >= a1->n128_u64[0])
      {
        if (v14 < v13)
        {
          v25 = *v12;
          *v12 = (__int128)*v10;
          *v10 = (__n128)v25;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
LABEL_46:
            v41 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v41;
            return 1;
          }
        }
      }
      else
      {
        if (v14 < v13)
        {
LABEL_10:
          v16 = *a1;
          *a1 = *v10;
LABEL_11:
          *v10 = v16;
          return 1;
        }
        v37 = (__int128)*a1;
        *a1 = (__n128)*v12;
        *v12 = v37;
        if (v10->n128_u64[0] < a1[1].n128_u64[0])
        {
          v16 = (__n128)*v12;
          *v12 = (__int128)*v10;
          goto LABEL_11;
        }
      }
      return 1;
    case 4:
      v12 = (__int128 *)&a1[1];
      v17 = a1[1].n128_u64[0];
      v18 = (__int128 *)&a1[2];
      v19 = a1[2].n128_u64[0];
      v20 = a2 - 1;
      v21 = a1->n128_u64[0];
      if (v17 >= a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          v26 = *v12;
          *v12 = *v18;
          *v18 = v26;
          if (*(_QWORD *)v12 < v21)
          {
            v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *v12 = v38;
          if (v19 >= a1[1].n128_u64[0])
            goto LABEL_43;
          v22 = *v12;
          *v12 = *v18;
        }
        else
        {
          v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *v18 = v22;
      }
LABEL_43:
      if (v20->n128_u64[0] < *(_QWORD *)v18)
      {
        v39 = (__n128)*v18;
        *v18 = (__int128)*v20;
        *v20 = v39;
        if (*(_QWORD *)v18 < *(_QWORD *)v12)
        {
          v40 = *v12;
          *v12 = *v18;
          *v18 = v40;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
            goto LABEL_46;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      v4 = a1 + 2;
      v5 = a1[2].n128_u64[0];
      v6 = a1 + 1;
      v7 = a1[1].n128_u64[0];
      v8 = a1->n128_u64[0];
      if (v7 >= a1->n128_u64[0])
      {
        if (v5 < v7)
        {
          v23 = *v6;
          *v6 = *v4;
          *v4 = v23;
          if (v6->n128_u64[0] < v8)
          {
            v24 = *a1;
            *a1 = *v6;
            *v6 = v24;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          v28 = *a1;
          *a1 = *v6;
          *v6 = v28;
          if (v5 >= a1[1].n128_u64[0])
            goto LABEL_28;
          v9 = *v6;
          *v6 = *v4;
        }
        else
        {
          v9 = *a1;
          *a1 = *v4;
        }
        *v4 = v9;
      }
LABEL_28:
      v29 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v30 = 0;
      v31 = 0;
      while (1)
      {
        v32 = v29->n128_u64[0];
        if (v29->n128_u64[0] < v4->n128_u64[0])
          break;
LABEL_31:
        v4 = v29;
        v30 += 16;
        if (++v29 == a2)
          return 1;
      }
      v33 = v29->n128_i64[1];
      v34 = v30;
      do
      {
        *(__n128 *)((char *)a1 + v34 + 48) = *(__n128 *)((char *)a1 + v34 + 32);
        if (v34 == -32)
        {
          a1->n128_u64[0] = v32;
          a1->n128_u64[1] = v33;
          if (++v31 != 8)
            goto LABEL_31;
          return &v29[1] == a2;
        }
        v35 = *(unint64_t *)((char *)a1[1].n128_u64 + v34);
        v34 -= 16;
      }
      while (v32 < v35);
      v36 = (uint64_t)a1 + v34;
      *(_QWORD *)(v36 + 48) = v32;
      *(_QWORD *)(v36 + 56) = v33;
      if (++v31 != 8)
        goto LABEL_31;
      return &v29[1] == a2;
  }
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;

  v6 = a2->n128_u64[0];
  v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4 < *a3)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0,void,WGPUQueueWorkDoneStatus>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;

  *a1 = &off_1E0FD1650;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebGPU::Buffer *)a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0,void,WGPUQueueWorkDoneStatus>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WebGPU::Buffer *v4;
  WTF *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = &off_1E0FD1650;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebGPU::Buffer *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebGPU::Buffer::~Buffer(v4, a2);
      WTF::fastFree(v6, v7);
      v5 = this;
      return WTF::fastFree(v5, a2);
    }
    --*(_DWORD *)v4;
  }
  v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF *WTF::Detail::CallableWrapper<WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0,void,WGPUQueueWorkDoneStatus>::call(WTF *result, int a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _BYTE v27[128];
  char v28;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v4 + 52) != 2)
    goto LABEL_53;
  *(_BYTE *)(v4 + 52) = 0;
  v5 = *(_QWORD *)(v4 + 264);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
    if (*(_DWORD *)(v5 - 12))
    {
      if (!(_DWORD)v6)
      {
        v10 = 0;
        v9 = *(_QWORD *)(v4 + 264);
LABEL_15:
        v11 = v5 + 8 * v10;
        if (v11 != v9)
        {
LABEL_18:
          while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
          {
            v12 = v9 + 8;
            v9 = v7;
            if (v12 != v7)
            {
              v9 = v12;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v11)
            {
              v9 = v11;
              goto LABEL_25;
            }
          }
        }
        goto LABEL_25;
      }
      v8 = 8 * v6;
      v9 = *(_QWORD *)(v4 + 264);
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 8;
        v8 -= 8;
        if (!v8)
        {
          v9 = v7;
          break;
        }
      }
LABEL_9:
      v10 = *(unsigned int *)(v5 - 4);
      goto LABEL_15;
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v7;
  v7 = v5 + 8 * v6;
  if (v5)
    goto LABEL_9;
  v11 = 0;
  if (v9)
    goto LABEL_18;
LABEL_25:
  if (v5)
    v5 += 8 * *(unsigned int *)(v5 - 4);
  if (v9 != v5)
  {
    v13 = *(_DWORD *)(v4 + 272);
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)v9 + 8);
      v15 = *(_DWORD *)(v14 + 72) + 1;
      *(_DWORD *)(v14 + 72) = v15;
      v16 = *(_QWORD *)(v14 + 56);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
          *(_DWORD *)(v17 + 40) = v15;
      }
      v18 = v9 + 8;
      v19 = v7;
      if (v18 != v7)
      {
        v19 = v18;
        while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
        {
          v19 += 8;
          if (v19 == v7)
          {
            v19 = v7;
            break;
          }
        }
      }
      v9 = v11;
      if (v19 != v11)
      {
        v9 = v19;
        if (!*(_QWORD *)(*(_QWORD *)v19 + 8))
        {
          while (1)
          {
            v20 = v9 + 8;
            v9 = v7;
            if (v20 != v7)
            {
              v9 = v20;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v11)
              break;
            if (*(_QWORD *)(*(_QWORD *)v9 + 8))
              goto LABEL_30;
          }
          v9 = v11;
        }
      }
LABEL_30:
      ++v13;
    }
    while (v9 != v5);
    *(_DWORD *)(v4 + 272) = v13;
  }
  v21 = *((_QWORD *)result + 2);
  v22 = *((_QWORD *)result + 3) + v21;
  *(_QWORD *)(v4 + 56) = v21;
  *(_QWORD *)(v4 + 64) = v22;
  v25 = (WTF *)v27;
  v26 = 8;
  v28 = 1;
  WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v4 + 72), (WTF *)&v25);
  *(_BYTE *)(v4 + 216) = v28;
  result = v25;
  if (v27 != (_BYTE *)v25 && v25)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    result = (WTF *)WTF::fastFree(result, v23);
  }
LABEL_53:
  switch(a2)
  {
    case 0:
      v24 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, 0);
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    case 1:
      goto LABEL_59;
    case 2:
      v24 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, 2);
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    case 3:
      v24 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, 3);
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    default:
      if (a2 == 0x7FFFFFFF)
      {
LABEL_59:
        v24 = *((_QWORD *)v3 + 4);
        *((_QWORD *)v3 + 4) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, 1);
        return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      return result;
  }
}

void sub_182434E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_182434E98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  WTF *v11;

  if (v11 != a10)
  {
    if (a10)
      WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<wgpuBufferMapAsync::$_0,void,WGPUBufferMapAsyncStatus>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16));
}

uint64_t WebGPU::CommandBuffer::CommandBuffer(uint64_t a1, void *a2, void *a3, unsigned __int8 **a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned __int8 *v11;
  int v13;

  v7 = a2;
  v8 = a3;
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = v7;
  *(_QWORD *)(a1 + 16) = v9;
  v10 = v8;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v11 = *a4;
  if (__ldaxr(*a4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v11);
LABEL_5:
  ++*((_QWORD *)v11 + 1);
  v13 = __ldxr(v11);
  if (v13 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_10:
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 63) = 0;

  return a1;
}

void sub_182434FB4(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  _QWORD *v4;
  void *v6;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v4, v6);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::CommandBuffer::CommandBuffer(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_5:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 63) = 0;
  return a1;
}

void sub_182435090(_Unwind_Exception *a1)
{
  id *v1;
  _QWORD *v2;
  void *v4;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v2, v4);
  _Unwind_Resume(a1);
}

void WebGPU::CommandBuffer::~CommandBuffer(WebGPU::CommandBuffer *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 6, v2);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebGPU::CommandBuffer::makeInvalid(WebGPU::CommandBuffer *this, NSString *a2)
{
  void *v4;
  void *v5;
  NSString *v6;

  v6 = a2;
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4 && (unint64_t)objc_msgSend(v4, "status") <= 1)
  {
    objc_msgSend(*((id *)this + 3), "setSignaledValue:", 1);
    objc_storeStrong((id *)this + 7, a2);
    WebGPU::Queue::commitMTLCommandBuffer(*(_QWORD *)(*((_QWORD *)this + 6) + 16), *((void **)this + 2));
    v5 = (void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;

  }
}

void sub_1824351DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebGPU::CommandBuffer::makeInvalidDueToCommit(id *this, NSString *a2)
{
  NSString *v4;
  id v5;
  WTF *v6;
  void *v7;
  id v8;
  WebGPU::CommandBuffer *v9;
  WTF *v10;
  void *v11;
  _QWORD v12[4];
  WebGPU::CommandBuffer *v13;

  v4 = a2;
  objc_storeStrong(this + 4, this[2]);
  v5 = this[2];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3321888768;
  v12[2] = ___ZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSString_block_invoke;
  v12[3] = &__block_descriptor_40_ea8_32c69_ZTSKZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSStringE3__0_e28_v16__0___MTLCommandBuffer__8l;
  *(_DWORD *)this += 2;
  v13 = (WebGPU::CommandBuffer *)this;
  objc_msgSend(v5, "addCompletedHandler:", v12, this);
  if (*(_DWORD *)this == 1)
  {
    WebGPU::CommandBuffer::~CommandBuffer((WebGPU::CommandBuffer *)this);
    WTF::fastFree(v6, v7);
  }
  else
  {
    --*(_DWORD *)this;
  }
  objc_storeStrong(this + 7, a2);
  v8 = this[2];
  this[2] = 0;

  v9 = v13;
  v13 = 0;
  if (!v9)
    goto LABEL_7;
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
LABEL_7:

    return;
  }
  WebGPU::CommandBuffer::~CommandBuffer(v9);
  WTF::fastFree(v10, v11);

}

void sub_1824352FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebGPU::CommandBuffer *a9)
{
  void *v9;
  WebGPU::CommandBuffer **v10;

  WebGPU::CommandBuffer::makeInvalidDueToCommit(NSString *)::$_0::~$_0(v10);
  WebGPU::CommandBuffer::makeInvalidDueToCommit(NSString *)::$_0::~$_0(&a9);

  _Unwind_Resume(a1);
}

void ___ZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSString_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(*(_QWORD *)(a1 + 32) + 64));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

}

uint64_t __copy_helper_block_ea8_32c69_ZTSKZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSStringE3__0(uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a2 + 32);
  ++*v2;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

WebGPU::CommandBuffer *__destroy_helper_block_ea8_32c69_ZTSKZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSStringE3__0(uint64_t a1)
{
  WebGPU::CommandBuffer *result;
  WTF *v3;
  void *v4;

  result = *(WebGPU::CommandBuffer **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::CommandBuffer::~CommandBuffer(result);
      return (WebGPU::CommandBuffer *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebGPU::CommandBuffer **WebGPU::CommandBuffer::makeInvalidDueToCommit(NSString *)::$_0::~$_0(WebGPU::CommandBuffer **a1)
{
  WebGPU::CommandBuffer *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::CommandBuffer::~CommandBuffer(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

_DWORD *wgpuCommandBufferReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::CommandBuffer *wgpuCommandBufferRelease(WebGPU::CommandBuffer *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::CommandBuffer::~CommandBuffer(result);
    return (WebGPU::CommandBuffer *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuCommandBufferSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 16), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_1824354D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_18243559C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebGPU::Device::createCommandEncoder(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  id v8;
  void *v9;
  MTLCommandBufferDescriptor *v10;
  const char *v11;
  uint64_t v12;
  __CFString *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unsigned __int8 *v22;
  int v24;
  _DWORD *v25;
  id v26;
  id v27;

  if (*a2 || (v6 = *(void **)(a1 + 8)) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x58);
    WebGPU::CommandEncoder::CommandEncoder(v5, (unsigned __int8 **)a1);
    *a3 = v5;
    return;
  }
  v8 = v6;
  v9 = v8;
  if (WebGPU::GPUFrameCapture::enabled)
  {
    WebGPU::GPUFrameCapture::captureFrame(v8);
    WebGPU::GPUFrameCapture::enabled = 0;
  }

  v10 = (MTLCommandBufferDescriptor *)objc_opt_new();
  -[MTLCommandBufferDescriptor setErrorOptions:](v10, "setErrorOptions:", 1);
  WebGPU::Queue::commandBufferWithDescriptor(*(WebGPU::Queue **)(a1 + 16), v10, &v26);
  if (v26)
  {
    v11 = (const char *)a2[1];
    if (v11)
      strlen(v11);
    WTF::String::fromUTF8();
    if (v25)
      v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E0FD9588;
    objc_msgSend(v26, "setLabel:", v13);

    if (v25)
    {
      if (*v25 == 2)
        WTF::StringImpl::destroy();
      else
        *v25 -= 2;
    }
    v14 = v27;
    v15 = v26;
    v16 = v14;
    v17 = WTF::fastMalloc((WTF *)0x58);
    v18 = v15;
    v19 = v16;
    *(_DWORD *)v17 = 1;
    *(_BYTE *)(v17 + 4) = 0;
    *(_QWORD *)(v17 + 8) = 0;
    v20 = v18;
    *(_QWORD *)(v17 + 16) = v20;
    v21 = v19;
    *(_QWORD *)(v17 + 24) = v21;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 61) = 0u;
    v22 = *(unsigned __int8 **)a1;
    if (__ldaxr(*(unsigned __int8 **)a1))
    {
      __clrex();
    }
    else if (!__stxr(1u, v22))
    {
      goto LABEL_21;
    }
    MEMORY[0x186DAB1AC](v22);
LABEL_21:
    ++*((_QWORD *)v22 + 1);
    v24 = __ldxr(v22);
    if (v24 == 1)
    {
      if (!__stlxr(0, v22))
        goto LABEL_26;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_26:
    *(_QWORD *)(v17 + 80) = a1;

    *a3 = v17;
    goto LABEL_27;
  }
  v12 = WTF::fastMalloc((WTF *)0x58);
  WebGPU::CommandEncoder::CommandEncoder(v12, (unsigned __int8 **)a1);
  *a3 = v12;
LABEL_27:

}

void sub_182435844(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  WTF *v13;

  WTF::fastFree(v13, a2);

  _Unwind_Resume(a1);
}

void sub_182435944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182435954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182435964(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::CommandEncoder::CommandEncoder(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 69) = 0;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_5:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
    {
      *(_QWORD *)(a1 + 80) = a2;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  *(_QWORD *)(a1 + 80) = a2;
  return a1;
}

void sub_182435A3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  v5 = *(unsigned int **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v2, v8);
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::~CommandEncoder(WebGPU::CommandEncoder *this)
{
  void *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
  WebGPU::Queue::commitMTLCommandBuffer(*(_QWORD *)(*((_QWORD *)this + 10) + 16), *((void **)this + 2));
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 10, v2);

  v4 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }

  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v7);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void sub_182435B9C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v2 + 80), a2);

  v5 = *(unsigned int **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((_QWORD *)(v2 + 8), v8);
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::finalizeBlitCommandEncoder(id *this)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = this[4];
  v3 = *((_QWORD *)this[10] + 2);
  v4 = this[2];
  if (v4)
  {
    objc_msgSend(*(id *)(v3 + 104), "objectForKey:", v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (v5 != v2)
      return;
LABEL_5:
    WebGPU::CommandEncoder::endEncoding((uint64_t)this, this[4]);
    v6 = this[4];
    this[4] = 0;

    v7 = this[5];
    this[5] = 0;

    WebGPU::Queue::setEncoderForBuffer(*((_QWORD *)this[10] + 2), this[2], 0);
    return;
  }

  if (!v2)
    goto LABEL_5;
}

void sub_182435CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebGPU::CommandEncoder::ensureBlitCommandEncoder(id *this)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = objc_msgSend(this[2], "status");
  v3 = this[4];
  if (v2)
  {
    this[4] = 0;

    return 0;
  }
  if (!v3)
    goto LABEL_7;
  v4 = v3;
  v5 = *((_QWORD *)this[10] + 2);
  v6 = this[2];
  if (v6)
  {
    objc_msgSend(*(id *)(v5 + 104), "objectForKey:", v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();

    if (v7 != v4)
    {
LABEL_6:
      WebGPU::CommandEncoder::finalizeBlitCommandEncoder(this);
LABEL_7:
      v8 = (void *)objc_opt_new();
      objc_msgSend(this[2], "blitCommandEncoderWithDescriptor:", v8);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = this[4];
      this[4] = (id)v9;

      v11 = this[4];
      v12 = v11;
      objc_storeStrong(this + 5, v11);
      WebGPU::Queue::setEncoderForBuffer(*((_QWORD *)this[10] + 2), this[2], v12);

      v13 = this[4];
      return v13;
    }
  }
  else
  {

    if (v4)
      goto LABEL_6;
  }
  return this[4];
}

void sub_182435E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182435E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL WebGPU::CommandEncoder::encoderIsCurrent(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
  v5 = *(id *)(a1 + 16);
  if (v5)
  {
    objc_msgSend(*(id *)(v4 + 104), "objectForKey:", v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }

  return v6 == v3;
}

void sub_182435ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::endEncoding(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
  v4 = *(id *)(a1 + 16);
  if (v4)
  {
    objc_msgSend(*(id *)(v3 + 104), "objectForKey:", v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();

    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
    if (v5 != v10)
    {
LABEL_3:
      WebGPU::Queue::endEncoding(v6, v5, *(void **)(a1 + 16));
      v7 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

      WebGPU::Queue::setEncoderForBuffer(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16), *(void **)(a1 + 16), 0);
      goto LABEL_7;
    }
  }
  else
  {
    v5 = 0;

    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
    if (v10)
      goto LABEL_3;
  }
  WebGPU::Queue::endEncoding(v6, *(void **)(a1 + 40), *(void **)(a1 + 16));
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;

  WebGPU::Queue::setEncoderForBuffer(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16), *(void **)(a1 + 16), 0);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (*(_QWORD *)(a1 + 64))
    WebGPU::CommandEncoder::discardCommandBuffer((WebGPU::CommandEncoder *)a1);
LABEL_7:

}

void sub_182436000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182436018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182436030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18243604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::makeInvalid(WebGPU::CommandEncoder *this, NSString *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  WebGPU::CommandBuffer *v8;
  NSString *v9;

  v9 = a2;
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    if ((unint64_t)objc_msgSend(v4, "status") <= 1)
    {
      WebGPU::CommandEncoder::endEncoding((uint64_t)this, *((void **)this + 5));
      v5 = (void *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = 0;

      objc_msgSend(*((id *)this + 3), "setSignaledValue:", 1);
      WebGPU::Queue::commitMTLCommandBuffer(*(_QWORD *)(*((_QWORD *)this + 10) + 16), *((void **)this + 2));
      v6 = (void *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;

      objc_storeStrong((id *)this + 8, a2);
      v7 = *((_QWORD *)this + 7);
      if (v7)
      {
        v8 = *(WebGPU::CommandBuffer **)(v7 + 8);
        if (v8)
          WebGPU::CommandBuffer::makeInvalid(v8, v9);
      }
    }
  }

}

void sub_182436110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::discardCommandBuffer(WebGPU::CommandEncoder *this)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2 && (unint64_t)objc_msgSend(v2, "status") <= 1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 10) + 16);
    v4 = *((id *)this + 2);
    if (v4)
    {
      objc_msgSend(*(id *)(v3 + 104), "objectForKey:", v4);
      v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }

    WebGPU::Queue::endEncoding(*(_QWORD *)(*((_QWORD *)this + 10) + 16), v6, *((void **)this + 2));
    objc_msgSend(*((id *)this + 3), "setSignaledValue:", 1);
    WebGPU::Queue::commitMTLCommandBuffer(*(_QWORD *)(*((_QWORD *)this + 10) + 16), *((void **)this + 2));
    v5 = (void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;

  }
}

void sub_1824361F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182436208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::runClearEncoder(uint64_t a1, void *a2, void *a3, int a4, int a5, uint64_t a6, void *a7, float a8)
{
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  void *v64;
  id v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  id v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[128];
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v68 = a3;
  v67 = a7;
  v64 = v12;
  if (objc_msgSend(v12, "count") || (a4 & 1) != 0 || (a5 & 1) != 0)
  {
    if ((a4 & 1) == 0 && (a5 & 1) == 0)
    {

      v68 = 0;
    }
    v62 = *(id *)(*(_QWORD *)(a1 + 80) + 8);
    if (!v62)
    {
      WebGPU::CommandEncoder::endEncoding(a1, v67);
LABEL_55:

      goto LABEL_56;
    }
    v60 = v67;
    if (!v60)
    {
      v13 = (void *)objc_opt_new();
      v14 = v13;
      if (a4)
      {
        objc_msgSend(v13, "depthAttachment");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setLoadAction:", 2);

        objc_msgSend(v14, "depthAttachment");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setStoreAction:", 1);

        objc_msgSend(v14, "depthAttachment");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "setClearDepth:", a8);

        objc_msgSend(v14, "depthAttachment");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setTexture:", v68);

      }
      if (a5)
      {
        objc_msgSend(v14, "stencilAttachment");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "setLoadAction:", 2);

        objc_msgSend(v14, "stencilAttachment");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setStoreAction:", 1);

        objc_msgSend(v14, "stencilAttachment");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "setClearStencil:", a6);

        objc_msgSend(v14, "stencilAttachment");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "setTexture:", v68);

      }
      if (!objc_msgSend(v64, "count"))
      {
        if (!v68)
        {
          __break(0xC471u);
          JUMPOUT(0x182436A60);
        }
        objc_msgSend(v14, "setDefaultRasterSampleCount:", objc_msgSend(v68, "sampleCount"));
        objc_msgSend(v14, "setRenderTargetWidth:", objc_msgSend(v68, "width"));
        objc_msgSend(v14, "setRenderTargetHeight:", objc_msgSend(v68, "height"));
      }
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v23 = v64;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v69, v79, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v70;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v70 != v25)
              objc_enumerationMutation(v23);
            v27 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
            v28 = objc_msgSend(v27, "intValue");
            objc_msgSend(v23, "objectForKey:", v27);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "texture");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "colorAttachments");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "objectAtIndexedSubscript:", v28);
            v32 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v32, "setLoadAction:", 2);
            objc_msgSend(v32, "setStoreAction:", 1);
            objc_msgSend(v29, "clearColor");
            objc_msgSend(v32, "setClearColor:");
            objc_msgSend(v32, "setTexture:", v30);
            objc_msgSend(v32, "setLevel:", 0);
            objc_msgSend(v32, "setSlice:", 0);
            objc_msgSend(v32, "setDepthPlane:", objc_msgSend(v29, "depthPlane"));

          }
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v69, v79, 16);
        }
        while (v24);
      }

      objc_msgSend(*(id *)(a1 + 16), "renderCommandEncoderWithDescriptor:", v14);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = v33;
      objc_storeStrong((id *)(a1 + 40), v33);
      WebGPU::Queue::setEncoderForBuffer(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16), *(void **)(a1 + 16), v60);

    }
    v34 = v64;
    v59 = v68;
    v61 = v62;
    v35 = (void *)objc_opt_new();
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v36 = v34;
    v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v75, v80, 16);
    if (v37)
    {
      v38 = *(_QWORD *)v76;
      do
      {
        for (j = 0; j != v37; ++j)
        {
          if (*(_QWORD *)v76 != v38)
            objc_enumerationMutation(v36);
          v40 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * j);
          v41 = objc_msgSend(v40, "intValue");
          objc_msgSend(v36, "objectForKey:", v40);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "texture");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = objc_msgSend(v43, "sampleCount");
          objc_msgSend(v35, "colorAttachments");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "objectAtIndexedSubscript:", v41);
          v46 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v46, "setPixelFormat:", objc_msgSend(v43, "pixelFormat"));
          objc_msgSend(v46, "setBlendingEnabled:", 0);

        }
        v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v75, v80, 16);
      }
      while (v37);
    }
    else
    {
      v44 = 0;
    }

    if (v59)
    {
      v47 = (void *)objc_opt_new();
      v48 = v59;
      v44 = objc_msgSend(v48, "sampleCount");
      if (a4 && ((objc_msgSend(v48, "pixelFormat") - 253) & 0xFFFFFFFFFFFFFFF7) != 0)
        v49 = objc_msgSend(v48, "pixelFormat");
      else
        v49 = 0;
      objc_msgSend(v35, "setDepthAttachmentPixelFormat:", v49);
      objc_msgSend(v47, "setDepthWriteEnabled:", 0);
      if (a5
        && (objc_msgSend(v48, "pixelFormat") == 260
         || objc_msgSend(v48, "pixelFormat") == 253
         || objc_msgSend(v48, "pixelFormat") == 261))
      {
        objc_msgSend(v35, "setStencilAttachmentPixelFormat:", objc_msgSend(v48, "pixelFormat"));
      }

      if (WebGPU::createSimplePso(NSMutableDictionary<NSNumber *,TextureAndClearColor *> *,objc_object  {objcproto10MTLTexture}*,BOOL,BOOL,objc_object  {objcproto9MTLDevice}*)::function)
        goto LABEL_46;
    }
    else
    {
      v47 = 0;
      if (WebGPU::createSimplePso(NSMutableDictionary<NSNumber *,TextureAndClearColor *> *,objc_object  {objcproto10MTLTexture}*,BOOL,BOOL,objc_object  {objcproto9MTLDevice}*)::function)
      {
LABEL_46:
        v50 = 0;
        goto LABEL_49;
      }
    }
    v51 = (void *)objc_opt_new();
    objc_msgSend(v51, "setFastMathEnabled:", 1);
    v74 = 0;
    v52 = (void *)objc_msgSend(v61, "newLibraryWithSource:options:error:", CFSTR("[[vertex]] float4 vs() { return (float4)0; }"),
                    v51,
                    &v74);
    v50 = v74;
    v53 = objc_msgSend(v52, "newFunctionWithName:", CFSTR("vs"));
    v54 = (void *)WebGPU::createSimplePso(NSMutableDictionary<NSNumber *,TextureAndClearColor *> *,objc_object  {objcproto10MTLTexture}*,BOOL,BOOL,objc_object  {objcproto9MTLDevice}*)::function;
    WebGPU::createSimplePso(NSMutableDictionary<NSNumber *,TextureAndClearColor *> *,objc_object  {objcproto10MTLTexture}*,BOOL,BOOL,objc_object  {objcproto9MTLDevice}*)::function = v53;

LABEL_49:
    objc_msgSend(v35, "setVertexFunction:");
    objc_msgSend(v35, "setFragmentFunction:", 0);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x182436A40);
    }
    objc_msgSend(v35, "setRasterSampleCount:", v44);
    objc_msgSend(v35, "setInputPrimitiveTopology:", 1);
    v73 = v50;
    v55 = (void *)objc_msgSend(v61, "newRenderPipelineStateWithDescriptor:error:", v35, &v73);
    v56 = v73;

    if (v47)
    {
      v57 = (void *)objc_msgSend(v61, "newDepthStencilStateWithDescriptor:", v47);
      if (!v56)
      {
LABEL_52:

        objc_msgSend(v60, "setRenderPipelineState:", v55);
        if (v57)
          objc_msgSend(v60, "setDepthStencilState:", v57);
        objc_msgSend(v60, "setCullMode:", 0);
        objc_msgSend(v60, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", 0, 0, 1, 1, 0);
        WebGPU::Queue::endEncoding(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16), v60, *(void **)(a1 + 16));
        v58 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;

        WebGPU::Queue::setEncoderForBuffer(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16), *(void **)(a1 + 16), 0);
        goto LABEL_55;
      }
    }
    else
    {
      v57 = 0;
      if (!v56)
        goto LABEL_52;
    }
    __break(0xC471u);
    JUMPOUT(0x182436A20);
  }
  WebGPU::CommandEncoder::endEncoding(a1, v67);
LABEL_56:

}

void sub_182436A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::copyBufferToTexture(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  BOOL v5;
  WebGPU::CommandsMixin *v8;
  int v9;
  int v10;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const __CFString *v18;
  void *v19;
  NSString *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  WebGPU::CommandBuffer *v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v73;
  unint64_t v74;
  void *v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64x2_t v120;
  unint64_t v121;
  int v122;
  unsigned int v123;
  char v124;
  uint64_t v125;
  __int128 v126;
  id v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  NSString *v131;
  NSString *v132;
  id v133;
  __int128 v134;
  uint64_t v135;
  _QWORD v136[3];
  __int128 v137;
  uint64_t v138;
  _QWORD v139[3];
  _QWORD v140[3];
  uint64_t v141;
  int64x2_t v142;
  unsigned int v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _QWORD v148[7];

  v4 = a2 + 8;
  if (*(_QWORD *)a2)
    v5 = 0;
  else
    v5 = *(_QWORD *)(a2 + 8) == 0;
  if (!v5 || *(_QWORD *)a3 != 0)
    return;
  v10 = *(unsigned __int8 *)(a1 + 4);
  v8 = (WebGPU::CommandsMixin *)(a1 + 4);
  v9 = v10;
  if ((v10 - 3) >= 0xFFFFFFFE)
  {
    if (v9 == 2)
    {
      v21 = *(_QWORD *)(a1 + 80);
      v22 = (void *)MEMORY[0x1E0CB3940];
      WebGPU::CommandsMixin::encoderStateName(v8);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::copyBufferToTexture(const WGPUImageCopyBuffer &, const WGPUImageCopyTexture &, const WGPUExtent3D &)", v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](v148, v24);
      v25 = *(_QWORD *)(v21 + 32);
      v26 = 32 * *(unsigned int *)(v21 + 44);
      v27 = v25 + v26;
      while (v26)
      {
        v28 = *(_DWORD *)(v27 - 8);
        v27 -= 32;
        v26 -= 32;
        if (!v28)
        {
          v29 = v25 + v26;
          if (!*(_BYTE *)(v29 + 16))
          {
            v30 = v148[0];
            v148[0] = 0;
            *(_DWORD *)v29 = 1;
            *(_QWORD *)(v29 + 8) = v30;
            *(_BYTE *)(v29 + 16) = 1;
          }
          goto LABEL_31;
        }
      }
      v32 = *(_QWORD *)(v21 + 24);
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v32 + 16))(v32, 1, v148);
        v33 = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 24) = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
LABEL_31:
      v34 = (_DWORD *)v148[0];
      v148[0] = 0;
      if (v34)
      {
        if (*v34 == 2)
          WTF::StringImpl::destroy();
        else
          *v34 -= 2;
      }

    }
    else
    {
      if (*(_QWORD *)(a1 + 64))
        v31 = *(__CFString **)(a1 + 64);
      else
        v31 = CFSTR("Encoder state is locked");
      WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, &v31->isa);
    }
    return;
  }
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(unsigned __int8 *)(v15 + 52);
  if (v16 != 4 && !*(_QWORD *)(v15 + 16)
    || (v17 = *(_QWORD *)(v15 + 256), !*(_QWORD *)(v17 + 8))
    || v17 != *(_QWORD *)(a1 + 80))
  {
    v18 = CFSTR("buffer is not valid");
LABEL_15:
    v19 = (void *)MEMORY[0x1E0CB3940];
    goto LABEL_16;
  }
  if ((v16 - 3) > 1)
  {
    v18 = CFSTR("buffer state != Unmapped");
    goto LABEL_15;
  }
  if (*(_DWORD *)(a2 + 24) != -1 && *(_DWORD *)(a2 + 24))
  {
    v18 = CFSTR("imageCopyBuffer.layout.bytesPerRow is not a multiple of 256");
    goto LABEL_15;
  }
  if ((*(_BYTE *)(v15 + 48) & 4) == 0)
  {
    v19 = (void *)MEMORY[0x1E0CB3940];
    v18 = CFSTR("source usage does not contain CopySrc");
    goto LABEL_16;
  }
  if (!*(_BYTE *)(v14 + 96) && !*(_QWORD *)(v14 + 8)
    || (v35 = *(_QWORD *)(v14 + 64), v35 != v17)
    || !*(_QWORD *)(v35 + 8))
  {
    v19 = (void *)MEMORY[0x1E0CB3940];
    v18 = CFSTR("destination texture is not valid to use with this GPUCommandEncoder");
    goto LABEL_16;
  }
  WebGPU::Texture::errorValidatingImageCopyTexture(a3, a4);
  v36 = objc_claimAutoreleasedReturnValue();
  if (v36)
    goto LABEL_48;
  if ((*(_BYTE *)(v14 + 44) & 2) == 0)
  {
    v19 = (void *)MEMORY[0x1E0CB3940];
    v18 = CFSTR("destination usage does not contain CopyDst");
    goto LABEL_16;
  }
  if (*(_DWORD *)(v14 + 32) != 1)
  {
    v19 = (void *)MEMORY[0x1E0CB3940];
    v18 = CFSTR("destination sample count is not one");
    goto LABEL_16;
  }
  v110 = *(unsigned int *)(v14 + 40);
  if ((v110 - 38) <= 5)
  {
    v111 = *(_DWORD *)(a3 + 32);
    if ((WebGPU::Texture::refersToSingleAspect(*(_DWORD *)(v14 + 40), v111) & 1) == 0)
    {
      v19 = (void *)MEMORY[0x1E0CB3940];
      v18 = CFSTR("destination aspect refers to more than one asepct");
      goto LABEL_16;
    }
    if ((v110 - 38) >= 2 && ((_DWORD)v110 != 41 && (_DWORD)v110 != 43 || v111 != 1))
    {
      v19 = (void *)MEMORY[0x1E0CB3940];
      v18 = CFSTR("destination is not valid depthStencilCopyDestination");
      goto LABEL_16;
    }
    LODWORD(v110) = WebGPU::Texture::aspectSpecificFormat(v110, v111);
  }
  WebGPU::Texture::errorValidatingTextureCopyRange(a3, a4);
  v36 = objc_claimAutoreleasedReturnValue();
  if (v36)
  {
LABEL_48:
    v37 = (void *)v36;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUCommandEncoder.copyBufferToTexture: %@"), v36);
    v132 = (NSString *)objc_claimAutoreleasedReturnValue();

    v20 = v132;
    if (v132)
      goto LABEL_17;
    goto LABEL_49;
  }
  v112 = *(_DWORD *)(v14 + 40);
  if ((v112 - 38) >= 6)
  {
    if (*(_QWORD *)(a2 + 16) % (unint64_t)WebGPU::Texture::texelBlockSize(v112))
    {
      v19 = (void *)MEMORY[0x1E0CB3940];
      v18 = CFSTR("source.layout.offset is not a multiple of texelBlockSize");
      goto LABEL_16;
    }
    goto LABEL_188;
  }
  if ((*(_BYTE *)(a2 + 16) & 3) == 0)
  {
LABEL_188:
    if (WebGPU::Texture::validateLinearTextureData(v4, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), v110, *(_QWORD *)a4, a4[2]))
    {
      goto LABEL_49;
    }
  }
  v19 = (void *)MEMORY[0x1E0CB3940];
  v18 = CFSTR("source.layout.offset is not a multiple of four for depth stencil format");
LABEL_16:
  objc_msgSend(v19, "stringWithFormat:", CFSTR("GPUCommandEncoder.copyBufferToTexture: %@"), v18);
  v20 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
LABEL_17:
    v131 = v20;
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, v20);

    return;
  }
LABEL_49:
  v38 = *(_QWORD *)(a2 + 32);
  WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)v38, (WebGPU::CommandEncoder *)a1);
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v14 + 104, a1, (uint64_t)v148);
  if (!*(_BYTE *)(v14 + 97))
  {
    if (*(_BYTE *)(v14 + 96))
    {
      *(_BYTE *)(a1 + 76) = 1;
      v46 = *(_QWORD *)(a1 + 56);
      if (v46)
      {
        v47 = *(WebGPU::CommandBuffer **)(v46 + 8);
        if (v47)
          WebGPU::CommandBuffer::makeInvalid(v47, *(NSString **)(a1 + 64));
      }
    }
  }
  if ((*a4 || a4[1] || a4[2]) && *(_BYTE *)(v38 + 52) != 4 && !*(_BYTE *)(v14 + 96))
  {
    v39 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)a1);
    v40 = *(unsigned int *)(a2 + 24);
    v127 = *(id *)(v38 + 16);
    if (!v127)
    {
LABEL_190:
      __break(0xC471u);
      JUMPOUT(0x1824376A4);
    }
    if ((_DWORD)v40 == -1)
      v40 = objc_msgSend(v127, "length");
    v41 = *(_DWORD *)(a3 + 32);
    v42 = WebGPU::Texture::aspectSpecificFormat(*(unsigned int *)(v14 + 40), v41);
    v43 = WebGPU::Texture::texelBlockSize(v42);
    v44 = *(_DWORD *)(v14 + 36);
    if ((v44 - 1) >= 2)
    {
      if (v44)
        goto LABEL_69;
      v45 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 72);
    }
    else
    {
      v45 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 76);
    }
    v48 = v45 * v43;
    if (v48 >= v40)
      v40 = v40;
    else
      v40 = v48;
LABEL_69:
    if (v41 == 0x7FFFFFFF)
    {
LABEL_144:

      return;
    }
    v114 = v43;
    v115 = v42;
    if (v41 == 2)
    {
      v49 = 1;
    }
    else
    {
      if (v41 != 1)
      {
        v117 = 0;
LABEL_77:
        v50 = WebGPU::Texture::logicalMiplevelSpecificTextureExtent(*(uint32x2_t **)(a3 + 8), *(_DWORD *)(a3 + 16));
        v52 = v50;
        v53 = *(_DWORD *)(a3 + 28);
        v54 = v51 - v53;
        if (v51 - v53 >= a4[2])
          v54 = a4[2];
        if (v51 >= v53)
          v55 = v54;
        else
          v55 = 0;
        v118 = v55;
        v57 = *(_DWORD *)(a3 + 20);
        v56 = *(_DWORD *)(a3 + 24);
        v58 = HIDWORD(v50) - v56;
        if (HIDWORD(v50) - v56 >= a4[1])
          v58 = a4[1];
        v121 = HIDWORD(v50);
        v123 = v51;
        if (HIDWORD(v50) >= v56)
          v59 = v58;
        else
          v59 = 0;
        v60 = v50 - v57;
        if (v50 - v57 >= *a4)
          v60 = *a4;
        if (v50 >= v57)
          v61 = v60;
        else
          v61 = 0;
        LODWORD(v62) = *(_DWORD *)(a2 + 28);
        if (v59 <= 1)
          v63 = 1;
        else
          v63 = v59;
        if ((_DWORD)v62 == -1)
          v62 = v63;
        else
          v62 = v62;
        v116 = v62;
        v64 = *(id *)(v14 + 8);
        v65 = v61;
        v133 = v64;
        v66 = v14;
        v67 = *(_DWORD *)(v14 + 36);
        v68 = a4[2];
        if (v67 == 2)
          v69 = 1;
        else
          v69 = a4[2];
        v128 = v65;
        v119 = v59;
        if (v69)
        {
          v113 = v40;
          v70 = 0;
          v129 = v52;
          v5 = (_DWORD)v65 == v52;
          v71 = v123;
          v73 = v5 && (_DWORD)v59 == (_DWORD)v121;
          v124 = v73;
          if ((_DWORD)v118 != v71)
            v73 = 0;
          v122 = v73;
          while (1)
          {
            if (*(_DWORD *)(v66 + 36) == 2)
              v74 = 0;
            else
              v74 = (v70 + *(_DWORD *)(a3 + 28));
            objc_msgSend(v133, "parentTexture");
            v75 = (void *)objc_claimAutoreleasedReturnValue();

            if (v75)
              goto LABEL_190;
            if (v67 == 2)
            {
              if (v122)
                goto LABEL_125;
            }
            else if (v67 == 1)
            {
              if ((v124 & 1) != 0)
                goto LABEL_125;
            }
            else if (!v67 && (_DWORD)v128 == v129)
            {
LABEL_125:
              WebGPU::Texture::setPreviouslyCleared((uint64_t *)v66, *(_DWORD *)(a3 + 16), v74, 1);
              goto LABEL_112;
            }
            WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a3 + 8), *(unsigned int *)(a3 + 16), v74, *(void **)(*(_QWORD *)(a1 + 80) + 8), *(void **)(a1 + 32));
LABEL_112:
            if (v69 == ++v70)
            {
              v68 = a4[2];
              v40 = v113;
              break;
            }
          }
        }
        v130 = v40 * v116;
        v76 = a4[1];
        if (v67 == 2 && v68 <= 1 && v76 < 2)
        {
          v40 = 0;
        }
        else if (v67 == 2)
        {
          v77 = v128;
          if (v40 > (v114 << 11))
          {
            if (v68 && v76)
            {
              v78 = v40;
              v79 = 0;
              v80 = 0;
              LODWORD(v81) = 1;
              do
              {
                if ((_DWORD)v81)
                {
                  v82 = 0;
                  v83 = v79;
                  do
                  {
                    v148[0] = 0;
                    v148[1] = 0;
                    v148[2] = v83 + *(_QWORD *)(a2 + 16);
                    v148[3] = -1;
                    v148[4] = *(_QWORD *)(a2 + 32);
                    v145 = 0u;
                    v146 = 0u;
                    v147 = 0;
                    *((_QWORD *)&v145 + 1) = *(_QWORD *)(a3 + 8);
                    *(_QWORD *)&v146 = *(_QWORD *)(a3 + 16);
                    v84 = *(_DWORD *)(a3 + 28) + v80;
                    DWORD2(v146) = v82 + *(_DWORD *)(a3 + 24);
                    HIDWORD(v146) = v84;
                    LODWORD(v147) = *(_DWORD *)(a3 + 32);
                    v143 = *a4;
                    v144 = 0x100000001;
                    WebGPU::CommandEncoder::copyBufferToTexture(a1, v148, &v145, &v143);
                    ++v82;
                    v81 = a4[1];
                    v83 += v78;
                  }
                  while (v82 < v81);
                  v68 = a4[2];
                }
                ++v80;
                v79 += v130;
              }
              while (v80 < v68);
            }
            goto LABEL_143;
          }
LABEL_142:
          v85 = objc_msgSend(v127, "length");
          v86 = WebGPU::Texture::bytesPerRow(v115, v77, *(_DWORD *)(v66 + 32));
          v87 = v119;
          if (v85 >= v86)
          {
            v88 = *(_DWORD *)(v66 + 36);
            if (v88 == 2)
            {
              if ((_DWORD)v128 && (_DWORD)v119 && (_DWORD)v118)
              {
                v96 = *(unsigned int *)(a3 + 28);
                v97 = *(_QWORD *)(a2 + 16);
                v98 = *(void **)(a1 + 32);
                v136[0] = v128;
                v136[1] = v119;
                v136[2] = v118;
                v99 = *(unsigned int *)(a3 + 16);
                v100 = *(_QWORD *)(a3 + 20);
                *(_QWORD *)&v101 = v100;
                *((_QWORD *)&v101 + 1) = HIDWORD(v100);
                v134 = v101;
                v135 = v96;
                objc_msgSend(v98, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v127, v97, v40, v130, v136, v133, 0, v99, &v134, v117);
              }
            }
            else if (v88 == 1)
            {
              if ((_DWORD)v128 && (_DWORD)v119 && a4[2])
              {
                v102 = 0;
                v103 = 0;
                v104 = *(_QWORD *)(a3 + 20);
                *(_QWORD *)&v105 = v104;
                *((_QWORD *)&v105 + 1) = HIDWORD(v104);
                v126 = v105;
                do
                {
                  v106 = v102 + *(_QWORD *)(a2 + 16);
                  v107 = (v103 + *(_DWORD *)(a3 + 28));
                  v108 = *(void **)(a1 + 32);
                  v139[0] = v128;
                  v139[1] = v87;
                  v139[2] = 1;
                  v109 = *(unsigned int *)(a3 + 16);
                  v137 = v126;
                  v138 = 0;
                  objc_msgSend(v108, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v127, v106, v40, v130, v139, v133, v107, v109, &v137, v117);
                  ++v103;
                  v102 += v130;
                  v87 = v119;
                }
                while (v103 < a4[2]);
              }
            }
            else if (!v88 && (_DWORD)v128)
            {
              v89 = v40 >= (v128 * v114) ? (v128 * v114) : v40;
              if (a4[2])
              {
                v90 = 0;
                v91 = 0;
                v125 = *(unsigned int *)(a3 + 20);
                v120 = vdupq_n_s64(1uLL);
                do
                {
                  v92 = *(_QWORD *)(a2 + 16);
                  v93 = *(_DWORD *)(a3 + 28);
                  if (v89 + v90 + v92 <= objc_msgSend(v127, "length"))
                  {
                    v94 = *(void **)(a1 + 32);
                    v141 = v128;
                    v142 = v120;
                    v95 = *(unsigned int *)(a3 + 16);
                    v140[0] = v125;
                    v140[1] = 0;
                    v140[2] = 0;
                    objc_msgSend(v94, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v127, v90 + v92, v89, v130, &v141, v133, (v91 + v93), v95, v140, v117);
                  }
                  ++v91;
                  v90 += v130;
                }
                while (v91 < a4[2]);
              }
            }
          }
LABEL_143:

          goto LABEL_144;
        }
        v77 = v128;
        goto LABEL_142;
      }
      v49 = 2;
    }
    v117 = v49;
    goto LABEL_77;
  }
}

void sub_182437770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182437780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,id a28)
{

  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::clearTextureIfNeeded(uint32x2_t *a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  __int32 v11;
  unsigned int v12;
  unsigned int v13;
  id v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  __int32 v28;
  uint64_t v29;
  unsigned __int32 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD v38[4];

  v9 = a4;
  v10 = a5;
  if (!v10 || WebGPU::Texture::previouslyCleared((WebGPU::Texture *)a1, a2, a3))
    goto LABEL_40;
  WebGPU::Texture::setPreviouslyCleared((uint64_t *)a1, a2, a3, 1);
  v11 = a1[4].i32[1];
  if (v11 == 2)
  {
    v33 = (uint64_t)vmax_u32(vshl_u32(a1[2], (uint32x2_t)vneg_s32(vdup_n_s32(a2))), (uint32x2_t)0x100000001);
    if ((unsigned __int32)a1[3].i32[0] >> a2 <= 1)
      v13 = 1;
    else
      v13 = (unsigned __int32)a1[3].i32[0] >> a2;
    v14 = *(id *)&a1[1];
    if (!v14)
      goto LABEL_39;
  }
  else if (v11 == 1)
  {
    v33 = (uint64_t)vmax_u32(vshl_u32(a1[2], (uint32x2_t)vneg_s32(vdup_n_s32(a2))), (uint32x2_t)0x100000001);
    v13 = a1[3].u32[0];
    v14 = *(id *)&a1[1];
    if (!v14)
      goto LABEL_39;
  }
  else
  {
    if (v11)
    {
LABEL_40:

      return;
    }
    v12 = (unsigned __int32)a1[2].i32[0] >> a2;
    if (v12 <= 1)
      v12 = 1;
    v13 = a1[3].u32[0];
    v33 = v12 | 0x100000000;
    v14 = *(id *)&a1[1];
    if (!v14)
    {
LABEL_39:

      goto LABEL_40;
    }
  }
  v15 = a1[5].i32[0];
  if (objc_msgSend(v14, "pixelFormat") == 260 || objc_msgSend(v14, "pixelFormat") == 261)
    v15 = 42;
  v31 = v33;
  v32 = HIDWORD(v33);
  v16 = v33 | ((unint64_t)HIDWORD(v33) << 32);
  v17 = a1[4].i32[1];
  v34 = v13;
  v18 = WebGPU::Texture::physicalTextureExtent(v17, v15, v16);
  v20 = v19;
  v30 = a1[4].u32[0];
  v21 = WebGPU::Texture::texelBlockWidth(v15);
  if (v21)
  {
    if (v18 % v21)
      v22 = 0;
    else
      v22 = v30 * (unint64_t)(v18 / v21) * WebGPU::Texture::texelBlockSize(v15);
  }
  else
  {
    v22 = 0;
  }
  v23 = HIDWORD(v18);
  v24 = v20;
  if (v17 != 2)
    v24 = 1;
  v25 = v22 * v23;
  v26 = v22 * v23 * v24;
  if (!v26)
    goto LABEL_39;
  v27 = (void *)objc_msgSend(v9, "newBufferWithLength:options:", v26, 0);
  if (!v27)
  {
LABEL_38:

    goto LABEL_39;
  }
  v28 = a1[4].i32[1];
  if (v28 == 1)
  {
    v25 = 0;
    goto LABEL_33;
  }
  if (v28 == 2)
  {
    a3 = 0;
LABEL_35:
    v29 = objc_msgSend(v14, "pixelFormat");
    if (a3 < objc_msgSend(v14, "arrayLength"))
    {
      v38[0] = v31;
      v38[1] = v32;
      v38[2] = v34;
      memset(v37, 0, sizeof(v37));
      objc_msgSend(v10, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v27, 0, v22, v25, v38, v14, a3, a2, v37, v29 == 260);
      if (v29 == 260)
      {
        v36[0] = v31;
        v36[1] = v32;
        v36[2] = v34;
        memset(v35, 0, sizeof(v35));
        objc_msgSend(v10, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v27, 0, v22 >> 2, v25 >> 2, v36, v14, a3, a2, v35, 2);
      }
    }
    goto LABEL_38;
  }
  if (v28 != 0x7FFFFFFF)
  {
    v25 = 0;
    v32 = 1;
LABEL_33:
    v34 = 1;
    goto LABEL_35;
  }
  __break(0xC471u);
}

void sub_182437BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182437BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::copyTextureToBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  WebGPU::CommandsMixin *v8;
  int v9;
  int v10;
  uint32x2_t *v14;
  uint32x2_t v15;
  void *v16;
  const __CFString *v17;
  NSString *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  WebGPU::CommandBuffer *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int32x2_t v52;
  uint32x2_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  __int32 v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  id v78;
  unsigned int v79;
  unsigned int i;
  unint64_t v81;
  uint64_t v82;
  __int32 v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int32 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint32x2_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  id v107;
  uint64_t v108;
  int v109;
  int64x2_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  __int128 v115;
  unsigned int v116;
  uint64_t v117;
  void *v118;
  int8x8_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  NSString *v125;
  NSString *v126;
  unint64_t v127;
  id v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _QWORD v133[3];
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  int64x2_t v137;
  _QWORD v138[3];
  unsigned int v139;
  uint64_t v140;
  _QWORD v141[5];
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v4 = a3 + 8;
  if (*(_QWORD *)a2)
    v5 = 0;
  else
    v5 = *(_QWORD *)a3 == 0;
  if (!v5 || *(_QWORD *)(a3 + 8) != 0)
    return;
  v10 = *(unsigned __int8 *)(a1 + 4);
  v8 = (WebGPU::CommandsMixin *)(a1 + 4);
  v9 = v10;
  if ((v10 - 3) >= 0xFFFFFFFE)
  {
    if (v9 == 2)
    {
      v19 = *(_QWORD *)(a1 + 80);
      v20 = (void *)MEMORY[0x1E0CB3940];
      WebGPU::CommandsMixin::encoderStateName(v8);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::copyTextureToBuffer(const WGPUImageCopyTexture &, const WGPUImageCopyBuffer &, const WGPUExtent3D &)", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](&v142, v22);
      v23 = *(_QWORD *)(v19 + 32);
      v24 = 32 * *(unsigned int *)(v19 + 44);
      v25 = v23 + v24;
      while (v24)
      {
        v26 = *(_DWORD *)(v25 - 8);
        v25 -= 32;
        v24 -= 32;
        if (!v26)
        {
          v27 = v23 + v24;
          if (!*(_BYTE *)(v27 + 16))
          {
            v28 = v142;
            *(_QWORD *)&v142 = 0;
            *(_DWORD *)v27 = 1;
            *(_QWORD *)(v27 + 8) = v28;
            *(_BYTE *)(v27 + 16) = 1;
          }
          goto LABEL_30;
        }
      }
      v30 = *(_QWORD *)(v19 + 24);
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v30 + 16))(v30, 1, &v142);
        v31 = *(_QWORD *)(v19 + 24);
        *(_QWORD *)(v19 + 24) = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
LABEL_30:
      v32 = (_DWORD *)v142;
      *(_QWORD *)&v142 = 0;
      if (v32)
      {
        if (*v32 == 2)
          WTF::StringImpl::destroy();
        else
          *v32 -= 2;
      }

    }
    else
    {
      if (*(_QWORD *)(a1 + 64))
        v29 = *(__CFString **)(a1 + 64);
      else
        v29 = CFSTR("Encoder state is locked");
      WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, &v29->isa);
    }
    return;
  }
  v14 = *(uint32x2_t **)(a2 + 8);
  if (!v14[12].i8[0] && !*(_QWORD *)&v14[1]
    || (v15 = v14[8], !*(_QWORD *)(*(_QWORD *)&v15 + 8))
    || *(_QWORD *)&v15 != *(_QWORD *)(a1 + 80))
  {
    v16 = (void *)MEMORY[0x1E0CB3940];
    v17 = CFSTR("source texture is not valid to use with this GPUCommandEncoder");
    goto LABEL_15;
  }
  WebGPU::Texture::errorValidatingImageCopyTexture(a2, (unsigned int *)a4);
  v33 = objc_claimAutoreleasedReturnValue();
  if (v33)
  {
LABEL_34:
    v34 = (void *)v33;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUCommandEncoder.copyTextureToBuffer: %@"), v33);
    v126 = (NSString *)objc_claimAutoreleasedReturnValue();

    v18 = v126;
    if (v126)
      goto LABEL_16;
    goto LABEL_35;
  }
  if ((v14[5].i8[4] & 1) == 0)
  {
    v16 = (void *)MEMORY[0x1E0CB3940];
    v17 = CFSTR("sourceTexture usage does not contain CopySrc");
    goto LABEL_15;
  }
  if (v14[4].i32[0] != 1)
  {
    v16 = (void *)MEMORY[0x1E0CB3940];
    v17 = CFSTR("sourceTexture sample count != 1");
    goto LABEL_15;
  }
  v40 = v14[5].u32[0];
  if ((v40 - 38) <= 5)
  {
    v41 = *(_DWORD *)(a2 + 32);
    if ((WebGPU::Texture::refersToSingleAspect(v14[5].u32[0], v41) & 1) == 0)
    {
      v16 = (void *)MEMORY[0x1E0CB3940];
      v17 = CFSTR("copying to depth stencil texture with more than one aspect");
      goto LABEL_15;
    }
    if (v40 > 0x2B || ((1 << v40) & 0xCC000000000) == 0 && (v40 != 41 || v41 != 1))
    {
      v16 = (void *)MEMORY[0x1E0CB3940];
      v17 = CFSTR("copying to depth stencil texture, validDepthStencilCopySource fails");
      goto LABEL_15;
    }
    LODWORD(v40) = WebGPU::Texture::aspectSpecificFormat(v40, v41);
  }
  v42 = *(_QWORD *)(a3 + 32);
  v43 = *(unsigned __int8 *)(v42 + 52);
  if (v43 != 4 && !*(_QWORD *)(v42 + 16)
    || (v44 = *(_QWORD *)(v42 + 256), !*(_QWORD *)(v44 + 8))
    || v44 != *(_QWORD *)(a1 + 80))
  {
    v17 = CFSTR("buffer is not valid");
LABEL_61:
    v16 = (void *)MEMORY[0x1E0CB3940];
    goto LABEL_15;
  }
  if ((v43 - 3) > 1)
  {
    v17 = CFSTR("buffer state != Unmapped");
    goto LABEL_61;
  }
  if (*(_DWORD *)(a3 + 24) != -1 && *(_DWORD *)(a3 + 24))
  {
    v17 = CFSTR("imageCopyBuffer.layout.bytesPerRow is not a multiple of 256");
    goto LABEL_61;
  }
  if ((*(_BYTE *)(v42 + 48) & 8) == 0)
  {
    v16 = (void *)MEMORY[0x1E0CB3940];
    v17 = CFSTR("destination buffer usage does not contain CopyDst");
    goto LABEL_15;
  }
  WebGPU::Texture::errorValidatingTextureCopyRange(a2, (unsigned int *)a4);
  v33 = objc_claimAutoreleasedReturnValue();
  if (v33)
    goto LABEL_34;
  v109 = v14[5].i32[0];
  if ((v109 - 38) < 6)
  {
    if ((*(_BYTE *)(a3 + 16) & 3) != 0)
    {
      v16 = (void *)MEMORY[0x1E0CB3940];
      v17 = CFSTR("destination.layout.offset is not a multiple of 4");
      goto LABEL_15;
    }
LABEL_158:
    if (WebGPU::Texture::validateLinearTextureData(v4, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 40), v40, *(_QWORD *)a4, *(_DWORD *)(a4 + 8)))
    {
      goto LABEL_35;
    }
    v16 = (void *)MEMORY[0x1E0CB3940];
    v17 = CFSTR("validateLinearTextureData fails");
    goto LABEL_15;
  }
  if (!(*(_QWORD *)(a3 + 16) % (unint64_t)WebGPU::Texture::texelBlockSize(v109)))
    goto LABEL_158;
  v16 = (void *)MEMORY[0x1E0CB3940];
  v17 = CFSTR("destination.layout.offset is not a multiple of texelBlockSize");
LABEL_15:
  objc_msgSend(v16, "stringWithFormat:", CFSTR("GPUCommandEncoder.copyTextureToBuffer: %@"), v17);
  v18 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v18)
  {
LABEL_16:
    v125 = v18;
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, v18);

    return;
  }
LABEL_35:
  v35 = *(_QWORD *)(a3 + 32);
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>((uint64_t)&v14[13], a1, (uint64_t)&v142);
  if (!v14[12].i8[1])
  {
    if (v14[12].i8[0])
    {
      *(_BYTE *)(a1 + 76) = 1;
      v38 = *(_QWORD *)(a1 + 56);
      if (v38)
      {
        v39 = *(WebGPU::CommandBuffer **)(v38 + 8);
        if (v39)
          WebGPU::CommandBuffer::makeInvalid(v39, *(NSString **)(a1 + 64));
      }
    }
  }
  WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)v35, (WebGPU::CommandEncoder *)a1);
  *(_QWORD *)(v35 + 232) = 0;
  *(_QWORD *)(v35 + 240) = 0;
  *(_QWORD *)(v35 + 248) = 0;
  if (!v14[12].i8[0] && *(_BYTE *)(v35 + 52) != 4)
  {
    v36 = *(_DWORD *)(a2 + 32);
    if (v36 != 0x7FFFFFFF)
    {
      if (v36 == 2)
      {
        v37 = 1;
      }
      else
      {
        if (v36 != 1)
        {
          v122 = 0;
LABEL_66:
          v45 = WebGPU::Texture::logicalMiplevelSpecificTextureExtent(v14, *(_DWORD *)(a2 + 16));
          v46 = HIDWORD(v45);
          v48 = v47;
          v49 = *(_DWORD *)(a2 + 20);
          v50 = v45 - v49;
          if (v45 - v49 >= *(_DWORD *)a4)
            v50 = *(_DWORD *)a4;
          if (v45 >= v49)
            v51 = v50;
          else
            v51 = 0;
          v123 = v51;
          v52 = *(int32x2_t *)(a2 + 24);
          v53 = *(uint32x2_t *)(a4 + 4);
          v124 = *(id *)(v35 + 16);
          v54 = *(unsigned int *)(a3 + 24);
          if ((_DWORD)v54 == -1)
            v54 = objc_msgSend(v124, "length");
          v119 = vbic_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)__PAIR64__(v48, v46), v52), v53), (int8x8_t)vcgt_u32((uint32x2_t)v52, (uint32x2_t)__PAIR64__(v48, v46)));
          v55 = WebGPU::Texture::aspectSpecificFormat(v14[5].u32[0], *(_DWORD *)(a2 + 32));
          v56 = WebGPU::Texture::texelBlockSize(v55);
          v57 = v56;
          v58 = v14[4].i32[1];
          if ((v58 - 1) >= 2)
          {
            if (v58)
              goto LABEL_80;
            v59 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 72);
          }
          else
          {
            v59 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 76);
          }
          v60 = v59 * v56;
          if (v60 >= v54)
            v54 = v54;
          else
            v54 = v60;
LABEL_80:
          v61 = v54 % v56;
          v62 = v56 - v61;
          if (!v61)
            v62 = 0;
          v63 = v62 + v54;
          v65 = *(_DWORD *)(a4 + 4);
          v64 = *(unsigned int *)(a4 + 8);
          if (v65 < 2 && v64 < 2 && v58 == 2)
            v68 = 0;
          else
            v68 = v63;
          LODWORD(v69) = *(_DWORD *)(a3 + 28);
          if (v119.i32[0] <= 1u)
            v70 = 1;
          else
            v70 = v119.i32[0];
          if ((_DWORD)v69 == -1)
            v69 = v70;
          else
            v69 = v69;
          v71 = v68 * v69;
          v127 = v71;
          if (v58 == 2 && v68 > v56 << 11)
          {
            if (*(_DWORD *)(a4 + 8) && v65)
            {
              v72 = 0;
              v73 = 0;
              LODWORD(v74) = 1;
              do
              {
                if ((_DWORD)v74)
                {
                  v75 = 0;
                  v76 = v72;
                  do
                  {
                    v142 = 0u;
                    v143 = 0u;
                    v144 = 0;
                    *((_QWORD *)&v142 + 1) = *(_QWORD *)(a2 + 8);
                    *(_QWORD *)&v143 = *(_QWORD *)(a2 + 16);
                    v77 = *(_DWORD *)(a2 + 28) + v73;
                    DWORD2(v143) = v75 + *(_DWORD *)(a2 + 24);
                    HIDWORD(v143) = v77;
                    LODWORD(v144) = *(_DWORD *)(a2 + 32);
                    v141[0] = 0;
                    v141[1] = 0;
                    v141[2] = v76 + *(_QWORD *)(a3 + 16);
                    v141[3] = -1;
                    v141[4] = *(_QWORD *)(a3 + 32);
                    v139 = *(_DWORD *)a4;
                    v140 = 0x100000001;
                    WebGPU::CommandEncoder::copyTextureToBuffer(a1, &v142, v141, &v139);
                    ++v75;
                    v74 = *(unsigned int *)(a4 + 4);
                    v76 += v68;
                  }
                  while (v75 < v74);
                  v64 = *(unsigned int *)(a4 + 8);
                  v71 = v127;
                }
                ++v73;
                v72 += v71;
              }
              while (v73 < v64);
            }
            goto LABEL_127;
          }
          v113 = v55;
          v78 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)a1);
          v116 = v57;
          v79 = *(_DWORD *)(a4 + 8);
          if (v79)
          {
            for (i = 0; i < v79; ++i)
            {
              if (v14[4].i32[1] == 2)
                v81 = 0;
              else
                v81 = i + *(_DWORD *)(a2 + 28);
              v82 = *(unsigned int *)(a2 + 16);
              if (!WebGPU::Texture::previouslyCleared((WebGPU::Texture *)v14, *(_DWORD *)(a2 + 16), v81))
              {
                WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a2 + 8), v82, v81, *(void **)(*(_QWORD *)(a1 + 80) + 8), *(void **)(a1 + 32));
                v79 = *(_DWORD *)(a4 + 8);
              }
            }
          }
          v83 = v14[4].i32[1];
          v84 = v127;
          if (v83)
          {
            if (v83 == 2)
            {
              if (!(_DWORD)v123 || !v119.i32[0] || !v119.i32[1])
                goto LABEL_127;
            }
            else if (v83 == 1 && (!(_DWORD)v123 || !v119.i32[0]))
            {
              goto LABEL_127;
            }
          }
          else if (!(_DWORD)v123)
          {
LABEL_127:

            return;
          }
          v85 = objc_msgSend(v124, "length");
          if (v85 >= WebGPU::Texture::bytesPerRow(v113, v123, v14[4].u32[0]))
          {
            *(_QWORD *)&v86 = v119.u32[0];
            *((_QWORD *)&v86 + 1) = v119.u32[1];
            v87 = v86;
            v88 = v14[4].i32[1];
            if (v88 == 2)
            {
              v96 = *(unsigned int *)(a2 + 28);
              v97 = *(_QWORD *)(a3 + 16);
              v98 = *(void **)(a1 + 32);
              v99 = v14[1];
              v100 = *(unsigned int *)(a2 + 16);
              v101 = *(_QWORD *)(a2 + 20);
              *(_QWORD *)&v102 = v101;
              *((_QWORD *)&v102 + 1) = HIDWORD(v101);
              v130 = v87;
              v131 = v102;
              v132 = v96;
              v129 = v123;
              objc_msgSend(v98, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:", *(_QWORD *)&v99, 0, v100, &v131, &v129, v124, v97, v68, v127, v122);
            }
            else if (v88 == 1)
            {
              if (*(_DWORD *)(a4 + 8))
              {
                v103 = 0;
                v104 = 0;
                v105 = *(_QWORD *)(a2 + 20);
                *(_QWORD *)&v106 = v105;
                *((_QWORD *)&v106 + 1) = HIDWORD(v105);
                v115 = v106;
                v112 = v87;
                do
                {
                  v128 = (id)(v103 + *(_QWORD *)(a3 + 16));
                  v121 = (v104 + *(_DWORD *)(a2 + 28));
                  v118 = *(void **)(a1 + 32);
                  v107 = *(id *)&v14[1];
                  v108 = *(unsigned int *)(a2 + 16);
                  v134 = v115;
                  v135 = 0;
                  v133[0] = v123;
                  v133[1] = v112;
                  v133[2] = 1;
                  objc_msgSend(v118, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:", v107, v121, v108, &v134, v133, v124, v128, v68, v84, v122);

                  ++v104;
                  v103 += v84;
                }
                while (v104 < *(unsigned int *)(a4 + 8));
              }
            }
            else if (!v88 && *(_DWORD *)(a4 + 8))
            {
              v89 = 0;
              v90 = 0;
              v111 = *(unsigned int *)(a2 + 20);
              v120 = v116 * v123;
              v110 = vdupq_n_s64(1uLL);
              do
              {
                v91 = *(_QWORD *)(a3 + 16);
                v92 = *(_DWORD *)(a2 + 28);
                if (v120 + v89 + v91 <= (unint64_t)objc_msgSend(v124, "length"))
                {
                  v117 = v89 + v91;
                  v114 = (v90 + v92);
                  v93 = *(void **)(a1 + 32);
                  v94 = *(id *)&v14[1];
                  v95 = *(unsigned int *)(a2 + 16);
                  v138[0] = v111;
                  v138[1] = 0;
                  v138[2] = 0;
                  v136 = v123;
                  v137 = v110;
                  objc_msgSend(v93, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:", v94, v114, v95, v138, &v136, v124, v117, v68, v127, v122);

                }
                ++v90;
                v89 += v127;
              }
              while (v90 < *(unsigned int *)(a4 + 8));
            }
          }
          goto LABEL_127;
        }
        v37 = 2;
      }
      v122 = v37;
      goto LABEL_66;
    }
  }
}

void sub_182438678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182438688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_18243869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_1824386B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1824386CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1824386E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_1824386F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_18243870C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243871C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  _DWORD *v5;

  v5 = *(_DWORD **)(v3 - 160);
  *(_QWORD *)(v3 - 160) = 0;
  if (v5)
  {
    if (*v5 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *v5 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_182438788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182438798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{

  _Unwind_Resume(a1);
}

void sub_1824387AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

_DWORD *wgpuCommandEncoderReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::CommandEncoder *wgpuCommandEncoderRelease(WebGPU::CommandEncoder *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::CommandEncoder::~CommandEncoder(result);
    return (WebGPU::CommandEncoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t wgpuCommandEncoderBeginComputePass(WebGPU::CommandEncoder *this, _QWORD *a2)
{
  unsigned __int8 **v3;
  uint64_t v4;
  WebGPU::CommandsMixin *v5;
  int v6;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  __CFString *v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 **v32;
  __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v40;
  unsigned __int8 **v41;
  void *v42;
  void *v43;
  id v44;
  const char *v45;
  __CFString *v46;
  _DWORD *v47;
  unsigned __int8 **v48;
  id v49;
  uint64_t v50;
  _DWORD *v52;

  if (*a2)
  {
    v3 = (unsigned __int8 **)*((_QWORD *)this + 10);
    v4 = WTF::fastMalloc((WTF *)0x80);
    WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, v3, CFSTR("descriptor is corrupted"));
    return v4;
  }
  v5 = (WebGPU::CommandEncoder *)((char *)this + 4);
  v6 = *((unsigned __int8 *)this + 4);
  if ((v6 - 3) < 0xFFFFFFFE)
  {
    v8 = (unsigned int *)a2[2];
    if (!v8)
      goto LABEL_58;
    v9 = *((_QWORD *)this + 10);
    v10 = *(unsigned int *)(v9 + 228);
    if ((_DWORD)v10)
    {
      v11 = *(int **)(v9 + 216);
      v12 = CFSTR("device does not have timestamp query feature");
      while (1)
      {
        v13 = *v11++;
        if (v13 == 3)
          break;
        if (!--v10)
          goto LABEL_42;
      }
      v28 = *(_QWORD *)v8;
      v29 = *(unsigned int *)(*(_QWORD *)v8 + 36);
      if ((_DWORD)v29 != 1)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("query type is not timestamp but %d"), v29);
        v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (!v12)
          goto LABEL_58;
LABEL_41:
        v9 = *((_QWORD *)this + 10);
        goto LABEL_42;
      }
      if (*(_BYTE *)(v28 + 56) || *(_QWORD *)(v28 + 16) || *(_QWORD *)(v28 + 24))
      {
        v30 = *(_QWORD *)(v28 + 8);
        if (v30 == v9 && *(_QWORD *)(v30 + 8) != 0)
        {
          v34 = *(unsigned int *)(v28 + 32);
          v35 = v8[2];
          v36 = v8[3];
          if ((_DWORD)v35 == -1)
            v37 = 0;
          else
            v37 = v35;
          if ((_DWORD)v36 == -1)
            v38 = 0;
          else
            v38 = v36;
          v40 = v37 >= v34
             || v38 >= v34
             || (_DWORD)v35 == (_DWORD)v36;
          if (!v40
            || (objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("writeIndices mismatch: beginningOfPassWriteIndex(%u) >= querySetCount(%u) || endOfPassWriteIndex(%u) >= querySetCount(%u) || timestampWrite.beginningOfPassWriteIndex(%u) == timestampWrite.endOfPassWriteIndex(%u)"), v37, v34, v38, v34, v35, v36), (v12 = (__CFString *)objc_claimAutoreleasedReturnValue()) == 0))
          {
LABEL_58:
            if (objc_msgSend(*((id *)this + 2), "status"))
            {
              v41 = (unsigned __int8 **)*((_QWORD *)this + 10);
              v4 = WTF::fastMalloc((WTF *)0x80);
              WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, v41, CFSTR("command buffer has already been committed"));
            }
            else
            {
              WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
              v42 = (void *)objc_opt_new();
              objc_msgSend(v42, "setDispatchType:", 0);
              objc_msgSend(*((id *)this + 2), "computeCommandEncoderWithDescriptor:", v42);
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = v43;
              objc_storeStrong((id *)this + 5, v43);
              WebGPU::Queue::setEncoderForBuffer(*(_QWORD *)(*((_QWORD *)this + 10) + 16), *((void **)this + 2), v44);

              v45 = (const char *)a2[1];
              if (v45)
                strlen(v45);
              WTF::String::fromUTF8();
              if (v52)
                v46 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
              else
                v46 = &stru_1E0FD9588;
              objc_msgSend(v44, "setLabel:", v46);

              v47 = v52;
              v52 = 0;
              if (v47)
              {
                if (*v47 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v47 -= 2;
              }
              v48 = (unsigned __int8 **)*((_QWORD *)this + 10);
              v49 = v44;
              v4 = WTF::fastMalloc((WTF *)0x80);
              WebGPU::ComputePassEncoder::ComputePassEncoder(v4, v49, v50, (uint64_t)this, v48);

            }
            return v4;
          }
          goto LABEL_41;
        }
      }
      v12 = CFSTR("device mismatch");
    }
    else
    {
      v12 = CFSTR("device does not have timestamp query feature");
    }
LABEL_42:
    v33 = v12;
    v4 = WTF::fastMalloc((WTF *)0x80);
    WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, (unsigned __int8 **)v9, v33);

    return v4;
  }
  if (v6 == 2)
  {
    v14 = *((_QWORD *)this + 10);
    v15 = (void *)MEMORY[0x1E0CB3940];
    WebGPU::CommandsMixin::encoderStateName(v5);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "Ref<ComputePassEncoder> WebGPU::CommandEncoder::beginComputePass(const WGPUComputePassDescriptor &)", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v52, v17);
    v18 = *(_QWORD *)(v14 + 32);
    v19 = 32 * *(unsigned int *)(v14 + 44);
    v20 = v18 + v19;
    while (v19)
    {
      v21 = *(_DWORD *)(v20 - 8);
      v20 -= 32;
      v19 -= 32;
      if (!v21)
      {
        v22 = v18 + v19;
        if (!*(_BYTE *)(v22 + 16))
        {
          v23 = v52;
          v52 = 0;
          *(_DWORD *)v22 = 1;
          *(_QWORD *)(v22 + 8) = v23;
          *(_BYTE *)(v22 + 16) = 1;
        }
        goto LABEL_23;
      }
    }
    v25 = *(_QWORD *)(v14 + 24);
    if (v25)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v25 + 16))(v25, 1, &v52);
      v26 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
LABEL_23:
    v27 = v52;
    v52 = 0;
    if (v27)
    {
      if (*v27 == 2)
        WTF::StringImpl::destroy();
      else
        *v27 -= 2;
    }

  }
  else
  {
    if (*((_QWORD *)this + 8))
      v24 = (__CFString *)*((_QWORD *)this + 8);
    else
      v24 = CFSTR("Encoder state is locked");
    WebGPU::CommandEncoder::makeInvalid(this, &v24->isa);
  }
  v32 = (unsigned __int8 **)*((_QWORD *)this + 10);
  v4 = WTF::fastMalloc((WTF *)0x80);
  WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, v32, CFSTR("encoder state is invalid"));
  return v4;
}

void sub_182438C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  void *v16;
  void *v17;

  if (a16)
  {
    if (*a16 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a16 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_182438D74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182438D84(_Unwind_Exception *a1, void *a2)
{
  void *v2;
  WTF *v3;

  WTF::fastFree(v3, a2);

  _Unwind_Resume(a1);
}

void sub_182438DA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182438DB4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_182438DC8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t wgpuCommandEncoderBeginRenderPass(WebGPU::CommandEncoder *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebGPU::CommandsMixin *v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  __CFString *v21;
  unsigned __int8 **v22;
  __CFString *v23;
  uint64_t v24;
  unsigned __int8 **v25;
  __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned __int8 **v30;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 **v47;
  void *v48;
  unsigned __int8 **v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 **v61;
  BOOL v62;
  uint32x2_t *v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  unsigned int v75;
  unsigned __int32 v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  id *v84;
  uint64_t v85;
  WebGPU::CommandBuffer *v86;
  void *v87;
  _BOOL4 v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  id v92;
  uint32x2_t *v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  int v109;
  void *v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  _QWORD *v115;
  id v116;
  _QWORD *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  unsigned __int8 **v140;
  id *v141;
  unsigned __int8 **v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  WebGPU::CommandBuffer *v146;
  __CFString *v147;
  BOOL v148;
  __CFString *v149;
  uint64_t v150;
  _BOOL4 v151;
  unsigned int v152;
  uint64_t v153;
  uint32x2_t *v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  unint64_t v158;
  int v159;
  uint32x2_t *v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unint64_t v164;
  int v165;
  int v166;
  unsigned int v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  unint64_t v171;
  TextureAndClearColor *v172;
  void *v173;
  void *v174;
  _QWORD *v175;
  uint64_t *v176;
  __int32 v177;
  char v178;
  uint64_t v179;
  void *v180;
  uint64_t *v181;
  BOOL v182;
  _BOOL4 v183;
  uint64_t v184;
  uint64_t v185;
  WebGPU::CommandBuffer *v186;
  unsigned __int8 **v187;
  __CFString *v188;
  __CFString *v189;
  uint64_t v190;
  BOOL v191;
  __CFString *v192;
  uint64_t v193;
  unint64_t v194;
  _BOOL4 v195;
  uint32x2_t *v196;
  int v197;
  int v198;
  int v199;
  void *v200;
  float v201;
  double v202;
  float v203;
  double v204;
  BOOL v205;
  double v206;
  int v207;
  uint64_t v208;
  unsigned __int8 **v209;
  __CFString *v210;
  unsigned __int8 **v211;
  __CFString *v212;
  uint64_t v213;
  void *v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unint64_t v218;
  _BOOL4 v219;
  id v220;
  unsigned __int8 **v221;
  __CFString *v222;
  __CFString *v223;
  __CFString *v224;
  unsigned __int8 **v225;
  __CFString *v226;
  unsigned __int8 **v227;
  __CFString *v228;
  unsigned __int8 **v229;
  __CFString *v230;
  __CFString *v231;
  unsigned __int8 **v232;
  __CFString *v233;
  id v234;
  void *v235;
  id v236;
  unsigned __int8 **v237;
  __CFString *v238;
  unsigned __int8 **v239;
  __CFString *v240;
  int v241;
  char v242;
  float v243;
  __CFString *v244;
  BOOL v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  id *v251;
  id v252;
  int v253;
  uint64_t v254;
  unsigned __int8 **v255;
  __CFString *v256;
  unsigned int v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  WebGPU::CommandBuffer *v261;
  int v262;
  unsigned __int8 **v263;
  void *v264;
  unsigned int v265;
  __CFString *v266;
  unsigned __int8 **v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _BOOL4 v272;
  unsigned int v273;
  uint64_t v274;
  void *v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  void *v279;
  char v280;
  __CFString *v281;
  char v282;
  void *v283;
  unsigned int v284;
  unint64_t v285;
  __int32 v286;
  unsigned int v287;
  unsigned int v288;
  char v289;
  int v290;
  id *v291;
  _BOOL4 v292;
  _BOOL4 v293;
  uint32x2_t v294;
  __CFString *v295;
  void *v296;
  unsigned __int32 v297;
  char v298;
  uint64_t v299;
  char v300;
  unsigned int v301;
  uint64_t v302;
  __CFString *v303;
  _QWORD *v304;
  void *v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310[2];
  char v311;
  uint64_t v312[3];

  v312[1] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    if (*(_DWORD *)(v4 + 8) != 15)
    {
      v25 = (unsigned __int8 **)*((_QWORD *)this + 10);
      v24 = WTF::fastMalloc((WTF *)0x1D8);
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v25, CFSTR("descriptor is corrupted"));
      return v24;
    }
    v5 = *(_QWORD *)(v4 + 16);
    v6 = (WebGPU::CommandEncoder *)((char *)this + 4);
    v7 = *((unsigned __int8 *)this + 4);
    if ((v7 - 3) >= 0xFFFFFFFE)
      goto LABEL_4;
LABEL_11:
    v19 = a2[5];
    v18 = (unsigned int *)a2[6];
    if (v19)
    {
      if (!*(_BYTE *)(v19 + 56) && !*(_QWORD *)(v19 + 16) && !*(_QWORD *)(v19 + 24)
        || (v20 = *(_QWORD *)(v19 + 8), !*(_QWORD *)(v20 + 8))
        || v20 != *((_QWORD *)this + 10))
      {
        v21 = CFSTR("occlusion query does not match the device");
LABEL_18:
        v22 = (unsigned __int8 **)*((_QWORD *)this + 10);
        v23 = v21;
        v24 = WTF::fastMalloc((WTF *)0x1D8);
        WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v22, v23);

        return v24;
      }
      if (*(_DWORD *)(v19 + 36))
      {
        v21 = CFSTR("occlusion query type is not occlusion");
        goto LABEL_18;
      }
    }
    if (v18)
    {
      v32 = *((_QWORD *)this + 10);
      v33 = *(unsigned int *)(v32 + 228);
      if (!(_DWORD)v33)
      {
        v21 = CFSTR("device does not have timestamp query feature");
        goto LABEL_18;
      }
      v34 = *(int **)(v32 + 216);
      v21 = CFSTR("device does not have timestamp query feature");
      while (1)
      {
        v35 = *v34++;
        if (v35 == 3)
          break;
        if (!--v33)
          goto LABEL_18;
      }
      v36 = *(_QWORD *)v18;
      v37 = *(unsigned int *)(*(_QWORD *)v18 + 36);
      if ((_DWORD)v37 == 1)
      {
        if (!*(_BYTE *)(v36 + 56) && !*(_QWORD *)(v36 + 16) && !*(_QWORD *)(v36 + 24)
          || ((v38 = *(_QWORD *)(v36 + 8), v38 == v32) ? (v39 = *(_QWORD *)(v38 + 8) == 0) : (v39 = 1), v39))
        {
          v21 = CFSTR("device mismatch");
          goto LABEL_18;
        }
        v40 = *(unsigned int *)(v36 + 32);
        v41 = v18[2];
        v42 = v18[3];
        if ((_DWORD)v41 == -1)
          v43 = 0;
        else
          v43 = v41;
        if ((_DWORD)v42 == -1)
          v44 = 0;
        else
          v44 = v42;
        if (v43 < v40
          && v44 < v40
          && (_DWORD)v41 != (_DWORD)v42)
        {
          goto LABEL_71;
        }
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("writeIndices mismatch: beginningOfPassWriteIndex(%u) >= querySetCount(%u) || endOfPassWriteIndex(%u) >= querySetCount(%u) || timestampWrite.beginningOfPassWriteIndex(%u) == timestampWrite.endOfPassWriteIndex(%u)"), v43, v40, v44, v40, v41, v42);
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("query type is not timestamp but %d"), v37);
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      if (v21)
        goto LABEL_18;
    }
LABEL_71:
    if (objc_msgSend(*((id *)this + 2), "status"))
    {
      v47 = (unsigned __int8 **)*((_QWORD *)this + 10);
      v24 = WTF::fastMalloc((WTF *)0x1D8);
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v47, CFSTR("command buffer has already been committed"));
      return v24;
    }
    v48 = (void *)objc_opt_new();
    v296 = v48;
    if ((unint64_t)a2[2] >= 9)
    {
      v49 = (unsigned __int8 **)*((_QWORD *)this + 10);
      v24 = WTF::fastMalloc((WTF *)0x1D8);
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v49, CFSTR("color attachment count is > 8"));
LABEL_474:

      return v24;
    }
    WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v283 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = *((_QWORD *)this + 10);
    v284 = *(_DWORD *)(v50 + 188);
    v309 = 0;
    v51 = a2[2];
    if (v51)
    {
      v52 = 0;
      v288 = 0;
      v297 = 0;
      LODWORD(v53) = 0;
      v286 = 0;
      v54 = 0;
      v280 = 1;
      while (1)
      {
        v302 = a2[3];
        v55 = v302 + 72 * v52;
        v57 = *(_QWORD *)(v55 + 8);
        v56 = (_QWORD *)(v55 + 8);
        if (v57)
          break;
LABEL_77:
        v52 = ++v54;
        if (v51 <= v54)
        {
          v175 = a2 + 4;
          v176 = (uint64_t *)a2[4];
          if (v176)
          {
            v50 = *((_QWORD *)this + 10);
            v177 = v286;
            v178 = v280;
            v179 = *v176;
            v180 = *(void **)(*v176 + 16);
            if (!v180)
              goto LABEL_304;
            goto LABEL_319;
          }
          v304 = a2 + 4;
          LODWORD(v181) = 0;
          v305 = 0;
          v298 = 0;
          v182 = 0;
          v183 = 0;
          if ((v280 & 1) != 0)
            goto LABEL_307;
LABEL_308:
          v300 = v182;
          v184 = a2[5];
          if (v184)
          {
            WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v184 + 40, (uint64_t)this, (uint64_t)v310);
            if (*(_BYTE *)(v184 + 56))
            {
              *((_BYTE *)this + 76) = 1;
              v185 = *((_QWORD *)this + 7);
              if (v185)
              {
                v186 = *(WebGPU::CommandBuffer **)(v185 + 8);
                if (v186)
                  WebGPU::CommandBuffer::makeInvalid(v186, *((NSString **)this + 8));
              }
              v48 = v296;
            }
            if (*(_DWORD *)(v184 + 36))
            {
              v187 = (unsigned __int8 **)*((_QWORD *)this + 10);
              v188 = CFSTR("querySet for occlusion query was not of type occlusion");
              v24 = WTF::fastMalloc((WTF *)0x1D8);
              v189 = CFSTR("querySet for occlusion query was not of type occlusion");
              WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v187, CFSTR("querySet for occlusion query was not of type occlusion"));
              goto LABEL_464;
            }
            v220 = *(id *)(v184 + 16);
            objc_msgSend(v48, "setVisibilityResultBuffer:", v220);

            objc_msgSend(v296, "visibilityResultBuffer");
            v214 = (void *)objc_claimAutoreleasedReturnValue();
            if (*(_BYTE *)(v184 + 56))
            {
              v213 = -1;
            }
            else
            {
              v234 = *(id *)(v184 + 16);
              v213 = objc_msgSend(v234, "length");

            }
          }
          else
          {
            v213 = 0;
            v214 = 0;
          }
          if (objc_msgSend(v283, "count") || v305)
          {
            if (v305)
              WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(*(_QWORD *)*v304 + 96), objc_msgSend(*(id *)(*(_QWORD *)*v304 + 16), "parentRelativeLevel"), objc_msgSend(*(id *)(*(_QWORD *)*v304 + 16), "parentRelativeSlice"), 1);
            WebGPU::CommandEncoder::runClearEncoder((uint64_t)this, v283, v305, v183, (int)v181, 0, 0, 0.0);
          }
          objc_msgSend(*((id *)this + 2), "renderCommandEncoderWithDescriptor:", v296);
          v235 = (void *)objc_claimAutoreleasedReturnValue();
          v236 = v235;
          objc_storeStrong((id *)this + 5, v235);
          WebGPU::Queue::setEncoderForBuffer(*(_QWORD *)(*((_QWORD *)this + 10) + 16), *((void **)this + 2), v236);

          v237 = (unsigned __int8 **)*((_QWORD *)this + 10);
          v231 = (__CFString *)v236;
          v238 = v214;
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, v231, (uint64_t)a2, v213, v300, v298, (uint64_t)this, v238, v5, v237);
          v295 = v238;

LABEL_462:
LABEL_463:
          v189 = v295;
          goto LABEL_464;
        }
      }
      objc_msgSend(v48, "colorAttachments");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v287 = v54;
      objc_msgSend(v58, "objectAtIndexedSubscript:", v52);
      v305 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v305, "setClearColor:", *(double *)(v302 + 72 * v52 + 40), *(double *)(v302 + 72 * v52 + 48), *(double *)(v302 + 72 * v52 + 56), *(double *)(v302 + 72 * v52 + 64));
      v59 = *v56;
      v291 = (id *)(*v56 + 16);
      if (!*v291 && !*(_BYTE *)(*(_QWORD *)(v59 + 96) + 96))
      {
        v61 = (unsigned __int8 **)*((_QWORD *)this + 10);
LABEL_363:
        v24 = WTF::fastMalloc((WTF *)0x1D8);
        WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v61, CFSTR("device mismatch"));
        goto LABEL_465;
      }
      v60 = *(_QWORD *)(v59 + 88);
      v61 = (unsigned __int8 **)*((_QWORD *)this + 10);
      if (*(_QWORD *)(v60 + 8))
        v62 = v60 == (_QWORD)v61;
      else
        v62 = 0;
      if (!v62)
        goto LABEL_363;
      v63 = *(uint32x2_t **)(v59 + 96);
      v299 = v59;
      v64 = *(_DWORD *)(v59 + 48);
      v65 = v63[4].i32[1];
      v66 = v63[5].i32[0];
      if (v297)
      {
        if (v65 == 2 || v65 == 1)
        {
          v68 = (unint64_t)vmax_u32(vshl_u32(v63[2], (uint32x2_t)vneg_s32(vdup_n_s32(v64))), (uint32x2_t)0x100000001);
        }
        else if (v65)
        {
          v68 = 0;
        }
        else
        {
          v67 = (unsigned __int32)v63[2].i32[0] >> v64 <= 1 ? 1 : (unsigned __int32)v63[2].i32[0] >> v64;
          v68 = v67 | 0x100000000;
        }
        if (v297 != WebGPU::Texture::physicalTextureExtent(v63[4].i32[1], v63[5].i32[0], v68)
          || (v65 == 2 || v65 == 1
            ? (v70 = (unint64_t)vmax_u32(vshl_u32(v63[2], (uint32x2_t)vneg_s32(vdup_n_s32(v64))), (uint32x2_t)0x100000001)): v65? (v70 = 0): ((unsigned __int32)v63[2].i32[0] >> v64 <= 1 ? (v69 = 1) : (v69 = (unsigned __int32)v63[2].i32[0] >> v64), v70 = v69 | 0x100000000), (_DWORD)v53 != WebGPU::Texture::physicalTextureExtent(v65, v66, v70) >> 32 || v286 != v63[4].i32[0]))
        {
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (unsigned __int8 **)v60, CFSTR("texture size does not match"));
          goto LABEL_465;
        }
      }
      if (v65 == 2 || v65 == 1)
      {
        v294 = vmax_u32(vshl_u32(v63[2], (uint32x2_t)vneg_s32(vdup_n_s32(v64))), (uint32x2_t)0x100000001);
        v75 = WebGPU::Texture::texelBlockWidth(v66);
        v74 = (unint64_t)v294;
        if (v294.i32[0] % v75)
          v76 = v75 - v294.i32[0] % v75;
        else
          v76 = 0;
        v297 = v76 + v294.i32[0];
      }
      else if (v65)
      {
        v297 = 0;
        v74 = 0;
      }
      else
      {
        if ((unsigned __int32)v63[2].i32[0] >> v64 <= 1)
          v71 = 1;
        else
          v71 = (unsigned __int32)v63[2].i32[0] >> v64;
        v72 = WebGPU::Texture::texelBlockWidth(v66);
        if (v71 % v72)
          v73 = v72 - v71 % v72;
        else
          v73 = 0;
        v297 = v73 + v71;
        v74 = v71 | 0x100000000;
      }
      v285 = WebGPU::Texture::physicalTextureExtent(v65, v66, v74);
      v286 = v63[4].i32[0];
      v77 = *(_DWORD *)(v299 + 40);
      v78 = WebGPU::Texture::renderTargetPixelByteAlignment(v77);
      v79 = WebGPU::Texture::renderTargetPixelByteCost(v77);
      if (v288 % v78)
        v80 = v78 - v288 % v78;
      else
        v80 = 0;
      if (v79 + v288 + v80 > v284)
      {
        v24 = WTF::fastMalloc((WTF *)0x1D8);
        WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (unsigned __int8 **)v60, CFSTR("total bytes per sample exceeds limit"));
        goto LABEL_465;
      }
      v288 += v79 + v80;
      v81 = v63[12].u8[0];
      if (!v63[12].i8[0])
      {
        if ((v63[5].i8[4] & 0x10) == 0)
          goto LABEL_367;
        if (!WebGPU::Texture::isColorRenderableFormat(v77, v60))
        {
          v60 = *((_QWORD *)this + 10);
LABEL_367:
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (unsigned __int8 **)v60, CFSTR("color attachment is not renderable"));
          goto LABEL_465;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v299 + 96) + 44) & 0x10) == 0
          || (v82 = *(_DWORD *)(v299 + 44), v82 > 6)
          || ((1 << v82) & 0x4C) == 0
          || *(_DWORD *)(v299 + 52) != 1
          || *(_DWORD *)(v299 + 60) >= 2u)
        {
          v211 = (unsigned __int8 **)*((_QWORD *)this + 10);
          v212 = CFSTR("texture view is not renderable");
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          v189 = CFSTR("texture view is not renderable");
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v211, CFSTR("texture view is not renderable"));
          goto LABEL_464;
        }
      }
      WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v299 + 104, (uint64_t)this, (uint64_t)v310);
      v83 = *(_QWORD *)(v299 + 96);
      v84 = v291;
      if (*(_BYTE *)(v83 + 96))
      {
        if (*(_BYTE *)(v83 + 97))
          goto LABEL_141;
        *((_BYTE *)this + 76) = 1;
        v85 = *((_QWORD *)this + 7);
        if (v85)
        {
          v86 = *(WebGPU::CommandBuffer **)(v85 + 8);
          if (v86)
            WebGPU::CommandBuffer::makeInvalid(v86, *((NSString **)this + 8));
        }
        v83 = *(_QWORD *)(v299 + 96);
        v84 = v291;
        if (*(_BYTE *)(v83 + 96))
LABEL_141:
          v84 = (id *)(v83 + 8);
      }
      v295 = (__CFString *)*v84;
      objc_msgSend(v305, "setTexture:");
      objc_msgSend(v305, "texture");
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v88 = v87 == 0;

      if (v88)
      {
        if (!v81)
        {
          v229 = (unsigned __int8 **)*((_QWORD *)this + 10);
          v230 = CFSTR("color attachment's texture is nil");
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          v231 = CFSTR("color attachment's texture is nil");
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v229, CFSTR("color attachment's texture is nil"));
          goto LABEL_462;
        }
LABEL_300:

        v53 = HIDWORD(v285);
        v51 = a2[2];
        v48 = v296;
        v54 = v287;
        goto LABEL_77;
      }
      objc_msgSend(v305, "setLevel:", 0);
      objc_msgSend(v305, "setSlice:", 0);
      v89 = *(_DWORD *)(v299 + 44);
      v90 = v302 + 72 * v52;
      if (*(_BYTE *)(v90 + 20))
      {
        if (v89 != 6)
        {
          v225 = (unsigned __int8 **)*((_QWORD *)this + 10);
          v226 = CFSTR("depthSlice specified on 2D texture");
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          v231 = CFSTR("depthSlice specified on 2D texture");
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v225, CFSTR("depthSlice specified on 2D texture"));
          goto LABEL_462;
        }
        if (v81)
          v91 = 0;
        else
          v91 = *(unsigned int *)(v90 + 16);
        v93 = *(uint32x2_t **)(v299 + 96);
        v94 = *(_DWORD *)(v299 + 48);
        v95 = v93[4].i32[1];
        if (v95 == 2 || v95 == 1)
        {
          v98 = (unint64_t)vmax_u32(vshl_u32(v93[2], (uint32x2_t)vneg_s32(vdup_n_s32(v94))), (uint32x2_t)0x100000001);
        }
        else if (v95)
        {
          v98 = 0;
        }
        else
        {
          v96 = (unsigned __int32)v93[2].i32[0] >> v94;
          if (v96 <= 1)
            v97 = 1;
          else
            v97 = v96;
          v98 = v97 | 0x100000000;
        }
        WebGPU::Texture::physicalTextureExtent(v95, v93[5].i32[0], v98);
        if (v91 >= v99)
        {
          v227 = (unsigned __int8 **)*((_QWORD *)this + 10);
          v228 = CFSTR("depthSlice is greater than texture's depth or array layers");
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          v231 = CFSTR("depthSlice is greater than texture's depth or array layers");
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v227, CFSTR("depthSlice is greater than texture's depth or array layers"));
          goto LABEL_462;
        }
        v92 = *(id *)&v93[1];
        if (v81)
          goto LABEL_164;
      }
      else
      {
        if (v89 == 6)
        {
          v239 = (unsigned __int8 **)*((_QWORD *)this + 10);
          v240 = CFSTR("textureDimension is 3D and no depth slice is specified");
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          v231 = CFSTR("textureDimension is 3D and no depth slice is specified");
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v239, CFSTR("textureDimension is 3D and no depth slice is specified"));
          goto LABEL_462;
        }
        if (v81)
        {
          v92 = *(id *)(*(_QWORD *)(v299 + 96) + 8);
          v91 = 0;
LABEL_164:
          v100 = 0;
LABEL_167:
          v101 = v91 | (v100 << 32);
          v308 = v101;
          v102 = v309;
          v103 = ~((_QWORD)v92 << 32);
          if (v309)
          {
            v104 = *(_DWORD *)(v309 - 8);
            v105 = (((unint64_t)v92 + v103) ^ (((unint64_t)v92 + v103) >> 22))
                 + ~((((unint64_t)v92 + v103) ^ (((unint64_t)v92 + v103) >> 22)) << 13);
            v106 = (9 * (v105 ^ (v105 >> 8))) ^ ((9 * (v105 ^ (v105 >> 8))) >> 15);
            v107 = v104 & (((v106 + ~(v106 << 27)) >> 31) ^ ((_DWORD)v106 + ~((_DWORD)v106 << 27)));
            v108 = *(id *)(v309 + 16 * v107);
            if (v108 != v92)
            {
              v109 = 1;
              while (v108)
              {
                v107 = ((_DWORD)v107 + v109) & v104;
                v108 = *(id *)(v309 + 16 * v107);
                ++v109;
                if (v108 == v92)
                  goto LABEL_174;
              }
              v107 = *(unsigned int *)(v309 - 4);
            }
LABEL_174:
            if (v107 != *(_DWORD *)(v309 - 4))
            {
              WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v310, (uint64_t *)(v309 + 16 * v107 + 8), &v308);
              if (!v311)
              {
                v255 = (unsigned __int8 **)*((_QWORD *)this + 10);
                v256 = CFSTR("attempting to render to overlapping color attachment");
                v24 = WTF::fastMalloc((WTF *)0x1D8);
                WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v255, CFSTR("attempting to render to overlapping color attachment"));

                goto LABEL_463;
              }
              goto LABEL_204;
            }
          }
          v312[0] = v101;
          v307 = 0;
          WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v310, &v307, v312);
          if (v102
            || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(&v309, 8u), (v102 = v309) != 0))
          {
            v111 = *(_DWORD *)(v102 - 8);
          }
          else
          {
            v111 = 0;
          }
          v112 = (((unint64_t)v92 + v103) ^ (((unint64_t)v92 + v103) >> 22))
               + ~((((unint64_t)v92 + v103) ^ (((unint64_t)v92 + v103) >> 22)) << 13);
          v113 = (9 * (v112 ^ (v112 >> 8))) ^ ((9 * (v112 ^ (v112 >> 8))) >> 15);
          v114 = v111 & (((v113 + ~(v113 << 27)) >> 31) ^ (v113 + ~((_DWORD)v113 << 27)));
          v115 = (_QWORD *)(v102 + 16 * v114);
          v116 = (id)*v115;
          if (*v115)
          {
            v117 = 0;
            v118 = 1;
            while (v116 != v92)
            {
              if (v116 == (id)-1)
                v117 = v115;
              v114 = (v114 + v118) & v111;
              v115 = (_QWORD *)(v102 + 16 * v114);
              v116 = (id)*v115;
              ++v118;
              if (!*v115)
              {
                if (v117)
                {
                  *v117 = 0;
                  v117[1] = 0;
                  --*(_DWORD *)(v102 - 16);
                  v115 = v117;
                }
                goto LABEL_186;
              }
            }
            v123 = v307;
            v307 = 0;
            v124 = v115[1];
            v115[1] = v123;
            if (!v124)
              goto LABEL_204;
            WTF::fastFree((WTF *)(v124 - 16), v110);
            goto LABEL_202;
          }
LABEL_186:
          *v115 = v92;
          v119 = v307;
          v307 = 0;
          v120 = v115[1];
          v115[1] = v119;
          if (v120)
            WTF::fastFree((WTF *)(v120 - 16), v110);
          v121 = v309;
          if (v309)
            v122 = *(_DWORD *)(v309 - 12) + 1;
          else
            v122 = 1;
          *(_DWORD *)(v309 - 12) = v122;
          v125 = (*(_DWORD *)(v121 - 16) + v122);
          v126 = *(unsigned int *)(v121 - 4);
          if (v126 > 0x400)
          {
            if (v126 > 2 * v125)
              goto LABEL_202;
          }
          else
          {
            if (3 * v126 > 4 * v125)
              goto LABEL_202;
            if (!(_DWORD)v126)
            {
              v127 = 8;
LABEL_201:
              WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(&v309, v127);
LABEL_202:
              if (v307)
                WTF::fastFree((WTF *)(v307 - 16), v110);
LABEL_204:
              if (v89 == 6)
                v128 = v91;
              else
                v128 = 0;
              objc_msgSend(v305, "setDepthPlane:", v128);
              objc_msgSend(v305, "setSlice:", 0);
              v129 = *(_DWORD *)(v302 + 72 * v52 + 32);
              if (!v129 || v129 == 0x7FFFFFFF)
              {
                v130 = 0;
              }
              else if (v129 == 1)
              {
                v130 = 2;
              }
              else
              {
                v130 = 1;
              }
              objc_msgSend(v305, "setLoadAction:", v130);
              v131 = v302 + 72 * v52;
              v133 = *(_QWORD *)(v131 + 24);
              v132 = (_DWORD *)(v131 + 24);
              v134 = v132[3];
              v135 = 2 * (v133 != 0);
              v136 = 3;
              if (!v133)
                v136 = 1;
              if (v134 != 1)
                v136 = 0;
              if (v134 == 2)
                v136 = v135;
              if (v134)
                v137 = v136;
              else
                v137 = v135;
              objc_msgSend(v305, "setStoreAction:", v137);
              if (objc_msgSend(v305, "loadAction") == 1
                && !WebGPU::Texture::previouslyCleared(*(WebGPU::Texture **)(v299 + 96), objc_msgSend(*(id *)(v299 + 16), "parentRelativeLevel"), objc_msgSend(*v291, "parentRelativeSlice")))
              {
                objc_msgSend(v305, "texture");
                v138 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v138 = 0;
              }
              v139 = *(_QWORD *)v132;
              if (*(_QWORD *)v132)
              {
                v279 = v138;
                v140 = (unsigned __int8 **)*((_QWORD *)this + 10);
                v141 = (id *)(v139 + 16);
                if (!*(_QWORD *)(v139 + 16) && !*(_BYTE *)(*(_QWORD *)(v139 + 96) + 96)
                  || ((v142 = *(unsigned __int8 ***)(v139 + 88), v142[1]) ? (v143 = v142 == v140) : (v143 = 0), !v143))
                {
                  v224 = CFSTR("resolve target created from different device");
                  v24 = WTF::fastMalloc((WTF *)0x1D8);
                  v303 = CFSTR("resolve target created from different device");
                  WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v140, CFSTR("resolve target created from different device"));
                  goto LABEL_372;
                }
                WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v139 + 104, (uint64_t)this, (uint64_t)v310);
                v144 = *(_QWORD *)(v139 + 96);
                if (*(_BYTE *)(v144 + 96))
                {
                  if (*(_BYTE *)(v144 + 97))
                    goto LABEL_240;
                  *((_BYTE *)this + 76) = 1;
                  v145 = *((_QWORD *)this + 7);
                  if (v145)
                  {
                    v146 = *(WebGPU::CommandBuffer **)(v145 + 8);
                    if (v146)
                      WebGPU::CommandBuffer::makeInvalid(v146, *((NSString **)this + 8));
                  }
                  v144 = *(_QWORD *)(v139 + 96);
                  if (*(_BYTE *)(v144 + 96))
LABEL_240:
                    v141 = (id *)(v144 + 8);
                }
                v303 = (__CFString *)*v141;
                if (-[__CFString sampleCount](v295, "sampleCount") == 1
                  || -[__CFString sampleCount](v303, "sampleCount") != 1)
                {
                  goto LABEL_370;
                }
                v147 = v303;
                if (-[__CFString textureType](v147, "textureType") == 4)
                {

LABEL_370:
                  v232 = (unsigned __int8 **)*((_QWORD *)this + 10);
                  v233 = CFSTR("resolve target is invalid");
                  v24 = WTF::fastMalloc((WTF *)0x1D8);
                  v223 = CFSTR("resolve target is invalid");
                  WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v232, CFSTR("resolve target is invalid"));
LABEL_371:

LABEL_372:
                  goto LABEL_463;
                }
                v148 = -[__CFString textureType](v147, "textureType") == 8;
                v281 = v147;

                if (v148)
                  goto LABEL_370;
                v149 = v295;
                if (-[__CFString textureType](v149, "textureType") == 4)
                {

                  v150 = v299;
                }
                else
                {
                  v151 = -[__CFString textureType](v149, "textureType") == 8;

                  v150 = v299;
                  if (!v151)
                    goto LABEL_370;
                }
                if ((*(_BYTE *)(*(_QWORD *)(v139 + 96) + 44) & 0x10) == 0)
                  goto LABEL_370;
                v152 = *(_DWORD *)(v139 + 44);
                if (v152 > 6)
                  goto LABEL_370;
                if (((1 << v152) & 0x4C) == 0)
                  goto LABEL_370;
                if (*(_DWORD *)(v139 + 52) != 1)
                  goto LABEL_370;
                if (*(_DWORD *)(v139 + 60) > 1u)
                  goto LABEL_370;
                v153 = -[__CFString pixelFormat](v149, "pixelFormat");
                if (v153 != -[__CFString pixelFormat](v281, "pixelFormat")
                  || (WebGPU::Texture::supportsResolve(*(_DWORD *)(v139 + 40), *((_QWORD *)this + 10)) & 1) == 0)
                {
                  goto LABEL_370;
                }
                objc_msgSend(v305, "setResolveTexture:", v281);
                objc_msgSend(v305, "setResolveLevel:", 0);
                objc_msgSend(v305, "setResolveSlice:", 0);
                objc_msgSend(v305, "setResolveDepthPlane:", 0);
                v154 = *(uint32x2_t **)(v139 + 96);
                v155 = *(_DWORD *)(v139 + 48);
                v156 = v154[4].i32[1];
                v277 = v155;
                if (v156 == 2 || v156 == 1)
                {
                  v158 = (unint64_t)vmax_u32(vshl_u32(v154[2], (uint32x2_t)vneg_s32(vdup_n_s32(v155))), (uint32x2_t)0x100000001);
                }
                else if (v156)
                {
                  v158 = 0;
                }
                else
                {
                  if ((unsigned __int32)v154[2].i32[0] >> v155 <= 1)
                    v157 = 1;
                  else
                    v157 = (unsigned __int32)v154[2].i32[0] >> v155;
                  v158 = v157 | 0x100000000;
                }
                v278 = v154[5].i32[0];
                v159 = WebGPU::Texture::physicalTextureExtent(v156, v278, v158);
                v160 = *(uint32x2_t **)(v150 + 96);
                v161 = *(_DWORD *)(v150 + 48);
                v162 = v160[4].i32[1];
                v276 = v161;
                if (v162 == 2 || v162 == 1)
                {
                  v164 = (unint64_t)vmax_u32(vshl_u32(v160[2], (uint32x2_t)vneg_s32(vdup_n_s32(v161))), (uint32x2_t)0x100000001);
                }
                else if (v162)
                {
                  v164 = 0;
                }
                else
                {
                  if ((unsigned __int32)v160[2].i32[0] >> v161 <= 1)
                    v163 = 1;
                  else
                    v163 = (unsigned __int32)v160[2].i32[0] >> v161;
                  v164 = v163 | 0x100000000;
                }
                v165 = v160[5].i32[0];
                if (v159 != WebGPU::Texture::physicalTextureExtent(v162, v165, v164)
                  || (v156 == 2
                    ? (v166 = v278,
                       v168 = (unint64_t)vmax_u32(vshl_u32(v154[2], (uint32x2_t)vneg_s32(vdup_n_s32(v277))), (uint32x2_t)0x100000001)): (v166 = v278, v156 == 1)? (v168 = (unint64_t)vmax_u32(vshl_u32(v154[2], (uint32x2_t)vneg_s32(vdup_n_s32(v277))), (uint32x2_t)0x100000001)): v156? (v168 = 0): ((unsigned __int32)v154[2].i32[0] >> v277 <= 1? (v167 = 1): (v167 = (unsigned __int32)v154[2].i32[0] >> v277), v168 = v167 | 0x100000000), (v169 = WebGPU::Texture::physicalTextureExtent(v156, v166, v168), v162 == 2) || v162 == 1? (v171 = (unint64_t)vmax_u32(vshl_u32(v160[2], (uint32x2_t)vneg_s32(vdup_n_s32(v276))), (uint32x2_t)0x100000001)): v162? (v171 = 0): ((unsigned __int32)v160[2].i32[0] >> v276 <= 1
                     ? (v170 = 1)
                     : (v170 = (unsigned __int32)v160[2].i32[0] >> v276),
                       v171 = v170 | 0x100000000),
                      HIDWORD(v169) != WebGPU::Texture::physicalTextureExtent(v162, v165, v171) >> 32))
                {
                  v221 = (unsigned __int8 **)*((_QWORD *)this + 10);
                  v222 = CFSTR("resolve target dimensions are invalid");
                  v24 = WTF::fastMalloc((WTF *)0x1D8);
                  v223 = CFSTR("resolve target dimensions are invalid");
                  WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v221, CFSTR("resolve target dimensions are invalid"));
                  goto LABEL_371;
                }

                v138 = v279;
              }
              if (v138)
              {
                v172 = -[TextureAndClearColor initWithTexture:]([TextureAndClearColor alloc], "initWithTexture:", v138);
                v173 = v138;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v287);
                v174 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v283, "setObject:forKey:", v172, v174);

                WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(v299 + 96), objc_msgSend(*(id *)(v299 + 16), "parentRelativeLevel"), objc_msgSend(*v291, "parentRelativeSlice"), 1);
                if (*(_QWORD *)v132)
                  WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(*(_QWORD *)v132 + 96), objc_msgSend(*(id *)(*(_QWORD *)v132 + 16), "parentRelativeLevel"), objc_msgSend(*(id *)(*(_QWORD *)v132 + 16), "parentRelativeSlice"), 1);

                v138 = v173;
              }

              v280 = 0;
              goto LABEL_300;
            }
          }
          v127 = (_DWORD)v126 << (6 * v122 >= (2 * v126));
          goto LABEL_201;
        }
        v91 = *(unsigned int *)(v299 + 56);
        v92 = *(id *)(*(_QWORD *)(v299 + 96) + 8);
      }
      v100 = *(unsigned int *)(v299 + 48);
      goto LABEL_167;
    }
    v175 = a2 + 4;
    v176 = (uint64_t *)a2[4];
    if (!v176)
    {
      v304 = a2 + 4;
      LODWORD(v181) = 0;
      v305 = 0;
      v298 = 0;
      v182 = 0;
      v183 = 0;
      goto LABEL_307;
    }
    v297 = 0;
    LODWORD(v53) = 0;
    v177 = 0;
    v178 = 1;
    v179 = *v176;
    v180 = *(void **)(*v176 + 16);
    if (!v180)
    {
LABEL_304:
      if (!*(_BYTE *)(*(_QWORD *)(v179 + 96) + 96))
      {
LABEL_323:
        v192 = CFSTR("depth stencil texture device mismatch");
        v24 = WTF::fastMalloc((WTF *)0x1D8);
        v189 = CFSTR("depth stencil texture device mismatch");
        WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (unsigned __int8 **)v50, CFSTR("depth stencil texture device mismatch"));
        v305 = 0;
        goto LABEL_464;
      }
    }
LABEL_319:
    v190 = *(_QWORD *)(v179 + 88);
    if (*(_QWORD *)(v190 + 8))
      v191 = v190 == v50;
    else
      v191 = 0;
    if (!v191)
      goto LABEL_323;
    v193 = *(_QWORD *)(v179 + 96);
    v282 = v178;
    v304 = v175;
    if (*(_BYTE *)(v193 + 96))
      v180 = *(void **)(v193 + 8);
    v295 = v180;
    v194 = *(unsigned int *)(v179 + 40);
    v195 = v194 < 0x2C;
    v196 = *(uint32x2_t **)(v179 + 96);
    v197 = v196[12].u8[0];
    if (v196[12].i8[0])
    {
LABEL_327:
      v289 = v194;
      v198 = *((_DWORD *)v176 + 5);
      v292 = v195;
      v199 = v195 & (0xF8000000000uLL >> v194);
      if (v199)
      {
        objc_msgSend(v296, "depthAttachment");
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        v201 = *((float *)v176 + 4);
        v202 = v201;
        if (v201 >= 0.0 && v201 <= 1.0 && *(_DWORD *)(v179 + 40) == 39)
        {
          v203 = v202 + 0.00000762951095;
          v202 = nextafterf(v203, 1.0);
        }
        if (v202 <= 1.0)
          v204 = v202;
        else
          v204 = 1.0;
        v205 = v202 < 0.0;
        v206 = 0.0;
        if (!v205)
          v206 = v204;
        if (*((_DWORD *)v176 + 2) != 1)
          v206 = 1.0;
        objc_msgSend(v200, "setClearDepth:", v206);
        objc_msgSend(v200, "setTexture:", v295);
        objc_msgSend(v200, "setLevel:", 0);
        v207 = *((_DWORD *)v176 + 2);
        if (!v207 || v207 == 0x7FFFFFFF)
        {
          v208 = 0;
        }
        else if (v207 == 1)
        {
          v208 = 2;
        }
        else
        {
          v208 = 1;
        }
        objc_msgSend(v200, "setLoadAction:", v208);
        objc_msgSend(v200, "setStoreAction:", *((_DWORD *)v176 + 3) == 1);
        if (objc_msgSend(v200, "loadAction") != 1
          || objc_msgSend(v200, "storeAction")
          || WebGPU::Texture::previouslyCleared(*(WebGPU::Texture **)(v179 + 96), objc_msgSend(*(id *)(v179 + 16), "parentRelativeLevel"), objc_msgSend(*(id *)(v179 + 16), "parentRelativeSlice")))
        {
          v305 = 0;
          v219 = 0;
        }
        else
        {
          objc_msgSend(v200, "texture");
          v305 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v200, "texture");
          v264 = (void *)objc_claimAutoreleasedReturnValue();
          v219 = v264 != 0;

        }
      }
      else
      {
        v305 = 0;
        v219 = 0;
      }
      if (v197)
      {
        v241 = *((_DWORD *)v176 + 2);
      }
      else
      {
        v241 = *((_DWORD *)v176 + 2);
        if (v199)
          v245 = v198 == 0;
        else
          v245 = 0;
        if (!v245)
        {
          if (v241 || (v242 = v282, *((_DWORD *)v176 + 3)))
          {
            v244 = CFSTR("depth load and store op were specified");
            goto LABEL_451;
          }
LABEL_392:
          if ((v242 & 1) != 0)
          {
            objc_msgSend(v296, "setDefaultRasterSampleCount:", *(unsigned int *)(*(_QWORD *)(v179 + 96) + 32));
            if (!objc_msgSend(v296, "defaultRasterSampleCount"))
            {
              v244 = CFSTR("no color targets and depth-stencil texture is nil");
              goto LABEL_451;
            }
            objc_msgSend(v296, "setRenderTargetWidth:", -[__CFString width](v295, "width"));
            objc_msgSend(v296, "setRenderTargetHeight:", -[__CFString height](v295, "height"));

            v183 = v219;
            v181 = (uint64_t *)*v304;
            if (!*v304)
            {
              v298 = 0;
              v48 = v296;
              v182 = v198 != 0;
              goto LABEL_307;
            }
          }
          else
          {

            v183 = v219;
            v181 = (uint64_t *)*v304;
            if (!*v304)
            {
              v298 = 0;
              v48 = v296;
              v182 = v198 != 0;
              goto LABEL_308;
            }
          }
          objc_msgSend(v296, "stencilAttachment");
          v295 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v246 = *((_DWORD *)v181 + 9);
          v298 = v246 != 0;
          v247 = *v181;
          v248 = v292 & (0xA4000000000uLL >> v289);
          if (v248)
          {
            v249 = *(_QWORD *)(v247 + 96);
            v250 = *(unsigned __int8 *)(v249 + 96);
            v251 = (id *)(v249 + 8);
            if (!v250)
              v251 = (id *)(v247 + 16);
            v252 = *v251;
            -[__CFString setTexture:](v295, "setTexture:", v252);

          }
          -[__CFString setClearStencil:](v295, "setClearStencil:", *((unsigned int *)v181 + 8));
          v253 = *((_DWORD *)v181 + 6);
          if (!v253 || v253 == 0x7FFFFFFF)
          {
            v254 = 0;
          }
          else if (v253 == 1)
          {
            v254 = 2;
          }
          else
          {
            v254 = 1;
          }
          -[__CFString setLoadAction:](v295, "setLoadAction:", v254);
          -[__CFString setStoreAction:](v295, "setStoreAction:", *((_DWORD *)v181 + 7) == 1);
          if (*(_BYTE *)(*(_QWORD *)(v247 + 96) + 96))
          {
LABEL_431:
            WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v247 + 104, (uint64_t)this, (uint64_t)v310);
            v259 = *(_QWORD *)(v247 + 96);
            if (*(_BYTE *)(v259 + 96))
            {
              if (!*(_BYTE *)(v259 + 97))
              {
                *((_BYTE *)this + 76) = 1;
                v260 = *((_QWORD *)this + 7);
                if (v260)
                {
                  v261 = *(WebGPU::CommandBuffer **)(v260 + 8);
                  if (v261)
                    WebGPU::CommandBuffer::makeInvalid(v261, *((NSString **)this + 8));
                }
              }
            }
            if (v248
              && -[__CFString loadAction](v295, "loadAction") == 1
              && !-[__CFString storeAction](v295, "storeAction")
              && !WebGPU::Texture::previouslyCleared(*(WebGPU::Texture **)(v247 + 96), objc_msgSend(*(id *)(v247 + 16), "parentRelativeLevel"), objc_msgSend(*(id *)(v247 + 16), "parentRelativeSlice")))
            {
              -[__CFString texture](v295, "texture");
              v274 = objc_claimAutoreleasedReturnValue();

              -[__CFString texture](v295, "texture");
              v275 = (void *)objc_claimAutoreleasedReturnValue();
              LODWORD(v181) = v275 != 0;

              v305 = (void *)v274;
            }
            else
            {
              LODWORD(v181) = 0;
            }

            v48 = v296;
            v182 = v198 != 0;
            if ((v282 & 1) == 0)
              goto LABEL_308;
LABEL_307:
            if (objc_msgSend(v48, "renderTargetWidth"))
              goto LABEL_308;
            v209 = (unsigned __int8 **)*((_QWORD *)this + 10);
            v210 = CFSTR("zero color and depth targets");
            v24 = WTF::fastMalloc((WTF *)0x1D8);
            v189 = CFSTR("zero color and depth targets");
            WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v209, CFSTR("zero color and depth targets"));
LABEL_464:

LABEL_465:
            v269 = v309;
            if (v309)
            {
              v270 = *(unsigned int *)(v309 - 4);
              if ((_DWORD)v270)
              {
                v271 = (_QWORD *)(v309 + 8);
                do
                {
                  if (*(v271 - 1) != -1 && *v271)
                    WTF::fastFree((WTF *)(*v271 - 16), v268);
                  v271 += 2;
                  --v270;
                }
                while (v270);
              }
              WTF::fastFree((WTF *)(v269 - 16), v268);
            }

            v48 = v296;
            goto LABEL_474;
          }
          v262 = *((_DWORD *)v181 + 6);
          if (!v248 || v246)
          {
            if (!v262 && !*((_DWORD *)v181 + 7))
              goto LABEL_431;
            v244 = CFSTR("stencil load and store op were specified");
          }
          else
          {
            if (v262 && *((_DWORD *)v181 + 7))
              goto LABEL_431;
            v244 = CFSTR("stencil load and store op were not specified");
          }
LABEL_451:
          v263 = (unsigned __int8 **)*((_QWORD *)this + 10);
          v231 = v244;
          v24 = WTF::fastMalloc((WTF *)0x1D8);
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v263, v231);
          goto LABEL_462;
        }
        if (!v241 || !*((_DWORD *)v176 + 3))
        {
          v244 = CFSTR("depth load and store op were not specified");
          goto LABEL_451;
        }
      }
      v242 = v282;
      if (v241 == 1)
      {
        v243 = *((float *)v176 + 4);
        v244 = CFSTR("depth clear value is invalid");
        if (v243 < 0.0 || v243 > 1.0)
          goto LABEL_451;
      }
      goto LABEL_392;
    }
    if (!v297)
      goto LABEL_485;
    v290 = *(_DWORD *)(v179 + 40);
    v293 = v194 < 0x2C;
    v215 = *(_DWORD *)(v179 + 48);
    v216 = v196[4].i32[1];
    v301 = v215;
    if (v216 == 2 || v216 == 1)
    {
      v218 = (unint64_t)vmax_u32(vshl_u32(v196[2], (uint32x2_t)vneg_s32(vdup_n_s32(v215))), (uint32x2_t)0x100000001);
    }
    else if (v216)
    {
      v218 = 0;
    }
    else
    {
      v217 = (unsigned __int32)v196[2].i32[0] >> v215 <= 1 ? 1 : (unsigned __int32)v196[2].i32[0] >> v215;
      v218 = v217 | 0x100000000;
    }
    v306 = v196[5].i32[0];
    if (v297 == WebGPU::Texture::physicalTextureExtent(v216, v306, v218)
      && (v216 == 2 || v216 == 1
        ? (v258 = (unint64_t)vmax_u32(vshl_u32(v196[2], (uint32x2_t)vneg_s32(vdup_n_s32(v301))), (uint32x2_t)0x100000001)): v216? (v258 = 0): ((unsigned __int32)v196[2].i32[0] >> v301 <= 1? (v257 = 1): (v257 = (unsigned __int32)v196[2].i32[0] >> v301), v258 = v257 | 0x100000000), (_DWORD)v53 == WebGPU::Texture::physicalTextureExtent(v216, v306, v258) >> 32&& (v195 = v293, LODWORD(v194) = v290, v177 == v196[4].i32[0])))
    {
LABEL_485:
      if (*(_DWORD *)(v179 + 60) <= 1u && (v265 = *(_DWORD *)(v179 + 52), v265 <= 1))
      {
        if ((v194 - 38) <= 5 && (v196[5].i8[4] & 0x10) != 0)
        {
          v272 = v195;
          v273 = *(_DWORD *)(v179 + 44);
          v266 = CFSTR("depth stencil texture is not renderable");
          if (v273 <= 6 && ((1 << v273) & 0x4C) != 0)
          {
            v195 = v272;
            if (v265 == 1)
              goto LABEL_327;
          }
        }
        else
        {
          v266 = CFSTR("depth stencil texture is not renderable");
        }
      }
      else
      {
        v266 = CFSTR("depth stencil texture has more than one array layer or mip level");
      }
    }
    else
    {
      v266 = CFSTR("depth stencil texture dimensions mismatch");
    }
    v267 = (unsigned __int8 **)*((_QWORD *)this + 10);
    v231 = v266;
    v24 = WTF::fastMalloc((WTF *)0x1D8);
    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v267, v231);
    v305 = 0;
    goto LABEL_462;
  }
  v5 = -1;
  v6 = (WebGPU::CommandEncoder *)((char *)this + 4);
  v7 = *((unsigned __int8 *)this + 4);
  if ((v7 - 3) < 0xFFFFFFFE)
    goto LABEL_11;
LABEL_4:
  if (v7 == 2)
  {
    v8 = *((_QWORD *)this + 10);
    v9 = (void *)MEMORY[0x1E0CB3940];
    WebGPU::CommandsMixin::encoderStateName(v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "Ref<RenderPassEncoder> WebGPU::CommandEncoder::beginRenderPass(const WGPURenderPassDescriptor &)", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](v310, v11);
    v12 = *(_QWORD *)(v8 + 32);
    v13 = 32 * *(unsigned int *)(v8 + 44);
    v14 = v12 + v13;
    while (v13)
    {
      v15 = *(_DWORD *)(v14 - 8);
      v14 -= 32;
      v13 -= 32;
      if (!v15)
      {
        v16 = v12 + v13;
        if (!*(_BYTE *)(v16 + 16))
        {
          v17 = v310[0];
          v310[0] = 0;
          *(_DWORD *)v16 = 1;
          *(_QWORD *)(v16 + 8) = v17;
          *(_BYTE *)(v16 + 16) = 1;
        }
        goto LABEL_27;
      }
    }
    v27 = *(_QWORD *)(v8 + 24);
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v27 + 16))(v27, 1, v310);
      v28 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
LABEL_27:
    v29 = (_DWORD *)v310[0];
    v310[0] = 0;
    if (v29)
    {
      if (*v29 == 2)
        WTF::StringImpl::destroy();
      else
        *v29 -= 2;
    }

  }
  else
  {
    if (*((_QWORD *)this + 8))
      v26 = (__CFString *)*((_QWORD *)this + 8);
    else
      v26 = CFSTR("Encoder state is locked");
    WebGPU::CommandEncoder::makeInvalid(this, &v26->isa);
  }
  v30 = (unsigned __int8 **)*((_QWORD *)this + 10);
  v24 = WTF::fastMalloc((WTF *)0x1D8);
  WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v30, CFSTR("encoder state is not valid"));
  return v24;
}

void sub_18243AF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  uint64_t v27;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v30 = *(_QWORD *)(v27 - 136);
  if (v30)
  {
    v31 = *(unsigned int *)(v30 - 4);
    if ((_DWORD)v31)
    {
      v32 = (_QWORD *)(v30 + 8);
      do
      {
        if (*(v32 - 1) != -1)
        {
          if (*v32)
            WTF::fastFree((WTF *)(*v32 - 16), v29);
        }
        v32 += 2;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)(v30 - 16), v29);
  }

  _Unwind_Resume(a1);
}

void wgpuCommandEncoderCopyBufferToBuffer(WebGPU::CommandEncoder *this, WebGPU::Buffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  WebGPU::CommandsMixin *v7;
  int v8;
  int v9;
  int v11;
  int v12;
  __CFString *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  id v31;
  void *v32;
  NSString *v33;
  _DWORD *v35;

  v9 = *((unsigned __int8 *)this + 4);
  v7 = (WebGPU::CommandEncoder *)((char *)this + 4);
  v8 = v9;
  if ((v9 - 3) >= 0xFFFFFFFE)
  {
    if (v8 == 2)
    {
      v14 = *((_QWORD *)this + 10);
      v15 = (void *)MEMORY[0x1E0CB3940];
      WebGPU::CommandsMixin::encoderStateName(v7);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::copyBufferToBuffer(const Buffer &, uint64_t, Buffer &, uint64_t, uint64_t)", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](&v35, v17);
      v18 = *(_QWORD *)(v14 + 32);
      v19 = 32 * *(unsigned int *)(v14 + 44);
      v20 = v18 + v19;
      while (v19)
      {
        v21 = *(_DWORD *)(v20 - 8);
        v20 -= 32;
        v19 -= 32;
        if (!v21)
        {
          v22 = v18 + v19;
          if (!*(_BYTE *)(v22 + 16))
          {
            v23 = v35;
            v35 = 0;
            *(_DWORD *)v22 = 1;
            *(_QWORD *)(v22 + 8) = v23;
            *(_BYTE *)(v22 + 16) = 1;
          }
          goto LABEL_27;
        }
      }
      v27 = *(_QWORD *)(v14 + 24);
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v27 + 16))(v27, 1, &v35);
        v28 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
LABEL_27:
      v29 = v35;
      v35 = 0;
      if (v29)
      {
        if (*v29 == 2)
          WTF::StringImpl::destroy();
        else
          *v29 -= 2;
      }

    }
    else
    {
      if (*((_QWORD *)this + 8))
        v25 = (__CFString *)*((_QWORD *)this + 8);
      else
        v25 = CFSTR("Encoder state is locked");
      WebGPU::CommandEncoder::makeInvalid(this, &v25->isa);
    }
  }
  else
  {
    v11 = *((unsigned __int8 *)a2 + 52);
    if (v11 != 4)
    {
      if (!*((_QWORD *)a2 + 2) || (v24 = *((_QWORD *)a2 + 32), !*(_QWORD *)(v24 + 8)) || v24 != *((_QWORD *)this + 10))
      {
        v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: source buffer is not valid");
        goto LABEL_49;
      }
    }
    v12 = *(unsigned __int8 *)(a4 + 52);
    if (v12 != 4)
    {
      if (!*(_QWORD *)(a4 + 16)
        || (v26 = *(_QWORD *)(a4 + 256), !*(_QWORD *)(v26 + 8))
        || v26 != *((_QWORD *)this + 10))
      {
        v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: destination buffer is not valid");
        goto LABEL_49;
      }
    }
    if ((*((_BYTE *)a2 + 48) & 4) == 0)
    {
      v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: source usage does not have COPY_SRC");
LABEL_49:
      v33 = v13;
      WebGPU::CommandEncoder::makeInvalid(this, v33);
LABEL_50:

      return;
    }
    if ((*(_BYTE *)(a4 + 48) & 8) == 0)
    {
      v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: destination usage does not have COPY_DST");
      goto LABEL_49;
    }
    v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: destination state is not unmapped or source state is not unmapped");
    if (v11 == 2 || v12 == 2)
      goto LABEL_49;
    if ((a6 & 3) != 0)
    {
      v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: size is not a multiple of 4");
      goto LABEL_49;
    }
    if ((a3 & 3) != 0)
    {
      v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: source offset is not a multiple of 4");
      goto LABEL_49;
    }
    if ((a5 & 3) != 0)
    {
      v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: destination offset is not a multiple of 4");
      goto LABEL_49;
    }
    if (__CFADD__(a3, a6))
    {
LABEL_48:
      v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: source size + offset overflows");
      goto LABEL_49;
    }
    if (__CFADD__(a5, a6))
      goto LABEL_46;
    if (*((_QWORD *)a2 + 5) < (unint64_t)(a3 + a6))
      goto LABEL_48;
    if (*(_QWORD *)(a4 + 40) < (unint64_t)(a5 + a6))
    {
LABEL_46:
      v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: destination size + offset overflows");
      goto LABEL_49;
    }
    if (a2 == (WebGPU::Buffer *)a4)
    {
      v13 = CFSTR("GPUCommandEncoder.copyBufferToBuffer: source equals destination not valid");
      goto LABEL_49;
    }
    WebGPU::Buffer::setCommandEncoder(a2, this);
    WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a4, this);
    *(_QWORD *)(a4 + 232) = 0;
    *(_QWORD *)(a4 + 240) = 0;
    *(_QWORD *)(a4 + 248) = 0;
    if (a6 && *((_BYTE *)a2 + 52) != 4 && *(_BYTE *)(a4 + 52) != 4)
    {
      v31 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)this);
      v32 = (void *)*((_QWORD *)this + 4);
      v33 = (NSString *)*((id *)a2 + 2);
      objc_msgSend(v32, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:");
      goto LABEL_50;
    }
  }
}

void sub_18243B818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_18243B82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  void *v14;
  void *v15;

  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_18243B884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243B894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void wgpuCommandEncoderCopyTextureToTexture(WebGPU::CommandEncoder *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  WebGPU::CommandsMixin *v5;
  int v6;
  int v7;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  NSString *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebGPU::CommandBuffer *v38;
  uint64_t v39;
  WebGPU::CommandBuffer *v40;
  id v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  id v55;
  id v56;
  int v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  void *v64;
  unsigned int v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int64x2_t v97;
  __int128 v98;
  unint64_t v99;
  unsigned int v100;
  __int128 v101;
  unint64_t v102;
  NSString *v103;
  NSString *v104;
  unsigned int v105;
  id v106;
  id v107;
  __int128 v108;
  uint64_t v109;
  id v110;
  int64x2_t v111;
  __int128 v112;
  uint64_t v113;

  if (*(_QWORD *)a2 | *(_QWORD *)a3)
    return;
  v7 = *((unsigned __int8 *)this + 4);
  v5 = (WebGPU::CommandEncoder *)((char *)this + 4);
  v6 = v7;
  if ((v7 - 3) >= 0xFFFFFFFE)
  {
    if (v6 == 2)
    {
      v16 = *((_QWORD *)this + 10);
      v17 = (void *)MEMORY[0x1E0CB3940];
      WebGPU::CommandsMixin::encoderStateName(v5);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::copyTextureToTexture(const WGPUImageCopyTexture &, const WGPUImageCopyTexture &, const WGPUExtent3D &)", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](&v112, v19);
      v20 = *(_QWORD *)(v16 + 32);
      v21 = 32 * *(unsigned int *)(v16 + 44);
      v22 = v20 + v21;
      while (v21)
      {
        v23 = *(_DWORD *)(v22 - 8);
        v22 -= 32;
        v21 -= 32;
        if (!v23)
        {
          v24 = v20 + v21;
          if (!*(_BYTE *)(v24 + 16))
          {
            v25 = v112;
            *(_QWORD *)&v112 = 0;
            *(_DWORD *)v24 = 1;
            *(_QWORD *)(v24 + 8) = v25;
            *(_BYTE *)(v24 + 16) = 1;
          }
          goto LABEL_23;
        }
      }
      v27 = *(_QWORD *)(v16 + 24);
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v27 + 16))(v27, 1, &v112);
        v28 = *(_QWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 24) = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
LABEL_23:
      v29 = (_DWORD *)v112;
      *(_QWORD *)&v112 = 0;
      if (v29)
      {
        if (*v29 == 2)
          WTF::StringImpl::destroy();
        else
          *v29 -= 2;
      }

    }
    else
    {
      if (*((_QWORD *)this + 8))
        v26 = (__CFString *)*((_QWORD *)this + 8);
      else
        v26 = CFSTR("Encoder state is locked");
      WebGPU::CommandEncoder::makeInvalid(this, &v26->isa);
    }
    return;
  }
  v11 = *(_QWORD *)(a2 + 8);
  if (!*(_BYTE *)(v11 + 96) && !*(_QWORD *)(v11 + 8)
    || (v12 = *(_QWORD *)(v11 + 64), !*(_QWORD *)(v12 + 8))
    || v12 != *((_QWORD *)this + 10))
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = CFSTR("source texture is not valid to use with this GPUCommandEncoder");
    goto LABEL_8;
  }
  v30 = *(_QWORD *)(a3 + 8);
  if (!*(_BYTE *)(v30 + 96) && !*(_QWORD *)(v30 + 8)
    || ((v31 = *(_QWORD *)(v30 + 64), v31 == v12) ? (v32 = *(_QWORD *)(v31 + 8) == 0) : (v32 = 1), v32))
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = CFSTR("desintation texture is not valid to use with this GPUCommandEncoder");
    goto LABEL_8;
  }
  WebGPU::Texture::errorValidatingImageCopyTexture(a2, a4);
  v33 = objc_claimAutoreleasedReturnValue();
  if (v33)
  {
LABEL_37:
    v34 = (void *)v33;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUCommandEncoder.copyTextureToTexture: %@"), v33);
    v104 = (NSString *)objc_claimAutoreleasedReturnValue();

    v15 = v104;
    if (v104)
      goto LABEL_9;
LABEL_38:
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(_QWORD *)(a3 + 8);
    goto LABEL_39;
  }
  if ((*(_BYTE *)(v11 + 44) & 1) == 0)
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = CFSTR("source texture usage does not contain CopySrc");
    goto LABEL_8;
  }
  WebGPU::Texture::errorValidatingImageCopyTexture(a3, a4);
  v33 = objc_claimAutoreleasedReturnValue();
  if (v33)
    goto LABEL_37;
  if ((*(_BYTE *)(v30 + 44) & 2) == 0)
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = CFSTR("destination texture usage does not contain CopyDst");
    goto LABEL_8;
  }
  if (*(_DWORD *)(v11 + 32) != *(_DWORD *)(v30 + 32))
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = CFSTR("destination texture sample count does not equal source texture sample count");
    goto LABEL_8;
  }
  v87 = *(unsigned int *)(v11 + 40);
  v88 = *(unsigned int *)(v30 + 40);
  if ((_DWORD)v87 != (_DWORD)v88)
  {
    v89 = WebGPU::Texture::removeSRGBSuffix(v87);
    if (v89 != WebGPU::Texture::removeSRGBSuffix(v88))
    {
      v13 = (void *)MEMORY[0x1E0CB3940];
      v14 = CFSTR("destination texture and source texture are not copy compatible");
      goto LABEL_8;
    }
  }
  v90 = *(_DWORD *)(a2 + 32);
  if ((v87 - 38) <= 5)
  {
    if (v90 == 1)
    {
      if ((_DWORD)v87 != 38)
        goto LABEL_148;
    }
    else if (v90 == 0x7FFFFFFF || v90 == 2 && (v87 > 0x2A || ((1 << v87) & 0x58000000000) == 0))
    {
      goto LABEL_148;
    }
    v91 = *(_DWORD *)(a3 + 32);
    if (v91 == 1)
    {
      if ((_DWORD)v88 == 38)
        goto LABEL_144;
    }
    else if (v91 != 0x7FFFFFFF && (v91 != 2 || v88 <= 0x2A && ((1 << v88) & 0x58000000000) != 0))
    {
      goto LABEL_144;
    }
LABEL_148:
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = CFSTR("source or destination do not refer to a single copy aspect");
    goto LABEL_8;
  }
  if (v90)
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = CFSTR("source aspect is not All");
    goto LABEL_8;
  }
  if ((v88 - 38) >= 6 && *(_DWORD *)(a3 + 32))
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = CFSTR("destination aspect is not All");
    goto LABEL_8;
  }
LABEL_144:
  WebGPU::Texture::errorValidatingTextureCopyRange(a2, a4);
  v33 = objc_claimAutoreleasedReturnValue();
  if (v33)
    goto LABEL_37;
  WebGPU::Texture::errorValidatingTextureCopyRange(a3, a4);
  v33 = objc_claimAutoreleasedReturnValue();
  if (v33)
    goto LABEL_37;
  v35 = *(_QWORD *)(a2 + 8);
  v36 = *(_QWORD *)(a3 + 8);
  if (v35 == v36 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a3 + 16))
  {
    v92 = *(_DWORD *)(v35 + 36);
    if (v92 > 1)
    {
      if (v92 == 2)
      {
        v13 = (void *)MEMORY[0x1E0CB3940];
        v14 = CFSTR("can't copy 3D texture to itself");
      }
      else
      {
        if (v92 != 0x7FFFFFFF)
          goto LABEL_39;
        v13 = (void *)MEMORY[0x1E0CB3940];
        v14 = CFSTR("unknown texture format");
      }
      goto LABEL_8;
    }
    if (!v92)
    {
      v13 = (void *)MEMORY[0x1E0CB3940];
      v14 = CFSTR("can't copy 1D texture to itself");
LABEL_8:
      objc_msgSend(v13, "stringWithFormat:", CFSTR("GPUCommandEncoder.copyTextureToTexture: %@"), v14);
      v15 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v15)
      {
LABEL_9:
        v103 = v15;
        WebGPU::CommandEncoder::makeInvalid(this, v15);

        return;
      }
      goto LABEL_38;
    }
    if (v92 == 1)
    {
      v93 = *(_DWORD *)(a2 + 28);
      v94 = a4[2];
      v95 = v94 + v93;
      if (v94)
      {
        if (v93 != v95)
        {
          v96 = *(_DWORD *)(a3 + 28);
          if (v95 > v96 && v96 + v94 > v93)
          {
            v13 = (void *)MEMORY[0x1E0CB3940];
            v14 = CFSTR("can't copy 2D texture to itself with overlapping array range");
            goto LABEL_8;
          }
        }
      }
    }
  }
LABEL_39:
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v35 + 104, (uint64_t)this, (uint64_t)&v112);
  if (!*(_BYTE *)(v35 + 97))
  {
    if (*(_BYTE *)(v35 + 96))
    {
      *((_BYTE *)this + 76) = 1;
      v37 = *((_QWORD *)this + 7);
      if (v37)
      {
        v38 = *(WebGPU::CommandBuffer **)(v37 + 8);
        if (v38)
          WebGPU::CommandBuffer::makeInvalid(v38, *((NSString **)this + 8));
      }
    }
  }
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v36 + 104, (uint64_t)this, (uint64_t)&v112);
  if (!*(_BYTE *)(v36 + 97))
  {
    if (*(_BYTE *)(v36 + 96))
    {
      *((_BYTE *)this + 76) = 1;
      v39 = *((_QWORD *)this + 7);
      if (v39)
      {
        v40 = *(WebGPU::CommandBuffer **)(v39 + 8);
        if (v40)
          WebGPU::CommandBuffer::makeInvalid(v40, *((NSString **)this + 8));
      }
    }
  }
  if (*(_BYTE *)(v35 + 96) || *(_BYTE *)(v36 + 96))
    return;
  v41 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)this);
  v42 = *(_DWORD *)(v36 + 36);
  v43 = *(_DWORD *)(a3 + 16);
  if (v42 == 2)
    v44 = 1;
  else
    v44 = a4[2];
  if (v42 == 2)
  {
    v46 = (uint64_t)vmax_u32(vshl_u32(*(uint32x2_t *)(v36 + 16), (uint32x2_t)vneg_s32(vdup_n_s32(v43))), (uint32x2_t)0x100000001);
    v47 = *(_DWORD *)(v36 + 24) >> v43;
    if (v47 <= 1)
      v47 = 1;
  }
  else
  {
    if (v42 != 1)
    {
      if (v42)
      {
        v100 = 0;
        v46 = 0;
      }
      else
      {
        v45 = *(_DWORD *)(v36 + 16) >> v43;
        if (v45 <= 1)
          v45 = 1;
        v100 = *(_DWORD *)(v36 + 24);
        v46 = v45 | 0x100000000;
      }
      goto LABEL_69;
    }
    v46 = (uint64_t)vmax_u32(vshl_u32(*(uint32x2_t *)(v36 + 16), (uint32x2_t)vneg_s32(vdup_n_s32(v43))), (uint32x2_t)0x100000001);
    v47 = *(_DWORD *)(v36 + 24);
  }
  v100 = v47;
LABEL_69:
  if (v44)
  {
    v48 = 0;
    v49 = v46;
    v105 = HIDWORD(v46);
    while (1)
    {
      v50 = *(_DWORD *)(v35 + 36) == 2 ? 0 : (v48 + *(_DWORD *)(a2 + 28));
      WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a2 + 8), *(unsigned int *)(a2 + 16), v50, *(void **)(*((_QWORD *)this + 10) + 8), *((void **)this + 4));
      v51 = *(_DWORD *)(v36 + 36) == 2 ? 0 : (v48 + *(_DWORD *)(a3 + 28));
      v53 = *a4;
      v52 = a4[1];
      if (v42 == 2)
        break;
      if (v42 == 1)
      {
        if (v53 != v49)
          goto LABEL_71;
        v54 = v105;
LABEL_88:
        if (v52 != v54)
          goto LABEL_71;
LABEL_89:
        WebGPU::Texture::setPreviouslyCleared((uint64_t *)v36, *(_DWORD *)(a3 + 16), v51, 1);
        if (v44 == ++v48)
          goto LABEL_90;
      }
      else
      {
        if (!v42 && v53 == v49)
          goto LABEL_89;
LABEL_71:
        WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a3 + 8), *(unsigned int *)(a3 + 16), v51, *(void **)(*((_QWORD *)this + 10) + 8), *((void **)this + 4));
        if (v44 == ++v48)
          goto LABEL_90;
      }
    }
    if (v53 != v49 || v52 != v105)
      goto LABEL_71;
    v52 = a4[2];
    v54 = v100;
    goto LABEL_88;
  }
LABEL_90:
  v55 = *(id *)(v36 + 8);
  v56 = *(id *)(*(_QWORD *)(a2 + 8) + 8);
  v57 = *(_DWORD *)(v35 + 36);
  if (v57)
  {
    if (v57 == 1)
    {
      v64 = (void *)*a4;
      if ((_DWORD)v64)
      {
        v106 = (id)a4[1];
        if ((_DWORD)v106)
        {
          if (a4[2])
          {
            v65 = 0;
            v66 = *(_QWORD *)(a2 + 20);
            *(_QWORD *)&v67 = v66;
            *((_QWORD *)&v67 + 1) = HIDWORD(v66);
            v68 = v67;
            v69 = *(_QWORD *)(a3 + 20);
            *(_QWORD *)&v67 = v69;
            *((_QWORD *)&v67 + 1) = HIDWORD(v69);
            v98 = v67;
            v101 = v68;
            do
            {
              v70 = *(_DWORD *)(a2 + 28);
              v71 = v65 + *(_DWORD *)(a3 + 28);
              if (objc_msgSend(v55, "arrayLength") > v71
                && objc_msgSend(v56, "arrayLength") > (unint64_t)(v65 + v70))
              {
                v72 = (void *)*((_QWORD *)this + 4);
                v112 = v101;
                v113 = 0;
                v110 = v64;
                v111.i64[0] = (uint64_t)v106;
                v111.i64[1] = 1;
                v73 = *(unsigned int *)(a3 + 16);
                v108 = v98;
                v109 = 0;
                objc_msgSend(v72, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v56, v71, v73, &v108);
              }
              ++v65;
            }
            while (v65 < a4[2]);
          }
        }
      }
    }
    else if (v57 == 2)
    {
      v58 = (void *)*a4;
      if ((_DWORD)v58)
      {
        v59 = a4[1];
        if ((_DWORD)v59)
        {
          v60 = a4[2];
          if ((_DWORD)v60)
          {
            v61 = *(unsigned int *)(a3 + 28);
            v62 = objc_msgSend(v55, "depth");
            if (v62 >= v100)
              v63 = v100;
            else
              v63 = v62;
            if (v61 + v60 <= v63)
            {
              v79 = *(unsigned int *)(a2 + 28);
              v80 = *(unsigned int *)(a3 + 28);
              v81 = (void *)*((_QWORD *)this + 4);
              v82 = *(unsigned int *)(a2 + 16);
              v83 = *(_QWORD *)(a2 + 20);
              *(_QWORD *)&v84 = v83;
              *((_QWORD *)&v84 + 1) = HIDWORD(v83);
              v112 = v84;
              v113 = v79;
              v110 = v58;
              v111.i64[0] = v59;
              v111.i64[1] = v60;
              v85 = *(unsigned int *)(a3 + 16);
              v86 = *(_QWORD *)(a3 + 20);
              *(_QWORD *)&v84 = v86;
              *((_QWORD *)&v84 + 1) = HIDWORD(v86);
              v108 = v84;
              v109 = v80;
              objc_msgSend(v81, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v56, 0, v82, &v112, &v110, v55, 0, v85, &v108);
            }
            else
            {
              WebGPU::CommandEncoder::makeInvalid(this, CFSTR("GPUCommandEncoder.copyTextureToTexture: destination.origin.z + sourceSize.depth > destinationLogicalSize.depthOrArrayLayers"));
            }
          }
        }
      }
    }
  }
  else
  {
    v107 = (id)*a4;
    if ((_DWORD)v107 && a4[2])
    {
      v74 = 0;
      v102 = *(unsigned int *)(a2 + 20);
      v99 = *(unsigned int *)(a3 + 20);
      v97 = vdupq_n_s64(1uLL);
      do
      {
        v75 = *(_DWORD *)(a2 + 28);
        v76 = v74 + *(_DWORD *)(a3 + 28);
        if (objc_msgSend(v55, "arrayLength") > v76 && objc_msgSend(v56, "arrayLength") > (unint64_t)(v74 + v75))
        {
          v77 = (void *)*((_QWORD *)this + 4);
          v112 = v102;
          v113 = 0;
          v110 = v107;
          v111 = v97;
          v78 = *(unsigned int *)(a3 + 16);
          v108 = v99;
          v109 = 0;
          objc_msgSend(v77, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v56, v76, v78, &v108);
        }
        ++v74;
      }
      while (v74 < a4[2]);
    }
  }

}

void sub_18243C34C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243C35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243C36C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18243C380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18243C394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18243C3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243C3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243C3D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  _DWORD *v5;

  v5 = *(_DWORD **)(v3 - 112);
  *(_QWORD *)(v3 - 112) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18243C438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243C448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{

  _Unwind_Resume(a1);
}

void wgpuCommandEncoderClearBuffer(WebGPU::CommandEncoder *this, WebGPU::Buffer *a2, unint64_t a3, uint64_t a4)
{
  WebGPU::CommandsMixin *v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v32;
  __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  id v41;
  _DWORD *v42;

  v7 = *((unsigned __int8 *)this + 4);
  v5 = (WebGPU::CommandEncoder *)((char *)this + 4);
  v6 = v7;
  if ((v7 - 3) < 0xFFFFFFFE)
  {
    v8 = a4;
    if (a4 == -1)
    {
      v11 = *((_QWORD *)a2 + 5);
      v12 = v11 >= a3;
      v13 = v11 - a3;
      v8 = v12 ? v13 : 0;
      if (!v12)
      {
        v14 = *((_QWORD *)this + 10);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v15 = *(_QWORD *)(v14 + 32);
        v16 = 32 * *(unsigned int *)(v14 + 44);
        v17 = v15 + v16;
        while (v16)
        {
          v18 = *(_DWORD *)(v17 - 8);
          v17 -= 32;
          v16 -= 32;
          if (!v18)
          {
            v19 = v15 + v16;
            if (!*(_BYTE *)(v19 + 16))
            {
              v20 = v42;
              v42 = 0;
              *(_DWORD *)v19 = 1;
              *(_QWORD *)(v19 + 8) = v20;
              *(_BYTE *)(v19 + 16) = 1;
            }
            goto LABEL_41;
          }
        }
        v37 = *(_QWORD *)(v14 + 24);
        if (v37)
        {
          (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v37 + 16))(v37, 1, &v42);
          v38 = *(_QWORD *)(v14 + 24);
          *(_QWORD *)(v14 + 24) = 0;
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        }
LABEL_41:
        v39 = v42;
        v42 = 0;
        if (v39)
        {
          if (*v39 == 2)
            WTF::StringImpl::destroy();
          else
            *v39 -= 2;
        }
        return;
      }
    }
    if (*((_BYTE *)a2 + 52) == 4 || *((_QWORD *)a2 + 2) != 0)
    {
      v32 = *((_QWORD *)a2 + 32);
      if (*(_QWORD *)(v32 + 8))
      {
        if (v32 == *((_QWORD *)this + 10)
          && ((v8 | a3) & 3) == 0
          && (*((_DWORD *)a2 + 12) & 8) != 0)
        {
          v40 = a3 + v8;
          if (!__CFADD__(a3, v8) && *((_QWORD *)a2 + 5) >= v40)
          {
            WebGPU::Buffer::setCommandEncoder(a2, this);
            *((_QWORD *)a2 + 29) = 0;
            *((_QWORD *)a2 + 30) = 0;
            *((_QWORD *)a2 + 31) = 0;
            if (v8 && *((_BYTE *)a2 + 52) != 4 && v40 <= objc_msgSend(*((id *)a2 + 2), "length"))
            {
              v41 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)this);
              objc_msgSend(*((id *)this + 4), "fillBuffer:range:value:", *((_QWORD *)a2 + 2), a3, v8, 0);
            }
            return;
          }
        }
      }
    }
    v33 = CFSTR("GPUCommandEncoder.clearBuffer validation failed");
LABEL_28:
    WebGPU::CommandEncoder::makeInvalid(this, &v33->isa);
    return;
  }
  if (v6 != 2)
  {
    if (*((_QWORD *)this + 8))
      v33 = (__CFString *)*((_QWORD *)this + 8);
    else
      v33 = CFSTR("Encoder state is locked");
    goto LABEL_28;
  }
  v21 = *((_QWORD *)this + 10);
  v22 = (void *)MEMORY[0x1E0CB3940];
  WebGPU::CommandsMixin::encoderStateName(v5);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::clearBuffer(Buffer &, uint64_t, uint64_t)", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v42, v24);
  v25 = *(_QWORD *)(v21 + 32);
  v26 = 32 * *(unsigned int *)(v21 + 44);
  v27 = v25 + v26;
  while (v26)
  {
    v28 = *(_DWORD *)(v27 - 8);
    v27 -= 32;
    v26 -= 32;
    if (!v28)
    {
      v29 = v25 + v26;
      if (!*(_BYTE *)(v29 + 16))
      {
        v30 = v42;
        v42 = 0;
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = v30;
        *(_BYTE *)(v29 + 16) = 1;
      }
      goto LABEL_32;
    }
  }
  v34 = *(_QWORD *)(v21 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v34 + 16))(v34, 1, &v42);
    v35 = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 24) = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
LABEL_32:
  v36 = v42;
  v42 = 0;
  if (v36)
  {
    if (*v36 == 2)
      WTF::StringImpl::destroy();
    else
      *v36 -= 2;
  }

}

void sub_18243C7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a12 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuCommandEncoderFinish(WebGPU::CommandEncoder *this, _QWORD *a2)
{
  uint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned __int8 **v34;
  id v35;
  void *v36;
  const char *v37;
  __CFString *v38;
  _DWORD *v39;
  void *v40;
  unsigned __int8 **v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WebGPU::CommandBuffer *v54;
  _DWORD *v55;

  if (!*a2)
  {
    if (*((_QWORD *)this + 2))
    {
      v15 = *((_QWORD *)this + 5);
      if (!v15 || v15 == *((_QWORD *)this + 4))
      {
        v16 = (char *)this + 4;
        if (*((_BYTE *)this + 4))
        {
          v17 = (void *)MEMORY[0x1E0CB3940];
          WebGPU::CommandsMixin::encoderStateName((WebGPU::CommandEncoder *)((char *)this + 4));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "stringWithFormat:", CFSTR("GPUCommandEncoder.finish: encoder state is '%@', expected 'Open'"), v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          *v16 = 2;
          if (!v19)
          {
LABEL_44:
            WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
            v35 = *((id *)this + 2);
            v36 = (void *)*((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = 0;

            v37 = (const char *)a2[1];
            if (v37)
              strlen(v37);
            WTF::String::fromUTF8();
            if (v55)
              v38 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            else
              v38 = &stru_1E0FD9588;
            objc_msgSend(v35, "setLabel:", v38);

            v39 = v55;
            v55 = 0;
            if (v39)
            {
              if (*v39 == 2)
                WTF::StringImpl::destroy();
              else
                *v39 -= 2;
            }
            v40 = (void *)*((_QWORD *)this + 3);
            v41 = (unsigned __int8 **)*((_QWORD *)this + 10);
            v42 = v35;
            v43 = v40;
            v21 = WTF::fastMalloc((WTF *)0x48);
            WebGPU::CommandBuffer::CommandBuffer(v21, v42, v43, v41);

            v44 = (void *)*((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = 0;

            v46 = *(_QWORD *)(v21 + 8);
            if (v46)
              goto LABEL_58;
            v46 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v46 = 1;
            *(_QWORD *)(v46 + 8) = v21;
            v47 = *(unsigned int **)(v21 + 8);
            *(_QWORD *)(v21 + 8) = v46;
            if (!v47)
              goto LABEL_58;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (v49)
            {
              v46 = *(_QWORD *)(v21 + 8);
              if (v46)
                goto LABEL_58;
            }
            else
            {
              atomic_store(1u, v47);
              WTF::fastFree((WTF *)v47, v45);
              v46 = *(_QWORD *)(v21 + 8);
              if (v46)
              {
                do
LABEL_58:
                  v50 = __ldaxr((unsigned int *)v46);
                while (__stlxr(v50 + 1, (unsigned int *)v46));
              }
            }
            v51 = (unsigned int *)*((_QWORD *)this + 7);
            *((_QWORD *)this + 7) = v46;
            if (v51)
            {
              do
              {
                v52 = __ldaxr(v51);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v51));
              if (!v53)
              {
                atomic_store(1u, v51);
                WTF::fastFree((WTF *)v51, v45);
              }
              v46 = *((_QWORD *)this + 7);
            }
            v54 = *(WebGPU::CommandBuffer **)(v46 + 8);
            *((_DWORD *)v54 + 10) = *((_DWORD *)this + 18);
            if (*((_BYTE *)this + 76))
              WebGPU::CommandBuffer::makeInvalid(v54, *((NSString **)this + 8));

            v19 = 0;
LABEL_67:

            return v21;
          }
        }
        else
        {
          if (!*((_QWORD *)this + 6))
          {
            *v16 = 2;
            goto LABEL_44;
          }
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUCommandEncoder.finish: encoder stack size '%llu'"), *((_QWORD *)this + 6));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *v16 = 2;
          if (!v19)
            goto LABEL_44;
        }
        WebGPU::CommandEncoder::discardCommandBuffer(this);
        v23 = *((_QWORD *)this + 10);
        if (*((_QWORD *)this + 8))
          v24 = (void *)*((_QWORD *)this + 8);
        else
          v24 = v19;
        MEMORY[0x186DAB230](&v55, v24);
        v25 = *(_QWORD *)(v23 + 32);
        v26 = 32 * *(unsigned int *)(v23 + 44);
        v27 = v25 + v26;
        while (v26)
        {
          v28 = *(_DWORD *)(v27 - 8);
          v27 -= 32;
          v26 -= 32;
          if (!v28)
          {
            v29 = v25 + v26;
            if (!*(_BYTE *)(v29 + 16))
            {
              v30 = v55;
              v55 = 0;
              *(_DWORD *)v29 = 1;
              *(_QWORD *)(v29 + 8) = v30;
              *(_BYTE *)(v29 + 16) = 1;
            }
            goto LABEL_38;
          }
        }
        v31 = *(_QWORD *)(v23 + 24);
        if (v31)
        {
          (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v31 + 16))(v31, 1, &v55);
          v32 = *(_QWORD *)(v23 + 24);
          *(_QWORD *)(v23 + 24) = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
LABEL_38:
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          if (*v33 == 2)
            WTF::StringImpl::destroy();
          else
            *v33 -= 2;
        }
        v34 = (unsigned __int8 **)*((_QWORD *)this + 10);
        v21 = WTF::fastMalloc((WTF *)0x48);
        WebGPU::CommandBuffer::CommandBuffer(v21, v34);
        goto LABEL_67;
      }
    }
  }
  *((_BYTE *)this + 4) = 2;
  WebGPU::CommandEncoder::discardCommandBuffer(this);
  v3 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 8))
    v4 = (const __CFString *)*((_QWORD *)this + 8);
  else
    v4 = CFSTR("Invalid CommandEncoder.");
  MEMORY[0x186DAB230](&v55, v4);
  v5 = *(_QWORD *)(v3 + 32);
  v6 = 32 * *(unsigned int *)(v3 + 44);
  v7 = v5 + v6;
  while (v6)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v7 -= 32;
    v6 -= 32;
    if (!v8)
    {
      v9 = v5 + v6;
      if (!*(_BYTE *)(v9 + 16))
      {
        v10 = v55;
        v55 = 0;
        *(_DWORD *)v9 = 1;
        *(_QWORD *)(v9 + 8) = v10;
        *(_BYTE *)(v9 + 16) = 1;
      }
      goto LABEL_13;
    }
  }
  v11 = *(_QWORD *)(v3 + 24);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v11 + 16))(v11, 1, &v55);
    v12 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
LABEL_13:
  v13 = v55;
  v55 = 0;
  if (v13)
  {
    if (*v13 == 2)
      WTF::StringImpl::destroy();
    else
      *v13 -= 2;
  }
  v20 = (unsigned __int8 **)*((_QWORD *)this + 10);
  v21 = WTF::fastMalloc((WTF *)0x48);
  WebGPU::CommandBuffer::CommandBuffer(v21, v20);
  return v21;
}

void sub_18243CCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  WebGPU::CommandBuffer *v11;
  WTF *v13;
  void *v14;

  if (*(_DWORD *)v11 == 1)
  {
    WebGPU::CommandBuffer::~CommandBuffer(v11);
    WTF::fastFree(v13, v14);
  }
  else
  {
    --*(_DWORD *)v11;
  }

  _Unwind_Resume(a1);
}

void sub_18243CD78(_Unwind_Exception *a1, void *a2)
{
  void *v2;
  WTF *v3;

  WTF::fastFree(v3, a2);

  _Unwind_Resume(a1);
}

void sub_18243CD90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243CDA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243CDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x18243CDA8);
}

void sub_18243CDF4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuCommandEncoderInsertDebugMarker(uint64_t a1, char *__s)
{
  int v3;
  void *v4;
  __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  __CFString *v16;
  _DWORD *result;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  v3 = *(unsigned __int8 *)(a1 + 4);
  if ((v3 - 3) < 0xFFFFFFFE)
  {
    WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)a1);
    v4 = *(void **)(a1 + 16);
    if (v21)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E0FD9588;
    objc_msgSend(v4, "pushDebugGroup:", v5);

    objc_msgSend(*(id *)(a1 + 16), "popDebugGroup");
    goto LABEL_18;
  }
  if (v3 != 2)
  {
    if (*(_QWORD *)(a1 + 64))
      v16 = *(__CFString **)(a1 + 64);
    else
      v16 = CFSTR("Encoder state is locked");
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, &v16->isa);
LABEL_18:
    result = v21;
    if (!v21)
      return result;
    goto LABEL_19;
  }
  v6 = *(_QWORD *)(a1 + 80);
  v7 = (void *)MEMORY[0x1E0CB3940];
  WebGPU::CommandsMixin::encoderStateName((WebGPU::CommandsMixin *)(a1 + 4));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::insertDebugMarker(String &&)", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v22, v9);
  v10 = *(_QWORD *)(v6 + 32);
  v11 = 32 * *(unsigned int *)(v6 + 44);
  v12 = v10 + v11;
  while (v11)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v12 -= 32;
    v11 -= 32;
    if (!v13)
    {
      v14 = v10 + v11;
      if (!*(_BYTE *)(v14 + 16))
      {
        v15 = v22;
        v22 = 0;
        *(_DWORD *)v14 = 1;
        *(_QWORD *)(v14 + 8) = v15;
        *(_BYTE *)(v14 + 16) = 1;
      }
      goto LABEL_26;
    }
  }
  v18 = *(_QWORD *)(v6 + 24);
  if (v18)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v18 + 16))(v18, 1, &v22);
    v19 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
LABEL_26:
  v20 = v22;
  v22 = 0;
  if (!v20)
  {
LABEL_29:

    result = v21;
    if (!v21)
      return result;
    goto LABEL_19;
  }
  if (*v20 != 2)
  {
    *v20 -= 2;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy();

  result = v21;
  if (!v21)
    return result;
LABEL_19:
  if (*result == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *result -= 2;
  return result;
}

void sub_18243D020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12)
{
  void *v12;
  void *v13;

  if (a12)
  {
    if (*a12 == 2)
      WTF::StringImpl::destroy();
    else
      *a12 -= 2;
  }

  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuCommandEncoderPopDebugGroup(WebGPU::CommandEncoder *this)
{
  WebGPU::CommandsMixin *v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;

  v4 = *((unsigned __int8 *)this + 4);
  v2 = (WebGPU::CommandEncoder *)((char *)this + 4);
  v3 = v4;
  if ((v4 - 3) >= 0xFFFFFFFE)
  {
    if (v3 == 2)
    {
      v5 = *((_QWORD *)this + 10);
      v6 = (void *)MEMORY[0x1E0CB3940];
      WebGPU::CommandsMixin::encoderStateName(v2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::popDebugGroup()", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](&v19, v8);
      v9 = *(_QWORD *)(v5 + 32);
      v10 = 32 * *(unsigned int *)(v5 + 44);
      v11 = v9 + v10;
      while (v10)
      {
        v12 = *(_DWORD *)(v11 - 8);
        v11 -= 32;
        v10 -= 32;
        if (!v12)
        {
          v13 = v9 + v10;
          if (!*(_BYTE *)(v13 + 16))
          {
            v14 = v19;
            v19 = 0;
            *(_DWORD *)v13 = 1;
            *(_QWORD *)(v13 + 8) = v14;
            *(_BYTE *)(v13 + 16) = 1;
          }
          goto LABEL_19;
        }
      }
      v16 = *(_QWORD *)(v5 + 24);
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 16))(v16, 1, &v19);
        v17 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
LABEL_19:
      v18 = v19;
      v19 = 0;
      if (v18)
      {
        if (*v18 == 2)
          WTF::StringImpl::destroy();
        else
          *v18 -= 2;
      }

    }
    else
    {
      if (*((_QWORD *)this + 8))
        v15 = (__CFString *)*((_QWORD *)this + 8);
      else
        v15 = CFSTR("Encoder state is locked");
      WebGPU::CommandEncoder::makeInvalid(this, &v15->isa);
    }
  }
  else if (*((_QWORD *)this + 6))
  {
    WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
    --*((_QWORD *)this + 6);
    objc_msgSend(*((id *)this + 2), "popDebugGroup");
  }
  else
  {
    WebGPU::CommandEncoder::makeInvalid(this, CFSTR("validatePopDebugGroup failed"));
  }
}

void sub_18243D264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  void *v12;
  void *v13;

  if (a12)
  {
    if (*a12 == 2)
      WTF::StringImpl::destroy();
    else
      *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18243D2A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *wgpuCommandEncoderPushDebugGroup(uint64_t a1, char *__s)
{
  int v3;
  void *v4;
  __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  __CFString *v16;
  _DWORD *result;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  v3 = *(unsigned __int8 *)(a1 + 4);
  if ((v3 - 3) < 0xFFFFFFFE)
  {
    WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)a1);
    ++*(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 16);
    if (v21)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E0FD9588;
    objc_msgSend(v4, "pushDebugGroup:", v5);

    goto LABEL_18;
  }
  if (v3 != 2)
  {
    if (*(_QWORD *)(a1 + 64))
      v16 = *(__CFString **)(a1 + 64);
    else
      v16 = CFSTR("Encoder state is locked");
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, &v16->isa);
LABEL_18:
    result = v21;
    if (!v21)
      return result;
    goto LABEL_19;
  }
  v6 = *(_QWORD *)(a1 + 80);
  v7 = (void *)MEMORY[0x1E0CB3940];
  WebGPU::CommandsMixin::encoderStateName((WebGPU::CommandsMixin *)(a1 + 4));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::pushDebugGroup(String &&)", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v22, v9);
  v10 = *(_QWORD *)(v6 + 32);
  v11 = 32 * *(unsigned int *)(v6 + 44);
  v12 = v10 + v11;
  while (v11)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v12 -= 32;
    v11 -= 32;
    if (!v13)
    {
      v14 = v10 + v11;
      if (!*(_BYTE *)(v14 + 16))
      {
        v15 = v22;
        v22 = 0;
        *(_DWORD *)v14 = 1;
        *(_QWORD *)(v14 + 8) = v15;
        *(_BYTE *)(v14 + 16) = 1;
      }
      goto LABEL_26;
    }
  }
  v18 = *(_QWORD *)(v6 + 24);
  if (v18)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v18 + 16))(v18, 1, &v22);
    v19 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
LABEL_26:
  v20 = v22;
  v22 = 0;
  if (!v20)
  {
LABEL_29:

    result = v21;
    if (!v21)
      return result;
    goto LABEL_19;
  }
  if (*v20 != 2)
  {
    *v20 -= 2;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy();

  result = v21;
  if (!v21)
    return result;
LABEL_19:
  if (*result == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *result -= 2;
  return result;
}

void sub_18243D4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12)
{
  void *v12;
  void *v13;

  if (a12)
  {
    if (*a12 == 2)
      WTF::StringImpl::destroy();
    else
      *a12 -= 2;
  }

  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuCommandEncoderResolveQuerySet(WebGPU::CommandEncoder *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  WebGPU::CommandsMixin *v7;
  int v8;
  int v9;
  BOOL v11;
  unint64_t v15;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  WebGPU::CommandBuffer *v34;
  id v35;
  void *v36;
  id v37;
  _QWORD v38[3];

  v9 = *((unsigned __int8 *)this + 4);
  v7 = (WebGPU::CommandEncoder *)((char *)this + 4);
  v8 = v9;
  if ((v9 - 3) < 0xFFFFFFFE)
  {
    if (*(_BYTE *)(a2 + 56))
      v11 = 0;
    else
      v11 = *(_QWORD *)(a2 + 16) == 0;
    if ((!v11 || *(_QWORD *)(a2 + 24) != 0)
      && (*(_BYTE *)(a5 + 52) == 4 || *(_QWORD *)(a5 + 16) != 0)
      && (*(_BYTE *)(a5 + 49) & 2) != 0)
    {
      v15 = *(unsigned int *)(a2 + 32);
      if (v15 > a3
        && !(_BYTE)a6
        && a4 + (unint64_t)a3 <= v15
        && !__CFADD__(a6, 8 * a4)
        && a6 + 8 * (unint64_t)a4 <= *(_QWORD *)(a5 + 40))
      {
        v17 = *(_QWORD *)(a2 + 8);
        if (*(_QWORD *)(v17 + 8))
        {
          if (v17 == *((_QWORD *)this + 10))
          {
            v32 = *(_QWORD *)(a5 + 256);
            if (v32 == v17)
            {
              if (*(_QWORD *)(v32 + 8))
              {
                WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(a2 + 40, (uint64_t)this, (uint64_t)v38);
                if (*(_BYTE *)(a2 + 56))
                {
                  *((_BYTE *)this + 76) = 1;
                  v33 = *((_QWORD *)this + 7);
                  if (v33)
                  {
                    v34 = *(WebGPU::CommandBuffer **)(v33 + 8);
                    if (v34)
                      WebGPU::CommandBuffer::makeInvalid(v34, *((NSString **)this + 8));
                  }
                }
                WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a5, this);
                if (!*(_BYTE *)(a2 + 56) && a4 && *(_BYTE *)(a5 + 52) != 4)
                {
                  v35 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)this);
                  if (!*(_DWORD *)(a2 + 36))
                  {
                    v36 = (void *)*((_QWORD *)this + 4);
                    v37 = *(id *)(a2 + 16);
                    objc_msgSend(v36, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:");

                  }
                }
                return;
              }
            }
          }
        }
      }
    }
    v18 = CFSTR("GPUCommandEncoder.resolveQuerySet validation failed");
LABEL_31:
    WebGPU::CommandEncoder::makeInvalid(this, &v18->isa);
    return;
  }
  if (v8 != 2)
  {
    if (*((_QWORD *)this + 8))
      v18 = (__CFString *)*((_QWORD *)this + 8);
    else
      v18 = CFSTR("Encoder state is locked");
    goto LABEL_31;
  }
  v19 = *((_QWORD *)this + 10);
  v20 = (void *)MEMORY[0x1E0CB3940];
  WebGPU::CommandsMixin::encoderStateName(v7);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::resolveQuerySet(const QuerySet &, uint32_t, uint32_t, const Buffer &, uint64_t)", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](v38, v22);
  v23 = *(_QWORD *)(v19 + 32);
  v24 = 32 * *(unsigned int *)(v19 + 44);
  v25 = v23 + v24;
  while (v24)
  {
    v26 = *(_DWORD *)(v25 - 8);
    v25 -= 32;
    v24 -= 32;
    if (!v26)
    {
      v27 = v23 + v24;
      if (!*(_BYTE *)(v27 + 16))
      {
        v28 = v38[0];
        v38[0] = 0;
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = v28;
        *(_BYTE *)(v27 + 16) = 1;
      }
      goto LABEL_35;
    }
  }
  v29 = *(_QWORD *)(v19 + 24);
  if (v29)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v29 + 16))(v29, 1, v38);
    v30 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
LABEL_35:
  v31 = (_DWORD *)v38[0];
  v38[0] = 0;
  if (v31)
  {
    if (*v31 == 2)
      WTF::StringImpl::destroy();
    else
      *v31 -= 2;
  }

}

void sub_18243D85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{

  _Unwind_Resume(a1);
}

void sub_18243D874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  void *v12;
  void *v13;

  if (a12)
  {
    if (*a12 == 2)
      WTF::StringImpl::destroy();
    else
      *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18243D8B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuCommandEncoderWriteTimestamp(WebGPU::CommandEncoder *this, uint64_t a2, unsigned int a3)
{
  WebGPU::CommandsMixin *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __CFString *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  WebGPU::CommandBuffer *v32;
  _QWORD v33[3];

  v6 = *((unsigned __int8 *)this + 4);
  v4 = (WebGPU::CommandEncoder *)((char *)this + 4);
  v5 = v6;
  if ((v6 - 3) >= 0xFFFFFFFE)
  {
    if (v5 == 2)
    {
      v12 = *((_QWORD *)this + 10);
      v13 = (void *)MEMORY[0x1E0CB3940];
      WebGPU::CommandsMixin::encoderStateName(v4);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "stringWithFormat:", CFSTR("%s: encoder state is %@"), "void WebGPU::CommandEncoder::writeTimestamp(QuerySet &, uint32_t)", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](v33, v15);
      v16 = *(_QWORD *)(v12 + 32);
      v17 = 32 * *(unsigned int *)(v12 + 44);
      v18 = v16 + v17;
      while (v17)
      {
        v19 = *(_DWORD *)(v18 - 8);
        v18 -= 32;
        v17 -= 32;
        if (!v19)
        {
          v20 = v16 + v17;
          if (!*(_BYTE *)(v20 + 16))
          {
            v21 = v33[0];
            v33[0] = 0;
            *(_DWORD *)v20 = 1;
            *(_QWORD *)(v20 + 8) = v21;
            *(_BYTE *)(v20 + 16) = 1;
          }
          goto LABEL_38;
        }
      }
      v28 = *(_QWORD *)(v12 + 24);
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v28 + 16))(v28, 1, v33);
        v29 = *(_QWORD *)(v12 + 24);
        *(_QWORD *)(v12 + 24) = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
LABEL_38:
      v30 = (_DWORD *)v33[0];
      v33[0] = 0;
      if (v30)
      {
        if (*v30 == 2)
          WTF::StringImpl::destroy();
        else
          *v30 -= 2;
      }

    }
    else
    {
      if (*((_QWORD *)this + 8))
        v22 = (__CFString *)*((_QWORD *)this + 8);
      else
        v22 = CFSTR("Encoder state is locked");
      WebGPU::CommandEncoder::makeInvalid(this, &v22->isa);
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 10);
    v8 = *(unsigned int *)(v7 + 228);
    if ((_DWORD)v8)
    {
      v10 = *(int **)(v7 + 216);
      while (1)
      {
        v11 = *v10++;
        if (v11 == 3)
          break;
        if (!--v8)
          return;
      }
      v23 = *(_DWORD *)(a2 + 36) == 1 && *(_DWORD *)(a2 + 32) > a3;
      if (!v23
        || (!*(_BYTE *)(a2 + 56) ? (v24 = *(_QWORD *)(a2 + 16) == 0) : (v24 = 0),
            v24 ? (v25 = *(_QWORD *)(a2 + 24) == 0) : (v25 = 0),
            v25 || ((v26 = *(_QWORD *)(a2 + 8), v26 == v7) ? (v27 = *(_QWORD *)(v26 + 8) == 0) : (v27 = 1), v27)))
      {
        WebGPU::CommandEncoder::makeInvalid(this, CFSTR("GPUCommandEncoder.writeTimestamp validation failed"));
      }
      else
      {
        WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(a2 + 40, (uint64_t)this, (uint64_t)v33);
        if (*(_BYTE *)(a2 + 56))
        {
          *((_BYTE *)this + 76) = 1;
          v31 = *((_QWORD *)this + 7);
          if (v31)
          {
            v32 = *(WebGPU::CommandBuffer **)(v31 + 8);
            if (v32)
              WebGPU::CommandBuffer::makeInvalid(v32, *((NSString **)this + 8));
          }
        }
      }
    }
  }
}

void sub_18243DB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  void *v12;
  void *v13;

  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18243DB54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18243DB68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *wgpuCommandEncoderSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 16), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_18243DC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14 == -1)
  {
LABEL_12:
    *v14 = v9;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v18 = *a2;
      if (*a2)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v18 = *a2;
      if (*a2)
      {
LABEL_14:
        v19 = (*(_DWORD *)(v18 - 16) + *(_DWORD *)(v18 - 12));
        v20 = *(unsigned int *)(v18 - 4);
        if (v20 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v19 = *(unsigned int *)(v18 - 16);
    v20 = *(unsigned int *)(v18 - 4);
    if (v20 <= 0x400)
    {
LABEL_15:
      if (3 * v20 > 4 * v19)
      {
LABEL_26:
        *v5 = (uint64_t)v14;
        v5[1] = v18 + 8 * v20;
        *((_BYTE *)v5 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v20)
      {
        result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, v14);
        v14 = result;
        v18 = *a2;
        if (!*a2)
        {
LABEL_18:
          v20 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v20 = *(unsigned int *)(v18 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, (_DWORD)v20 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v20)), v14);
      v14 = result;
      v18 = *a2;
      if (!*a2)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v20 > 2 * v19)
      goto LABEL_26;
    goto LABEL_24;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -2)
      v16 = v14;
    v13 = (v13 + v17) & v8;
    v14 = (uint64_t *)(v6 + 8 * v13);
    v15 = *v14;
    ++v17;
    if (*v14 == -1)
    {
      if (v16)
      {
        *v16 = -1;
        --*(_DWORD *)(*a2 - 16);
        v9 = *a3;
        v14 = v16;
      }
      goto LABEL_12;
    }
  }
  if ((v7 & 1) != 0)
    v21 = 0;
  else
    v21 = *(unsigned int *)(v6 - 4);
  *v5 = (uint64_t)v14;
  v5[1] = v6 + 8 * v21;
  *((_BYTE *)v5 + 16) = 0;
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = 8 * a2;
    v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    v12 = (void *)(v11 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = 0;
  v9 = 8 * a2;
  v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  v12 = (void *)(v11 + 16);
  if (a2)
LABEL_3:
    memset(v12, 255, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 8 * v13);
      v16 = *v15;
      if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v17 = *a1;
        v18 = *a1 ? *(_DWORD *)(v17 - 8) : 0;
        v19 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
        v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
        v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
        v22 = v18 & ((v21 >> 31) ^ v21);
        v23 = 1;
        do
        {
          v24 = v22;
          v25 = *(_QWORD *)(v17 + 8 * v22);
          v22 = (v22 + v23++) & v18;
        }
        while (v25 != -1);
        v26 = (_QWORD *)(v17 + 8 * v24);
        *v26 = v16;
        if (v15 == a3)
          v14 = v26;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = 16 * a2;
    v9 = WTF::fastMalloc((WTF *)(v7 + 16));
    v10 = (void *)(v9 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  v6 = 0;
  v7 = 16 * a2;
  v9 = WTF::fastMalloc((WTF *)(v7 + 16));
  v10 = (void *)(v9 + 16);
  if (a2)
LABEL_3:
    bzero(v10, v7);
LABEL_4:
  *a1 = (uint64_t)v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (uint64_t *)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (_QWORD *)(v16 + 16 * v23);
          v27 = v25 + 1;
          v26 = v25[1];
          if (v26)
          {
            WTF::fastFree((WTF *)(v26 - 16), v8);
            v14 = *v13;
          }
          *v25 = v14;
          v28 = v4 + 16 * v11;
          *v27 = 0;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          *v27 = v29;
          v15 = *(_QWORD *)(v28 + 8);
          if (!v15)
            goto LABEL_6;
LABEL_10:
          WTF::fastFree((WTF *)(v15 - 16), v8);
          goto LABEL_6;
        }
        v15 = *(_QWORD *)(v4 + 16 * v11 + 8);
        if (v15)
          goto LABEL_10;
      }
LABEL_6:
      if (++v11 == v12)
        goto LABEL_23;
    }
  }
  if (v4)
LABEL_23:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

const __CFString *WebGPU::CommandsMixin::encoderStateName(WebGPU::CommandsMixin *this)
{
  int v1;
  const __CFString *v2;

  v1 = *(unsigned __int8 *)this;
  v2 = CFSTR("Open");
  if (v1 == 1)
    v2 = CFSTR("Locked");
  if (v1 == 2)
    return CFSTR("Ended");
  else
    return v2;
}

uint64_t WebGPU::ComputePassEncoder::ComputePassEncoder(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  id v8;
  id v9;
  unsigned __int8 *v10;
  int v12;

  v8 = a2;
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 0;
  v9 = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = *a5;
  if (__ldaxr(*a5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v10);
LABEL_5:
  ++*((_QWORD *)v10 + 1);
  v12 = __ldxr(v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v10))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  ++*(_DWORD *)a4;
  *(_QWORD *)(a1 + 80) = a4;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a4 + 4) != 2)
    *(_BYTE *)(a4 + 4) = 1;

  return a1;
}

void sub_18243E300(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebGPU::BindGroup **v5;
  WTF *v6;
  void *v7;
  WebGPU::BindGroup *v8;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WebGPU::BindGroup **)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2)
        {
          v8 = *v5;
          *v5 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v8, a2);
              WTF::fastFree(v6, v7);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_DWORD *)(v5 - 8) != -2)
        {
          v6 = *(WTF **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)v5 = 0;
            *(_DWORD *)(v5 + 8) = 0;
            WTF::fastFree(v6, a2);
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WebGPU::CommandEncoder **WTF::Ref<WebGPU::CommandEncoder,WTF::RawPtrTraits<WebGPU::CommandEncoder>,WTF::DefaultRefDerefTraits<WebGPU::CommandEncoder>>::~Ref(WebGPU::CommandEncoder **a1)
{
  WebGPU::CommandEncoder *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::CommandEncoder::~CommandEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WebGPU::ComputePassEncoder::ComputePassEncoder(uint64_t a1, _DWORD *a2, unsigned __int8 **a3, void *a4)
{
  id v7;
  unsigned __int8 *v8;
  int v10;
  id v11;
  uint64_t v12;

  v7 = a4;
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v8);
LABEL_5:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr(v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v8))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  ++*a2;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v11 = v7;
  *(_QWORD *)(a1 + 112) = v11;
  *(_BYTE *)(a1 + 120) = 0;
  v12 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v12 + 4) != 2)
    *(_BYTE *)(v12 + 4) = 1;

  return a1;
}

void sub_18243E564(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void WebGPU::ComputePassEncoder::executePreDispatchCommands(WebGPU::ComputePassEncoder *this, void **a2)
{
  uint64_t v3;
  NSString *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  NSString *v38;
  void *v39;
  id v40;
  id v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  char v94;
  unsigned int *v95;
  void *v96;
  id *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  int *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  unsigned int v106;
  int *v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  int *v118;
  void *v119;
  id v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  WebGPU::PipelineLayout *v130;
  unsigned int *v131;
  unsigned int *v132;
  uint64_t *v133;
  unsigned int v134;
  int v135;
  uint64_t *v136;
  NSString *v137;
  unint64_t v138;
  uint64_t v139;
  id v140;
  int v141;
  int v142;
  _QWORD v143[10];
  _QWORD *v144;

  v3 = *((_QWORD *)this + 9);
  if (!v3)
  {
    WebGPU::ComputePassEncoder::makeInvalid(this, CFSTR("pipeline is not set prior to dispatch"));
    return;
  }
  WebGPU::PipelineLayout::errorValidatingBindGroupCompatibility(*(_BYTE **)(v3 + 56), (uint64_t *)this + 13);
  v5 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v137 = v5;
    WebGPU::ComputePassEncoder::makeInvalid(this, v5);

    return;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 10) + 76))
    v6 = 0;
  else
    v6 = (void *)*((_QWORD *)this + 1);
  v7 = v6;
  v8 = *(id *)(*((_QWORD *)this + 9) + 16);
  objc_msgSend(v7, "setComputePipelineState:", v8);

  v139 = 0;
  if (a2)
    WebGPU::addResourceToActiveResources((uint64_t)a2, a2[2], 1, &v139, 0x7FFFFFFFu, 0, 0, 2u);
  v10 = *((_QWORD *)this + 9);
  v11 = *((_QWORD *)this + 13);
  if (!v11)
  {
    v14 = 0;
    v13 = 0;
LABEL_18:
    v16 = *(_QWORD *)(v10 + 56);
    if (v11)
      goto LABEL_19;
    v17 = 0;
    v134 = *(_DWORD *)(v16 + 28);
    v135 = *(unsigned __int8 *)(v16 + 32);
    if (!v14)
      goto LABEL_58;
    while (1)
    {
LABEL_25:
      v18 = *((_QWORD *)v14 + 1);
      if (!v18)
      {
        WebGPU::ComputePassEncoder::makeInvalid(this, CFSTR("bind group was deallocated"));
        goto LABEL_175;
      }
      v19 = *v14;
      WebGPU::BindGroup::rebindSamplersIfNeeded(*((WebGPU::BindGroup **)v14 + 1));
      v20 = (int *)*((_QWORD *)this + 11);
      if (v20)
      {
        v21 = *(v20 - 2);
        v22 = 9 * ((v19 + ~((_DWORD)v19 << 15)) ^ ((v19 + ~((_DWORD)v19 << 15)) >> 10));
        v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
        v24 = v21 & (v23 ^ HIWORD(v23));
        v25 = &v20[6 * v24];
        v26 = *v25;
        if (*v25 != (_DWORD)v19)
        {
          v27 = 1;
          while (v26 != -1)
          {
            v24 = (v24 + v27) & v21;
            v25 = &v20[6 * v24];
            v26 = *v25;
            ++v27;
            if (*v25 == (_DWORD)v19)
              goto LABEL_35;
          }
          v25 = &v20[6 * *(v20 - 1)];
        }
LABEL_35:
        v20 += 6 * *(v20 - 1);
        v28 = *(_QWORD *)(*((_QWORD *)this + 9) + 64);
        if (!v28)
        {
LABEL_33:
          v29 = 0;
          goto LABEL_43;
        }
      }
      else
      {
        v25 = 0;
        v28 = *(_QWORD *)(*((_QWORD *)this + 9) + 64);
        if (!v28)
          goto LABEL_33;
      }
      v30 = *(_DWORD *)(v28 - 8);
      v31 = 9 * ((v19 + ~((_DWORD)v19 << 15)) ^ ((v19 + ~((_DWORD)v19 << 15)) >> 10));
      v32 = (v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11);
      v33 = v30 & (v32 ^ HIWORD(v32));
      v34 = *(_DWORD *)(v28 + 16 * v33);
      if (v34 != (_DWORD)v19)
      {
        v35 = 1;
        while (v34 != -1)
        {
          v33 = ((_DWORD)v33 + v35) & v30;
          v34 = *(_DWORD *)(v28 + 16 * v33);
          ++v35;
          if (v34 == (_DWORD)v19)
            goto LABEL_42;
        }
        v33 = *(unsigned int *)(v28 - 4);
      }
LABEL_42:
      v29 = v28 + 16 * v33;
      v28 += 16 * *(unsigned int *)(v28 - 4);
LABEL_43:
      if (v29 == v28)
        v36 = 0;
      else
        v36 = (_QWORD *)(v29 + 8);
      if (v25 == v20)
        v37 = 0;
      else
        v37 = (uint64_t)(v25 + 2);
      WebGPU::errorValidatingBindGroup(v18, v36, v37);
      v38 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v38)
      {
        WebGPU::ComputePassEncoder::makeInvalid(this, v38);

        goto LABEL_175;
      }
      if (*(_BYTE *)(*((_QWORD *)this + 10) + 76))
        v39 = 0;
      else
        v39 = (void *)*((_QWORD *)this + 1);
      v40 = v39;
      v41 = *(id *)(v18 + 32);
      objc_msgSend(v40, "setBuffer:offset:atIndex:", v41, 0, v19);

      v42 = v14 + 4;
      v14 = v13;
      if (v42 != v13)
      {
        v14 = v42;
        while (*v14 >= 0xFFFFFFFE)
        {
          v14 += 4;
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
      if (v14 == v17)
        goto LABEL_58;
    }
  }
  v12 = *(unsigned int *)(v11 - 4);
  v13 = (unsigned int *)(v11 + 16 * v12);
  if (*(_DWORD *)(v11 - 12))
  {
    v14 = (unsigned int *)*((_QWORD *)this + 13);
    if ((_DWORD)v12)
    {
      v15 = 16 * v12;
      v14 = (unsigned int *)*((_QWORD *)this + 13);
      do
      {
        if (*v14 < 0xFFFFFFFE)
          goto LABEL_18;
        v14 += 4;
        v15 -= 16;
      }
      while (v15);
      v14 = v13;
      v16 = *(_QWORD *)(v10 + 56);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v14 = (unsigned int *)(v11 + 16 * v12);
  v13 = v14;
  v16 = *(_QWORD *)(v10 + 56);
LABEL_19:
  v17 = (unsigned int *)(v11 + 16 * *(unsigned int *)(v11 - 4));
  v134 = *(_DWORD *)(v16 + 28);
  v135 = *(unsigned __int8 *)(v16 + 32);
  if (v17 != v14)
    goto LABEL_25;
LABEL_58:
  v43 = *((_QWORD *)this + 12);
  v130 = (WebGPU::PipelineLayout *)v16;
  if (!v43)
  {
    v46 = 0;
    LODWORD(v44) = 0;
LABEL_69:
    v45 = (unsigned int *)(v43 + 24 * v44);
    goto LABEL_70;
  }
  v44 = *(unsigned int *)(v43 - 4);
  v45 = (unsigned int *)(v43 + 24 * v44);
  if (!*(_DWORD *)(v43 - 12))
  {
    v46 = (unsigned int *)(v43 + 24 * v44);
    goto LABEL_69;
  }
  v46 = (unsigned int *)*((_QWORD *)this + 12);
  if ((_DWORD)v44)
  {
    v47 = 24 * v44;
    v46 = (unsigned int *)*((_QWORD *)this + 12);
    while (*v46 >= 0xFFFFFFFE)
    {
      v46 += 6;
      v47 -= 24;
      if (!v47)
      {
        v46 = v45;
        break;
      }
    }
  }
LABEL_70:
  if (v43)
  {
    v48 = (unsigned int *)(v43 + 24 * *(unsigned int *)(v43 - 4));
    if (v48 == v46)
      goto LABEL_72;
    goto LABEL_80;
  }
  v48 = 0;
  if (v46)
  {
LABEL_80:
    v131 = v48;
    v132 = v45;
    while (1)
    {
      if (v135)
      {
        v138 = *v46;
        if (v134 > v138)
        {
          v52 = WebGPU::PipelineLayout::bindGroupLayout(v130, v138);
          v53 = v46[5];
          if ((_DWORD)v53)
            break;
        }
      }
LABEL_118:
      v95 = v46 + 6;
      v46 = v45;
      if (v95 != v45)
      {
        v46 = v95;
        while (*v46 >= 0xFFFFFFFE)
        {
          v46 += 6;
          if (v46 == v45)
          {
            v46 = v45;
            break;
          }
        }
      }
      if (v46 == v131)
      {
        v43 = *((_QWORD *)this + 12);
        if (!v43)
          goto LABEL_126;
        goto LABEL_73;
      }
    }
    v54 = v52;
    v55 = (uint64_t *)*((_QWORD *)v46 + 1);
    v133 = &v55[v53];
    while (1)
    {
      v136 = v55;
      v56 = *v55;
      v57 = *(unsigned int *)(*v55 + 12);
      if ((_DWORD)v57)
        break;
LABEL_86:
      v55 = v136 + 1;
      v45 = v132;
      if (v136 + 1 == v133)
        goto LABEL_118;
    }
    v58 = 0;
    while (1)
    {
      if (v58 >= *(unsigned int *)(v56 + 12))
        goto LABEL_190;
      v59 = *(id *)(*(_QWORD *)v56 + 8 * v58);
      if (v58 >= *(unsigned int *)(v56 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x18243F0E0);
      }
      v60 = v59;
      v61 = *(_QWORD *)(v54 + 16);
      if (!v61)
        goto LABEL_89;
      v62 = *(_QWORD *)(v56 + 16);
      v63 = (int *)(v62 + 32 * v58);
      v64 = v63[1];
      v65 = *(_DWORD *)(v61 - 8);
      v66 = ~(v64 << 32);
      v67 = ((v66 + v64) ^ ((unint64_t)(v66 + v64) >> 22))
          + ~(((v66 + v64) ^ ((unint64_t)(v66 + v64) >> 22)) << 13);
      v68 = (9 * (v67 ^ (v67 >> 8))) ^ ((9 * (v67 ^ (v67 >> 8))) >> 15);
      v69 = v65 & (((v68 + ~(v68 << 27)) >> 31) ^ ((_DWORD)v68 + ~((_DWORD)v68 << 27)));
      v70 = *(_QWORD *)(v61 + 16 * v69);
      if (v70 == v64)
      {
LABEL_97:
        if (v69 != *(_DWORD *)(v61 - 4))
          goto LABEL_115;
      }
      else
      {
        v71 = 1;
        while (v70 != -1)
        {
          v69 = ((_DWORD)v69 + v71) & v65;
          v70 = *(_QWORD *)(v61 + 16 * v69);
          ++v71;
          if (v70 == v64)
            goto LABEL_97;
        }
        v69 = *(unsigned int *)(v61 - 4);
      }
      v72 = ((v64 | 0x100000000) + v66) ^ (((v64 | 0x100000000uLL) + v66) >> 22);
      v73 = 9 * ((v72 + ~(v72 << 13)) ^ ((v72 + ~(v72 << 13)) >> 8));
      v74 = (v73 ^ (v73 >> 15)) + ~((v73 ^ (v73 >> 15)) << 27);
      v75 = v65 & ((v74 >> 31) ^ v74);
      v76 = *(_QWORD *)(v61 + 16 * v75);
      if (v76 == (v64 | 0x100000000))
      {
LABEL_104:
        if (v75 != v69)
          goto LABEL_115;
      }
      else
      {
        v77 = 1;
        while (v76 != -1)
        {
          v75 = ((_DWORD)v75 + v77) & v65;
          v76 = *(_QWORD *)(v61 + 16 * v75);
          ++v77;
          if (v76 == (v64 | 0x100000000))
            goto LABEL_104;
        }
      }
      v78 = ((v64 | 0x200000000) + v66) ^ (((v64 | 0x200000000uLL) + v66) >> 22);
      v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((v78 + ~(v78 << 13)) >> 8));
      v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
      v81 = v65 & ((v80 >> 31) ^ v80);
      v82 = *(_QWORD *)(v61 + 16 * v81);
      if (v82 == (v64 | 0x200000000))
      {
LABEL_109:
        if (v81 != v69)
          goto LABEL_115;
      }
      else
      {
        v83 = 1;
        while (v82 != -1)
        {
          v81 = ((_DWORD)v81 + v83) & v65;
          v82 = *(_QWORD *)(v61 + 16 * v81);
          ++v83;
          if (v82 == (v64 | 0x200000000))
            goto LABEL_109;
        }
      }
      v84 = v64 | 0x300000000;
      v85 = ((v84 + v66) ^ ((unint64_t)(v84 + v66) >> 22))
          + ~(((v84 + v66) ^ ((unint64_t)(v84 + v66) >> 22)) << 13);
      v86 = (9 * (v85 ^ (v85 >> 8))) ^ ((9 * (v85 ^ (v85 >> 8))) >> 15);
      v87 = v65 & (((v86 + ~(v86 << 27)) >> 31) ^ ((_DWORD)v86 + ~((_DWORD)v86 << 27)));
      v88 = *(_QWORD *)(v61 + 16 * v87);
      if (v88 != v84)
      {
        v89 = 1;
        while (v88 != -1)
        {
          v87 = ((_DWORD)v87 + v89) & v65;
          v88 = *(_QWORD *)(v61 + 16 * v87);
          ++v89;
          if (v88 == v84)
            goto LABEL_114;
        }
        goto LABEL_89;
      }
LABEL_114:
      if (v87 != v69)
      {
LABEL_115:
        v90 = *v63;
        v91 = v62 + 32 * v58;
        v141 = v138;
        v142 = v90;
        v92 = v60;
        v140 = v92;
        v143[0] = &v142;
        v143[1] = &v139;
        v143[2] = &v141;
        v143[3] = &v142;
        v143[4] = &v141;
        v143[5] = &v139;
        v143[6] = &v140;
        v143[7] = &v142;
        v143[8] = &v139;
        v143[9] = &v141;
        v93 = *(unsigned int *)(v91 + 16);
        if ((_DWORD)v93 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_187:
          __break(1u);
LABEL_190:
          __break(0xC471u);
          JUMPOUT(0x18243F0D8);
        }
        v144 = v143;
        v94 = ((uint64_t (*)(_QWORD **, uint64_t))off_1E0FD16C0[v93])(&v144, v91 + 8);

        if ((v94 & 1) == 0)
        {
          v96 = (void *)*((_QWORD *)this + 14);
          *((_QWORD *)this + 14) = 0;

          v97 = (id *)*((_QWORD *)this + 10);
          if (*((_QWORD *)this + 1))
          {
            objc_storeStrong(v97 + 8, 0);
            WebGPU::CommandEncoder::endEncoding(*((_QWORD *)this + 10), *((void **)this + 1));
            v98 = (void *)*((_QWORD *)this + 1);
            *((_QWORD *)this + 1) = 0;

          }
          else
          {
            WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)v97, CFSTR("RenderPassEncoder.makeInvalid"));
          }

          goto LABEL_175;
        }
      }
LABEL_89:

      if (++v58 == v57)
        goto LABEL_86;
    }
  }
LABEL_72:
  if (!v43)
    goto LABEL_126;
LABEL_73:
  *((_QWORD *)this + 12) = 0;
  v49 = *(unsigned int *)(v43 - 4);
  if ((_DWORD)v49)
  {
    v50 = v43 + 8;
    do
    {
      if (*(_DWORD *)(v50 - 8) != -2)
      {
        v51 = *(WTF **)v50;
        if (*(_QWORD *)v50)
        {
          *(_QWORD *)v50 = 0;
          *(_DWORD *)(v50 + 8) = 0;
          WTF::fastFree(v51, v9);
        }
      }
      v50 += 24;
      --v49;
    }
    while (v49);
  }
  WTF::fastFree((WTF *)(v43 - 16), v9);
LABEL_126:
  if (*((_DWORD *)this + 17))
  {
    v99 = *((_QWORD *)this + 11);
    if (v99)
    {
      v100 = *(unsigned int *)(v99 - 4);
      v101 = (int *)(v99 + 24 * v100);
      if (*(_DWORD *)(v99 - 12))
      {
        v102 = (int *)*((_QWORD *)this + 11);
        if ((_DWORD)v100)
        {
          v103 = 24 * v100;
          v102 = (int *)*((_QWORD *)this + 11);
          while (*v102 >= 0xFFFFFFFE)
          {
            v102 += 6;
            v103 -= 24;
            if (!v103)
            {
              v102 = v101;
              goto LABEL_139;
            }
          }
        }
        goto LABEL_139;
      }
      v102 = (int *)(v99 + 24 * v100);
    }
    else
    {
      v102 = 0;
      LODWORD(v100) = 0;
    }
    v101 = (int *)(v99 + 24 * v100);
LABEL_139:
    if (v99)
      v104 = (int *)(v99 + 24 * *(unsigned int *)(v99 - 4));
    else
      v104 = 0;
    if (v104 != v102)
    {
      while (1)
      {
        v105 = *(_QWORD *)(*((_QWORD *)this + 9) + 56);
        v106 = *v102;
        v107 = WebGPU::PipelineLayout::offsetVectorForBindGroup(v105, *v102, (uint64_t *)(v105 + 80), (uint64_t *)v102 + 1, 4);
        if (v107)
        {
          v108 = v107[3];
          if ((_DWORD)v108)
            break;
        }
LABEL_158:
        v118 = v102 + 6;
        v102 = v101;
        if (v118 != v101)
        {
          v102 = v118;
          while (*v102 >= 0xFFFFFFFE)
          {
            v102 += 6;
            if (v102 == v101)
            {
              v102 = v101;
              break;
            }
          }
        }
        if (v102 == v104)
          goto LABEL_163;
      }
      v109 = *(_QWORD *)(v105 + 56);
      if (v109)
      {
        v110 = *(_DWORD *)(v109 - 8);
        v111 = 9 * ((v106 + ~(v106 << 15)) ^ ((v106 + ~(v106 << 15)) >> 10));
        v112 = (v111 ^ (v111 >> 6)) + ~((v111 ^ (v111 >> 6)) << 11);
        v113 = v110 & (v112 ^ HIWORD(v112));
        v114 = *(_DWORD *)(v109 + 8 * v113);
        if (v114 == v106)
        {
LABEL_152:
          if (v113 != *(_DWORD *)(v109 - 4))
          {
            v116 = *(unsigned int *)(v109 + 8 * v113 + 4);
            v117 = *((unsigned int *)this + 17);
            if (v116 > v117)
              goto LABEL_187;
            goto LABEL_156;
          }
        }
        else
        {
          v115 = 1;
          while (v114 != -1)
          {
            v113 = ((_DWORD)v113 + v115) & v110;
            v114 = *(_DWORD *)(v109 + 8 * v113);
            ++v115;
            if (v114 == v106)
              goto LABEL_152;
          }
        }
      }
      v116 = 0;
      v117 = *((unsigned int *)this + 17);
LABEL_156:
      if (v117 - v116 < v108)
        goto LABEL_187;
      memcpy((void *)(*((_QWORD *)this + 7) + 4 * v116), *(const void **)v107, 4 * v108);
      goto LABEL_158;
    }
LABEL_163:
    if (*(_BYTE *)(*((_QWORD *)this + 10) + 76))
      v119 = 0;
    else
      v119 = (void *)*((_QWORD *)this + 1);
    v120 = v119;
    v121 = *((unsigned int *)this + 17);
    if (!(_DWORD)v121)
      goto LABEL_190;
    v122 = v120;
    objc_msgSend(v120, "setBytes:length:atIndex:", *((_QWORD *)this + 7), 4 * v121, *(unsigned int *)(*((_QWORD *)this + 3) + 88));

    v123 = *((_QWORD *)this + 11);
    if (v123)
    {
      *((_QWORD *)this + 11) = 0;
      v124 = *(unsigned int *)(v123 - 4);
      if ((_DWORD)v124)
      {
        v125 = v123 + 8;
        do
        {
          if (*(_DWORD *)(v125 - 8) != -2)
          {
            v126 = *(WTF **)v125;
            if (*(_QWORD *)v125)
            {
              *(_QWORD *)v125 = 0;
              *(_DWORD *)(v125 + 8) = 0;
              WTF::fastFree(v126, v9);
            }
          }
          v125 += 24;
          --v124;
        }
        while (v124);
      }
      WTF::fastFree((WTF *)(v123 - 16), v9);
    }
  }
LABEL_175:
  v127 = v139;
  if (v139)
  {
    v128 = *(unsigned int *)(v139 - 4);
    if ((_DWORD)v128)
    {
      v129 = (_QWORD *)(v139 + 8);
      do
      {
        if (*(v129 - 1) != -1)
        {
          if (*v129)
            WTF::fastFree((WTF *)(*v129 - 16), v9);
        }
        v129 += 2;
        --v128;
      }
      while (v128);
    }
    WTF::fastFree((WTF *)(v127 - 16), v9);
  }
}

void sub_18243F0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v10;
  va_list va;

  va_start(va, a8);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v10);
  _Unwind_Resume(a1);
}

void sub_18243F104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v10;
  va_list va;

  va_start(va, a8);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v10);
  _Unwind_Resume(a1);
}

void sub_18243F11C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_18243F130(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_18243F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v10;
  va_list va;

  va_start(va, a8);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v10);
  _Unwind_Resume(a1);
}

void sub_18243F15C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_18243F170(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_18243F184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18243F198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{

  _Unwind_Resume(a1);
}

void sub_18243F1AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_18243F1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v11;
  va_list va;

  va_start(va, a8);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v11);
  _Unwind_Resume(a1);
}

void sub_18243F1DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_18243F1F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_18243F204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  void *v17;
  void *v19;

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(&a16, v19);
  _Unwind_Resume(a1);
}

void WebGPU::ComputePassEncoder::makeInvalid(WebGPU::ComputePassEncoder *this, NSString *a2)
{
  id *v4;
  void *v5;
  NSString *v6;

  v6 = a2;
  objc_storeStrong((id *)this + 14, a2);
  v4 = (id *)*((_QWORD *)this + 10);
  if (*((_QWORD *)this + 1))
  {
    objc_storeStrong(v4 + 8, a2);
    WebGPU::CommandEncoder::endEncoding(*((_QWORD *)this + 10), *((void **)this + 1));
    v5 = (void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;

  }
  else
  {
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)v4, CFSTR("RenderPassEncoder.makeInvalid"));
  }

}

void sub_18243F2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WebGPU::addResourceToActiveResources(uint64_t a1, void *a2, int a3, uint64_t *a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8)
{
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t EntryMapKey;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v63;
  uint64_t v64[3];
  unint64_t v65;
  uint64_t v66;

  v15 = a2;
  v16 = v15;
  if ((a3 & 0xFFFFFFF0) != 0)
  {
    v17 = v15;
    objc_msgSend(v17, "parentTexture");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    v16 = v17;
    if (v18)
    {
      v16 = v18;

      a6 = objc_msgSend(v17, "parentRelativeLevel");
      a7 = objc_msgSend(v17, "parentRelativeSlice");
    }

  }
  EntryMapKey = WebGPU::BindGroup::makeEntryMapKey(a6, a7, a8);
  v66 = EntryMapKey;
  v21 = *a4;
  if (!*a4)
    goto LABEL_11;
  v22 = *(_DWORD *)(v21 - 8);
  v23 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = v22 & ((v25 >> 31) ^ v25);
  v27 = *(_QWORD *)(v21 + 16 * v26);
  if (v27 != a1)
  {
    v28 = 1;
    while (v27)
    {
      v26 = ((_DWORD)v26 + v28) & v22;
      v27 = *(_QWORD *)(v21 + 16 * v26);
      ++v28;
      if (v27 == a1)
        goto LABEL_10;
    }
    goto LABEL_11;
  }
LABEL_10:
  if (v26 == *(_DWORD *)(v21 - 4))
  {
LABEL_11:
    v29 = 0;
LABEL_20:
    v40 = a3;
    goto LABEL_21;
  }
  v30 = v21 + 16 * v26;
  v32 = *(_QWORD *)(v30 + 8);
  v29 = (uint64_t *)(v30 + 8);
  v31 = v32;
  if (!v32)
    goto LABEL_19;
  v33 = *(_DWORD *)(v31 - 8);
  v34 = (EntryMapKey + ~(EntryMapKey << 32)) ^ ((unint64_t)(EntryMapKey + ~(EntryMapKey << 32)) >> 22);
  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  v37 = v33 & ((v36 >> 31) ^ v36);
  v38 = *(_QWORD *)(v31 + 16 * v37);
  if (v38 != EntryMapKey)
  {
    v39 = 1;
    while (v38 != -1)
    {
      v37 = ((_DWORD)v37 + v39) & v33;
      v38 = *(_QWORD *)(v31 + 16 * v37);
      ++v39;
      if (v38 == EntryMapKey)
        goto LABEL_18;
    }
    goto LABEL_19;
  }
LABEL_18:
  if (v37 == *(_DWORD *)(v31 - 4))
  {
LABEL_19:
    v65 = __PAIR64__(a5, a3);
    WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WebGPU::EntryUsageData>(v64, v29, &v66, &v65);
    goto LABEL_20;
  }
  v58 = v31 + 16 * v37;
  v59 = *(_DWORD *)(v58 + 8);
  v60 = *(_DWORD *)(v58 + 12);
  v40 = v59 | a3;
  if (v60 != a5)
  {
    if (a3 == 512)
    {
      if (v59 == 512)
        goto LABEL_50;
    }
    else if (a3 == 128 && v59 == 128)
    {
      goto LABEL_50;
    }
  }
LABEL_21:
  if ((v40 & 4) != 0)
  {
    if (v40 == 4)
      goto LABEL_29;
  }
  else if (v40 == 128 || (v40 & 0x80) == 0)
  {
    if ((v40 & 0x200) != 0)
    {
      if (v40 == 512)
        goto LABEL_29;
    }
    else if (v40 == 16 || (v40 & 0x10) == 0)
    {
LABEL_29:
      if (v29)
      {
LABEL_66:
        v57 = 1;
        goto LABEL_67;
      }
      v65 = 0;
      v63 = __PAIR64__(a5, v40);
      WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WebGPU::EntryUsageData>(v64, (uint64_t *)&v65, &v66, &v63);
      v41 = *a4;
      if (*a4
        || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a4, 8u), (v41 = *a4) != 0))
      {
        v42 = *(_DWORD *)(v41 - 8);
      }
      else
      {
        v42 = 0;
      }
      v43 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
      v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
      v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
      v46 = v42 & ((v45 >> 31) ^ v45);
      v47 = (_QWORD *)(v41 + 16 * v46);
      v48 = *v47;
      if (*v47)
      {
        v49 = 0;
        v50 = 1;
        while (v48 != a1)
        {
          if (v48 == -1)
            v49 = v47;
          v46 = (v46 + v50) & v42;
          v47 = (_QWORD *)(v41 + 16 * v46);
          v48 = *v47;
          ++v50;
          if (!*v47)
          {
            if (v49)
            {
              *v49 = 0;
              v49[1] = 0;
              --*(_DWORD *)(*a4 - 16);
              v47 = v49;
            }
            goto LABEL_41;
          }
        }
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable(v64, &v65);
        v61 = v47[1];
        v47[1] = v64[0];
        v64[0] = v61;
        if (v61)
          WTF::fastFree((WTF *)(v61 - 16), v51);
        goto LABEL_64;
      }
LABEL_41:
      *v47 = a1;
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable(v64, &v65);
      v52 = v47[1];
      v47[1] = v64[0];
      v64[0] = v52;
      if (v52)
        WTF::fastFree((WTF *)(v52 - 16), v51);
      if (*a4)
      {
        ++*(_DWORD *)(*a4 - 12);
        v53 = *a4;
        if (*a4)
          goto LABEL_45;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v53 = *a4;
        if (*a4)
        {
LABEL_45:
          v54 = (*(_DWORD *)(v53 - 16) + *(_DWORD *)(v53 - 12));
          v55 = *(unsigned int *)(v53 - 4);
          if (v55 <= 0x400)
            goto LABEL_46;
          goto LABEL_61;
        }
      }
      v54 = *(unsigned int *)(v53 - 16);
      v55 = *(unsigned int *)(v53 - 4);
      if (v55 <= 0x400)
      {
LABEL_46:
        if (3 * v55 > 4 * v54)
          goto LABEL_64;
        if (!(_DWORD)v55)
        {
          v56 = 8;
LABEL_63:
          WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a4, v56);
LABEL_64:
          if (v65)
            WTF::fastFree((WTF *)(v65 - 16), v51);
          goto LABEL_66;
        }
LABEL_62:
        v56 = (_DWORD)v55 << (6 * *(_DWORD *)(v53 - 12) >= (2 * v55));
        goto LABEL_63;
      }
LABEL_61:
      if (v55 > 2 * v54)
        goto LABEL_64;
      goto LABEL_62;
    }
  }
LABEL_50:
  v57 = 0;
LABEL_67:

  return v57;
}

void sub_18243F74C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (a13)
  {
    WTF::fastFree((WTF *)(a13 - 16), a2);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1 && *v5)
          WTF::fastFree((WTF *)(*v5 - 16), a2);
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

__CFString *WTF::String::operator NSString *(_QWORD *a1)
{
  if (*a1)
    return (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    return &stru_1E0FD9588;
}

_DWORD *wgpuComputePassEncoderReference(_DWORD *result)
{
  ++*result;
  return result;
}

uint64_t wgpuComputePassEncoderRelease(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WebGPU::BindGroup **v7;
  WTF *v8;
  void *v9;
  WebGPU::BindGroup *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WebGPU::CommandEncoder *v19;
  WebGPU::ComputePipeline *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;

  v1 = result;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  v2 = *(void **)(result + 8);
  if (v2)
  {
    WebGPU::CommandEncoder::endEncoding(*(_QWORD *)(result + 80), v2);
    v3 = *(void **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;

    v5 = *(_QWORD *)(v1 + 104);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
    *(_QWORD *)(result + 8) = 0;

    v5 = *(_QWORD *)(v1 + 104);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v6)
  {
    v7 = (WebGPU::BindGroup **)(v5 + 8);
    do
    {
      if (*((_DWORD *)v7 - 2) != -2)
      {
        v10 = *v7;
        *v7 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 1)
          {
            WebGPU::BindGroup::~BindGroup(v10, v4);
            WTF::fastFree(v8, v9);
          }
          else
          {
            --*(_DWORD *)v10;
          }
        }
      }
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  WTF::fastFree((WTF *)(v5 - 16), v4);
LABEL_16:
  v11 = *(_QWORD *)(v1 + 96);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = v11 + 8;
      do
      {
        if (*(_DWORD *)(v13 - 8) != -2)
        {
          v14 = *(WTF **)v13;
          if (*(_QWORD *)v13)
          {
            *(_QWORD *)v13 = 0;
            *(_DWORD *)(v13 + 8) = 0;
            WTF::fastFree(v14, v4);
          }
        }
        v13 += 24;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), v4);
  }
  v15 = *(_QWORD *)(v1 + 88);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = v15 + 8;
      do
      {
        if (*(_DWORD *)(v17 - 8) != -2)
        {
          v18 = *(WTF **)v17;
          if (*(_QWORD *)v17)
          {
            *(_QWORD *)v17 = 0;
            *(_DWORD *)(v17 + 8) = 0;
            WTF::fastFree(v18, v4);
          }
        }
        v17 += 24;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v15 - 16), v4);
  }
  v19 = *(WebGPU::CommandEncoder **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  if (!v19)
  {
LABEL_35:
    v20 = *(WebGPU::ComputePipeline **)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (!v20)
      goto LABEL_39;
    goto LABEL_36;
  }
  if (*(_DWORD *)v19 != 1)
  {
    --*(_DWORD *)v19;
    goto LABEL_35;
  }
  WebGPU::CommandEncoder::~CommandEncoder(v19);
  WTF::fastFree(v25, v26);
  v20 = *(WebGPU::ComputePipeline **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (!v20)
    goto LABEL_39;
LABEL_36:
  if (*(_DWORD *)v20 == 1)
  {
    WebGPU::ComputePipeline::~ComputePipeline(v20, v4);
    WTF::fastFree(v21, v22);
  }
  else
  {
    --*(_DWORD *)v20;
  }
LABEL_39:
  v23 = *(WTF **)(v1 + 56);
  if (v23)
  {
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 64) = 0;
    WTF::fastFree(v23, v4);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v1 + 24), v4);

  return WTF::fastFree((WTF *)v1, v24);
}

void sub_18243FA84(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebGPU::CommandEncoder *v7;
  WebGPU::ComputePipeline *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  WebGPU::BindGroup **v17;
  WTF *v18;
  void *v19;
  WebGPU::BindGroup *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;

  v4 = *(_QWORD *)(v1 + 104);
  if (v4)
  {
    v11 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v11)
    {
      v17 = (WebGPU::BindGroup **)(v4 + 8);
      do
      {
        if (*((_DWORD *)v17 - 2) != -2)
        {
          v20 = *v17;
          *v17 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v20, v3);
              WTF::fastFree(v18, v19);
            }
            else
            {
              --*(_DWORD *)v20;
            }
          }
        }
        v17 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
    v5 = *(_QWORD *)(v1 + 96);
    if (!v5)
    {
LABEL_3:
      v6 = *(_QWORD *)(v1 + 88);
      if (!v6)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 96);
    if (!v5)
      goto LABEL_3;
  }
  v12 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v12)
  {
    v21 = v5 + 8;
    do
    {
      if (*(_DWORD *)(v21 - 8) != -2)
      {
        v22 = *(WTF **)v21;
        if (*(_QWORD *)v21)
        {
          *(_QWORD *)v21 = 0;
          *(_DWORD *)(v21 + 8) = 0;
          WTF::fastFree(v22, v3);
        }
      }
      v21 += 24;
      --v12;
    }
    while (v12);
  }
  WTF::fastFree((WTF *)(v5 - 16), v3);
  v6 = *(_QWORD *)(v1 + 88);
  if (!v6)
  {
LABEL_4:
    v7 = *(WebGPU::CommandEncoder **)(v1 + 80);
    *(_QWORD *)(v1 + 80) = 0;
    if (!v7)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_12:
  v13 = *(unsigned int *)(v6 - 4);
  if ((_DWORD)v13)
  {
    v23 = v6 + 8;
    do
    {
      if (*(_DWORD *)(v23 - 8) != -2)
      {
        v24 = *(WTF **)v23;
        if (*(_QWORD *)v23)
        {
          *(_QWORD *)v23 = 0;
          *(_DWORD *)(v23 + 8) = 0;
          WTF::fastFree(v24, v3);
        }
      }
      v23 += 24;
      --v13;
    }
    while (v13);
  }
  WTF::fastFree((WTF *)(v6 - 16), v3);
  v7 = *(WebGPU::CommandEncoder **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  if (!v7)
  {
LABEL_5:
    v8 = *(WebGPU::ComputePipeline **)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (v8)
      goto LABEL_6;
LABEL_18:
    v16 = *(WTF **)(v1 + 56);
    if (v16)
    {
      *(_QWORD *)(v1 + 56) = 0;
      *(_DWORD *)(v1 + 64) = 0;
      WTF::fastFree(v16, v3);
    }
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v1 + 24), v3);

    _Unwind_Resume(a1);
  }
LABEL_14:
  if (*(_DWORD *)v7 == 1)
  {
    WebGPU::CommandEncoder::~CommandEncoder(v7);
    WTF::fastFree(v14, v15);
    v8 = *(WebGPU::ComputePipeline **)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    --*(_DWORD *)v7;
    v8 = *(WebGPU::ComputePipeline **)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (!v8)
      goto LABEL_18;
  }
LABEL_6:
  if (*(_DWORD *)v8 == 1)
  {
    WebGPU::ComputePipeline::~ComputePipeline(v8, v3);
    WTF::fastFree(v9, v10);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  goto LABEL_18;
}

void wgpuComputePassEncoderDispatchWorkgroups(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  void *v7;
  unsigned int v10;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  void *v24;
  id v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[3];

  v5 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v5 + 4) == 1)
  {
    v7 = *(void **)(a1 + 8);
    if (v7 && *(_QWORD *)(v5 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v5, v7))
      {
        WebGPU::ComputePassEncoder::executePreDispatchCommands((WebGPU::ComputePassEncoder *)a1, 0);
        v10 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 212);
        if (v10 >= a4 && v10 >= a2 && v10 >= a3)
        {
          if (a3 * a2 * a4)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 76))
              v24 = 0;
            else
              v24 = *(void **)(a1 + 8);
            v25 = v24;
            v28[0] = a2;
            v28[1] = a3;
            v28[2] = a4;
            v26 = *(_OWORD *)(a1 + 32);
            v27 = *(_QWORD *)(a1 + 48);
            objc_msgSend(v25, "dispatchThreadgroups:threadsPerThreadgroup:", v28, &v26);

          }
        }
        else
        {
          WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, 0);
        }
        return;
      }
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = 0;

    return;
  }
  v13 = *(_QWORD *)(a1 + 24);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::ComputePassEncoder::dispatch(uint32_t, uint32_t, uint32_t)");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](v28, v14);
  v15 = *(_QWORD *)(v13 + 32);
  v16 = 32 * *(unsigned int *)(v13 + 44);
  v17 = v15 + v16;
  while (v16)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v17 -= 32;
    v16 -= 32;
    if (!v18)
    {
      v19 = v15 + v16;
      if (!*(_BYTE *)(v19 + 16))
      {
        v20 = v28[0];
        v28[0] = 0;
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = v20;
        *(_BYTE *)(v19 + 16) = 1;
      }
      goto LABEL_21;
    }
  }
  v21 = *(_QWORD *)(v13 + 24);
  if (v21)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v21 + 16))(v21, 1, v28);
    v22 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
LABEL_21:
  v23 = (_DWORD *)v28[0];
  v28[0] = 0;
  if (v23)
  {
    if (*v23 == 2)
      WTF::StringImpl::destroy();
    else
      *v23 -= 2;
  }

}

void sub_18243FE68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18243FE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  void *v14;

  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18243FEB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuComputePassEncoderDispatchWorkgroupsIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  id v47;

  v4 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v4 + 4) != 1)
  {
    v9 = *(_QWORD *)(a1 + 24);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::ComputePassEncoder::dispatchIndirect(const Buffer &, uint64_t)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v45, v10);
    v11 = *(_QWORD *)(v9 + 32);
    v12 = 32 * *(unsigned int *)(v9 + 44);
    v13 = v11 + v12;
    while (v12)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v13 -= 32;
      v12 -= 32;
      if (!v14)
      {
        v15 = v11 + v12;
        if (!*(_BYTE *)(v15 + 16))
        {
          v16 = v45;
          *(_QWORD *)&v45 = 0;
          *(_DWORD *)v15 = 1;
          *(_QWORD *)(v15 + 8) = v16;
          *(_BYTE *)(v15 + 16) = 1;
        }
        goto LABEL_21;
      }
    }
    v17 = *(_QWORD *)(v9 + 24);
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v17 + 16))(v17, 1, &v45);
      v18 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
LABEL_21:
    v19 = (_DWORD *)v45;
    *(_QWORD *)&v45 = 0;
    if (v19)
    {
      if (*v19 == 2)
        WTF::StringImpl::destroy();
      else
        *v19 -= 2;
    }

    return;
  }
  v6 = *(void **)(a1 + 8);
  if (!v6 || !*(_QWORD *)(v4 + 16))
  {
LABEL_28:
    *(_QWORD *)(a1 + 8) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v4, v6))
  {
    v6 = *(void **)(a1 + 8);
    goto LABEL_28;
  }
  if (*(_BYTE *)(a2 + 52) != 4 && !*(_QWORD *)(a2 + 16)
    || (v8 = *(_QWORD *)(a2 + 256), !*(_QWORD *)(v8 + 8))
    || v8 != *(_QWORD *)(a1 + 24)
    || (a3 & 3) != 0
    || (*(_BYTE *)(a2 + 49) & 1) == 0
    || (unint64_t)(a3 + 12) > *(_QWORD *)(a2 + 40))
  {
    WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, 0);
    return;
  }
  WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(a1 + 80));
  if (*(_BYTE *)(a2 + 52) != 4)
  {
    v20 = *(id *)(*(_QWORD *)(a1 + 24) + 8);
    v21 = (void *)WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function;
    if (!WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function)
    {
      v29 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 212);
      v22 = (void *)objc_opt_new();
      objc_msgSend(v22, "setFastMathEnabled:", 1);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("[[kernel]] void cs(device const uint* indirectBuffer, device uint* dispatchCallBuffer, uint index [[thread_position_in_grid]]) { dispatchCallBuffer[index] = metal::select(indirectBuffer[index], 0u, indirectBuffer[index] > %u); }"),
        v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = 0;
      v31 = (void *)objc_msgSend(v20, "newLibraryWithSource:options:error:", v30, v22, &v47);
      v32 = v47;

      if (v32)
      {

        v28 = 0;
LABEL_51:

        if (v28)
        {
          WebGPU::ComputePassEncoder::executePreDispatchCommands((WebGPU::ComputePassEncoder *)a1, (void **)a2);
          if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 76))
            v39 = 0;
          else
            v39 = *(void **)(a1 + 8);
          v40 = v39;
          v45 = *(_OWORD *)(a1 + 32);
          v46 = *(_QWORD *)(a1 + 48);
          objc_msgSend(v40, "dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:", v28, 0, &v45);

        }
        else
        {
          WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, CFSTR("GPUComputePassEncoder.dispatchWorkgroupsIndirect: Unable to validate dispatch size"));

        }
        return;
      }
      v41 = objc_msgSend(v31, "newFunctionWithName:", CFSTR("cs"));
      v42 = (void *)WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function;
      WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function = v41;

      v21 = (void *)WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function;
    }
    WebGPU::Device::dispatchCallPipelineState(*(_QWORD *)(a1 + 24), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = *(_QWORD *)(a1 + 24);
    v24 = *(void **)(v23 + 8);
    if (v24)
    {
      v25 = *(void **)(v23 + 296);
      if (!v25)
      {
        v26 = objc_msgSend(v24, "newBufferWithLength:options:", 12, 32);
        v27 = *(void **)(v23 + 296);
        *(_QWORD *)(v23 + 296) = v26;

        v25 = *(void **)(v23 + 296);
      }
      v28 = v25;
    }
    else
    {
      v28 = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 76))
      v33 = 0;
    else
      v33 = *(void **)(a1 + 8);
    objc_msgSend(v33, "setComputePipelineState:", v22);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 76))
      v34 = 0;
    else
      v34 = *(void **)(a1 + 8);
    v35 = *(_QWORD *)(a2 + 16);
    v36 = v34;
    objc_msgSend(v36, "setBuffer:offset:atIndex:", v35, a3, 0);

    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 76))
      v37 = 0;
    else
      v37 = *(void **)(a1 + 8);
    objc_msgSend(v37, "setBuffer:offset:atIndex:", v28, 0, 1);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 76))
      v38 = 0;
    else
      v38 = *(void **)(a1 + 8);
    v45 = xmmword_18260EFF0;
    v46 = 1;
    v43 = xmmword_18260EFF0;
    v44 = 1;
    objc_msgSend(v38, "dispatchThreads:threadsPerThreadgroup:", &v45, &v43);
    goto LABEL_51;
  }
}

void sub_182440318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182440330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182440344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18244035C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182440370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182440384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182440394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1824403A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1824403D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824403E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824403F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  void *v15;

  if (a15)
  {
    if (*a15 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a15 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuComputePassEncoderEnd(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  BOOL IsCurrent;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  void *v31;
  WebGPU::CommandEncoder *v32;
  NSString *v33;
  int *v34;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(_QWORD *)(a1 + 24);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as pass is already ended"), "void WebGPU::ComputePassEncoder::endPass()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v34, v3);
    v4 = *(_QWORD *)(v2 + 32);
    v5 = 32 * *(unsigned int *)(v2 + 44);
    v6 = v4 + v5;
    while (v5)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v6 -= 32;
      v5 -= 32;
      if (!v7)
      {
        v8 = v4 + v5;
        if (!*(_BYTE *)(v8 + 16))
        {
          v9 = v34;
          v34 = 0;
          *(_DWORD *)v8 = 1;
          *(_QWORD *)(v8 + 8) = v9;
          *(_BYTE *)(v8 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    v17 = *(_QWORD *)(v2 + 24);
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t, int **))(*(_QWORD *)v17 + 16))(v17, 1, &v34);
      v18 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
LABEL_18:
    v19 = v34;
    v34 = 0;
    if (!v19)
      goto LABEL_33;
    v20 = *v19 - 2;
    if (*v19 != 2)
      goto LABEL_20;
    goto LABEL_32;
  }
  *(_BYTE *)(a1 + 120) = 1;
  v10 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v10 + 4) != 1)
  {
    v21 = *(_QWORD *)(a1 + 24);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::ComputePassEncoder::endPass()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v34, v3);
    v22 = *(_QWORD *)(v21 + 32);
    v23 = 32 * *(unsigned int *)(v21 + 44);
    v24 = v22 + v23;
    while (v23)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v24 -= 32;
      v23 -= 32;
      if (!v25)
      {
        v26 = v22 + v23;
        if (!*(_BYTE *)(v26 + 16))
        {
          v27 = v34;
          v34 = 0;
          *(_DWORD *)v26 = 1;
          *(_QWORD *)(v26 + 8) = v27;
          *(_BYTE *)(v26 + 16) = 1;
        }
        goto LABEL_30;
      }
    }
    v28 = *(_QWORD *)(v21 + 24);
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t, int **))(*(_QWORD *)v28 + 16))(v28, 1, &v34);
      v29 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 24) = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
LABEL_30:
    v19 = v34;
    v34 = 0;
    if (!v19)
      goto LABEL_33;
    v20 = *v19 - 2;
    if (*v19 != 2)
    {
LABEL_20:
      *v19 = v20;
LABEL_33:

      return;
    }
LABEL_32:
    WTF::StringImpl::destroy();
    goto LABEL_33;
  }
  v11 = *(void **)(a1 + 8);
  if (v11
    && *(_QWORD *)(v10 + 16)
    && (IsCurrent = WebGPU::CommandEncoder::encoderIsCurrent(v10, v11), v11 = *(void **)(a1 + 8), IsCurrent))
  {
    v13 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)(a1 + 16) || !v11)
    {
      v30 = v11 != 0;
      WebGPU::CommandEncoder::endEncoding(v13, v11);
      v31 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

      v32 = *(WebGPU::CommandEncoder **)(a1 + 80);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ComputePassEncoder.endPass failure, m_debugGroupStackSize = %llu, isValid = %d, error = %@"), *(_QWORD *)(a1 + 16), v30, *(_QWORD *)(a1 + 112));
      v33 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebGPU::CommandEncoder::makeInvalid(v32, v33);

    }
    else
    {
      WebGPU::CommandEncoder::endEncoding(v13, v11);
      v14 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

      v15 = *(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(v15 + 4) != 2)
      {
        *(_BYTE *)(v15 + 4) = 0;
        v16 = *(void **)(v15 + 40);
        *(_QWORD *)(v15 + 40) = 0;

        WebGPU::Queue::setEncoderForBuffer(*(_QWORD *)(*(_QWORD *)(v15 + 80) + 16), *(void **)(v15 + 16), 0);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;

  }
}

void sub_182440740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_182440754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  void *v14;

  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_1824407BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *wgpuComputePassEncoderInsertDebugMarker(uint64_t a1, char *__s)
{
  uint64_t v3;
  void *v4;
  void *v5;
  __CFString *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *result;
  _DWORD *v19;
  _DWORD *v20;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  v3 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v3 + 4) != 1)
  {
    v7 = *(_QWORD *)(a1 + 24);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::ComputePassEncoder::insertDebugMarker(String &&)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v20, v8);
    v9 = *(_QWORD *)(v7 + 32);
    v10 = 32 * *(unsigned int *)(v7 + 44);
    v11 = v9 + v10;
    while (v10)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v11 -= 32;
      v10 -= 32;
      if (!v12)
      {
        v13 = v9 + v10;
        if (!*(_BYTE *)(v13 + 16))
        {
          v14 = v20;
          v20 = 0;
          *(_DWORD *)v13 = 1;
          *(_QWORD *)(v13 + 8) = v14;
          *(_BYTE *)(v13 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    v15 = *(_QWORD *)(v7 + 24);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v15 + 16))(v15, 1, &v20);
      v16 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
LABEL_18:
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      if (*v17 == 2)
      {
        WTF::StringImpl::destroy();

        result = v19;
        if (!v19)
          return result;
        goto LABEL_28;
      }
      *v17 -= 2;
    }

    result = v19;
    if (!v19)
      return result;
LABEL_28:
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    *result -= 2;
    return result;
  }
  v4 = *(void **)(a1 + 8);
  if (!v4 || !*(_QWORD *)(v3 + 16))
    goto LABEL_26;
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v3, v4))
  {
    v4 = *(void **)(a1 + 8);
LABEL_26:
    *(_QWORD *)(a1 + 8) = 0;

LABEL_27:
    result = v19;
    if (!v19)
      return result;
    goto LABEL_28;
  }
  if (*(unsigned __int8 *)(a1 + 4) - 3 > 0xFFFFFFFD)
    goto LABEL_27;
  v5 = *(void **)(a1 + 8);
  if (v19)
    v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E0FD9588;
  objc_msgSend(v5, "insertDebugSignpost:", v6);

  result = v19;
  if (v19)
    goto LABEL_28;
  return result;
}

void sub_1824409C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  void *v11;
  void *v12;

  v12 = v11;

  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuComputePassEncoderPopDebugGroup(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v2 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v2 + 4) == 1)
  {
    v3 = *(void **)(a1 + 8);
    if (v3 && *(_QWORD *)(v2 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v2, v3))
      {
        if (*(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
        {
          if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 4) == 1 && (v4 = *(_QWORD *)(a1 + 16)) != 0)
          {
            *(_QWORD *)(a1 + 16) = v4 - 1;
            objc_msgSend(*(id *)(a1 + 8), "popDebugGroup");
          }
          else
          {
            WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, 0);
          }
        }
        return;
      }
      v3 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = 0;

    return;
  }
  v5 = *(_QWORD *)(a1 + 24);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::ComputePassEncoder::popDebugGroup()");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v16, v6);
  v7 = *(_QWORD *)(v5 + 32);
  v8 = 32 * *(unsigned int *)(v5 + 44);
  v9 = v7 + v8;
  while (v8)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v9 -= 32;
    v8 -= 32;
    if (!v10)
    {
      v11 = v7 + v8;
      if (!*(_BYTE *)(v11 + 16))
      {
        v12 = v16;
        v16 = 0;
        *(_DWORD *)v11 = 1;
        *(_QWORD *)(v11 + 8) = v12;
        *(_BYTE *)(v11 + 16) = 1;
      }
      goto LABEL_17;
    }
  }
  v13 = *(_QWORD *)(v5 + 24);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v13 + 16))(v13, 1, &v16);
    v14 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
LABEL_17:
  v15 = v16;
  v16 = 0;
  if (v15)
  {
    if (*v15 == 2)
      WTF::StringImpl::destroy();
    else
      *v15 -= 2;
  }

}

void sub_182440BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuComputePassEncoderPushDebugGroup(uint64_t a1, char *__s)
{
  uint64_t v3;
  void *v4;
  void *v5;
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *result;
  _DWORD *v18;
  _DWORD *v19;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  v3 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v3 + 4) == 1)
  {
    v4 = *(void **)(a1 + 8);
    if (v4 && *(_QWORD *)(v3 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v3, v4))
      {
        if (*(unsigned __int8 *)(a1 + 4) - 3 > 0xFFFFFFFD)
          goto LABEL_27;
        v5 = *(void **)(a1 + 8);
        ++*(_QWORD *)(a1 + 16);
        if (v18)
          v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v6 = &stru_1E0FD9588;
        objc_msgSend(v5, "pushDebugGroup:", v6);
        goto LABEL_26;
      }
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = 0;

    goto LABEL_27;
  }
  v7 = *(_QWORD *)(a1 + 24);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::ComputePassEncoder::pushDebugGroup(String &&)");
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v19, v6);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = 32 * *(unsigned int *)(v7 + 44);
  v10 = v8 + v9;
  while (v9)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v10 -= 32;
    v9 -= 32;
    if (!v11)
    {
      v12 = v8 + v9;
      if (!*(_BYTE *)(v12 + 16))
      {
        v13 = v19;
        v19 = 0;
        *(_DWORD *)v12 = 1;
        *(_QWORD *)(v12 + 8) = v13;
        *(_BYTE *)(v12 + 16) = 1;
      }
      goto LABEL_18;
    }
  }
  v14 = *(_QWORD *)(v7 + 24);
  if (v14)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v14 + 16))(v14, 1, &v19);
    v15 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
LABEL_18:
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*v16 == 2)
      WTF::StringImpl::destroy();
    else
      *v16 -= 2;
  }
LABEL_26:

LABEL_27:
  result = v18;
  if (v18)
  {
    if (*v18 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v18 -= 2;
  }
  return result;
}

void sub_182440E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  void *v11;

  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuComputePassEncoderSetBindGroup(uint64_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v6;
  void *v8;
  uint64_t v12;
  uint64_t v13;
  __CFString *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  NSString *v27;
  WTF *v28;
  unint64_t v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  WTF *v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  void *v39;
  WTF *v40;
  unsigned int v41;
  WTF *v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int *v64;
  int v65;
  int *v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  void *v75;
  WTF *v76;
  id v77;
  id v78;
  _QWORD v79[3];
  WTF *v80;
  uint64_t v81;
  unsigned int v82;
  _DWORD *v83;

  v82 = a2;
  v6 = a1[10];
  if (*(_BYTE *)(v6 + 4) == 1)
  {
    v8 = (void *)a1[1];
    if (v8 && *(_QWORD *)(v6 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
      {
        v12 = *(_QWORD *)(a3 + 64);
        if (!v12 || (v13 = *(_QWORD *)(a3 + 40), !*(_QWORD *)(v13 + 8)) || v13 != a1[3])
        {
          v14 = CFSTR("GPUComputePassEncoder.setBindGroup: invalid bind group");
LABEL_9:
          WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, &v14->isa);
          return;
        }
        if (*(_DWORD *)(v13 + 88) <= a2)
        {
          v14 = CFSTR("GPUComputePassEncoder.setBindGroup: groupIndex >= limits.maxBindGroups");
          goto LABEL_9;
        }
        WebGPU::BindGroupLayout::errorValidatingDynamicOffsets(v12, a5, a4, a3);
        v26 = objc_claimAutoreleasedReturnValue();
        if (v26)
        {
          v77 = (id)v26;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUComputePassEncoder.setBindGroup: %@"), v26);
          v27 = (NSString *)objc_claimAutoreleasedReturnValue();
          WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, v27);

          return;
        }
        if (!a4)
        {
LABEL_42:
          v80 = 0;
          v81 = 0;
          v41 = *(_DWORD *)(a3 + 60);
          if (v41)
          {
            v42 = 0;
            v43 = 0;
            v44 = *(_QWORD *)(a3 + 48);
            v78 = (id)(v44 + 48 * v41);
            while (1)
            {
              if (!*(_QWORD *)(v44 + 40) && *(_DWORD *)(v44 + 12))
              {
                if (*(_BYTE *)(a1[10] + 76))
                  v45 = 0;
                else
                  v45 = (void *)a1[1];
                v46 = v45;
                v47 = *(unsigned int *)(v44 + 12);
                if (!(_DWORD)v47)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824414A8);
                }
                v48 = v46;
                objc_msgSend(v46, "useResources:count:usage:", *(_QWORD *)v44, v47, *(_QWORD *)(v44 + 32));

              }
              v79[0] = v44;
              if (v43 == (_DWORD)v81)
              {
                v49 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v80, v43 + 1, (unint64_t)v79);
                v43 = HIDWORD(v81);
                v42 = v80;
                *((_QWORD *)v80 + HIDWORD(v81)) = *v49;
              }
              else
              {
                *((_QWORD *)v42 + v43) = v44;
              }
              HIDWORD(v81) = ++v43;
              v50 = *(unsigned int *)(v44 + 12);
              if ((_DWORD)v50)
                break;
LABEL_44:
              v44 += 48;
              if ((id)v44 == v78)
                goto LABEL_61;
            }
            v51 = 0;
            v52 = 16;
            while (1)
            {
              if (v51 >= *(unsigned int *)(v44 + 28))
                goto LABEL_90;
              v53 = (unsigned int *)(*(_QWORD *)(v44 + 16) + v52);
              v79[0] = a1[10];
              v79[1] = v79[0];
              v56 = *v53;
              v54 = v53 - 2;
              v55 = v56;
              if (v56 == -1)
                break;
              v83 = v79;
              ((void (*)(_DWORD **, unsigned int *))off_1E0FD16D8[v55])(&v83, v54);
              ++v51;
              v52 += 32;
              if (v50 == v51)
                goto LABEL_44;
            }
            std::__throw_bad_variant_access[abi:sn180100]();
            __break(1u);
LABEL_90:
            __break(0xC471u);
LABEL_93:
            JUMPOUT(0x1824414A0);
          }
LABEL_61:
          v58 = a1 + 12;
          v57 = a1[12];
          if (v57
            || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1 + 12, 8u), (v57 = *v58) != 0))
          {
            v59 = *(_DWORD *)(v57 - 8);
          }
          else
          {
            v59 = 0;
          }
          v60 = v82;
          v61 = 9 * ((v82 + ~(v82 << 15)) ^ ((v82 + ~(v82 << 15)) >> 10));
          v62 = (v61 ^ (v61 >> 6)) + ~((v61 ^ (v61 >> 6)) << 11);
          v63 = (v62 ^ HIWORD(v62)) & v59;
          v64 = (int *)(v57 + 24 * v63);
          v65 = *v64;
          if (*v64 != -1)
          {
            v66 = 0;
            v67 = 1;
            do
            {
              if (v65 == v82)
              {
                WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v64 + 2), (WTF *)&v80);
                goto LABEL_86;
              }
              if (v65 == -2)
                v66 = v64;
              v63 = (v63 + v67) & v59;
              v64 = (int *)(v57 + 24 * v63);
              v65 = *v64;
              ++v67;
            }
            while (*v64 != -1);
            if (v66)
            {
              *v66 = -1;
              *((_QWORD *)v66 + 1) = 0;
              *((_QWORD *)v66 + 2) = 0;
              --*(_DWORD *)(*v58 - 16);
              v60 = v82;
              v64 = v66;
            }
          }
          *v64 = v60;
          WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v64 + 2), (WTF *)&v80);
          v68 = *v58;
          if (*v58)
            v69 = *(_DWORD *)(v68 - 12) + 1;
          else
            v69 = 1;
          *(_DWORD *)(v68 - 12) = v69;
          v70 = *v58;
          if (*v58)
            v71 = *(_DWORD *)(v70 - 12);
          else
            v71 = 0;
          v72 = (*(_DWORD *)(v70 - 16) + v71);
          v73 = *(unsigned int *)(v70 - 4);
          if (v73 > 0x400)
          {
            if (v73 > 2 * v72)
              goto LABEL_86;
          }
          else
          {
            if (3 * v73 > 4 * v72)
              goto LABEL_86;
            if (!(_DWORD)v73)
            {
              v74 = 8;
LABEL_85:
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1 + 12, v74);
LABEL_86:
              v83 = (_DWORD *)a3;
              WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebGPU::BindGroup const*>(a1 + 13, (int *)&v82, &v83, (uint64_t)v79);
              v76 = v80;
              if (v80)
              {
                v80 = 0;
                LODWORD(v81) = 0;
                WTF::fastFree(v76, v75);
              }
              return;
            }
          }
          v74 = (_DWORD)v73 << (6 * *(_DWORD *)(v70 - 12) >= (2 * v73));
          goto LABEL_85;
        }
        HIDWORD(v81) = a4;
        if ((unint64_t)a4 >> 30)
        {
          __break(0xC471u);
          goto LABEL_93;
        }
        v28 = (WTF *)WTF::fastMalloc((WTF *)(4 * a4));
        LODWORD(v81) = a4;
        v80 = v28;
        v29 = (a4 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v29 < 7)
        {
          v30 = (int *)a5;
        }
        else
        {
          v30 = (int *)a5;
          if ((unint64_t)v28 - a5 >= 0x20)
          {
            v31 = v29 + 1;
            v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
            v33 = (WTF *)((char *)v28 + v32);
            v30 = (int *)(a5 + v32);
            v34 = (__int128 *)(a5 + 16);
            v35 = (_OWORD *)((char *)v28 + 16);
            v36 = v31 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v37 = *v34;
              *(v35 - 1) = *(v34 - 1);
              *v35 = v37;
              v34 += 2;
              v35 += 2;
              v36 -= 8;
            }
            while (v36);
            v28 = v33;
            if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_40:
              WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1 + 11, (int *)&v82, (uint64_t *)&v80, (uint64_t)v79);
              v40 = v80;
              if (v80)
              {
                v80 = 0;
                LODWORD(v81) = 0;
                WTF::fastFree(v40, v39);
              }
              goto LABEL_42;
            }
          }
        }
        do
        {
          v38 = *v30++;
          *(_DWORD *)v28 = v38;
          v28 = (WTF *)((char *)v28 + 4);
        }
        while (v30 != (int *)(a5 + 4 * a4));
        goto LABEL_40;
      }
      v8 = (void *)a1[1];
    }
    a1[1] = 0;

    return;
  }
  v15 = a1[3];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::ComputePassEncoder::setBindGroup(uint32_t, const BindGroup &, uint32_t, const uint32_t *)");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](v79, v16);
  v17 = *(_QWORD *)(v15 + 32);
  v18 = 32 * *(unsigned int *)(v15 + 44);
  v19 = v17 + v18;
  while (v18)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v19 -= 32;
    v18 -= 32;
    if (!v20)
    {
      v21 = v17 + v18;
      if (!*(_BYTE *)(v21 + 16))
      {
        v22 = v79[0];
        v79[0] = 0;
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = v22;
        *(_BYTE *)(v21 + 16) = 1;
      }
      goto LABEL_18;
    }
  }
  v23 = *(_QWORD *)(v15 + 24);
  if (v23)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v23 + 16))(v23, 1, v79);
    v24 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
LABEL_18:
  v25 = (_DWORD *)v79[0];
  v79[0] = 0;
  if (v25)
  {
    if (*v25 == 2)
      WTF::StringImpl::destroy();
    else
      *v25 -= 2;
  }

}

void sub_1824414B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15)
    WTF::fastFree(a15, a2);
  _Unwind_Resume(exception_object);
}

void wgpuComputePassEncoderSetPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  WebGPU::ComputePipeline *v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v38;
  _DWORD *v39;

  v3 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v3 + 4) != 1)
  {
    v8 = *(_QWORD *)(a1 + 24);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::ComputePassEncoder::setPipeline(const ComputePipeline &)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v39, v9);
    v10 = *(_QWORD *)(v8 + 32);
    v11 = 32 * *(unsigned int *)(v8 + 44);
    v12 = v10 + v11;
    while (v11)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v12 -= 32;
      v11 -= 32;
      if (!v13)
      {
        v14 = v10 + v11;
        if (!*(_BYTE *)(v14 + 16))
        {
          v15 = v39;
          v39 = 0;
          *(_DWORD *)v14 = 1;
          *(_QWORD *)(v14 + 8) = v15;
          *(_BYTE *)(v14 + 16) = 1;
        }
        goto LABEL_17;
      }
    }
    v16 = *(_QWORD *)(v8 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 16))(v16, 1, &v39);
      v17 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
LABEL_17:
    v18 = v39;
    v39 = 0;
    if (v18)
    {
      if (*v18 == 2)
        WTF::StringImpl::destroy();
      else
        *v18 -= 2;
    }

    return;
  }
  v5 = *(void **)(a1 + 8);
  if (!v5 || !*(_QWORD *)(v3 + 16))
  {
LABEL_23:
    *(_QWORD *)(a1 + 8) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
  {
    v5 = *(void **)(a1 + 8);
    goto LABEL_23;
  }
  if (!*(_QWORD *)(a2 + 16) || (v7 = *(_QWORD *)(a2 + 24), !*(_QWORD *)(v7 + 8)) || v7 != *(_QWORD *)(a1 + 24))
  {
    WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, 0);
    return;
  }
  ++*(_DWORD *)a2;
  v19 = *(WebGPU::ComputePipeline **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = a2;
  v20 = a2;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WebGPU::ComputePipeline::~ComputePipeline(v19, v6);
      WTF::fastFree(v21, v22);
      v20 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      --*(_DWORD *)v19;
      v20 = a2;
    }
  }
  v23 = *(_DWORD **)(*(_QWORD *)(v20 + 56) + 80);
  if (v23)
  {
    v24 = *(v23 - 1);
    v25 = &v23[6 * v24];
    if (*(v23 - 3))
    {
      v26 = v23;
      if ((_DWORD)v24)
      {
        v27 = 24 * v24;
        v26 = v23;
        while (*v26 >= 0xFFFFFFFE)
        {
          v26 += 6;
          v27 -= 24;
          if (!v27)
          {
            v26 = v25;
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
    v26 = &v23[6 * v24];
  }
  else
  {
    v26 = 0;
    LODWORD(v24) = 0;
  }
  v25 = &v23[6 * v24];
LABEL_38:
  if (v23)
    v23 += 6 * *(v23 - 1);
  if (v23 == v26)
  {
    LODWORD(v28) = 0;
LABEL_62:
    *(_DWORD *)(a1 + 68) = v28;
    v38 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v38;
    return;
  }
  v28 = 0;
  do
  {
    v29 = v25;
    if (v26 + 6 != v25)
    {
      v29 = v26 + 6;
      while (*v29 >= 0xFFFFFFFE)
      {
        v29 += 6;
        if (v29 == v25)
        {
          v29 = v25;
          break;
        }
      }
    }
    v28 += v26[5];
    v26 = v29;
  }
  while (v29 != v23);
  v30 = *(unsigned int *)(a1 + 68);
  if (v28 <= v30)
    goto LABEL_62;
  v31 = *(unsigned int *)(a1 + 64);
  if (v28 <= v31)
    goto LABEL_62;
  v32 = v31 + (v31 >> 2);
  if (v32 >= 0x10)
    v33 = v32 + 1;
  else
    v33 = 16;
  if (v33 <= v28)
    v34 = v28;
  else
    v34 = v33;
  if (!(v34 >> 30))
  {
    v35 = *(void **)(a1 + 56);
    v36 = (void *)WTF::fastMalloc((WTF *)(4 * v34));
    *(_DWORD *)(a1 + 64) = v34;
    *(_QWORD *)(a1 + 56) = v36;
    memcpy(v36, v35, 4 * v30);
    if (v35)
    {
      if (*(void **)(a1 + 56) == v35)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
      }
      WTF::fastFree((WTF *)v35, v37);
    }
    goto LABEL_62;
  }
  __break(0xC471u);
}

void sub_1824418D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuComputePassEncoderSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 8), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_1824419C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_OWORD *WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WebGPU::EntryUsageData>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16 == -1)
  {
LABEL_12:
    *v16 = v11;
    v16[1] = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v20 = *a2;
      if (*a2)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v20 = *a2;
      if (*a2)
      {
LABEL_14:
        v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v21 = *(unsigned int *)(v20 - 16);
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(_QWORD *)v7 = v16;
        *((_QWORD *)v7 + 1) = v20 + 16 * v22;
        *((_BYTE *)v7 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v22)
      {
        result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, v16);
        v16 = result;
        v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      v16 = result;
      v20 = *a2;
      if (!*a2)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21)
      goto LABEL_26;
    goto LABEL_24;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -2)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (_QWORD *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (*v16 == -1)
    {
      if (v18)
      {
        *v18 = xmmword_18260EFA0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v8 + 16 * v23;
  *((_BYTE *)v7 + 16) = 0;
  v16[1] = *a4;
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400)
      goto LABEL_8;
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3)
LABEL_11:
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = WTF::fastMalloc((WTF *)(16 * v8 + 16));
  v10 = (_OWORD *)(v9 + 48);
  v11 = v8 & 0xFFFFFFFC;
  do
  {
    *(v10 - 2) = xmmword_18260EFA0;
    *(v10 - 1) = xmmword_18260EFA0;
    *v10 = xmmword_18260EFA0;
    v10[1] = xmmword_18260EFA0;
    v10 += 4;
    v11 -= 4;
  }
  while (v11);
  v12 = v8 - (v8 & 0xFFFFFFFC);
  if (v12)
  {
    v13 = (_OWORD *)(((16 * v8) & 0xFFFFFFFC0) + v9 + 16);
    do
    {
      *v13++ = xmmword_18260EFA0;
      --v12;
    }
    while (v12);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v14 = (_QWORD *)*a2;
  if (!*a2)
  {
    v17 = 0;
    v16 = 0;
    goto LABEL_29;
  }
  v15 = *((unsigned int *)v14 - 1);
  v16 = &v14[2 * v15];
  if (*((_DWORD *)v14 - 3))
  {
    v17 = (_QWORD *)*a2;
    if ((_DWORD)v15)
    {
      v18 = 16 * v15;
      v17 = (_QWORD *)*a2;
      while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v17 += 2;
        v18 -= 16;
        if (!v18)
        {
          v17 = v16;
          if (v14)
            goto LABEL_30;
          goto LABEL_31;
        }
      }
    }
LABEL_29:
    if (!v14)
      goto LABEL_31;
    goto LABEL_30;
  }
  v17 = &v14[2 * v15];
  v16 = v17;
  if (v14)
LABEL_30:
    v14 += 2 * *((unsigned int *)v14 - 1);
LABEL_31:
  while (v17 != v14)
  {
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 8);
    else
      v20 = 0;
    v21 = *v17 + ~(*v17 << 32);
    v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
    v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
    v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27)));
    v25 = 1;
    do
    {
      v26 = v24;
      v27 = *(_QWORD *)(v19 + 16 * v24);
      v24 = (v24 + v25++) & v20;
    }
    while (v27 != -1);
    *(_OWORD *)(v19 + 16 * v26) = *(_OWORD *)v17;
    v28 = v17 + 2;
    v17 = v16;
    if (v28 != v16)
    {
      v17 = v28;
      while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v17 += 2;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource}*,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WebGPU::BindGroupId,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>> &)::$_0,WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>>)::$_1,WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *a2;
  if (!*a2)
    return 1;
  v4 = *a1;
  v5 = **(_DWORD **)v4;
  if ((v5 & 4) != 0)
  {
    *(_QWORD *)(v3 + 232) = 0;
    *(_QWORD *)(v3 + 240) = 0;
    *(_QWORD *)(v3 + 248) = 0;
    v3 = *a2;
    v5 = **(_DWORD **)v4;
  }
  return WebGPU::addResourceToActiveResources(v3, *(void **)(v3 + 16), v5, *(uint64_t **)(v4 + 8), **(_DWORD **)(v4 + 16), 0, 0, 2u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource}*,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WebGPU::BindGroupId,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>> &)::$_0,WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>>)::$_1,WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t active;
  uint64_t v12;
  id v13;

  v2 = *a2;
  if (!*a2)
    return 1;
  v3 = **(_DWORD **)(*(_QWORD *)a1 + 24);
  v4 = **(_DWORD **)(*(_QWORD *)a1 + 32);
  v5 = *(uint64_t **)(*(_QWORD *)a1 + 40);
  v6 = *(_DWORD *)(v2 + 64);
  v7 = *(_QWORD *)(v2 + 96);
  v8 = *(id *)(v7 + 8);
  v9 = *(_DWORD *)(v2 + 48);
  v10 = *(unsigned int *)(v2 + 56);
  if (v6)
  {
    active = WebGPU::addResourceToActiveResources(v7, v8, v3, v5, v4, v9, v10, v6);
  }
  else if (WebGPU::addResourceToActiveResources(v7, v8, v3, v5, v4, v9, v10, 2u))
  {
    v12 = *(_QWORD *)(v2 + 96);
    v13 = *(id *)(v12 + 8);
    active = WebGPU::addResourceToActiveResources(v12, v13, v3, v5, v4, *(_DWORD *)(v2 + 48), *(unsigned int *)(v2 + 56), 1u);

  }
  else
  {
    active = 0;
  }

  return active;
}

void sub_182442010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182442024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182442034(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource}*,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WebGPU::BindGroupId,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>> &)::$_0,WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>>)::$_1,WebGPU::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::HashMap<void const*,WebGPU::BindGroupId<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,WebGPU::EntryUsageData<void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><void const>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long><WTF::HashTableTraits>,WTF::HashTraits<void const*>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t a1, uint64_t *a2)
{
  return WebGPU::addResourceToActiveResources(*a2, **(void ***)(*(_QWORD *)a1 + 48), **(_DWORD **)(*(_QWORD *)a1 + 56), *(uint64_t **)(*(_QWORD *)a1 + 64), **(_DWORD **)(*(_QWORD *)a1 + 72), 0, 0, 2u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,WebGPU::CommandEncoder &)::$_0,WebGPU::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,WebGPU::CommandEncoder &)::$_1,WebGPU::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,WebGPU::CommandEncoder &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(WebGPU::CommandEncoder ***a1, WebGPU::Buffer **a2)
{
  if (*a2)
    WebGPU::Buffer::setCommandEncoder(*a2, **a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,WebGPU::CommandEncoder &)::$_0,WebGPU::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,WebGPU::CommandEncoder &)::$_1,WebGPU::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,WebGPU::CommandEncoder &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebGPU::CommandBuffer *v6;
  _BYTE v7[24];

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v2 + 104, v3, (uint64_t)v7);
    v4 = *(_QWORD *)(v2 + 96);
    if (*(_BYTE *)(v4 + 96))
    {
      if (!*(_BYTE *)(v4 + 97))
      {
        *(_BYTE *)(v3 + 76) = 1;
        v5 = *(_QWORD *)(v3 + 56);
        if (v5)
        {
          v6 = *(WebGPU::CommandBuffer **)(v5 + 8);
          if (v6)
            WebGPU::CommandBuffer::makeInvalid(v6, *(NSString **)(v3 + 64));
        }
      }
    }
  }
}

uint64_t *WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = v8 + 24 * v14;
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    result = *(uint64_t **)(v15 + 8);
    *(_DWORD *)v15 = v11;
    if (result)
    {
      *(_QWORD *)(v15 + 8) = 0;
      *(_DWORD *)(v15 + 16) = 0;
      result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
    }
    v17 = (uint64_t *)v15;
    goto LABEL_15;
  }
  v17 = 0;
  v18 = 1;
  do
  {
    if (v16 == v11)
    {
      if ((v9 & 1) != 0)
      {
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v8;
        *(_BYTE *)(a4 + 16) = 0;
        result = *(uint64_t **)(v15 + 8);
        if (!result)
          goto LABEL_33;
      }
      else
      {
        v23 = v8 + 24 * *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v23;
        *(_BYTE *)(a4 + 16) = 0;
        result = *(uint64_t **)(v15 + 8);
        if (!result)
        {
LABEL_33:
          v24 = *a3;
          *a3 = 0;
          *(_QWORD *)(v15 + 8) = v24;
          LODWORD(v24) = *((_DWORD *)a3 + 2);
          *((_DWORD *)a3 + 2) = 0;
          *(_DWORD *)(v15 + 16) = v24;
          LODWORD(v24) = *((_DWORD *)a3 + 3);
          *((_DWORD *)a3 + 3) = 0;
          *(_DWORD *)(v15 + 20) = v24;
          return result;
        }
      }
      *(_QWORD *)(v15 + 8) = 0;
      *(_DWORD *)(v15 + 16) = 0;
      result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
      goto LABEL_33;
    }
    if (v16 == -2)
      v17 = (uint64_t *)v15;
    v14 = (v14 + v18) & v10;
    v15 = v8 + 24 * v14;
    v16 = *(_DWORD *)v15;
    ++v18;
  }
  while (*(_DWORD *)v15 != -1);
  if (!v17)
    goto LABEL_12;
  *(_DWORD *)v17 = -1;
  v17[1] = 0;
  v17[2] = 0;
  --*(_DWORD *)(*v6 - 16);
  *(_DWORD *)v17 = *a2;
LABEL_15:
  v19 = *a3;
  *a3 = 0;
  v17[1] = v19;
  LODWORD(v19) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)v17 + 4) = v19;
  LODWORD(v19) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)v17 + 5) = v19;
  if (*v6)
  {
    ++*(_DWORD *)(*v6 - 12);
    v20 = *v6;
    if (*v6)
      goto LABEL_17;
LABEL_26:
    v21 = *(unsigned int *)(v20 - 16);
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 > 0x400)
      goto LABEL_27;
LABEL_18:
    if (3 * v22 > 4 * v21)
      goto LABEL_30;
    if (!(_DWORD)v22)
    {
      result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, 8u, (int *)v17);
      v17 = result;
      v20 = *v6;
      if (!*v6)
        goto LABEL_21;
LABEL_29:
      LODWORD(v22) = *(_DWORD *)(v20 - 4);
      goto LABEL_30;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v20 = *v6;
    if (!*v6)
      goto LABEL_26;
LABEL_17:
    v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
      goto LABEL_18;
LABEL_27:
    if (v22 > 2 * v21)
      goto LABEL_30;
  }
  result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), (int *)v17);
  v17 = result;
  v20 = *v6;
  if (*v6)
    goto LABEL_29;
LABEL_21:
  LODWORD(v22) = 0;
LABEL_30:
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v20 + 24 * v22;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  _QWORD *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  WTF *v29;
  _QWORD *v30;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v9 = v7 + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v9 = v7 + 16;
    if (!a2)
      goto LABEL_7;
  }
  v10 = a2;
  v11 = (_QWORD *)(v7 + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *v11 = 0;
    v11[1] = 0;
    v11 += 3;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    do
    {
      v15 = (int *)(v4 + 24 * v12);
      v16 = *v15;
      if (*v15 != -2)
      {
        if (v16 == -1)
        {
          v17 = v4 + 24 * v12;
          v20 = *(WTF **)(v17 + 8);
          v19 = (_QWORD *)(v17 + 8);
          v18 = v20;
          if (v20)
          {
            *v19 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            WTF::fastFree(v18, v8);
          }
        }
        else
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = 0;
          v24 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          v25 = ((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) ^ (((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) >> 16);
          do
          {
            v26 = v25 & v22;
            v27 = (_DWORD *)(v21 + 24 * (v25 & v22));
            v25 = ++v23 + (v25 & v22);
          }
          while (*v27 != -1);
          v28 = v21 + 24 * v26;
          v31 = *(WTF **)(v28 + 8);
          v30 = (_QWORD *)(v28 + 8);
          v29 = v31;
          if (v31)
          {
            *v30 = 0;
            *(_DWORD *)(v21 + 24 * v26 + 16) = 0;
            WTF::fastFree(v29, v8);
            v16 = *v15;
          }
          *v27 = v16;
          v32 = v4 + 24 * v12;
          *v30 = 0;
          v30[1] = 0;
          v34 = *(_DWORD *)(v32 + 16);
          v33 = (_DWORD *)(v32 + 16);
          v35 = *((_QWORD *)v33 - 1);
          *((_QWORD *)v33 - 1) = 0;
          *v30 = v35;
          *v33 = 0;
          v36 = v21 + 24 * v26;
          *(_DWORD *)(v36 + 16) = v34;
          v37 = v33[1];
          v33[1] = 0;
          *(_DWORD *)(v36 + 20) = v37;
          v38 = (WTF *)*((_QWORD *)v33 - 1);
          if (v38)
          {
            *((_QWORD *)v33 - 1) = 0;
            *v33 = 0;
            WTF::fastFree(v38, v8);
          }
          if (v15 == a3)
            v13 = v21 + 24 * v26;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

WTF *WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
    v6 = *(char **)result;
    if (v5)
    {
LABEL_4:
      memmove(v6, *(const void **)a2, 8 * v5);
      v7 = *((unsigned int *)v2 + 3);
      v6 = *(char **)v2;
LABEL_19:
      memcpy(&v6[8 * v7], (const void *)(*(_QWORD *)a2 + 8 * v7), *(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 3) - (*(_QWORD *)a2 + 8 * v7));
      *((_DWORD *)v2 + 3) = *((_DWORD *)a2 + 3);
      return v2;
    }
LABEL_18:
    v7 = 0;
    goto LABEL_19;
  }
  v8 = *((_DWORD *)result + 2);
  if (v5 <= v8)
    goto LABEL_17;
  if (v8)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v8 = *((_DWORD *)v2 + 2);
    }
  }
  v9 = *((unsigned int *)a2 + 3);
  if (v8 >= v9)
  {
LABEL_17:
    v5 = *((_DWORD *)v2 + 3);
    v6 = *(char **)v2;
    if (v5)
      goto LABEL_4;
    goto LABEL_18;
  }
  if (!(v9 >> 29))
  {
    v10 = *(char **)v2;
    v11 = *((unsigned int *)v2 + 3);
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *((_DWORD *)v2 + 2) = v9;
    *(_QWORD *)v2 = v12;
    memcpy(v12, v10, 8 * v11);
    if (v10)
    {
      if (*(char **)v2 == v10)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree((WTF *)v10, v13);
    }
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  _QWORD *v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  WTF *v27;
  _QWORD *v28;
  WTF *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF *v36;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
    result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v8 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v8 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  v9 = a2;
  v10 = (_QWORD *)(result + 24);
  do
  {
    *((_DWORD *)v10 - 2) = -1;
    *v10 = 0;
    v10[1] = 0;
    v10 += 3;
    --v9;
  }
  while (v9);
LABEL_7:
  *a1 = v8;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v11 = 0;
    v12 = v4;
    do
    {
      v13 = (int *)(v3 + 24 * v11);
      v14 = *v13;
      if (*v13 != -2)
      {
        if (v14 == -1)
        {
          v15 = v3 + 24 * v11;
          v18 = *(WTF **)(v15 + 8);
          v17 = (_QWORD *)(v15 + 8);
          v16 = v18;
          if (v18)
          {
            *v17 = 0;
            *(_DWORD *)(v3 + 24 * v11 + 16) = 0;
            WTF::fastFree(v16, v7);
          }
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = 0;
          v22 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
          v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
          do
          {
            v24 = v23 & v20;
            v25 = (_DWORD *)(v19 + 24 * (v23 & v20));
            v23 = ++v21 + (v23 & v20);
          }
          while (*v25 != -1);
          v26 = v19 + 24 * v24;
          v29 = *(WTF **)(v26 + 8);
          v28 = (_QWORD *)(v26 + 8);
          v27 = v29;
          if (v29)
          {
            *v28 = 0;
            *(_DWORD *)(v19 + 24 * v24 + 16) = 0;
            WTF::fastFree(v27, v7);
            v14 = *v13;
          }
          *v25 = v14;
          v30 = v3 + 24 * v11;
          *v28 = 0;
          v28[1] = 0;
          v32 = *(_DWORD *)(v30 + 16);
          v31 = (_DWORD *)(v30 + 16);
          v33 = *((_QWORD *)v31 - 1);
          *((_QWORD *)v31 - 1) = 0;
          *v28 = v33;
          *v31 = 0;
          v34 = v19 + 24 * v24;
          *(_DWORD *)(v34 + 16) = v32;
          v35 = v31[1];
          v31[1] = 0;
          *(_DWORD *)(v34 + 20) = v35;
          v36 = (WTF *)*((_QWORD *)v31 - 1);
          if (v36)
          {
            *((_QWORD *)v31 - 1) = 0;
            *v31 = 0;
            WTF::fastFree(v36, v7);
          }
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v3)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

WebGPU::BindGroup *WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebGPU::BindGroup const*>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WebGPU::BindGroup *v15;
  int v16;
  WebGPU::BindGroup *v17;
  int v18;
  _DWORD *v19;
  WebGPU::BindGroup *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  _DWORD *v28;
  WTF *v29;
  void *v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (WebGPU::BindGroup *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    *(_DWORD *)v15 = v11;
    v19 = *a3;
    if (*a3)
      ++*v19;
    result = (WebGPU::BindGroup *)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v19;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebGPU::BindGroup::~BindGroup(result, a2);
        result = (WebGPU::BindGroup *)WTF::fastFree(v26, v27);
        v21 = *a1;
        if (*a1)
        {
LABEL_18:
          ++*(_DWORD *)(v21 - 12);
          v22 = *a1;
          if (*a1)
            goto LABEL_19;
          goto LABEL_28;
        }
LABEL_27:
        *(_DWORD *)(v21 - 12) = 1;
        v22 = *a1;
        if (*a1)
        {
LABEL_19:
          v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
          v24 = *(unsigned int *)(v22 - 4);
          if (v24 <= 0x400)
            goto LABEL_20;
          goto LABEL_29;
        }
LABEL_28:
        v23 = *(unsigned int *)(v22 - 16);
        v24 = *(unsigned int *)(v22 - 4);
        if (v24 <= 0x400)
        {
LABEL_20:
          if (3 * v24 > 4 * v23)
          {
LABEL_32:
            *(_QWORD *)a4 = v15;
            *(_QWORD *)(a4 + 8) = v22 + 16 * v24;
            *(_BYTE *)(a4 + 16) = 1;
            return result;
          }
          if (!(_DWORD)v24)
          {
            result = (WebGPU::BindGroup *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, (int *)v15);
            v15 = result;
            v22 = *a1;
            if (!*a1)
            {
LABEL_23:
              v24 = 0;
              goto LABEL_32;
            }
LABEL_31:
            v24 = *(unsigned int *)(v22 - 4);
            goto LABEL_32;
          }
LABEL_30:
          result = (WebGPU::BindGroup *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, (_DWORD)v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), (int *)v15);
          v15 = result;
          v22 = *a1;
          if (!*a1)
            goto LABEL_23;
          goto LABEL_31;
        }
LABEL_29:
        if (v24 > 2 * v23)
          goto LABEL_32;
        goto LABEL_30;
      }
      --*(_DWORD *)result;
    }
    v21 = *a1;
    if (*a1)
      goto LABEL_18;
    goto LABEL_27;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v11)
  {
    if (v16 == -2)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (WebGPU::BindGroup *)(v8 + 16 * v14);
    v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == -1)
    {
      if (v17)
      {
        *(_DWORD *)v17 = -1;
        *((_QWORD *)v17 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = *a2;
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v25 = 0;
  else
    v25 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v25;
  *(_BYTE *)(a4 + 16) = 0;
  v28 = *a3;
  if (*a3)
    ++*v28;
  result = (WebGPU::BindGroup *)*((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v28;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::BindGroup::~BindGroup(result, a2);
      return (WebGPU::BindGroup *)WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int *v21;
  int v22;
  uint64_t v23;
  WebGPU::BindGroup *v24;
  uint64_t v25;
  int v26;
  WTF *v27;
  void *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WebGPU::BindGroup *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WebGPU::BindGroup *v39;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  if (a2 == 1)
  {
    v12 = 0;
LABEL_10:
    v15 = a2 - v12;
    v16 = (_QWORD *)(v9 + 16 * v12 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      *v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_12;
  }
  v12 = a2 & 0xFFFFFFFE;
  v13 = (_QWORD *)(v9 + 40);
  v14 = v12;
  do
  {
    *((_DWORD *)v13 - 6) = -1;
    *((_DWORD *)v13 - 2) = -1;
    *(v13 - 2) = 0;
    *v13 = 0;
    v13 += 4;
    v14 -= 2;
  }
  while (v14);
  if (v12 != a2)
    goto LABEL_10;
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v21 = (int *)(v6 + 16 * v17);
      v22 = *v21;
      if (*v21 != -2)
      {
        if (v22 == -1)
        {
          v23 = v6 + 16 * v17;
          v24 = *(WebGPU::BindGroup **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v24, v10);
              WTF::fastFree(v27, v28);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
        }
        else
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v29 = 0;
          v30 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
          v31 = ((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) ^ (((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) >> 16);
          do
          {
            v32 = v31 & v26;
            v31 = ++v29 + v32;
          }
          while (*(_DWORD *)(v25 + 16 * v32) != -1);
          v33 = v25 + 16 * v32;
          v34 = *(WebGPU::BindGroup **)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v34, v10);
              WTF::fastFree(v35, v36);
            }
            else
            {
              --*(_DWORD *)v34;
            }
          }
          *(_DWORD *)v33 = *v21;
          v37 = v6 + 16 * v17;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          *(_QWORD *)(v33 + 8) = v38;
          v39 = *(WebGPU::BindGroup **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v39, v10);
              WTF::fastFree(v19, v20);
            }
            else
            {
              --*(_DWORD *)v39;
            }
          }
          if (v21 == a3)
            v18 = v33;
        }
      }
      ++v17;
    }
    while (v17 != v7);
  }
  else
  {
    v18 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v18;
}

_DWORD *WebGPU::Device::createComputePipeline@<X0>(WebGPU::Device *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, WebGPU::ComputePipeline **a4@<X8>)
{
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  const char *v11;
  void *v12;
  __CFString *v13;
  const WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  __CFString *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  const WTF::StringImpl *v26;
  void *v27;
  void *v28;
  int v29;
  int v30;
  NSString *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  WebGPU::ComputePipeline *v36;
  void *v37;
  void *v38;
  void *v39;
  unsigned __int8 ***v40;
  void *v41;
  void *v42;
  void *v43;
  WebGPU::ComputePipeline *v44;
  void *v45;
  void *v46;
  void *v47;
  __int128 v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  WebGPU::ComputePipeline *v52;
  WebGPU::ComputePipeline *v53[2];
  unsigned __int8 ***v54;
  void **v55;
  uint64_t v56;
  __int128 v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  unsigned int *v69;
  char v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  const WTF::StringImpl *v79;
  _DWORD *v80;

  if (*(_QWORD *)a2 | *(_QWORD *)(a2 + 24))
    return (_DWORD *)WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
  v8 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)(v8 + 40) || *(WebGPU::Device **)(v8 + 72) != a1)
    return (_DWORD *)WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
  v10 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 8))
  {
    strlen(*(const char **)(a2 + 8));
    WTF::String::fromUTF8();
    v11 = *(const char **)(a2 + 40);
    if (v11)
      goto LABEL_7;
LABEL_10:
    v14 = *(const WTF::StringImpl **)(v8 + 136);
    if (v14)
      *(_DWORD *)v14 += 2;
    v78 = 0;
    v79 = v14;
    v12 = (void *)*((_QWORD *)a1 + 1);
    if (v80)
      goto LABEL_8;
    goto LABEL_13;
  }
  WTF::String::fromUTF8();
  v11 = *(const char **)(a2 + 40);
  if (!v11)
    goto LABEL_10;
LABEL_7:
  strlen(v11);
  WTF::String::fromUTF8();
  v78 = 0;
  v12 = (void *)*((_QWORD *)a1 + 1);
  if (v80)
  {
LABEL_8:
    v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    goto LABEL_14;
  }
LABEL_13:
  v13 = &stru_1E0FD9588;
LABEL_14:
  v15 = *(_DWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v66 = 0;
  WebGPU::createLibrary(v12, v8, v10, &v79, v13, v15, v16, &v78, &v67, &v66);
  v17 = v66;

  if (v77 && *(WebGPU::Device **)(v10 + 88) == a1)
  {
    v19 = v67;
    if (v74 == 2)
    {
      v64 = v72;
      v65 = v73;
      WTF::String::operator NSString *(&v80);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      WebGPU::createFunction(v19, (uint64_t)&v68, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v28 || objc_msgSend(v28, "functionType") != 3)
        goto LABEL_56;
      v29 = v71;
      if (v71)
        v29 = *(_DWORD *)(v71 - 12);
      v30 = v76;
      if (v76)
        v30 = *(_DWORD *)(v76 - 12);
      if (v29 == v30)
      {
        v59 = v64;
        v60 = v65;
        WebGPU::metalSize<WGSL::Reflection::WorkgroupSize>((uint64_t)&v61, (uint64_t *)&v59, &v76);
        if (v63)
        {
          v57 = v61;
          v58 = v62;
          if (v75 <= *((unsigned int *)a1 + 48)
            && (_QWORD)v57
            && (unint64_t)v57 <= *((unsigned int *)a1 + 50)
            && *((_QWORD *)&v57 + 1)
            && *((_QWORD *)&v57 + 1) <= (unint64_t)*((unsigned int *)a1 + 51)
            && v58
            && v58 <= *((unsigned int *)a1 + 52)
            && *((_QWORD *)&v57 + 1) * (_QWORD)v57 * v58 <= *((unsigned int *)a1 + 49))
          {
            if (*(_BYTE *)(v10 + 97) && v70)
            {
              v55 = 0;
              v56 = 0;
              WebGPU::Device::addPipelineLayouts((uint64_t)a1, (uint64_t)&v55, &v69);
              v31 = (NSString *)objc_claimAutoreleasedReturnValue();
              if (v31)
              {
                WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, v31);

              }
              else
              {
                WebGPU::Device::generatePipelineLayout((unsigned __int8 **)a1, &v55, (WebGPU::PipelineLayout *)&v54);
                v40 = v54;
                if (*((_BYTE *)v54 + 96))
                {
                  v41 = (void *)*((_QWORD *)a1 + 1);
                  WTF::String::operator NSString *(&v80);
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  WebGPU::createComputePipelineState(v41, v28, (uint64_t)v40, &v57, v42);
                  v43 = (void *)objc_claimAutoreleasedReturnValue();

                  v50 = v57;
                  v51 = v58;
                  WebGPU::ComputePipeline::create((uint64_t *)&v52, v43, (uint64_t *)&v54, &v50, &v78, (unsigned __int8 **)a1);
                  v44 = v52;
                  v52 = 0;
                  v53[0] = 0;
                  v53[1] = 0;
                  *a4 = v44;
                  a4[1] = 0;
                  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(v53, v45);
                  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(&v52, v46);

                }
                else
                {
                  WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
                }
                WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref(&v54, v47);
              }
              WTF::Vector<WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v32);
            }
            else
            {
              v33 = (void *)*((_QWORD *)a1 + 1);
              WTF::String::operator NSString *(&v80);
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              WebGPU::createComputePipelineState(v33, v28, v10, &v57, v34);
              v35 = (void *)objc_claimAutoreleasedReturnValue();

              ++*(_DWORD *)v10;
              v54 = (unsigned __int8 ***)v10;
              v48 = v57;
              v49 = v58;
              WebGPU::ComputePipeline::create((uint64_t *)v53, v35, (uint64_t *)&v54, &v48, &v78, (unsigned __int8 **)a1);
              v36 = v53[0];
              v53[0] = 0;
              v55 = 0;
              v56 = 0;
              *a4 = v36;
              a4[1] = 0;
              std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair((WebGPU::ComputePipeline **)&v55, v37);
              std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(v53, v38);
              WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref(&v54, v39);

            }
          }
          else
          {
            WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
          }
        }
        else
        {
          WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, CFSTR("Failed to evaluate overrides"));
        }
      }
      else
      {
LABEL_56:
        WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
      }

    }
    else
    {
      WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
    }
  }
  else
  {
    objc_msgSend(v17, "localizedDescription");
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (id)v18;
    if (v18)
      v20 = (__CFString *)v18;
    else
      v20 = CFSTR("Compute library failed creation");
    WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, &v20->isa);
  }

  std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v67, v21);
  v23 = v78;
  if (v78)
  {
    v24 = *(unsigned int *)(v78 - 4);
    if ((_DWORD)v24)
    {
      v25 = (_QWORD *)(v78 + 8);
      do
      {
        if (*((_DWORD *)v25 - 2) != -2 && *v25)
          WTF::fastFree((WTF *)(*v25 - 16), v22);
        v25 += 2;
        --v24;
      }
      while (v24);
    }
    WTF::fastFree((WTF *)(v23 - 16), v22);
  }

  v26 = v79;
  v79 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v80;
  v80 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

void sub_182443410(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;
  void *v21;
  void *v22;
  _DWORD *v23;
  _DWORD *v24;
  unsigned __int8 ***v25;
  va_list va;
  va_list va1;

  va_start(va1, a15);
  va_start(va, a15);
  v25 = va_arg(va1, unsigned __int8 ***);
  WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref((unsigned __int8 ****)va, a2);
  WTF::Vector<WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v20);

  std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100](v18 - 216, v21);
  WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v18 - 104), v22);
  v23 = *(_DWORD **)(v18 - 96);
  *(_QWORD *)(v18 - 96) = 0;
  if (v23)
  {
    if (*v23 == 2)
      WTF::StringImpl::destroy();
    else
      *v23 -= 2;
  }
  v24 = *(_DWORD **)(v18 - 88);
  *(_QWORD *)(v18 - 88) = 0;
  if (v24)
  {
    if (*v24 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *v24 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebGPU::returnInvalidComputePipeline(WebGPU *this, WebGPU::Device *a2, char a3, NSString *a4)
{
  NSString *v7;
  NSString *v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  WebGPU::PipelineLayout *v23;
  uint64_t v24;
  uint64_t result;
  _DWORD *v26;

  v7 = a4;
  v8 = v7;
  if ((a3 & 1) == 0)
  {
    if (v7)
      v9 = (const __CFString *)v7;
    else
      v9 = CFSTR("createComputePipeline failed");
    MEMORY[0x186DAB230](&v26, v9);
    v10 = *((_QWORD *)a2 + 4);
    v11 = 32 * *((unsigned int *)a2 + 11);
    v12 = v10 + v11;
    while (v11)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v12 -= 32;
      v11 -= 32;
      if (!v13)
      {
        v14 = v10 + v11;
        if (!*(_BYTE *)(v14 + 16))
        {
          v15 = v26;
          v26 = 0;
          *(_DWORD *)v14 = 1;
          *(_QWORD *)(v14 + 8) = v15;
          *(_BYTE *)(v14 + 16) = 1;
        }
        goto LABEL_13;
      }
    }
    v16 = *((_QWORD *)a2 + 3);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 16))(v16, 1, &v26);
      v17 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
LABEL_13:
    v18 = v26;
    v26 = 0;
    if (v18)
    {
      if (*v18 == 2)
        WTF::StringImpl::destroy();
      else
        *v18 -= 2;
    }
  }
  v19 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v20 = *(_QWORD *)a2;
  if (__ldaxr(*(unsigned __int8 **)a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_21;
  }
  MEMORY[0x186DAB1AC](v20);
LABEL_21:
  ++*(_QWORD *)(v20 + 8);
  v22 = __ldxr((unsigned __int8 *)v20);
  if (v22 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
      goto LABEL_26;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
LABEL_26:
  *(_QWORD *)(v19 + 24) = a2;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  v23 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
  WebGPU::PipelineLayout::PipelineLayout(v23, (unsigned __int8 **)a2);
  *(_QWORD *)(v19 + 56) = v23;
  *(_QWORD *)(v19 + 64) = 0;
  v24 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v24 + 16) = -1;
  result = v24 + 16;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = -1;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = -1;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = -1;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)(result + 96) = -1;
  *(_QWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = -1;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(v19 + 64) = result;
  *(_DWORD *)(result - 4) = 8;
  *(_DWORD *)(*(_QWORD *)(v19 + 64) - 8) = 7;
  *(_DWORD *)(*(_QWORD *)(v19 + 64) - 16) = 0;
  *(_DWORD *)(*(_QWORD *)(v19 + 64) - 12) = 0;
  *(_QWORD *)this = v19;
  *((_QWORD *)this + 1) = v8;
  return result;
}

void sub_182443774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t WebGPU::metalSize<WGSL::Reflection::WorkgroupSize>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15[4];
  int v16;
  unsigned __int8 v17;
  unsigned int v18[4];
  int v19;
  unsigned __int8 v20;
  unsigned int v21[4];
  int v22;
  char v23;
  char v24;

  WGSL::evaluate(*a2, a3, (uint64_t)v21);
  v6 = a2[1];
  if (v6)
  {
    WGSL::evaluate(v6, a3, (uint64_t)v18);
    result = a2[2];
    if (result)
      goto LABEL_3;
LABEL_6:
    v8 = 1;
    v15[0] = 1;
    v16 = 3;
    v17 = 1;
    v9 = v20;
    if (!v23)
      goto LABEL_14;
    goto LABEL_7;
  }
  v18[0] = 1;
  v19 = 3;
  v20 = 1;
  result = a2[2];
  if (!result)
    goto LABEL_6;
LABEL_3:
  result = WGSL::evaluate(result, a3, (uint64_t)v15);
  v8 = v17;
  v9 = v20;
  if (!v23)
    goto LABEL_14;
LABEL_7:
  if (v9 && v8)
  {
    switch(v22)
    {
      case 5:
        v10 = *(_QWORD *)v21;
        v11 = v19;
        if (v19 == 5)
          goto LABEL_23;
        break;
      case 4:
        v10 = v21[0];
        v11 = v19;
        if (v19 == 5)
          goto LABEL_23;
        break;
      case 3:
        v10 = (int)v21[0];
        v11 = v19;
        if (v19 == 5)
        {
LABEL_23:
          v13 = *(_QWORD *)v18;
          v12 = v16;
          if (v16 != 5)
            goto LABEL_24;
LABEL_28:
          v14 = *(_QWORD *)v15;
          goto LABEL_30;
        }
        break;
      default:
        goto LABEL_41;
    }
    if (v11 == 4)
    {
      v13 = v18[0];
      v12 = v16;
      if (v16 == 5)
        goto LABEL_28;
    }
    else
    {
      if (v11 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x182443ABCLL);
      }
      v13 = (int)v18[0];
      v12 = v16;
      if (v16 == 5)
        goto LABEL_28;
    }
LABEL_24:
    if (v12 == 4)
    {
      v14 = v15[0];
      goto LABEL_30;
    }
    if (v12 == 3)
    {
      v14 = (int)v15[0];
LABEL_30:
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = v14;
      *(_BYTE *)(a1 + 24) = 1;
LABEL_31:
      result = ((uint64_t (*)(char *, unsigned int *))off_1E0FD16F0[v12])(&v24, v15);
      v9 = v20;
      goto LABEL_32;
    }
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x182443A9CLL);
  }
LABEL_14:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (v8)
  {
    v12 = v16;
    if (v16 != -1)
      goto LABEL_31;
  }
LABEL_32:
  if (v9 && v19 != -1)
    result = ((uint64_t (*)(unsigned int *, unsigned int *))off_1E0FD16F0[v19])(v15, v18);
  if (v23)
  {
    if (v22 != -1)
      return ((uint64_t (*)(unsigned int *, unsigned int *))off_1E0FD16F0[v22])(v18, v21);
  }
  return result;
}

void sub_182443AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, int a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,int a25,char a26)
{
  if (a18 && a16 != -1)
    ((void (*)(char *, char *))off_1E0FD16F0[a16])(&a10, &a14);
  if (a26)
  {
    if (a24 != -1)
      ((void (*)(char *, __int16 *))off_1E0FD16F0[a24])(&a14, &a20);
  }
  _Unwind_Resume(exception_object);
}

id WebGPU::createComputePipelineState(void *a1, void *a2, uint64_t a3, _QWORD *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v17;
  id v18;
  id v20;

  v9 = a1;
  v10 = a2;
  v11 = a5;
  v12 = (void *)objc_opt_new();
  objc_msgSend(v12, "setComputeFunction:", v10);
  objc_msgSend(v12, "setMaxTotalThreadsPerThreadgroup:", a4[1] * *a4 * a4[2]);
  if (*(_BYTE *)(a3 + 32) && *(_DWORD *)(a3 + 28))
  {
    v13 = 1;
    do
    {
      objc_msgSend(v12, "buffers");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectAtIndexedSubscript:", v13 - 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setMutability:", 2);

      if (!*(_BYTE *)(a3 + 32))
        break;
    }
    while (v13++ < *(unsigned int *)(a3 + 28));
  }
  objc_msgSend(v12, "setSupportIndirectCommandBuffers:", 1);
  objc_msgSend(v12, "setLabel:", v11);
  v20 = 0;
  v17 = (void *)objc_msgSend(v9, "newComputePipelineStateWithDescriptor:options:reflection:error:", v12, 0, 0, &v20);
  v18 = v20;
  if (v18)
    WTFLogAlways();

  return v17;
}

void sub_182443CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_182443CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void WebGPU::ComputePipeline::create(uint64_t *a1, void *a2, uint64_t *a3, __int128 *a4, uint64_t *a5, unsigned __int8 **a6)
{
  id v11;
  uint64_t v12;
  id v13;
  unsigned __int8 *v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  uint64_t v21;

  v11 = a2;
  v12 = WTF::fastMalloc((WTF *)0x48);
  v20 = *a4;
  v21 = *((_QWORD *)a4 + 2);
  v13 = v11;
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = 0;
  v19 = v13;
  *(_QWORD *)(v12 + 16) = v19;
  v14 = *a6;
  if (__ldaxr(*a6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v14);
LABEL_5:
  ++*((_QWORD *)v14 + 1);
  v16 = __ldxr(v14);
  if (v16 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_10:
  *(_QWORD *)(v12 + 24) = a6;
  *(_OWORD *)(v12 + 32) = v20;
  *(_QWORD *)(v12 + 48) = v21;
  v17 = *a3;
  *a3 = 0;
  *(_QWORD *)(v12 + 56) = v17;
  *(_QWORD *)(v12 + 64) = 0;
  v18 = *a5;
  *a5 = 0;
  *(_QWORD *)(v12 + 64) = v18;

  *a1 = v12;
}

void sub_182443E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id *v10;
  void *v11;
  _QWORD *v12;
  void *v14;
  void *v15;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v12, v14);
  WTF::fastFree((WTF *)v10, v15);

  _Unwind_Resume(a1);
}

void sub_182443E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WebGPU::ComputePipeline **std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(WebGPU::ComputePipeline **a1, void *a2)
{
  WebGPU::ComputePipeline *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

unsigned __int8 ****WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref(unsigned __int8 ****a1, void *a2)
{
  unsigned __int8 ***v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::PipelineLayout::~PipelineLayout(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v6, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2 && *v5)
          WTF::fastFree((WTF *)(*v5 - 16), a2);
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WebGPU::ComputePipeline *WebGPU::Device::createComputePipelineAsync(WebGPU::Device *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  WebGPU::ComputePipeline *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebGPU::ComputePipeline *result;
  WTF *v15;
  void *v16;
  WebGPU::ComputePipeline *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  WebGPU::ComputePipeline *v21;
  id v22;

  WebGPU::Device::createComputePipeline(a1, a2, 1, &v21);
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 53) + 16);
  v6 = v21;
  v21 = 0;
  v7 = *a3;
  *a3 = 0;
  v17 = v6;
  v18 = v7;
  v8 = *(unsigned __int8 **)a1;
  LODWORD(v6) = __ldaxr(*(unsigned __int8 **)a1);
  if ((_DWORD)v6)
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v8);
LABEL_5:
  ++*((_QWORD *)v8 + 1);
  v9 = __ldxr(v8);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v8))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v10 = v22;
  v22 = 0;
  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = v10;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = off_1E0FD1758;
  *(_QWORD *)(v11 + 8) = v17;
  *(_QWORD *)(v11 + 16) = v18;
  *(_OWORD *)(v11 + 24) = v19;
  v20 = v11;
  WebGPU::Instance::scheduleWork(v5, &v20);
  v12 = v20;
  v20 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);

  result = v21;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      WebGPU::ComputePipeline::~ComputePipeline(v21, v13);
      return (WebGPU::ComputePipeline *)WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  return result;
}

void sub_182444288(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebGPU::ComputePipeline *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v16;

  v16 = a10;
  a10 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(&a9, a2);
  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,NSString * {__strong}>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1824442BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
    WebGPU::Device::createComputePipelineAsync(WGPUComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0::~$_0((uint64_t)&a9);
    std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,NSString * {__strong}>::~pair((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  WebGPU::Device::createComputePipelineAsync(WGPUComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0::~$_0((uint64_t)&a9);
  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,NSString * {__strong}>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::Device::createComputePipelineAsync(WGPUComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0::~$_0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  WebGPU::ComputePipeline *v5;
  WTF *v7;
  void *v8;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(a1 + 16), v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(WebGPU::ComputePipeline **)a1;
  *(_QWORD *)a1 = 0;
  if (!v5)
    return a1;
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    return a1;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v5, v3);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,NSString * {__strong}>::~pair(uint64_t a1)
{
  void *v2;
  WebGPU::ComputePipeline *v3;
  WTF *v5;
  void *v6;

  v3 = *(WebGPU::ComputePipeline **)a1;
  *(_QWORD *)a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v3, v2);
  WTF::fastFree(v5, v6);
  return a1;
}

void WebGPU::ComputePipeline::~ComputePipeline(WebGPU::ComputePipeline *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 ***v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  void *v13;
  void *v14;

  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2 && *v5)
          WTF::fastFree((WTF *)(*v5 - 16), a2);
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = (unsigned __int8 ***)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v6)
  {
LABEL_12:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 3, a2);

    v8 = *((_QWORD *)this + 1);
    if (v8)
      goto LABEL_13;
LABEL_18:
    *((_QWORD *)this + 1) = 0;
    return;
  }
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
    goto LABEL_12;
  }
  WebGPU::PipelineLayout::~PipelineLayout(v6, a2);
  WTF::fastFree(v12, v13);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 3, v14);

  v8 = *((_QWORD *)this + 1);
  if (!v8)
    goto LABEL_18;
LABEL_13:
  *(_QWORD *)(v8 + 8) = 0;
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
}

_DWORD *wgpuComputePipelineReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::ComputePipeline *wgpuComputePipelineRelease(WebGPU::ComputePipeline *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::ComputePipeline::~ComputePipeline(result, a2);
    return (WebGPU::ComputePipeline *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuComputePipelineGetBindGroupLayout(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _DWORD *result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  WebGPU::BindGroupLayout **v30;
  uint64_t v31;
  WebGPU::BindGroupLayout *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  WebGPU::BindGroupLayout **v36;
  uint64_t v37;
  WebGPU::BindGroupLayout *v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  WTF *v42;
  unsigned __int8 **v43;
  uint64_t v44;
  _DWORD *v45;

  if (a1[2])
  {
    v3 = a1[7];
    if (*(_BYTE *)(v3 + 32) && *(_DWORD *)(v3 + 28) > a2)
    {
      result = (_DWORD *)WebGPU::PipelineLayout::bindGroupLayout((WebGPU::PipelineLayout *)v3, a2);
      ++*result;
      return result;
    }
    v5 = a1[3];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *(_QWORD *)(v5 + 32);
    v8 = 32 * *(unsigned int *)(v5 + 44);
    v9 = v7 + v8;
    while (v8)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v9 -= 32;
      v8 -= 32;
      if (!v10)
      {
        v11 = v7 + v8;
        if (!*(_BYTE *)(v11 + 16))
        {
          v12 = v45;
          v45 = 0;
          *(_DWORD *)v11 = 1;
          *(_QWORD *)(v11 + 8) = v12;
          *(_BYTE *)(v11 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    v21 = *(_QWORD *)(v5 + 24);
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v21 + 16))(v21, 1, &v45);
      v22 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
LABEL_18:
    v23 = v45;
    v45 = 0;
    if (v23)
    {
      if (*v23 == 2)
      {
        WTF::StringImpl::destroy();
        v24 = a1[7];
        *(_BYTE *)(v24 + 96) = 0;
        if (!*(_BYTE *)(v24 + 32))
          goto LABEL_56;
        goto LABEL_32;
      }
      *v23 -= 2;
    }
    v24 = a1[7];
    *(_BYTE *)(v24 + 96) = 0;
    if (!*(_BYTE *)(v24 + 32))
      goto LABEL_56;
LABEL_32:
    if (*(_DWORD *)(v24 + 24))
    {
      v29 = *(unsigned int *)(v24 + 28);
      if ((_DWORD)v29)
      {
        v30 = *(WebGPU::BindGroupLayout ***)(v24 + 16);
        v31 = 8 * v29;
        do
        {
          v32 = *v30;
          *v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout(v32, v6);
              WTF::fastFree(v33, v34);
            }
            else
            {
              --*(_DWORD *)v32;
            }
          }
          ++v30;
          v31 -= 8;
        }
        while (v31);
        *(_DWORD *)(v24 + 28) = 0;
      }
      v41 = *(WTF **)(v24 + 16);
      if (v41)
      {
        *(_QWORD *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 24) = 0;
        WTF::fastFree(v41, v6);
      }
    }
    goto LABEL_56;
  }
  v13 = a1[3];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = *(_QWORD *)(v13 + 32);
  v16 = 32 * *(unsigned int *)(v13 + 44);
  v17 = v15 + v16;
  while (v16)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v17 -= 32;
    v16 -= 32;
    if (!v18)
    {
      v19 = v15 + v16;
      if (!*(_BYTE *)(v19 + 16))
      {
        v20 = v45;
        v45 = 0;
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = v20;
        *(_BYTE *)(v19 + 16) = 1;
      }
      goto LABEL_26;
    }
  }
  v25 = *(_QWORD *)(v13 + 24);
  if (v25)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v25 + 16))(v25, 1, &v45);
    v26 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
LABEL_26:
  v27 = v45;
  v45 = 0;
  if (!v27)
    goto LABEL_29;
  if (*v27 != 2)
  {
    *v27 -= 2;
LABEL_29:
    v28 = a1[7];
    *(_BYTE *)(v28 + 96) = 0;
    if (!*(_BYTE *)(v28 + 32))
      goto LABEL_56;
LABEL_41:
    if (*(_DWORD *)(v28 + 24))
    {
      v35 = *(unsigned int *)(v28 + 28);
      if ((_DWORD)v35)
      {
        v36 = *(WebGPU::BindGroupLayout ***)(v28 + 16);
        v37 = 8 * v35;
        do
        {
          v38 = *v36;
          *v36 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout(v38, v14);
              WTF::fastFree(v39, v40);
            }
            else
            {
              --*(_DWORD *)v38;
            }
          }
          ++v36;
          v37 -= 8;
        }
        while (v37);
        *(_DWORD *)(v28 + 28) = 0;
      }
      v42 = *(WTF **)(v28 + 16);
      if (v42)
      {
        *(_QWORD *)(v28 + 16) = 0;
        *(_DWORD *)(v28 + 24) = 0;
        WTF::fastFree(v42, v14);
      }
    }
    goto LABEL_56;
  }
  WTF::StringImpl::destroy();
  v28 = a1[7];
  *(_BYTE *)(v28 + 96) = 0;
  if (*(_BYTE *)(v28 + 32))
    goto LABEL_41;
LABEL_56:
  v43 = (unsigned __int8 **)a1[3];
  v44 = WTF::fastMalloc((WTF *)0xC0);
  WebGPU::BindGroupLayout::BindGroupLayout(v44, v43);
  return (_DWORD *)v44;
}

void sub_182444874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1824448C4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  WTF *v3;

  v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

void sub_1824448DC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  WTF *v3;

  v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuComputePipelineSetLabel(int a1, char *__s)
{
  _DWORD *result;
  _DWORD *v3;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  result = v3;
  if (v3)
  {
    if (*v3 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v3 -= 2;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  if (*(_BYTE *)(a1 + 104))
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a1 + 96);
        do
        {
          v6 = *(_DWORD **)v5;
          if (*(_QWORD *)v5 != -1)
          {
            v7 = *(unsigned int *)(v5 + 24);
            if ((_DWORD)v7 != -1)
            {
              ((void (*)(char *, uint64_t))off_1E0FD16F0[v7])(&v9, v5 + 8);
              v6 = *(_DWORD **)v5;
            }
            *(_DWORD *)(v5 + 24) = -1;
            *(_QWORD *)v5 = 0;
            if (v6)
            {
              if (*v6 == 2)
                WTF::StringImpl::destroy();
              else
                *v6 -= 2;
            }
          }
          v5 += 32;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)(a1 + 8), a2);

  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int *)v2;
    if ((_DWORD)v3)
    {
      v4 = 24 * v3;
      v5 = (_DWORD *)((char *)v2 + 24);
      do
      {
        a2 = (WTF **)(v5 - 4);
        v6 = *v5;
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, WTF **))off_1E0FD16F0[v6])(&v8, a2);
        *v5 = -1;
        v5 += 6;
        v4 -= 24;
      }
      while (v4);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int *)v2;
    if ((_DWORD)v3)
    {
      v4 = 24 * v3;
      v5 = (_DWORD *)((char *)v2 + 24);
      do
      {
        a2 = (WTF **)(v5 - 4);
        v6 = *v5;
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, WTF **))off_1E0FD16F0[v6])(&v8, a2);
        *v5 = -1;
        v5 += 6;
        v4 -= 24;
      }
      while (v4);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v2 = (WTF *)a2[1];
  a2[1] = 0;
  if (v2)
  {
    v3 = *(unsigned int *)v2;
    if ((_DWORD)v3)
    {
      v4 = 24 * v3;
      v5 = (_DWORD *)((char *)v2 + 24);
      do
      {
        a2 = v5 - 4;
        v6 = *v5;
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, _QWORD *))off_1E0FD16F0[v6])(&v8, a2);
        *v5 = -1;
        v5 += 6;
        v4 -= 24;
      }
      while (v4);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = *a2;
      do
      {
        v5 = *(_DWORD **)v4;
        if (*(_QWORD *)v4 != -1)
        {
          v6 = *(unsigned int *)(v4 + 24);
          if ((_DWORD)v6 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E0FD16F0[v6])(&v7, v4 + 8);
            v5 = *(_DWORD **)v4;
          }
          *(_DWORD *)(v4 + 24) = -1;
          *(_QWORD *)v4 = 0;
          if (v5)
          {
            if (*v5 == 2)
              WTF::StringImpl::destroy();
            else
              *v5 -= 2;
          }
        }
        v4 += 32;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

void WGSL::Reflection::EntryPointInformation::~EntryPointInformation(WGSL::Reflection::EntryPointInformation *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 5);
      while (1)
      {
        v6 = *(_DWORD **)v5;
        if (*(_QWORD *)v5 == -1)
          goto LABEL_5;
        v7 = *(_DWORD **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (!v7)
          goto LABEL_10;
        if (*v7 != 2)
          break;
        WTF::StringImpl::destroy();
        v6 = *(_DWORD **)v5;
        *(_QWORD *)v5 = 0;
        if (v6)
        {
LABEL_13:
          if (*v6 == 2)
            WTF::StringImpl::destroy();
          else
            *v6 -= 2;
        }
LABEL_5:
        v5 += 32;
        if (!--v4)
          goto LABEL_15;
      }
      *v7 -= 2;
LABEL_10:
      *(_QWORD *)v5 = 0;
      if (v6)
        goto LABEL_13;
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  std::__optional_destruct_base<WGSL::PipelineLayout,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)this + 2, a2);
  v8 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*v8 == 2)
    {
      WTF::StringImpl::destroy();
      v9 = *(_DWORD **)this;
      *(_QWORD *)this = 0;
      if (!v9)
        return;
      goto LABEL_22;
    }
    *v8 -= 2;
  }
  v9 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (!v9)
    return;
LABEL_22:
  if (*v9 == 2)
    WTF::StringImpl::destroy();
  else
    *v9 -= 2;
}

uint64_t *std::__optional_destruct_base<WGSL::PipelineLayout,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  WTF *v10;

  if (*((_BYTE *)a1 + 16))
  {
    v3 = *((_DWORD *)a1 + 3);
    v4 = *a1;
    if (v3)
    {
      v5 = v4 + 24 * v3;
      do
      {
        v6 = *(unsigned int *)(v4 + 20);
        if ((_DWORD)v6)
        {
          v7 = 120 * v6;
          v8 = (_DWORD **)(*(_QWORD *)(v4 + 8) + 40);
          do
          {
            v9 = *v8;
            *v8 = 0;
            if (v9)
            {
              if (*v9 == 2)
                WTF::StringImpl::destroy();
              else
                *v9 -= 2;
            }
            v8 += 15;
            v7 -= 120;
          }
          while (v7);
        }
        v10 = *(WTF **)(v4 + 8);
        if (v10)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v10, a2);
        }
        v4 += 24;
      }
      while (v4 != v5);
      v4 = *a1;
    }
    if (v4)
    {
      *a1 = 0;
      *((_DWORD *)a1 + 2) = 0;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Device::createComputePipelineAsync(WGPUComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  WebGPU::ComputePipeline *v5;
  WTF *v7;
  void *v8;

  *(_QWORD *)a1 = off_1E0FD1758;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(a1 + 24), v2);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(WebGPU::ComputePipeline **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v5)
    return a1;
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    return a1;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v5, v3);
  WTF::fastFree(v7, v8);
  return a1;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  WebGPU::ComputePipeline *v5;
  WTF *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)a1 = off_1E0FD1758;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(a1 + 24), v2);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(WebGPU::ComputePipeline **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebGPU::ComputePipeline::~ComputePipeline(v5, v3);
      WTF::fastFree(v7, v8);
      v6 = (WTF *)a1;
      return WTF::fastFree(v6, v3);
    }
    --*(_DWORD *)v5;
  }
  v6 = (WTF *)a1;
  return WTF::fastFree(v6, v3);
}

_DWORD *WTF::Detail::CallableWrapper<WebGPU::Device::createComputePipelineAsync(WGPUComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  _QWORD *v2;
  _BOOL8 v3;
  uint64_t v4;
  _DWORD *result;
  _DWORD *v6;

  v2 = a1 + 1;
  if (*(_QWORD *)(a1[1] + 16))
    v3 = 0;
  else
    v3 = *(_BYTE *)(a1[3] + 57) == 0;
  MEMORY[0x186DAB230](&v6, a1[4]);
  v4 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, _BOOL8, _QWORD *, _DWORD **))(*(_QWORD *)v4 + 16))(v4, v3, v2, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

void sub_18244509C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_7;
  }
  v12 = a2;
  v13 = (_QWORD *)(v9 + 24);
  do
  {
    *((_DWORD *)v13 - 2) = -1;
    *v13 = 0;
    v13 += 2;
    --v12;
  }
  while (v12);
LABEL_7:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (int *)(v6 + 16 * v14);
      v17 = *v16;
      if (*v16 != -2)
      {
        if (v17 == -1)
        {
          v18 = *(_QWORD *)(v6 + 16 * v14 + 8);
          if (v18)
            WTF::fastFree((WTF *)(v18 - 16), v10);
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = 0;
          v22 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
          v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
          do
          {
            v24 = v23 & v20;
            v23 = ++v21 + v24;
          }
          while (*(_DWORD *)(v19 + 16 * v24) != -1);
          v25 = v19 + 16 * v24;
          v27 = (_QWORD *)(v25 + 8);
          v26 = *(_QWORD *)(v25 + 8);
          if (v26)
          {
            WTF::fastFree((WTF *)(v26 - 16), v10);
            v17 = *v16;
          }
          *(_DWORD *)v25 = v17;
          v28 = v6 + 16 * v14;
          *v27 = 0;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          *v27 = v29;
          v30 = *(_QWORD *)(v28 + 8);
          if (v30)
            WTF::fastFree((WTF *)(v30 - 16), v10);
          if (v16 == a3)
            v15 = v25;
        }
      }
      ++v14;
    }
    while (v14 != v7);
  }
  else
  {
    v15 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v15;
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *v26;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400)
      goto LABEL_8;
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3)
LABEL_11:
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = WTF::fastMalloc((WTF *)(16 * v8 + 16));
  v10 = (_QWORD *)(v9 + 40);
  v11 = v8 & 0xFFFFFFFE;
  do
  {
    *((_DWORD *)v10 - 6) = -1;
    *((_DWORD *)v10 - 2) = -1;
    *(v10 - 2) = 0;
    *v10 = 0;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  v12 = v8 - (v8 & 0xFFFFFFFE);
  if (v12)
  {
    v13 = (_QWORD *)(((16 * v8) & 0xFFFFFFFE0) + v9 + 24);
    do
    {
      *((_DWORD *)v13 - 2) = -1;
      *v13 = 0;
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v14 = (_DWORD *)*a2;
  if (!*a2)
  {
    v17 = 0;
    v16 = 0;
    goto LABEL_29;
  }
  v15 = *(v14 - 1);
  v16 = &v14[4 * v15];
  if (*(v14 - 3))
  {
    v17 = (_DWORD *)*a2;
    if ((_DWORD)v15)
    {
      v18 = 16 * v15;
      v17 = (_DWORD *)*a2;
      while (*v17 >= 0xFFFFFFFE)
      {
        v17 += 4;
        v18 -= 16;
        if (!v18)
        {
          v17 = v16;
          if (v14)
            goto LABEL_30;
          goto LABEL_31;
        }
      }
    }
LABEL_29:
    if (!v14)
      goto LABEL_31;
    goto LABEL_30;
  }
  v17 = &v14[4 * v15];
  v16 = v17;
  if (v14)
LABEL_30:
    v14 += 4 * *(v14 - 1);
LABEL_31:
  while (v17 != v14)
  {
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 8);
    else
      v20 = 0;
    v21 = 0;
    v22 = *v17 + ~(*v17 << 15);
    v23 = (9 * (v22 ^ (v22 >> 10))) ^ ((9 * (v22 ^ (v22 >> 10))) >> 6);
    v24 = (v23 + ~(v23 << 11)) ^ ((v23 + ~(v23 << 11)) >> 16);
    do
    {
      v25 = v24 & v20;
      v24 = ++v21 + v25;
    }
    while (*(_DWORD *)(v19 + 16 * v25) != -1);
    *(_OWORD *)(v19 + 16 * v25) = *(_OWORD *)v17;
    v26 = v17 + 4;
    v17 = v16;
    if (v26 != v16)
    {
      v17 = v26;
      while (*v17 >= 0xFFFFFFFE)
      {
        v17 += 4;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  return a1;
}

void WebGPU::Device::create(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebGPU::Adapter *a4@<X3>, uint64_t *a5@<X8>)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  CVMetalTextureCacheRef v32;
  const void *v33;
  id v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  CVMetalTextureCacheRef cacheOut;
  char v45;
  WTF **v46;
  WTF *v47;

  v9 = a1;
  v10 = (void *)objc_msgSend(v9, "newCommandQueueWithMaxCommandBufferCount:", 2048);
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "setLabel:", CFSTR("Default queue"));
    if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v12 = (void *)MEMORY[0x1E0CB3940];
      WTF::String::utf8();
      v13 = v47 ? (char *)v47 + 16 : 0;
      objc_msgSend(v12, "stringWithFormat:", CFSTR("Default queue for device %s"), v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setLabel:", v14);

      v16 = v47;
      v47 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v15);
        else
          --*(_DWORD *)v16;
      }
    }
    v17 = WTF::fastMalloc((WTF *)0x1B8);
    v18 = v9;
    v43 = v11;
    v19 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v19 = 0;
    *(_OWORD *)(v19 + 8) = xmmword_18260F000;
    *(_QWORD *)(v19 + 24) = v17;
    *(_QWORD *)v17 = v19;
    v20 = v18;
    *(_QWORD *)(v17 + 8) = v20;
    v21 = v43;
    v22 = WTF::fastMalloc((WTF *)0x70);
    WebGPU::Queue::Queue(v22, v21, (uint64_t *)v17);
    *(_QWORD *)(v17 + 16) = v22;

    *(_OWORD *)(v17 + 24) = 0u;
    *(_QWORD *)(v17 + 64) = 0;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_WORD *)(v17 + 56) = 0;
    *(_OWORD *)(v17 + 72) = *(_OWORD *)a3;
    v23 = *(_OWORD *)(a3 + 16);
    v24 = *(_OWORD *)(a3 + 32);
    v25 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v17 + 120) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v17 + 136) = v25;
    *(_OWORD *)(v17 + 88) = v23;
    *(_OWORD *)(v17 + 104) = v24;
    v26 = *(_OWORD *)(a3 + 80);
    v27 = *(_OWORD *)(a3 + 96);
    v28 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(v17 + 184) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(v17 + 200) = v28;
    *(_OWORD *)(v17 + 152) = v26;
    *(_OWORD *)(v17 + 168) = v27;
    *(_QWORD *)(v17 + 216) = 0;
    *(_QWORD *)(v17 + 224) = 0;
    v29 = *(_QWORD *)(a3 + 144);
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(v17 + 216) = v29;
    LODWORD(v29) = *(_DWORD *)(a3 + 152);
    *(_DWORD *)(a3 + 152) = 0;
    *(_DWORD *)(v17 + 224) = v29;
    LODWORD(v29) = *(_DWORD *)(a3 + 156);
    *(_DWORD *)(a3 + 156) = 0;
    *(_DWORD *)(v17 + 228) = v29;
    v30 = *(_QWORD *)(a3 + 160);
    *(_BYTE *)(v17 + 240) = *(_BYTE *)(a3 + 168);
    *(_QWORD *)(v17 + 232) = v30;
    v31 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a3 + 176) = 0;
    *(_QWORD *)(a3 + 184) = 0;
    *(_OWORD *)(v17 + 248) = v31;
    *(_BYTE *)(v17 + 264) = *(_BYTE *)(a3 + 192);
    *(_OWORD *)(v17 + 272) = 0u;
    *(_OWORD *)(v17 + 288) = 0u;
    *(_OWORD *)(v17 + 304) = 0u;
    *(_OWORD *)(v17 + 320) = 0u;
    *(_OWORD *)(v17 + 336) = 0u;
    *(_OWORD *)(v17 + 352) = 0u;
    *(_OWORD *)(v17 + 368) = 0u;
    *(_OWORD *)(v17 + 384) = 0u;
    *(_OWORD *)(v17 + 400) = 0u;
    *(_QWORD *)(v17 + 416) = 0;
    ++*(_DWORD *)a4;
    *(_QWORD *)(v17 + 424) = a4;
    *(_QWORD *)(v17 + 432) = 0;
    cacheOut = 0;
    CVMetalTextureCacheCreate(0, 0, v20, 0, &cacheOut);
    v32 = cacheOut;
    if (cacheOut)
      CFRetain(cacheOut);
    v33 = *(const void **)(v17 + 432);
    *(_QWORD *)(v17 + 432) = v32;
    if (v33)
      CFRelease(v33);
    v34 = *(id *)(v17 + 8);
    v35 = atomic_load(&qword_1EDB98CF0);
    if (v35 != -1)
    {
      v47 = (WTF *)&v45;
      v46 = &v47;
      std::__call_once(&qword_1EDB98CF0, &v46, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebGPU::GPUFrameCapture::registerForFrameCapture(objc_object  {objcproto9MTLDevice}*)::{lambda(void)#1} &&>>);
    }
    if (_MergedGlobals)
      WebGPU::GPUFrameCapture::captureFrame(v34);

    v36 = (void *)objc_msgSend(*(id *)(v17 + 8), "newBufferWithLength:options:", 1, 0);
    WebGPU::Device::setOwnerWithIdentity(v17, v36);
    v37 = *(void **)(v17 + 272);
    *(_QWORD *)(v17 + 272) = v36;

    v38 = (void *)objc_opt_new();
    objc_msgSend(v38, "setWidth:", 1);
    objc_msgSend(v38, "setHeight:", 1);
    objc_msgSend(v38, "setMipmapLevelCount:", 1);
    objc_msgSend(v38, "setPixelFormat:", 80);
    objc_msgSend(v38, "setTextureType:", 2);
    objc_msgSend(v38, "setStorageMode:", 0);
    objc_msgSend(v38, "setUsage:", 5);
    v39 = objc_msgSend(*(id *)(v17 + 8), "newTextureWithDescriptor:", v38);
    v40 = *(void **)(v17 + 280);
    *(_QWORD *)(v17 + 280) = v39;

    objc_msgSend(v38, "setPixelFormat:", 260);
    objc_msgSend(v38, "setStorageMode:", 2);
    v41 = objc_msgSend(*(id *)(v17 + 8), "newTextureWithDescriptor:", v38);
    v42 = *(void **)(v17 + 288);
    *(_QWORD *)(v17 + 288) = v41;

  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x1B8);
    WebGPU::Device::Device((WebGPU::Device *)v17, a4);
  }
  *a5 = v17;

}

void sub_182445938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v20;

  if (a16)
  {
    if (*(_DWORD *)a16 == 1)
    {
      WTF::fastFree(a16, v20);

      _Unwind_Resume(a1);
    }
    --*(_DWORD *)a16;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

id **WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref(id **a1)
{
  id *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::Adapter::~Adapter(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  _DWORD *v7;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (char *)v4 + 8;
    do
    {
      if (v6[8])
      {
        v7 = *(_DWORD **)v6;
        *(_QWORD *)v6 = 0;
        if (v7)
        {
          if (*v7 == 2)
            WTF::StringImpl::destroy();
          else
            *v7 -= 2;
        }
      }
      v6 += 32;
      v5 -= 32;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned int **WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v6;
  void *v7;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (v4)
    return a1;
  atomic_store(1u, v2);
  WebGPU::Queue::~Queue((WebGPU::Queue *)v2);
  WTF::fastFree(v6, v7);
  return a1;
}

WebGPU::Device *WebGPU::Device::Device(WebGPU::Device *this, WebGPU::Adapter *a2)
{
  uint64_t v4;
  WebGPU::Queue *v5;
  void *v7;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_18260F000;
  *(_QWORD *)(v4 + 24) = this;
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 1) = 0;
  v5 = (WebGPU::Queue *)WTF::fastMalloc((WTF *)0x70);
  WebGPU::Queue::Queue(v5, this);
  *((_QWORD *)this + 2) = v5;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_WORD *)this + 28) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_BYTE *)this + 240) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 264) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 52) = 0;
  ++*(_DWORD *)a2;
  *((_QWORD *)this + 53) = a2;
  *((_QWORD *)this + 54) = 0;
  if (!*((_QWORD *)a2 + 1))
  {
    v7 = (void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;

  }
  return this;
}

void sub_182445D70(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v3;

  WTF::fastFree(v3, a2);

  _Unwind_Resume(a1);
}

void sub_182445D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void WebGPU::Device::~Device(WebGPU::Device *this)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  const void *v6;
  id *v7;
  WTF *v8;
  void *v9;
  void *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v23;
  void *v24;
  _DWORD *v25;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v25 = v3;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v2 + 16))(v2, 1, &v25);
    v4 = v25;
    v25 = 0;
    if (!v4)
      goto LABEL_5;
    if (*v4 != 2)
    {
      *v4 -= 2;
LABEL_5:
      v5 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
    WTF::StringImpl::destroy();
    v5 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v5)
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
LABEL_7:
  v6 = (const void *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (id *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebGPU::Adapter::~Adapter(v7);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }

  v11 = (WTF *)*((_QWORD *)this + 27);
  if (v11)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v11, v10);
  }

  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((unsigned int *)this + 11);
  v15 = (WTF *)*((_QWORD *)this + 4);
  if ((_DWORD)v14)
  {
    v16 = 32 * v14;
    v17 = (char *)v15 + 8;
    do
    {
      if (v17[8])
      {
        v18 = *(_DWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v18)
        {
          if (*v18 == 2)
            WTF::StringImpl::destroy();
          else
            *v18 -= 2;
        }
      }
      v17 += 32;
      v16 -= 32;
    }
    while (v16);
    v15 = (WTF *)*((_QWORD *)this + 4);
  }
  if (v15)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v15, v12);
  }
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WebGPU::Queue::~Queue((WebGPU::Queue *)v20);
      WTF::fastFree(v23, v24);
    }
  }

}

void sub_182446018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v10;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  if (a10)
  {
    if (*a10 == 2)
      WTF::StringImpl::destroy();
    else
      *a10 -= 2;
  }
  v12 = *(const void **)(v10 + 432);
  *(_QWORD *)(v10 + 432) = 0;
  if (v12)
    CFRelease(v12);
  WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref((id **)(v10 + 424));

  WebGPU::HardwareCapabilities::~HardwareCapabilities((id *)(v10 + 72));
  v14 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v10 + 48) = 0;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 + 32, v16);
    v15 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    if (!v15)
    {
LABEL_9:
      WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref((unsigned int **)(v10 + 16));

      _Unwind_Resume(a1);
    }
  }
  else
  {
    WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 + 32, v13);
    v15 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    if (!v15)
      goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref((unsigned int **)(v10 + 16));

  _Unwind_Resume(a1);
}

void WebGPU::Device::loseTheDevice(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;

  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  v5 = *(_QWORD *)(a1 + 424);
  v6 = *(void **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = 0;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  if (*(_QWORD *)(a1 + 48))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(_QWORD, uint64_t, _DWORD **))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2, &v10);
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*v8 == 2)
      {
        WTF::StringImpl::destroy();
        v9 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (!v9)
          goto LABEL_7;
        goto LABEL_6;
      }
      *v8 -= 2;
    }
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v9)
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
LABEL_7:
  WebGPU::Queue::makeInvalid(*(WebGPU::Queue **)(a1 + 16));
  *(_BYTE *)(a1 + 56) = 1;
}

void sub_182446258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::Device::setOwnerWithIdentity(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  unsigned int v6;
  char v7;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 16);
  LOBYTE(v6) = 0;
  v7 = 0;
  if (*(_BYTE *)(v4 + 44))
  {
    WTF::MachSendRight::MachSendRight();
    v7 = 1;
    if (v6)
    {
      v5 = v3;
      if (v5 && (objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v5, "setOwnerWithIdentity:", v6);

    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v6);
  }

}

void sub_182446338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12)
{
  void *v12;
  void *v13;

  if (a12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);

  _Unwind_Resume(a1);
}

uint64_t WebGPU::Device::generateAValidationError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = *(_QWORD *)(result + 32);
  v4 = 32 * *(unsigned int *)(result + 44);
  v5 = v3 + v4;
  while (v4)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v5 -= 32;
    v4 -= 32;
    if (!v6)
    {
      v7 = v3 + v4;
      if (!*(_BYTE *)(v7 + 16))
      {
        v8 = *a2;
        *a2 = 0;
        *(_DWORD *)v7 = 1;
        *(_QWORD *)(v7 + 8) = v8;
        *(_BYTE *)(v7 + 16) = 1;
      }
      return result;
    }
  }
  result = *(_QWORD *)(result + 24);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)result + 16))(result, 1, a2);
    result = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebGPU::Device::generateAnOutOfMemoryError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = *(_QWORD *)(result + 32);
  v4 = 32 * *(unsigned int *)(result + 44);
  v5 = v3 + v4;
  while (v4)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v5 -= 32;
    v4 -= 32;
    if (v6 == 1)
    {
      v7 = v3 + v4;
      if (!*(_BYTE *)(v7 + 16))
      {
        v8 = *a2;
        *a2 = 0;
        *(_DWORD *)v7 = 2;
        *(_QWORD *)(v7 + 8) = v8;
        *(_BYTE *)(v7 + 16) = 1;
      }
      return result;
    }
  }
  result = *(_QWORD *)(result + 24);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)result + 16))(result, 2, a2);
    result = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

id WebGPU::Device::newBufferWithBytes(id *this, const void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;

  v5 = (void *)objc_msgSend(this[1], "newBufferWithBytes:length:options:", a2, a3, a4);
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v5);
  return v5;
}

void sub_182446508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebGPU::Device::newBufferWithBytesNoCopy(id *this, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;

  v5 = (void *)objc_msgSend(this[1], "newBufferWithBytesNoCopy:length:options:deallocator:", a2, a3, a4, 0);
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v5);
  return v5;
}

void sub_182446560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebGPU::Device::newTextureWithDescriptor(WebGPU::Device *this, MTLTextureDescriptor *a2, __IOSurface *a3, uint64_t a4)
{
  MTLTextureDescriptor *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = a2;
  v8 = (void *)*((_QWORD *)this + 1);
  if (a3)
    v9 = (void *)objc_msgSend(v8, "newTextureWithDescriptor:iosurface:plane:", v7, a3, a4);
  else
    v9 = (void *)objc_msgSend(v8, "newTextureWithDescriptor:", v7);
  v10 = v9;
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v9);

  return v10;
}

void sub_1824465E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824465F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182446600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebGPU::Device::ErrorScope::~ErrorScope(WebGPU::Device::ErrorScope *this)
{
  _DWORD *v2;

  if (*((_BYTE *)this + 16))
  {
    v2 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2)
        WTF::StringImpl::destroy();
      else
        *v2 -= 2;
    }
  }
}

uint64_t WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (!*(_BYTE *)(a1 + 16))
    return a1;
  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v3)
    return a1;
  if (*v3 != 2)
  {
    *v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy();
  return a1;
}

id WebGPU::Device::dispatchCallPipelineState(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    v5 = *(void **)(a1 + 304);
    if (!v5)
    {
      v11 = 0;
      v6 = objc_msgSend(v4, "newComputePipelineStateWithFunction:error:", v3, &v11);
      v7 = v11;
      v8 = *(void **)(a1 + 304);
      *(_QWORD *)(a1 + 304) = v6;

      if (v7)
        WTFLogAlways();

      v5 = *(void **)(a1 + 304);
    }
    v9 = v5;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_182446784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebGPU::Device::copyIndexIndirectArgsPipeline(WebGPU::Device *this, unint64_t a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id *v9;
  void *v10;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  if (!*((_QWORD *)this + 1))
    return 0;
  v4 = 408;
  if (a2 > 1)
    v4 = 416;
  v5 = *(id *)((char *)this + v4);
  if (!v5)
  {
    if (!WebGPU::Device::copyIndexIndirectArgsPipeline(unsigned long)::function)
    {
      v6 = (void *)objc_opt_new();
      objc_msgSend(v6, "setFastMathEnabled:", 1);
      v15 = (void *)*((_QWORD *)this + 1);
      v21 = 0;
      v16 = (void *)objc_msgSend(v15, "newLibraryWithSource:options:error:", CFSTR("\n    using namespace metal;\n    [[vertex]] void vs(device MTLDrawIndexedPrimitivesIndirectArguments& indexedOutput [[buffer(0)]], constant const MTLDrawIndexedPrimitivesIndirectArguments& indirectArguments [[buffer(1)]], const constant uint* instanceCount [[buffer(2)]]) {\n        BOOL condition = indirectArguments.baseInstance + indirectArguments.instanceCount > instanceCount[0] || indirectArguments.baseInstance >= instanceCount[0];\n        indexedOutput.indexCount = metal::select(indirectArguments.indexCount, 0u, condition);\n        indexedOutput.instanceCount = metal::select(indirectArguments.instanceCount, 0u, condition);\n        indexedOutput.indexStart = indirectArguments.indexStart;\n        indexedOutput.baseVertex = indirectArguments.baseVertex;\n        indexedOutput.baseInstance = indirectArguments.baseInstance;\n    }"),
                      v6,
                      &v21);
      v12 = v21;
      if (v12)
      {
        WTFLogAlways();

        v14 = 0;
        goto LABEL_14;
      }
      v17 = objc_msgSend(v16, "newFunctionWithName:", CFSTR("vs"));
      v18 = (void *)WebGPU::Device::copyIndexIndirectArgsPipeline(unsigned long)::function;
      WebGPU::Device::copyIndexIndirectArgsPipeline(unsigned long)::function = v17;

    }
    v6 = (void *)objc_opt_new();
    objc_msgSend(v6, "setVertexFunction:", WebGPU::Device::copyIndexIndirectArgsPipeline(unsigned long)::function);
    objc_msgSend(v6, "setRasterizationEnabled:", 0);
    objc_msgSend(v6, "setRasterSampleCount:", a2);
    objc_msgSend(v6, "setFragmentFunction:", 0);
    objc_msgSend(v6, "setInputPrimitiveTopology:", 1);
    v7 = (void *)*((_QWORD *)this + 1);
    if (a2 < 2)
    {
      v19 = 0;
      v8 = objc_msgSend(v7, "newRenderPipelineStateWithDescriptor:error:", v6, &v19);
      v9 = (id *)((char *)this + 408);
      v10 = v19;
    }
    else
    {
      v20 = 0;
      v8 = objc_msgSend(v7, "newRenderPipelineStateWithDescriptor:error:", v6, &v20);
      v9 = (id *)((char *)this + 416);
      v10 = v20;
    }
    v12 = v10;
    v13 = *v9;
    *v9 = (id)v8;

    v5 = *v9;
    if (!v12)
    {
      v14 = 0;
      goto LABEL_16;
    }
    WTFLogAlways();
    v14 = v5;
LABEL_14:
    v5 = 0;
LABEL_16:

  }
  return v5;
}

void sub_1824469B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1824469CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824469E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebGPU::Device::indexBufferClampPipeline(WebGPU::Device *this, MTLIndexType a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t *v11;
  void *v12;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;

  if (!*((_QWORD *)this + 1))
    return 0;
  v6 = 320;
  if (a3 > 1)
    v6 = 336;
  v7 = 312;
  if (a3 > 1)
    v7 = 328;
  if (a2)
    v6 = v7;
  v8 = *(id *)((char *)this + v6);
  if (!v8)
  {
    if (!qword_1EDB98CD0)
    {
      v10 = (void *)objc_opt_new();
      objc_msgSend(v10, "setFastMathEnabled:", 1);
      v14 = (void *)*((_QWORD *)this + 1);
      v30 = 0;
      v15 = (void *)objc_msgSend(v14, "newLibraryWithSource:options:error:", CFSTR("\n#define vertexCount 0\n#define primitiveRestart 1\n    using namespace metal;\n    [[vertex]] void vsUshort(device const ushort* indexBuffer [[buffer(0)]], device MTLDrawIndexedPrimitivesIndirectArguments& indexedOutput [[buffer(1)]], const constant uint* data [[buffer(2)]], uint indexId [[vertex_id]]) {\n        ushort vertexIndex = data[primitiveRestart] + indexBuffer[indexId];\n        if (vertexIndex + indexedOutput.baseVertex >= data[vertexCount] + data[primitiveRestart])\n            indexedOutput.indexCount = 0u;\n    }\n    [[vertex]] void vsUint(device const uint* indexBuffer [[buffer(0)]], device MTLDrawIndexedPrimitivesIndirectArguments& indexedOutput [[buffer(1)]], const constant uint* data [[buffer(2)]], uint indexId [[vertex_id]]) {\n        uint vertexIndex = data[primitiveRestart] + indexBuffer[indexId];\n        if (vertexIndex + indexedOutput.baseVertex >= data[vertexCount] + data[primitiveRestart])\n            indexedOutput.indexCount = 0u;\n    }"),
                      v10,
                      &v30);
      v16 = v30;
      if (v16)
      {
        WTFLogAlways();

        v17 = 0;
        goto LABEL_24;
      }
      v22 = objc_msgSend(v15, "newFunctionWithName:", CFSTR("vsUint"));
      v23 = (void *)qword_1EDB98CD0;
      qword_1EDB98CD0 = v22;

      v24 = objc_msgSend(v15, "newFunctionWithName:", CFSTR("vsUshort"));
      v25 = (void *)qword_1EDB98CD8;
      qword_1EDB98CD8 = v24;

    }
    v9 = (void *)objc_opt_new();
    v10 = v9;
    v11 = &qword_1EDB98CD0;
    if (a2 == MTLIndexTypeUInt16)
      v11 = &qword_1EDB98CD8;
    objc_msgSend(v9, "setVertexFunction:", *v11);
    objc_msgSend(v10, "setRasterizationEnabled:", 0);
    objc_msgSend(v10, "setRasterSampleCount:", a3);
    objc_msgSend(v10, "setFragmentFunction:", 0);
    objc_msgSend(v10, "setInputPrimitiveTopology:", 1);
    v12 = (void *)*((_QWORD *)this + 1);
    if (a2)
    {
      if (a3 >= 2)
      {
        v27 = 0;
        v18 = objc_msgSend(v12, "newRenderPipelineStateWithDescriptor:error:", v10, &v27);
        v19 = (id *)((char *)this + 328);
        v20 = v27;
      }
      else
      {
        v26 = 0;
        v18 = objc_msgSend(v12, "newRenderPipelineStateWithDescriptor:error:", v10, &v26);
        v19 = (id *)((char *)this + 312);
        v20 = v26;
      }
    }
    else if (a3 >= 2)
    {
      v29 = 0;
      v18 = objc_msgSend(v12, "newRenderPipelineStateWithDescriptor:error:", v10, &v29);
      v19 = (id *)((char *)this + 336);
      v20 = v29;
    }
    else
    {
      v28 = 0;
      v18 = objc_msgSend(v12, "newRenderPipelineStateWithDescriptor:error:", v10, &v28);
      v19 = (id *)((char *)this + 320);
      v20 = v28;
    }
    v16 = v20;
    v21 = *v19;
    *v19 = (id)v18;

    v8 = *v19;
    if (!v16)
    {
      v17 = 0;
      goto LABEL_26;
    }
    WTFLogAlways();
    v17 = v8;
LABEL_24:
    v8 = 0;
LABEL_26:

  }
  return v8;
}

void sub_182446CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182446CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182446D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebGPU::Device::indexedIndirectBufferClampPipeline(WebGPU::Device *this, unint64_t a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id *v9;
  void *v10;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  if (!*((_QWORD *)this + 1))
    return 0;
  v4 = 344;
  if (a2 > 1)
    v4 = 352;
  v5 = *(id *)((char *)this + v4);
  if (!v5)
  {
    if (!WebGPU::Device::indexedIndirectBufferClampPipeline(unsigned long)::function)
    {
      v6 = (void *)objc_opt_new();
      objc_msgSend(v6, "setFastMathEnabled:", 1);
      v15 = (void *)*((_QWORD *)this + 1);
      v21 = 0;
      v16 = (void *)objc_msgSend(v15, "newLibraryWithSource:options:error:", CFSTR("\n    using namespace metal;\n    [[vertex]] void vs(device const MTLDrawIndexedPrimitivesIndirectArguments& input [[buffer(0)]], device MTLDrawIndexedPrimitivesIndirectArguments& indexedOutput [[buffer(1)]], device MTLDrawPrimitivesIndirectArguments& output [[buffer(2)]], const constant uint* indexBufferCount [[buffer(3)]]) {\n\n        BOOL condition = input.indexCount + input.indexStart > indexBufferCount[0] || input.instanceCount + input.baseInstance > indexBufferCount[1] || input.baseInstance >= indexBufferCount[1];\n\n        indexedOutput.indexCount = metal::select(input.indexCount, 0u, condition);\n        indexedOutput.instanceCount = input.instanceCount;\n        indexedOutput.indexStart = metal::select(input.indexStart, 0u, condition);\n        indexedOutput.baseVertex = input.baseVertex;\n        indexedOutput.baseInstance = input.baseInstance;\n\n        output.vertexCount = metal::select(input.indexCount, 0u, condition);\n        output.instanceCount = 1;\n        output.vertexStart = input.indexStart;\n        output.baseInstance = 0;\n    }"),
                      v6,
                      &v21);
      v12 = v21;
      if (v12)
      {
        WTFLogAlways();

        v14 = 0;
        goto LABEL_14;
      }
      v17 = objc_msgSend(v16, "newFunctionWithName:", CFSTR("vs"));
      v18 = (void *)WebGPU::Device::indexedIndirectBufferClampPipeline(unsigned long)::function;
      WebGPU::Device::indexedIndirectBufferClampPipeline(unsigned long)::function = v17;

    }
    v6 = (void *)objc_opt_new();
    objc_msgSend(v6, "setVertexFunction:", WebGPU::Device::indexedIndirectBufferClampPipeline(unsigned long)::function);
    objc_msgSend(v6, "setRasterizationEnabled:", 0);
    objc_msgSend(v6, "setRasterSampleCount:", a2);
    objc_msgSend(v6, "setFragmentFunction:", 0);
    objc_msgSend(v6, "setInputPrimitiveTopology:", 1);
    v7 = (void *)*((_QWORD *)this + 1);
    if (a2 < 2)
    {
      v19 = 0;
      v8 = objc_msgSend(v7, "newRenderPipelineStateWithDescriptor:error:", v6, &v19);
      v9 = (id *)((char *)this + 344);
      v10 = v19;
    }
    else
    {
      v20 = 0;
      v8 = objc_msgSend(v7, "newRenderPipelineStateWithDescriptor:error:", v6, &v20);
      v9 = (id *)((char *)this + 352);
      v10 = v20;
    }
    v12 = v10;
    v13 = *v9;
    *v9 = (id)v8;

    v5 = *v9;
    if (!v12)
    {
      v14 = 0;
      goto LABEL_16;
    }
    WTFLogAlways();
    v14 = v5;
LABEL_14:
    v5 = 0;
LABEL_16:

  }
  return v5;
}

void sub_182446F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182446F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182446F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebGPU::Device::indirectBufferClampPipeline(WebGPU::Device *this, unint64_t a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id *v9;
  void *v10;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  if (!*((_QWORD *)this + 1))
    return 0;
  v4 = 360;
  if (a2 > 1)
    v4 = 368;
  v5 = *(id *)((char *)this + v4);
  if (!v5)
  {
    if (!WebGPU::Device::indirectBufferClampPipeline(unsigned long)::function)
    {
      v6 = (void *)objc_opt_new();
      objc_msgSend(v6, "setFastMathEnabled:", 1);
      v15 = (void *)*((_QWORD *)this + 1);
      v21 = 0;
      v16 = (void *)objc_msgSend(v15, "newLibraryWithSource:options:error:", CFSTR("\n    using namespace metal;\n    [[vertex]] void vs(device const MTLDrawPrimitivesIndirectArguments& input [[buffer(0)]], device MTLDrawPrimitivesIndirectArguments& output [[buffer(1)]], const constant uint* minCounts [[buffer(2)]]) {\n        BOOL vertexCondition = input.vertexCount + input.vertexStart > minCounts[0] || input.vertexStart >= minCounts[0];\n        BOOL instanceCondition = input.baseInstance + input.instanceCount > minCounts[1] || input.baseInstance >= minCounts[1];\n        BOOL condition = vertexCondition || instanceCondition;\n        output.vertexCount = metal::select(input.vertexCount, 0u, condition);\n        output.instanceCount = input.instanceCount;\n        output.vertexStart = input.vertexStart;\n        output.baseInstance = input.baseInstance;\n    }"),
                      v6,
                      &v21);
      v12 = v21;
      if (v12)
      {
        WTFLogAlways();

        v14 = 0;
        goto LABEL_14;
      }
      v17 = objc_msgSend(v16, "newFunctionWithName:", CFSTR("vs"));
      v18 = (void *)WebGPU::Device::indirectBufferClampPipeline(unsigned long)::function;
      WebGPU::Device::indirectBufferClampPipeline(unsigned long)::function = v17;

    }
    v6 = (void *)objc_opt_new();
    objc_msgSend(v6, "setVertexFunction:", WebGPU::Device::indirectBufferClampPipeline(unsigned long)::function);
    objc_msgSend(v6, "setRasterizationEnabled:", 0);
    objc_msgSend(v6, "setRasterSampleCount:", a2);
    objc_msgSend(v6, "setFragmentFunction:", 0);
    objc_msgSend(v6, "setInputPrimitiveTopology:", 1);
    v7 = (void *)*((_QWORD *)this + 1);
    if (a2 < 2)
    {
      v19 = 0;
      v8 = objc_msgSend(v7, "newRenderPipelineStateWithDescriptor:error:", v6, &v19);
      v9 = (id *)((char *)this + 360);
      v10 = v19;
    }
    else
    {
      v20 = 0;
      v8 = objc_msgSend(v7, "newRenderPipelineStateWithDescriptor:error:", v6, &v20);
      v9 = (id *)((char *)this + 368);
      v10 = v20;
    }
    v12 = v10;
    v13 = *v9;
    *v9 = (id)v8;

    v5 = *v9;
    if (!v12)
    {
      v14 = 0;
      goto LABEL_16;
    }
    WTFLogAlways();
    v14 = v5;
LABEL_14:
    v5 = 0;
LABEL_16:

  }
  return v5;
}

void sub_1824471B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1824471C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824471E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebGPU::Device::icbCommandClampPipeline(WebGPU::Device *this, MTLIndexType a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  id *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (!*((_QWORD *)this + 1))
    return 0;
  v6 = 384;
  if (a3 > 1)
    v6 = 400;
  v7 = 376;
  if (a3 > 1)
    v7 = 392;
  if (a2)
    v6 = v7;
  v8 = *(id *)((char *)this + v6);
  if (!v8)
  {
    v9 = (void *)objc_opt_new();
    WebGPU::Device::icbCommandClampFunction(this, a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setVertexFunction:", v10);

    objc_msgSend(v9, "setRasterizationEnabled:", 0);
    objc_msgSend(v9, "setRasterSampleCount:", a3);
    objc_msgSend(v9, "setFragmentFunction:", 0);
    objc_msgSend(v9, "setInputPrimitiveTopology:", 1);
    v11 = (void *)*((_QWORD *)this + 1);
    if (a2)
    {
      if (a3 >= 2)
      {
        v20 = 0;
        v13 = objc_msgSend(v11, "newRenderPipelineStateWithDescriptor:error:", v9, &v20);
        v14 = (id *)((char *)this + 392);
        v15 = v20;
      }
      else
      {
        v19 = 0;
        v13 = objc_msgSend(v11, "newRenderPipelineStateWithDescriptor:error:", v9, &v19);
        v14 = (id *)((char *)this + 376);
        v15 = v19;
      }
    }
    else if (a3 >= 2)
    {
      v22 = 0;
      v13 = objc_msgSend(v11, "newRenderPipelineStateWithDescriptor:error:", v9, &v22);
      v14 = (id *)((char *)this + 400);
      v15 = v22;
    }
    else
    {
      v21 = 0;
      v13 = objc_msgSend(v11, "newRenderPipelineStateWithDescriptor:error:", v9, &v21);
      v14 = (id *)((char *)this + 384);
      v15 = v21;
    }
    v16 = v15;
    v17 = *v14;
    *v14 = (id)v13;

    v8 = *v14;
    if (v16)
    {
      WTFLogAlways();
      v18 = v8;
      v8 = 0;
    }
    else
    {
      v18 = 0;
    }

  }
  return v8;
}

void sub_182447418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18244743C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebGPU::Device::icbCommandClampFunction(WebGPU::Device *this, MTLIndexType a2)
{
  void *v3;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v3 = (void *)qword_1EDB98CE0;
  if (!qword_1EDB98CE0)
  {
    v5 = (void *)objc_opt_new();
    objc_msgSend(v5, "setFastMathEnabled:", 1);
    v6 = (void *)*((_QWORD *)this + 1);
    v14 = 0;
    v7 = (void *)objc_msgSend(v6, "newLibraryWithSource:options:error:", CFSTR("\n    using namespace metal;\n    struct ICBContainer {\n        command_buffer commandBuffer [[ id(0) ]];\n    };\n    struct IndexDataUshort {\n        uint64_t renderCommand { 0 };\n        uint32_t minVertexCount { UINT_MAX };\n        uint32_t minInstanceCount { UINT_MAX };\n        device ushort* indexBuffer;\n        uint32_t indexCount { 0 };\n        uint32_t instanceCount { 0 };\n        uint32_t firstIndex { 0 };\n        int32_t baseVertex { 0 };\n        uint32_t baseInstance { 0 };\n        primitive_type primitiveType { primitive_type::triangle };\n    };\n    struct IndexDataUint {\n        uint64_t renderCommand { 0 };\n        uint32_t minVertexCount { UINT_MAX };\n        uint32_t minInstanceCount { UINT_MAX };\n        device uint* indexBuffer;\n        uint32_t indexCount { 0 };\n        uint32_t instanceCount { 0 };\n        uint32_t firstIndex { 0 };\n        int32_t baseVertex { 0 };\n        uint32_t baseInstance { 0 };\n        primitive_type primitiveType { primitive_type::triangle };\n    };\n\n    [[vertex]] void vs(device const IndexDataUint* indexData [[buffer(0)]],\n        device ICBContainer *icb_container [[buffer(1)]], // <-- must match Device::bufferIndexForICBContainer()\n        uint indexId [[vertex_id]]) {\n\n        device const IndexDataUint& data = *indexData;\n        uint32_t k = (data.primitiveType == primitive_type::triangle_strip || data.primitiveType == primitive_type::line_strip) ? 1 : 0;\n        uint32_t vertexIndex = data.indexBuffer[indexId] + k;\n        if (data.baseVertex + vertexIndex >= data.minVertexCount + k) {\n            render_command cmd(icb_container->commandBuffer, data.renderCommand);\n            cmd.draw_indexed_primitives(data.primitiveType,\n                0u,\n                data.indexBuffer,\n                data.instanceCount,\n                data.baseVertex,\n                data.baseInstance);\n        }\n    }\n\n    [[vertex]] void vsUshort(device const IndexDataUshort* indexData [[buffer(0)]],\n        device ICBContainer *icb_container [[buffer(1)]], // <-- must match Device::bufferIndexForICBContainer()\n        uint indexId [[vertex_id]]) {\n\n        device const IndexDataUshort& data = *indexData;\n        uint32_t k = (data.primitiveType == primitive_type::triangle_strip || data.primitiveType == primitive_type::line_strip) ? 1 : 0;\n        ushort vertexIndex = data.indexBuffer[indexId] + k;\n        if (data.baseVertex + vertexIndex >= data.minVertexCount + k) {\n            render_command cmd(icb_container->commandBuffer, data.renderCommand);\n            cmd.draw_indexed_primitives(data.primitiveType,\n                0u,\n                data.indexBuffer,\n                data.instanceCount,\n                data.baseVertex,\n                data.baseInstance);\n        }\n\n    }"),
                   v5,
                   &v14);
    v8 = v14;
    if (v8)
    {
      WTFLogAlways();

      return 0;
    }
    v10 = objc_msgSend(v7, "newFunctionWithName:", CFSTR("vs"));
    v11 = (void *)qword_1EDB98CE0;
    qword_1EDB98CE0 = v10;

    v12 = objc_msgSend(v7, "newFunctionWithName:", CFSTR("vsUshort"));
    v13 = (void *)qword_1EDB98CE8;
    qword_1EDB98CE8 = v12;

    v3 = (void *)qword_1EDB98CE0;
  }
  if (a2 == MTLIndexTypeUInt16)
    v3 = (void *)qword_1EDB98CE8;
  return v3;
}

void sub_18244757C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182447598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

unsigned __int8 **wgpuDeviceReference(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v3;

  v1 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
  }
  else if (!__stxr(1u, v1))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 **)MEMORY[0x186DAB1AC](v1);
LABEL_5:
  ++*((_QWORD *)v1 + 1);
  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (__stlxr(0, v1))
      return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  else
  {
    __clrex();
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  return result;
}

unsigned __int8 **wgpuDeviceRelease(unsigned __int8 **result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WebGPU::Device *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  void *v11;

  v2 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 **)MEMORY[0x186DAB1AC](v2);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 != 1)
  {
    v6 = 0;
    v7 = 1;
    v8 = __ldxr(v2);
    if (v8 == 1)
      goto LABEL_7;
LABEL_11:
    __clrex();
LABEL_12:
    result = (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return result;
    goto LABEL_13;
  }
  v9 = *((_QWORD *)v2 + 2);
  v6 = (WebGPU::Device *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  v7 = v9 != 0;
  LODWORD(v9) = __ldxr(v2);
  if ((_DWORD)v9 != 1)
    goto LABEL_11;
LABEL_7:
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return result;
LABEL_13:
  if (v6)
  {
    WebGPU::Device::~Device(v6);
    result = (unsigned __int8 **)WTF::fastFree(v10, v11);
  }
  if (!v7)
    return (unsigned __int8 **)WTF::fastFree((WTF *)v2, a2);
  return result;
}

uint64_t wgpuDeviceCreateBindGroup(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  WebGPU::Device::createBindGroup(a1, a2, &v3);
  return v3;
}

uint64_t wgpuDeviceCreateBindGroupLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  WebGPU::Device::createBindGroupLayout(a1, a2, 0, (WebGPU::BindGroupLayout *)&v3);
  return v3;
}

uint64_t wgpuDeviceCreateBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  WebGPU::Device::createBuffer(a1, a2, &v3);
  return v3;
}

uint64_t wgpuDeviceCreateCommandEncoder(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  WebGPU::Device::createCommandEncoder(a1, a2, &v3);
  return v3;
}

WebGPU::ComputePipeline *wgpuDeviceCreateComputePipeline(WebGPU::Device *a1, uint64_t a2)
{
  WebGPU::ComputePipeline *v2;
  void *v3;
  WebGPU::ComputePipeline *v4;
  WTF *v6;
  void *v7;
  WebGPU::ComputePipeline *v8[2];

  WebGPU::Device::createComputePipeline(a1, a2, 0, v8);
  v2 = v8[0];
  v8[0] = 0;

  v4 = v8[0];
  v8[0] = 0;
  if (!v4)
    return v2;
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return v2;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v4, v3);
  WTF::fastFree(v6, v7);
  return v2;
}

uint64_t wgpuDeviceCreateComputePipelineAsync(WebGPU::Device *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E0FD1808;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  WebGPU::Device::createComputePipelineAsync(a1, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_182447888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t wgpuDeviceCreatePipelineLayout(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  WebGPU::Device::createPipelineLayout(a1, a2, (NSString *)(a2[3] == 0), (WebGPU::PipelineLayout *)&v3);
  return v3;
}

uint64_t wgpuDeviceCreateQuerySet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  WebGPU::Device::createQuerySet(a1, a2, &v3);
  return v3;
}

uint64_t wgpuDeviceCreateRenderBundleEncoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  WebGPU::Device::createRenderBundleEncoder(a1, a2, (WebGPU::RenderBundleEncoder *)&v3);
  return v3;
}

WebGPU::RenderPipeline *wgpuDeviceCreateRenderPipeline(uint64_t a1, uint64_t a2)
{
  WebGPU::RenderPipeline *v2;
  void *v3;
  WebGPU::RenderPipeline *v4;
  WTF *v6;
  void *v7;
  WebGPU::RenderPipeline *v8[2];

  WebGPU::Device::createRenderPipeline(a1, a2, 0, v8);
  v2 = v8[0];
  v8[0] = 0;

  v4 = v8[0];
  v8[0] = 0;
  if (!v4)
    return v2;
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return v2;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, v3);
  WTF::fastFree(v6, v7);
  return v2;
}

uint64_t wgpuDeviceCreateRenderPipelineAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E0FD1830;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  WebGPU::Device::createRenderPipelineAsync(a1, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

void sub_182447A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebGPU::Sampler *wgpuDeviceCreateSampler(unsigned __int8 **a1, const WGPUSamplerDescriptor *a2)
{
  WebGPU::Sampler *v3;

  WebGPU::Device::createSampler(a1, a2, &v3);
  return v3;
}

WebGPU::ExternalTexture *wgpuDeviceImportExternalTexture(uint64_t a1, uint64_t a2)
{
  const void *v3;
  int v4;
  WebGPU::ExternalTexture *v5;

  if (*(_QWORD *)(a1 + 8))
  {
    v3 = *(const void **)(a2 + 16);
    v4 = *(_DWORD *)(a2 + 24);
    v5 = (WebGPU::ExternalTexture *)WTF::fastMalloc((WTF *)0x40);
    WebGPU::ExternalTexture::ExternalTexture((uint64_t)v5, v3, v4, (unsigned __int8 **)a1);
  }
  else
  {
    v5 = (WebGPU::ExternalTexture *)WTF::fastMalloc((WTF *)0x40);
    WebGPU::ExternalTexture::ExternalTexture(v5, (unsigned __int8 **)a1);
  }
  return v5;
}

void sub_182447AD0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_182447AE4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t wgpuDeviceCreateShaderModule(int32x2_t *a1, uint64_t *a2)
{
  uint64_t v3;

  WebGPU::Device::createShaderModule(a1, a2, &v3);
  return v3;
}

_DWORD *wgpuDeviceCreateSwapChain(uint64_t a1, _DWORD *a2)
{
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  ++a2[2];
  return a2;
}

uint64_t wgpuDeviceCreateTexture(WTF *a1, uint64_t a2)
{
  uint64_t v3;

  WebGPU::Device::createTexture(a1, a2, (WebGPU::Texture *)&v3);
  return v3;
}

void wgpuDeviceDestroy(uint64_t a1)
{
  *(_BYTE *)(a1 + 57) = 1;
  WebGPU::Device::loseTheDevice(a1, 1);
}

uint64_t wgpuDeviceEnumerateFeatures(uint64_t a1, void *__dst)
{
  uint64_t v3;

  if (__dst)
  {
    v3 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v3)
      memmove(__dst, *(const void **)(a1 + 216), 4 * v3);
  }
  return *(unsigned int *)(a1 + 228);
}

uint64_t wgpuDeviceGetLimits(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_QWORD *)a2)
    return 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 72);
  v3 = *(_OWORD *)(a1 + 88);
  v4 = *(_OWORD *)(a1 + 104);
  v5 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  v6 = *(_OWORD *)(a1 + 152);
  v7 = *(_OWORD *)(a1 + 168);
  v8 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 120) = v8;
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  return 1;
}

uint64_t wgpuDeviceGetQueue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t wgpuDeviceHasFeature(uint64_t a1, int a2)
{
  uint64_t v2;
  int *v3;
  int v4;

  v2 = *(unsigned int *)(a1 + 228);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(int **)(a1 + 216);
  while (1)
  {
    v4 = *v3++;
    if (v4 == a2)
      break;
    if (!--v2)
      return 0;
  }
  return 1;
}

_DWORD *wgpuDevicePopErrorScope(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _DWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  char v24;
  int v25;
  _QWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  char v30;
  int v31;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E0FD1858;
  v6[1] = a2;
  v6[2] = a3;
  if (*(_BYTE *)(a1 + 56))
  {
    v7 = 0;
    goto LABEL_3;
  }
  v9 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v9)
  {
    v7 = 4;
LABEL_3:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(_QWORD *, uint64_t, _DWORD **))(*v6 + 16))(v6, v7, &v22);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    result = v22;
    v22 = 0;
    if (!result)
      return result;
    if (*result != 2)
    {
      *result -= 2;
      return result;
    }
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  v10 = v9 - 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (int *)(v11 + 32 * v10);
  LOBYTE(v28) = 0;
  v30 = 0;
  v13 = *((unsigned __int8 *)v12 + 16);
  if (*((_BYTE *)v12 + 16))
  {
    v14 = *v12;
    v28 = *v12;
    a3 = (_DWORD *)*((_QWORD *)v12 + 1);
    *((_QWORD *)v12 + 1) = 0;
    v30 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(unsigned __int8 *)(v15 + 32 * v10 + 16);
    v17 = *(_DWORD *)(v11 + 32 * v10 + 24);
    v31 = v17;
    if (v16)
    {
      v18 = v15 + 32 * v10;
      v19 = *(_DWORD **)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      if (v19)
      {
        if (*v19 == 2)
          WTF::StringImpl::destroy();
        else
          *v19 -= 2;
      }
    }
    *(_DWORD *)(a1 + 44) = v10;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 16);
    LODWORD(v22) = v14;
    v29 = 0;
    v23 = a3;
    v24 = 1;
  }
  else
  {
    v17 = v12[6];
    v31 = v17;
    *(_DWORD *)(a1 + 44) = v10;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 16);
    LOBYTE(v22) = 0;
    v24 = 0;
  }
  v25 = v17;
  v26 = v6;
  v21 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v21 = &off_1E0FD17E0;
  *(_BYTE *)(v21 + 8) = 0;
  *(_BYTE *)(v21 + 24) = 0;
  if (v13)
  {
    *(_DWORD *)(v21 + 8) = (_DWORD)v22;
    v23 = 0;
    *(_QWORD *)(v21 + 16) = a3;
    *(_BYTE *)(v21 + 24) = 1;
    a3 = 0;
  }
  *(_DWORD *)(v21 + 32) = v17;
  v26 = 0;
  v27 = (_DWORD *)v21;
  *(_QWORD *)(v21 + 40) = v6;
  WebGPU::Instance::scheduleWork(v20, (uint64_t *)&v27);
  result = v27;
  if (v27)
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
  if (v13 && a3)
  {
    if (*a3 != 2)
    {
      *a3 -= 2;
      return result;
    }
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  return result;
}

void sub_182447E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
    WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0::~$_0((uint64_t)&a9);
    WebGPU::Device::ErrorScope::~ErrorScope((WebGPU::Device::ErrorScope *)&a15);
    _Unwind_Resume(a1);
  }
  WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0::~$_0((uint64_t)&a9);
  WebGPU::Device::ErrorScope::~ErrorScope((WebGPU::Device::ErrorScope *)&a15);
  _Unwind_Resume(a1);
}

void sub_182447EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (a9)
  {
    if (*a9 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a9 -= 2;
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

unint64_t wgpuDevicePushErrorScope(unint64_t result, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE v8[8];
  unint64_t v9;
  unsigned __int8 v10;
  int v11;

  v2 = result;
  v8[0] = 0;
  v10 = 0;
  v11 = a2;
  v3 = *(unsigned int *)(result + 44);
  if ((_DWORD)v3 == *(_DWORD *)(result + 40))
  {
    result = WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 32, v3 + 1, (unint64_t)v8);
    v4 = *(_QWORD *)(v2 + 32) + 32 * *(unsigned int *)(v2 + 44);
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 16) = 0;
    if (*(_BYTE *)(result + 16))
    {
      *(_DWORD *)v4 = *(_DWORD *)result;
      v5 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(v4 + 8) = v5;
      *(_BYTE *)(v4 + 16) = 1;
    }
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(result + 24);
    v6 = v10;
    ++*(_DWORD *)(v2 + 44);
    if (v6)
    {
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy();
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(result + 32) + 32 * v3;
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = a2;
    ++*(_DWORD *)(result + 44);
  }
  return result;
}

void sub_182448040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, char a11)
{
  if (a11 && a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void wgpuDeviceSetDeviceLostCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E0FD1880;
  v6[1] = a2;
  v6[2] = a3;
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*(_BYTE *)(a1 + 56))
  {
    WebGPU::Device::loseTheDevice(a1, 1);
  }
  else if (!*(_QWORD *)(*(_QWORD *)(a1 + 424) + 8))
  {
    WebGPU::Device::loseTheDevice(a1, 0);
  }
}

void wgpuDeviceSetDeviceLostCallbackWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = MEMORY[0x186DAB65C](a2);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E0FD18A8;
  v4[1] = v3;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(_BYTE *)(a1 + 56))
  {
    v6 = 1;
LABEL_5:
    WebGPU::Device::loseTheDevice(a1, v6);
    return;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 424) + 8))
  {
    v6 = 0;
    goto LABEL_5;
  }
}

void sub_1824481A4(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void sub_1824481B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t wgpuDeviceSetUncapturedErrorCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E0FD18D0;
  v6[1] = a2;
  v6[2] = a3;
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_DWORD *wgpuDeviceSetLabel(int a1, char *__s)
{
  _DWORD *result;
  _DWORD *v3;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  result = v3;
  if (v3)
  {
    if (*v3 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v3 -= 2;
  }
  return result;
}

void WebGPU::GPUFrameCapture::captureFrame(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CC6A48], "sharedCaptureManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isCapturing") & 1) == 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0CC6A40]);
    objc_msgSend(v3, "setCaptureObject:", v1);
    objc_msgSend(v3, "setDestination:", 2);
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "temporaryDirectory");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "UUIDString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("%@.gputrace"), v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "URLByAppendingPathComponent:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setOutputURL:", v10);

    v14 = 0;
    objc_msgSend(v2, "startCaptureWithDescriptor:error:", v3, &v14);
    v11 = v14;
    objc_msgSend(v3, "outputURL");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "absoluteString");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    WTFLogAlways();

  }
}

void sub_182448470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_182448520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182448534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182448544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebGPU::GPUFrameCapture::registerForFrameCapture(objc_object  {objcproto9MTLDevice}*)::{lambda(void)#1} &&>>()
{
  NSObject *v0;
  int v1;
  int out_token;

  out_token = 0;
  v0 = MEMORY[0x1E0C80D38];
  notify_register_dispatch("com.apple.WebKit.WebGPU.CaptureFrame", &out_token, MEMORY[0x1E0C80D38], &__block_literal_global);
  v1 = 0;
  notify_register_dispatch("com.apple.WebKit.WebGPU.ToggleCaptureFirstFrame", &v1, v0, &__block_literal_global_30);

}

void sub_1824485D0(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZZN6WebGPU15GPUFrameCapture23registerForFrameCaptureEPU19objcproto9MTLDevice11objc_objectENKUlvE_clEv_block_invoke(int a1, int token)
{
  uint64_t result;
  int v3;
  uint64_t state64;

  state64 = 0;
  result = notify_get_state(token, &state64);
  v3 = state64;
  if ((int)state64 <= 1)
    v3 = 1;
  WebGPU::GPUFrameCapture::maxSubmitCallsToCapture = v3;
  WebGPU::GPUFrameCapture::enabled = 1;
  return result;
}

void ___ZZN6WebGPU15GPUFrameCapture23registerForFrameCaptureEPU19objcproto9MTLDevice11objc_objectENKUlvE_clEv_block_invoke_2()
{
  _MergedGlobals ^= 1u;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;

  *(_QWORD *)a1 = &off_1E0FD17E0;
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (!*(_BYTE *)(a1 + 24))
    return a1;
  v3 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v3)
    return a1;
  if (*v3 != 2)
  {
    *v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E0FD17E0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 24))
  {
    v4 = (_DWORD *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v4)
    {
      if (*v4 == 2)
      {
        WTF::StringImpl::destroy();
        v5 = this;
        return WTF::fastFree(v5, a2);
      }
      *v4 -= 2;
    }
  }
  v5 = this;
  return WTF::fastFree(v5, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *result;
  uint64_t v4;
  _DWORD *v5;

  if (*(_BYTE *)(a1 + 24))
  {
    v1 = *(unsigned int *)(a1 + 8);
    v2 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1, a1 + 16);
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v5 = 0;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _QWORD, _DWORD **))(*(_QWORD *)v4 + 16))(v4, 0, &v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WTF::StringImpl::destroy();
      else
        *result -= 2;
    }
  }
  return result;
}

void sub_182448804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v10;
  uint64_t v11;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 0;
        v9 = 32 * v5;
        do
        {
          v10 = v7 + v8;
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 16) = 0;
          v11 = (char *)v4 + v8;
          if (*((_BYTE *)v4 + v8 + 16))
          {
            *(_DWORD *)v10 = *(_DWORD *)v11;
            v12 = *((_QWORD *)v11 + 1);
            *((_QWORD *)v11 + 1) = 0;
            *(_QWORD *)(v10 + 8) = v12;
            *(_BYTE *)(v10 + 16) = 1;
            LODWORD(v12) = v11[16];
            *(_DWORD *)(v10 + 24) = *((_DWORD *)v11 + 6);
            if ((_DWORD)v12)
            {
              result = *((_QWORD *)v11 + 1);
              *((_QWORD *)v11 + 1) = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy();
                else
                  *(_DWORD *)result -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)(v10 + 24) = *((_DWORD *)v11 + 6);
          }
          v8 += 32;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceCreateComputePipelineAsync::$_0,void,WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 8);
  v6 = *a3;
  *a3 = 0;
  return v5(a2, v6, a4, *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceCreateRenderPipelineAsync::$_0,void,WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 8);
  v6 = *a3;
  *a3 = 0;
  return v5(a2, v6, a4, *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<wgpuDevicePopErrorScope::$_0,void,WGPUErrorType,WTF::String &&>::call(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, char *, _QWORD);
  char *v5;
  void *v6;
  uint64_t result;
  WTF *v8;

  v4 = *(void (**)(uint64_t, char *, _QWORD))(a1 + 8);
  WTF::String::utf8();
  if (v8)
    v5 = (char *)v8 + 16;
  else
    v5 = 0;
  v4(a2, v5, *(_QWORD *)(a1 + 16));
  result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      return WTF::fastFree(v8, v6);
    else
      --*(_DWORD *)v8;
  }
  return result;
}

void sub_182448B44(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetDeviceLostCallback(WGPUDeviceImpl *,void (*)(WGPUDeviceLostReason,char const*,void *),void *)::$_0,void,WGPUDeviceLostReason,WTF::String &&>::call(uint64_t result, uint64_t a2)
{
  void (*v2)(uint64_t, char *, _QWORD);
  uint64_t v4;
  char *v5;
  void *v6;
  WTF *v7;

  v2 = *(void (**)(uint64_t, char *, _QWORD))(result + 8);
  if (v2)
  {
    v4 = result;
    WTF::String::utf8();
    if (v7)
      v5 = (char *)v7 + 16;
    else
      v5 = 0;
    v2(a2, v5, *(_QWORD *)(v4 + 16));
    result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        return WTF::fastFree(v7, v6);
      else
        --*(_DWORD *)v7;
    }
  }
  return result;
}

void sub_182448C18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetDeviceLostCallbackWithBlock(WGPUDeviceImpl *,void({block_pointer})(WGPUDeviceLostReason,char const*))::$_0,void,WGPUDeviceLostReason,WTF::String &&>::~CallableWrapper(uint64_t a1)
{

  return a1;
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetDeviceLostCallbackWithBlock(WGPUDeviceImpl *,void({block_pointer})(WGPUDeviceLostReason,char const*))::$_0,void,WGPUDeviceLostReason,WTF::String &&>::~CallableWrapper(id *a1)
{
  void *v2;

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetDeviceLostCallbackWithBlock(WGPUDeviceImpl *,void({block_pointer})(WGPUDeviceLostReason,char const*))::$_0,void,WGPUDeviceLostReason,WTF::String &&>::call(uint64_t result)
{
  uint64_t v1;
  void *v2;
  WTF *v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = result;
    WTF::String::utf8();
    (*(void (**)(void))(*(_QWORD *)(v1 + 8) + 16))();
    result = (uint64_t)v3;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
        return WTF::fastFree(v3, v2);
      else
        --*(_DWORD *)v3;
    }
  }
  return result;
}

void sub_182448D2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetUncapturedErrorCallback::$_0,void,WGPUErrorType,WTF::String &&>::call(uint64_t result, uint64_t a2)
{
  void (*v2)(uint64_t, char *, _QWORD);
  uint64_t v4;
  char *v5;
  void *v6;
  WTF *v7;

  v2 = *(void (**)(uint64_t, char *, _QWORD))(result + 8);
  if (v2)
  {
    v4 = result;
    WTF::String::utf8();
    if (v7)
      v5 = (char *)v7 + 16;
    else
      v5 = 0;
    v2(a2, v5, *(_QWORD *)(v4 + 16));
    result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        return WTF::fastFree(v7, v6);
      else
        --*(_DWORD *)v7;
    }
  }
  return result;
}

void sub_182448E00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebGPU::ExternalTexture::ExternalTexture(uint64_t a1, CFTypeRef cf, int a3, unsigned __int8 **a4)
{
  unsigned __int8 *v7;
  int v9;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  *(_DWORD *)(a1 + 24) = a3;
  v7 = *a4;
  if (__ldaxr(*a4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x186DAB1AC](v7);
LABEL_7:
  ++*((_QWORD *)v7 + 1);
  v9 = __ldxr(v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, v7))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_12:
  *(_QWORD *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_182448EE4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(_QWORD *)(v2 + 8);
  if (!v4)
  {
    *(_QWORD *)(v2 + 8) = 0;
    _Unwind_Resume(exception_object);
  }
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(unsigned int **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

WebGPU::ExternalTexture *WebGPU::ExternalTexture::ExternalTexture(WebGPU::ExternalTexture *this, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_5:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *((_QWORD *)this + 4) = a2;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_182448FF8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  const void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v5 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v5)
    CFRelease(v5);
  if (!*v3)
  {
    *v3 = 0;
    _Unwind_Resume(exception_object);
  }
  *((_QWORD *)*v3 + 1) = 0;
  v6 = *v3;
  *v3 = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::ExternalTexture::~ExternalTexture(WebGPU::ExternalTexture *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 4, a2);
  v10 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v9);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

_DWORD *wgpuExternalTextureReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::ExternalTexture *wgpuExternalTextureRelease(WebGPU::ExternalTexture *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::ExternalTexture::~ExternalTexture(result, a2);
    return (WebGPU::ExternalTexture *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void wgpuExternalTextureDestroy(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebGPU::CommandBuffer *v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)(a1 + 40) = 1;
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v5 = 0;
    v4 = 0;
LABEL_10:
    v7 = v5;
    v5 = v3 + 8 * v4;
    if (!v3)
    {
      v9 = 0;
      if (v7)
        goto LABEL_17;
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 8 * v4;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_10;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    v7 = *(_QWORD *)(a1 + 48);
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v7 = v5;
        break;
      }
    }
LABEL_8:
    v8 = *(unsigned int *)(v3 - 4);
    goto LABEL_14;
  }
  v8 = 0;
  v7 = *(_QWORD *)(a1 + 48);
LABEL_14:
  v9 = v3 + 8 * v8;
  if (v9 != v7)
  {
LABEL_17:
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v10 = v7 + 8;
      v7 = v5;
      if (v10 != v5)
      {
        v7 = v10;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v9)
      {
        v7 = v9;
        break;
      }
    }
  }
LABEL_24:
  if (v3)
  {
    v11 = v3 + 8 * *(unsigned int *)(v3 - 4);
    if (v7 == v11)
      goto LABEL_26;
    do
    {
LABEL_42:
      v18 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      *(_BYTE *)(v18 + 76) = 1;
      v19 = *(_QWORD *)(v18 + 56);
      if (v19)
      {
        v20 = *(WebGPU::CommandBuffer **)(v19 + 8);
        if (v20)
          WebGPU::CommandBuffer::makeInvalid(v20, *(NSString **)(v18 + 64));
      }
      v21 = v5;
      if (v7 + 8 != v5)
      {
        v21 = v7 + 8;
        while ((unint64_t)(*(_QWORD *)v21 + 1) <= 1)
        {
          v21 += 8;
          if (v21 == v5)
          {
            v21 = v5;
            break;
          }
        }
      }
      v7 = v9;
      if (v21 != v9)
      {
        v7 = v21;
        if (!*(_QWORD *)(*(_QWORD *)v21 + 8))
        {
          while (1)
          {
            v22 = v7 + 8;
            v7 = v5;
            if (v22 != v5)
            {
              v7 = v22;
              while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
              {
                v7 += 8;
                if (v7 == v5)
                {
                  v7 = v5;
                  break;
                }
              }
            }
            if (v7 == v9)
              break;
            if (*(_QWORD *)(*(_QWORD *)v7 + 8))
              goto LABEL_41;
          }
          v7 = v9;
        }
      }
LABEL_41:
      ++*(_DWORD *)(a1 + 56);
    }
    while (v7 != v11);
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
      goto LABEL_27;
LABEL_61:
    LODWORD(v17) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    goto LABEL_62;
  }
  v11 = 0;
  if (v7)
    goto LABEL_42;
LABEL_26:
  if (!v3)
    goto LABEL_61;
LABEL_27:
  *(_QWORD *)(a1 + 48) = 0;
  v12 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v14 = *(unsigned int **)(v3 + 8 * i);
      if (v14 != (unsigned int *)-1)
      {
        *(_QWORD *)(v3 + 8 * i) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, a2);
          }
        }
      }
    }
  }
  WTF::fastFree((WTF *)(v3 - 16), a2);
  v17 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 56) = 0;
  if (v17)
  {
    LODWORD(v17) = *(_DWORD *)(v17 - 12);
    if (v17 > 0x7FFFFFFE)
      LODWORD(v17) = 0x7FFFFFFF;
  }
LABEL_62:
  *(_DWORD *)(a1 + 60) = 2 * v17;
}

uint64_t wgpuExternalTextureUndestroy(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v2 = result;
  v3 = *(_QWORD *)(result + 48);
  if (v3)
  {
    *(_QWORD *)(result + 48) = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
      }
    }
    result = WTF::fastFree((WTF *)(v3 - 16), a2);
    v9 = *(_QWORD *)(v2 + 48);
    *(_DWORD *)(v2 + 56) = 0;
    if (v9)
    {
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
      if (v9 > 0x7FFFFFFE)
        LODWORD(v9) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v9) = 0;
    *(_DWORD *)(result + 56) = 0;
  }
  *(_DWORD *)(v2 + 60) = 2 * v9;
  *(_BYTE *)(v2 + 40) = 0;
  return result;
}

BOOL WebGPU::anyLimitIsBetterThan(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)(a1 + 4) > *(_DWORD *)(a2 + 4))
    return 1;
  if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a2 + 8))
    return 1;
  if (*(_DWORD *)(a1 + 12) > *(_DWORD *)(a2 + 12))
    return 1;
  if (*(_DWORD *)(a1 + 16) > *(_DWORD *)(a2 + 16))
    return 1;
  if (*(_DWORD *)(a1 + 24) > *(_DWORD *)(a2 + 24))
    return 1;
  if (*(_DWORD *)(a1 + 28) > *(_DWORD *)(a2 + 28))
    return 1;
  if (*(_DWORD *)(a1 + 32) > *(_DWORD *)(a2 + 32))
    return 1;
  if (*(_DWORD *)(a1 + 36) > *(_DWORD *)(a2 + 36))
    return 1;
  if (*(_DWORD *)(a1 + 40) > *(_DWORD *)(a2 + 40))
    return 1;
  if (*(_DWORD *)(a1 + 44) > *(_DWORD *)(a2 + 44))
    return 1;
  if (*(_DWORD *)(a1 + 48) > *(_DWORD *)(a2 + 48))
    return 1;
  if (*(_DWORD *)(a1 + 52) > *(_DWORD *)(a2 + 52))
    return 1;
  if (*(_QWORD *)(a1 + 56) > *(_QWORD *)(a2 + 56))
    return 1;
  if (*(_QWORD *)(a1 + 64) > *(_QWORD *)(a2 + 64))
    return 1;
  if (*(_DWORD *)(a1 + 72) < *(_DWORD *)(a2 + 72))
    return 1;
  if (*(_DWORD *)(a1 + 76) < *(_DWORD *)(a2 + 76))
    return 1;
  if (*(_DWORD *)(a1 + 80) > *(_DWORD *)(a2 + 80))
    return 1;
  if (*(_QWORD *)(a1 + 88) > *(_QWORD *)(a2 + 88))
    return 1;
  if (*(_DWORD *)(a1 + 96) > *(_DWORD *)(a2 + 96))
    return 1;
  if (*(_DWORD *)(a1 + 100) > *(_DWORD *)(a2 + 100))
    return 1;
  if (*(_DWORD *)(a1 + 104) > *(_DWORD *)(a2 + 104))
    return 1;
  if (*(_DWORD *)(a1 + 108) > *(_DWORD *)(a2 + 108))
    return 1;
  if (*(_DWORD *)(a1 + 112) > *(_DWORD *)(a2 + 112))
    return 1;
  if (*(_DWORD *)(a1 + 116) > *(_DWORD *)(a2 + 116))
    return 1;
  if (*(_DWORD *)(a1 + 120) > *(_DWORD *)(a2 + 120))
    return 1;
  if (*(_DWORD *)(a1 + 124) > *(_DWORD *)(a2 + 124))
    return 1;
  if (*(_DWORD *)(a1 + 128) > *(_DWORD *)(a2 + 128))
    return 1;
  if (*(_DWORD *)(a1 + 132) > *(_DWORD *)(a2 + 132))
    return 1;
  if (*(_DWORD *)(a1 + 136) <= *(_DWORD *)(a2 + 136))
    return *(_DWORD *)(a1 + 140) > *(_DWORD *)(a2 + 140);
  return 1;
}

void WebGPU::hardwareCapabilities(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int *v9;
  uint64_t v10;
  unsigned int v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  int *v24;
  uint64_t v25;
  unsigned int v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  WTF *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int *v39;
  uint64_t v40;
  unsigned int v41;
  int *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  WTF *v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  int v53;
  int v54;
  int *v55;
  int v56;
  int *v57;
  uint64_t v58;
  unsigned int v59;
  int *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  WTF *v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  WTF *v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  WTF *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[3];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  WTF *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  char v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int *v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  id v121;
  id v122;
  char v123;
  _OWORD *v124;
  int v125;
  int *v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  id v130;
  id v131;
  char v132;

  v3 = a1;
  LOBYTE(v92[0]) = 0;
  v105 = 0;
  v124 = v92;
  if (!objc_msgSend(v3, "supportsFamily:", 1004))
    goto LABEL_12;
  v4 = v3;
  WebGPU::baseCapabilities((uint64_t)&v128, v4);
  v129 = 1;
  v132 = 0;
  WebGPU::baseFeatures((uint64_t)&v126, v4);
  v125 = 5;
  v6 = v127;
  v5 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v7 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v8 = HIDWORD(v127);
    v9 = v126;
    v126[HIDWORD(v127)] = *v7;
    v5 = v8;
    v10 = (v8 + 1);
    HIDWORD(v127) = v10;
    v125 = 6;
    if ((_DWORD)v10 != (_DWORD)v127)
    {
LABEL_4:
      v11 = v5 + 2;
      v9[v10] = 6;
      goto LABEL_7;
    }
  }
  else
  {
    v9 = v126;
    v126[HIDWORD(v127)] = 5;
    v10 = (v5 + 1);
    HIDWORD(v127) = v10;
    v125 = 6;
    if ((_DWORD)v10 != v6)
      goto LABEL_4;
  }
  v12 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v10 + 1, (unint64_t)&v125);
  v11 = HIDWORD(v127) + 1;
  v9 = v126;
  v126[HIDWORD(v127)] = *v12;
LABEL_7:
  HIDWORD(v127) = v11;
  v13 = 126 - 2 * __clz(v11);
  if (v11)
    v14 = v13;
  else
    v14 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v9, &v9[v11], v14, 1);
  v106 = xmmword_18260ED00;
  v107 = xmmword_18260ECF0;
  v108 = xmmword_18260ECE0;
  v110 = xmmword_18260ED10;
  v109 = 0xC00000004;
  v111 = 0x10000000100;
  v112 = 8;
  v113 = 0x10000000;
  v114 = xmmword_18260ECC0;
  v115 = xmmword_18260ECB0;
  v116 = xmmword_18260ECA0;
  v15 = (WTF *)v126;
  v117 = v126;
  v118 = v127;
  v119 = v128;
  v120 = v129;
  v16 = v130;
  v121 = v16;
  v17 = v131;
  v122 = v17;
  v123 = 0;

  WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
  if (v15)
    WTF::fastFree(v15, v18);
LABEL_12:
  if (!objc_msgSend(v3, "supportsFamily:", 1005))
    goto LABEL_23;
  v19 = v3;
  WebGPU::baseCapabilities((uint64_t)&v128, v19);
  v129 = 1;
  v132 = 0;
  WebGPU::baseFeatures((uint64_t)&v126, v19);
  v125 = 5;
  v21 = v127;
  v20 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v22 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v23 = HIDWORD(v127);
    v24 = v126;
    v126[HIDWORD(v127)] = *v22;
    v20 = v23;
    v25 = (v23 + 1);
    HIDWORD(v127) = v25;
    v125 = 6;
    if ((_DWORD)v25 != (_DWORD)v127)
    {
LABEL_15:
      v26 = v20 + 2;
      v24[v25] = 6;
      goto LABEL_18;
    }
  }
  else
  {
    v24 = v126;
    v126[HIDWORD(v127)] = 5;
    v25 = (v20 + 1);
    HIDWORD(v127) = v25;
    v125 = 6;
    if ((_DWORD)v25 != v21)
      goto LABEL_15;
  }
  v27 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v25 + 1, (unint64_t)&v125);
  v26 = HIDWORD(v127) + 1;
  v24 = v126;
  v126[HIDWORD(v127)] = *v27;
LABEL_18:
  HIDWORD(v127) = v26;
  v28 = 126 - 2 * __clz(v26);
  if (v26)
    v29 = v28;
  else
    v29 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v24, &v24[v26], v29, 1);
  v106 = xmmword_18260ED00;
  v107 = xmmword_18260ECF0;
  v108 = xmmword_18260ECE0;
  v110 = xmmword_18260ED10;
  v109 = 0xC00000004;
  v111 = 0x10000000100;
  v112 = 8;
  v113 = 0x10000000;
  v114 = xmmword_18260ECC0;
  v115 = xmmword_18260ECB0;
  v116 = xmmword_18260ECA0;
  v30 = (WTF *)v126;
  v117 = v126;
  v118 = v127;
  v119 = v128;
  v120 = v129;
  v31 = v130;
  v121 = v31;
  v32 = v131;
  v122 = v32;
  v123 = 0;

  WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
  if (v30)
    WTF::fastFree(v30, v33);
LABEL_23:
  if (!objc_msgSend(v3, "supportsFamily:", 1006))
    goto LABEL_38;
  v34 = v3;
  WebGPU::baseCapabilities((uint64_t)&v128, v34);
  v129 = 1;
  v132 = 0;
  WebGPU::baseFeatures((uint64_t)&v126, v34);
  v125 = 5;
  v36 = v127;
  v35 = HIDWORD(v127);
  if (HIDWORD(v127) != (_DWORD)v127)
  {
    v39 = v126;
    v126[HIDWORD(v127)] = 5;
    v40 = (v35 + 1);
    HIDWORD(v127) = v40;
    v125 = 6;
    if ((_DWORD)v40 != v36)
      goto LABEL_26;
LABEL_28:
    v42 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v40 + 1, (unint64_t)&v125);
    v41 = HIDWORD(v127) + 1;
    v39 = v126;
    v126[HIDWORD(v127)] = *v42;
    goto LABEL_29;
  }
  v37 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
  v38 = HIDWORD(v127);
  v39 = v126;
  v126[HIDWORD(v127)] = *v37;
  v35 = v38;
  v40 = (v38 + 1);
  HIDWORD(v127) = v40;
  v125 = 6;
  if ((_DWORD)v40 == (_DWORD)v127)
    goto LABEL_28;
LABEL_26:
  v41 = v35 + 2;
  v39[v40] = 6;
LABEL_29:
  HIDWORD(v127) = v41;
  v43 = 126 - 2 * __clz(v41);
  if (v41)
    v44 = v43;
  else
    v44 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v39, &v39[v41], v44, 1);
  v106 = xmmword_18260F010;
  v107 = xmmword_18260F020;
  v108 = xmmword_18260F030;
  v109 = 0x2C0000002CLL;
  v110 = 0uLL;
  v111 = 0x2000000020;
  v112 = 12;
  v45 = objc_msgSend(v34, "maxBufferLength");
  v46 = v45 / 0xA;
  if (v45 / 0xA <= 0x10000000)
    v46 = 0x10000000;
  v47 = v46 & 0x1FFFFFFFFFFFFFFCLL;
  if (v45 >= 0x4FFFFFFF6)
    v47 = 2147483644;
  v113 = v47;
  v114 = xmmword_18260F040;
  v115 = xmmword_18260F050;
  v116 = xmmword_18260F060;
  v48 = (WTF *)v126;
  v117 = v126;
  v118 = v127;
  v119 = v128;
  v120 = v129;
  v49 = v130;
  v121 = v49;
  v50 = v131;
  v122 = v50;
  v123 = 0;

  WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
  if (v48)
    WTF::fastFree(v48, v51);
LABEL_38:
  if (!objc_msgSend(v3, "supportsFamily:", 1007))
    goto LABEL_53;
  v52 = v3;
  WebGPU::baseCapabilities((uint64_t)&v128, v52);
  v129 = 1;
  v132 = 0;
  WebGPU::baseFeatures((uint64_t)&v126, v52);
  v125 = 5;
  v54 = v127;
  v53 = HIDWORD(v127);
  if (HIDWORD(v127) != (_DWORD)v127)
  {
    v57 = v126;
    v126[HIDWORD(v127)] = 5;
    v58 = (v53 + 1);
    HIDWORD(v127) = v58;
    v125 = 6;
    if ((_DWORD)v58 != v54)
      goto LABEL_41;
LABEL_43:
    v60 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v58 + 1, (unint64_t)&v125);
    v59 = HIDWORD(v127) + 1;
    v57 = v126;
    v126[HIDWORD(v127)] = *v60;
    goto LABEL_44;
  }
  v55 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
  v56 = HIDWORD(v127);
  v57 = v126;
  v126[HIDWORD(v127)] = *v55;
  v53 = v56;
  v58 = (v56 + 1);
  HIDWORD(v127) = v58;
  v125 = 6;
  if ((_DWORD)v58 == (_DWORD)v127)
    goto LABEL_43;
LABEL_41:
  v59 = v53 + 2;
  v57[v58] = 6;
LABEL_44:
  HIDWORD(v127) = v59;
  v61 = 126 - 2 * __clz(v59);
  if (v59)
    v62 = v61;
  else
    v62 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v57, &v57[v59], v62, 1);
  v106 = xmmword_18260F010;
  v107 = xmmword_18260F020;
  v108 = xmmword_18260F030;
  v109 = 0x2C0000002CLL;
  v110 = 0uLL;
  v111 = 0x2000000020;
  v112 = 12;
  v63 = objc_msgSend(v52, "maxBufferLength");
  v64 = v63 / 0xA;
  if (v63 / 0xA <= 0x10000000)
    v64 = 0x10000000;
  v65 = v64 & 0x1FFFFFFFFFFFFFFCLL;
  if (v63 >= 0x4FFFFFFF6)
    v65 = 2147483644;
  v113 = v65;
  v114 = xmmword_18260F040;
  v115 = xmmword_18260F050;
  v116 = xmmword_18260F060;
  v66 = (WTF *)v126;
  v117 = v126;
  v118 = v127;
  v119 = v128;
  v120 = v129;
  v67 = v130;
  v121 = v67;
  v68 = v131;
  v122 = v68;
  v123 = 0;

  WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
  if (v66)
    WTF::fastFree(v66, v69);
LABEL_53:
  if (objc_msgSend(v3, "supportsFamily:", 2002))
  {
    v70 = v3;
    WebGPU::baseCapabilities((uint64_t)&v128, v70);
    v129 = 0;
    WebGPU::baseFeatures((uint64_t)&v126, v70);
    v71 = (WTF *)v126;
    v72 = HIDWORD(v127);
    v73 = 126 - 2 * __clz(HIDWORD(v127));
    if (HIDWORD(v127))
      v74 = v73;
    else
      v74 = 0;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v126, &v126[HIDWORD(v127)], v74, 1);
    v106 = xmmword_18260F010;
    v107 = xmmword_18260F070;
    v108 = xmmword_18260F030;
    v109 = 0x2C0000002CLL;
    v110 = 0uLL;
    v111 = 0x10000000100;
    v112 = 12;
    v75 = objc_msgSend(v70, "maxBufferLength");
    v76 = v75 / 0xA;
    if (v75 / 0xA <= 0x10000000)
      v76 = 0x10000000;
    v77 = v76 & 0x1FFFFFFFFFFFFFFCLL;
    if (v75 >= 0x4FFFFFFF6)
      v77 = 2147483644;
    v113 = v77;
    v114 = xmmword_18260F080;
    v115 = xmmword_18260F050;
    v116 = xmmword_18260F060;
    v117 = (int *)v71;
    v118 = __PAIR64__(v72, v127);
    v119 = v128;
    v120 = v129;
    v78 = v130;
    v121 = v78;
    v79 = v131;
    v122 = v79;
    v123 = 1;

    WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
    if (v71)
      WTF::fastFree(v71, v80);
  }
  if (!v105)
  {
LABEL_70:

    if (v105)
    {
      v106 = xmmword_18260ED00;
      v107 = xmmword_18260ECF0;
      v108 = xmmword_18260ECE0;
      v110 = xmmword_18260ED10;
      v109 = 0xC00000004;
      v111 = 0x10000000100;
      v112 = 8;
      v113 = 0x10000000;
      v114 = xmmword_18260ECC0;
      v115 = xmmword_18260ECB0;
      v116 = xmmword_18260ECA0;
      if (WebGPU::anyLimitIsBetterThan((uint64_t)&v106, (uint64_t)v92))
      {
        *(_BYTE *)a2 = 0;
        v84 = (void *)*((_QWORD *)&v103 + 1);
        *(_BYTE *)(a2 + 200) = 0;

        v86 = v99;
        if (!v99)
          goto LABEL_77;
        goto LABEL_76;
      }
      v87 = v97;
      *(_OWORD *)(a2 + 96) = v96;
      *(_OWORD *)(a2 + 112) = v87;
      *(_OWORD *)(a2 + 128) = v98;
      v88 = v93;
      *(_OWORD *)(a2 + 32) = v92[2];
      *(_OWORD *)(a2 + 48) = v88;
      v89 = v95;
      *(_OWORD *)(a2 + 64) = v94;
      *(_OWORD *)(a2 + 80) = v89;
      v90 = v92[1];
      *(_OWORD *)a2 = v92[0];
      *(_OWORD *)(a2 + 16) = v90;
      *(_QWORD *)(a2 + 144) = v99;
      *(_QWORD *)&v90 = v100;
      v99 = 0;
      v100 = 0;
      *(_QWORD *)(a2 + 152) = v90;
      *(_QWORD *)(a2 + 160) = v101;
      *(_BYTE *)(a2 + 168) = v102;
      v91 = v103;
      v103 = 0uLL;
      *(_BYTE *)(a2 + 192) = v104;
      *(_OWORD *)(a2 + 176) = v91;
      *(_BYTE *)(a2 + 200) = 1;

      v86 = v99;
      if (v99)
      {
LABEL_76:
        v99 = 0;
        LODWORD(v100) = 0;
        WTF::fastFree(v86, v85);
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 200) = 0;
    }
LABEL_77:

    return;
  }
  v81 = objc_msgSend(v3, "maxBufferLength");
  if (v105)
  {
    v82 = v81 / 0xA;
    if (v81 / 0xA <= 0x10000000)
      v82 = 0x10000000;
    v83 = v82 & 0x1FFFFFFFFFFFFFFCLL;
    if (v81 >= 0x4FFFFFFF6)
      v83 = 2147483644;
    *((_QWORD *)&v93 + 1) = v83;
    *(_QWORD *)&v94 = v83;
    goto LABEL_70;
  }
  __break(1u);
}

void sub_18244A3C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  uint64_t v11;
  WTF *v13;

  v13 = *(WTF **)(v11 - 152);
  if (v13)
    WTF::fastFree(v13, a2);

  std::optional<WebGPU::HardwareCapabilities>::~optional((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18244A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::optional<WebGPU::HardwareCapabilities>::~optional((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t std::optional<WebGPU::HardwareCapabilities>::~optional(uint64_t a1)
{
  void *v2;
  WTF *v3;

  if (*(_BYTE *)(a1 + 200))
  {

    v3 = *(WTF **)(a1 + 144);
    if (v3)
    {
      *(_QWORD *)(a1 + 144) = 0;
      *(_DWORD *)(a1 + 152) = 0;
      WTF::fastFree(v3, v2);
    }
  }
  return a1;
}

double wgpuDefaultLimits@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_18260ED00;
  *(_OWORD *)(a1 + 16) = xmmword_18260ECF0;
  *(_OWORD *)(a1 + 32) = xmmword_18260ECE0;
  *(_QWORD *)(a1 + 48) = 0xC00000004;
  *(_OWORD *)(a1 + 56) = xmmword_18260ED10;
  *(_QWORD *)(a1 + 72) = 0x10000000100;
  *(_DWORD *)(a1 + 80) = 8;
  *(_QWORD *)(a1 + 88) = 0x10000000;
  *(_OWORD *)(a1 + 96) = xmmword_18260ECC0;
  *(_OWORD *)(a1 + 112) = xmmword_18260ECB0;
  *(_QWORD *)&result = 0x10000000100;
  *(_OWORD *)(a1 + 128) = xmmword_18260ECA0;
  return result;
}

void WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  unsigned int v11;
  unint64_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  int8x16_t v15;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  uint32x2_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _DWORD *v32;
  unint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  int v49;
  _DWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int *v56;
  __int128 *v57;
  _OWORD *v58;
  __int128 v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unsigned int *v66;
  __int128 *v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  WTF *v81;
  uint64_t v82;
  int v83;
  int v84;
  id v85;
  id v86;
  uint64_t v87;
  id v88;
  BOOL v89;
  void *v90;
  void *v91;

  v2 = a2;
  v3 = *a1;
  if (!*(_BYTE *)(*a1 + 200))
  {
    *(_OWORD *)v3 = *(_OWORD *)a2;
    v36 = *(_OWORD *)(a2 + 16);
    v37 = *(_OWORD *)(a2 + 32);
    v38 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v3 + 64) = v38;
    *(_OWORD *)(v3 + 16) = v36;
    *(_OWORD *)(v3 + 32) = v37;
    v39 = *(_OWORD *)(a2 + 80);
    v40 = *(_OWORD *)(a2 + 96);
    v41 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v3 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v3 + 128) = v41;
    *(_OWORD *)(v3 + 80) = v39;
    *(_OWORD *)(v3 + 96) = v40;
    v42 = *(unsigned int *)(a2 + 156);
    *(_QWORD *)(v3 + 144) = 0;
    *(_QWORD *)(v3 + 152) = 0;
    *(_DWORD *)(v3 + 156) = v42;
    if ((_DWORD)v42)
    {
      if (v42 >> 30)
        goto LABEL_84;
      v43 = (void *)WTF::fastMalloc((WTF *)(4 * v42));
      *(_DWORD *)(v3 + 152) = v42;
      *(_QWORD *)(v3 + 144) = v43;
      memcpy(v43, *(const void **)(v2 + 144), 4 * *(unsigned int *)(v2 + 156));
    }
    v44 = *(_QWORD *)(v2 + 160);
    *(_BYTE *)(v3 + 168) = *(_BYTE *)(v2 + 168);
    *(_QWORD *)(v3 + 160) = v44;
    *(_QWORD *)(v3 + 176) = *(id *)(v2 + 176);
    *(_QWORD *)(v3 + 184) = *(id *)(v2 + 184);
    *(_BYTE *)(v3 + 192) = *(_BYTE *)(v2 + 192);
    *(_BYTE *)(v3 + 200) = 1;
    return;
  }
  v5 = *(_DWORD *)(v3 + 32);
  if (v5 <= *(_DWORD *)(a2 + 32))
    v5 = *(_DWORD *)(a2 + 32);
  v6 = *(_DWORD *)(v3 + 52);
  if (v6 <= *(_DWORD *)(a2 + 52))
    v6 = *(_DWORD *)(a2 + 52);
  if (v6 >= 0x3E8)
    v6 = 1000;
  v7 = (int8x8_t)vadd_s32(*(int32x2_t *)(v3 + 72), (int32x2_t)-1);
  v8 = (int8x8_t)vshr_n_u32((uint32x2_t)v7, 1uLL);
  v9 = (int8x8_t)vadd_s32(*(int32x2_t *)(a2 + 72), (int32x2_t)-1);
  v10 = (int8x8_t)vshr_n_u32((uint32x2_t)v9, 1uLL);
  v11 = *(_DWORD *)(v3 + 80);
  if (v11 <= *(_DWORD *)(a2 + 80))
    v11 = *(_DWORD *)(a2 + 80);
  v12 = *(_QWORD *)(v3 + 88);
  if (v12 <= *(_QWORD *)(a2 + 88))
    v12 = *(_QWORD *)(a2 + 88);
  v13 = vmaxq_u32(*(uint32x4_t *)(v3 + 16), *(uint32x4_t *)(a2 + 16));
  v14 = vminq_u32(vmaxq_u32(*(uint32x4_t *)(v3 + 36), *(uint32x4_t *)(a2 + 36)), (uint32x4_t)vdupq_n_s32(0x3E8u));
  v15 = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(v3 + 56), *(uint64x2_t *)(a2 + 56)), *(int8x16_t *)(v3 + 56), *(int8x16_t *)(a2 + 56));
  v16 = vorr_s8(v8, v7);
  v17 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v16, 2uLL), v16);
  v18 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v17, 4uLL), v17);
  v19 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 8uLL), v18);
  v20 = vorr_s8(v10, v9);
  v21 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v20, 2uLL), v20);
  v22 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v21, 4uLL), v21);
  v23 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v22, 8uLL), v22);
  v24 = vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v23, 0x10uLL), v23), (int32x2_t)0x100000001), (uint32x2_t)vadd_s32((int32x2_t)vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v19, 0x10uLL), v19), (int32x2_t)0x100000001));
  v25 = vmaxq_u32(*(uint32x4_t *)(v3 + 96), *(uint32x4_t *)(a2 + 96));
  v26 = vmaxq_u32(*(uint32x4_t *)(v3 + 112), *(uint32x4_t *)(a2 + 112));
  v27 = vmaxq_u32(*(uint32x4_t *)(v3 + 128), *(uint32x4_t *)(a2 + 128));
  *(uint32x4_t *)v3 = vmaxq_u32(*(uint32x4_t *)v3, *(uint32x4_t *)a2);
  *(uint32x4_t *)(v3 + 16) = v13;
  *(_DWORD *)(v3 + 32) = v5;
  *(uint32x4_t *)(v3 + 36) = v14;
  *(_DWORD *)(v3 + 52) = v6;
  *(int8x16_t *)(v3 + 56) = v15;
  *(uint32x2_t *)(v3 + 72) = v24;
  *(_DWORD *)(v3 + 80) = v11;
  *(_QWORD *)(v3 + 88) = v12;
  *(uint32x4_t *)(v3 + 96) = v25;
  *(uint32x4_t *)(v3 + 112) = v26;
  *(uint32x4_t *)(v3 + 128) = v27;
  v28 = *(unsigned int *)(v3 + 156);
  v29 = *(unsigned int *)(a2 + 156);
  v30 = v29 + v28;
  if (v29 + v28)
  {
    if (!(v30 >> 30))
    {
      v31 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v30));
      v28 = *(unsigned int *)(v3 + 156);
      v29 = *(unsigned int *)(v2 + 156);
      v32 = *(_DWORD **)(v3 + 144);
      v33 = (unint64_t)&v32[v28];
      v34 = *(unsigned int **)(v2 + 144);
      v35 = (unint64_t)&v34[v29];
      if (!(_DWORD)v29)
        goto LABEL_33;
      goto LABEL_21;
    }
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x18244AAFCLL);
  }
  v31 = 0;
  v32 = *(_DWORD **)(v3 + 144);
  v33 = (unint64_t)&v32[v28];
  v34 = *(unsigned int **)(a2 + 144);
  v35 = (unint64_t)&v34[v29];
  if (!(_DWORD)v29)
  {
LABEL_33:
    v45 = (unint64_t)v32;
    v46 = (unint64_t)v34;
    v50 = v31;
    goto LABEL_34;
  }
LABEL_21:
  if (!(_DWORD)v28)
    goto LABEL_33;
  v45 = (unint64_t)v32;
  v46 = (unint64_t)v34;
  v47 = v31;
LABEL_23:
  while (2)
  {
    v48 = v47;
    while (1)
    {
      v49 = *(_DWORD *)v45;
      a2 = *(unsigned int *)v46;
      if (*(_DWORD *)v45 < (int)a2)
      {
        *v48 = v49;
        v47 = v48 + 1;
        v45 += 4;
        if (v45 < v33)
          goto LABEL_23;
        goto LABEL_32;
      }
      if (v49 == (_DWORD)a2)
        break;
      v50 = v48 + 1;
      *v48 = a2;
      v46 += 4;
      ++v48;
      if (v46 >= v35)
        goto LABEL_34;
    }
    *v48 = v49;
    v47 = v48 + 1;
    v45 += 4;
    v46 += 4;
    if (v45 < v33 && v46 < v35)
      continue;
    break;
  }
LABEL_32:
  v50 = v48 + 1;
LABEL_34:
  if (v45 >= v33)
  {
    v55 = v50;
    goto LABEL_46;
  }
  v51 = (unint64_t)&v32[v28];
  if (v51 <= v45 + 4)
    v51 = v45 + 4;
  v52 = v51 + ~v45;
  if (v52 < 0x1C || (unint64_t)v50 - v45 < 0x20)
  {
    v55 = v50;
    v56 = (int *)v45;
    do
    {
LABEL_45:
      v60 = *v56++;
      *v55++ = v60;
    }
    while ((unint64_t)v56 < v33);
    goto LABEL_46;
  }
  v53 = (v52 >> 2) + 1;
  v54 = v53 & 0x7FFFFFFFFFFFFFF8;
  v55 = &v50[v54];
  v56 = (int *)(v45 + v54 * 4);
  v57 = (__int128 *)(v45 + 16);
  v58 = v50 + 4;
  a2 = v53 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v59 = *v57;
    *(v58 - 1) = *(v57 - 1);
    *v58 = v59;
    v57 += 2;
    v58 += 2;
    a2 -= 8;
  }
  while (a2);
  if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_45;
LABEL_46:
  if (v46 >= v35)
  {
    v65 = (char *)v55;
    goto LABEL_58;
  }
  v61 = (unint64_t)&v34[v29];
  if (v61 <= v46 + 4)
    v61 = v46 + 4;
  v62 = v61 + ~v46;
  if (v62 < 0x1C || (unint64_t)v55 - v46 < 0x20)
  {
    v65 = (char *)v55;
    v66 = (unsigned int *)v46;
    do
    {
LABEL_57:
      v71 = *v66++;
      *(_DWORD *)v65 = v71;
      v65 += 4;
    }
    while ((unint64_t)v66 < v35);
    goto LABEL_58;
  }
  v63 = (v62 >> 2) + 1;
  v64 = v63 & 0x7FFFFFFFFFFFFFF8;
  v65 = (char *)&v55[v64];
  v66 = (unsigned int *)(v46 + v64 * 4);
  v67 = (__int128 *)(v46 + 16);
  v68 = v55 + 4;
  v69 = v63 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v70 = *v67;
    *(v68 - 1) = *(v67 - 1);
    *v68 = v70;
    v67 += 2;
    v68 += 2;
    v69 -= 8;
  }
  while (v69);
  if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_57;
LABEL_58:
  v72 = v65 - v31;
  v73 = (v65 - v31) >> 2;
  v74 = v30;
  if (v30 < v73 && v73 > v30)
  {
    v77 = v30 + (v30 >> 2);
    if (v77 >= 0x10)
      v78 = v77 + 1;
    else
      v78 = 16;
    if (v78 <= v73)
      v30 = v73;
    else
      v30 = v78;
    if (v30 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x18244AB04);
    }
    v76 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v30));
    memcpy(v76, v31, 4 * v74);
    if (v31)
    {
      if (v76 == v31)
      {
        LODWORD(v30) = 0;
        v76 = 0;
      }
      WTF::fastFree((WTF *)v31, (void *)a2);
    }
  }
  else
  {
    v76 = v31;
  }
  v79 = *a1;
  if (!*(_BYTE *)(*a1 + 200))
    goto LABEL_81;
  v80 = v72 >> 2;
  v81 = *(WTF **)(v79 + 144);
  if (v81)
  {
    *(_QWORD *)(v79 + 144) = 0;
    *(_DWORD *)(v79 + 152) = 0;
    WTF::fastFree(v81, (void *)a2);
    *(_QWORD *)(v79 + 144) = v76;
    *(_DWORD *)(v79 + 152) = v30;
    *(_DWORD *)(v79 + 156) = v80;
    v79 = *a1;
    if (!*(_BYTE *)(*a1 + 200))
      goto LABEL_81;
  }
  else
  {
    *(_QWORD *)(v79 + 144) = v76;
    *(_DWORD *)(v79 + 152) = v30;
    *(_DWORD *)(v79 + 156) = v80;
  }
  v82 = *(_QWORD *)(v79 + 160);
  v83 = *(unsigned __int8 *)(v79 + 168);
  v84 = *(unsigned __int8 *)(v2 + 168);
  v85 = *(id *)(v79 + 176);
  v86 = *(id *)(v79 + 184);
  v87 = *a1;
  if (!*(_BYTE *)(v87 + 200))
  {
LABEL_81:
    __break(1u);
    goto LABEL_84;
  }
  v88 = v86;
  v89 = (*(unsigned __int8 *)(v79 + 192) | *(unsigned __int8 *)(v2 + 192)) != 0;
  *(_QWORD *)(v87 + 160) = v82;
  *(_BYTE *)(v87 + 168) = (v83 | v84) != 0;
  v90 = *(void **)(v87 + 176);
  *(_QWORD *)(v87 + 176) = v85;

  v91 = *(void **)(v87 + 184);
  *(_QWORD *)(v87 + 184) = v88;

  *(_BYTE *)(v87 + 192) = v89;
}

void sub_18244AB10(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void WebGPU::baseCapabilities(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t i;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id obj;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  objc_msgSend(v3, "counterSets");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  v18 = a1;
  v5 = 0;
  if (v4)
  {
    v21 = 0;
    v6 = *(_QWORD *)v23;
    v7 = *MEMORY[0x1E0CC6970];
    v19 = *MEMORY[0x1E0CC6968];
    v8 = v3;
    while (1)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        objc_msgSend(v10, "name", v18);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqualToString:", v7);

        if ((v12 & 1) != 0)
        {
          v13 = v21;
          v14 = v5;
          v21 = v10;
        }
        else
        {
          objc_msgSend(v10, "name");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "isEqualToString:", v19);

          v13 = v5;
          v14 = v10;
          if ((v16 & 1) == 0)
            goto LABEL_4;
        }
        v17 = v10;

        v5 = v14;
LABEL_4:
        v3 = v8;
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (!v4)
        goto LABEL_14;
    }
  }
  v21 = 0;
LABEL_14:

  *(_QWORD *)v18 = objc_msgSend(v3, "argumentBuffersSupport");
  *(_BYTE *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = v5;
  *(_BYTE *)(v18 + 32) = 0;

}

void sub_18244AD10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebGPU::baseFeatures(uint64_t a1, void *a2)
{
  id v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;

  v3 = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v22 = 1;
  v4 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, 1uLL, (unint64_t)&v22);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = *v4;
  v8 = (v7 + 1);
  *(_DWORD *)(a1 + 12) = v8;
  v9 = 2;
  v22 = 2;
  if ((_DWORD)v8 == v6)
  {
    v10 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v8 + 1, (unint64_t)&v22);
    v6 = *(_DWORD *)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 12);
    LODWORD(v7) = v8 + 1;
    v5 = *(_QWORD *)a1;
    v9 = *v10;
  }
  else
  {
    LODWORD(v7) = v7 + 2;
  }
  *(_DWORD *)(v5 + 4 * v8) = v9;
  *(_DWORD *)(a1 + 12) = v7;
  v22 = 7;
  if ((_DWORD)v7 == v6)
  {
    v11 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v7 + 1, (unint64_t)&v22);
    v5 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 12);
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = *v11;
    v12 = (v7 + 1);
    *(_DWORD *)(a1 + 12) = v12;
    v13 = 9;
    v22 = 9;
    if ((_DWORD)v12 != v6)
    {
LABEL_6:
      LODWORD(v7) = v7 + 2;
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 4 * v7) = 7;
    v12 = (v7 + 1);
    *(_DWORD *)(a1 + 12) = v12;
    v13 = 9;
    v22 = 9;
    if ((_DWORD)v12 != v6)
      goto LABEL_6;
  }
  v14 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v12 + 1, (unint64_t)&v22);
  v6 = *(_DWORD *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  LODWORD(v7) = v12 + 1;
  v5 = *(_QWORD *)a1;
  v13 = *v14;
LABEL_9:
  *(_DWORD *)(v5 + 4 * v12) = v13;
  *(_DWORD *)(a1 + 12) = v7;
  v22 = 8;
  if ((_DWORD)v7 == v6)
  {
    v15 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v7 + 1, (unint64_t)&v22);
    v5 = *(_QWORD *)a1;
    v16 = *(_DWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 12);
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = *v15;
    v17 = (v7 + 1);
    *(_DWORD *)(a1 + 12) = v17;
    v22 = 10;
    if ((_DWORD)v17 != v16)
    {
LABEL_11:
      LODWORD(v18) = v7 + 2;
      *(_DWORD *)(v5 + 4 * v17) = 10;
      goto LABEL_14;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 4 * v7) = 8;
    v17 = (v7 + 1);
    *(_DWORD *)(a1 + 12) = v17;
    v22 = 10;
    if ((_DWORD)v17 != v6)
      goto LABEL_11;
  }
  v19 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v17 + 1, (unint64_t)&v22);
  v20 = *(unsigned int *)(a1 + 12);
  LODWORD(v18) = v20 + 1;
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v20) = *v19;
LABEL_14:
  *(_DWORD *)(a1 + 12) = v18;
  if (objc_msgSend(v3, "supports32BitFloatFiltering"))
  {
    v22 = 11;
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v21 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v18 + 1, (unint64_t)&v22);
      v18 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v18) = *v21;
    }
    else
    {
      *(_DWORD *)(v5 + 4 * v18) = 11;
    }
    *(_DWORD *)(a1 + 12) = v18 + 1;
  }

}

void sub_18244AFB0(_Unwind_Exception *a1, void *a2)
{
  void *v2;
  uint64_t v3;
  WTF *v5;

  v5 = *(WTF **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    WTF::fastFree(v5, a2);
  }

  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 4 * v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 30)
        goto LABEL_30;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = (void *)WTF::fastMalloc((WTF *)(4 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      memcpy(v19, v5, 4 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 30))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 4 * v6);
      v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 4 * ((uint64_t)(a3 - (_QWORD)v5) >> 2);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x18244B148);
  }
  v13 = *(void **)a1;
  return (unint64_t)v13 + 4 * ((uint64_t)(a3 - (_QWORD)v5) >> 2);
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  int *v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  int *v49;
  int *v50;
  int *v51;
  int v52;
  int v53;
  int *v54;
  BOOL v55;
  int v56;
  int v57;
  int *v58;
  int v59;
  int v60;
  int *v61;
  int v62;
  int v63;
  int *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int *v70;
  int *v71;
  int *v72;
  _DWORD *v73;
  BOOL v75;
  uint64_t v76;
  int *v77;
  int *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  int *v86;
  int v87;
  BOOL v88;
  int *v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int64_t v96;
  int *v97;
  int v98;
  int v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int *v113;
  int v114;
  int v115;
  int v116;
  int v117;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v65 = *(a2 - 1);
        v66 = *v8;
        if (v65 < *v8)
        {
          *v8 = v65;
          *(a2 - 1) = v66;
        }
        return result;
      case 3:
        v67 = *v8;
        v68 = v8[1];
        v69 = *(a2 - 1);
        if (v68 >= *v8)
        {
          if (v69 < v68)
          {
            v8[1] = v69;
            *(a2 - 1) = v68;
            v108 = *v8;
            v107 = v8[1];
            if (v107 < *v8)
            {
              *v8 = v107;
              v8[1] = v108;
            }
          }
        }
        else
        {
          if (v69 >= v68)
          {
            *v8 = v68;
            v8[1] = v67;
            v117 = *(a2 - 1);
            if (v117 >= v67)
              return result;
            v8[1] = v117;
          }
          else
          {
            *v8 = v69;
          }
          *(a2 - 1) = v67;
        }
        return result;
      case 4:
        v20 = (unint64_t)(v8 + 1);
        v70 = (int *)v8[1];
        v44 = (unint64_t)(v8 + 2);
        v13 = v8[2];
        v71 = (int *)*v8;
        if ((int)v70 < (int)v71)
        {
          v72 = v8;
          v73 = v8 + 2;
          result = (int *)*v8;
          if (v13 >= (int)v70)
          {
            *v8 = (int)v70;
            v8[1] = (int)v71;
            v72 = v8 + 1;
            v73 = v8 + 2;
            result = v71;
            if (v13 >= (int)v71)
              goto LABEL_198;
          }
          goto LABEL_186;
        }
        if (v13 >= (int)v70)
          goto LABEL_198;
        *(_DWORD *)v20 = v13;
        *(_DWORD *)v44 = (_DWORD)v70;
        v72 = v8;
        v73 = v8 + 1;
        result = v70;
        if (v13 < (int)v71)
        {
LABEL_186:
          *v72 = v13;
          *v73 = (_DWORD)v71;
          LODWORD(v70) = (_DWORD)result;
        }
        v109 = *(a2 - 1);
        if (v109 < (int)v70)
          goto LABEL_199;
        return result;
      case 5:
        return std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 95)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v83 = (unint64_t)(v10 - 2) >> 1;
              v84 = v83;
              do
              {
                if (v83 >= v84)
                {
                  v85 = (2 * v84) | 1;
                  v86 = &v8[v85];
                  if (2 * v84 + 2 >= v10)
                  {
                    v87 = *v86;
                    v89 = &v8[v84];
                    v90 = *v89;
                    if (*v86 >= *v89)
                      goto LABEL_159;
                  }
                  else
                  {
                    v87 = v86[1];
                    v88 = *v86 < v87;
                    if (*v86 > v87)
                      v87 = *v86;
                    if (v88)
                    {
                      ++v86;
                      v85 = 2 * v84 + 2;
                    }
                    v89 = &v8[v84];
                    v90 = *v89;
                    if (v87 >= *v89)
                    {
LABEL_159:
                      while (1)
                      {
                        *v89 = v87;
                        v89 = v86;
                        if (v83 < v85)
                          break;
                        v92 = (2 * v85) | 1;
                        v86 = &v8[v92];
                        v85 = 2 * v85 + 2;
                        if (v85 < v10)
                        {
                          v87 = *v86;
                          result = v86 + 1;
                          v91 = v86[1];
                          if (*v86 <= v91)
                            v87 = v86[1];
                          if (*v86 >= v91)
                            v85 = v92;
                          else
                            ++v86;
                          if (v87 < v90)
                            break;
                        }
                        else
                        {
                          v87 = *v86;
                          v85 = v92;
                          if (*v86 < v90)
                            break;
                        }
                      }
                      *v89 = v90;
                    }
                  }
                }
                v88 = v84-- <= 0;
              }
              while (!v88);
              v93 = (unint64_t)v9 >> 2;
              do
              {
                v94 = 0;
                v95 = *v8;
                v96 = (unint64_t)(v93 - 2) >> 1;
                v97 = v8;
                do
                {
                  while (1)
                  {
                    v100 = &v97[v94 + 1];
                    v101 = (2 * v94) | 1;
                    v94 = 2 * v94 + 2;
                    if (v94 < v93)
                      break;
                    v94 = v101;
                    *v97 = *v100;
                    v97 = v100;
                    if (v101 > v96)
                      goto LABEL_175;
                  }
                  v98 = *v100;
                  v99 = v100[1];
                  if (*v100 <= v99)
                    v98 = v100[1];
                  if (*v100 >= v99)
                    v94 = v101;
                  else
                    ++v100;
                  *v97 = v98;
                  v97 = v100;
                }
                while (v94 <= v96);
LABEL_175:
                if (v100 == --a2)
                {
                  *v100 = v95;
                }
                else
                {
                  *v100 = *a2;
                  *a2 = v95;
                  v102 = (char *)v100 - (char *)v8 + 4;
                  if (v102 >= 5)
                  {
                    v103 = (((unint64_t)v102 >> 2) - 2) >> 1;
                    v104 = &v8[v103];
                    v105 = *v104;
                    v106 = *v100;
                    if (*v104 < *v100)
                    {
                      do
                      {
                        *v100 = v105;
                        v100 = v104;
                        if (!v103)
                          break;
                        v103 = (v103 - 1) >> 1;
                        v104 = &v8[v103];
                        v105 = *v104;
                      }
                      while (*v104 < v106);
                      *v100 = v106;
                    }
                  }
                }
                v88 = v93-- <= 2;
              }
              while (!v88);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x201)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 >= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 >= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 >= v26)
          {
            if (v27 < v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v13 = *v12;
          v39 = *v23;
          v40 = *v32;
          if (*v12 < *v23)
          {
            if (v40 >= v13)
            {
              *v23 = v13;
              *v12 = v39;
              v23 = v12;
              v13 = v40;
              if (v40 >= v39)
              {
                v13 = v39;
                v41 = *v8;
                *v8 = v39;
                *v12 = v41;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v40 >= v13)
            goto LABEL_54;
          *v12 = v40;
          *v32 = v13;
          v32 = v12;
          v13 = v39;
          if (v40 < v39)
          {
LABEL_53:
            *v23 = v40;
            *v32 = v39;
LABEL_54:
            v42 = *v8;
            *v8 = v13;
            *v12 = v42;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < (int)v20)
              goto LABEL_56;
            if ((int)v20 >= *(a2 - 1))
            {
              v58 = v8 + 1;
              do
              {
                v8 = v58;
                if (v58 >= a2)
                  break;
                ++v58;
              }
              while ((int)v20 >= *v8);
            }
            else
            {
              v44 = (unint64_t)(v8 + 1);
              do
              {
                if ((int *)v44 == a2)
                  goto LABEL_197;
                v57 = *(_DWORD *)v44;
                v44 += 4;
              }
              while ((int)v20 >= v57);
              v8 = (int *)(v44 - 4);
            }
            v44 = (unint64_t)a2;
            if (v8 < a2)
            {
              v44 = (unint64_t)a2;
              while ((int *)v44 != v7)
              {
                v59 = *(_DWORD *)(v44 - 4);
                v44 -= 4;
                if ((int)v20 >= v59)
                  goto LABEL_97;
              }
              goto LABEL_197;
            }
LABEL_97:
            if ((unint64_t)v8 < v44)
            {
              v60 = *v8;
              v13 = *(_DWORD *)v44;
              do
              {
                *v8 = v13;
                v61 = v8 + 1;
                *(_DWORD *)v44 = v60;
                do
                {
                  if (v61 == a2)
                    goto LABEL_197;
                  v62 = *v61++;
                  v60 = v62;
                }
                while ((int)v20 >= v62);
                v8 = v61 - 1;
                do
                {
                  if ((int *)v44 == v7)
                    goto LABEL_197;
                  v63 = *(_DWORD *)(v44 - 4);
                  v44 -= 4;
                  v13 = v63;
                }
                while ((int)v20 < v63);
              }
              while ((unint64_t)v8 < v44);
            }
            v64 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v64;
            a4 = 0;
            *v64 = v20;
            continue;
          }
          v13 = v40;
          v56 = *v8;
          *v8 = v40;
          *v12 = v56;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v43 = 0;
          do
          {
            v44 = (unint64_t)&v8[v43 + 1];
            if ((int *)v44 == a2)
              goto LABEL_197;
            v13 = *(_DWORD *)v44;
            ++v43;
          }
          while (*(_DWORD *)v44 < (int)v20);
          v44 = (unint64_t)&v8[v43];
          v45 = a2;
          if (v43 != 1)
          {
            while (v45 != v8)
            {
              v46 = *--v45;
              if (v46 < (int)v20)
                goto LABEL_66;
            }
            goto LABEL_197;
          }
          v45 = a2;
          do
          {
            if (v44 >= (unint64_t)v45)
              break;
            v47 = *--v45;
          }
          while (v47 >= (int)v20);
LABEL_66:
          if (v44 >= (unint64_t)v45)
          {
            v54 = (int *)(v44 - 4);
            if ((int *)(v44 - 4) != v8)
              goto LABEL_78;
          }
          else
          {
            v48 = *v45;
            v49 = &v8[v43];
            v50 = v45;
            do
            {
              *v49 = v48;
              *v50 = v13;
              v51 = v49 + 1;
              do
              {
                if (v51 == a2)
                  goto LABEL_197;
                v52 = *v51++;
                v13 = v52;
              }
              while (v52 < (int)v20);
              v49 = v51 - 1;
              do
              {
                if (v50 == v8)
                  goto LABEL_197;
                v53 = *--v50;
                v48 = v53;
              }
              while (v53 >= (int)v20);
            }
            while (v49 < v50);
            v54 = v51 - 2;
            if (v51 - 2 == v8)
              goto LABEL_79;
LABEL_78:
            *v8 = *v54;
          }
LABEL_79:
          *v54 = v20;
          if (v44 < (unint64_t)v45)
            goto LABEL_82;
          v55 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(v8, v54);
          v8 = v54 + 1;
          result = (int *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(v54 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v55)
              continue;
LABEL_82:
            result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v7, v54, a3, a4 & 1);
            a4 = 0;
            v8 = v54 + 1;
            continue;
          }
          a2 = v54;
          if (v55)
            return result;
          goto LABEL_2;
        }
        v20 = (unint64_t)(v8 + 1);
        v75 = v8 == a2 || v20 == (_QWORD)a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 4;
            v77 = v8;
            do
            {
              v79 = *v77;
              v77 = (int *)v20;
              v80 = *(_DWORD *)v20;
              if (v80 < v79)
              {
                v81 = v76;
                do
                {
                  *(int *)((char *)v8 + v81) = v79;
                  v82 = v81 - 4;
                  if (v81 == 4)
                  {
                    v78 = v8;
                    goto LABEL_132;
                  }
                  v79 = *(int *)((char *)v8 + v81 - 8);
                  v81 -= 4;
                }
                while (v80 < v79);
                v78 = (int *)((char *)v8 + v82);
LABEL_132:
                *v78 = v80;
              }
              v20 = (unint64_t)(v77 + 1);
              v76 += 4;
            }
            while (v77 + 1 != a2);
          }
        }
        else if (!v75)
        {
          v44 = 0;
          v110 = 1;
          while (1)
          {
            v13 = v8[v44];
            v44 = v110;
            v111 = *(_DWORD *)v20;
            if (*(_DWORD *)v20 < v13)
              break;
LABEL_191:
            v110 = v44 + 1;
            v20 += 4;
            if ((int *)v20 == a2)
              return result;
          }
          v112 = 0;
          while (1)
          {
            v113 = (int *)(v20 + 4 * v112);
            *v113 = v13;
            if (!(v44 + v112))
              break;
            v13 = *(v113 - 2);
            --v112;
            if (v111 >= v13)
            {
              *(_DWORD *)(v20 + 4 * v112) = v111;
              goto LABEL_191;
            }
          }
LABEL_197:
          __break(1u);
LABEL_198:
          LODWORD(v70) = v13;
          v109 = *(a2 - 1);
          if (v109 < (int)v70)
          {
LABEL_199:
            *(_DWORD *)v44 = v109;
            *(a2 - 1) = (int)v70;
            v114 = *(_DWORD *)v44;
            v115 = *(_DWORD *)v20;
            if (v114 < v115)
            {
              v7[1] = v114;
              v7[2] = v115;
              v116 = *v7;
              if (v114 < *v7)
              {
                *v7 = v114;
                v7[1] = v116;
              }
            }
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(int *a1, int *a2)
{
  int v3;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t i;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 12; ; i += 4)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

int *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(int *result, int *a2, int *a3, int *a4, int *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= v7)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    v8 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v8;
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= *a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*a3 >= v6)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v7;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v9 = *a4;
  if (*a4 >= v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    v11 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        v15 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

void ___ZN6WebGPU8InstanceC2EU13block_pointerFvU13block_pointerFvvEEPKN3WTF13MachSendRightE_block_invoke(uint64_t a1, id a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = objc_retainAutorelease(a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v3;
  WebGPU::Instance::defaultScheduleWork(v4, &v5);
}

void WebGPU::Instance::defaultScheduleWork(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v4 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](a1 + 56);
LABEL_5:
  v6 = MEMORY[0x186DAB65C](*a2);
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    if (v7 + 1 != v8)
      goto LABEL_33;
    LODWORD(v9) = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 32);
    if (v7)
    {
      if (v7 != v9 - 1)
        goto LABEL_33;
    }
    else if ((_DWORD)v9)
    {
      v7 = 0;
      goto LABEL_33;
    }
  }
  v10 = v9;
  v11 = v9 + ((unint64_t)v9 >> 2);
  if (v11 <= 0xF)
    v11 = 15;
  if (v11 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return;
  }
  v12 = *(WTF **)(a1 + 24);
  v13 = v11 + 1;
  v14 = WTF::fastMalloc((WTF *)(8 * (v11 + 1)));
  v16 = (_QWORD *)v14;
  *(_DWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  if (v17 <= v18)
  {
    if (v17 != v18)
    {
      v31 = 8 * v17;
      v32 = (_QWORD *)(v14 + v31);
      v33 = (void **)((char *)v12 + v31);
      v34 = 8 * v18 - v31;
      do
      {
        v35 = *v33;
        *v33 = 0;
        *v32++ = v35;
        v36 = *v33++;

        v34 -= 8;
      }
      while (v34);
    }
  }
  else
  {
    if (v18)
    {
      v19 = 8 * v18;
      v20 = (void **)v12;
      do
      {
        v21 = *v20;
        *v20 = 0;
        *v16++ = v21;
        v22 = *v20++;

        v19 -= 8;
      }
      while (v19);
      v13 = *(_DWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD **)(a1 + 24);
    }
    v23 = v13;
    v24 = v17 - v10 + v13;
    if (v17 != v10)
    {
      v25 = 8 * v17;
      v26 = (void **)((char *)v12 + v25);
      v27 = &v16[v23];
      v28 = v25 - 8 * v10;
      do
      {
        v29 = *v26;
        *v26 = 0;
        *(_QWORD *)((char *)v27 + v28) = v29;
        v30 = *v26++;

        v28 += 8;
      }
      while (v28);
    }
    *(_QWORD *)(a1 + 8) = v24;
  }
  if (v12)
  {
    if (*(WTF **)(a1 + 24) == v12)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
    }
    WTF::fastFree(v12, v15);
  }
  v7 = *(_QWORD *)(a1 + 16);
LABEL_33:
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7) = v6;
  v37 = *(_QWORD *)(a1 + 16);
  if (v37 == *(unsigned int *)(a1 + 32) - 1)
    v38 = 0;
  else
    v38 = v37 + 1;
  *(_QWORD *)(a1 + 16) = v38;
  v39 = __ldxr(v4);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v4))
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_18244C1D4(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;
  void *v2;
  int v4;

  v4 = __ldxr(v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void ___ZN6WebGPU8InstanceC2Ev_block_invoke(uint64_t a1, id a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = objc_retainAutorelease(a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v3;
  WebGPU::Instance::defaultScheduleWork(v4, &v5);
}

void WebGPU::Instance::~Instance(id *this)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  void *v16;

  if (*((_BYTE *)this + 44))
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 5));
  v3 = (unint64_t)this[1];
  v4 = (unint64_t)this[2];
  v5 = (WTF *)this[3];
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_16;
    v13 = 8 * v3;
    v14 = (void **)((char *)v5 + v13);
    v15 = 8 * v4 - v13;
    do
    {
      v16 = *v14++;

      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    if (v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *(void **)v5;
        v5 = (WTF *)((char *)v5 + 8);

        v6 -= 8;
      }
      while (v6);
      v5 = (WTF *)this[3];
      v3 = (unint64_t)this[1];
    }
    v8 = *((unsigned int *)this + 8);
    if (v3 != v8)
    {
      v9 = 8 * v3;
      v10 = (void **)((char *)v5 + v9);
      v11 = 8 * v8 - v9;
      do
      {
        v12 = *v10++;

        v11 -= 8;
      }
      while (v11);
    }
  }
  v5 = (WTF *)this[3];
LABEL_16:
  if (v5)
  {
    this[3] = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, v2);
  }
}

void WebGPU::Instance::scheduleWork(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *a2;
  *a2 = 0;
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke;
  v4[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::descriptor;
  v4[4] = v3;
  v6 = (id)MEMORY[0x186DAB65C]();

  v5 = (void *)MEMORY[0x186DAB65C](v6);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);

}

void sub_18244C3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18244C3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *wgpuInstanceReference(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

unsigned int *wgpuInstanceRelease(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    WebGPU::Instance::~Instance((id *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t wgpuCreateInstance(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, id);
  void *v14;
  uint64_t v15;

  v1 = *a1;
  if (!*a1 || *((_DWORD *)v1 + 2) != 354139136)
  {
    v4 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v4 = 1;
    *(_BYTE *)(v4 + 44) = 0;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    v6 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(v4 + 40) = 0;
    v11 = v6;
    v12 = 3221225472;
    v13 = ___ZN6WebGPU8InstanceC2Ev_block_invoke;
    v14 = &__block_descriptor_40_e14_v16__0___v___8l;
    v15 = v4;
    goto LABEL_6;
  }
  v2 = *v1;
  v3 = WTF::fastMalloc((WTF *)0x40);
  v4 = v3;
  if (!v2)
  {
    v8 = v1[3];
    v9 = (uint64_t *)(id)v1[2];
    v10 = v9;
    *(_DWORD *)v4 = 1;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    if (v8)
    {
      WTF::MachSendRight::MachSendRight();
      BYTE4(v11) = 1;
      *(_BYTE *)(v4 + 40) = 0;
      *(_BYTE *)(v4 + 44) = 0;
      WTF::MachSendRight::MachSendRight();
      *(_BYTE *)(v4 + 44) = 1;
      if (BYTE4(v11))
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v11);
      v9 = v10;
      if (v10)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(v4 + 40) = 0;
      *(_BYTE *)(v4 + 44) = 0;
      if (v9)
      {
LABEL_12:
        *(_QWORD *)(v4 + 48) = MEMORY[0x186DAB65C](v9);
        *(_WORD *)(v4 + 56) = 256;

        return v4;
      }
    }
    v11 = MEMORY[0x1E0C809B0];
    v12 = 3221225472;
    v13 = ___ZN6WebGPU8InstanceC2EU13block_pointerFvU13block_pointerFvvEEPKN3WTF13MachSendRightE_block_invoke;
    v14 = &__block_descriptor_40_e14_v16__0___v___8l;
    v15 = v4;
    v9 = &v11;
    goto LABEL_12;
  }
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 44) = 0;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  v5 = MEMORY[0x1E0C809B0];
  *(_BYTE *)(v3 + 40) = 0;
  v11 = v5;
  v12 = 3221225472;
  v13 = ___ZN6WebGPU8InstanceC2Ev_block_invoke;
  v14 = &__block_descriptor_40_e14_v16__0___v___8l;
  v15 = v3;
LABEL_6:
  *(_QWORD *)(v4 + 48) = MEMORY[0x186DAB65C](&v11);
  *(_WORD *)(v4 + 56) = 0;
  return v4;
}

void sub_18244C640(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  void *v14;
  WTF::MachSendRight *v15;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33;

  if (*(_BYTE *)(v13 + 44))
  {
    WTF::MachSendRight::~MachSendRight(v15);
    if (!a12)
    {
LABEL_3:
      v17 = *(_QWORD *)(v13 + 8);
      v18 = *(_QWORD *)(v13 + 16);
      v19 = *(WTF **)(v13 + 24);
      v20 = v17 == v18;
      if (v17 > v18)
      {
LABEL_4:
        if (v18)
        {
          v21 = 8 * v18;
          do
          {
            v22 = *(void **)v19;
            v19 = (WTF *)((char *)v19 + 8);

            v21 -= 8;
          }
          while (v21);
          v19 = *(WTF **)(v13 + 24);
          v17 = *(_QWORD *)(v13 + 8);
        }
        v23 = *(unsigned int *)(v13 + 32);
        if (v17 != v23)
        {
          v24 = 8 * v17;
          v25 = (void **)((char *)v19 + v24);
          v26 = 8 * v23 - v24;
          do
          {
            v27 = *v25++;

            v26 -= 8;
          }
          while (v26);
        }
        goto LABEL_19;
      }
LABEL_14:
      if (v20)
      {
        if (v19)
          goto LABEL_20;
        goto LABEL_17;
      }
      v29 = 8 * v17;
      v30 = (void **)((char *)v19 + v29);
      v31 = 8 * v18 - v29;
      do
      {
        v32 = *v30++;

        v31 -= 8;
      }
      while (v31);
LABEL_19:
      v19 = *(WTF **)(v13 + 24);
      if (v19)
      {
LABEL_20:
        *(_QWORD *)(v13 + 24) = 0;
        *(_DWORD *)(v13 + 32) = 0;
        WTF::fastFree(v19, a2);

        WTF::fastFree((WTF *)v13, v33);
        _Unwind_Resume(a1);
      }
LABEL_17:

      WTF::fastFree((WTF *)v13, v28);
      _Unwind_Resume(a1);
    }
  }
  else if (!a12)
  {
    goto LABEL_3;
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  v17 = *(_QWORD *)(v13 + 8);
  v18 = *(_QWORD *)(v13 + 16);
  v19 = *(WTF **)(v13 + 24);
  v20 = v17 == v18;
  if (v17 > v18)
    goto LABEL_4;
  goto LABEL_14;
}

uint64_t wgpuGetProcAddress()
{
  return 0;
}

uint64_t wgpuInstanceCreateSurface(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  WebGPU::PresentationContext::create(a2, a1, &v3);
  return v3;
}

void wgpuInstanceProcessEvents(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  void *v20;

  v3 = (unsigned __int8 *)(a1 + 56);
  v4 = a1 + 8;
  do
  {
    if (__ldaxr(v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_7;
    }
    MEMORY[0x186DAB1AC](v3);
LABEL_7:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(WTF **)(a1 + 24);
    v9 = *(unsigned int *)(a1 + 32);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    v10 = __ldxr(v3);
    if (v10 == 1)
    {
      if (!__stlxr(0, v3))
      {
        if (v6 == v7)
          goto LABEL_27;
        goto LABEL_13;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v6 == v7)
      goto LABEL_27;
LABEL_13:
    v11 = v6;
    do
    {
      (*(void (**)(void))(*((_QWORD *)v8 + v11) + 16))();
      v11 += v9 + 1;
      do
        v11 -= v9;
      while (v11 >= v9);
    }
    while (v7 != v11);
    if (v6 <= v7)
    {
      v18 = (void **)((char *)v8 + 8 * v6);
      v19 = 8 * v7 - 8 * v6;
      do
      {
        v20 = *v18++;

        v19 -= 8;
      }
      while (v19);
    }
    else
    {
      if (v7)
      {
        v12 = 8 * v7;
        v13 = (void **)v8;
        do
        {
          v14 = *v13++;

          v12 -= 8;
        }
        while (v12);
      }
      if (v6 != v9)
      {
        v15 = (void **)((char *)v8 + 8 * v6);
        v16 = 8 * v9 - 8 * v6;
        do
        {
          v17 = *v15++;

          v16 -= 8;
        }
        while (v16);
      }
    }
LABEL_27:
    if (v8)
      WTF::fastFree(v8, a2);
  }
  while (v6 != v7);
}

void wgpuInstanceRequestAdapter(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void *v9;
  id v10;
  unsigned int v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  id *v19;
  int v20;
  id *v21;
  WTF *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  id *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  id *v45;
  id *v46;
  WTF *v47;
  void *v48;
  void *v49;
  WTF *v50;
  id *v51;
  _OWORD v52[9];
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  char v58;
  char v59;
  id *v60;
  id *v61;

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E0FD1938;
  v8[1] = a3;
  v8[2] = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MTLCreateSystemDefaultDevice();
  if (v10)
    objc_msgSend(v9, "addObject:", v10);

  v11 = *(_DWORD *)(a2 + 16);
  v12 = v9;
  v13 = v12;
  v14 = v12;
  if (v11 >= 3)
  {

    v14 = 0;
  }
  if (*(_QWORD *)a2)
  {
    v15 = WTF::fastMalloc((WTF *)0xE8);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = 0;
    do
      v16 = __ldaxr(a1);
    while (__stlxr(v16 + 1, a1));
LABEL_8:
    *(_QWORD *)(v15 + 16) = a1;
    *(_BYTE *)(v15 + 224) = 0;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_DWORD *)(v15 + 104) = 0;
    *(_OWORD *)(v15 + 112) = 0u;
    *(_OWORD *)(v15 + 128) = 0u;
    *(_OWORD *)(v15 + 144) = 0u;
    *(_OWORD *)(v15 + 160) = 0u;
    *(_OWORD *)(v15 + 176) = 0u;
    *(_BYTE *)(v15 + 192) = 0;
    *(_QWORD *)(v15 + 200) = 0;
    *(_QWORD *)(v15 + 208) = 0;
    *(_BYTE *)(v15 + 216) = 0;
    v61 = (id *)v15;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v60 = *(id **)&v52[0];
    (*(void (**)(_QWORD *, uint64_t, id **, id **))(*v8 + 16))(v8, 2, &v61, &v60);
LABEL_13:
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    v19 = v60;
    v60 = 0;
    if (!v19)
      goto LABEL_16;
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy();
      v21 = v61;
      v61 = 0;
      if (!v21)
      {
LABEL_22:

        return;
      }
LABEL_19:
      if (*(_DWORD *)v21 == 1)
      {
        WebGPU::Adapter::~Adapter(v21);
        WTF::fastFree(v22, v23);
      }
      else
      {
        --*(_DWORD *)v21;
      }
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if (*(_DWORD *)(a2 + 24))
  {
    v17 = WTF::fastMalloc((WTF *)0xE8);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    do
      v18 = __ldaxr(a1);
    while (__stlxr(v18 + 1, a1));
    *(_QWORD *)(v17 + 16) = a1;
    *(_BYTE *)(v17 + 224) = 0;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_DWORD *)(v17 + 104) = 0;
    *(_OWORD *)(v17 + 112) = 0u;
    *(_OWORD *)(v17 + 128) = 0u;
    *(_OWORD *)(v17 + 144) = 0u;
    *(_OWORD *)(v17 + 160) = 0u;
    *(_OWORD *)(v17 + 176) = 0u;
    *(_BYTE *)(v17 + 192) = 0;
    *(_QWORD *)(v17 + 200) = 0;
    *(_QWORD *)(v17 + 208) = 0;
    *(_BYTE *)(v17 + 216) = 0;
    v61 = (id *)v17;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v60 = *(id **)&v52[0];
    (*(void (**)(_QWORD *, uint64_t, id **, id **))(*v8 + 16))(v8, 1, &v61, &v60);
    goto LABEL_13;
  }
  if (!v14)
  {
    v15 = WTF::fastMalloc((WTF *)0xE8);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = 0;
    do
      v38 = __ldaxr(a1);
    while (__stlxr(v38 + 1, a1));
    goto LABEL_8;
  }
  if (!objc_msgSend(v14, "count"))
  {
    v39 = WTF::fastMalloc((WTF *)0xE8);
    *(_DWORD *)v39 = 1;
    *(_QWORD *)(v39 + 8) = 0;
    do
      v40 = __ldaxr(a1);
    while (__stlxr(v40 + 1, a1));
    *(_QWORD *)(v39 + 16) = a1;
    *(_BYTE *)(v39 + 224) = 0;
    *(_OWORD *)(v39 + 24) = 0u;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_OWORD *)(v39 + 72) = 0u;
    *(_OWORD *)(v39 + 88) = 0u;
    *(_DWORD *)(v39 + 104) = 0;
    *(_OWORD *)(v39 + 112) = 0u;
    *(_OWORD *)(v39 + 128) = 0u;
    *(_OWORD *)(v39 + 144) = 0u;
    *(_OWORD *)(v39 + 160) = 0u;
    *(_OWORD *)(v39 + 176) = 0u;
    *(_BYTE *)(v39 + 192) = 0;
    *(_QWORD *)(v39 + 200) = 0;
    *(_QWORD *)(v39 + 208) = 0;
    *(_BYTE *)(v39 + 216) = 0;
    v61 = (id *)v39;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v60 = *(id **)&v52[0];
    (*(void (**)(_QWORD *, uint64_t, id **, id **))(*v8 + 16))(v8, 1, &v61, &v60);
LABEL_42:
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    v19 = v60;
    v60 = 0;
    if (v19)
    {
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 != 2)
      {
LABEL_15:
        *(_DWORD *)v19 = v20;
        goto LABEL_16;
      }
      WTF::StringImpl::destroy();
    }
LABEL_16:
    v21 = v61;
    v61 = 0;
    if (!v21)
      goto LABEL_22;
    goto LABEL_19;
  }
  objc_msgSend(v14, "objectAtIndexedSubscript:", 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v24)
  {
    v41 = WTF::fastMalloc((WTF *)0xE8);
    *(_DWORD *)v41 = 1;
    *(_QWORD *)(v41 + 8) = 0;
    do
      v42 = __ldaxr(a1);
    while (__stlxr(v42 + 1, a1));
    *(_QWORD *)(v41 + 16) = a1;
    *(_BYTE *)(v41 + 224) = 0;
    *(_OWORD *)(v41 + 24) = 0u;
    *(_OWORD *)(v41 + 40) = 0u;
    *(_OWORD *)(v41 + 56) = 0u;
    *(_OWORD *)(v41 + 72) = 0u;
    *(_OWORD *)(v41 + 88) = 0u;
    *(_DWORD *)(v41 + 104) = 0;
    *(_OWORD *)(v41 + 112) = 0u;
    *(_OWORD *)(v41 + 128) = 0u;
    *(_OWORD *)(v41 + 144) = 0u;
    *(_OWORD *)(v41 + 160) = 0u;
    *(_OWORD *)(v41 + 176) = 0u;
    *(_BYTE *)(v41 + 192) = 0;
    *(_QWORD *)(v41 + 200) = 0;
    *(_QWORD *)(v41 + 208) = 0;
    *(_BYTE *)(v41 + 216) = 0;
    v61 = (id *)v41;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v60 = *(id **)&v52[0];
    (*(void (**)(_QWORD *, uint64_t, id **, id **))(*v8 + 16))(v8, 2, &v61, &v60);
    goto LABEL_42;
  }
  objc_msgSend(v14, "objectAtIndexedSubscript:", 0);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  WebGPU::hardwareCapabilities(v25, (uint64_t)v52);
  if (!v59)
  {
    v43 = WTF::fastMalloc((WTF *)0xE8);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = 0;
    do
      v44 = __ldaxr(a1);
    while (__stlxr(v44 + 1, a1));
    *(_QWORD *)(v43 + 16) = a1;
    *(_BYTE *)(v43 + 224) = 0;
    *(_OWORD *)(v43 + 24) = 0u;
    *(_OWORD *)(v43 + 40) = 0u;
    *(_OWORD *)(v43 + 56) = 0u;
    *(_OWORD *)(v43 + 72) = 0u;
    *(_OWORD *)(v43 + 88) = 0u;
    *(_DWORD *)(v43 + 104) = 0;
    *(_OWORD *)(v43 + 112) = 0u;
    *(_OWORD *)(v43 + 128) = 0u;
    *(_OWORD *)(v43 + 144) = 0u;
    *(_OWORD *)(v43 + 160) = 0u;
    *(_OWORD *)(v43 + 176) = 0u;
    *(_BYTE *)(v43 + 192) = 0;
    *(_QWORD *)(v43 + 200) = 0;
    *(_QWORD *)(v43 + 208) = 0;
    *(_BYTE *)(v43 + 216) = 0;
    v60 = (id *)v43;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v51 = v61;
    (*(void (**)(_QWORD *, uint64_t, id **, id **))(*v8 + 16))(v8, 2, &v60, &v51);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    v45 = v51;
    v51 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v45 -= 2;
    }
    WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref(&v60);
    goto LABEL_58;
  }
  objc_msgSend(v14, "objectAtIndexedSubscript:", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (v59)
  {
    v27 = v26;
    v28 = WTF::fastMalloc((WTF *)0xE8);
    v29 = v27;
    v30 = v29;
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = v29;
    do
      v31 = __ldaxr(a1);
    while (__stlxr(v31 + 1, a1));
    *(_QWORD *)(v28 + 16) = a1;
    *(_OWORD *)(v28 + 88) = v52[4];
    v32 = v52[2];
    *(_OWORD *)(v28 + 72) = v52[3];
    *(_OWORD *)(v28 + 56) = v32;
    v33 = v52[0];
    *(_OWORD *)(v28 + 40) = v52[1];
    *(_OWORD *)(v28 + 152) = v52[8];
    *(_OWORD *)(v28 + 136) = v52[7];
    v34 = v52[5];
    *(_OWORD *)(v28 + 120) = v52[6];
    *(_OWORD *)(v28 + 104) = v34;
    *(_OWORD *)(v28 + 24) = v33;
    *(_QWORD *)(v28 + 168) = v53;
    v35 = v54;
    v53 = 0;
    v54 = 0;
    *(_QWORD *)(v28 + 176) = v35;
    *(_QWORD *)(v28 + 184) = v55;
    *(_BYTE *)(v28 + 192) = v56;
    v36 = v57;
    v57 = 0uLL;
    *(_OWORD *)(v28 + 200) = v36;
    *(_BYTE *)(v28 + 216) = v58;
    *(_BYTE *)(v28 + 224) = 0;
    v61 = (id *)v28;

    v60 = 0;
    (*(void (**)(_QWORD *, _QWORD, id **, id **))(*v8 + 16))(v8, 0, &v61, &v60);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    v37 = v60;
    v60 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v37 -= 2;
    }
    v46 = v61;
    v61 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 1)
      {
        WebGPU::Adapter::~Adapter(v46);
        WTF::fastFree(v47, v48);
      }
      else
      {
        --*(_DWORD *)v46;
      }
    }

LABEL_58:
    if (v59)
    {

      v50 = v53;
      if (v53)
      {
        v53 = 0;
        LODWORD(v54) = 0;
        WTF::fastFree(v50, v49);
      }
    }

    goto LABEL_22;
  }
  __break(1u);
}

void sub_18244D0C8(_Unwind_Exception *a1, uint64_t a2, _DWORD *a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (a3)
  {
    if (*a3 == 2)
      WTF::StringImpl::destroy();
    else
      *a3 -= 2;
  }
  WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref((id **)(v7 - 96));
  std::optional<WebGPU::HardwareCapabilities>::~optional((uint64_t)va);

  _Unwind_Resume(a1);
}

BOOL wgpuBufferIsValid(uint64_t a1)
{
  return *(_BYTE *)(a1 + 52) == 4 || *(_QWORD *)(a1 + 16) != 0;
}

BOOL wgpuAdapterIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

BOOL wgpuBindGroupIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) != 0;
}

uint64_t wgpuBindGroupLayoutIsValid(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

BOOL wgpuCommandBufferIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

BOOL wgpuCommandEncoderIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

BOOL wgpuComputePassEncoderIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

BOOL wgpuComputePipelineIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

BOOL wgpuDeviceIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

uint64_t wgpuExternalTextureIsValid(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    return 1;
  else
    return *(unsigned __int8 *)(a1 + 40);
}

uint64_t wgpuPipelineLayoutIsValid(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t wgpuPresentationContextIsValid(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

BOOL wgpuQuerySetIsValid(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
    return 1;
  if (*(_QWORD *)(a1 + 16))
    return 1;
  return *(_QWORD *)(a1 + 24) != 0;
}

BOOL wgpuQueueIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

BOOL wgpuRenderBundleEncoderIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) != 0;
}

BOOL wgpuRenderBundleIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) || objc_msgSend(*(id *)(a1 + 24), "count") != 0;
}

BOOL wgpuRenderPassEncoderIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

BOOL wgpuRenderPipelineIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

BOOL wgpuSamplerIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

BOOL wgpuShaderModuleIsValid(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) == 0;
}

BOOL wgpuTextureIsValid(uint64_t a1)
{
  return *(_BYTE *)(a1 + 96) || *(_QWORD *)(a1 + 8) != 0;
}

uint64_t wgpuTextureViewIsValid(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    return 1;
  else
    return *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + 96);
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

_DWORD *WTF::Detail::CallableWrapper<wgpuInstanceRequestAdapter::$_0,void,WGPURequestAdapterStatus,WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>> &&,WTF::String &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void (*v4)(uint64_t, uint64_t, char *, _QWORD);
  char *v6;
  void *v7;
  _DWORD *result;
  int v9;
  uint64_t v10;
  char *v11;
  void *v12;
  WTF *v13;

  v4 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 8);
  if ((_DWORD)a2)
  {
    WTF::String::utf8();
    if (v13)
      v6 = (char *)v13 + 16;
    else
      v6 = 0;
    v4(a2, 0, v6, *(_QWORD *)(a1 + 16));
    result = v13;
    if (v13)
    {
      v9 = *(_DWORD *)v13 - 1;
      if (*(_DWORD *)v13 == 1)
        return (_DWORD *)WTF::fastFree(v13, v7);
LABEL_14:
      *result = v9;
    }
  }
  else
  {
    v10 = *a3;
    *a3 = 0;
    WTF::String::utf8();
    if (v13)
      v11 = (char *)v13 + 16;
    else
      v11 = 0;
    v4(0, v10, v11, *(_QWORD *)(a1 + 16));
    result = v13;
    if (v13)
    {
      v9 = *(_DWORD *)v13 - 1;
      if (*(_DWORD *)v13 == 1)
        return (_DWORD *)WTF::fastFree(v13, v12);
      goto LABEL_14;
    }
  }
  return result;
}

void sub_18244D59C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::createLibrary(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const WTF::StringImpl **a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>, _QWORD *a10)
{
  id v15;
  id v16;
  float *v17;
  const WTF::StringImpl *v18;
  void *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int i;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const WTF::StringImpl **v32;
  const WTF::StringImpl **v33;
  id v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int j;
  int v42;
  WTF *v43;
  uint64_t v44;
  WGSL *v45;
  void *v46;
  WTF *v47;
  WGSL *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD **v52;
  _DWORD *v53;
  WTF *v54;
  const WTF::String *v55;
  const WTF::StringImpl *v56;
  _DWORD *v57;
  uint64_t *v58;
  void *v59;
  __CFString *v60;
  void *v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int k;
  unsigned int v67;
  WTF *v68;
  uint64_t v69;
  WebGPU::ShaderModule *v70;
  uint64_t v71;
  uint64_t v72;
  const WTF::StringImpl **v73;
  const WTF::StringImpl **v74;
  uint64_t v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD **v80;
  _DWORD *v81;
  WTF *v82;
  unsigned int *v83;
  uint64_t v84;
  unsigned int *v85;
  _DWORD *v86;
  uint64_t v87;
  const WTF::StringImpl **v88;
  uint64_t v89;
  const WTF::StringImpl *v90;
  int v91;
  unsigned int *v92;
  unsigned int v93;
  WTF::StringImpl *v94;
  unsigned int v95;
  int v96;
  void *v97;
  void *v98;
  unsigned int *v99;
  int i1;
  uint64_t v101;
  unsigned int *v102;
  WTF *v103;
  const WTF::StringImpl *v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  const WTF::StringImpl **v110;
  uint64_t v111;
  uint64_t v112;
  const WTF::StringImpl *v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int m;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  char *v124;
  void *v125;
  void *v126;
  WTF *v127;
  void *v128;
  void *v129;
  void *v130;
  const WTF::StringImpl *v131;
  void (**v132)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  WTF *v133;
  int v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  int n;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int *v145;
  unsigned int v146;
  WTF::StringImpl *v147;
  unsigned int v148;
  int v149;
  unsigned int *v152;
  unsigned int v153;
  WTF::StringImpl *v154;
  unsigned int v155;
  int v156;
  double v157;
  unsigned int *v159;
  unsigned int v160;
  WTF::StringImpl *v161;
  unsigned int v162;
  int v163;
  double v164;
  unsigned int *v166;
  unsigned int v167;
  WTF::StringImpl *v168;
  unsigned int v169;
  int v170;
  double v171;
  char v173;
  unsigned int *v174;
  unsigned int v175;
  WTF::StringImpl *v176;
  unsigned int v177;
  int v178;
  unsigned int *v179;
  int ii;
  uint64_t v181;
  unsigned int *v182;
  WTF *v183;
  unsigned int *v184;
  unsigned int *v185;
  uint64_t v186;
  uint64_t v187;
  void (**v188)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  uint64_t v189;
  unsigned int v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int *v195;
  int nn;
  uint64_t v201;
  WTF *v202;
  unsigned int *v203;
  unsigned int *v204;
  uint64_t v205;
  void (**v206)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  uint64_t v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  unint64_t v211;
  unsigned int *v212;
  int v213;
  int kk;
  uint64_t v215;
  WTF *v216;
  unsigned int *v217;
  int *v218;
  uint64_t v219;
  void (**v220)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  uint64_t v221;
  unsigned int v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  int mm;
  uint64_t v229;
  WTF *v230;
  unsigned int *v231;
  unsigned int *v232;
  uint64_t v233;
  void (**v234)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  uint64_t v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  unint64_t v239;
  unsigned int *v240;
  float v241;
  int jj;
  uint64_t v243;
  WTF *v244;
  unsigned int *v245;
  unsigned int *v246;
  uint64_t v247;
  void (**v248)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  uint64_t v249;
  unsigned int v250;
  int v251;
  uint64_t v252;
  unint64_t v253;
  void (**v254)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  uint64_t v255;
  unsigned int v256;
  WTF *v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unsigned int v271;
  char *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unsigned int v291;
  void *v292;
  WTF *v293;
  void *v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void (**v299)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  id v306;
  id v307;
  _BYTE *v309;
  uint64_t v311;
  WTF *v312[2];
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD v322[5];
  int v323;
  WTF *v324;
  WTF *v325;
  char v326;
  const WTF::StringImpl *v327;
  unsigned int *v328;
  void (**v329)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  char v330;
  uint64_t v331;
  const __CFString *v332;
  uint64_t v333;
  _QWORD v334[3];

  v334[1] = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a5;
  v19 = v16;
  v328 = 0;
  v20 = *a4;
  if (!*a4)
    goto LABEL_32;
  v306 = v16;
  v307 = v15;
  v309 = a9;
  v311 = a2;
  if (!*((_DWORD *)v20 + 1))
    goto LABEL_28;
  v21 = *(_QWORD *)(a2 + 152);
  if (!v21)
  {
    a9 = v309;
    v20 = *a4;
    if (*a4)
      goto LABEL_28;
    goto LABEL_32;
  }
  v22 = *(_DWORD *)(v21 - 8);
  v23 = *((_DWORD *)v20 + 4);
  if (v23 < 0x100)
  {
    v25 = WTF::StringImpl::hashSlowCase(v20);
    v24 = a6;
  }
  else
  {
    v24 = a6;
    v25 = v23 >> 8;
  }
  for (i = 0; ; v25 = i + v27)
  {
    v27 = v25 & v22;
    v28 = *(WTF **)(v21 + 16 * v27);
    if (v28 == (WTF *)-1)
      goto LABEL_10;
    if (!v28)
      break;
    if ((WTF::equal(v28, *a4, v18) & 1) != 0)
    {
      v29 = v21 + 16 * v27;
      a2 = v311;
      v30 = *(_QWORD *)(v311 + 152);
      if (v30)
      {
        v31 = *(unsigned int *)(v30 - 4);
        goto LABEL_18;
      }
LABEL_24:
      a9 = v309;
      a6 = v24;
      if (v29 == v30)
        v33 = a4;
      else
        v33 = (const WTF::StringImpl **)(v29 + 8);
      v20 = *v33;
      if (*v33)
        goto LABEL_28;
LABEL_32:
      *a9 = 0;
      a9[104] = 0;
      v327 = 0;
      if (v20)
        goto LABEL_117;
LABEL_119:
      v83 = v328;
      if (v328)
        goto LABEL_122;
      goto LABEL_133;
    }
LABEL_10:
    ++i;
  }
  a2 = v311;
  v30 = *(_QWORD *)(v311 + 152);
  if (!v30)
  {
    v29 = 0;
    goto LABEL_24;
  }
  v31 = *(unsigned int *)(v30 - 4);
  v29 = v30 + 16 * v31;
LABEL_18:
  a9 = v309;
  a6 = v24;
  if (v29 == v30 + 16 * v31)
    v32 = a4;
  else
    v32 = (const WTF::StringImpl **)(v29 + 8);
  v20 = *v32;
  if (!*v32)
    goto LABEL_32;
LABEL_28:
  *(_DWORD *)v20 += 2;
  v327 = v20;
  if (*((_DWORD *)v20 + 1))
    _ZF = *(_DWORD *)(a2 + 40) == 0;
  else
    _ZF = 0;
  if (!_ZF)
    goto LABEL_32;
  v303 = a6;
  v35 = *(id *)(a2 + 64);

  if (a3)
  {
    if (v35)
    {
      v37 = *(_QWORD *)(v311 + 48);
      if (v37)
      {
        v38 = *(_DWORD *)(v37 - 8);
        v39 = *((_DWORD *)v20 + 4);
        if (v39 < 0x100)
          v40 = WTF::StringImpl::hashSlowCase(v20);
        else
          v40 = v39 >> 8;
        for (j = 0; ; v40 = j + v42)
        {
          v42 = v40 & v38;
          v43 = *(WTF **)(v37 + 16 * (v40 & v38));
          if (v43 != (WTF *)-1 && (!v43 || (WTF::equal(v43, v327, v36) & 1) != 0))
            break;
          ++j;
        }
      }
    }
  }
  v44 = *(unsigned int *)(v311 + 40);
  if ((_DWORD)v44 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_545;
  }
  v312[0] = (WTF *)v322;
  v45 = (WGSL *)((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebGPU12ShaderModule3astEvE3__0JZNKS9_3astEvE3__1ZNKS9_3astEvE3__2EEEEEJRKNS0_6__implIJN4WGSL15SuccessfulCheckENSG_11FailedCheckENS_9monostateEEEEEEEDcOT_DpOT0____fmatrix[v44])(v312, v311 + 8);
  if (!v45)
  {
LABEL_546:
    __break(0xC471u);
    JUMPOUT(0x18244F508);
  }
  LOBYTE(v324) = 0;
  v326 = 0;
  if (!a3 || !*(_BYTE *)(a3 + 32) || !*(_DWORD *)(a3 + 28))
    goto LABEL_68;
  WebGPU::ShaderModule::convertPipelineLayout((WebGPU::ShaderModule *)a3, (uint64_t)v312);
  if (v326)
  {
    v47 = v324;
    if (HIDWORD(v325))
    {
      v48 = v45;
      v49 = (WTF *)((char *)v324 + 24 * HIDWORD(v325));
      do
      {
        v50 = *((unsigned int *)v47 + 5);
        if ((_DWORD)v50)
        {
          v51 = 120 * v50;
          v52 = (_DWORD **)(*((_QWORD *)v47 + 1) + 40);
          do
          {
            v53 = *v52;
            *v52 = 0;
            if (v53)
            {
              if (*v53 == 2)
                WTF::StringImpl::destroy();
              else
                *v53 -= 2;
            }
            v52 += 15;
            v51 -= 120;
          }
          while (v51);
        }
        v54 = (WTF *)*((_QWORD *)v47 + 1);
        if (v54)
        {
          *((_QWORD *)v47 + 1) = 0;
          *((_DWORD *)v47 + 4) = 0;
          WTF::fastFree(v54, v46);
        }
        v47 = (WTF *)((char *)v47 + 24);
      }
      while (v47 != v49);
      v47 = v324;
      v45 = v48;
    }
    if (v47)
    {
      v324 = 0;
      LODWORD(v325) = 0;
      WTF::fastFree(v47, v46);
    }
    v324 = v312[0];
    v325 = v312[1];
    if (v326)
    {
      v55 = (const WTF::String *)&v324;
      goto LABEL_69;
    }
LABEL_68:
    v55 = 0;
  }
  else
  {
    v324 = v312[0];
    v325 = v312[1];
    v326 = 1;
    v55 = (const WTF::String *)&v324;
  }
LABEL_69:
  WGSL::prepare(v45, &v327, v55, (uint64_t)v322);
  if (v323)
  {
    if (v323 == 1)
    {
      v57 = (_DWORD *)v322[0];
      v58 = (uint64_t *)MEMORY[0x1E0CB2D50];
      if (v322[0])
      {
        *(_DWORD *)v322[0] += 2;
        v59 = (void *)MEMORY[0x1E0CB35C8];
        v333 = *v58;
        v60 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else
      {
        v59 = (void *)MEMORY[0x1E0CB35C8];
        v333 = *MEMORY[0x1E0CB2D50];
        v60 = &stru_1E0FD9588;
      }
      v334[0] = v60;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v334, &v333, 1);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "errorWithDomain:code:userInfo:", CFSTR("WebGPU"), 1, v61);
      *a10 = (id)objc_claimAutoreleasedReturnValue();

      *v309 = 0;
      v309[104] = 0;
      if (!v57)
        goto LABEL_98;
      if (*v57 != 2)
      {
        *v57 -= 2;
        goto LABEL_98;
      }
      goto LABEL_79;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_545:
    __break(1u);
    goto LABEL_546;
  }
  v302 = (uint64_t)v45;
  v62 = v322[0];
  if (!v322[0])
    goto LABEL_97;
  v63 = *(_DWORD *)(v322[0] - 8);
  v64 = *((_DWORD *)v327 + 4);
  v65 = v64 < 0x100 ? WTF::StringImpl::hashSlowCase(v327) : v64 >> 8;
  for (k = 0; ; v65 = ++k + v67)
  {
    v67 = v65 & v63;
    v68 = *(WTF **)(v62 + 96 * (v65 & v63));
    if (v68 != (WTF *)-1)
    {
      if (!v68)
        goto LABEL_97;
      v69 = v62 + 96 * v67;
      if ((WTF::equal(v68, v327, v56) & 1) != 0)
        break;
    }
  }
  v70 = (WebGPU::ShaderModule *)v311;
  if (v322[0])
  {
    if (v69 == v322[0] + 96 * *(unsigned int *)(v322[0] - 4))
    {
LABEL_97:
      *v309 = 0;
      v309[104] = 0;
      goto LABEL_98;
    }
  }
  v71 = *(_QWORD *)(v69 + 48);
  v304 = v62 + 96 * v67;
  if (v71)
  {
    v72 = *(unsigned int *)(v71 - 4);
    v73 = (const WTF::StringImpl **)(v71 + 32 * v72);
    if (*(_DWORD *)(v71 - 12))
    {
      v74 = *(const WTF::StringImpl ***)(v69 + 48);
      if ((_DWORD)v72)
      {
        v75 = 32 * v72;
        v74 = *(const WTF::StringImpl ***)(v69 + 48);
        while ((unint64_t)*v74 + 1 <= 1)
        {
          v74 += 4;
          v75 -= 32;
          if (!v75)
          {
            v74 = v73;
            break;
          }
        }
      }
    }
    else
    {
      v74 = (const WTF::StringImpl **)(v71 + 32 * v72);
      v73 = v74;
    }
  }
  else
  {
    v74 = 0;
    v73 = 0;
  }
  if (v71)
  {
    v88 = (const WTF::StringImpl **)(v71 + 32 * *(unsigned int *)(v71 - 4));
    if (v88 == v74)
    {
LABEL_190:
      if (!v303)
        goto LABEL_465;
      v111 = 0;
      v301 = *MEMORY[0x1E0C99888];
LABEL_194:
      v112 = a7 + 24 * v111;
      if (*(_QWORD *)(v112 + 8))
        strlen(*(const char **)(v112 + 8));
      WTF::String::fromUTF8();
      v114 = *(_QWORD *)(v304 + 48);
      if (!v114)
        goto LABEL_209;
      v115 = *(_DWORD *)(v114 - 8);
      v116 = *((_DWORD *)v329 + 4);
      v117 = v116 < 0x100 ? WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v329) : v116 >> 8;
      for (m = 0; ; v117 = m + v119)
      {
        v119 = v117 & v115;
        v120 = *(WTF **)(v114 + 32 * v119);
        if (v120 != (WTF *)-1)
        {
          if (!v120)
          {
            v70 = (WebGPU::ShaderModule *)v311;
            goto LABEL_209;
          }
          if ((WTF::equal(v120, (const WTF::StringImpl *)v329, v113) & 1) != 0)
            break;
        }
        ++m;
      }
      v121 = v114 + 32 * v119;
      v122 = *(_QWORD *)(v304 + 48);
      v70 = (WebGPU::ShaderModule *)v311;
      if (v122)
      {
        if (v121 == v122 + 32 * *(unsigned int *)(v122 - 4))
        {
LABEL_209:
          if ((WebGPU::ShaderModule::hasOverride(v70, (const WTF::String *)&v329) & 1) == 0)
          {
LABEL_273:
            v173 = 0;
            *v309 = 0;
            v309[104] = 0;
            goto LABEL_460;
          }
          v123 = (void *)MEMORY[0x1E0CB3940];
          WTF::String::utf8();
          if (v312[0])
            v124 = (char *)v312[0] + 16;
          else
            v124 = 0;
          objc_msgSend(v123, "stringWithUTF8String:", v124, v301, v302);
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          v127 = v312[0];
          v312[0] = 0;
          if (v127)
          {
            if (*(_DWORD *)v127 == 1)
              WTF::fastFree(v127, v125);
            else
              --*(_DWORD *)v127;
          }
          objc_msgSend(v126, "stringByApplyingTransform:reverse:", v301, 0);
          v128 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "stringByFoldingWithOptions:locale:", 128, v129);
          v130 = (void *)objc_claimAutoreleasedReturnValue();

          MEMORY[0x186DAB230](v312, v130);
          v132 = (void (**)(WGSL::Metal::FunctionDefinitionWriter *__hidden))v312[0];
          v312[0] = 0;
          v133 = (WTF *)v329;
          v329 = v132;
          if (!v133)
            goto LABEL_222;
          v134 = *(_DWORD *)v133 - 2;
          if (*(_DWORD *)v133 != 2)
            goto LABEL_221;
          WTF::StringImpl::destroy();
          v133 = v312[0];
          v312[0] = 0;
          if (v133)
          {
            v134 = *(_DWORD *)v133 - 2;
            if (*(_DWORD *)v133 != 2)
            {
LABEL_221:
              *(_DWORD *)v133 = v134;
              goto LABEL_222;
            }
            WTF::StringImpl::destroy();
            v135 = *(_QWORD *)(v304 + 48);
            if (!v135)
              goto LABEL_275;
          }
          else
          {
LABEL_222:
            v135 = *(_QWORD *)(v304 + 48);
            if (!v135)
              goto LABEL_275;
          }
          v136 = *(_DWORD *)(v135 - 8);
          v137 = *((_DWORD *)v329 + 4);
          if (v137 < 0x100)
            v138 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v329);
          else
            v138 = v137 >> 8;
          for (n = 0; ; v138 = n + v140)
          {
            v140 = v138 & v136;
            v141 = *(WTF **)(v135 + 32 * v140);
            if (v141 != (WTF *)-1)
            {
              if (!v141)
              {
                v142 = *(_QWORD *)(v304 + 48);
                v70 = (WebGPU::ShaderModule *)v311;
                if (v142)
                {
                  v143 = *(unsigned int *)(v142 - 4);
                  v121 = v142 + 32 * v143;
LABEL_235:
                  if (v121 != v142 + 32 * v143)
                  {
LABEL_236:

                    break;
                  }
                }
LABEL_275:
                *v309 = 0;
                v309[104] = 0;

                v173 = 0;
                goto LABEL_460;
              }
              if ((WTF::equal(v141, (const WTF::StringImpl *)v329, v131) & 1) != 0)
              {
                v121 = v135 + 32 * v140;
                v142 = *(_QWORD *)(v304 + 48);
                v70 = (WebGPU::ShaderModule *)v311;
                if (v142)
                {
                  v143 = *(unsigned int *)(v142 - 4);
                  goto LABEL_235;
                }
                goto LABEL_236;
              }
            }
            ++n;
          }
        }
      }
      switch(*(_BYTE *)(v121 + 16))
      {
        case 0:
          v144 = *(double *)(a7 + 24 * v111 + 16) != 0.0;
          v145 = v328;
          if (v328
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v328, 8u, 0), (v145 = v328) != 0))
          {
            v146 = *(v145 - 2);
            v147 = (WTF::StringImpl *)v329;
            v148 = *((_DWORD *)v329 + 4);
            if (v148 >= 0x100)
            {
LABEL_241:
              v149 = v148 >> 8;
              goto LABEL_282;
            }
          }
          else
          {
            v146 = 0;
            v147 = (WTF::StringImpl *)v329;
            v148 = *((_DWORD *)v329 + 4);
            if (v148 >= 0x100)
              goto LABEL_241;
          }
          v149 = WTF::StringImpl::hashSlowCase(v147);
LABEL_282:
          v179 = 0;
          for (ii = 1; ; ++ii)
          {
            v181 = v149 & v146;
            v182 = &v145[8 * v181];
            v183 = *(WTF **)v182;
            if (*(_QWORD *)v182 == -1)
            {
              v179 = &v145[8 * v181];
            }
            else
            {
              if (!v183)
              {
                if (v179)
                {
                  *(_OWORD *)v179 = 0u;
                  *((_OWORD *)v179 + 1) = 0u;
                  --*(v328 - 4);
                  v182 = v179;
                }
                v188 = v329;
                v19 = v306;
                v70 = (WebGPU::ShaderModule *)v311;
                if (v329)
                  *(_DWORD *)v329 += 2;
                *(_QWORD *)v182 = v188;
                v15 = v307;
                v17 = (float *)(v182 + 2);
                v189 = v182[6];
                if ((_DWORD)v189 == 6)
                {
                  *(_BYTE *)v17 = v144;
                }
                else
                {
                  if ((_DWORD)v189 != -1)
                    ((void (*)(WTF **, float *))off_1E0FD1950[v189])(v312, v17);
                  *((_BYTE *)v182 + 8) = v144;
                  v182[6] = 6;
                }
                if (v328)
                  v190 = *(v328 - 3) + 1;
                else
                  v190 = 1;
                *(v328 - 3) = v190;
                if (v328)
                  v191 = *(v328 - 3);
                else
                  v191 = 0;
                v192 = *(v328 - 4) + v191;
                v193 = *(v328 - 1);
                if (v193 > 0x400)
                {
                  if (v193 > 2 * v192)
                    goto LABEL_459;
                }
                else
                {
                  if (3 * v193 > 4 * v192)
                    goto LABEL_459;
                  if (!(_DWORD)v193)
                  {
                    v194 = 8;
                    goto LABEL_454;
                  }
                }
                v194 = (_DWORD)v193 << (6 * *(v328 - 3) >= 2 * (int)v193);
                goto LABEL_454;
              }
              if (WTF::equal(v183, (const WTF::StringImpl *)v329, v113))
              {
                LOBYTE(v312[0]) = v144;
                LODWORD(v313) = 6;
                v184 = &v145[8 * v181];
                v185 = v184 + 2;
                v186 = v184[6];
                if ((_DWORD)v186 == -1)
                {
                  v19 = v306;
                  v15 = v307;
                  v70 = (WebGPU::ShaderModule *)v311;
                }
                else
                {
                  v19 = v306;
                  v15 = v307;
                  v70 = (WebGPU::ShaderModule *)v311;
                  if ((_DWORD)v186 == 6)
                  {
                    *(_BYTE *)v185 = v144;
                    v187 = 6;
                    goto LABEL_458;
                  }
                  ((void (*)(char *, unsigned int *))off_1E0FD1950[v186])(&v330, v185);
                  v144 = (char)v312[0];
                }
                *(_BYTE *)v185 = v144;
                v185[4] = 6;
                v187 = v313;
                if ((_DWORD)v313 != -1)
                  goto LABEL_458;
LABEL_459:
                v173 = 1;
LABEL_460:
                v254 = v329;
                v329 = 0;
                if (!v254)
                {
LABEL_463:
                  if ((v173 & 1) != 0)
                    goto LABEL_193;
                  goto LABEL_98;
                }
                if (*(_DWORD *)v254 != 2)
                {
                  *(_DWORD *)v254 -= 2;
                  goto LABEL_463;
                }
                WTF::StringImpl::destroy();
                if ((v173 & 1) == 0)
                  goto LABEL_98;
LABEL_193:
                if (++v111 != v303)
                  goto LABEL_194;
LABEL_465:
                v255 = a3;
                if (!a3 || !*(_BYTE *)(a3 + 32))
                {
LABEL_527:
                  WGSL::Metal::generateMetalCode(v302, (uint64_t)v322, (uint64_t)&v328, &v329);
                  MEMORY[0x186DAB230](v312, v19);
                  WebGPU::ShaderModule::createLibrary(v15, &v329, v312, a10);
                  v292 = (void *)objc_claimAutoreleasedReturnValue();
                  v293 = v312[0];
                  v312[0] = 0;
                  if (v293)
                  {
                    if (*(_DWORD *)v293 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *(_DWORD *)v293 -= 2;
                  }
                  if (a10 && *a10)
                  {
                    *v309 = 0;
                    v309[104] = 0;
                  }
                  else
                  {
                    v312[0] = (WTF *)v292;
                    WGSL::Reflection::EntryPointInformation::EntryPointInformation((WGSL::Reflection::EntryPointInformation *)&v312[1], (const WGSL::Reflection::EntryPointInformation *)(v304 + 8));
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v321, &v328);
                    v295 = *(_OWORD *)v312;
                    v312[0] = 0;
                    v312[1] = 0;
                    *(_OWORD *)v309 = v295;
                    v296 = v313;
                    v313 = 0;
                    *((_QWORD *)v309 + 2) = v296;
                    v309[24] = 0;
                    v309[40] = 0;
                    if (v316)
                    {
                      *((_QWORD *)v309 + 3) = v314;
                      v297 = v315;
                      v314 = 0;
                      v315 = 0;
                      *((_QWORD *)v309 + 4) = v297;
                      v309[40] = 1;
                    }
                    *((_QWORD *)v309 + 6) = v317;
                    *(_OWORD *)(v309 + 56) = v318;
                    *(_OWORD *)(v309 + 72) = v319;
                    v298 = v321;
                    v317 = 0;
                    v321 = 0;
                    *((_QWORD *)v309 + 11) = v320;
                    *((_QWORD *)v309 + 12) = v298;
                    v309[104] = 1;
                    WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)&v312[1], v294);

                  }
                  v299 = v329;
                  v329 = 0;
                  if (!v299)
                    goto LABEL_98;
                  if (*(_DWORD *)v299 != 2)
                  {
                    *(_DWORD *)v299 -= 2;
                    goto LABEL_98;
                  }
LABEL_79:
                  WTF::StringImpl::destroy();
                  goto LABEL_98;
                }
                v256 = 0;
                while (2)
                {
                  if (*(_DWORD *)(v255 + 28) <= v256)
                    goto LABEL_527;
                  if (!v326)
                    goto LABEL_545;
                  if (HIDWORD(v325) <= v256)
                    goto LABEL_546;
                  v257 = v324;
                  v258 = *a8;
                  if (*a8
                    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a8, 8u, 0), (v258 = *a8) != 0))
                  {
                    v259 = *(_DWORD *)(v258 - 8);
                  }
                  else
                  {
                    v259 = 0;
                  }
                  v260 = 9 * ((v256 + ~(v256 << 15)) ^ ((v256 + ~(v256 << 15)) >> 10));
                  v261 = (v260 ^ (v260 >> 6)) + ~((v260 ^ (v260 >> 6)) << 11);
                  v262 = v259 & (v261 ^ HIWORD(v261));
                  v263 = v258 + 16 * v262;
                  v264 = *(_DWORD *)v263;
                  if (*(_DWORD *)v263 != -1)
                  {
                    v265 = 0;
                    v266 = 1;
                    while (v264 != v256)
                    {
                      if (v264 == -2)
                        v265 = v263;
                      v262 = (v262 + v266) & v259;
                      v263 = v258 + 16 * v262;
                      v264 = *(_DWORD *)v263;
                      ++v266;
                      if (*(_DWORD *)v263 == -1)
                      {
                        if (v265)
                        {
                          *(_DWORD *)v265 = -1;
                          *(_QWORD *)(v265 + 8) = 0;
                          --*(_DWORD *)(*a8 - 16);
                          v263 = v265;
                        }
                        goto LABEL_483;
                      }
                    }
LABEL_496:
                    v272 = (char *)v257 + 24 * v256;
                    v273 = *((unsigned int *)v272 + 5);
                    if (!(_DWORD)v273)
                    {
LABEL_468:
                      ++v256;
                      v255 = a3;
                      v19 = v306;
                      v15 = v307;
                      if (!*(_BYTE *)(a3 + 32))
                        goto LABEL_527;
                      continue;
                    }
                    v274 = 0;
                    v275 = (uint64_t *)(v263 + 8);
                    v276 = v272 + 8;
                    while (2)
                    {
                      v277 = *(_QWORD *)v276 + 120 * v274;
                      if (!*(_DWORD *)(v277 + 32) && *(_QWORD *)(v277 + 24))
                      {
                        v278 = *v275;
                        if (*v275
                          || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v275, 8u, 0), (v278 = *v275) != 0))
                        {
                          v279 = *(_DWORD *)(v278 - 8);
                        }
                        else
                        {
                          v279 = 0;
                        }
                        v280 = *(_DWORD *)v277;
                        v281 = 9 * ((v280 + ~(v280 << 15)) ^ ((v280 + ~(v280 << 15)) >> 10));
                        v282 = (v281 ^ (v281 >> 6)) + ~((v281 ^ (v281 >> 6)) << 11);
                        v283 = (v282 ^ HIWORD(v282)) & v279;
                        v284 = v278 + 16 * v283;
                        v285 = *(_DWORD *)v284;
                        if (*(_DWORD *)v284 != -1)
                        {
                          v286 = 0;
                          v287 = 1;
                          do
                          {
                            if (v285 == v280)
                            {
                              *(_QWORD *)(v284 + 8) = *(_QWORD *)(v277 + 24);
                              goto LABEL_499;
                            }
                            if (v285 == -2)
                              v286 = v284;
                            v283 = (v283 + v287) & v279;
                            v284 = v278 + 16 * v283;
                            v285 = *(_DWORD *)v284;
                            ++v287;
                          }
                          while (*(_DWORD *)v284 != -1);
                          if (v286)
                          {
                            *(_DWORD *)v286 = -1;
                            *(_QWORD *)(v286 + 8) = 0;
                            --*(_DWORD *)(*v275 - 16);
                            v280 = *(_DWORD *)v277;
                            v284 = v286;
                          }
                        }
                        *(_DWORD *)v284 = v280;
                        *(_QWORD *)(v284 + 8) = *(_QWORD *)(v277 + 24);
                        if (*v275)
                        {
                          ++*(_DWORD *)(*v275 - 12);
                          v288 = *v275;
                          if (*v275)
                            goto LABEL_516;
LABEL_521:
                          v289 = *(unsigned int *)(v288 - 16);
                          v290 = *(unsigned int *)(v288 - 4);
                          if (v290 > 0x400)
                            goto LABEL_522;
LABEL_517:
                          if (3 * v290 <= 4 * v289)
                          {
                            if (!(_DWORD)v290)
                            {
                              v291 = 8;
                              goto LABEL_524;
                            }
LABEL_523:
                            v291 = (_DWORD)v290 << (6 * *(_DWORD *)(v288 - 12) >= (2 * v290));
LABEL_524:
                            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v275, v291, (_DWORD *)v284);
                          }
                        }
                        else
                        {
                          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                          v288 = *v275;
                          if (!*v275)
                            goto LABEL_521;
LABEL_516:
                          v289 = (*(_DWORD *)(v288 - 16) + *(_DWORD *)(v288 - 12));
                          v290 = *(unsigned int *)(v288 - 4);
                          if (v290 <= 0x400)
                            goto LABEL_517;
LABEL_522:
                          if (v290 <= 2 * v289)
                            goto LABEL_523;
                        }
LABEL_499:
                        v273 = *((unsigned int *)v276 + 3);
                      }
                      if (++v274 >= v273)
                        goto LABEL_468;
                      continue;
                    }
                  }
                  break;
                }
LABEL_483:
                *(_DWORD *)v263 = v256;
                v267 = *(_QWORD *)(v263 + 8);
                *(_QWORD *)(v263 + 8) = 0;
                if (v267)
                  WTF::fastFree((WTF *)(v267 - 16), v17);
                if (*a8)
                {
                  ++*(_DWORD *)(*a8 - 12);
                  v268 = *a8;
                  if (*a8)
                    goto LABEL_487;
LABEL_492:
                  v269 = *(unsigned int *)(v268 - 16);
                  v270 = *(unsigned int *)(v268 - 4);
                  if (v270 > 0x400)
                    goto LABEL_493;
LABEL_488:
                  if (3 * v270 > 4 * v269)
                    goto LABEL_496;
                  if (!(_DWORD)v270)
                  {
                    v271 = 8;
LABEL_495:
                    v263 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a8, v271, (int *)v263);
                    goto LABEL_496;
                  }
                }
                else
                {
                  MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                  v268 = *a8;
                  if (!*a8)
                    goto LABEL_492;
LABEL_487:
                  v269 = (*(_DWORD *)(v268 - 16) + *(_DWORD *)(v268 - 12));
                  v270 = *(unsigned int *)(v268 - 4);
                  if (v270 <= 0x400)
                    goto LABEL_488;
LABEL_493:
                  if (v270 > 2 * v269)
                    goto LABEL_496;
                }
                v271 = (_DWORD)v270 << (6 * *(_DWORD *)(v268 - 12) >= (2 * v270));
                goto LABEL_495;
              }
            }
            v149 = ii + v181;
          }
        case 1:
          v171 = *(double *)(a7 + 24 * v111 + 16);
          if (v171 < -3.40282347e38 || v171 > 3.40282347e38)
            goto LABEL_273;
          v174 = v328;
          if (v328
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v328, 8u, 0), (v174 = v328) != 0))
          {
            v175 = *(v174 - 2);
            v176 = (WTF::StringImpl *)v329;
            v177 = *((_DWORD *)v329 + 4);
            if (v177 >= 0x100)
            {
LABEL_279:
              v178 = v177 >> 8;
              goto LABEL_424;
            }
          }
          else
          {
            v175 = 0;
            v176 = (WTF::StringImpl *)v329;
            v177 = *((_DWORD *)v329 + 4);
            if (v177 >= 0x100)
              goto LABEL_279;
          }
          v178 = WTF::StringImpl::hashSlowCase(v176);
LABEL_424:
          v240 = 0;
          v241 = v171;
          for (jj = 1; ; ++jj)
          {
            v243 = v178 & v175;
            v182 = &v174[8 * v243];
            v244 = *(WTF **)v182;
            if (*(_QWORD *)v182 == -1)
            {
              v240 = &v174[8 * v243];
            }
            else
            {
              if (!v244)
              {
                if (v240)
                {
                  *(_OWORD *)v240 = 0u;
                  *((_OWORD *)v240 + 1) = 0u;
                  --*(v328 - 4);
                  v182 = v240;
                }
                v248 = v329;
                v15 = v307;
                v70 = (WebGPU::ShaderModule *)v311;
                if (v329)
                  *(_DWORD *)v329 += 2;
                *(_QWORD *)v182 = v248;
                v17 = (float *)(v182 + 2);
                v249 = v182[6];
                if ((_DWORD)v249)
                {
                  if ((_DWORD)v249 != -1)
                    ((void (*)(WTF **, float *))off_1E0FD1950[v249])(v312, v17);
                  *((float *)v182 + 2) = v241;
                  v182[6] = 0;
                }
                else
                {
                  *v17 = v241;
                }
                if (v328)
                  v250 = *(v328 - 3) + 1;
                else
                  v250 = 1;
                *(v328 - 3) = v250;
                if (v328)
                  v251 = *(v328 - 3);
                else
                  v251 = 0;
                v252 = *(v328 - 4) + v251;
                v253 = *(v328 - 1);
                if (v253 > 0x400)
                {
                  if (v253 > 2 * v252)
                    goto LABEL_459;
                }
                else
                {
                  if (3 * v253 > 4 * v252)
                    goto LABEL_459;
                  if (!(_DWORD)v253)
                  {
                    v194 = 8;
                    goto LABEL_454;
                  }
                }
                v194 = (_DWORD)v253 << (6 * *(v328 - 3) >= 2 * (int)v253);
                goto LABEL_454;
              }
              if (WTF::equal(v244, (const WTF::StringImpl *)v329, v113))
              {
                *(float *)v312 = v241;
                LODWORD(v313) = 0;
                v245 = &v174[8 * v243];
                v246 = v245 + 2;
                v247 = v245[6];
                if ((_DWORD)v247 == -1)
                {
                  v15 = v307;
                  v70 = (WebGPU::ShaderModule *)v311;
                }
                else
                {
                  v15 = v307;
                  v70 = (WebGPU::ShaderModule *)v311;
                  if (!(_DWORD)v247)
                  {
                    v187 = 0;
                    *(float *)v246 = v241;
                    goto LABEL_458;
                  }
                  ((void (*)(char *, unsigned int *))off_1E0FD1950[v247])(&v330, v246);
                  v241 = *(float *)v312;
                }
                *(float *)v246 = v241;
                v246[4] = 0;
                v187 = v313;
                if ((_DWORD)v313 == -1)
                  goto LABEL_459;
                goto LABEL_458;
              }
            }
            v178 = jj + v243;
          }
        case 2:
          v157 = *(double *)(a7 + 24 * v111 + 16);
          if (v157 < -2147483650.0 || v157 > 2147483650.0)
            goto LABEL_273;
          v159 = v328;
          if (v328
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v328, 8u, 0), (v159 = v328) != 0))
          {
            v160 = *(v159 - 2);
            v161 = (WTF::StringImpl *)v329;
            v162 = *((_DWORD *)v329 + 4);
            if (v162 >= 0x100)
            {
LABEL_259:
              v163 = v162 >> 8;
              goto LABEL_354;
            }
          }
          else
          {
            v160 = 0;
            v161 = (WTF::StringImpl *)v329;
            v162 = *((_DWORD *)v329 + 4);
            if (v162 >= 0x100)
              goto LABEL_259;
          }
          v163 = WTF::StringImpl::hashSlowCase(v161);
LABEL_354:
          v212 = 0;
          v213 = (int)v157;
          for (kk = 1; ; ++kk)
          {
            v215 = v163 & v160;
            v182 = &v159[8 * v215];
            v216 = *(WTF **)v182;
            if (*(_QWORD *)v182 == -1)
            {
              v212 = &v159[8 * v215];
            }
            else
            {
              if (!v216)
              {
                if (v212)
                {
                  *(_OWORD *)v212 = 0u;
                  *((_OWORD *)v212 + 1) = 0u;
                  --*(v328 - 4);
                  v182 = v212;
                }
                v220 = v329;
                v19 = v306;
                v70 = (WebGPU::ShaderModule *)v311;
                if (v329)
                  *(_DWORD *)v329 += 2;
                *(_QWORD *)v182 = v220;
                v15 = v307;
                v17 = (float *)(v182 + 2);
                v221 = v182[6];
                if ((_DWORD)v221 == 3)
                {
                  *(_DWORD *)v17 = v213;
                }
                else
                {
                  if ((_DWORD)v221 != -1)
                    ((void (*)(WTF **, float *))off_1E0FD1950[v221])(v312, v17);
                  v182[2] = v213;
                  v182[6] = 3;
                }
                if (v328)
                  v222 = *(v328 - 3) + 1;
                else
                  v222 = 1;
                *(v328 - 3) = v222;
                if (v328)
                  v223 = *(v328 - 3);
                else
                  v223 = 0;
                v224 = *(v328 - 4) + v223;
                v225 = *(v328 - 1);
                if (v225 > 0x400)
                {
                  if (v225 > 2 * v224)
                    goto LABEL_459;
                }
                else
                {
                  if (3 * v225 > 4 * v224)
                    goto LABEL_459;
                  if (!(_DWORD)v225)
                  {
                    v194 = 8;
                    goto LABEL_454;
                  }
                }
                v194 = (_DWORD)v225 << (6 * *(v328 - 3) >= 2 * (int)v225);
                goto LABEL_454;
              }
              if (WTF::equal(v216, (const WTF::StringImpl *)v329, v113))
              {
                LODWORD(v312[0]) = (int)v157;
                LODWORD(v313) = 3;
                v217 = &v159[8 * v215];
                v218 = (int *)(v217 + 2);
                v219 = v217[6];
                v19 = v306;
                v15 = v307;
                v70 = (WebGPU::ShaderModule *)v311;
                if ((_DWORD)v219 != -1)
                {
                  if ((_DWORD)v219 == 3)
                  {
                    *v218 = v213;
                    v187 = 3;
                    goto LABEL_458;
                  }
                  ((void (*)(char *, int *))off_1E0FD1950[v219])(&v330, v218);
                }
                v218[4] = -1;
                *v218 = (int)v312[0];
                v218[4] = 3;
                v187 = v313;
                if ((_DWORD)v313 == -1)
                  goto LABEL_459;
LABEL_458:
                ((void (*)(char *, WTF **))off_1E0FD1950[v187])(&v330, v312);
                goto LABEL_459;
              }
            }
            v163 = kk + v215;
          }
        case 3:
          v164 = *(double *)(a7 + 24 * v111 + 16);
          if (v164 < 0.0 || v164 > 4294967300.0)
            goto LABEL_273;
          v166 = v328;
          if (v328
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v328, 8u, 0), (v166 = v328) != 0))
          {
            v167 = *(v166 - 2);
            v168 = (WTF::StringImpl *)v329;
            v169 = *((_DWORD *)v329 + 4);
            if (v169 >= 0x100)
            {
LABEL_268:
              v170 = v169 >> 8;
              goto LABEL_389;
            }
          }
          else
          {
            v167 = 0;
            v168 = (WTF::StringImpl *)v329;
            v169 = *((_DWORD *)v329 + 4);
            if (v169 >= 0x100)
              goto LABEL_268;
          }
          v170 = WTF::StringImpl::hashSlowCase(v168);
LABEL_389:
          v226 = 0;
          v227 = v164;
          for (mm = 1; ; ++mm)
          {
            v229 = v170 & v167;
            v182 = &v166[8 * v229];
            v230 = *(WTF **)v182;
            if (*(_QWORD *)v182 == -1)
            {
              v226 = &v166[8 * v229];
            }
            else
            {
              if (!v230)
              {
                if (v226)
                {
                  *(_OWORD *)v226 = 0u;
                  *((_OWORD *)v226 + 1) = 0u;
                  --*(v328 - 4);
                  v182 = v226;
                }
                v234 = v329;
                v19 = v306;
                v70 = (WebGPU::ShaderModule *)v311;
                if (v329)
                  *(_DWORD *)v329 += 2;
                *(_QWORD *)v182 = v234;
                v15 = v307;
                v17 = (float *)(v182 + 2);
                v235 = v182[6];
                if ((_DWORD)v235 == 4)
                {
                  *(_DWORD *)v17 = v227;
                }
                else
                {
                  if ((_DWORD)v235 != -1)
                    ((void (*)(WTF **, float *))off_1E0FD1950[v235])(v312, v17);
                  v182[2] = v227;
                  v182[6] = 4;
                }
                if (v328)
                  v236 = *(v328 - 3) + 1;
                else
                  v236 = 1;
                *(v328 - 3) = v236;
                if (v328)
                  v237 = *(v328 - 3);
                else
                  v237 = 0;
                v238 = *(v328 - 4) + v237;
                v239 = *(v328 - 1);
                if (v239 > 0x400)
                {
                  if (v239 > 2 * v238)
                    goto LABEL_459;
                }
                else
                {
                  if (3 * v239 > 4 * v238)
                    goto LABEL_459;
                  if (!(_DWORD)v239)
                  {
                    v194 = 8;
                    goto LABEL_454;
                  }
                }
                v194 = (_DWORD)v239 << (6 * *(v328 - 3) >= 2 * (int)v239);
                goto LABEL_454;
              }
              if (WTF::equal(v230, (const WTF::StringImpl *)v329, v113))
              {
                LODWORD(v312[0]) = v164;
                LODWORD(v313) = 4;
                v231 = &v166[8 * v229];
                v232 = v231 + 2;
                v233 = v231[6];
                v19 = v306;
                v15 = v307;
                v70 = (WebGPU::ShaderModule *)v311;
                if ((_DWORD)v233 != -1)
                {
                  if ((_DWORD)v233 == 4)
                  {
                    *v232 = v227;
                    v187 = 4;
                    goto LABEL_458;
                  }
                  ((void (*)(char *, unsigned int *))off_1E0FD1950[v233])(&v330, v232);
                }
                v232[4] = -1;
                *v232 = v312[0];
                v232[4] = 4;
                v187 = v313;
                if ((_DWORD)v313 == -1)
                  goto LABEL_459;
                goto LABEL_458;
              }
            }
            v170 = mm + v229;
          }
        case 4:
          _D8 = *(double *)(a7 + 24 * v111 + 16);
          if (_D8 < -65504.0 || _D8 > 65504.0)
            goto LABEL_273;
          v152 = v328;
          if (v328
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v328, 8u, 0), (v152 = v328) != 0))
          {
            v153 = *(v152 - 2);
            v154 = (WTF::StringImpl *)v329;
            v155 = *((_DWORD *)v329 + 4);
            if (v155 >= 0x100)
            {
LABEL_250:
              v156 = v155 >> 8;
              goto LABEL_318;
            }
          }
          else
          {
            v153 = 0;
            v154 = (WTF::StringImpl *)v329;
            v155 = *((_DWORD *)v329 + 4);
            if (v155 >= 0x100)
              goto LABEL_250;
          }
          v156 = WTF::StringImpl::hashSlowCase(v154);
LABEL_318:
          v195 = 0;
          __asm { FCVT            H8, D8 }
          for (nn = 1; ; ++nn)
          {
            v201 = v156 & v153;
            v182 = &v152[8 * v201];
            v202 = *(WTF **)v182;
            if (*(_QWORD *)v182 == -1)
            {
              v195 = &v152[8 * v201];
            }
            else
            {
              if (!v202)
              {
                if (v195)
                {
                  *(_OWORD *)v195 = 0u;
                  *((_OWORD *)v195 + 1) = 0u;
                  --*(v328 - 4);
                  v182 = v195;
                }
                v206 = v329;
                v15 = v307;
                v70 = (WebGPU::ShaderModule *)v311;
                if (v329)
                  *(_DWORD *)v329 += 2;
                *(_QWORD *)v182 = v206;
                v17 = (float *)(v182 + 2);
                v207 = v182[6];
                if ((_DWORD)v207 == 1)
                {
                  *(_WORD *)v17 = _H8;
                }
                else
                {
                  if ((_DWORD)v207 != -1)
                    ((void (*)(WTF **, float *))off_1E0FD1950[v207])(v312, v17);
                  *((_WORD *)v182 + 4) = _H8;
                  v182[6] = 1;
                }
                if (v328)
                  v208 = *(v328 - 3) + 1;
                else
                  v208 = 1;
                *(v328 - 3) = v208;
                if (v328)
                  v209 = *(v328 - 3);
                else
                  v209 = 0;
                v210 = *(v328 - 4) + v209;
                v211 = *(v328 - 1);
                if (v211 > 0x400)
                {
                  if (v211 > 2 * v210)
                    goto LABEL_459;
                }
                else
                {
                  if (3 * v211 > 4 * v210)
                    goto LABEL_459;
                  if (!(_DWORD)v211)
                  {
                    v194 = 8;
LABEL_454:
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v328, v194, (WTF::StringImpl **)v182);
                    goto LABEL_459;
                  }
                }
                v194 = (_DWORD)v211 << (6 * *(v328 - 3) >= 2 * (int)v211);
                goto LABEL_454;
              }
              if (WTF::equal(v202, (const WTF::StringImpl *)v329, v113))
              {
                LOWORD(v312[0]) = _H8;
                LODWORD(v313) = 1;
                v203 = &v152[8 * v201];
                v204 = v203 + 2;
                v205 = v203[6];
                if ((_DWORD)v205 == -1)
                {
                  v15 = v307;
                  v70 = (WebGPU::ShaderModule *)v311;
                }
                else
                {
                  v15 = v307;
                  v70 = (WebGPU::ShaderModule *)v311;
                  if ((_DWORD)v205 == 1)
                  {
                    *(_WORD *)v204 = _H8;
                    v187 = 1;
                    goto LABEL_458;
                  }
                  ((void (*)(char *, unsigned int *))off_1E0FD1950[v205])(&v330, v204);
                  _H8 = (__int16)v312[0];
                }
                *(_WORD *)v204 = _H8;
                v204[4] = 1;
                v187 = v313;
                if ((_DWORD)v313 == -1)
                  goto LABEL_459;
                goto LABEL_458;
              }
            }
            v156 = nn + v201;
          }
        default:
          goto LABEL_459;
      }
    }
  }
  else
  {
    v88 = 0;
    if (!v74)
      goto LABEL_190;
  }
  v300 = *MEMORY[0x1E0CB2D50];
  while (2)
  {
    v89 = (uint64_t)v74[3];
    if (!v89)
      goto LABEL_185;
    WGSL::evaluate(v89, (uint64_t *)&v328, (uint64_t)v312);
    v91 = v314;
    if (!(_BYTE)v314)
    {
      if (a10)
      {
        v97 = (void *)MEMORY[0x1E0CB35C8];
        v331 = v300;
        v332 = CFSTR("Failed to evaluate override value");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v332, &v331, 1);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "errorWithDomain:code:userInfo:", CFSTR("WebGPU"), 1, v98);
        *a10 = (id)objc_claimAutoreleasedReturnValue();

      }
      *v309 = 0;
      v309[104] = 0;
      goto LABEL_181;
    }
    v92 = v328;
    if (!v328)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v328, 8u, 0);
      v92 = v328;
      if (!v328)
      {
        v93 = 0;
        v94 = *v74;
        v95 = *((_DWORD *)*v74 + 4);
        if (v95 >= 0x100)
          goto LABEL_148;
LABEL_153:
        v96 = WTF::StringImpl::hashSlowCase(v94);
        goto LABEL_154;
      }
    }
    v93 = *(v92 - 2);
    v94 = *v74;
    v95 = *((_DWORD *)*v74 + 4);
    if (v95 < 0x100)
      goto LABEL_153;
LABEL_148:
    v96 = v95 >> 8;
LABEL_154:
    v99 = 0;
    for (i1 = 1; ; ++i1)
    {
      v101 = v96 & v93;
      v102 = &v92[8 * v101];
      v103 = *(WTF **)v102;
      if (*(_QWORD *)v102 == -1)
      {
        v99 = &v92[8 * v101];
        goto LABEL_156;
      }
      if (!v103)
        break;
      if ((WTF::equal(v103, *v74, v90) & 1) != 0)
        goto LABEL_181;
LABEL_156:
      v96 = i1 + v101;
    }
    if (v99)
    {
      *(_OWORD *)v99 = 0u;
      *((_OWORD *)v99 + 1) = 0u;
      --*(v328 - 4);
      v102 = v99;
    }
    v104 = *v74;
    if (*v74)
      *(_DWORD *)v104 += 2;
    *(_QWORD *)v102 = v104;
    v17 = (float *)(v102 + 2);
    v105 = v102[6];
    if ((_DWORD)v105 == -1)
    {
      if ((_DWORD)v313 != -1)
        goto LABEL_169;
    }
    else
    {
      if ((_DWORD)v313 == -1)
      {
        ((void (*)(void (***)(WGSL::Metal::FunctionDefinitionWriter *__hidden), float *))off_1E0FD1950[v105])(&v329, v17);
        v102[6] = -1;
        goto LABEL_170;
      }
LABEL_169:
      v329 = (void (**)(WGSL::Metal::FunctionDefinitionWriter *__hidden))(v102 + 2);
      ((void (*)(_QWORD))off_1E0FD19A8[v313])(&v329);
    }
LABEL_170:
    if (v328)
    {
      ++*(v328 - 3);
      v106 = v328;
      if (v328)
      {
        v107 = *(v328 - 4) + *(v328 - 3);
        v108 = *(v328 - 1);
        if (v108 <= 0x400)
          goto LABEL_173;
LABEL_178:
        if (v108 <= 2 * v107)
        {
LABEL_179:
          v109 = (_DWORD)v108 << (6 * *(v106 - 3) >= 2 * (int)v108);
          goto LABEL_180;
        }
        goto LABEL_181;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v106 = 0;
    }
    v107 = *(v106 - 4);
    v108 = *(v106 - 1);
    if (v108 > 0x400)
      goto LABEL_178;
LABEL_173:
    if (3 * v108 <= 4 * v107)
    {
      if ((_DWORD)v108)
        goto LABEL_179;
      v109 = 8;
LABEL_180:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v328, v109, (WTF::StringImpl **)v102);
    }
LABEL_181:
    if ((_BYTE)v314 && (_DWORD)v313 != -1)
      ((void (*)(void (***)(WGSL::Metal::FunctionDefinitionWriter *__hidden), WTF **))off_1E0FD1950[v313])(&v329, v312);
    v19 = v306;
    v15 = v307;
    v70 = (WebGPU::ShaderModule *)v311;
    if (v91)
    {
LABEL_185:
      v110 = v74 + 4;
      v74 = v73;
      if (v110 != v73)
      {
        v74 = v110;
        while ((unint64_t)*v74 + 1 <= 1)
        {
          v74 += 4;
          if (v74 == v73)
          {
            v74 = v73;
            break;
          }
        }
      }
      if (v74 == v88)
        goto LABEL_190;
      continue;
    }
    break;
  }
LABEL_98:
  if (v323 != -1)
    ((void (*)(WTF **, _QWORD *))off_1E0FD1A58[v323])(v312, v322);
  if (v326)
  {
    v76 = v324;
    if (HIDWORD(v325))
    {
      v77 = (WTF *)((char *)v324 + 24 * HIDWORD(v325));
      do
      {
        v78 = *((unsigned int *)v76 + 5);
        if ((_DWORD)v78)
        {
          v79 = 120 * v78;
          v80 = (_DWORD **)(*((_QWORD *)v76 + 1) + 40);
          do
          {
            v81 = *v80;
            *v80 = 0;
            if (v81)
            {
              if (*v81 == 2)
                WTF::StringImpl::destroy();
              else
                *v81 -= 2;
            }
            v80 += 15;
            v79 -= 120;
          }
          while (v79);
        }
        v82 = (WTF *)*((_QWORD *)v76 + 1);
        if (v82)
        {
          *((_QWORD *)v76 + 1) = 0;
          *((_DWORD *)v76 + 4) = 0;
          WTF::fastFree(v82, v17);
        }
        v76 = (WTF *)((char *)v76 + 24);
      }
      while (v76 != v77);
      v76 = v324;
    }
    if (v76)
    {
      v324 = 0;
      LODWORD(v325) = 0;
      WTF::fastFree(v76, v17);
    }
  }
  v20 = v327;
  v327 = 0;
  if (!v20)
    goto LABEL_119;
LABEL_117:
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_119;
  }
  WTF::StringImpl::destroy();
  v83 = v328;
  if (v328)
  {
LABEL_122:
    v84 = *(v83 - 1);
    if ((_DWORD)v84)
    {
      v85 = v83;
      do
      {
        v86 = *(_DWORD **)v85;
        if (*(_QWORD *)v85 != -1)
        {
          v87 = v85[6];
          if ((_DWORD)v87 != -1)
          {
            ((void (*)(WTF **, unsigned int *))off_1E0FD1950[v87])(v312, v85 + 2);
            v86 = *(_DWORD **)v85;
          }
          v85[6] = -1;
          *(_QWORD *)v85 = 0;
          if (v86)
          {
            if (*v86 == 2)
              WTF::StringImpl::destroy();
            else
              *v86 -= 2;
          }
        }
        v85 += 8;
        --v84;
      }
      while (v84);
    }
    WTF::fastFree((WTF *)(v83 - 4), v17);
  }
LABEL_133:

}

void sub_18244F540(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,uint64_t a22,int a23,int a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  WGSL::Reflection::EntryPointInformation *v40;
  void *v41;
  uint64_t v42;
  void *v44;
  _DWORD *v45;
  void *v46;
  _DWORD *v47;

  WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v40, a2);

  v45 = *(_DWORD **)(v42 - 160);
  *(_QWORD *)(v42 - 160) = 0;
  if (v45)
  {
    if (*v45 == 2)
      WTF::StringImpl::destroy();
    else
      *v45 -= 2;
  }
  if (a40 != -1)
    ((void (*)(WTF **, char *))off_1E0FD1A58[a40])(&a21, &a35);
  std::__optional_destruct_base<WGSL::PipelineLayout,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(v42 - 200), v44);
  v47 = *(_DWORD **)(v42 - 176);
  *(_QWORD *)(v42 - 176) = 0;
  if (v47)
  {
    if (*v47 == 2)
      WTF::StringImpl::destroy();
    else
      *v47 -= 2;
  }
  WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v42 - 168), v46);

  _Unwind_Resume(a1);
}

void WGSL::PipelineLayout::~PipelineLayout(WGSL::PipelineLayout *this, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  WTF *v10;

  v3 = *((_DWORD *)this + 3);
  v4 = *(_QWORD *)this;
  if (v3)
  {
    v5 = v4 + 24 * v3;
    do
    {
      v6 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v6)
      {
        v7 = 120 * v6;
        v8 = (_DWORD **)(*(_QWORD *)(v4 + 8) + 40);
        do
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (*v9 == 2)
              WTF::StringImpl::destroy();
            else
              *v9 -= 2;
          }
          v8 += 15;
          v7 -= 120;
        }
        while (v7);
      }
      v10 = *(WTF **)(v4 + 8);
      if (v10)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v10, a2);
      }
      v4 += 24;
    }
    while (v4 != v5);
    v4 = *(_QWORD *)this;
  }
  if (v4)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
}

uint64_t *WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *(_DWORD **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(unsigned int *)(v5 + 24);
          if ((_DWORD)v7 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E0FD1950[v7])(&v9, v5 + 8);
            v6 = *(_DWORD **)v5;
          }
          *(_DWORD *)(v5 + 24) = -1;
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WTF::StringImpl::destroy();
            else
              *v6 -= 2;
          }
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

id WebGPU::createFunction(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  __CFString *v8;
  void *v9;
  id v10;
  void *v11;
  id v13;
  id v14;

  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_opt_new();
  if (*(_QWORD *)(a2 + 8))
    v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E0FD9588;
  objc_msgSend(v7, "setName:", v8);

  v14 = 0;
  v9 = (void *)objc_msgSend(v5, "newFunctionWithDescriptor:error:", v7, &v14);
  v10 = v14;
  v11 = v10;
  if (v10)
  {
    v13 = v10;
    WTFLogAlways();
  }
  objc_msgSend(v9, "setLabel:", v6, v13);

  return v9;
}

void sub_18244FA54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18244FA70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18244FA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18244FAA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

id WebGPU::errorValidatingBindGroup(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int *v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;

  v3 = *(_QWORD *)(a1 + 64);
  if (!v3 || (v4 = *(_DWORD *)(a1 + 60)) == 0)
  {
LABEL_49:
    v42 = 0;
    return v42;
  }
  v6 = *(_QWORD *)(a1 + 48);
  v48 = v6 + 48 * v4;
  v49 = *(_QWORD *)(a1 + 64);
  v50 = a1;
  v51 = a2;
  while (1)
  {
    v7 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v7)
      break;
LABEL_4:
    v6 += 48;
    if (v6 == v48)
      goto LABEL_49;
  }
  v8 = *(_QWORD *)(v6 + 16);
  v9 = v8 + 32 * v7;
  while (1)
  {
    if (*(_DWORD *)(v8 + 16))
      goto LABEL_7;
    v10 = *(_DWORD *)(v8 + 4);
    v11 = *(_QWORD *)(v3 + 48);
    if (!v11)
      break;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = 9 * ((v10 + ~(v10 << 15)) ^ ((v10 + ~(v10 << 15)) >> 10));
    v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    v15 = v14 ^ HIWORD(v14);
    v16 = v12 & v15;
    v17 = (int *)(v11 + 136 * (v12 & v15));
    v18 = *v17;
    if (*v17 != v10)
    {
      v19 = 1;
      while (v18 != -1)
      {
        v16 = (v16 + v19) & v12;
        v17 = (int *)(v11 + 136 * v16);
        v18 = *v17;
        ++v19;
        if (*v17 == v10)
          goto LABEL_16;
      }
      v17 = (int *)(v11 + 136 * *(unsigned int *)(v11 - 4));
    }
LABEL_16:
    if (v17 == (int *)(v11 + 136 * *(unsigned int *)(v11 - 4)))
      break;
    if (v17[12])
    {
      v20 = 0;
      if (!a2)
        goto LABEL_30;
    }
    else
    {
      v20 = *((_QWORD *)v17 + 4);
      if (!a2)
        goto LABEL_30;
    }
    if (v20)
      goto LABEL_30;
    v21 = *a2;
    if (*a2)
    {
      v22 = *(_DWORD *)(v21 - 8);
      v23 = v17[2];
      v24 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
      v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
      v26 = (v25 ^ HIWORD(v25)) & v22;
      v27 = *(_DWORD *)(v21 + 16 * v26);
      if (v27 != v23)
      {
        v28 = 1;
        while (v27 != -1)
        {
          v26 = ((_DWORD)v26 + v28) & v22;
          v27 = *(_DWORD *)(v21 + 16 * v26);
          ++v28;
          if (v27 == v23)
            goto LABEL_27;
        }
        goto LABEL_7;
      }
LABEL_27:
      if (v26 != *(_DWORD *)(v21 - 4))
      {
        v20 = *(_QWORD *)(v21 + 16 * v26 + 8);
LABEL_30:
        if (!v20)
          goto LABEL_7;
        v29 = *(_QWORD *)(v8 + 8);
        if (!v29)
          goto LABEL_7;
        v30 = *(_QWORD *)(a1 + 88);
        if (!v30)
          goto LABEL_43;
        v31 = *(_DWORD *)(v30 - 8);
        v32 = v31 & v15;
        v33 = *(_DWORD *)(v30 + 8 * v32);
        if (v33 == v10)
        {
LABEL_37:
          v35 = 0;
          if (a3)
            goto LABEL_40;
        }
        else
        {
          v34 = 1;
          while (v33 != -1)
          {
            v32 = ((_DWORD)v32 + v34) & v31;
            v33 = *(_DWORD *)(v30 + 8 * v32);
            ++v34;
            if (v33 == v10)
              goto LABEL_37;
          }
          v32 = *(unsigned int *)(v30 - 4);
          v35 = 0;
          if (a3)
          {
LABEL_40:
            if (v32 == *(_DWORD *)(v30 - 4))
              goto LABEL_44;
            v36 = *(unsigned int *)(v30 + 8 * v32 + 4);
            if (*(_DWORD *)(a3 + 12) > v36)
            {
              v35 = *(unsigned int *)(*(_QWORD *)a3 + 4 * v36);
              goto LABEL_44;
            }
LABEL_43:
            v35 = 0;
          }
        }
LABEL_44:
        v37 = *(_QWORD *)(v8 + 24);
        v38 = *(id *)(v29 + 16);
        v39 = objc_msgSend(v38, "length");
        v40 = v37 + v35;

        v41 = v39 >= v40 && v39 - v40 >= v20;
        a1 = v50;
        a2 = v51;
        v3 = v49;
        if (!v41)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("buffer length(%zu) minus offset(%llu), (resourceOffset(%llu) + dynamicOffset(%u)), is less than required bufferSize(%llu)"), v39, v40, *(_QWORD *)(v8 + 24), v35, v20);
          goto LABEL_51;
        }
      }
    }
LABEL_7:
    v8 += 32;
    if (v8 == v9)
      goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer size is missing for binding at index %u bind group"), *(unsigned int *)(v8 + 4), v44, v45, v46, v47);
LABEL_51:
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  return v42;
}

void sub_18244FDC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WGSL::Reflection::EntryPointInformation *WGSL::Reflection::EntryPointInformation::EntryPointInformation(WGSL::Reflection::EntryPointInformation *this, const WGSL::Reflection::EntryPointInformation *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 1) = v5;
  *((_BYTE *)this + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 16, (uint64_t *)a2 + 2);
    *((_BYTE *)this + 32) = 1;
  }
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)a2 + 5);
  if (!v6)
    goto LABEL_34;
  v7 = *(unsigned int *)(v6 - 12);
  if (!(_DWORD)v7)
    goto LABEL_34;
  v8 = (v7 - 1) | ((v7 - 1) >> 1) | ((((_DWORD)v7 - 1) | ((v7 - 1) >> 1)) >> 2);
  v9 = v8 | (v8 >> 4) | ((v8 | (v8 >> 4)) >> 8);
  v10 = (v9 | HIWORD(v9)) + 1;
  if (v10 > 0x400)
  {
    if (v10 > 2 * v7)
      goto LABEL_16;
    goto LABEL_13;
  }
  if (3 * v10 <= 4 * v7)
  {
LABEL_13:
    LODWORD(v10) = 2 * v10;
    if (v10 <= 0x400)
      goto LABEL_14;
LABEL_16:
    if ((double)v10 * 0.416666667 > (double)v7)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_14:
  if ((double)v10 * 0.604166667 <= (double)v7)
LABEL_17:
    LODWORD(v10) = 2 * v10;
LABEL_18:
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = v10;
  v12 = WTF::fastMalloc((WTF *)((32 * v11) | 0x10));
  bzero((void *)(v12 + 16), 32 * v11);
  *((_QWORD *)this + 5) = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*((_QWORD *)this + 5) - 8) = v11 - 1;
  *(_DWORD *)(*((_QWORD *)this + 5) - 12) = v7;
  *(_DWORD *)(*((_QWORD *)this + 5) - 16) = 0;
  v13 = *((_QWORD *)a2 + 5);
  if (!v13)
  {
    v16 = 0;
    v15 = 0;
LABEL_29:
    if (v13)
      goto LABEL_30;
    v18 = 0;
    if (!v16)
      goto LABEL_34;
    while (1)
    {
LABEL_36:
      v22 = *((_QWORD *)this + 5);
      if (v22)
      {
        v23 = *(_DWORD *)(v22 - 8);
        v24 = *(WTF::StringImpl **)v16;
        v25 = *(_DWORD *)(*(_QWORD *)v16 + 16);
        if (v25 >= 0x100)
          goto LABEL_38;
      }
      else
      {
        v23 = 0;
        v24 = *(WTF::StringImpl **)v16;
        v25 = *(_DWORD *)(*(_QWORD *)v16 + 16);
        if (v25 >= 0x100)
        {
LABEL_38:
          v26 = v25 >> 8;
          goto LABEL_41;
        }
      }
      v26 = WTF::StringImpl::hashSlowCase(v24);
LABEL_41:
      v27 = 0;
      do
      {
        v28 = v26 & v23;
        v26 = ++v27 + v28;
      }
      while (*(_QWORD *)(v22 + 32 * v28));
      v29 = *(WTF::StringImpl **)v16;
      if (*(_QWORD *)v16)
        *(_DWORD *)v29 += 2;
      v30 = (WTF::StringImpl **)(v22 + 32 * v28);
      *v30 = v29;
      v31 = *(WTF::StringImpl **)(v16 + 8);
      if (v31)
        *(_DWORD *)v31 += 2;
      v32 = v30[1];
      v30[1] = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v32 -= 2;
      }
      *(_OWORD *)(v22 + 32 * v28 + 16) = *(_OWORD *)(v16 + 16);
      v33 = v16 + 32;
      v16 = v15;
      if (v33 != v15)
      {
        v16 = v33;
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 32;
          if (v16 == v15)
          {
            v16 = v15;
            break;
          }
        }
      }
      if (v16 == v18)
        goto LABEL_34;
    }
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + 32 * v14;
  if (*(_DWORD *)(v13 - 12))
  {
    v16 = *((_QWORD *)a2 + 5);
    if ((_DWORD)v14)
    {
      v17 = 32 * v14;
      v16 = *((_QWORD *)a2 + 5);
      do
      {
        if ((unint64_t)(*(_QWORD *)v16 + 1) > 1)
          goto LABEL_29;
        v16 += 32;
        v17 -= 32;
      }
      while (v17);
      v16 = v15;
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  v16 = v13 + 32 * v14;
  v15 = v16;
LABEL_30:
  v18 = v13 + 32 * *(unsigned int *)(v13 - 4);
  if (v18 != v16)
    goto LABEL_36;
LABEL_34:
  v19 = *((_OWORD *)a2 + 3);
  v20 = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_OWORD *)this + 3) = v19;
  *((_OWORD *)this + 4) = v20;
  return this;
}

void sub_1824500FC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _DWORD *v5;
  _DWORD *v6;

  std::__optional_destruct_base<WGSL::PipelineLayout,false>::~__optional_destruct_base[abi:sn180100](v3, a2);
  v5 = *(_DWORD **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  v6 = *(_DWORD **)v2;
  *(_QWORD *)v2 = 0;
  if (v6)
  {
    if (*v6 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *v6 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0xAAAAAAB)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1824502E0);
    }
    v5 = 24 * v3;
    v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = v6;
      v9 = *a2;
      v10 = *a2 + 24 * v7;
      do
      {
        *(_DWORD *)v8 = *(_DWORD *)v9;
        v11 = *(unsigned int *)(v9 + 20);
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 20) = v11;
        if ((_DWORD)v11)
        {
          if (v11 >= 0x2222223)
            goto LABEL_15;
          v12 = 120 * v11;
          v13 = WTF::fastMalloc((WTF *)(120 * v11));
          *(_DWORD *)(v8 + 16) = v12 / 0x78;
          *(_QWORD *)(v8 + 8) = v13;
          v14 = *(_DWORD *)(v9 + 20);
          if (v14)
          {
            v15 = *(__int128 **)(v9 + 8);
            v16 = (__int128 *)((char *)v15 + 120 * v14);
            do
            {
              v17 = *v15;
              v18 = v15[1];
              *(_QWORD *)(v13 + 32) = *((_QWORD *)v15 + 4);
              *(_OWORD *)v13 = v17;
              *(_OWORD *)(v13 + 16) = v18;
              v19 = (_DWORD *)*((_QWORD *)v15 + 5);
              if (v19)
                *v19 += 2;
              *(_QWORD *)(v13 + 40) = v19;
              *(_OWORD *)(v13 + 48) = v15[3];
              v20 = v15[4];
              v21 = v15[5];
              v22 = v15[6];
              *(_QWORD *)(v13 + 109) = *(_QWORD *)((char *)v15 + 109);
              *(_OWORD *)(v13 + 80) = v21;
              *(_OWORD *)(v13 + 96) = v22;
              *(_OWORD *)(v13 + 64) = v20;
              v15 = (__int128 *)((char *)v15 + 120);
              v13 += 120;
            }
            while (v15 != v16);
          }
        }
        v8 += 24;
        v9 += 24;
      }
      while (v9 != v10);
    }
  }
  return a1;
}

void sub_1824502EC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  _DWORD *v31;
  char v32;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400)
      goto LABEL_8;
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3)
LABEL_11:
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = WTF::fastMalloc((WTF *)((32 * v8) | 0x10));
  bzero((void *)(v9 + 16), 32 * v8);
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v10 = *a2;
  if (!*a2)
  {
    v13 = 0;
    v12 = 0;
    goto LABEL_24;
  }
  v11 = *(v10 - 1);
  v12 = &v10[8 * v11];
  if (!*(v10 - 3))
  {
    v13 = &v10[8 * v11];
    v12 = v13;
    if (!v10)
      goto LABEL_28;
LABEL_25:
    v15 = &v10[8 * *(v10 - 1)];
    if (v15 != v13)
      goto LABEL_31;
    return a1;
  }
  v13 = v10;
  if (!(_DWORD)v11)
  {
LABEL_24:
    if (!v10)
      goto LABEL_28;
    goto LABEL_25;
  }
  v14 = 32 * v11;
  v13 = v10;
  do
  {
    if ((unint64_t)(*(_QWORD *)v13 + 1) > 1)
      goto LABEL_24;
    v13 += 8;
    v14 -= 32;
  }
  while (v14);
  v13 = v12;
  if (v10)
    goto LABEL_25;
LABEL_28:
  v15 = 0;
  if (v13)
  {
    do
    {
LABEL_31:
      v16 = *a1;
      if (*a1)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = *(WTF::StringImpl **)v13;
        v19 = *(_DWORD *)(*(_QWORD *)v13 + 16);
        if (v19 < 0x100)
          goto LABEL_35;
      }
      else
      {
        v17 = 0;
        v18 = *(WTF::StringImpl **)v13;
        v19 = *(_DWORD *)(*(_QWORD *)v13 + 16);
        if (v19 < 0x100)
        {
LABEL_35:
          v20 = WTF::StringImpl::hashSlowCase(v18);
          goto LABEL_36;
        }
      }
      v20 = v19 >> 8;
LABEL_36:
      v21 = 0;
      do
      {
        v22 = v20 & v17;
        v20 = ++v21 + v22;
      }
      while (*(_QWORD *)(v16 + 32 * v22));
      v23 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
        *(_DWORD *)v23 += 2;
      v24 = v16 + 32 * v22;
      *(_QWORD *)v24 = v23;
      v27 = *(_DWORD *)(v24 + 24);
      v26 = (_DWORD *)(v24 + 24);
      v25 = v27;
      v28 = v13[6];
      if (v27 == -1)
      {
        if ((_DWORD)v28 != -1)
        {
LABEL_44:
          v31 = v26 - 4;
          ((void (*)(_DWORD **))off_1E0FD19A8[v28])(&v31);
        }
      }
      else
      {
        if ((_DWORD)v28 != -1)
          goto LABEL_44;
        ((void (*)(char *, _DWORD *))off_1E0FD1950[v25])(&v32, v26 - 4);
        *v26 = -1;
      }
      v29 = v13 + 8;
      v13 = v12;
      if (v29 != v12)
      {
        v13 = v29;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 8;
          if (v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
    }
    while (v13 != v15);
  }
  return a1;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  _DWORD *v4;
  uint64_t v5;
  float result;
  char v7;

  v4 = *(_DWORD **)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1E0FD1950[v5])(&v7, v4);
  }
  result = *a3;
  *v4 = *(_DWORD *)a3;
  v4[4] = 0;
  return result;
}

__int16 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_@<H0>(uint64_t *a1@<X0>, __int16 *a2@<X1>, __int16 *a3@<X2>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E0FD1950[v5])(&v7, v4);
  }
  result = *a3;
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E0FD1950[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E0FD1950[v5])(&v6, v4);
  }
  v4[4] = -1;
  *v4 = *a3;
  v4[4] = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E0FD1950[v5])(&v6, v4);
  }
  v4[4] = -1;
  *v4 = *a3;
  v4[4] = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD1950[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD1950[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 6;
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(WTF **result, WTF **a2, unsigned int **a3)
{
  WTF *v3;
  int v4;
  unsigned int *v5;
  uint64_t v6;
  WTF **v7;
  _DWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[2];
  char v13;

  v3 = *result;
  v4 = *((_DWORD *)*result + 4);
  if (v4 == 7)
    return WTF::FixedVector<WGSL::ConstantValue>::operator=(a2, a3);
  v5 = *a3;
  if (*a3)
  {
    v6 = *v5;
    result = (WTF **)WTF::fastMalloc((WTF *)(24 * v6 + 8));
    v7 = result;
    *(_DWORD *)result = v6;
    if ((_DWORD)v6)
    {
      v8 = result + 3;
      v9 = v5 + 6;
      v10 = 24 * v6;
      do
      {
        *((_BYTE *)v8 - 16) = 0;
        *v8 = -1;
        v11 = *v9;
        if ((_DWORD)v11 != -1)
        {
          result = (WTF **)((uint64_t (*)(_BYTE *, _DWORD *, unsigned int *))off_1E0FD1A00[v11])(v12, v8 - 4, v9 - 4);
          *v8 = v11;
        }
        v8 += 6;
        v9 += 6;
        v10 -= 24;
      }
      while (v10);
    }
    v4 = *((_DWORD *)v3 + 4);
    if (v4 == -1)
      goto LABEL_11;
  }
  else
  {
    v7 = 0;
    if (v4 == -1)
      goto LABEL_11;
  }
  result = (WTF **)((uint64_t (*)(char *, WTF *))off_1E0FD1950[v4])(&v13, v3);
LABEL_11:
  *(_QWORD *)v3 = v7;
  *((_DWORD *)v3 + 4) = 7;
  return result;
}

void sub_182450A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  _DWORD *v12;
  uint64_t v14;

  v14 = *v12;
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, _DWORD *))off_1E0FD1950[v14])(&a12, v12 - 4);
  *v12 = -1;
  _Unwind_Resume(exception_object);
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(WTF **result, WTF **a2, unsigned int **a3)
{
  WTF *v3;
  int v4;
  unsigned int *v5;
  uint64_t v6;
  WTF **v7;
  _DWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[2];
  char v13;

  v3 = *result;
  v4 = *((_DWORD *)*result + 4);
  if (v4 == 8)
    return WTF::FixedVector<WGSL::ConstantValue>::operator=(a2, a3);
  v5 = *a3;
  if (*a3)
  {
    v6 = *v5;
    result = (WTF **)WTF::fastMalloc((WTF *)(24 * v6 + 8));
    v7 = result;
    *(_DWORD *)result = v6;
    if ((_DWORD)v6)
    {
      v8 = result + 3;
      v9 = v5 + 6;
      v10 = 24 * v6;
      do
      {
        *((_BYTE *)v8 - 16) = 0;
        *v8 = -1;
        v11 = *v9;
        if ((_DWORD)v11 != -1)
        {
          result = (WTF **)((uint64_t (*)(_BYTE *, _DWORD *, unsigned int *))off_1E0FD1A00[v11])(v12, v8 - 4, v9 - 4);
          *v8 = v11;
        }
        v8 += 6;
        v9 += 6;
        v10 -= 24;
      }
      while (v10);
    }
    v4 = *((_DWORD *)v3 + 4);
    if (v4 == -1)
      goto LABEL_11;
  }
  else
  {
    v7 = 0;
    if (v4 == -1)
      goto LABEL_11;
  }
  result = (WTF **)((uint64_t (*)(char *, WTF *))off_1E0FD1950[v4])(&v13, v3);
LABEL_11:
  *(_QWORD *)v3 = v7;
  *((_DWORD *)v3 + 4) = 8;
  return result;
}

void sub_182450C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  _DWORD *v12;
  uint64_t v14;

  v14 = *v12;
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, _DWORD *))off_1E0FD1950[v14])(&a12, v12 - 4);
  *v12 = -1;
  _Unwind_Resume(exception_object);
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(WTF **result, uint64_t a2, unsigned int **a3)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  WTF **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[2];
  char v13;

  v3 = *result;
  v4 = *a3;
  if (*((_DWORD *)*result + 4) == 9)
  {
    *(_QWORD *)a2 = v4;
    return WTF::FixedVector<WGSL::ConstantValue>::operator=((WTF **)(a2 + 8), a3 + 1);
  }
  else
  {
    v5 = a3[1];
    if (v5)
    {
      v6 = *v5;
      result = (WTF **)WTF::fastMalloc((WTF *)(24 * v6 + 8));
      v7 = result;
      *(_DWORD *)result = v6;
      if ((_DWORD)v6)
      {
        v8 = 0;
        v9 = 24 * v6;
        do
        {
          LOBYTE(v7[v8 / 8 + 1]) = 0;
          LODWORD(v7[v8 / 8 + 3]) = -1;
          v10 = v5[v8 / 4 + 6];
          if ((_DWORD)v10 != -1)
          {
            result = (WTF **)((uint64_t (*)(_BYTE *, WTF **, unsigned int *))off_1E0FD1A00[v10])(v12, &v7[v8 / 8 + 1], &v5[v8 / 4 + 2]);
            LODWORD(v7[v8 / 8 + 3]) = v10;
          }
          v8 += 24;
        }
        while (v9 != v8);
      }
    }
    else
    {
      v7 = 0;
    }
    v11 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v11 != -1)
      result = (WTF **)((uint64_t (*)(char *, WTF *))off_1E0FD1950[v11])(&v13, v3);
    *(_QWORD *)v3 = v4;
    *((_QWORD *)v3 + 1) = v7;
    *((_DWORD *)v3 + 4) = 9;
  }
  return result;
}

void sub_182450D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v15 = v12 + v13;
  v16 = *(unsigned int *)(v15 + 24);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1950[v16])(&a12, v15 + 8);
  *(_DWORD *)(v15 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t *a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 10)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(a2, a3);
    ((void (*)(char *, uint64_t))off_1E0FD1950[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v4, a3);
  *(_DWORD *)(v4 + 16) = 10;
  return result;
}

WTF **WTF::FixedVector<WGSL::ConstantValue>::operator=(WTF **a1, unsigned int **a2)
{
  unsigned int *v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _BYTE v15[2];
  char v16;

  v3 = *a2;
  if (*a2)
  {
    v4 = *v3;
    v5 = (WTF *)WTF::fastMalloc((WTF *)(24 * v4 + 8));
    *(_DWORD *)v5 = v4;
    if ((_DWORD)v4)
    {
      v6 = 0;
      v7 = 24 * v4;
      do
      {
        *((_BYTE *)v5 + v6 + 8) = 0;
        a2 = (unsigned int **)((char *)v5 + v6 + 8);
        *(_DWORD *)((char *)v5 + v6 + 24) = -1;
        v8 = v3[v6 / 4 + 6];
        if ((_DWORD)v8 != -1)
        {
          ((void (*)(_BYTE *, unsigned int **, unsigned int *))off_1E0FD1A00[v8])(v15, a2, &v3[v6 / 4 + 2]);
          *(_DWORD *)((char *)v5 + v6 + 24) = v8;
        }
        v6 += 24;
      }
      while (v7 != v6);
    }
  }
  else
  {
    v5 = 0;
  }
  v9 = *a1;
  *a1 = v5;
  if (v9)
  {
    v10 = *(unsigned int *)v9;
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      v12 = (_DWORD *)((char *)v9 + 24);
      do
      {
        a2 = (unsigned int **)(v12 - 4);
        v13 = *v12;
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, unsigned int **))off_1E0FD1950[v13])(&v16, a2);
        *v12 = -1;
        v12 += 6;
        v11 -= 24;
      }
      while (v11);
    }
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void sub_182450F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v15 = v12 + v13;
  v16 = *(unsigned int *)(v15 + 24);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1950[v16])(&a12, v15 + 8);
  *(_DWORD *)(v15 + 24) = -1;
  _Unwind_Resume(exception_object);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

__int16 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_@<H0>(uint64_t a1@<X0>, __int16 *a2@<X1>, __int16 *a3@<X2>)
{
  __int16 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[2];

  v4 = *a3;
  if (*a3)
  {
    v5 = *v4;
    v6 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
    *v6 = v5;
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 24 * v5;
      do
      {
        LOBYTE(v6[v7 / 4 + 2]) = 0;
        v6[v7 / 4 + 6] = -1;
        v9 = v4[v7 / 4 + 6];
        if ((_DWORD)v9 != -1)
        {
          ((void (*)(_BYTE *, _DWORD *, unsigned int *))off_1E0FD1A00[v9])(v10, &v6[v7 / 4 + 2], &v4[v7 / 4 + 2]);
          v6[v7 / 4 + 6] = v9;
        }
        v7 += 24;
      }
      while (v8 != v7);
    }
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

void sub_1824510D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = v13 + v14;
  v17 = *(unsigned int *)(v16 + 24);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1950[v17])(&a13, v16 + 8);
  *(_DWORD *)(v16 + 24) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[2];

  v4 = *a3;
  if (*a3)
  {
    v5 = *v4;
    v6 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
    *v6 = v5;
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 24 * v5;
      do
      {
        LOBYTE(v6[v7 / 4 + 2]) = 0;
        v6[v7 / 4 + 6] = -1;
        v9 = v4[v7 / 4 + 6];
        if ((_DWORD)v9 != -1)
        {
          ((void (*)(_BYTE *, _DWORD *, unsigned int *))off_1E0FD1A00[v9])(v10, &v6[v7 / 4 + 2], &v4[v7 / 4 + 2]);
          v6[v7 / 4 + 6] = v9;
        }
        v7 += 24;
      }
      while (v8 != v7);
    }
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

void sub_1824511E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = v13 + v14;
  v17 = *(unsigned int *)(v16 + 24);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1950[v17])(&a13, v16 + 8);
  *(_DWORD *)(v16 + 24) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int *v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[2];

  *a2 = *a3;
  v4 = (unsigned int *)a3[1];
  if (v4)
  {
    v5 = *v4;
    v6 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
    *v6 = v5;
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 24 * v5;
      do
      {
        LOBYTE(v6[v7 / 4 + 2]) = 0;
        v6[v7 / 4 + 6] = -1;
        v9 = v4[v7 / 4 + 6];
        if ((_DWORD)v9 != -1)
        {
          ((void (*)(_BYTE *, _DWORD *, unsigned int *))off_1E0FD1A00[v9])(v10, &v6[v7 / 4 + 2], &v4[v7 / 4 + 2]);
          v6[v7 / 4 + 6] = v9;
        }
        v7 += 24;
      }
      while (v8 != v7);
    }
  }
  else
  {
    v6 = 0;
  }
  a2[1] = v6;
}

void sub_182451300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = v13 + v14;
  v17 = *(unsigned int *)(v16 + 24);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1950[v17])(&a13, v16 + 8);
  *(_DWORD *)(v16 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t *a2, unsigned int **a3)
{
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(a2, a3);
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(uint64_t *a1, unsigned int **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v10, a2);
  v4 = *a1;
  *a1 = v10;
  v10 = v4;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = v4;
      do
      {
        v7 = *(_DWORD **)v6;
        if (*(_QWORD *)v6 != -1)
        {
          v8 = *(unsigned int *)(v6 + 24);
          if ((_DWORD)v8 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E0FD1950[v8])(&v11, v6 + 8);
            v7 = *(_DWORD **)v6;
          }
          *(_DWORD *)(v6 + 24) = -1;
          *(_QWORD *)v6 = 0;
          if (v7)
          {
            if (*v7 == 2)
              WTF::StringImpl::destroy();
            else
              *v7 -= 2;
          }
        }
        v6 += 32;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL13PrepareResultENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WGSL::Reflection::EntryPointInformation *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  void (***v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  WTF *v14;

  if (*((_BYTE *)a2 + 8))
  {
    v3 = *a2;
    if (!*a2)
      return;
  }
  else
  {
    WGSL::ShaderModule::revertReplacements((WTF *)a2[2], a2);
    v7 = a2[2];
    v8 = *((unsigned int *)a2 + 9);
    if (v8 < *(_DWORD *)(v7 + 356))
    {
      do
      {
        v9 = *(void (****)(_QWORD))(*(_QWORD *)(v7 + 344) + 8 * v8);
        (**v9)(v9);
        ++v8;
      }
      while (v8 < *(unsigned int *)(v7 + 356));
      LODWORD(v8) = *((_DWORD *)a2 + 9);
    }
    *(_DWORD *)(v7 + 356) = v8;
    *(_QWORD *)(v7 + 312) = a2[3];
    v10 = *((unsigned int *)a2 + 8);
    v11 = *(unsigned int *)(v7 + 340);
    if ((_DWORD)v11 != (_DWORD)v10)
    {
      v12 = (WTF **)(*(_QWORD *)(v7 + 328) + 8 * v10);
      v13 = 8 * v11 - 8 * v10;
      do
      {
        v14 = *v12++;
        WTF::fastFree(v14, a2);
        v13 -= 8;
      }
      while (v13);
    }
    *(_DWORD *)(v7 + 340) = v10;
    if ((_DWORD)v10)
    {
      *(_QWORD *)(v7 + 320) = *(_QWORD *)(*(_QWORD *)(v7 + 328) + 8 * v10 - 8) + 0x4000;
      v3 = *a2;
      if (!*a2)
        return;
    }
    else
    {
      *(_QWORD *)(v7 + 320) = 0;
      v3 = *a2;
      if (!*a2)
        return;
    }
  }
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = (WGSL::Reflection::EntryPointInformation *)(v3 + 8);
    do
    {
      if (*((_QWORD *)v5 - 1) != -1)
      {
        WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v5, a2);
        v6 = (_DWORD *)*((_QWORD *)v5 - 1);
        *((_QWORD *)v5 - 1) = 0;
        if (v6)
        {
          if (*v6 == 2)
            WTF::StringImpl::destroy();
          else
            *v6 -= 2;
        }
      }
      v5 = (WGSL::Reflection::EntryPointInformation *)((char *)v5 + 96);
      --v4;
    }
    while (v4);
  }
  WTF::fastFree((WTF *)(v3 - 16), a2);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL13PrepareResultENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t result;
  uint64_t v39;
  char v42;
  char v43;
  char v44;
  char v45[2];

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 32 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v39 = v5;
    while (1)
    {
      v14 = (WTF::StringImpl **)(v4 + 32 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
          {
            v21 = *(_DWORD *)(v20 - 8);
            v22 = *((_DWORD *)v15 + 4);
            if (v22 >= 0x100)
              goto LABEL_22;
LABEL_24:
            v23 = WTF::StringImpl::hashSlowCase(v15);
          }
          else
          {
            v21 = 0;
            v22 = *((_DWORD *)v15 + 4);
            if (v22 < 0x100)
              goto LABEL_24;
LABEL_22:
            v23 = v22 >> 8;
          }
          v24 = 0;
          do
          {
            v25 = v23 & v21;
            v23 = ++v24 + v25;
          }
          while (*(_QWORD *)(v20 + 32 * v25));
          v26 = v20 + 32 * v25;
          v27 = (_DWORD *)(v26 + 24);
          if (*(_DWORD *)(v26 + 24) == -1)
          {
            *v27 = -1;
            *(_QWORD *)v26 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))off_1E0FD1950[*(unsigned int *)(v26 + 24)])(&v44, v26 + 8);
            v28 = *(_DWORD **)v26;
            *v27 = -1;
            *(_QWORD *)v26 = 0;
            if (v28)
            {
              if (*v28 == 2)
                WTF::StringImpl::destroy();
              else
                *v28 -= 2;
            }
          }
          v29 = *v14;
          *v14 = 0;
          *(_QWORD *)v26 = v29;
          v30 = v20 + 32 * v25;
          *(_BYTE *)(v30 + 8) = 0;
          v31 = v30 + 8;
          *v27 = -1;
          v32 = v4 + 32 * v11;
          v35 = *(_DWORD *)(v32 + 24);
          v34 = (_DWORD *)(v32 + 24);
          v33 = v35;
          if (v35 != -1)
          {
            ((void (*)(char *, uint64_t, uint64_t))off_1E0FD1A68[v33])(v45, v31, v4 + 32 * v11 + 8);
            *v27 = v33;
            v36 = *v34;
            if ((_DWORD)v36 != -1)
              ((void (*)(char *, uint64_t))off_1E0FD1950[v36])(&v43, v4 + 32 * v11 + 8);
          }
          *v34 = -1;
          v37 = *v14;
          *v14 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v37 -= 2;
          }
          if (v14 == a3)
            v12 = v26;
          v13 = v39;
          goto LABEL_12;
        }
        v16 = v4 + 32 * v11;
        v19 = *(_DWORD *)(v16 + 24);
        v18 = (_DWORD *)(v16 + 24);
        v17 = v19;
        if (v19 != -1)
        {
          ((void (*)(char *, uint64_t))off_1E0FD1950[v17])(&v42, v4 + 32 * v11 + 8);
          v15 = *v14;
        }
        *v18 = -1;
        *v14 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v15 -= 2;
        }
      }
LABEL_12:
      if (++v11 == v13)
        goto LABEL_41;
    }
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_41:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

void sub_18245186C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _DWORD *v15;
  _DWORD **v16;
  uint64_t v17;
  uint64_t v19;
  _DWORD *v20;

  v19 = *v15;
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1950[v19])(&a15, v17);
  *v15 = -1;
  v20 = *v16;
  *v16 = 0;
  if (v20)
  {
    if (*v20 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *v20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

__int16 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_@<H0>(uint64_t a1@<X0>, __int16 *a2@<X1>, __int16 *a3@<X2>)
{
  __int16 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  *a2 = *a3;
  v3 = a3[1];
  a3[1] = 0;
  a2[1] = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  *a2 = 0;
  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebGPU::Device::createPipelineLayout@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, NSString *a3@<X2>, WebGPU::PipelineLayout *a4@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  WebGPU::PipelineLayout *v8;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  WebGPU *v13;
  WebGPU::Device *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v39;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int32x2_t v52;
  int32x2_t **v53;
  uint64_t v54;
  int32x2_t v55;
  int32x2_t v56;
  char v57;
  WTF *v58;
  WebGPU::PipelineLayout *v59;
  WebGPU *v60;
  WebGPU::Device *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  void *v65;
  uint64_t *v66;
  WTF *v67;
  unsigned __int8 *v68;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  WTF *v84;
  WTF *v85;
  _DWORD *v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  WTF *v93;
  void *v94;
  int32x2_t *v95;
  uint64_t v96;
  WebGPU *v97;
  WebGPU::Device *v98;
  uint64_t v99;
  WebGPU::Device *v100;
  WebGPU::PipelineLayout *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  _QWORD *v106;
  WTF *v107;
  WTF *v108;
  unsigned int v109;
  char v110;

  v6 = result;
  if (*a2 || !*(_QWORD *)(result + 8))
  {
    v8 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
    result = (uint64_t)WebGPU::PipelineLayout::PipelineLayout(v8, (unsigned __int8 **)v6);
    *(_QWORD *)a4 = v8;
    return result;
  }
  v10 = a2;
  LOBYTE(v108) = 0;
  v110 = 0;
  v11 = a2[3];
  if (v11)
  {
    v4 = a2[2];
    v12 = *(unsigned int *)(result + 88);
    if (v4 > v12)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Too many bind groups(%zu), limit(%u)"), a2[2], v12);
      v13 = (WebGPU *)objc_claimAutoreleasedReturnValue();
      WebGPU::reportErrorInCreatePipelineLayout(v13, a3, v6, v14);

      v15 = WTF::fastMalloc((WTF *)0x68);
      result = (uint64_t)WebGPU::PipelineLayout::PipelineLayout((WebGPU::PipelineLayout *)v15, (unsigned __int8 **)v6);
      goto LABEL_126;
    }
    if (v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (!*(_QWORD *)(v11 + 8 * i))
        {
          v15 = WTF::fastMalloc((WTF *)0x68);
          result = (uint64_t)WebGPU::PipelineLayout::PipelineLayout((WebGPU::PipelineLayout *)v15, (unsigned __int8 **)v6);
          goto LABEL_126;
        }
      }
      if (v4 >> 29)
      {
LABEL_145:
        __break(0xC471u);
        JUMPOUT(0x182452180);
      }
      result = WTF::fastMalloc((WTF *)(8 * v4));
      v18 = (uint64_t *)result;
      v19 = 0;
      v5 = 0;
      v107 = (WTF *)result;
      v20 = v4;
      v21 = v10[3];
      do
      {
        v22 = *(_DWORD **)(v21 + v19);
        ++*v22;
        *(_QWORD *)(result + v19) = v22;
        v19 += 8;
        ++v5;
        --v20;
      }
      while (v20);
      if (v5)
      {
        v23 = 0;
        LODWORD(v24) = 0;
        LODWORD(v25) = 0;
        LODWORD(v26) = 0;
        LODWORD(v27) = 0;
        LODWORD(v28) = 0;
        v29 = &v18[v19 / 8];
        while (1)
        {
          v30 = v18[v23 / 8];
          if (*(_QWORD *)(v30 + 104) != v6)
          {
LABEL_76:
            WebGPU::reportErrorInCreatePipelineLayout((WebGPU *)CFSTR("Device mismatch"), a3, v6, (WebGPU::Device *)v17);
            v59 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
            WebGPU::PipelineLayout::PipelineLayout(v59, (unsigned __int8 **)v6);
            goto LABEL_79;
          }
          if (!*(_BYTE *)(v30 + 72))
            break;
          v28 = (*(_DWORD *)(v30 + 124) + v28);
          v27 = (*(_DWORD *)(v30 + 136) + v27);
          v26 = (*(_DWORD *)(v30 + 148) + v26);
          v25 = (*(_DWORD *)(v30 + 160) + v25);
          v24 = (*(_DWORD *)(v30 + 172) + v24);
          v31 = *(unsigned int *)(v6 + 120);
          v32 = *(unsigned int *)(v6 + 124);
          a2 = (_QWORD *)*(unsigned int *)(v6 + 108);
          v33 = *(unsigned int *)(v6 + 112);
          v34 = *(unsigned int *)(v6 + 116);
          if (v28 > v32
            || v27 > v34
            || v26 > v33
            || v25 > a2
            || v24 > v31)
          {
LABEL_78:
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Resource usage limits exceeded: uniformBufferCount(%u) > deviceLimits.maxUniformBuffersPerShaderStage(%u) || storageBufferCount(%u) > deviceLimits.maxStorageBuffersPerShaderStage(%u) || samplerCount(%u) > deviceLimits.maxSamplersPerShaderStage(%u) || textureCount(%u) > deviceLimits.maxSampledTexturesPerShaderStage(%u) || storageTextureCount(%u) > deviceLimits.maxStorageTexturesPerShaderStage(%u)"), v28, v32, v27, v34, v26, v33, v25, a2, v24, v31);
            v60 = (WebGPU *)objc_claimAutoreleasedReturnValue();
            WebGPU::reportErrorInCreatePipelineLayout(v60, a3, v6, v61);

            v59 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
            WebGPU::PipelineLayout::PipelineLayout(v59, (unsigned __int8 **)v6);
            goto LABEL_79;
          }
          v23 += 8;
          if (v19 == v23)
          {
            v39 = 0;
            LODWORD(v24) = 0;
            LODWORD(v25) = 0;
            LODWORD(v26) = 0;
            LODWORD(v27) = 0;
            LODWORD(v28) = 0;
            do
            {
              v17 = v18[v39 / 8];
              if (*(_QWORD *)(v17 + 104) != v6)
                goto LABEL_76;
              if (!*(_BYTE *)(v17 + 72))
                goto LABEL_77;
              v28 = (*(_DWORD *)(v17 + 128) + v28);
              v27 = (*(_DWORD *)(v17 + 140) + v27);
              v26 = (*(_DWORD *)(v17 + 152) + v26);
              v25 = (*(_DWORD *)(v17 + 164) + v25);
              v24 = (*(_DWORD *)(v17 + 176) + v24);
              if (v28 > v32
                || v27 > v34
                || v26 > v33
                || v25 > a2
                || v24 > v31)
              {
                goto LABEL_78;
              }
              v39 += 8;
            }
            while (v19 != v39);
            LODWORD(v24) = 0;
            LODWORD(v25) = 0;
            LODWORD(v26) = 0;
            LODWORD(v27) = 0;
            LODWORD(v28) = 0;
            result = (uint64_t)v18;
            do
            {
              v17 = *(_QWORD *)result;
              if (*(_QWORD *)(*(_QWORD *)result + 104) != v6)
                goto LABEL_76;
              if (!*(_BYTE *)(v17 + 72))
                goto LABEL_77;
              v28 = (*(_DWORD *)(v17 + 132) + v28);
              v27 = (*(_DWORD *)(v17 + 144) + v27);
              v26 = (*(_DWORD *)(v17 + 156) + v26);
              v25 = (*(_DWORD *)(v17 + 168) + v25);
              v24 = (*(_DWORD *)(v17 + 180) + v24);
              if (v28 > v32
                || v27 > v34
                || v26 > v33
                || v25 > a2
                || v24 > v31)
              {
                goto LABEL_78;
              }
              result += 8;
              v19 -= 8;
            }
            while (v19);
            v48 = (v4 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v48)
            {
              v49 = v48 + 1;
              v50 = (v48 + 1) & 0x3FFFFFFFFFFFFFFELL;
              v51 = &v18[v50];
              v52 = 0;
              v53 = (int32x2_t **)(v18 + 1);
              v54 = v50;
              v55 = 0;
              do
              {
                v55 = vadd_s32((*(v53 - 1))[23], v55);
                v52 = vadd_s32((*v53)[23], v52);
                v53 += 2;
                v54 -= 2;
              }
              while (v54);
              v56 = vadd_s32(v52, v55);
              if (v49 == v50)
                goto LABEL_139;
            }
            else
            {
              v56 = 0;
              v51 = v18;
            }
            do
            {
              v95 = (int32x2_t *)*v51++;
              v56 = vadd_s32(v95[23], v56);
            }
            while (v29 != v51);
LABEL_139:
            v96 = *(unsigned int *)(v6 + 100);
            if (v56.i32[0] <= v96)
            {
              v99 = *(unsigned int *)(v6 + 104);
              if (v56.i32[1] <= v99)
                goto LABEL_74;
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Too many dynamic storage buffers: used(%u), limit(%u)"), v56.u32[1], v99);
              v97 = (WebGPU *)objc_claimAutoreleasedReturnValue();
              WebGPU::reportErrorInCreatePipelineLayout(v97, a3, v6, v100);
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Too many dynamic uniform buffers: used(%u), limit(%u)"), v56.u32[0], v96);
              v97 = (WebGPU *)objc_claimAutoreleasedReturnValue();
              WebGPU::reportErrorInCreatePipelineLayout(v97, a3, v6, v98);
            }

            WebGPU::PipelineLayout::createInvalid(a4, (unsigned __int8 **)v6);
            v57 = 0;
            v62 = v5;
            goto LABEL_80;
          }
        }
LABEL_77:
        WebGPU::reportErrorInCreatePipelineLayout((WebGPU *)CFSTR("Bind group layout is invalid"), a3, v6, (WebGPU::Device *)v17);
        v59 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
        WebGPU::PipelineLayout::PipelineLayout(v59, (unsigned __int8 **)v6);
LABEL_79:
        v57 = 0;
        *(_QWORD *)a4 = v59;
        v62 = v5;
LABEL_80:
        v63 = 8 * v62;
        do
        {
          result = *v18;
          *v18 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout((WebGPU::BindGroupLayout *)result, a2);
              result = WTF::fastFree(v64, v65);
            }
            else
            {
              --*(_DWORD *)result;
            }
          }
          ++v18;
          v63 -= 8;
        }
        while (v63);
        v58 = v107;
        goto LABEL_87;
      }
    }
    else
    {
      v5 = 0;
      v18 = 0;
    }
LABEL_74:
    v108 = (WTF *)v18;
    v109 = v5;
    v57 = 1;
    v110 = 1;
    v58 = 0;
LABEL_87:
    if (v58)
      result = WTF::fastFree(v58, a2);
    if ((v57 & 1) == 0)
      goto LABEL_127;
  }
  result = WTF::fastMalloc((WTF *)0x68);
  v15 = result;
  *(_QWORD *)(result + 8) = 0;
  v66 = (uint64_t *)(result + 8);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 16) = 0;
  v106 = (_QWORD *)(result + 16);
  *(_BYTE *)(result + 32) = 0;
  if (v110)
  {
    v67 = v108;
    v108 = 0;
    v109 = 0;
    *(_QWORD *)(result + 16) = v67;
    *(_DWORD *)(result + 24) = v4;
    *(_DWORD *)(result + 28) = v5;
    *(_BYTE *)(result + 32) = 1;
  }
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  v103 = (uint64_t *)(result + 56);
  v104 = (uint64_t *)(result + 48);
  v105 = (uint64_t *)(result + 64);
  *(_OWORD *)(result + 72) = 0u;
  v102 = (uint64_t *)(result + 80);
  v68 = *(unsigned __int8 **)v6;
  if (__ldaxr(*(unsigned __int8 **)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v68))
  {
    goto LABEL_96;
  }
  result = MEMORY[0x186DAB1AC](v68);
LABEL_96:
  ++*((_QWORD *)v68 + 1);
  v70 = __ldxr(v68);
  if (v70 == 1)
  {
    if (!__stlxr(0, v68))
      goto LABEL_101;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v68);
LABEL_101:
  *(_QWORD *)(v15 + 88) = v6;
  *(_BYTE *)(v15 + 96) = 1;
  *(_BYTE *)(v15 + 97) = (_BYTE)a3;
  if (!*(_BYTE *)(v15 + 32))
    goto LABEL_126;
  if (!(_DWORD)a3)
    goto LABEL_121;
  v71 = *(unsigned int *)(v15 + 28);
  if (!(_DWORD)v71)
    goto LABEL_121;
  v72 = *(uint64_t **)(v15 + 16);
  v73 = &v72[v71];
  do
  {
    while (1)
    {
      v74 = *v72;
      result = *v66;
      if (*v66
        || (result = WTF::fastCompactMalloc((WTF *)0x10),
            *(_DWORD *)result = 1,
            *(_QWORD *)(result + 8) = v15,
            v75 = *(unsigned int **)(v15 + 8),
            *(_QWORD *)(v15 + 8) = result,
            !v75))
      {
        do
LABEL_110:
          v78 = __ldaxr((unsigned int *)result);
        while (__stlxr(v78 + 1, (unsigned int *)result));
        goto LABEL_111;
      }
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (v77)
      {
        result = *v66;
        if (*v66)
          goto LABEL_110;
      }
      else
      {
        atomic_store(1u, v75);
        WTF::fastFree((WTF *)v75, a2);
        result = *v66;
        if (*v66)
          goto LABEL_110;
      }
LABEL_111:
      v79 = *(unsigned int **)(v74 + 112);
      *(_QWORD *)(v74 + 112) = result;
      if (v79)
      {
        do
        {
          v80 = __ldaxr(v79);
          v81 = v80 - 1;
        }
        while (__stlxr(v81, v79));
        if (!v81)
          break;
      }
      if (++v72 == v73)
        goto LABEL_120;
    }
    atomic_store(1u, v79);
    result = WTF::fastFree((WTF *)v79, a2);
    ++v72;
  }
  while (v72 != v73);
LABEL_120:
  if (!*(_BYTE *)(v15 + 32))
  {
    __break(1u);
    goto LABEL_145;
  }
LABEL_121:
  v82 = *(unsigned int *)(v15 + 28);
  if ((_DWORD)v82)
  {
    v101 = a4;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    result = 0;
    do
    {
      if (v83 >= *(unsigned int *)(v15 + 28))
        goto LABEL_145;
      v86 = *(_DWORD **)(*v106 + 8 * v83);
      v87 = (result + v86[20]);
      v88 = v86[22];
      v89 = v86[24];
      WebGPU::addInitialOffset<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((WTF *)result, (void *)v87, v83, v105, (uint64_t *)(v15 + 40));
      v90 = ((_DWORD)v85 + v88);
      WebGPU::addInitialOffset<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(v85, (void *)v90, v83, (uint64_t *)(v15 + 72), v104);
      WebGPU::addInitialOffset<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(v84, (void *)((_DWORD)v84 + v89), v83++, v102, v103);
      v84 = (WTF *)((_DWORD)v84 + v89);
      v85 = (WTF *)v90;
      result = v87;
    }
    while (v82 != v83);
    a4 = v101;
  }
LABEL_126:
  *(_QWORD *)a4 = v15;
LABEL_127:
  if (v110)
  {
    if (v109)
    {
      v91 = 8 * v109;
      v92 = (uint64_t *)v108;
      do
      {
        result = *v92;
        *v92 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebGPU::BindGroupLayout::~BindGroupLayout((WebGPU::BindGroupLayout *)result, a2);
            result = WTF::fastFree(v93, v94);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        ++v92;
        v91 -= 8;
      }
      while (v91);
    }
    if (v108)
      return WTF::fastFree(v108, a2);
  }
  return result;
}

void sub_18245218C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;
  void *v5;

  WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 128, v4);
  std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v2 - 112, v5);
  _Unwind_Resume(a1);
}

void sub_182452200(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v2 - 112, v4);
  _Unwind_Resume(a1);
}

void sub_182452218(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,_QWORD *a23,uint64_t *a24,uint64_t *a25,uint64_t a26)
{
  uint64_t *v26;
  WTF *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;

  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(a22, a2);
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(v26, v32);
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(a25, v33);
  if (*a23)
  {
    WTF::fastFree((WTF *)(*a23 - 16), v34);
    v35 = *a24;
    if (!*a24)
    {
LABEL_3:
      v36 = *v28;
      if (!*v28)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v35 = *a24;
    if (!*a24)
      goto LABEL_3;
  }
  WTF::fastFree((WTF *)(v35 - 16), v34);
  v36 = *v28;
  if (!*v28)
  {
LABEL_5:
    std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(a26, v34);
    WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v29, v37);
    WTF::fastFree(v27, v38);
    std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v30 - 112, v39);
    _Unwind_Resume(a1);
  }
LABEL_4:
  WTF::fastFree((WTF *)(v36 - 16), v34);
  goto LABEL_5;
}

void sub_182452224(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_18245223C(uint64_t a1, void *a2)
{
  uint64_t v2;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v2 + 48), a2);
  JUMPOUT(0x182452264);
}

WebGPU::PipelineLayout *WebGPU::PipelineLayout::createInvalid(WebGPU::PipelineLayout *this, unsigned __int8 **a2)
{
  WebGPU::PipelineLayout *v4;
  WebGPU::PipelineLayout *result;

  v4 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
  result = WebGPU::PipelineLayout::PipelineLayout(v4, a2);
  *(_QWORD *)this = v4;
  return result;
}

void sub_182452334(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebGPU::reportErrorInCreatePipelineLayout(WebGPU *this, NSString *a2, uint64_t a3, WebGPU::Device *a4)
{
  char v5;
  WebGPU *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v5 = (char)a2;
  v6 = this;
  if ((v5 & 1) != 0)
    goto LABEL_13;
  MEMORY[0x186DAB230](&v16, v6);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = 32 * *(unsigned int *)(a3 + 44);
  v9 = v7 + v8;
  while (v8)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v9 -= 32;
    v8 -= 32;
    if (!v10)
    {
      v11 = v7 + v8;
      if (!*(_BYTE *)(v11 + 16))
      {
        v12 = v16;
        v16 = 0;
        *(_DWORD *)v11 = 1;
        *(_QWORD *)(v11 + 8) = v12;
        *(_BYTE *)(v11 + 16) = 1;
      }
      goto LABEL_10;
    }
  }
  v13 = *(_QWORD *)(a3 + 24);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v13 + 16))(v13, 1, &v16);
    v14 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
LABEL_10:
  v15 = v16;
  v16 = 0;
  if (!v15)
    goto LABEL_13;
  if (*v15 != 2)
  {
    *v15 -= 2;
LABEL_13:

    return;
  }
  WTF::StringImpl::destroy();

}

void sub_18245244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebGPU::BindGroupLayout **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WebGPU::BindGroupLayout *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebGPU::BindGroupLayout ***)a1;
    v5 = 8 * v3;
    do
    {
      v8 = *v4;
      *v4 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebGPU::BindGroupLayout::~BindGroupLayout(v8, a2);
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebGPU::BindGroupLayout **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WebGPU::BindGroupLayout *v8;
  WTF *v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v3)
    {
      v4 = *(WebGPU::BindGroupLayout ***)a1;
      v5 = 8 * v3;
      do
      {
        v8 = *v4;
        *v4 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
          {
            WebGPU::BindGroupLayout::~BindGroupLayout(v8, a2);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    v9 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  return a1;
}

WTF *WebGPU::addInitialOffset<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(WTF *result, void *a2, int a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v5;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _DWORD *v30;
  int v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;

  v5 = (_DWORD)a2 - (_DWORD)result;
  if ((_DWORD)a2 == (_DWORD)result)
    return result;
  v9 = result;
  v10 = v5 >> 2;
  if (v5 >= 4)
  {
    result = (WTF *)WTF::fastMalloc((WTF *)(v5 & 0xFFFFFFFC));
    v12 = result;
    v11 = v10;
    v13 = *a4;
    if (!*a4)
      goto LABEL_7;
LABEL_8:
    v14 = *(_DWORD *)(v13 - 8);
    goto LABEL_9;
  }
  v11 = 0;
  v12 = 0;
  v13 = *a4;
  if (*a4)
    goto LABEL_8;
LABEL_7:
  result = (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, 8u, 0);
  v13 = *a4;
  if (*a4)
    goto LABEL_8;
  v14 = 0;
LABEL_9:
  v15 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = v16 ^ HIWORD(v16);
  v18 = v14 & v17;
  v19 = v13 + 24 * (v14 & v17);
  v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19 == -1)
  {
LABEL_17:
    result = *(WTF **)(v19 + 8);
    *(_DWORD *)v19 = a3;
    if (result)
    {
      *(_QWORD *)(v19 + 8) = 0;
      *(_DWORD *)(v19 + 16) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  else
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == a3)
      {
        if (v12)
          result = (WTF *)WTF::fastFree(v12, a2);
        goto LABEL_32;
      }
      if (v20 == -2)
        v21 = v19;
      v18 = (v18 + v22) & v14;
      v19 = v13 + 24 * v18;
      v20 = *(_DWORD *)v19;
      ++v22;
    }
    while (*(_DWORD *)v19 != -1);
    if (!v21)
      goto LABEL_17;
    *(_DWORD *)v21 = -1;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    --*(_DWORD *)(*a4 - 16);
    *(_DWORD *)v21 = a3;
    v19 = v21;
  }
  *(_QWORD *)(v19 + 8) = v12;
  *(_DWORD *)(v19 + 16) = v11;
  *(_DWORD *)(v19 + 20) = v10;
  if (*a4)
  {
    ++*(_DWORD *)(*a4 - 12);
    v23 = *a4;
    if (*a4)
      goto LABEL_21;
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v23 = *a4;
    if (*a4)
    {
LABEL_21:
      v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
      v25 = *(unsigned int *)(v23 - 4);
      if (v25 <= 0x400)
        goto LABEL_22;
LABEL_29:
      if (v25 <= 2 * v24)
        goto LABEL_30;
      goto LABEL_32;
    }
  }
  v24 = *(unsigned int *)(v23 - 16);
  v25 = *(unsigned int *)(v23 - 4);
  if (v25 > 0x400)
    goto LABEL_29;
LABEL_22:
  if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_31:
      result = (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, v26, (int *)v19);
      goto LABEL_32;
    }
LABEL_30:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25));
    goto LABEL_31;
  }
LABEL_32:
  v27 = *a5;
  if (*a5
    || (result = (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a5, 8u, 0), (v27 = *a5) != 0))
  {
    v28 = *(_DWORD *)(v27 - 8);
    v29 = v28 & v17;
    v30 = (_DWORD *)(v27 + 8 * (v28 & v17));
    v31 = *v30;
    if (*v30 != -1)
      goto LABEL_35;
LABEL_43:
    *v30 = a3;
    v30[1] = v9 >> 2;
    if (*a5)
    {
      ++*(_DWORD *)(*a5 - 12);
      v34 = *a5;
      if (*a5)
        goto LABEL_45;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v34 = *a5;
      if (*a5)
      {
LABEL_45:
        v35 = (*(_DWORD *)(v34 - 16) + *(_DWORD *)(v34 - 12));
        v36 = *(unsigned int *)(v34 - 4);
        if (v36 <= 0x400)
          goto LABEL_46;
        goto LABEL_51;
      }
    }
    v35 = *(unsigned int *)(v34 - 16);
    v36 = *(unsigned int *)(v34 - 4);
    if (v36 <= 0x400)
    {
LABEL_46:
      if (3 * v36 > 4 * v35)
        return result;
      if (!(_DWORD)v36)
      {
        v37 = 8;
        return (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a5, v37, v30);
      }
LABEL_52:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v36));
      return (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a5, v37, v30);
    }
LABEL_51:
    if (v36 > 2 * v35)
      return result;
    goto LABEL_52;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = MEMORY[0];
  if (MEMORY[0] == -1)
    goto LABEL_43;
LABEL_35:
  v32 = 0;
  v33 = 1;
  while (v31 != a3)
  {
    if (v31 == -2)
      v32 = v30;
    v29 = (v29 + v33) & v28;
    v30 = (_DWORD *)(v27 + 8 * v29);
    v31 = *v30;
    ++v33;
    if (*v30 == -1)
    {
      if (v32)
      {
        *v32 = 0xFFFFFFFFLL;
        --*(_DWORD *)(*a5 - 16);
        v30 = v32;
      }
      goto LABEL_43;
    }
  }
  return result;
}

void sub_18245291C(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

WebGPU::PipelineLayout *WebGPU::PipelineLayout::PipelineLayout(WebGPU::PipelineLayout *this, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *(_DWORD *)this = 1;
  *((_BYTE *)this + 32) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_5:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *((_QWORD *)this + 11) = a2;
  *((_WORD *)this + 48) = 0;
  return this;
}

void sub_182452A14(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(v7, a2);
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(v5, v10);
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(v6, v11);
  v13 = *(_QWORD *)(v2 + 56);
  if (v13)
  {
    WTF::fastFree((WTF *)(v13 - 16), v12);
    v14 = *(_QWORD *)(v2 + 48);
    if (!v14)
    {
LABEL_3:
      v15 = *v8;
      if (!*v8)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v14 = *(_QWORD *)(v2 + 48);
    if (!v14)
      goto LABEL_3;
  }
  WTF::fastFree((WTF *)(v14 - 16), v12);
  v15 = *v8;
  if (!*v8)
  {
LABEL_4:
    std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v4, v12);
    WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v16);
    _Unwind_Resume(a1);
  }
LABEL_7:
  WTF::fastFree((WTF *)(v15 - 16), v12);
  std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v4, v17);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v18);
  _Unwind_Resume(a1);
}

void WebGPU::PipelineLayout::~PipelineLayout(unsigned __int8 ***this, void *a2)
{
  void *v3;
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned __int8 **v6;
  WTF *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 **v10;
  WTF *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 **v14;
  WTF *v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 **v18;
  uint64_t v19;
  WebGPU::BindGroupLayout **v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  WebGPU::BindGroupLayout *v24;
  WTF *v25;
  unsigned __int8 **v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(this + 11, a2);
  v4 = this[10];
  if (v4)
  {
    v5 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = v4 + 1;
      do
      {
        if (*((_DWORD *)v6 - 2) != -2)
        {
          v7 = (WTF *)*v6;
          if (*v6)
          {
            *v6 = 0;
            *((_DWORD *)v6 + 2) = 0;
            WTF::fastFree(v7, v3);
          }
        }
        v6 += 3;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 2), v3);
  }
  v8 = this[9];
  if (v8)
  {
    v9 = *((unsigned int *)v8 - 1);
    if ((_DWORD)v9)
    {
      v10 = v8 + 1;
      do
      {
        if (*((_DWORD *)v10 - 2) != -2)
        {
          v11 = (WTF *)*v10;
          if (*v10)
          {
            *v10 = 0;
            *((_DWORD *)v10 + 2) = 0;
            WTF::fastFree(v11, v3);
          }
        }
        v10 += 3;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 2), v3);
  }
  v12 = this[8];
  if (v12)
  {
    v13 = *((unsigned int *)v12 - 1);
    if ((_DWORD)v13)
    {
      v14 = v12 + 1;
      do
      {
        if (*((_DWORD *)v14 - 2) != -2)
        {
          v15 = (WTF *)*v14;
          if (*v14)
          {
            *v14 = 0;
            *((_DWORD *)v14 + 2) = 0;
            WTF::fastFree(v15, v3);
          }
        }
        v14 += 3;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 2), v3);
  }
  v16 = this[7];
  if (v16)
    WTF::fastFree((WTF *)(v16 - 2), v3);
  v17 = this[6];
  if (v17)
    WTF::fastFree((WTF *)(v17 - 2), v3);
  v18 = this[5];
  if (v18)
    WTF::fastFree((WTF *)(v18 - 2), v3);
  if (*((_BYTE *)this + 32))
  {
    v19 = *((unsigned int *)this + 7);
    if ((_DWORD)v19)
    {
      v20 = (WebGPU::BindGroupLayout **)this[2];
      v21 = 8 * v19;
      do
      {
        v24 = *v20;
        *v20 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 1)
          {
            WebGPU::BindGroupLayout::~BindGroupLayout(v24, v3);
            WTF::fastFree(v22, v23);
          }
          else
          {
            --*(_DWORD *)v24;
          }
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    v25 = (WTF *)this[2];
    if (v25)
    {
      this[2] = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v25, v3);
    }
  }
  v26 = this[1];
  if (v26)
  {
    v26[1] = 0;
    v27 = (unsigned int *)this[1];
    this[1] = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v3);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
}

uint64_t WebGPU::PipelineLayout::bindGroupLayout(WebGPU::PipelineLayout *this, unint64_t a2)
{
  if (!*((_BYTE *)this + 32) || *((unsigned int *)this + 7) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x182452CF4);
  }
  return *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
}

int *WebGPU::PipelineLayout::offsetVectorForBindGroup(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int *v12;
  int v13;
  int v14;
  void *v15;
  WTF *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  WTF *v25;
  int v26;
  unsigned int v27;

  if (!*(_BYTE *)(a1 + 32))
    return 0;
  v5 = *a3;
  if (!*a3)
    return 0;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = v8 & (v10 ^ HIWORD(v10));
  v12 = (int *)(v5 + 24 * v11);
  v13 = *v12;
  if (*v12 != a2)
  {
    v14 = 1;
    while (v13 != -1)
    {
      v11 = (v11 + v14) & v8;
      v12 = (int *)(v5 + 24 * v11);
      v13 = *v12;
      ++v14;
      if (*v12 == a2)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  if (v12 == (int *)(v5 + 24 * *(unsigned int *)(v5 - 4)) || *(_DWORD *)(a1 + 28) <= a2)
    return 0;
  WebGPU::BindGroupLayout::sortedEntries(*(unsigned int **)(*(_QWORD *)(a1 + 16) + 8 * a2), (uint64_t)&v25);
  v16 = v25;
  if (!v27)
  {
LABEL_20:
    v24 = 1;
    if (v16)
      goto LABEL_21;
    goto LABEL_22;
  }
  v17 = 0;
  v18 = *a4;
  v19 = 8 * v27;
  v20 = v25;
  while (1)
  {
    v21 = *(_QWORD *)v20;
    if (!*(_BYTE *)(*(_QWORD *)v20 + 100) && !*(_BYTE *)(v21 + 108) && !*(_BYTE *)(v21 + 116)
      || (*(_DWORD *)(v21 + 4) & a5) == 0)
    {
      goto LABEL_11;
    }
    if (v12[5] <= v17)
      break;
    v22 = *(unsigned int *)(v21 + 120);
    if (*((_DWORD *)a4 + 3) <= v22)
      break;
    *(_DWORD *)(*((_QWORD *)v12 + 1) + 4 * v17++) = *(_DWORD *)(v18 + 4 * v22);
LABEL_11:
    v20 = (WTF *)((char *)v20 + 8);
    v19 -= 8;
    if (!v19)
      goto LABEL_20;
  }
  v24 = 0;
  if (!v16)
    goto LABEL_22;
LABEL_21:
  v25 = 0;
  v26 = 0;
  WTF::fastFree(v16, v15);
LABEL_22:
  if (v24)
    return v12 + 2;
  else
    return 0;
}

_BYTE *WebGPU::PipelineLayout::errorValidatingBindGroupCompatibility(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  if (!result[32])
    return 0;
  v3 = result;
  v4 = *a2;
  if (*a2)
    v4 = *(unsigned int *)(v4 - 12);
  v5 = *((unsigned int *)result + 7);
  if (v5 <= v4)
  {
    if ((_DWORD)v5)
    {
      v7 = 0;
      while (1)
      {
        v8 = *a2;
        if (!*a2)
          break;
        v9 = *(_DWORD *)(v8 - 8);
        v10 = 9 * ((~((_DWORD)v7 << 15) + v7) ^ ((~((_DWORD)v7 << 15) + v7) >> 10));
        v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
        v12 = v9 & (v11 ^ HIWORD(v11));
        v13 = *(_DWORD *)(v8 + 16 * v12);
        if (v13 != (_DWORD)v7)
        {
          v14 = 1;
          while (v13 != -1)
          {
            v12 = ((_DWORD)v12 + v14) & v9;
            v13 = *(_DWORD *)(v8 + 16 * v12);
            ++v14;
            if (v13 == (_DWORD)v7)
              goto LABEL_19;
          }
          v12 = *(unsigned int *)(v8 - 4);
        }
LABEL_19:
        if (v12 == *(_DWORD *)(v8 - 4))
          break;
        v15 = *(_QWORD *)(v8 + 16 * v12 + 8);
        if (!v15)
          break;
        v16 = *(_QWORD *)(v15 + 64);
        if (!v16)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("can not find bind group in set bind groups for bindGroup index %zu"), v7);
          goto LABEL_28;
        }
        if (v7 >= *((unsigned int *)v3 + 7))
        {
          __break(0xC471u);
          return result;
        }
        WebGPU::BindGroupLayout::errorValidatingBindGroupCompatibility(*(_QWORD *)(*((_QWORD *)v3 + 2) + 8 * v7), v16);
        result = (_BYTE *)objc_claimAutoreleasedReturnValue();
        if (result)
          return result;
        if (++v7 == v5)
          return 0;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("can not find bind group in pipeline for bindGroup index %zu"), v7);
LABEL_28:
      result = (_BYTE *)objc_claimAutoreleasedReturnValue();
      return result;
    }
    return 0;
  }
  if ((_DWORD)v5 == 1)
  {
    v6 = *(_QWORD *)(**((_QWORD **)result + 2) + 48);
    if (!v6 || !*(_DWORD *)(v6 - 12))
      return 0;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("number of bind groups set(%u) is less than the pipeline uses(%zu)"), v4, v5);
  result = (_BYTE *)objc_claimAutoreleasedReturnValue();
  return result;
}

_DWORD *wgpuPipelineLayoutReference(_DWORD *result)
{
  ++*result;
  return result;
}

unsigned __int8 ***wgpuPipelineLayoutRelease(unsigned __int8 ***result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::PipelineLayout::~PipelineLayout(result, a2);
    return (unsigned __int8 ***)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuPipelineLayoutSetLabel(int a1, char *__s)
{
  _DWORD *result;
  _DWORD *v3;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  result = v3;
  if (v3)
  {
    if (*v3 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v3 -= 2;
  }
  return result;
}

_DWORD *WebGPU::PresentationContext::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _DWORD *result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1 || *(_QWORD *)v4)
    goto LABEL_3;
  v7 = *(_DWORD *)(v4 + 8);
  if (v7 == 1)
  {
    v8 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)(v8 + 8) = 1;
    *(_QWORD *)v8 = off_1E0FD1B38;
    result = *(id *)(*(_QWORD *)a1 + 16);
    *(_QWORD *)(v8 + 16) = result;
    *(_BYTE *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 96) = 0;
    *a3 = v8;
  }
  else
  {
    if (v7 != 25073424)
    {
LABEL_3:
      result = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
      result[2] = 1;
      *(_QWORD *)result = off_1E0FD1AD0;
      *a3 = (uint64_t)result;
      return result;
    }
    result = WebGPU::PresentationContextIOSurface::create(a1, a2, &v9);
    *a3 = v9;
  }
  return result;
}

uint64_t WebGPU::PresentationContext::getCurrentTexture(WebGPU::PresentationContext *this)
{
  return 0;
}

uint64_t WebGPU::PresentationContext::getCurrentTextureView(WebGPU::PresentationContext *this)
{
  return 0;
}

uint64_t wgpuSurfaceReference(uint64_t result)
{
  ++*(_DWORD *)(result + 8);
  return result;
}

_DWORD *wgpuSurfaceRelease(_DWORD *result)
{
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  --result[2];
  return result;
}

uint64_t wgpuSwapChainReference(uint64_t result)
{
  ++*(_DWORD *)(result + 8);
  return result;
}

_DWORD *wgpuSwapChainRelease(_DWORD *result)
{
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  --result[2];
  return result;
}

uint64_t wgpuSurfaceGetPreferredFormat()
{
  return 23;
}

uint64_t wgpuSwapChainGetCurrentTexture(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t wgpuSwapChainGetCurrentTextureView(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t wgpuSwapChainPresent(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t wgpuSwapChainGetTextureAsNativeImage(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t WebGPU::PresentationContext::isPresentationContextIOSurface(WebGPU::PresentationContext *this)
{
  return 0;
}

uint64_t WebGPU::PresentationContext::isPresentationContextCoreAnimation(WebGPU::PresentationContext *this)
{
  return 0;
}

void WebGPU::PresentationContext::getTextureAsNativeImage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebGPU::PresentationContext::isValid(WebGPU::PresentationContext *this)
{
  return 0;
}

void WebGPU::PresentationContextCoreAnimation::~PresentationContextCoreAnimation(WebGPU::PresentationContextCoreAnimation *this, void *a2)
{
  void *v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E0FD1B38;
  if (*((_BYTE *)this + 96))
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 11, a2);
    v4 = (_DWORD *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WTF::StringImpl::destroy();
      else
        *v4 -= 2;
    }
    std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, v3);
  }

}

{
  void *v3;
  _DWORD *v4;
  void *v5;

  *(_QWORD *)this = off_1E0FD1B38;
  if (*((_BYTE *)this + 96))
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 11, a2);
    v4 = (_DWORD *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WTF::StringImpl::destroy();
      else
        *v4 -= 2;
    }
    std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, v3);
  }

  WTF::fastFree(this, v5);
}

uint64_t WebGPU::PresentationContextCoreAnimation::configure(uint64_t result, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  void *v12;
  unsigned __int8 *v13;
  int v15;
  _DWORD *v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  WebGPU::Device *v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;

  v5 = result;
  v6 = result + 24;
  if (*(_BYTE *)(result + 96))
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(result + 88), a2);
    v8 = *(_DWORD **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = 0;
    if (v8)
    {
      if (*v8 == 2)
        WTF::StringImpl::destroy();
      else
        *v8 -= 2;
    }
    result = std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100](v6, v7);
    *(_BYTE *)(v5 + 96) = 0;
  }
  if (!*(_QWORD *)a3)
  {
    v9 = *(_DWORD *)(a3 + 20);
    if ((v9 - 23) < 2 || v9 == 34 || v9 == 26 && *((_BYTE *)a2 + 264))
    {
      v10 = *(_QWORD *)(a3 + 24);
      v11 = *(_DWORD *)(a3 + 16);
      if (*(_QWORD *)(a3 + 8))
        strlen(*(const char **)(a3 + 8));
      WTF::String::fromUTF8();
      v31 = *(_DWORD *)(a3 + 20);
      v13 = *a2;
      if (__ldaxr(*a2))
      {
        __clrex();
      }
      else if (!__stxr(1u, v13))
      {
        goto LABEL_18;
      }
      MEMORY[0x186DAB1AC](v13);
LABEL_18:
      ++*((_QWORD *)v13 + 1);
      v15 = __ldxr(v13);
      if (v15 == 1)
      {
        if (!__stlxr(0, v13))
        {
          if (*(_BYTE *)(v5 + 96))
          {
LABEL_21:
            if (*(_BYTE *)(v5 + 48))
              std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::reset[abi:sn180100](v6, v12);
            *(_QWORD *)(v5 + 56) = v10;
            *(_DWORD *)(v5 + 64) = v11;
            v16 = *(_DWORD **)(v5 + 72);
            *(_QWORD *)(v5 + 72) = v30;
            if (!v16)
            {
LABEL_30:
              *(_DWORD *)(v5 + 80) = v31;
              v17 = *(unsigned __int8 ***)(v5 + 88);
              *(_QWORD *)(v5 + 88) = a2;
              if (!v17)
                goto LABEL_49;
LABEL_33:
              v18 = *v17;
              if (__ldaxr(*v17))
              {
                __clrex();
              }
              else if (!__stxr(1u, v18))
              {
                goto LABEL_37;
              }
              MEMORY[0x186DAB1AC](v18);
LABEL_37:
              v20 = *((_QWORD *)v18 + 1);
              v21 = v20 - 1;
              *((_QWORD *)v18 + 1) = v20 - 1;
              if (v20 == 1)
              {
                v25 = *((_QWORD *)v18 + 2);
                v22 = (WebGPU::Device *)*((_QWORD *)v18 + 3);
                *((_QWORD *)v18 + 3) = 0;
                v23 = v25 != 0;
                LODWORD(v25) = __ldxr(v18);
                if ((_DWORD)v25 == 1)
                {
LABEL_39:
                  if (!__stlxr(0, v18))
                  {
LABEL_44:
                    if (!v21)
                    {
                      if (v22)
                      {
                        WebGPU::Device::~Device(v22);
                        WTF::fastFree(v26, v27);
                      }
                      if (!v23)
                        WTF::fastFree((WTF *)v18, v12);
                    }
                    goto LABEL_49;
                  }
LABEL_43:
                  WTF::Lock::unlockSlow((WTF::Lock *)v18);
                  goto LABEL_44;
                }
              }
              else
              {
                v22 = 0;
                v23 = 1;
                v24 = __ldxr(v18);
                if (v24 == 1)
                  goto LABEL_39;
              }
              __clrex();
              goto LABEL_43;
            }
            if (*v16 != 2)
            {
              *v16 -= 2;
              goto LABEL_30;
            }
            WTF::StringImpl::destroy();
            *(_DWORD *)(v5 + 80) = v31;
            v17 = *(unsigned __int8 ***)(v5 + 88);
            *(_QWORD *)(v5 + 88) = a2;
            if (v17)
              goto LABEL_33;
LABEL_49:
            objc_msgSend(*(id *)(v5 + 16), "setPixelFormat:", WebGPU::Texture::pixelFormat(*(_DWORD *)(a3 + 20)));
            if (*(_DWORD *)(a3 + 16) == 16)
              objc_msgSend(*(id *)(v5 + 16), "setFramebufferOnly:", 1);
            LODWORD(v28) = *(_DWORD *)(a3 + 24);
            LODWORD(v29) = *(_DWORD *)(a3 + 28);
            objc_msgSend(*(id *)(v5 + 16), "setDrawableSize:", (double)v28, (double)v29);
            return objc_msgSend(*(id *)(v5 + 16), "setDevice:", a2[1]);
          }
LABEL_25:
          *(_BYTE *)(v5 + 24) = 0;
          *(_BYTE *)(v5 + 48) = 0;
          *(_QWORD *)(v5 + 56) = v10;
          *(_DWORD *)(v5 + 64) = v11;
          *(_QWORD *)(v5 + 72) = v30;
          *(_DWORD *)(v5 + 80) = v31;
          *(_QWORD *)(v5 + 88) = a2;
          *(_BYTE *)(v5 + 96) = 1;
          goto LABEL_49;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (*(_BYTE *)(v5 + 96))
        goto LABEL_21;
      goto LABEL_25;
    }
  }
  return result;
}

void sub_182453944(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  _DWORD *v18;

  v18 = a17;
  a17 = 0;
  if (v18)
  {
    if (*v18 == 2)
      WTF::StringImpl::destroy();
    else
      *v18 -= 2;
  }
  std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11, a2);
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebGPU::PresentationContextCoreAnimation::unconfigure(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  if (*(_BYTE *)(this + 96))
  {
    v2 = this;
    v3 = this + 24;
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(this + 88), a2);
    v5 = *(_DWORD **)(v2 + 72);
    *(_QWORD *)(v2 + 72) = 0;
    if (v5)
    {
      if (*v5 == 2)
        WTF::StringImpl::destroy();
      else
        *v5 -= 2;
    }
    this = std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100](v3, v4);
    *(_BYTE *)(v2 + 96) = 0;
  }
  return this;
}

void WebGPU::PresentationContextCoreAnimation::Configuration::generateCurrentFrameState(WebGPU::PresentationContextCoreAnimation::Configuration *this, CAMetalLayer *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 **v10;
  id v11;
  WebGPU::Texture *v12;
  void *v13;
  WTF *v14;
  unsigned __int8 **v15;
  id v16;
  WebGPU::TextureView *v17;
  void *v18;
  id v19;
  int v20;
  int v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  __int128 v28;
  WTF *v29[2];
  __int128 v30;
  __int128 v31;
  WebGPU::Texture *v32;
  _QWORD v33[2];
  int priv;
  int v35;
  Class isa;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = a3;
  WTF::String::utf8();
  objc_msgSend(v5, "nextDrawable");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "texture");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v42)
    v8 = v42 + 16;
  else
    v8 = 0;
  v33[0] = 0;
  v33[1] = v8;
  priv = (int)a2[2]._priv;
  v35 = 1;
  isa = a2[2].super.super.isa;
  v9 = (int)a2[3]._priv;
  v37 = 1;
  v38 = v9;
  v39 = 0x100000001;
  v40 = 0;
  v41 = 0;
  v29[0] = (WTF *)WTF::fastMalloc((WTF *)4);
  *(_DWORD *)v29[0] = v9;
  v29[1] = (WTF *)0x100000001;
  v10 = (unsigned __int8 **)a2[4].super.super.isa;
  v11 = v7;
  v12 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x78);
  WebGPU::Texture::Texture((uint64_t)v12, v11, (uint64_t)v33, (uint64_t *)v29, v10);
  v32 = v12;

  if (v29[0])
    WTF::fastFree(v29[0], v13);
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  if (v42)
    v14 = (WTF *)(v42 + 16);
  else
    v14 = 0;
  v29[1] = v14;
  LODWORD(v30) = a2[3]._priv;
  DWORD1(v30) = 2;
  HIDWORD(v30) = 1;
  DWORD1(v31) = 1;
  *(_QWORD *)&v28 = a2[2].super.super.isa;
  DWORD2(v28) = 1;
  BYTE12(v28) = 1;
  v15 = (unsigned __int8 **)a2[4].super.super.isa;
  v16 = v11;
  v17 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
  WebGPU::TextureView::TextureView((uint64_t)v17, v16, v29, &v28, v12, v15);

  v19 = v6;
  ++*(_DWORD *)v12;
  *(_QWORD *)this = v19;
  *((_QWORD *)this + 1) = v12;
  v20 = (*(_DWORD *)v17)++;
  *((_QWORD *)this + 2) = v17;
  if (v20)
  {
    *(_DWORD *)v17 = v20;
    v21 = *(_DWORD *)v12 - 1;
    if (*(_DWORD *)v12 != 1)
      goto LABEL_11;
LABEL_14:
    WebGPU::Texture::~Texture(v12, v18);
    WTF::fastFree(v26, v27);

    v23 = (WTF *)v42;
    v42 = 0;
    if (!v23)
      goto LABEL_18;
    goto LABEL_15;
  }
  WebGPU::TextureView::~TextureView(v17, v18);
  WTF::fastFree(v24, v25);
  v21 = *(_DWORD *)v12 - 1;
  if (*(_DWORD *)v12 == 1)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)v12 = v21;

  v23 = (WTF *)v42;
  v42 = 0;
  if (!v23)
    goto LABEL_18;
LABEL_15:
  if (*(_DWORD *)v23 == 1)
    WTF::fastFree(v23, v22);
  else
    --*(_DWORD *)v23;
LABEL_18:

}

void sub_182453C44(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WebGPU::Texture *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  void *v24;
  void *v25;
  WTF *v26;

  WTF::fastFree(v21, a2);

  WTF::Ref<WebGPU::Texture,WTF::RawPtrTraits<WebGPU::Texture>,WTF::DefaultRefDerefTraits<WebGPU::Texture>>::~Ref(&a17, v24);
  v26 = *(WTF **)(v22 - 104);
  *(_QWORD *)(v22 - 104) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      WTF::fastFree(v26, v25);

      _Unwind_Resume(a1);
    }
    --*(_DWORD *)v26;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

WebGPU::Texture **WTF::Ref<WebGPU::Texture,WTF::RawPtrTraits<WebGPU::Texture>,WTF::DefaultRefDerefTraits<WebGPU::Texture>>::~Ref(WebGPU::Texture **a1, void *a2)
{
  WebGPU::Texture *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::Texture::~Texture(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

void WebGPU::PresentationContextCoreAnimation::present(WebGPU::PresentationContextCoreAnimation *this)
{
  CAMetalLayer *v2;
  void *v3;
  WebGPU::Texture *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;
  void *v9;
  id v10;
  WebGPU::Texture *v11;
  WebGPU::TextureView *v12;

  if (*((_BYTE *)this + 96))
  {
    v2 = (CAMetalLayer *)((char *)this + 24);
    if (*((_BYTE *)this + 48))
      goto LABEL_17;
    WebGPU::PresentationContextCoreAnimation::Configuration::generateCurrentFrameState((WebGPU::PresentationContextCoreAnimation::Configuration *)&v10, v2, *((void **)this + 2));
    if (!*((_BYTE *)this + 96))
    {
LABEL_19:
      __break(1u);
      return;
    }
    std::optional<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState>::operator=[abi:sn180100]<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,void>((uint64_t)v2, (uint64_t *)&v10);
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebGPU::TextureView::~TextureView(v12, v3);
        WTF::fastFree(v5, v6);
        v4 = v11;
        if (!v11)
          goto LABEL_13;
LABEL_11:
        if (*(_DWORD *)v4 == 1)
        {
          WebGPU::Texture::~Texture(v4, v3);
          WTF::fastFree(v7, v8);

          if (!*((_BYTE *)this + 96))
            goto LABEL_19;
          goto LABEL_16;
        }
        --*(_DWORD *)v4;
LABEL_13:

        if (!*((_BYTE *)this + 96))
          goto LABEL_19;
LABEL_16:
        if (*((_BYTE *)this + 48))
        {
LABEL_17:
          objc_msgSend(*((id *)this + 3), "present");
          if (*((_BYTE *)this + 96))
          {
            std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::reset[abi:sn180100]((uint64_t)v2, v9);
            return;
          }
          goto LABEL_19;
        }
        goto LABEL_19;
      }
      --*(_DWORD *)v12;
    }
    v4 = v11;
    if (!v11)
      goto LABEL_13;
    goto LABEL_11;
  }
}

uint64_t std::optional<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState>::operator=[abi:sn180100]<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,void>(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WebGPU::Texture *v9;
  uint64_t v10;
  WebGPU::TextureView *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;

  v4 = *(unsigned __int8 *)(a1 + 24);
  v5 = *a2;
  *a2 = 0;
  if (!v4)
  {
    v12 = a2[1];
    a2[1] = 0;
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v12;
    v13 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(a1 + 16) = v13;
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  v8 = a2[1];
  a2[1] = 0;
  v9 = *(WebGPU::Texture **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (!v9)
    goto LABEL_5;
  if (*(_DWORD *)v9 == 1)
  {
    WebGPU::Texture::~Texture(v9, v7);
    WTF::fastFree(v15, v16);
    v17 = a2[2];
    a2[2] = 0;
    v11 = *(WebGPU::TextureView **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v17;
    if (v11)
      goto LABEL_10;
    return a1;
  }
  --*(_DWORD *)v9;
LABEL_5:
  v10 = a2[2];
  a2[2] = 0;
  v11 = *(WebGPU::TextureView **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  if (!v11)
    return a1;
LABEL_10:
  if (*(_DWORD *)v11 == 1)
  {
    WebGPU::TextureView::~TextureView(v11, v7);
    WTF::fastFree(v18, v19);
  }
  else
  {
    --*(_DWORD *)v11;
  }
  return a1;
}

void WebGPU::PresentationContextCoreAnimation::getCurrentTexture(WebGPU::PresentationContextCoreAnimation *this)
{
  void *v2;
  WebGPU::Texture *v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  void *v7;
  id v8;
  WebGPU::Texture *v9;
  WebGPU::TextureView *v10;

  if (*((_BYTE *)this + 96) && !*((_BYTE *)this + 48))
  {
    WebGPU::PresentationContextCoreAnimation::Configuration::generateCurrentFrameState((WebGPU::PresentationContextCoreAnimation::Configuration *)&v8, (CAMetalLayer *)((char *)this + 24), *((void **)this + 2));
    if (!*((_BYTE *)this + 96))
      goto LABEL_18;
    std::optional<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState>::operator=[abi:sn180100]<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,void>((uint64_t)this + 24, (uint64_t *)&v8);
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebGPU::TextureView::~TextureView(v10, v2);
        WTF::fastFree(v4, v5);
        v3 = v9;
        if (!v9)
          goto LABEL_13;
LABEL_11:
        if (*(_DWORD *)v3 == 1)
        {
          WebGPU::Texture::~Texture(v3, v2);
          WTF::fastFree(v6, v7);

          if (!*((_BYTE *)this + 96))
            goto LABEL_18;
          goto LABEL_16;
        }
        --*(_DWORD *)v3;
LABEL_13:

        if (!*((_BYTE *)this + 96))
          goto LABEL_18;
LABEL_16:
        if (*((_BYTE *)this + 48))
          return;
LABEL_18:
        __break(1u);
        return;
      }
      --*(_DWORD *)v10;
    }
    v3 = v9;
    if (!v9)
      goto LABEL_13;
    goto LABEL_11;
  }
}

void WebGPU::PresentationContextCoreAnimation::getCurrentTextureView(WebGPU::PresentationContextCoreAnimation *this)
{
  void *v2;
  WebGPU::Texture *v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  void *v7;
  id v8;
  WebGPU::Texture *v9;
  WebGPU::TextureView *v10;

  if (*((_BYTE *)this + 96) && !*((_BYTE *)this + 48))
  {
    WebGPU::PresentationContextCoreAnimation::Configuration::generateCurrentFrameState((WebGPU::PresentationContextCoreAnimation::Configuration *)&v8, (CAMetalLayer *)((char *)this + 24), *((void **)this + 2));
    if (!*((_BYTE *)this + 96))
      goto LABEL_18;
    std::optional<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState>::operator=[abi:sn180100]<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,void>((uint64_t)this + 24, (uint64_t *)&v8);
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebGPU::TextureView::~TextureView(v10, v2);
        WTF::fastFree(v4, v5);
        v3 = v9;
        if (!v9)
          goto LABEL_13;
LABEL_11:
        if (*(_DWORD *)v3 == 1)
        {
          WebGPU::Texture::~Texture(v3, v2);
          WTF::fastFree(v6, v7);

          if (!*((_BYTE *)this + 96))
            goto LABEL_18;
          goto LABEL_16;
        }
        --*(_DWORD *)v3;
LABEL_13:

        if (!*((_BYTE *)this + 96))
          goto LABEL_18;
LABEL_16:
        if (*((_BYTE *)this + 48))
          return;
LABEL_18:
        __break(1u);
        return;
      }
      --*(_DWORD *)v10;
    }
    v3 = v9;
    if (!v9)
      goto LABEL_13;
    goto LABEL_11;
  }
}

uint64_t WebGPU::PresentationContextCoreAnimation::isPresentationContextCoreAnimation(WebGPU::PresentationContextCoreAnimation *this)
{
  return 1;
}

uint64_t WebGPU::PresentationContextCoreAnimation::isValid(WebGPU::PresentationContextCoreAnimation *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WebGPU::TextureView *v3;
  WebGPU::Texture *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WebGPU::TextureView **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebGPU::TextureView::~TextureView(v3, a2);
        WTF::fastFree(v5, v6);
        v4 = *(WebGPU::Texture **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        if (!v4)
        {
LABEL_11:

          return a1;
        }
LABEL_8:
        if (*(_DWORD *)v4 == 1)
        {
          WebGPU::Texture::~Texture(v4, a2);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v4;
        }
        goto LABEL_11;
      }
      --*(_DWORD *)v3;
    }
    v4 = *(WebGPU::Texture **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  return a1;
}

void std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::reset[abi:sn180100](uint64_t a1, void *a2)
{
  WebGPU::TextureView *v3;
  WebGPU::Texture *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WebGPU::TextureView **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebGPU::TextureView::~TextureView(v3, a2);
        WTF::fastFree(v5, v6);
        v4 = *(WebGPU::Texture **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        if (!v4)
        {
LABEL_11:

          *(_BYTE *)(a1 + 24) = 0;
          return;
        }
LABEL_8:
        if (*(_DWORD *)v4 == 1)
        {
          WebGPU::Texture::~Texture(v4, a2);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v4;
        }
        goto LABEL_11;
      }
      --*(_DWORD *)v3;
    }
    v4 = *(WebGPU::Texture **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
}

_DWORD *WebGPU::PresentationContextIOSurface::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD *result;
  _QWORD v14[4];
  _DWORD *v15;
  _QWORD v16[4];
  _DWORD *v17;

  v7 = WTF::fastMalloc((WTF *)0x60);
  v8 = 1;
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)v7 = off_1E0FD1C00;
  *(_BYTE *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 84) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  if (*(_BYTE *)(a2 + 44))
  {
    WTF::MachSendRight::MachSendRight();
    *(_BYTE *)(v7 + 84) = 1;
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(v7 + 88) = 0x200000000;
  *a3 = v7;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceE_block_invoke;
  v16[3] = &__block_descriptor_40_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__0_e20_v16__0____CFArray__8l;
  v17 = (_DWORD *)v7;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3321888768;
  v14[2] = ___ZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceE_block_invoke_1;
  v14[3] = &__block_descriptor_40_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__1_e14_v16__0___v___8l;
  *(_DWORD *)(v7 + 8) = v8 + 4;
  v15 = (_DWORD *)v7;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t))(v9 + 16))(v9, v16, v14, v6);
  v10 = *(_DWORD *)(v7 + 8) - 1;
  if (*(_DWORD *)(v7 + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v11 = *(_DWORD *)(v7 + 8) - 1;
    if (*(_DWORD *)(v7 + 8) != 1)
    {
LABEL_5:
      *(_DWORD *)(v7 + 8) = v11;
      v12 = v15;
      v15 = 0;
      if (!v12)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)(v7 + 8) = v10;
    v11 = v10 - 1;
    if (v11)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v12 = v15;
  v15 = 0;
  if (!v12)
    goto LABEL_11;
LABEL_9:
  if (v12[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    result = v17;
    v17 = 0;
    if (!result)
      return result;
    goto LABEL_12;
  }
  --v12[2];
LABEL_11:
  result = v17;
  v17 = 0;
  if (!result)
    return result;
LABEL_12:
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  --result[2];
  return result;
}

void sub_18245446C(_Unwind_Exception *a1)
{
  uint64_t v1;
  WTF::MachSendRight *v2;
  void *v4;
  WebGPU::Texture *v5;
  unsigned __int8 **v6;
  void *v7;

  if (*(_BYTE *)(v1 + 84))
    WTF::MachSendRight::~MachSendRight(v2);

  v5 = *(WebGPU::Texture **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v5)
    WTF::RefCounted<WebGPU::Texture>::deref(v5, v4);
  v6 = *(unsigned __int8 ***)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v6)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v6, v4);
  WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v1 + 24), v4);

  WTF::fastFree((WTF *)v1, v7);
  _Unwind_Resume(a1);
}

void sub_1824544D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  _DWORD *v18;
  _QWORD *v19;
  int v21;
  int v22;

  if (a13)
  {
    if (a13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a13 + 8))(a13);
    else
      --a13[2];
  }
  if (v18[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
  else
    --v18[2];
  if (a18)
  {
    if (a18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a18 + 8))(a18);
    else
      --a18[2];
  }
  v21 = v18[2] - 1;
  if (v18[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    v21 = v18[2];
  }
  else
  {
    v18[2] = v21;
  }
  *v19 = 0;
  v22 = v21 - 1;
  if (!v22)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    _Unwind_Resume(a1);
  }
  v18[2] = v22;
  _Unwind_Resume(a1);
}

void ___ZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_storeStrong((id *)(v3 + 16), a2);
  if (*(_BYTE *)(v3 + 84) && *(_DWORD *)(v3 + 80))
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(v6);
          IOSurfaceSetOwnershipIdentity();
          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v7);
    }

  }
  WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(v3 + 24), v5);

}

void sub_1824546D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 32);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)(result + 32) = v2;
  return result;
}

_DWORD *__destroy_helper_block_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__0(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void ___ZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceE_block_invoke_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = MEMORY[0x186DAB65C](a2);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E0FD1CD0;
  v4[1] = v3;
  v6 = v4;
  v5 = *(_QWORD *)(v2 + 40);
  if (!v5)
  {
    (*(void (**)(uint64_t))(v3 + 16))(v3);
    v6 = 0;
    goto LABEL_5;
  }
  WebGPU::Queue::onSubmittedWorkScheduled(*(_QWORD *)(v5 + 16), &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
LABEL_5:
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
}

void sub_1824547F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

void sub_182454820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__1(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 32);
  ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)(result + 32) = v2;
  return result;
}

_DWORD *__destroy_helper_block_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__1(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebGPU::PresentationContextIOSurface::~PresentationContextIOSurface(WebGPU::PresentationContextIOSurface *this)
{
  void *v2;
  WebGPU::Texture *v3;
  unsigned __int8 **v4;
  WTF *v5;
  void *v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  WebGPU::Device *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  WTF *v15;
  void *v16;

  *(_QWORD *)this = off_1E0FD1C00;
  if (*((_BYTE *)this + 84))
    WTF::MachSendRight::~MachSendRight((WebGPU::PresentationContextIOSurface *)((char *)this + 80));

  v3 = (WebGPU::Texture *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v3)
  {
LABEL_6:
    v4 = (unsigned __int8 **)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v4)
      goto LABEL_25;
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_6;
  }
  WebGPU::Texture::~Texture(v3, v2);
  WTF::fastFree(v5, v6);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v4)
    goto LABEL_25;
LABEL_9:
  v7 = *v4;
  if (__ldaxr(*v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_13;
  }
  MEMORY[0x186DAB1AC](v7);
LABEL_13:
  v9 = *((_QWORD *)v7 + 1);
  v10 = v9 - 1;
  *((_QWORD *)v7 + 1) = v9 - 1;
  if (v9 != 1)
  {
    v11 = 0;
    v12 = 1;
    v13 = __ldxr(v7);
    if (v13 == 1)
      goto LABEL_15;
LABEL_19:
    __clrex();
    goto LABEL_20;
  }
  v14 = *((_QWORD *)v7 + 2);
  v11 = (WebGPU::Device *)*((_QWORD *)v7 + 3);
  *((_QWORD *)v7 + 3) = 0;
  v12 = v14 != 0;
  LODWORD(v14) = __ldxr(v7);
  if ((_DWORD)v14 != 1)
    goto LABEL_19;
LABEL_15:
  if (!__stlxr(0, v7))
  {
    if (v10)
      goto LABEL_25;
    goto LABEL_21;
  }
LABEL_20:
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v10)
    goto LABEL_25;
LABEL_21:
  if (v11)
  {
    WebGPU::Device::~Device(v11);
    WTF::fastFree(v15, v16);
  }
  if (!v12)
    WTF::fastFree((WTF *)v7, v2);
LABEL_25:
  WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 6, v2);

}

{
  WTF *v1;
  void *v2;

  WebGPU::PresentationContextIOSurface::~PresentationContextIOSurface(this);
  WTF::fastFree(v1, v2);
}

void WebGPU::PresentationContextIOSurface::getTextureAsNativeImage(WebGPU::PresentationContextIOSurface *this@<X0>, unsigned int a2@<W1>, CGImageRef *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  CFStringRef *v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  int v14;
  BOOL v15;
  char v16;
  size_t v17;
  size_t v18;
  int v19;
  size_t v20;
  void *v21;
  CGDataProvider *v22;
  CGBitmapInfo v23;
  CGColorSpace *v24;
  CGColorSpace *space;
  _QWORD v26[6];
  void *v27;

  if (*((_QWORD *)this + 5)
    && *((_DWORD *)this + 9) > a2
    && ((v5 = *((_QWORD *)this + 3), (v6 = *(_QWORD *)(v5 + 16 * a2 + 8)) != 0)
     || (v6 = *(_QWORD *)(v5 + 16 * a2)) != 0))
  {
    WebGPU::Texture::waitForCommandBufferCompletion(v6);
    v7 = *(id *)(v6 + 8);
    v8 = v7;
    if (v7 && objc_msgSend(v7, "pixelFormat") != 80)
    {
      v9 = objc_msgSend(v8, "pixelFormat");
      v10 = (CFStringRef *)MEMORY[0x1E0C9DA10];
      if (*((_DWORD *)this + 22) == 1)
        v10 = (CFStringRef *)MEMORY[0x1E0C9D908];
      space = CGColorSpaceCreateWithName(*v10);
      v11 = objc_msgSend(v8, "width");
      v12 = objc_msgSend(v8, "height");
      v13 = v12;
      if (*((_DWORD *)this + 23) == 1)
        v14 = 5;
      else
        v14 = 1;
      v15 = v9 == 115;
      v16 = 2;
      if (v9 == 115)
        v16 = 3;
      v17 = v11 << v16;
      if (v9 == 115)
        v18 = 16;
      else
        v18 = 8;
      if (v15)
        v19 = 4352;
      else
        v19 = 0x4000;
      v20 = v12 * v17;
      WTF::tryFastMalloc((WTF *)(v12 * v17));
      v21 = v27;
      if (v27)
      {
        memset(v26, 0, 24);
        v26[3] = v11;
        v26[4] = v13;
        v26[5] = 1;
        objc_msgSend(v8, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v27, v17, v26, 0);
        v22 = CGDataProviderCreateWithData(v21, v21, v20, (CGDataProviderReleaseDataCallback)WebGPU::PresentationContextIOSurface::getTextureAsNativeImage::$_0::__invoke);
        v23 = v14 | v19;
        v24 = space;
        *a3 = CGImageCreate(v11, v13, v18, (4 * v18), v17, space, v23, v22, 0, 0, kCGRenderingIntentDefault);
        if (v22)
          CFRelease(v22);
      }
      else
      {
        *a3 = 0;
        v24 = space;
      }
      if (v24)
        CFRelease(v24);
    }
    else
    {
      *a3 = 0;
    }

  }
  else
  {
    *a3 = 0;
  }
}

void sub_182454BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  void *v11;
  const void *v12;

  if (v12)
  {
    CFRelease(v12);
    if (!cf)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if (!cf)
  {
    goto LABEL_3;
  }
  CFRelease(cf);

  _Unwind_Resume(a1);
}

void sub_182454C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebGPU::PresentationContextIOSurface::configure(uint64_t a1, float *a2, uint32x2_t *a3)
{
  void *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  WebGPU::Texture *v11;
  WTF *v12;
  void *v13;
  unsigned __int8 *v14;
  int v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  WebGPU::Device *v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  const float *v28;
  uint32x2_t v29;
  uint32x2_t v30;
  unsigned int v31;
  int v32;
  uint32x2_t v33;
  unsigned int v34;
  unint64_t v35;
  BOOL v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  void *v45;
  unsigned int v46;
  __CFString *v47;
  unsigned __int32 v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  WebGPU::Device *v52;
  void *v53;
  WTF *v54;
  WebGPU::Device *v55;
  WebGPU::Device *v56;
  uint64_t v57;
  uint64_t j;
  __IOSurface *v59;
  MTLTextureDescriptor *v60;
  void *v61;
  WebGPU::Texture *v62;
  __CFString *v63;
  _DWORD *v64;
  uint64_t v65;
  WTF *v66;
  id v67;
  void *v68;
  void *v69;
  __CFString *v70;
  _DWORD *v71;
  uint64_t v72;
  WTF *v73;
  id v74;
  WebGPU::Texture *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  WebGPU::Texture **v81;
  WebGPU::Texture **v82;
  WebGPU::Texture **v83;
  WebGPU::Texture *v84;
  WebGPU::Texture *v85;
  WebGPU::Texture *v86;
  int v87;
  WTF *v88;
  void *v89;
  WTF *v90;
  void *v91;
  WTF *v92;
  void *v93;
  WTF *v94;
  void *v95;
  WTF *v96;
  void *v97;
  void *v98;
  id v99;
  void *v100;
  uint64_t v101;
  int *v102;
  int v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t (**v109)(_QWORD, _QWORD);
  uint64_t v110;
  id obj;
  uint64_t v112;
  uint64_t v113;
  __int32 v114;
  uint64_t v115;
  unsigned int *v116;
  MTLTextureDescriptor *v117;
  id v118;
  id v119;
  WebGPU::Texture *v120;
  WebGPU::Texture *v121[2];
  _DWORD *v122;
  WTF *v123;
  int v124;
  int v125;
  _DWORD *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  WTF *v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _QWORD v137[2];
  __int32 v138;
  int v139;
  uint32x2_t v140;
  int v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  int *v145;
  int v146;
  _QWORD v147[4];
  id v148;
  _BYTE v149[128];
  _BYTE v150[128];
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v116 = (unsigned int *)(a1 + 24);
  WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 24), a2);
  *(_QWORD *)(a1 + 56) = 0;
  v7 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0x100000000;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  v8 = *(unsigned __int8 **)a2;
  if (__ldaxr(*(unsigned __int8 **)a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v8);
LABEL_5:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr(v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v8))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 64) = a2;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_WORD *)(v7 + 96) = 0;
  v11 = *(WebGPU::Texture **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  if (!v11)
    goto LABEL_13;
  if (*(_DWORD *)v11 != 1)
  {
    --*(_DWORD *)v11;
LABEL_13:
    if (*a3)
      return;
    goto LABEL_16;
  }
  WebGPU::Texture::~Texture(v11, v6);
  WTF::fastFree(v12, v13);
  if (*a3)
    return;
LABEL_16:
  v114 = a3[8].i32[0];
  v14 = *(unsigned __int8 **)a2;
  if (__ldaxr(*(unsigned __int8 **)a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_20;
  }
  MEMORY[0x186DAB1AC](v14);
LABEL_20:
  ++*((_QWORD *)v14 + 1);
  v16 = __ldxr(v14);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v14))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  v17 = *(unsigned __int8 ***)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2;
  if (!v17)
    goto LABEL_42;
  v18 = *v17;
  if (__ldaxr(*v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_30;
  }
  MEMORY[0x186DAB1AC](v18);
LABEL_30:
  v20 = *((_QWORD *)v18 + 1);
  v21 = v20 - 1;
  *((_QWORD *)v18 + 1) = v20 - 1;
  if (v20 != 1)
  {
    v22 = 0;
    v23 = 1;
    v24 = __ldxr(v18);
    if (v24 == 1)
      goto LABEL_32;
LABEL_36:
    __clrex();
    goto LABEL_37;
  }
  v25 = *((_QWORD *)v18 + 2);
  v22 = (WebGPU::Device *)*((_QWORD *)v18 + 3);
  *((_QWORD *)v18 + 3) = 0;
  v23 = v25 != 0;
  LODWORD(v25) = __ldxr(v18);
  if ((_DWORD)v25 != 1)
    goto LABEL_36;
LABEL_32:
  if (!__stlxr(0, v18))
  {
    if (!v21)
      goto LABEL_38;
    goto LABEL_42;
  }
LABEL_37:
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (!v21)
  {
LABEL_38:
    if (v22)
    {
      WebGPU::Device::~Device(v22);
      WTF::fastFree(v26, v27);
    }
    if (!v23)
      WTF::fastFree((WTF *)v18, v6);
  }
LABEL_42:
  v147[0] = MEMORY[0x1E0C809B0];
  v147[1] = 3221225472;
  v147[2] = ___ZN6WebGPU28PresentationContextIOSurface9configureERNS_6DeviceERK23WGPUSwapChainDescriptor_block_invoke_2;
  v147[3] = &unk_1E0FD1CA0;
  v148 = &__block_literal_global_0;
  v109 = (uint64_t (**)(_QWORD, _QWORD))MEMORY[0x186DAB65C](v147);
  v28 = a2 + 19;
  v29 = (uint32x2_t)vld1_dup_f32(v28);
  v30 = vmin_u32(a3[3], v29);
  v31 = a3[2].u32[1];
  v32 = 23;
  if (v31 <= 0x22 && ((1 << v31) & 0x400840000) != 0)
    v32 = a3[2].i32[1];
  v146 = v32;
  v33 = a3[1];
  v137[0] = 0;
  v137[1] = v33;
  v34 = a3[6].u32[1];
  if (v34 <= 1)
    v35 = 1;
  else
    v35 = v34;
  v36 = v34 == 0;
  v37 = &v146;
  if (!v36)
    v37 = (int *)a3[5];
  v138 = a3[2].i32[0];
  v139 = 1;
  v140 = v30;
  v141 = 1;
  v142 = v32;
  v143 = 0x100000001;
  v144 = v35;
  v145 = v37;
  *(uint32x2_t *)(a1 + 88) = a3[7];
  v38 = v30.u32[0];
  v39 = v30.u32[1];
  objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", WebGPU::Texture::pixelFormat(v32), v30.u32[0], v30.u32[1], 0);
  v117 = (MTLTextureDescriptor *)objc_claimAutoreleasedReturnValue();
  v40 = ((unint64_t)a3[2].u32[0] >> 2) & 7;
  if ((v146 - 38) < 6 || WebGPU::Texture::isCompressedFormat(v146))
    v40 |= 0x10uLL;
  -[MTLTextureDescriptor setUsage:](v117, "setUsage:", v40);
  -[MTLTextureDescriptor setStorageMode:](v117, "setStorageMode:", 0);
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v41 = *(id *)(a1 + 16);
  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v133, v150, 16);
  if (v42)
  {
    v43 = *(_QWORD *)v134;
    do
    {
      for (i = 0; i != v42; ++i)
      {
        if (*(_QWORD *)v134 != v43)
          objc_enumerationMutation(v41);
        v45 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * i);
        if (objc_msgSend(v45, "height") != v39 || objc_msgSend(v45, "width") != v38)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid surface size. Backing surface has size (%d, %d) but attempting to configure a size of (%u, %u)"), objc_msgSend(v45, "width"), objc_msgSend(v45, "height"), v38, v39);
          v55 = (WebGPU::Device *)objc_claimAutoreleasedReturnValue();
          WebGPU::generateAValidationError((WebGPU *)a2, v55, (NSString *)(v114 != 0));

          goto LABEL_80;
        }
      }
      v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v133, v150, 16);
    }
    while (v42);
  }

  v46 = a3[2].u32[1];
  if (v46 > 0x22 || ((1 << v46) & 0x400840000) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Requested texture format %s is not a valid context format"), WebGPU::Texture::formatToString(v46));
    v56 = (WebGPU::Device *)objc_claimAutoreleasedReturnValue();
    WebGPU::generateAValidationError((WebGPU *)a2, v56, (NSString *)(v114 != 0));

    goto LABEL_80;
  }
  v47 = CFSTR("Width or height is zero");
  if (!(_DWORD)v38
    || !(_DWORD)v39
    || (v48 = *((_DWORD *)a2 + 19), v47 = CFSTR("Requested canvas width and/or height are too large"),
                                    a3[3].i32[0] > v48)
    || a3[3].i32[1] > v48)
  {
    WebGPU::generateAValidationError((WebGPU *)a2, (WebGPU::Device *)v47, (NSString *)(v114 != 0));
    goto LABEL_80;
  }
  v49 = a3[6].u32[1];
  if ((_DWORD)v49)
  {
    v50 = (unsigned int *)a3[5];
    v51 = 4 * v49;
    do
    {
      if ((v109[2](v109, *v50) & 1) == 0)
      {
        WebGPU::generateAValidationError((WebGPU *)a2, (WebGPU::Device *)CFSTR("Requested texture view format BGRA8UnormStorage is not enabled"), (NSString *)(v114 != 0));
        goto LABEL_80;
      }
      ++v50;
      v51 -= 4;
    }
    while (v51);
  }
  WTF::Vector<WGPUTextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WGPUTextureFormat const,18446744073709551615ul>((uint64_t)&v131, (uint64_t)v145, v144);
  WebGPU::Device::errorValidatingTextureCreation((uint64_t)a2, v137, (unsigned int **)&v131);
  v52 = (WebGPU::Device *)objc_claimAutoreleasedReturnValue();
  if (v52)
  {
    WebGPU::generateAValidationError((WebGPU *)a2, v52, (NSString *)(v114 != 0));
    goto LABEL_74;
  }
  if (a3[2].i32[1] == 23 && (a3[2].i8[0] & 8) != 0)
  {
    v101 = *((unsigned int *)a2 + 57);
    if (!(_DWORD)v101)
    {
LABEL_153:
      WebGPU::generateAValidationError((WebGPU *)a2, (WebGPU::Device *)CFSTR("Requested storage format but BGRA8UnormStorage is not enabled"), (NSString *)(v114 != 0));
      goto LABEL_75;
    }
    v102 = (int *)*((_QWORD *)a2 + 27);
    while (1)
    {
      v103 = *v102++;
      if (v103 == 10)
        break;
      if (!--v101)
        goto LABEL_153;
    }
  }
  -[MTLTextureDescriptor setUsage:](v117, "setUsage:", -[MTLTextureDescriptor usage](v117, "usage") | 4);
  v113 = -[MTLTextureDescriptor pixelFormat](v117, "pixelFormat");
  v110 = -[MTLTextureDescriptor usage](v117, "usage");
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  obj = *(id *)(a1 + 16);
  v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v149, 16);
  if (!v57)
    goto LABEL_146;
  v112 = *(_QWORD *)v128;
  do
  {
    v115 = v57;
    for (j = 0; j != v115; ++j)
    {
      if (*(_QWORD *)v128 != v112)
        objc_enumerationMutation(obj);
      v59 = *(__IOSurface **)(*((_QWORD *)&v127 + 1) + 8 * j);
      if (v113 != 115)
      {
        v62 = 0;
        goto LABEL_110;
      }
      -[MTLTextureDescriptor setPixelFormat:](v117, "setPixelFormat:", 115);
      v142 = 34;
      -[MTLTextureDescriptor setUsage:](v117, "setUsage:", v110);
      -[MTLTextureDescriptor setUsage:](v117, "setUsage:", -[MTLTextureDescriptor usage](v117, "usage") | 1);
      v60 = v117;
      v61 = (void *)objc_msgSend(*((id *)a2 + 1), "newTextureWithDescriptor:", v60);
      WebGPU::Device::setOwnerWithIdentity((uint64_t)a2, v61);

      if (a3[1])
        strlen(*(const char **)&a3[1]);
      WTF::String::fromUTF8();
      if (v126)
        v63 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v63 = &stru_1E0FD9588;
      objc_msgSend(v61, "setLabel:", v63);

      v64 = v126;
      v126 = 0;
      if (!v64)
        goto LABEL_102;
      if (*v64 != 2)
      {
        *v64 -= 2;
LABEL_102:
        v65 = a3[6].u32[1];
        v123 = 0;
        v124 = 0;
        v125 = v65;
        if ((_DWORD)v65)
          goto LABEL_105;
        goto LABEL_107;
      }
      WTF::StringImpl::destroy();
      v65 = a3[6].u32[1];
      v123 = 0;
      v124 = 0;
      v125 = v65;
      if ((_DWORD)v65)
      {
LABEL_105:
        if (v65 >> 30)
          goto LABEL_156;
        v66 = (WTF *)WTF::fastMalloc((WTF *)(4 * v65));
        v124 = v65;
        v123 = v66;
        memcpy(v66, *(const void **)&a3[5], 4 * a3[6].u32[1]);
      }
LABEL_107:
      v67 = v61;
      v62 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x78);
      WebGPU::Texture::Texture((uint64_t)v62, v67, (uint64_t)v137, (uint64_t *)&v123, (unsigned __int8 **)a2);

      *((_BYTE *)v62 + 97) = 1;
      -[MTLTextureDescriptor setPixelFormat:](v60, "setPixelFormat:", 80);
      v142 = 23;
      -[MTLTextureDescriptor setUsage:](v60, "setUsage:", v110 | 2);
      if (v123)
        WTF::fastFree(v123, v68);

LABEL_110:
      WebGPU::Device::newTextureWithDescriptor((WebGPU::Device *)a2, v117, v59, 0);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      if (a3[1])
        strlen(*(const char **)&a3[1]);
      WTF::String::fromUTF8();
      if (v122)
        v70 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v70 = &stru_1E0FD9588;
      objc_msgSend(v69, "setLabel:", v70);

      v71 = v122;
      v122 = 0;
      if (!v71)
        goto LABEL_118;
      if (*v71 != 2)
      {
        *v71 -= 2;
LABEL_118:
        v72 = a3[6].u32[1];
        v123 = 0;
        v124 = 0;
        v125 = v72;
        if (!(_DWORD)v72)
          goto LABEL_123;
        goto LABEL_121;
      }
      WTF::StringImpl::destroy();
      v72 = a3[6].u32[1];
      v123 = 0;
      v124 = 0;
      v125 = v72;
      if (!(_DWORD)v72)
        goto LABEL_123;
LABEL_121:
      if (v72 >> 30)
      {
LABEL_156:
        __break(0xC471u);
        JUMPOUT(0x1824558B4);
      }
      v73 = (WTF *)WTF::fastMalloc((WTF *)(4 * v72));
      v124 = v72;
      v123 = v73;
      memcpy(v73, *(const void **)&a3[5], 4 * a3[6].u32[1]);
LABEL_123:
      v74 = v69;
      v75 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x78);
      WebGPU::Texture::Texture((uint64_t)v75, v74, (uint64_t)v137, (uint64_t *)&v123, (unsigned __int8 **)a2);
      v121[1] = v75;

      *((_BYTE *)v75 + 97) = 1;
      ++*(_DWORD *)v75;
      v120 = v75;
      if (v62)
        ++*(_DWORD *)v62;
      v121[0] = v62;
      v77 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v77 == *(_DWORD *)(a1 + 32))
      {
        v78 = (_QWORD *)WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v116, v77 + 1, (unint64_t)&v120);
        v77 = *(unsigned int *)(a1 + 36);
        v79 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v77);
        v80 = *v78;
        *v78 = 0;
        v81 = (WebGPU::Texture **)(v78 + 1);
        *v79 = v80;
        v82 = (WebGPU::Texture **)(v79 + 1);
      }
      else
      {
        v83 = (WebGPU::Texture **)(*(_QWORD *)v116 + 16 * v77);
        v120 = 0;
        *v83 = v75;
        v82 = v83 + 1;
        v81 = v121;
      }
      v84 = *v81;
      *v81 = 0;
      *v82 = v84;
      *(_DWORD *)(a1 + 36) = v77 + 1;
      v85 = v121[0];
      v121[0] = 0;
      if (!v85)
        goto LABEL_131;
      if (*(_DWORD *)v85 != 1)
      {
        --*(_DWORD *)v85;
LABEL_131:
        v86 = v120;
        v120 = 0;
        if (!v86)
          goto LABEL_132;
        goto LABEL_139;
      }
      WebGPU::Texture::~Texture(v85, v76);
      WTF::fastFree(v92, v93);
      v86 = v120;
      v120 = 0;
      if (!v86)
      {
LABEL_132:
        v87 = *(_DWORD *)v75 - 1;
        if (*(_DWORD *)v75 != 1)
          goto LABEL_133;
        goto LABEL_141;
      }
LABEL_139:
      if (*(_DWORD *)v86 == 1)
      {
        WebGPU::Texture::~Texture(v86, v76);
        WTF::fastFree(v96, v97);
        v87 = *(_DWORD *)v75 - 1;
        if (*(_DWORD *)v75 != 1)
        {
LABEL_133:
          *(_DWORD *)v75 = v87;
          v88 = v123;
          if (!v123)
            goto LABEL_135;
LABEL_134:
          WTF::fastFree(v88, v76);
          goto LABEL_135;
        }
      }
      else
      {
        --*(_DWORD *)v86;
        v87 = *(_DWORD *)v75 - 1;
        if (*(_DWORD *)v75 != 1)
          goto LABEL_133;
      }
LABEL_141:
      WebGPU::Texture::~Texture(v75, v76);
      WTF::fastFree(v94, v95);
      v88 = v123;
      if (v123)
        goto LABEL_134;
LABEL_135:

      if (v62)
      {
        if (*(_DWORD *)v62 == 1)
        {
          WebGPU::Texture::~Texture(v62, v89);
          WTF::fastFree(v90, v91);
        }
        else
        {
          --*(_DWORD *)v62;
        }
      }
    }
    v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v149, 16);
  }
  while (v57);
LABEL_146:

  if (v113 == 115)
  {
    v98 = (void *)objc_opt_new();
    objc_msgSend(v98, "setFastMathEnabled:", 1);
    v99 = *(id *)(*(_QWORD *)(a1 + 40) + 8);
    v119 = 0;
    v100 = (void *)objc_msgSend(v99, "newLibraryWithSource:options:error:", CFSTR("\n    using namespace metal;\n    constant float3x3 rgbToYCbCr = float3x3(\n        float3(0.2126, 0.7152, 0.0722),\n        float3(-0.1146, -0.3854, 0.5),\n        float3(0.5, -0.4542, -0.0458));\n    constant float3x3 yCbCrToRGB = float3x3(\n        float3(1, 0, 1.5748),\n        float3(1, -0.1873, -0.4681),\n        float3(1, 1.8556, 0));\n    kernel void luminanceClamp(texture2d<float, access::read>  inTexture  [[texture(0)]],\n        texture2d<float, access::write> outTexture [[texture(1)]],\n        uint2 gid [[thread_position_in_grid]])\n    {\n        if (gid.x >= outTexture.get_width() || gid.y >= outTexture.get_height())\n            return;\n\n        float4 inColor  = inTexture.read(gid);\n        float3 yCbCr = rgbToYCbCr * inColor.rgb;\n        yCbCr.x = clamp(yCbCr.x, 0., 1.);\n        float3 outColor = yCbCrToRGB * yCbCr;\n        outTexture.write(float4(outColor, 1), gid);\n    }"),
                     v98,
                     &v119);
    v52 = (WebGPU::Device *)v119;
    if (v52)
    {
      WTFLogAlways();
    }
    else
    {
      v104 = objc_msgSend(v100, "newFunctionWithName:", CFSTR("luminanceClamp"));
      v105 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v104;

      v106 = *(_QWORD *)(a1 + 64);
      v118 = 0;
      v107 = objc_msgSend(v99, "newComputePipelineStateWithFunction:error:", v106, &v118);
      v52 = (WebGPU::Device *)v118;
      v108 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v107;

    }
LABEL_74:

  }
LABEL_75:
  v54 = v131;
  if (v131)
  {
    v131 = 0;
    v132 = 0;
    WTF::fastFree(v54, v53);
  }
LABEL_80:

}

void sub_1824558C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *v67;
  void *v68;
  void *v70;

  if (a43)
    WTF::fastFree(a43, v70);

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebGPU28PresentationContextIOSurface9configureERNS_6DeviceERK23WGPUSwapChainDescriptor_block_invoke(uint64_t a1, unsigned int a2)
{
  return (a2 < 0x23) & (0x400840000uLL >> a2);
}

uint64_t ___ZN6WebGPU28PresentationContextIOSurface9configureERNS_6DeviceERK23WGPUSwapChainDescriptor_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = WebGPU::Texture::removeSRGBSuffix(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

void WebGPU::generateAValidationError(WebGPU *this, WebGPU::Device *a2, NSString *a3)
{
  int v3;
  WebGPU::Device *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  v3 = (int)a3;
  v5 = a2;
  if (!v3)
    goto LABEL_13;
  MEMORY[0x186DAB230](&v15, v5);
  v6 = *((_QWORD *)this + 4);
  v7 = 32 * *((unsigned int *)this + 11);
  v8 = v6 + v7;
  while (v7)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v8 -= 32;
    v7 -= 32;
    if (!v9)
    {
      v10 = v6 + v7;
      if (!*(_BYTE *)(v10 + 16))
      {
        v11 = v15;
        v15 = 0;
        *(_DWORD *)v10 = 1;
        *(_QWORD *)(v10 + 8) = v11;
        *(_BYTE *)(v10 + 16) = 1;
      }
      goto LABEL_10;
    }
  }
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v12 + 16))(v12, 1, &v15);
    v13 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
LABEL_10:
  v14 = v15;
  v15 = 0;
  if (!v14)
    goto LABEL_13;
  if (*v14 != 2)
  {
    *v14 -= 2;
LABEL_13:

    return;
  }
  WTF::StringImpl::destroy();

}

void sub_182455C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WGPUTextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WGPUTextureFormat const,18446744073709551615ul>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  int *v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  int v16;

  v4 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  if (!a3)
    return v4;
  if (!(a3 >> 30))
  {
    v6 = (int *)a2;
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * a3));
    *(_DWORD *)(v4 + 8) = a3;
    *(_QWORD *)v4 = v7;
    v8 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v8 < 7)
      goto LABEL_13;
    if ((unint64_t)v7 - a2 < 0x20)
      goto LABEL_13;
    v9 = v8 + 1;
    v10 = v9 & 0x7FFFFFFFFFFFFFF8;
    v11 = &v7[v10];
    v6 = (int *)(a2 + v10 * 4);
    v12 = (__int128 *)(a2 + 16);
    v13 = v7 + 4;
    v14 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    v7 = v11;
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_13:
      do
      {
        v16 = *v6++;
        *v7++ = v16;
      }
      while (v6 != (int *)(a2 + 4 * a3));
    }
    return v4;
  }
  __break(0xC471u);
  return result;
}

void WebGPU::PresentationContextIOSurface::RenderBuffer::~RenderBuffer(WebGPU::PresentationContextIOSurface::RenderBuffer *this, void *a2)
{
  WebGPU::Texture *v3;
  WebGPU::Texture *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  v3 = (WebGPU::Texture *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::Texture::~Texture(v3, a2);
      WTF::fastFree(v5, v6);
      v4 = *(WebGPU::Texture **)this;
      *(_QWORD *)this = 0;
      if (!v4)
        return;
      goto LABEL_7;
    }
    --*(_DWORD *)v3;
  }
  v4 = *(WebGPU::Texture **)this;
  *(_QWORD *)this = 0;
  if (!v4)
    return;
LABEL_7:
  if (*(_DWORD *)v4 == 1)
  {
    WebGPU::Texture::~Texture(v4, a2);
    WTF::fastFree(v7, v8);
  }
  else
  {
    --*(_DWORD *)v4;
  }
}

uint64_t WebGPU::PresentationContextIOSurface::unconfigure(WebGPU::PresentationContextIOSurface *this)
{
  void *v2;
  void *v3;
  uint64_t result;
  void *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  WebGPU::Device *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  WTF *v15;
  void *v16;

  v2 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  result = (uint64_t)WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebGPU::PresentationContextIOSurface *)((char *)this + 24), v3);
  *((_QWORD *)this + 7) = 0;
  v6 = (unsigned __int8 **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v6)
    return result;
  v7 = *v6;
  if (__ldaxr(*v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x186DAB1AC](v7);
LABEL_6:
  v9 = *((_QWORD *)v7 + 1);
  v10 = v9 - 1;
  *((_QWORD *)v7 + 1) = v9 - 1;
  if (v9 != 1)
  {
    v11 = 0;
    v12 = 1;
    v13 = __ldxr(v7);
    if (v13 == 1)
      goto LABEL_8;
LABEL_12:
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return result;
    goto LABEL_14;
  }
  v14 = *((_QWORD *)v7 + 2);
  v11 = (WebGPU::Device *)*((_QWORD *)v7 + 3);
  *((_QWORD *)v7 + 3) = 0;
  v12 = v14 != 0;
  LODWORD(v14) = __ldxr(v7);
  if ((_DWORD)v14 != 1)
    goto LABEL_12;
LABEL_8:
  if (__stlxr(0, v7))
    goto LABEL_13;
  if (v10)
    return result;
LABEL_14:
  if (v11)
  {
    WebGPU::Device::~Device(v11);
    result = WTF::fastFree(v15, v16);
  }
  if (!v12)
    return WTF::fastFree((WTF *)v7, v5);
  return result;
}

unint64_t WebGPU::PresentationContextIOSurface::present(id *this)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  MTLCommandBufferDescriptor *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  unint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  _QWORD v13[3];
  id v14[2];

  result = objc_msgSend(this[2], "count");
  if (result == *((_DWORD *)this + 9))
  {
    v3 = (unint64_t)this[7];
    if (v3 >= result)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *((_QWORD *)this[3] + 2 * v3 + 1);
      if (!v4 || !this[9])
        goto LABEL_7;
      v5 = (MTLCommandBufferDescriptor *)objc_opt_new();
      -[MTLCommandBufferDescriptor setErrorOptions:](v5, "setErrorOptions:", 1);
      WebGPU::Queue::commandBufferWithDescriptor(*((WebGPU::Queue **)this[5] + 2), v5, v14);
      v6 = v14[0];
      v14[0] = 0;

      v7 = (void *)objc_opt_new();
      objc_msgSend(v7, "setDispatchType:", 0);
      objc_msgSend(v6, "computeCommandEncoderWithDescriptor:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      WebGPU::Queue::setEncoderForBuffer(*((_QWORD *)this[5] + 2), v6, v8);
      objc_msgSend(v8, "setComputePipelineState:", this[9]);
      v9 = *(id *)(v4 + 8);
      objc_msgSend(v8, "setTexture:atIndex:", v9, 0);
      v10 = (unint64_t)this[7];
      if (v10 < *((unsigned int *)this + 9))
      {
        objc_msgSend(v8, "setTexture:atIndex:", *(_QWORD *)(*((_QWORD *)this[3] + 2 * v10) + 8), 1);
        v13[0] = (unint64_t)(objc_msgSend(v9, "width") + 15) >> 4;
        v13[1] = (unint64_t)(objc_msgSend(v9, "height") + 15) >> 4;
        v13[2] = 1;
        v11 = vdupq_n_s64(0x10uLL);
        v12 = 1;
        objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v13, &v11);
        WebGPU::Queue::endEncoding(*((_QWORD *)this[5] + 2), v8, v6);
        WebGPU::Queue::commitMTLCommandBuffer(*((_QWORD *)this[5] + 2), v6);

        v3 = (unint64_t)this[7];
        result = *((unsigned int *)this + 9);
LABEL_7:
        this[7] = (id)((v3 + 1) % result);
        return result;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x18245612CLL);
  }
  return result;
}

void sub_182456138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id WebGPU::PresentationContextIOSurface::getCurrentTexture(id *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;

  v2 = objc_msgSend(this[2], "count");
  if (v2 != *((_DWORD *)this + 9) || (v3 = (unint64_t)this[7], v3 >= v2))
  {
    v7 = this[5];
    if (v7)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = v7[4];
      v9 = 32 * *((unsigned int *)v7 + 11);
      v10 = v8 + v9;
      while (v9)
      {
        v11 = *(_DWORD *)(v10 - 8);
        v10 -= 32;
        v9 -= 32;
        if (!v11)
        {
          v12 = v8 + v9;
          if (!*(_BYTE *)(v12 + 16))
          {
            v13 = v17;
            v17 = 0;
            *(_DWORD *)v12 = 1;
            *(_QWORD *)(v12 + 8) = v13;
            *(_BYTE *)(v12 + 16) = 1;
          }
          goto LABEL_14;
        }
      }
      v14 = v7[3];
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v14 + 16))(v14, 1, &v17);
        v15 = v7[3];
        v7[3] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
LABEL_14:
      v16 = v17;
      v17 = 0;
      if (v16)
      {
        if (*v16 == 2)
        {
          WTF::StringImpl::destroy();
          return this[6];
        }
        *v16 -= 2;
      }
    }
    return this[6];
  }
  v4 = (uint64_t *)((char *)this[3] + 16 * v3);
  v5 = v4[1];
  if (v5)
  {
    WebGPU::Texture::recreateIfNeeded(v5);
    return (id)v4[1];
  }
  else
  {
    WebGPU::Texture::recreateIfNeeded(*v4);
    WebGPU::Texture::setPreviouslyCleared((uint64_t *)*v4, 0, 0, 0);
    return (id)*v4;
  }
}

void sub_18245635C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::PresentationContextIOSurface::getCurrentTextureView(WebGPU::PresentationContextIOSurface *this)
{
  __break(0xC471u);
}

uint64_t WebGPU::PresentationContextIOSurface::isPresentationContextIOSurface(WebGPU::PresentationContextIOSurface *this)
{
  return 1;
}

uint64_t WebGPU::PresentationContextIOSurface::isValid(WebGPU::PresentationContextIOSurface *this)
{
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(void)>,void>::~CallableWrapper(uint64_t a1)
{

  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(void)>,void>::~CallableWrapper(id *a1)
{
  void *v2;

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(void)>,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

WebGPU::Texture *WTF::RefCounted<WebGPU::Texture>::deref(WebGPU::Texture *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::Texture::~Texture(result, a2);
    return (WebGPU::Texture *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unsigned int *WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebGPU::Texture **v5;
  WTF *v6;
  void *v7;
  WebGPU::Texture *v8;
  WebGPU::Texture *v9;
  WTF *v10;
  void *v11;
  WTF *v12;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WebGPU::Texture **)(*(_QWORD *)a1 + 8);
    while (1)
    {
      v8 = *v5;
      *v5 = 0;
      if (!v8)
        goto LABEL_8;
      if (*(_DWORD *)v8 != 1)
        break;
      WebGPU::Texture::~Texture(v8, a2);
      WTF::fastFree(v10, v11);
      v9 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v9)
      {
LABEL_11:
        if (*(_DWORD *)v9 == 1)
        {
          WebGPU::Texture::~Texture(v9, a2);
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
LABEL_4:
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_13;
    }
    --*(_DWORD *)v8;
LABEL_8:
    v9 = *(v5 - 1);
    *(v5 - 1) = 0;
    if (v9)
      goto LABEL_11;
    goto LABEL_4;
  }
LABEL_13:
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

unsigned __int8 **WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(unsigned __int8 **result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WebGPU::Device *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  void *v11;

  v2 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 **)MEMORY[0x186DAB1AC](v2);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 != 1)
  {
    v6 = 0;
    v7 = 1;
    v8 = __ldxr(v2);
    if (v8 == 1)
      goto LABEL_7;
LABEL_11:
    __clrex();
LABEL_12:
    result = (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return result;
    goto LABEL_13;
  }
  v9 = *((_QWORD *)v2 + 2);
  v6 = (WebGPU::Device *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  v7 = v9 != 0;
  LODWORD(v9) = __ldxr(v2);
  if ((_DWORD)v9 != 1)
    goto LABEL_11;
LABEL_7:
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return result;
LABEL_13:
  if (v6)
  {
    WebGPU::Device::~Device(v6);
    result = (unsigned __int8 **)WTF::fastFree(v10, v11);
  }
  if (!v7)
    return (unsigned __int8 **)WTF::fastFree((WTF *)v2, a2);
  return result;
}

WTF *WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  WebGPU::Texture **v5;
  WTF *v6;
  void *v7;
  WebGPU::Texture *v8;
  WebGPU::Texture *v9;
  WTF *v10;
  void *v11;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      v5 = (WebGPU::Texture **)(*(_QWORD *)result + 8);
      while (1)
      {
        v8 = *v5;
        *v5 = 0;
        if (!v8)
          goto LABEL_9;
        if (*(_DWORD *)v8 != 1)
          break;
        WebGPU::Texture::~Texture(v8, a2);
        WTF::fastFree(v10, v11);
        v9 = *(v5 - 1);
        *(v5 - 1) = 0;
        if (v9)
        {
LABEL_12:
          if (*(_DWORD *)v9 == 1)
          {
            WebGPU::Texture::~Texture(v9, a2);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v9;
          }
        }
LABEL_5:
        v5 += 2;
        v4 -= 16;
        if (!v4)
        {
          *((_DWORD *)v2 + 3) = 0;
          goto LABEL_15;
        }
      }
      --*(_DWORD *)v8;
LABEL_9:
      v9 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v9)
        goto LABEL_12;
      goto LABEL_5;
    }
LABEL_15:
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

unint64_t WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  WebGPU::Texture *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        while (1)
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = (WebGPU::Texture *)v9[1];
          v9[1] = 0;
          if (!v12)
            goto LABEL_10;
          if (*(_DWORD *)v12 != 1)
            break;
          WebGPU::Texture::~Texture(v12, v6);
          WTF::fastFree(v13, v14);
          result = *v9;
          *v9 = 0;
          if (result)
          {
LABEL_13:
            if (*result == 1)
            {
              WebGPU::Texture::~Texture((WebGPU::Texture *)result, v6);
              result = (unsigned int *)WTF::fastFree(v15, v16);
            }
            else
            {
              --*result;
            }
          }
LABEL_6:
          v9 += 2;
          v7 += 4;
          if (v9 == v8)
            goto LABEL_15;
        }
        --*(_DWORD *)v12;
LABEL_10:
        result = *v9;
        *v9 = 0;
        if (result)
          goto LABEL_13;
        goto LABEL_6;
      }
LABEL_15:
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void WebGPU::Device::createQuerySet(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  __CFString *v26;
  id v27;
  uint64_t v28;
  id v29;
  unsigned __int8 *v30;
  int v32;
  _DWORD *v33;
  _DWORD *v34;

  if (*(_QWORD *)a2 || (v5 = *(unsigned int *)(a2 + 20), v5 > 0x1000) || (v6 = *(void **)(a1 + 8)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *(_QWORD *)(a1 + 32);
    v12 = 32 * *(unsigned int *)(a1 + 44);
    v13 = v11 + v12;
    while (v12)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v13 -= 32;
      v12 -= 32;
      if (!v14)
      {
        v15 = v11 + v12;
        if (!*(_BYTE *)(v15 + 16))
        {
          v16 = v34;
          v34 = 0;
          *(_DWORD *)v15 = 1;
          *(_QWORD *)(v15 + 8) = v16;
          *(_BYTE *)(v15 + 16) = 1;
        }
        goto LABEL_16;
      }
    }
    v17 = *(_QWORD *)(a1 + 24);
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v17 + 16))(v17, 1, &v34);
      v18 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
LABEL_16:
    v19 = v34;
    v34 = 0;
    if (v19)
    {
      if (*v19 == 2)
        WTF::StringImpl::destroy();
      else
        *v19 -= 2;
    }
    v8 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v8 = 1;
    v9 = *(unsigned __int8 **)a1;
    if (__ldaxr(*(unsigned __int8 **)a1))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_24;
    }
    MEMORY[0x186DAB1AC](v9);
    goto LABEL_24;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7)
  {
    if (v7 == 0x7FFFFFFF)
    {
      v8 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v8 = 1;
      v9 = *(unsigned __int8 **)a1;
      if (!__ldaxr(*(unsigned __int8 **)a1))
      {
        if (!__stxr(1u, v9))
          goto LABEL_24;
        goto LABEL_38;
      }
      goto LABEL_7;
    }
    v8 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v8 = 1;
    v9 = *(unsigned __int8 **)a1;
    if (__ldaxr(*(unsigned __int8 **)a1))
    {
LABEL_7:
      __clrex();
LABEL_38:
      MEMORY[0x186DAB1AC](v9);
      goto LABEL_24;
    }
    if (__stxr(1u, v9))
      goto LABEL_38;
LABEL_24:
    ++*((_QWORD *)v9 + 1);
    v21 = __ldxr(v9);
    if (v21 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_29:
    *(_QWORD *)(v8 + 8) = a1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = 0x7FFFFFFF00000000;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_BYTE *)(v8 + 56) = 0;
    *a3 = v8;
    return;
  }
  v22 = *(const char **)(a2 + 8);
  if ((unint64_t)(8 * v5) <= 1)
    v23 = 1;
  else
    v23 = 8 * v5;
  v24 = (void *)objc_msgSend(v6, "newBufferWithLength:options:", v23, 32);
  WebGPU::Device::setOwnerWithIdentity(a1, v24);
  if (v22)
    strlen(v22);
  WTF::String::fromUTF8();
  if (v33)
    v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v26 = &stru_1E0FD9588;
  objc_msgSend(v24, "setLabel:", v26);

  if (v33)
  {
    if (*v33 == 2)
      WTF::StringImpl::destroy();
    else
      *v33 -= 2;
  }
  v27 = v24;
  v28 = WTF::fastMalloc((WTF *)0x40);
  v29 = v27;
  *(_DWORD *)v28 = 1;
  v30 = *(unsigned __int8 **)a1;
  if (__ldaxr(*(unsigned __int8 **)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v30))
  {
    goto LABEL_52;
  }
  MEMORY[0x186DAB1AC](v30);
LABEL_52:
  ++*((_QWORD *)v30 + 1);
  v32 = __ldxr(v30);
  if (v32 == 1)
  {
    if (!__stlxr(0, v30))
      goto LABEL_57;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v30);
LABEL_57:
  *(_QWORD *)(v28 + 8) = a1;
  *(_QWORD *)(v28 + 16) = v29;
  *(_QWORD *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 32) = v5;
  *(_QWORD *)(v28 + 44) = 0;
  *(_QWORD *)(v28 + 36) = 0;
  *(_QWORD *)(v28 + 49) = 0;
  *a3 = v28;

}

void sub_182456BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  void *v9;

  if (a9)
  {
    if (*a9 == 2)
      WTF::StringImpl::destroy();
    else
      *a9 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_182456C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x182456C8CLL);
}

void sub_182456CC8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuQuerySetReference(_DWORD *result)
{
  ++*result;
  return result;
}

uint64_t wgpuQuerySetRelease(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  void *v10;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(_QWORD *)(result + 40);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        for (i = 0; i != v4; ++i)
        {
          v6 = *(unsigned int **)(v3 + 8 * i);
          if (v6 != (unsigned int *)-1)
          {
            *(_QWORD *)(v3 + 8 * i) = 0;
            if (v6)
            {
              do
              {
                v7 = __ldaxr(v6);
                v8 = v7 - 1;
              }
              while (__stlxr(v8, v6));
              if (!v8)
              {
                atomic_store(1u, v6);
                WTF::fastFree((WTF *)v6, a2);
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }

    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v2 + 8), v9);
    return WTF::fastFree((WTF *)v2, v10);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void wgpuQuerySetDestroy(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebGPU::CommandBuffer *v22;
  uint64_t v23;
  uint64_t v24;

  *(_BYTE *)(a1 + 56) = 1;
  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;

  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    v7 = 0;
    v6 = 0;
LABEL_10:
    v9 = v7;
    v7 = v5 + 8 * v6;
    if (!v5)
    {
      v11 = 0;
      if (v9)
        goto LABEL_17;
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = v5 + 8 * v6;
  if (!*(_DWORD *)(v5 - 12))
    goto LABEL_10;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    v9 = *(_QWORD *)(a1 + 40);
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 8;
      v8 -= 8;
      if (!v8)
      {
        v9 = v7;
        break;
      }
    }
LABEL_8:
    v10 = *(unsigned int *)(v5 - 4);
    goto LABEL_14;
  }
  v10 = 0;
  v9 = *(_QWORD *)(a1 + 40);
LABEL_14:
  v11 = v5 + 8 * v10;
  if (v11 != v9)
  {
LABEL_17:
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v12 = v9 + 8;
      v9 = v7;
      if (v12 != v7)
      {
        v9 = v12;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v11)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_24:
  if (v5)
  {
    v13 = v5 + 8 * *(unsigned int *)(v5 - 4);
    if (v9 == v13)
      goto LABEL_26;
    do
    {
LABEL_42:
      v20 = *(_QWORD *)(*(_QWORD *)v9 + 8);
      *(_BYTE *)(v20 + 76) = 1;
      v21 = *(_QWORD *)(v20 + 56);
      if (v21)
      {
        v22 = *(WebGPU::CommandBuffer **)(v21 + 8);
        if (v22)
          WebGPU::CommandBuffer::makeInvalid(v22, *(NSString **)(v20 + 64));
      }
      v23 = v7;
      if (v9 + 8 != v7)
      {
        v23 = v9 + 8;
        while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
        {
          v23 += 8;
          if (v23 == v7)
          {
            v23 = v7;
            break;
          }
        }
      }
      v9 = v11;
      if (v23 != v11)
      {
        v9 = v23;
        if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
        {
          while (1)
          {
            v24 = v9 + 8;
            v9 = v7;
            if (v24 != v7)
            {
              v9 = v24;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v11)
              break;
            if (*(_QWORD *)(*(_QWORD *)v9 + 8))
              goto LABEL_41;
          }
          v9 = v11;
        }
      }
LABEL_41:
      ++*(_DWORD *)(a1 + 48);
    }
    while (v9 != v13);
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      goto LABEL_27;
LABEL_61:
    LODWORD(v19) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    goto LABEL_62;
  }
  v13 = 0;
  if (v9)
    goto LABEL_42;
LABEL_26:
  if (!v5)
    goto LABEL_61;
LABEL_27:
  *(_QWORD *)(a1 + 40) = 0;
  v14 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v14)
  {
    for (i = 0; i != v14; ++i)
    {
      v16 = *(unsigned int **)(v5 + 8 * i);
      if (v16 != (unsigned int *)-1)
      {
        *(_QWORD *)(v5 + 8 * i) = 0;
        if (v16)
        {
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, v4);
          }
        }
      }
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v4);
  v19 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 48) = 0;
  if (v19)
  {
    LODWORD(v19) = *(_DWORD *)(v19 - 12);
    if (v19 > 0x7FFFFFFE)
      LODWORD(v19) = 0x7FFFFFFF;
  }
LABEL_62:
  *(_DWORD *)(a1 + 52) = 2 * v19;
}

_DWORD *wgpuQuerySetSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 16), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_182457134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuQuerySetGetCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t wgpuQuerySetGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t WebGPU::Queue::Queue(uint64_t a1, void *a2, uint64_t *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v5 = a2;
  *(_DWORD *)a1 = 1;
  v6 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = *a3;
  if (!*a3)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v7);
LABEL_6:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
    v10 = __ldxr((unsigned __int8 *)v7);
    if (v10 == 1)
      goto LABEL_8;
  }
  else
  {
    v9 = 0;
    v11 = __ldxr((unsigned __int8 *)v7);
    if (v11 == 1)
    {
LABEL_8:
      if (!__stlxr(0, (unsigned __int8 *)v7))
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  __clrex();
LABEL_12:
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_13:
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  objc_msgSend(MEMORY[0x1E0C99E10], "orderedSet");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v12;

  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v14;

  return a1;
}

void sub_1824572B0(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -2)
        {
          v6 = v3 + 24 * i;
          v7 = (WTF **)(v6 + 8);
          v8 = *(unsigned int *)(v6 + 20);
          if ((_DWORD)v8)
          {
            v9 = *v7;
            v10 = 8 * v8;
            do
            {
              v11 = *(_QWORD *)v9;
              *(_QWORD *)v9 = 0;
              if (v11)
                (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
              v9 = (WTF *)((char *)v9 + 8);
              v10 -= 8;
            }
            while (v10);
          }
          v12 = *v7;
          if (*v7)
          {
            *v7 = 0;
            *(_DWORD *)(v3 + 24 * i + 16) = 0;
            WTF::fastFree(v12, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t *WTF::ThreadSafeWeakPtr<WebGPU::Device>::~ThreadSafeWeakPtr(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v8;
  int v9;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (!v5)
  {
    v8 = *(_QWORD *)(v3 + 8);
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
      {
        if (v8)
          return a1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v8)
      return a1;
LABEL_18:
    WTF::fastFree((WTF *)v3, a2);
    return a1;
  }
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return a1;
}

WebGPU::Queue *WebGPU::Queue::Queue(WebGPU::Queue *this, WebGPU::Device *a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;

  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
    v7 = __ldxr((unsigned __int8 *)v4);
    if (v7 == 1)
      goto LABEL_8;
  }
  else
  {
    v6 = 0;
    v8 = __ldxr((unsigned __int8 *)v4);
    if (v8 == 1)
    {
LABEL_8:
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  __clrex();
LABEL_12:
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  *((_QWORD *)this + 5) = v6;
  *((_QWORD *)this + 6) = a2;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  return this;
}

void sub_1824575A8(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void WebGPU::Queue::~Queue(WebGPU::Queue *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
    WebGPU::Queue::endEncoding((uint64_t)this, v2, *((void **)this + 2));

  v4 = *((_QWORD *)this + 11);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)(v4 + 24 * i) != -2)
        {
          v7 = v4 + 24 * i;
          v8 = (WTF **)(v7 + 8);
          v9 = *(unsigned int *)(v7 + 20);
          if ((_DWORD)v9)
          {
            v10 = *v8;
            v11 = 8 * v9;
            do
            {
              v12 = *(_QWORD *)v10;
              *(_QWORD *)v10 = 0;
              if (v12)
                (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
              v10 = (WTF *)((char *)v10 + 8);
              v11 -= 8;
            }
            while (v11);
          }
          v13 = *v8;
          if (*v8)
          {
            *v8 = 0;
            *(_DWORD *)(v4 + 24 * i + 16) = 0;
            WTF::fastFree(v13, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  v14 = *((_QWORD *)this + 10);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      for (j = 0; j != v15; ++j)
      {
        if (*(_QWORD *)(v14 + 24 * j) != -2)
        {
          v17 = v14 + 24 * j;
          v18 = (WTF **)(v17 + 8);
          v19 = *(unsigned int *)(v17 + 20);
          if ((_DWORD)v19)
          {
            v20 = *v18;
            v21 = 8 * v19;
            do
            {
              v22 = *(_QWORD *)v20;
              *(_QWORD *)v20 = 0;
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              v20 = (WTF *)((char *)v20 + 8);
              v21 -= 8;
            }
            while (v21);
          }
          v23 = *v18;
          if (*v18)
          {
            *v18 = 0;
            *(_DWORD *)(v14 + 24 * j + 16) = 0;
            WTF::fastFree(v23, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v14 - 16), v3);
  }
  v24 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v24)
    goto LABEL_47;
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_34;
  }
  MEMORY[0x186DAB1AC](v24);
LABEL_34:
  v26 = *(_QWORD *)(v24 + 16) - 1;
  *(_QWORD *)(v24 + 16) = v26;
  if (!v26)
  {
    v28 = *(_QWORD *)(v24 + 8);
    v29 = __ldxr((unsigned __int8 *)v24);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v24))
      {
        if (v28)
          goto LABEL_47;
LABEL_46:
        WTF::fastFree((WTF *)v24, v3);
        goto LABEL_47;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
    if (v28)
      goto LABEL_47;
    goto LABEL_46;
  }
  v27 = __ldxr((unsigned __int8 *)v24);
  if (v27 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v24))
      goto LABEL_47;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_47:

}

void sub_182457830(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v1 + 88), v3);
  WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v1 + 80), v4);
  WTF::ThreadSafeWeakPtr<WebGPU::Device>::~ThreadSafeWeakPtr((uint64_t *)(v1 + 40), v5);

  _Unwind_Resume(a1);
}

void WebGPU::Queue::endEncoding(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 104), "objectForKey:", v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();

    if (v6 == v7)
      goto LABEL_5;
  }
  else
  {
    v6 = 0;

    if (!v7)
    {
LABEL_5:
      objc_msgSend(v7, "endEncoding");
      objc_msgSend(*(id *)(a1 + 104), "removeObjectForKey:", v5);
    }
  }

}

void sub_182457928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182457948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WebGPU::Queue::ensureBlitCommandEncoder(WebGPU::Queue *this)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  MTLCommandBufferDescriptor *v10;
  id obj;
  id v12;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((id *)this + 2);
    if (v3)
    {
      v9 = v3;
      objc_msgSend(*((id *)this + 13), "objectForKey:");
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      if (v2 == v4)
        return;
    }
    else
    {

    }
  }
  v10 = (MTLCommandBufferDescriptor *)objc_opt_new();
  -[MTLCommandBufferDescriptor setErrorOptions:](v10, "setErrorOptions:", 1);
  WebGPU::Queue::commandBufferWithDescriptor(this, v10, &obj);
  v5 = obj;
  objc_storeStrong((id *)this + 2, obj);
  v6 = v12;
  objc_storeStrong((id *)this + 3, v12);
  objc_msgSend(*((id *)this + 2), "blitCommandEncoder");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v7;

  WebGPU::Queue::setEncoderForBuffer((uint64_t)this, *((void **)this + 2), *((void **)this + 4));
}

void sub_182457A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182457A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void WebGPU::Queue::commandBufferWithDescriptor(WebGPU::Queue *this@<X0>, MTLCommandBufferDescriptor *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  WebGPU::Device *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  MTLCommandBufferDescriptor *v23;

  v23 = a2;
  if (!*((_QWORD *)this + 1))
  {
    *a3 = 0;
    a3[1] = 0;

    return;
  }
  v5 = *((_QWORD *)this + 5);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_16;
  }
  v6 = *((_QWORD *)this + 6);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_9;
  }
  MEMORY[0x186DAB1AC](v5);
LABEL_9:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 8);
    v8 = __ldxr((unsigned __int8 *)v5);
    if (v8 == 1)
      goto LABEL_11;
LABEL_14:
    __clrex();
    goto LABEL_15;
  }
  v6 = 0;
  v9 = __ldxr((unsigned __int8 *)v5);
  if (v9 != 1)
    goto LABEL_14;
LABEL_11:
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_16:
  if ((unint64_t)objc_msgSend(*((id *)this + 12), "count") < 0x3E8)
  {
    objc_msgSend(*((id *)this + 1), "commandBufferWithDescriptor:", v23);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
      objc_msgSend(*((id *)this + 12), "addObject:", v11);
    if (qword_1EDB98D00 == -1)
    {
      if (!v6)
        goto LABEL_28;
    }
    else
    {
      dispatch_once(&qword_1EDB98D00, &__block_literal_global_1);
      if (!v6)
        goto LABEL_28;
    }
    if ((objc_opt_respondsToSelector() & (_MergedGlobals_0 == 0)) == 1)
    {
      v12 = objc_msgSend(*(id *)(v6 + 8), "newSharedEvent");
      if (v12)
        objc_msgSend(v11, "encodeConditionalAbortEvent:", v12);
      goto LABEL_29;
    }
LABEL_28:
    v12 = 0;
LABEL_29:
    *a3 = v11;
    a3[1] = v12;
    goto LABEL_30;
  }
  if (v6)
    WebGPU::Device::loseTheDevice(v6, 1);
  *a3 = 0;
  a3[1] = 0;
LABEL_30:
  if (!v6)
  {
LABEL_39:

    return;
  }
  v13 = *(_QWORD *)v6;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x186DAB1AC](v13);
LABEL_35:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 != 1)
  {
    v17 = 0;
    v18 = 1;
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
      goto LABEL_37;
LABEL_43:
    __clrex();
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      goto LABEL_39;
    goto LABEL_44;
  }
  v20 = *(_QWORD *)(v13 + 16);
  v17 = *(WebGPU::Device **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  v18 = v20 != 0;
  LODWORD(v20) = __ldxr((unsigned __int8 *)v13);
  if ((_DWORD)v20 != 1)
    goto LABEL_43;
LABEL_37:
  if (__stlxr(0, (unsigned __int8 *)v13))
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      goto LABEL_39;
  }
  else if (v16)
  {
    goto LABEL_39;
  }
LABEL_44:
  if (v17)
  {
    WebGPU::Device::~Device(v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    goto LABEL_39;
  WTF::fastFree((WTF *)v13, v10);

}

void sub_182457D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned __int8 **v10;
  void *v11;
  void *v13;

  if (v10)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v10, v13);

  _Unwind_Resume(a1);
}

void WebGPU::Queue::setEncoderForBuffer(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 104), "objectForKey:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    WebGPU::Queue::endEncoding(a1, v6, v8);

    v7 = *(void **)(a1 + 104);
    if (v5)
      objc_msgSend(v7, "setObject:forKey:", v5, v8);
    else
      objc_msgSend(v7, "removeObjectForKey:", v8);
  }

}

void sub_182457E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182457E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_182457E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WebGPU::Queue::finalizeBlitCommandEncoder(WebGPU::Queue *this)
{
  void *v1;
  void *v3;
  void *v4;

  v1 = (void *)*((_QWORD *)this + 4);
  if (v1)
  {
    WebGPU::Queue::endEncoding((uint64_t)this, v1, *((void **)this + 2));
    WebGPU::Queue::commitMTLCommandBuffer((uint64_t)this, *((void **)this + 2));
    v3 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;

    v4 = (void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;

  }
}

void WebGPU::Queue::commitMTLCommandBuffer(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  _QWORD v30[4];
  WebGPU::Queue *v31;
  WebGPU::Queue *v32;
  _QWORD v33[4];
  WebGPU::Queue *v34;

  v3 = a2;
  v4 = v3;
  if (v3 && (unint64_t)objc_msgSend(v3, "status") <= 1 && *(_QWORD *)(a1 + 8))
  {
    v5 = MEMORY[0x1E0C809B0];
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3321888768;
    v33[2] = ___ZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke;
    v33[3] = &__block_descriptor_40_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__0_e28_v16__0___MTLCommandBuffer__8l;
    do
      v6 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v6 + 1, (unsigned int *)a1));
    v32 = (WebGPU::Queue *)a1;
    do
      v7 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v7 + 1, (unsigned int *)a1));
    v34 = (WebGPU::Queue *)a1;
    objc_msgSend(v4, "addScheduledHandler:", v33);
    v8 = (unsigned int *)v32;
    v32 = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WebGPU::Queue::~Queue((WebGPU::Queue *)v8);
        WTF::fastFree(v22, v23);
      }
    }
    v30[0] = v5;
    v30[1] = 3321888768;
    v30[2] = ___ZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke_9;
    v30[3] = &__block_descriptor_40_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__1_e28_v16__0___MTLCommandBuffer__8l;
    do
      v11 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v11 + 1, (unsigned int *)a1));
    v32 = (WebGPU::Queue *)a1;
    do
      v12 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v12 + 1, (unsigned int *)a1));
    v31 = (WebGPU::Queue *)a1;
    objc_msgSend(v4, "addCompletedHandler:", v30);
    v13 = (unsigned int *)v32;
    v32 = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WebGPU::Queue::~Queue((WebGPU::Queue *)v13);
        WTF::fastFree(v24, v25);
      }
    }
    objc_msgSend(v4, "commit");
    objc_msgSend(*(id *)(a1 + 104), "removeObjectForKey:", v4);
    objc_msgSend(*(id *)(a1 + 96), "removeObject:", v4);
    ++*(_QWORD *)(a1 + 56);
    v16 = (unsigned int *)v31;
    v31 = 0;
    if (!v16)
      goto LABEL_23;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WebGPU::Queue::~Queue((WebGPU::Queue *)v16);
      WTF::fastFree(v26, v27);
      v19 = (unsigned int *)v34;
      v34 = 0;
      if (!v19)
        goto LABEL_27;
    }
    else
    {
LABEL_23:
      v19 = (unsigned int *)v34;
      v34 = 0;
      if (!v19)
        goto LABEL_27;
    }
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WebGPU::Queue::~Queue((WebGPU::Queue *)v19);
      WTF::fastFree(v28, v29);
    }
  }
LABEL_27:

}

void sub_1824580E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  unsigned int **v8;
  unsigned int **v9;
  va_list va;

  va_start(va, a7);
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(v9);
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref((unsigned int **)va);
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(v8);

  _Unwind_Resume(a1);
}

void sub_18245812C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebGPU5Queue27commandBufferWithDescriptorEP26MTLCommandBufferDescriptor_block_invoke()
{
  _MergedGlobals_0 = getenv("METAL_CAPTURE_ENABLED") != 0;
  return WTFLogAlways();
}

void WebGPU::Queue::makeInvalid(WebGPU::Queue *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  WTF **v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;

  v2 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  v4 = *((_QWORD *)this + 10);
  if (!v4)
  {
    v7 = 0;
    LODWORD(v5) = 0;
LABEL_10:
    v6 = v4 + 24 * v5;
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(v4 - 4);
  v6 = v4 + 24 * v5;
  if (!*(_DWORD *)(v4 - 12))
  {
    v7 = v4 + 24 * v5;
    goto LABEL_10;
  }
  v7 = *((_QWORD *)this + 10);
  if ((_DWORD)v5)
  {
    v8 = 24 * v5;
    v7 = *((_QWORD *)this + 10);
    while (*(_QWORD *)v7 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v7 += 24;
      v8 -= 24;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (v4)
  {
    v9 = v4 + 24 * *(unsigned int *)(v4 - 4);
    if (v9 == v7)
      goto LABEL_15;
  }
  else
  {
    v9 = 0;
    if (!v7)
      goto LABEL_15;
  }
  do
  {
    v15 = *(unsigned int *)(v7 + 20);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)(v7 + 8);
      v17 = 8 * v15;
      do
      {
        v18 = *v16++;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 -= 8;
      }
      while (v17);
    }
    v19 = v7 + 24;
    v7 = v6;
    if (v19 != v6)
    {
      v7 = v19;
      while (*(_QWORD *)v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v7 += 24;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  while (v7 != v9);
LABEL_15:
  v10 = *((_QWORD *)this + 11);
  if (!v10)
  {
    v13 = 0;
    LODWORD(v11) = 0;
LABEL_33:
    v12 = v10 + 24 * v11;
    goto LABEL_34;
  }
  v11 = *(unsigned int *)(v10 - 4);
  v12 = v10 + 24 * v11;
  if (!*(_DWORD *)(v10 - 12))
  {
    v13 = v10 + 24 * v11;
    goto LABEL_33;
  }
  v13 = *((_QWORD *)this + 11);
  if ((_DWORD)v11)
  {
    v14 = 24 * v11;
    v13 = *((_QWORD *)this + 11);
    while (*(_QWORD *)v13 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v13 += 24;
      v14 -= 24;
      if (!v14)
      {
        v13 = v12;
        break;
      }
    }
  }
LABEL_34:
  if (v10)
  {
    v20 = v10 + 24 * *(unsigned int *)(v10 - 4);
    if (v20 == v13)
      goto LABEL_38;
  }
  else
  {
    v20 = 0;
    if (!v13)
      goto LABEL_38;
  }
  do
  {
    v24 = *(unsigned int *)(v13 + 20);
    if ((_DWORD)v24)
    {
      v25 = *(uint64_t **)(v13 + 8);
      v26 = 8 * v24;
      do
      {
        v27 = *v25++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, 3);
        v26 -= 8;
      }
      while (v26);
    }
    v28 = v13 + 24;
    v13 = v12;
    if (v28 != v12)
    {
      v13 = v28;
      while (*(_QWORD *)v13 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v13 += 24;
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  while (v13 != v20);
LABEL_38:
  v21 = *((_QWORD *)this + 10);
  if (v21)
  {
    *((_QWORD *)this + 10) = 0;
    v22 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v22)
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)(v21 + 24 * i) != -2)
        {
          v29 = v21 + 24 * i;
          v30 = (WTF **)(v29 + 8);
          v31 = *(unsigned int *)(v29 + 20);
          if ((_DWORD)v31)
          {
            v32 = *v30;
            v33 = 8 * v31;
            do
            {
              v34 = *(_QWORD *)v32;
              *(_QWORD *)v32 = 0;
              if (v34)
                (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
              v32 = (WTF *)((char *)v32 + 8);
              v33 -= 8;
            }
            while (v33);
          }
          v35 = *v30;
          if (*v30)
          {
            *v30 = 0;
            *(_DWORD *)(v21 + 24 * i + 16) = 0;
            WTF::fastFree(v35, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v21 - 16), v3);
  }
  v36 = *((_QWORD *)this + 11);
  if (v36)
  {
    *((_QWORD *)this + 11) = 0;
    v37 = *(unsigned int *)(v36 - 4);
    if ((_DWORD)v37)
    {
      for (j = 0; j != v37; ++j)
      {
        if (*(_QWORD *)(v36 + 24 * j) != -2)
        {
          v39 = v36 + 24 * j;
          v40 = (WTF **)(v39 + 8);
          v41 = *(unsigned int *)(v39 + 20);
          if ((_DWORD)v41)
          {
            v42 = *v40;
            v43 = 8 * v41;
            do
            {
              v44 = *(_QWORD *)v42;
              *(_QWORD *)v42 = 0;
              if (v44)
                (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              v42 = (WTF *)((char *)v42 + 8);
              v43 -= 8;
            }
            while (v43);
          }
          v45 = *v40;
          if (*v40)
          {
            *v40 = 0;
            *(_DWORD *)(v36 + 24 * j + 16) = 0;
            WTF::fastFree(v45, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v36 - 16), v3);
  }
}

_QWORD *WebGPU::Queue::onSubmittedWorkDone(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v5;
  int v7;
  char v8;
  uint64_t v9;
  _QWORD *result;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  WebGPU::Device *v16;
  BOOL v17;
  int v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  WTF *v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;

  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
  {
    v5 = 0;
LABEL_11:
    v8 = 1;
    goto LABEL_16;
  }
  v5 = *(uint64_t **)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  MEMORY[0x186DAB1AC](v3);
LABEL_7:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 8);
    v7 = __ldxr((unsigned __int8 *)v3);
    if (v7 == 1)
      goto LABEL_9;
LABEL_29:
    __clrex();
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5)
      goto LABEL_11;
    goto LABEL_13;
  }
  v5 = 0;
  v19 = __ldxr((unsigned __int8 *)v3);
  if (v19 != 1)
    goto LABEL_29;
LABEL_9:
  if (__stlxr(0, (unsigned __int8 *)v3))
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5)
      goto LABEL_11;
  }
  else if (!v5)
  {
    goto LABEL_11;
  }
LABEL_13:
  if (v5[1] && !*((_BYTE *)v5 + 56))
  {
    v20 = *(void **)(a1 + 32);
    if (v20)
    {
      WebGPU::Queue::endEncoding(a1, v20, *(void **)(a1 + 16));
      WebGPU::Queue::commitMTLCommandBuffer(a1, *(void **)(a1 + 16));
      v21 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

      v22 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;

    }
    if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 64) && !*(_QWORD *)(a1 + 32))
    {
      v61 = *a2;
      *a2 = 0;
      v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v62 = &off_1E0FD1E10;
      v62[1] = v61;
      v66 = v62;
      WebGPU::Queue::scheduleWork(a1, (uint64_t *)&v66);
      result = v66;
      if (v66)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v66 + 8))(v66);
      goto LABEL_17;
    }
    v66 = 0;
    v67 = 0;
    v24 = (uint64_t *)(a1 + 88);
    v23 = *(_QWORD *)(a1 + 88);
    if (v23
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash((uint64_t *)(a1 + 88), 8u, 0), (v23 = *v24) != 0))
    {
      v25 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = *(_QWORD *)(a1 + 56);
    v27 = (v26 + ~(v26 << 32)) ^ ((unint64_t)(v26 + ~(v26 << 32)) >> 22);
    v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    v30 = v25 & ((v29 >> 31) ^ v29);
    v31 = (uint64_t *)(v23 + 24 * v30);
    v32 = *v31;
    if (*v31 == -1)
      goto LABEL_46;
    v33 = 0;
    v34 = 1;
    do
    {
      if (v32 == v26)
        goto LABEL_65;
      if (v32 == -2)
        v33 = v31;
      v30 = (v30 + v34) & v25;
      v31 = (uint64_t *)(v23 + 24 * v30);
      v32 = *v31;
      ++v34;
    }
    while (*v31 != -1);
    if (!v33)
    {
LABEL_46:
      v35 = (WTF *)v31[1];
      v33 = v31;
    }
    else
    {
      v35 = 0;
      v33[1] = 0;
      v33[2] = 0;
      *v33 = -1;
      --*(_DWORD *)(*(_QWORD *)(a1 + 88) - 16);
      v26 = *(_QWORD *)(a1 + 56);
    }
    *v33 = v26;
    v36 = *((unsigned int *)v33 + 5);
    if ((_DWORD)v36)
    {
      v37 = 8 * v36;
      do
      {
        v38 = *(_QWORD *)v35;
        *(_QWORD *)v35 = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        v35 = (WTF *)((char *)v35 + 8);
        v37 -= 8;
      }
      while (v37);
      v35 = (WTF *)v33[1];
    }
    if (v35)
    {
      v33[1] = 0;
      *((_DWORD *)v33 + 4) = 0;
      WTF::fastFree(v35, v20);
      v39 = v67;
      v33[1] = (uint64_t)v66;
      v66 = 0;
      v67 = 0;
      v33[2] = v39;
      v40 = *v24;
      if (*v24)
        goto LABEL_55;
    }
    else
    {
      v33[1] = 0;
      v66 = 0;
      v67 = 0;
      v33[2] = 0;
      v40 = *v24;
      if (*v24)
      {
LABEL_55:
        ++*(_DWORD *)(v40 - 12);
        v41 = *v24;
        if (*v24)
          goto LABEL_56;
        goto LABEL_62;
      }
    }
    *(_DWORD *)(v40 - 12) = 1;
    v41 = *v24;
    if (*v24)
    {
LABEL_56:
      v42 = (*(_DWORD *)(v41 - 16) + *(_DWORD *)(v41 - 12));
      v43 = *(unsigned int *)(v41 - 4);
      if (v43 <= 0x400)
        goto LABEL_57;
      goto LABEL_63;
    }
LABEL_62:
    v42 = *(unsigned int *)(v41 - 16);
    v43 = *(unsigned int *)(v41 - 4);
    if (v43 <= 0x400)
    {
LABEL_57:
      if (3 * v43 <= 4 * v42)
      {
        if (!(_DWORD)v43)
        {
          v44 = 8;
          goto LABEL_86;
        }
LABEL_85:
        v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v43));
LABEL_86:
        v31 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v24, v44, v33);
        v46 = *((unsigned int *)v31 + 4);
        v45 = *((unsigned int *)v31 + 5);
        if ((_DWORD)v45 != (_DWORD)v46)
          goto LABEL_87;
        goto LABEL_66;
      }
LABEL_64:
      v31 = v33;
LABEL_65:
      v46 = *((unsigned int *)v31 + 4);
      v45 = *((unsigned int *)v31 + 5);
      if ((_DWORD)v45 != (_DWORD)v46)
      {
LABEL_87:
        v59 = v31[1];
        result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *result = &off_1E0FD1E38;
        v60 = *a2;
        *a2 = 0;
        result[1] = v60;
        if (v60)
        {
          *(_QWORD *)(v59 + 8 * v45) = result;
LABEL_89:
          ++*((_DWORD *)v31 + 5);
          goto LABEL_17;
        }
        goto LABEL_102;
      }
LABEL_66:
      v47 = v46 + (v46 >> 2);
      if (v47 >= 0x10)
        v48 = v47 + 1;
      else
        v48 = 16;
      if (v48 <= v46 + 1)
        v49 = v46 + 1;
      else
        v49 = v48;
      if (!(v49 >> 29))
      {
        v50 = (WTF *)v31[1];
        v52 = (WTF *)WTF::fastMalloc((WTF *)(8 * v49));
        *((_DWORD *)v31 + 4) = v49;
        v31[1] = (uint64_t)v52;
        if ((_DWORD)v46)
        {
          v53 = 8 * v46;
          v54 = v50;
          do
          {
            v55 = *(_QWORD *)v54;
            *(_QWORD *)v54 = 0;
            *(_QWORD *)v52 = v55;
            v56 = *(_QWORD *)v54;
            *(_QWORD *)v54 = 0;
            if (v56)
              (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
            v52 = (WTF *)((char *)v52 + 8);
            v54 = (WTF *)((char *)v54 + 8);
            v53 -= 8;
          }
          while (v53);
          v52 = (WTF *)v31[1];
        }
        if (v50)
        {
          if (v52 == v50)
          {
            v31[1] = 0;
            *((_DWORD *)v31 + 4) = 0;
          }
          WTF::fastFree(v50, v51);
          v52 = (WTF *)v31[1];
        }
        v57 = *((unsigned int *)v31 + 5);
        result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *result = &off_1E0FD1E38;
        v58 = *a2;
        *a2 = 0;
        result[1] = v58;
        if (!v58)
        {
          __break(0xC471u);
          JUMPOUT(0x182458B14);
        }
        *((_QWORD *)v52 + v57) = result;
        goto LABEL_89;
      }
LABEL_102:
      __break(0xC471u);
      JUMPOUT(0x182458AF4);
    }
LABEL_63:
    if (v43 <= 2 * v42)
      goto LABEL_85;
    goto LABEL_64;
  }
  v8 = 0;
LABEL_16:
  v9 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 3);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if ((v8 & 1) != 0)
    return result;
LABEL_17:
  v12 = *v5;
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_21;
  }
  result = (_QWORD *)MEMORY[0x186DAB1AC](v12);
LABEL_21:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 != 1)
  {
    v16 = 0;
    v17 = 1;
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
      goto LABEL_23;
LABEL_94:
    __clrex();
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return result;
    goto LABEL_95;
  }
  v63 = *(_QWORD *)(v12 + 16);
  v16 = *(WebGPU::Device **)(v12 + 24);
  *(_QWORD *)(v12 + 24) = 0;
  v17 = v63 != 0;
  LODWORD(v63) = __ldxr((unsigned __int8 *)v12);
  if ((_DWORD)v63 != 1)
    goto LABEL_94;
LABEL_23:
  if (__stlxr(0, (unsigned __int8 *)v12))
  {
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return result;
  }
  else if (v15)
  {
    return result;
  }
LABEL_95:
  if (v16)
  {
    WebGPU::Device::~Device(v16);
    result = (_QWORD *)WTF::fastFree(v64, v65);
  }
  if (!v17)
    return (_QWORD *)WTF::fastFree((WTF *)v12, v11);
  return result;
}

void sub_182458B20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 **v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, a2);
  _Unwind_Resume(a1);
}

void WebGPU::Queue::scheduleWork(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v6;
  int v7;
  void *v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  WebGPU::Device *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  void *v18;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    return;
  v4 = *(_QWORD *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
  {
    ++*(_QWORD *)(v2 + 8);
    v6 = __ldxr((unsigned __int8 *)v2);
    if (v6 == 1)
      goto LABEL_8;
LABEL_12:
    __clrex();
    goto LABEL_13;
  }
  v4 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 != 1)
    goto LABEL_12;
LABEL_8:
  if (!__stlxr(0, (unsigned __int8 *)v2))
  {
    if (!v4)
      return;
    goto LABEL_14;
  }
LABEL_13:
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return;
LABEL_14:
  WebGPU::Instance::scheduleWork(*(_QWORD *)(*(_QWORD *)(v4 + 424) + 16), a2);
  v9 = *(unsigned __int8 **)v4;
  if (__ldaxr(*(unsigned __int8 **)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_18;
  }
  MEMORY[0x186DAB1AC](v9);
LABEL_18:
  v11 = *((_QWORD *)v9 + 1);
  v12 = v11 - 1;
  *((_QWORD *)v9 + 1) = v11 - 1;
  if (v11 != 1)
  {
    v13 = 0;
    v14 = 1;
    v15 = __ldxr(v9);
    if (v15 == 1)
      goto LABEL_20;
LABEL_24:
    __clrex();
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return;
    goto LABEL_26;
  }
  v16 = *((_QWORD *)v9 + 2);
  v13 = (WebGPU::Device *)*((_QWORD *)v9 + 3);
  *((_QWORD *)v9 + 3) = 0;
  v14 = v16 != 0;
  LODWORD(v16) = __ldxr(v9);
  if ((_DWORD)v16 != 1)
    goto LABEL_24;
LABEL_20:
  if (__stlxr(0, v9))
    goto LABEL_25;
  if (v12)
    return;
LABEL_26:
  if (v13)
  {
    WebGPU::Device::~Device(v13);
    WTF::fastFree(v17, v18);
  }
  if (!v14)
    WTF::fastFree((WTF *)v9, v8);
}

void sub_182458CF8(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebGPU::Queue::onSubmittedWorkScheduled(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v5;
  int v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  WebGPU::Device *v14;
  BOOL v15;
  int v16;
  int v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;

  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
  {
    v5 = 0;
LABEL_11:
    v8 = 1;
    goto LABEL_16;
  }
  v5 = *(uint64_t **)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  MEMORY[0x186DAB1AC](v3);
LABEL_7:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 8);
    v7 = __ldxr((unsigned __int8 *)v3);
    if (v7 == 1)
      goto LABEL_9;
LABEL_29:
    __clrex();
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5)
      goto LABEL_11;
    goto LABEL_13;
  }
  v5 = 0;
  v17 = __ldxr((unsigned __int8 *)v3);
  if (v17 != 1)
    goto LABEL_29;
LABEL_9:
  if (__stlxr(0, (unsigned __int8 *)v3))
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5)
      goto LABEL_11;
  }
  else if (!v5)
  {
    goto LABEL_11;
  }
LABEL_13:
  if (v5[1] && !*((_BYTE *)v5 + 56))
  {
    v9 = *(void **)(a1 + 32);
    if (v9)
    {
      WebGPU::Queue::endEncoding(a1, v9, *(void **)(a1 + 16));
      WebGPU::Queue::commitMTLCommandBuffer(a1, *(void **)(a1 + 16));
      v18 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

      v19 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;

    }
    if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 72))
    {
      v20 = *a2;
      *a2 = 0;
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = &off_1E0FD1E60;
      v21[1] = v20;
      v55 = v21;
      WebGPU::Queue::scheduleWork(a1, (uint64_t *)&v55);
      if (v55)
        (*(void (**)(_QWORD *))(*v55 + 8))(v55);
      goto LABEL_17;
    }
    v55 = 0;
    v56 = 0;
    v23 = (uint64_t *)(a1 + 80);
    v22 = *(_QWORD *)(a1 + 80);
    if (v22
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash((uint64_t *)(a1 + 80), 8u, 0), (v22 = *v23) != 0))
    {
      v24 = *(_DWORD *)(v22 - 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = *(_QWORD *)(a1 + 56);
    v26 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v24 & ((v28 >> 31) ^ v28);
    v30 = (uint64_t *)(v22 + 24 * v29);
    v31 = *v30;
    if (*v30 != -1)
    {
      v32 = 0;
      v33 = 1;
      while (v31 != v25)
      {
        if (v31 == -2)
          v32 = v30;
        v29 = (v29 + v33) & v24;
        v30 = (uint64_t *)(v22 + 24 * v29);
        v31 = *v30;
        ++v33;
        if (*v30 == -1)
        {
          if (!v32)
            goto LABEL_47;
          v34 = 0;
          v32[1] = 0;
          v32[2] = 0;
          *v32 = -1;
          --*(_DWORD *)(*(_QWORD *)(a1 + 80) - 16);
          v25 = *(_QWORD *)(a1 + 56);
          goto LABEL_48;
        }
      }
      goto LABEL_71;
    }
LABEL_47:
    v34 = (WTF *)v30[1];
    v32 = v30;
LABEL_48:
    *v32 = v25;
    v35 = *((unsigned int *)v32 + 5);
    if ((_DWORD)v35)
    {
      v36 = 8 * v35;
      do
      {
        v37 = *(_QWORD *)v34;
        *(_QWORD *)v34 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        v34 = (WTF *)((char *)v34 + 8);
        v36 -= 8;
      }
      while (v36);
      v34 = (WTF *)v32[1];
    }
    if (v34)
    {
      v32[1] = 0;
      *((_DWORD *)v32 + 4) = 0;
      WTF::fastFree(v34, v9);
      v38 = (uint64_t)v55;
      v39 = v56;
    }
    else
    {
      v38 = 0;
      v39 = 0;
    }
    v32[1] = v38;
    v55 = 0;
    v56 = 0;
    v32[2] = v39;
    v40 = *v23;
    if (*v23)
      v41 = *(_DWORD *)(v40 - 12) + 1;
    else
      v41 = 1;
    *(_DWORD *)(v40 - 12) = v41;
    v42 = *v23;
    if (*v23)
      v43 = *(_DWORD *)(v42 - 12);
    else
      v43 = 0;
    v44 = (*(_DWORD *)(v42 - 16) + v43);
    v45 = *(unsigned int *)(v42 - 4);
    if (v45 > 0x400)
    {
      if (v45 <= 2 * v44)
        goto LABEL_69;
    }
    else if (3 * v45 <= 4 * v44)
    {
      if (!(_DWORD)v45)
      {
        v46 = 8;
LABEL_70:
        v30 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v23, v46, v32);
        goto LABEL_71;
      }
LABEL_69:
      v46 = (_DWORD)v45 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v45));
      goto LABEL_70;
    }
    v30 = v32;
LABEL_71:
    v47 = *((unsigned int *)v30 + 5);
    if ((_DWORD)v47 == *((_DWORD *)v30 + 4))
    {
      v48 = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v30 + 1), v47 + 1, (unint64_t)a2);
      v47 = *((unsigned int *)v30 + 5);
      v49 = v47 + 1;
      v50 = v30[1];
      v51 = *(_QWORD *)v48;
      *(_QWORD *)v48 = 0;
    }
    else
    {
      v49 = v47 + 1;
      v50 = v30[1];
      v51 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v50 + 8 * v47) = v51;
    *((_DWORD *)v30 + 5) = v49;
    goto LABEL_17;
  }
  v8 = 0;
LABEL_16:
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  if ((v8 & 1) != 0)
    return;
LABEL_17:
  v10 = *v5;
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_21;
  }
  MEMORY[0x186DAB1AC](v10);
LABEL_21:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 != 1)
  {
    v14 = 0;
    v15 = 1;
    v16 = __ldxr((unsigned __int8 *)v10);
    if (v16 == 1)
      goto LABEL_23;
LABEL_77:
    __clrex();
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return;
    goto LABEL_78;
  }
  v52 = *(_QWORD *)(v10 + 16);
  v14 = *(WebGPU::Device **)(v10 + 24);
  *(_QWORD *)(v10 + 24) = 0;
  v15 = v52 != 0;
  LODWORD(v52) = __ldxr((unsigned __int8 *)v10);
  if ((_DWORD)v52 != 1)
    goto LABEL_77;
LABEL_23:
  if (__stlxr(0, (unsigned __int8 *)v10))
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return;
  }
  else if (v13)
  {
    return;
  }
LABEL_78:
  if (v14)
  {
    WebGPU::Device::~Device(v14);
    WTF::fastFree(v53, v54);
  }
  if (!v15)
    WTF::fastFree((WTF *)v10, v9);
}

void sub_182459224(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  WebGPU::Device *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  id v23;
  _QWORD *v24;

  v23 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
    goto LABEL_35;
  v6 = *(uint64_t **)(v4 + 48);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 8);
    v8 = __ldxr((unsigned __int8 *)v5);
    if (v8 == 1)
      goto LABEL_8;
LABEL_12:
    __clrex();
    goto LABEL_13;
  }
  v6 = 0;
  v9 = __ldxr((unsigned __int8 *)v5);
  if (v9 != 1)
    goto LABEL_12;
LABEL_8:
  if (!__stlxr(0, (unsigned __int8 *)v5))
  {
    if (!v6)
      goto LABEL_35;
    goto LABEL_14;
  }
LABEL_13:
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_35;
LABEL_14:
  if (v6[1])
  {
    v10 = *(unsigned int **)(a1 + 32);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E0FD1DC0;
    v12[1] = v10;
    v24 = v12;
    WebGPU::Queue::scheduleWork((uint64_t)v10, (uint64_t *)&v24);
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  v13 = *v6;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_23;
  }
  MEMORY[0x186DAB1AC](v13);
LABEL_23:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 != 1)
  {
    v17 = 0;
    v18 = 1;
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
      goto LABEL_25;
LABEL_29:
    __clrex();
    goto LABEL_30;
  }
  v20 = *(_QWORD *)(v13 + 16);
  v17 = *(WebGPU::Device **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  v18 = v20 != 0;
  LODWORD(v20) = __ldxr((unsigned __int8 *)v13);
  if ((_DWORD)v20 != 1)
    goto LABEL_29;
LABEL_25:
  if (!__stlxr(0, (unsigned __int8 *)v13))
  {
    if (v16)
      goto LABEL_35;
    goto LABEL_31;
  }
LABEL_30:
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  if (v16)
    goto LABEL_35;
LABEL_31:
  if (v17)
  {
    WebGPU::Device::~Device(v17);
    WTF::fastFree(v21, v22);
  }
  if (!v18)
    WTF::fastFree((WTF *)v13, v3);
LABEL_35:

}

void sub_182459448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, unsigned int *a11, uint64_t a12)
{
  unsigned __int8 **v12;
  void *v14;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(&a11);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v12, v14);

  _Unwind_Resume(a1);
}

void sub_182459490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__0(uint64_t a1)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  void *v6;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      WebGPU::Queue::~Queue((WebGPU::Queue *)result);
      return (unsigned int *)WTF::fastFree(v5, v6);
    }
  }
  return result;
}

void ___ZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke_9(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  WebGPU::Device *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  id v23;
  _QWORD *v24;

  v23 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
    goto LABEL_35;
  v6 = *(uint64_t **)(v4 + 48);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 8);
    v8 = __ldxr((unsigned __int8 *)v5);
    if (v8 == 1)
      goto LABEL_8;
LABEL_12:
    __clrex();
    goto LABEL_13;
  }
  v6 = 0;
  v9 = __ldxr((unsigned __int8 *)v5);
  if (v9 != 1)
    goto LABEL_12;
LABEL_8:
  if (!__stlxr(0, (unsigned __int8 *)v5))
  {
    if (!v6)
      goto LABEL_35;
    goto LABEL_14;
  }
LABEL_13:
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_35;
LABEL_14:
  if (v6[1])
  {
    v10 = *(unsigned int **)(a1 + 32);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E0FD1DE8;
    v12[1] = v10;
    v24 = v12;
    WebGPU::Queue::scheduleWork((uint64_t)v10, (uint64_t *)&v24);
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  v13 = *v6;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_23;
  }
  MEMORY[0x186DAB1AC](v13);
LABEL_23:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 != 1)
  {
    v17 = 0;
    v18 = 1;
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
      goto LABEL_25;
LABEL_29:
    __clrex();
    goto LABEL_30;
  }
  v20 = *(_QWORD *)(v13 + 16);
  v17 = *(WebGPU::Device **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  v18 = v20 != 0;
  LODWORD(v20) = __ldxr((unsigned __int8 *)v13);
  if ((_DWORD)v20 != 1)
    goto LABEL_29;
LABEL_25:
  if (!__stlxr(0, (unsigned __int8 *)v13))
  {
    if (v16)
      goto LABEL_35;
    goto LABEL_31;
  }
LABEL_30:
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  if (v16)
    goto LABEL_35;
LABEL_31:
  if (v17)
  {
    WebGPU::Device::~Device(v17);
    WTF::fastFree(v21, v22);
  }
  if (!v18)
    WTF::fastFree((WTF *)v13, v3);
LABEL_35:

}

void sub_1824596D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, unsigned int *a11, uint64_t a12)
{
  unsigned __int8 **v12;
  void *v14;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(&a11);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v12, v14);

  _Unwind_Resume(a1);
}

void sub_18245971C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__1(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__1(uint64_t a1)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  void *v6;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      WebGPU::Queue::~Queue((WebGPU::Queue *)result);
      return (unsigned int *)WTF::fastFree(v5, v6);
    }
  }
  return result;
}

void ___ZN6WebGPU5Queue6submitEON3WTF6VectorINSt3__117reference_wrapperINS_13CommandBufferEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke(uint64_t a1, id *a2)
{
  NSString *v4;
  NSString *v5;

  v4 = (NSString *)a2[7];
  v5 = v4;
  if (!v4)
    v4 = *(NSString **)(a1 + 32);
  WebGPU::CommandBuffer::makeInvalid((WebGPU::CommandBuffer *)a2, v4);

}

void sub_1824597E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN6WebGPU5Queue6submitEON3WTF6VectorINSt3__117reference_wrapperINS_13CommandBufferEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke_2(uint64_t a1, id *this)
{
  NSString *v4;
  NSString *v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v4 = (NSString *)this[7];
    v5 = v4;
    if (!v4)
      v4 = *(NSString **)(a1 + 32);
    WebGPU::CommandBuffer::makeInvalid((WebGPU::CommandBuffer *)this, v4);

  }
  else
  {
    WebGPU::CommandBuffer::makeInvalidDueToCommit(this, CFSTR("command buffer was submitted"));
  }
}

void sub_18245986C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebGPU::Queue::writeBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  int v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  WebGPU::Device *v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  id v30;

  v30 = a2;
  v9 = *(_QWORD *)(a1 + 40);
  if (!v9)
    goto LABEL_37;
  v10 = *(uint64_t **)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v9);
LABEL_6:
  if (*(_QWORD *)(v9 + 24))
  {
    ++*(_QWORD *)(v9 + 8);
    v12 = __ldxr((unsigned __int8 *)v9);
    if (v12 == 1)
      goto LABEL_8;
LABEL_12:
    __clrex();
    goto LABEL_13;
  }
  v10 = 0;
  v13 = __ldxr((unsigned __int8 *)v9);
  if (v13 != 1)
    goto LABEL_12;
LABEL_8:
  if (!__stlxr(0, (unsigned __int8 *)v9))
  {
    if (!v10)
      goto LABEL_37;
    goto LABEL_14;
  }
LABEL_13:
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (!v10)
    goto LABEL_37;
LABEL_14:
  WebGPU::Queue::ensureBlitCommandEncoder((WebGPU::Queue *)a1);
  v14 = (void *)v10[1];
  if (a5 >> 25)
    v15 = (void *)objc_msgSend(v14, "newBufferWithBytesNoCopy:length:options:deallocator:", a4, a5, 0, 0);
  else
    v15 = (void *)objc_msgSend(v14, "newBufferWithBytes:length:options:", a4, a5, 0);
  WebGPU::Device::setOwnerWithIdentity((uint64_t)v10, v15);
  if (v15)
  {
    objc_msgSend(*(id *)(a1 + 32), "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v15, 0, v30, a3, a5);
    if (a5 >> 25)
    {
      v16 = *(void **)(a1 + 32);
      if (v16)
      {
        WebGPU::Queue::endEncoding(a1, v16, *(void **)(a1 + 16));
        WebGPU::Queue::commitMTLCommandBuffer(a1, *(void **)(a1 + 16));
        v17 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;

        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;

      }
    }
  }

  v20 = *v10;
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_25;
  }
  MEMORY[0x186DAB1AC](v20);
LABEL_25:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 != 1)
  {
    v24 = 0;
    v25 = 1;
    v26 = __ldxr((unsigned __int8 *)v20);
    if (v26 == 1)
      goto LABEL_27;
LABEL_31:
    __clrex();
    goto LABEL_32;
  }
  v27 = *(_QWORD *)(v20 + 16);
  v24 = *(WebGPU::Device **)(v20 + 24);
  *(_QWORD *)(v20 + 24) = 0;
  v25 = v27 != 0;
  LODWORD(v27) = __ldxr((unsigned __int8 *)v20);
  if ((_DWORD)v27 != 1)
    goto LABEL_31;
LABEL_27:
  if (!__stlxr(0, (unsigned __int8 *)v20))
  {
    if (v23)
      goto LABEL_37;
    goto LABEL_33;
  }
LABEL_32:
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
  if (v23)
    goto LABEL_37;
LABEL_33:
  if (v24)
  {
    WebGPU::Device::~Device(v24);
    WTF::fastFree(v28, v29);
  }
  if (!v25)
    WTF::fastFree((WTF *)v20, v19);
LABEL_37:

}

void sub_182459AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned __int8 **v10;
  void *v11;
  void *v13;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v10, v13);
  _Unwind_Resume(a1);
}

void sub_182459AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

unsigned __int8 **WebGPU::Queue::device(WebGPU::Queue *this, void *a2)
{
  uint64_t v2;
  unsigned __int8 **v3;
  int v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  WebGPU::Device *v11;
  BOOL v12;
  int v13;
  unsigned __int8 **result;
  uint64_t v15;
  WTF *v16;
  void *v17;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_30;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 6);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
  {
    ++*(_QWORD *)(v2 + 8);
    v5 = __ldxr((unsigned __int8 *)v2);
    if (v5 == 1)
      goto LABEL_8;
LABEL_11:
    __clrex();
    goto LABEL_12;
  }
  v3 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
    goto LABEL_11;
LABEL_8:
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v3)
  {
LABEL_30:
    result = (unsigned __int8 **)456;
    __break(0xC471u);
    return result;
  }
  v7 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_18;
  }
  MEMORY[0x186DAB1AC](v7);
LABEL_18:
  v9 = *((_QWORD *)v7 + 1);
  v10 = v9 - 1;
  *((_QWORD *)v7 + 1) = v9 - 1;
  if (v9 != 1)
  {
    v11 = 0;
    v12 = 1;
    v13 = __ldxr(v7);
    if (v13 == 1)
      goto LABEL_20;
LABEL_24:
    __clrex();
    goto LABEL_25;
  }
  v15 = *((_QWORD *)v7 + 2);
  v11 = (WebGPU::Device *)*((_QWORD *)v7 + 3);
  *((_QWORD *)v7 + 3) = 0;
  v12 = v15 != 0;
  LODWORD(v15) = __ldxr(v7);
  if ((_DWORD)v15 != 1)
    goto LABEL_24;
LABEL_20:
  if (!__stlxr(0, v7))
  {
    if (v10)
      return v3;
    goto LABEL_26;
  }
LABEL_25:
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v10)
    return v3;
LABEL_26:
  if (v11)
  {
    WebGPU::Device::~Device(v11);
    WTF::fastFree(v16, v17);
  }
  if (v12)
    return v3;
  WTF::fastFree((WTF *)v7, a2);
  return v3;
}

void WebGPU::Queue::clearTextureIfNeeded(WebGPU::Queue *this, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  int v9;
  int v10;
  void *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  WebGPU::Device *v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  _DWORD *v32;
  _DWORD *v33;

  v3 = *((_QWORD *)this + 5);
  if (!v3)
    return;
  v7 = (uint64_t *)*((_QWORD *)this + 6);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 8);
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
      goto LABEL_8;
LABEL_12:
    __clrex();
    goto LABEL_13;
  }
  v7 = 0;
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
    goto LABEL_12;
LABEL_8:
  if (!__stlxr(0, (unsigned __int8 *)v3))
  {
    if (!v7)
      return;
    goto LABEL_14;
  }
LABEL_13:
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v7)
    return;
LABEL_14:
  if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 96))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v33;
    v32 = v33;
    v13 = v7[4];
    v14 = 32 * *((unsigned int *)v7 + 11);
    v15 = v13 + v14;
    while (v14)
    {
      v16 = *(_DWORD *)(v15 - 8);
      v15 -= 32;
      v14 -= 32;
      if (!v16)
      {
        v17 = v13 + v14;
        if (!*(_BYTE *)(v17 + 16))
        {
          v32 = 0;
          *(_DWORD *)v17 = 1;
          *(_QWORD *)(v17 + 8) = v12;
          *(_BYTE *)(v17 + 16) = 1;
        }
        goto LABEL_24;
      }
    }
    v18 = v7[3];
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v18 + 16))(v18, 1, &v32);
      v19 = v7[3];
      v7[3] = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
LABEL_24:
    v20 = v32;
    v32 = 0;
    if (v20)
    {
      if (*v20 == 2)
      {
        WTF::StringImpl::destroy();
        v21 = *v7;
        if (__ldaxr((unsigned __int8 *)v21))
          goto LABEL_28;
LABEL_30:
        if (!__stxr(1u, (unsigned __int8 *)v21))
          goto LABEL_32;
        goto LABEL_31;
      }
      *v20 -= 2;
    }
  }
  else
  {
    WebGPU::Queue::ensureBlitCommandEncoder(this);
    WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a2 + 8), *(unsigned int *)(a2 + 16), a3, (void *)v7[1], *((void **)this + 4));
  }
  v21 = *v7;
  if (!__ldaxr((unsigned __int8 *)v21))
    goto LABEL_30;
LABEL_28:
  __clrex();
LABEL_31:
  MEMORY[0x186DAB1AC](v21);
LABEL_32:
  v24 = *(_QWORD *)(v21 + 8);
  v25 = v24 - 1;
  *(_QWORD *)(v21 + 8) = v24 - 1;
  if (v24 != 1)
  {
    v26 = 0;
    v27 = 1;
    v28 = __ldxr((unsigned __int8 *)v21);
    if (v28 == 1)
      goto LABEL_34;
LABEL_38:
    __clrex();
LABEL_39:
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (v25)
      return;
    goto LABEL_40;
  }
  v29 = *(_QWORD *)(v21 + 16);
  v26 = *(WebGPU::Device **)(v21 + 24);
  *(_QWORD *)(v21 + 24) = 0;
  v27 = v29 != 0;
  LODWORD(v29) = __ldxr((unsigned __int8 *)v21);
  if ((_DWORD)v29 != 1)
    goto LABEL_38;
LABEL_34:
  if (__stlxr(0, (unsigned __int8 *)v21))
    goto LABEL_39;
  if (v25)
    return;
LABEL_40:
  if (v26)
  {
    WebGPU::Device::~Device(v26);
    WTF::fastFree(v30, v31);
  }
  if (!v27)
    WTF::fastFree((WTF *)v21, v11);
}

void sub_182459EE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  unsigned __int8 **v9;
  void *v11;

  if (a9)
  {
    if (*a9 == 2)
    {
      WTF::StringImpl::destroy();
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, v11);
      _Unwind_Resume(a1);
    }
    *a9 -= 2;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, a2);
    _Unwind_Resume(a1);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, a2);
  _Unwind_Resume(a1);
}

void WebGPU::Queue::writeTexture(WebGPU::Queue *a1, _DWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6;
  uint64_t v13;
  int v15;
  uint32x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint32x2_t v30;
  const __CFString *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  void *v42;
  unsigned int v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int32 v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  _BOOL4 v62;
  _BOOL4 v63;
  unint64_t v64;
  int v65;
  size_t v66;
  _BOOL4 isCompressedFormat;
  unsigned int v68;
  _BOOL4 v69;
  unsigned int *v70;
  uint64_t v71;
  BOOL v72;
  unsigned int v73;
  void *v74;
  __int32 v75;
  unsigned int v76;
  size_t v77;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _BOOL4 v88;
  BOOL v89;
  _BOOL4 v90;
  unint64_t v91;
  void *v92;
  _DWORD *v93;
  void *v94;
  unint64_t v95;
  uint64_t v96;
  uint32x2_t *v97;
  uint64_t v98;
  int v99;
  _DWORD *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t v111;
  void *v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  __int128 v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  unsigned int v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  id v152;
  uint64_t v154;
  uint64_t v155;
  WebGPU::Device *v156;
  BOOL v157;
  int v158;
  uint64_t v159;
  WTF *v160;
  void *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  __int128 v172;
  unint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  id v182;
  unsigned int *v183;
  _BOOL4 __n;
  size_t __na;
  size_t __nb;
  BOOL v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _DWORD *v192;
  char v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  __int32 v199;
  uint64_t v200;
  WebGPU::Texture *v201;
  uint64_t v202;
  WebGPU::Texture *v203[2];
  int v204;
  uint64_t v205;
  __int128 v206;
  unint64_t v207;
  uint64_t v208;
  int64x2_t v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  _QWORD v213[3];
  __int128 v214;
  uint64_t v215;
  _QWORD v216[3];
  _QWORD v217[3];
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  int64x2_t v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  unsigned int v238;
  unsigned int v239;
  _DWORD *v240;
  int v241;

  v6 = *((_QWORD *)a1 + 5);
  if (!v6)
    return;
  v13 = *((_QWORD *)a1 + 6);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v6);
LABEL_6:
  if (!*(_QWORD *)(v6 + 24))
  {
    v13 = 0;
    v23 = __ldxr((unsigned __int8 *)v6);
    if (v23 == 1)
      goto LABEL_8;
LABEL_21:
    __clrex();
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (!(*(_QWORD *)a2 | *(_QWORD *)a5))
      goto LABEL_13;
    goto LABEL_10;
  }
  ++*(_QWORD *)(v6 + 8);
  v15 = __ldxr((unsigned __int8 *)v6);
  if (v15 != 1)
    goto LABEL_21;
LABEL_8:
  if (__stlxr(0, (unsigned __int8 *)v6))
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (*(_QWORD *)a2 | *(_QWORD *)a5)
      goto LABEL_10;
LABEL_13:
    if (!v13)
      return;
    v16 = (uint32x2_t *)*((_QWORD *)a2 + 1);
    if (v16[12].i8[0])
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v17 = v234;
      *(_QWORD *)&v237 = v234;
      v18 = *(_QWORD *)(v13 + 32);
      v19 = 32 * *(unsigned int *)(v13 + 44);
      v20 = v18 + v19;
      while (v19)
      {
        v21 = *(_DWORD *)(v20 - 8);
        v20 -= 32;
        v19 -= 32;
        if (!v21)
        {
          v22 = v18 + v19;
          if (!*(_BYTE *)(v22 + 16))
          {
            *(_QWORD *)&v237 = 0;
            *(_DWORD *)v22 = 1;
            *(_QWORD *)(v22 + 8) = v17;
            *(_BYTE *)(v22 + 16) = 1;
          }
          goto LABEL_33;
        }
      }
      v26 = *(_QWORD *)(v13 + 24);
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v26 + 16))(v26, 1, &v237);
        v27 = *(_QWORD *)(v13 + 24);
        *(_QWORD *)(v13 + 24) = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
LABEL_33:
      v28 = (int *)v237;
      *(_QWORD *)&v237 = 0;
      if (!v28)
        goto LABEL_306;
      v29 = *v28 - 2;
      if (*v28 != 2)
      {
LABEL_35:
        *v28 = v29;
        goto LABEL_306;
      }
LABEL_57:
      WTF::StringImpl::destroy();
      goto LABEL_306;
    }
    v24 = v16[5].u32[0];
    if (v24 - 38 <= 5)
    {
      v25 = a2[8];
      switch(v25)
      {
        case 0x7FFFFFFF:
          goto LABEL_55;
        case 2:
          if (v24 - 39 < 5)
          {
            v24 = dword_18260F0C0[v24 - 39];
            break;
          }
          goto LABEL_55;
        case 1:
          if (v24 <= 0x2B && ((1 << v24) & 0xA4000000000) != 0)
          {
            v24 = 38;
            break;
          }
LABEL_55:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_QWORD *)&v237 = v234;
          WebGPU::Device::generateAValidationError(v13, (uint64_t *)&v237);
          v28 = (int *)v237;
          *(_QWORD *)&v237 = 0;
          if (!v28)
            goto LABEL_306;
          v29 = *v28 - 2;
          if (*v28 != 2)
            goto LABEL_35;
          goto LABEL_57;
      }
    }
    v204 = v24;
    if (!*(_QWORD *)&v16[1]
      || (v30 = v16[8], !*(_QWORD *)(*(_QWORD *)&v30 + 8))
      || (unsigned __int8 **)v30 != WebGPU::Queue::device(a1, a2))
    {
      v31 = CFSTR("destination texture is not valid");
      goto LABEL_42;
    }
    WebGPU::Texture::errorValidatingImageCopyTexture((uint64_t)a2, a6);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    if (v42)
    {
LABEL_60:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUQueue.writeTexture: %@"), v42);
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      if (v32)
        goto LABEL_43;
      goto LABEL_61;
    }
    if ((v16[5].i8[4] & 2) == 0)
    {
      v31 = CFSTR("texture usage does not contain CopyDst");
      goto LABEL_42;
    }
    if (v16[4].i32[0] == 1)
    {
      WebGPU::Texture::errorValidatingTextureCopyRange((uint64_t)a2, a6);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      if (v42)
        goto LABEL_60;
      v97 = v16;
      v98 = v16[5].u32[0];
      v99 = a2[8];
      if (WebGPU::Texture::refersToSingleAspect(v98, v99))
      {
        if ((v98 - 38) > 5)
        {
LABEL_206:
          v16 = v97;
          if (WebGPU::Texture::validateLinearTextureData(a5, a4, v98, *(_QWORD *)a6, a6[2]))
            goto LABEL_61;
          v31 = CFSTR("validateLinearTextureData failed");
          goto LABEL_42;
        }
        if ((v98 - 38) < 2 || ((_DWORD)v98 == 41 || (_DWORD)v98 == 43) && v99 == 1)
        {
          LODWORD(v98) = WebGPU::Texture::aspectSpecificFormat(v98, v99);
          goto LABEL_206;
        }
        v31 = CFSTR("isValidDepthStencilCopyDestination failed");
        v16 = v97;
      }
      else
      {
        v31 = CFSTR("refersToSingleAspect failed");
        v16 = v97;
      }
    }
    else
    {
      v31 = CFSTR("destinationTexture sampleCount is not 1");
    }
LABEL_42:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPUQueue.writeTexture: %@"), v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if (v32)
    {
LABEL_43:
      MEMORY[0x186DAB230](&v234, v32);
      v33 = *(_QWORD *)(v13 + 32);
      v34 = 32 * *(unsigned int *)(v13 + 44);
      v35 = v33 + v34;
      while (v34)
      {
        v36 = *(_DWORD *)(v35 - 8);
        v35 -= 32;
        v34 -= 32;
        if (!v36)
        {
          v37 = v33 + v34;
          if (!*(_BYTE *)(v37 + 16))
          {
            v38 = v234;
            *(_QWORD *)&v234 = 0;
            *(_DWORD *)v37 = 1;
            *(_QWORD *)(v37 + 8) = v38;
            *(_BYTE *)(v37 + 16) = 1;
          }
          goto LABEL_51;
        }
      }
      v39 = *(_QWORD *)(v13 + 24);
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v39 + 16))(v39, 1, &v234);
        v40 = *(_QWORD *)(v13 + 24);
        *(_QWORD *)(v13 + 24) = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      }
LABEL_51:
      v41 = (_DWORD *)v234;
      *(_QWORD *)&v234 = 0;
      if (v41)
      {
        if (*v41 == 2)
        {
          WTF::StringImpl::destroy();

          goto LABEL_306;
        }
        *v41 -= 2;
      }

      goto LABEL_306;
    }
LABEL_61:
    if (!a4)
      goto LABEL_306;
    if (a4 <= *(_QWORD *)(a5 + 8))
      goto LABEL_306;
    v43 = WebGPU::Texture::texelBlockSize(v204);
    v44 = WebGPU::Texture::logicalMiplevelSpecificTextureExtent(v16, a2[4]);
    v192 = a2;
    LODWORD(v46) = a2[5];
    v195 = v44;
    v45 = v44 >= v46;
    LODWORD(v46) = v44 - v46;
    if (!v45)
      goto LABEL_306;
    v46 = v46 >= *a6 ? *a6 : v46;
    v194 = v46;
    if (!(_DWORD)v46)
      goto LABEL_306;
    v48 = a2[6];
    v47 = a2[7];
    v49 = (_DWORD)a2 - v47;
    v50 = a6[1];
    if (a2 - v47 >= a6[2])
      v49 = a6[2];
    if (a2 >= v47)
      v51 = v49;
    else
      v51 = 0;
    v180 = v51;
    LODWORD(v51) = HIDWORD(v44) - v48;
    if (HIDWORD(v44) - v48 >= v50)
      LODWORD(v51) = a6[1];
    if (HIDWORD(v44) >= v48)
      v51 = v51;
    else
      v51 = 0;
    v190 = v51;
    v52 = *(unsigned int *)(a5 + 16);
    if ((_DWORD)v52 == -1)
    {
      v52 = a4;
      if ((_DWORD)v50)
        v52 = a4 / v50;
    }
    v53 = v16[4].i32[1];
    if ((v53 - 1) >= 2)
    {
      if (v53)
      {
LABEL_94:
        v56 = *(_DWORD *)(a5 + 20);
        if (v56 == -1)
          v50 = v50;
        else
          v50 = v56;
        v178 = v50;
        v57 = a2[8];
        if (v57 == 0x7FFFFFFF)
          goto LABEL_306;
        v191 = v52;
        v177 = HIDWORD(v44);
        v181 = v43;
        if (v57 == 2)
        {
          v174 = 0;
          v58 = 1;
        }
        else
        {
          if (v57 != 1)
          {
            v175 = 0;
            v174 = 1;
LABEL_105:
            v182 = *(id *)&v16[1];
            v183 = a6;
            v201 = (WebGPU::Texture *)v16;
            v59 = a6[2];
            v199 = v16[4].i32[1];
            if (v199 == 2)
              v59 = 1;
            v197 = v59;
            if (v59)
            {
              v60 = 0;
              v193 = 0;
              v62 = (_DWORD)v194 == (_DWORD)v195 && (_DWORD)v190 == (_DWORD)v177;
              v187 = v62;
              v63 = (_DWORD)v180 == (_DWORD)v192 && v62;
              __n = v63;
              while (1)
              {
                if (v199 == 2)
                  v64 = 0;
                else
                  v64 = (v60 + a2[7]);
                v65 = a2[4];
                if (WebGPU::Texture::previouslyCleared(v201, v65, v64))
                  goto LABEL_119;
                if (v199 == 2)
                {
                  if (!__n)
                    goto LABEL_132;
                }
                else if (v199 == 1)
                {
                  if (!v187)
                    goto LABEL_132;
                }
                else if (v199 || (_DWORD)v194 != (_DWORD)v195)
                {
LABEL_132:
                  WebGPU::Queue::clearTextureIfNeeded(a1, (uint64_t)a2, v64);
                  v193 = 1;
                  goto LABEL_119;
                }
                WebGPU::Texture::setPreviouslyCleared((uint64_t *)v201, v65, v64, 1);
LABEL_119:
                if (v197 == ++v60)
                  goto LABEL_134;
              }
            }
            v193 = 0;
LABEL_134:
            v198 = v191 * v178;
            v66 = v43 << 11;
            if (v199 != 2)
              v66 = v191;
            __na = v66;
            isCompressedFormat = WebGPU::Texture::isCompressedFormat(v204);
            v188 = WebGPU::Texture::texelBlockHeight(v204);
            v68 = WebGPU::Texture::texelBlockWidth(v204);
            v69 = isCompressedFormat;
            if (isCompressedFormat)
            {
              v70 = v183;
              v71 = v190;
            }
            else
            {
              v70 = v183;
              if (v191 % v43)
                v72 = 1;
              else
                v72 = v191 > __na;
              v71 = v190;
              if (v72)
              {
                v73 = v188;
                LODWORD(v240) = *v183;
                HIDWORD(v240) = v188;
                v241 = 1;
                v74 = v182;
                v75 = v199;
                if (v199 && (v190 > v188 || v180 >= 2))
                {
                  v237 = 0uLL;
                  v101 = *(_DWORD *)(a5 + 16);
                  if (v101 >= __na)
                    v101 = __na;
                  v238 = v101;
                  v239 = v188;
                  if (v68)
                    v102 = v194 / v68;
                  else
                    v102 = 0;
                  if ((_DWORD)v190)
                  {
                    v122 = 0;
                    v123 = v102 * (unint64_t)v181;
                    if (v180 <= 1)
                      v124 = 1;
                    else
                      v124 = v180;
                    v200 = v124;
                    while (1)
                    {
                      v125 = *((_OWORD *)a2 + 1);
                      v234 = *(_OWORD *)a2;
                      v235 = v125;
                      v236 = *((_QWORD *)a2 + 4);
                      HIDWORD(v235) = a2[7] + v122;
                      v202 = v122;
                      v207 = v122 * v198;
                      if (v123 != -1)
                      {
                        v126 = 0;
                        v127 = v177;
                        while (1)
                        {
                          DWORD2(v235) = a2[6] + v126;
                          if (DWORD2(v235) + v73 > v127)
                            HIDWORD(v240) = DWORD2(v235) + v73 - v127;
                          v128 = v207 + v191 * v126;
                          if (v126 + 1 == (_DWORD)v190)
                            break;
                          v131 = 0;
                          do
                          {
                            DWORD1(v235) = v131 + a2[5];
                            v132 = v128 + v131;
                            v133 = v191 * HIDWORD(v240);
                            if (v133 + v132 > a4)
                              goto LABEL_289;
                            if (a4 < v132)
                              goto LABEL_342;
                            if (v133 == -1)
                            {
                              v133 = a4 - v132;
                            }
                            else if (a4 - v132 < v133)
                            {
                              goto LABEL_342;
                            }
                            WebGPU::Queue::writeTexture(a1, &v234, a3 + v132, v133, &v237, &v240);
                            v131 += __na;
                          }
                          while (v131 < v194);
LABEL_267:
                          v73 = HIDWORD(v240);
                          v126 += HIDWORD(v240);
                          v127 = v177;
                          if (v126 >= v190)
                            goto LABEL_287;
                        }
                        v129 = 0;
                        while (1)
                        {
                          DWORD1(v235) = v129 + a2[5];
                          v130 = v128 + v129;
                          if (v130 + v123 > a4)
                            break;
                          if (a4 < v130 || a4 - v130 < v123)
                            goto LABEL_342;
                          WebGPU::Queue::writeTexture(a1, &v234, a3 + v130, v123, &v237, &v240);
                          v129 += __na;
                          if (v129 >= v194)
                            goto LABEL_267;
                        }
LABEL_289:
                        v74 = v182;
                        goto LABEL_305;
                      }
                      v134 = 0;
                      v135 = v177;
                      do
                      {
                        DWORD2(v235) = a2[6] + v134;
                        if (DWORD2(v235) + v73 > v135)
                          HIDWORD(v240) = DWORD2(v235) + v73 - v135;
                        v136 = v207 + v191 * v134;
                        if (v134 + 1 == (_DWORD)v190)
                        {
                          v137 = 0;
                          while (1)
                          {
                            DWORD1(v235) = v137 + a2[5];
                            v138 = v136 + v137;
                            if (v138 - 1 > a4)
                              goto LABEL_289;
                            if (a4 < v138)
                              goto LABEL_342;
                            WebGPU::Queue::writeTexture(a1, &v234, a3 + v138, a4 - v138, &v237, &v240);
                            v137 += __na;
                            if (v137 >= v194)
                              goto LABEL_286;
                          }
                        }
                        v139 = 0;
                        do
                        {
                          DWORD1(v235) = v139 + a2[5];
                          v140 = v136 + v139;
                          v141 = v191 * HIDWORD(v240);
                          if (v141 + v140 > a4)
                            goto LABEL_289;
                          if (a4 < v140)
                            goto LABEL_342;
                          if (v141 == -1)
                          {
                            v141 = a4 - v140;
                          }
                          else if (a4 - v140 < v141)
                          {
LABEL_342:
                            __break(1u);
                            goto LABEL_345;
                          }
                          WebGPU::Queue::writeTexture(a1, &v234, a3 + v140, v141, &v237, &v240);
                          v139 += __na;
                        }
                        while (v139 < v194);
LABEL_286:
                        v73 = HIDWORD(v240);
                        v134 += HIDWORD(v240);
                        v135 = v177;
                      }
                      while (v134 < v190);
LABEL_287:
                      v122 = v202 + 1;
                      v74 = v182;
                      if (v202 + 1 == v200)
                        goto LABEL_305;
                    }
                  }
                  goto LABEL_305;
                }
                v191 = 0;
                v198 = 0;
LABEL_148:
                if (v75 == 0x7FFFFFFF)
                  goto LABEL_305;
                if (v75 == 2)
                {
                  if (!(_DWORD)v71 || !(_DWORD)v180)
                    goto LABEL_305;
                }
                else if (v75 == 1 && !(_DWORD)v71)
                {
LABEL_305:

                  goto LABEL_306;
                }
                v234 = 0uLL;
                v76 = v194 / v68;
                if (v194 % v68)
                  ++v76;
                v77 = v76 * v181;
                if (((_DWORD)v194 == (_DWORD)v195 && v191 != v77 && (_DWORD)v71 == (_DWORD)v177 || v191 % v181 != 0)
                  && v69)
                {
                  if (v73 > v71)
                    LODWORD(v71) = v73;
                  v82 = v177 / v73;
                  if (v73 > v177 / v73)
                    v82 = v73;
                  __nb = v77;
                  v83 = v77 * (unint64_t)v82;
                  LODWORD(v84) = v70[2];
                  if (v84 <= 1)
                    v84 = 1;
                  else
                    v84 = v84;
                  v179 = v83;
                  v176 = v84;
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)&v234, (WTF *)(v83 * v84));
                  if (!HIDWORD(v234))
                    goto LABEL_345;
                  v85 = v71 / v73;
                  v189 = v234;
                  v173 = HIDWORD(v234);
                  bzero((void *)v234, HIDWORD(v234));
                  v86 = v85 - 1;
                  v87 = v176 - 1;
                  v88 = !is_mul_ok(v176 - 1, v198);
                  if (!is_mul_ok(v85 - 1, v191))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18245B2F4);
                  }
                  if (v88)
                  {
LABEL_345:
                    __break(0xC471u);
                    JUMPOUT(0x18245B2ECLL);
                  }
                  v89 = __CFADD__(v87 * v198, __nb);
                  v90 = __CFADD__(v86 * v191, v87 * v198 + __nb);
                  if (v89 || v90)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v240 = (_DWORD *)v237;
                    WebGPU::Device::generateAValidationError(v13, (uint64_t *)&v240);
                    v100 = v240;
                    v240 = 0;
                    if (v100)
                    {
                      if (*v100 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v100 -= 2;
                    }
                    goto LABEL_303;
                  }
                  v91 = v173;
                  if (v87 * v179 + v85 * (unint64_t)__nb > v173
                    || (v91 = v173, __nb + v86 * v191 + v87 * v198 + *(_QWORD *)(a5 + 8) > a4))
                  {
                    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("y(%zu) * newBytesPerRow(%u) + z(%zu) * newBytesPerImage(%lu) + newBytesPerRow(%u) > newData.size()(%zu) || y(%zu) * bytesPerRow(%lu) + z(%zu) * bytesPerImage(%lu) + newBytesPerRow(%u) > dataSize(%zu), copySize %u, %u, %u, textureSize %u, %u, %u, offset %llu"), v85 - 1, __nb, v176 - 1, v179, __nb, v91, v85 - 1, v191, v176 - 1, v198, __nb, a4, v194, v190, v180, v195,
                      v177,
                      v192,
                      *(_QWORD *)(a5 + 8));
                    v92 = (void *)objc_claimAutoreleasedReturnValue();
                    MEMORY[0x186DAB230](&v237, v92);
                    WebGPU::Device::generateAValidationError(v13, (uint64_t *)&v237);
                    v93 = (_DWORD *)v237;
                    *(_QWORD *)&v237 = 0;
                    if (!v93)
                    {
LABEL_193:

                      goto LABEL_303;
                    }
                    if (*v93 != 2)
                    {
                      *v93 -= 2;
                      goto LABEL_193;
                    }
                    WTF::StringImpl::destroy();

LABEL_303:
                    if ((_QWORD)v234)
                      WTF::fastFree((WTF *)v234, v94);
                    goto LABEL_305;
                  }
                  v103 = 0;
                  if (v85 <= 1)
                    v104 = 1;
                  else
                    v104 = v71 / v73;
                  v196 = v104;
                  do
                  {
                    v105 = 0;
                    v205 = v103;
                    v106 = v189 + v103 * v179;
                    v107 = a3;
                    v108 = v196;
                    do
                    {
                      memcpy((void *)(v106 + v105 * __nb), (const void *)(v107 + *(_QWORD *)(a5 + 8)), __nb);
                      ++v105;
                      v107 += v191;
                      --v108;
                    }
                    while (v108);
                    v103 = v205 + 1;
                    a3 += v198;
                  }
                  while (v205 + 1 != v176);
                  v95 = 0;
                  v191 = __nb;
                  v198 = v179;
                  a4 = v173;
                  v74 = v182;
                  v71 = v190;
                  if (*((_QWORD *)a1 + 7) != *((_QWORD *)a1 + 8))
                    goto LABEL_226;
                }
                else
                {
                  v95 = *(_QWORD *)(a5 + 8);
                  v189 = a3;
                  if (*((_QWORD *)a1 + 7) != *((_QWORD *)a1 + 8))
                    goto LABEL_226;
                }
                if (!((*((_QWORD *)a1 + 4) != 0 || (v174 & 1) == 0) | v193 & 1))
                {
                  v96 = objc_msgSend(v74, "storageMode");
                  if (!v96)
                  {
                    if (v199 == 2)
                    {
                      v74 = v182;
                      if ((_DWORD)v190 && (_DWORD)v180 && !(v95 % v181))
                      {
                        v165 = a2[7];
                        v166 = *(_QWORD *)(a2 + 5);
                        *(_QWORD *)&v167 = v166;
                        *((_QWORD *)&v167 + 1) = HIDWORD(v166);
                        v220 = v167;
                        v221 = v165;
                        v222 = v194;
                        v223 = v190;
                        v224 = v180;
                        objc_msgSend(v182, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", &v220, a2[4], 0, v189 + v95, v191, v198);
                      }
                      goto LABEL_303;
                    }
                    if (v199 == 1)
                    {
                      v74 = v182;
                      v168 = v190;
                      if ((_DWORD)v190)
                      {
                        v169 = v183[2];
                        if ((_DWORD)v169)
                        {
                          v170 = 0;
                          v171 = *(_QWORD *)(a2 + 5);
                          *(_QWORD *)&v172 = v171;
                          *((_QWORD *)&v172 + 1) = HIDWORD(v171);
                          v210 = v172;
                          do
                          {
                            if (!(v95 % v181))
                            {
                              v225 = v210;
                              v226 = 0;
                              v227 = v194;
                              v228 = v168;
                              v229 = 1;
                              objc_msgSend(v74, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", &v225, a2[4], (v170 + a2[7]), v189 + v95, v191, 0);
                              v74 = v182;
                              v169 = v183[2];
                              v168 = v190;
                            }
                            ++v170;
                            v95 += v198;
                          }
                          while (v170 < v169);
                        }
                      }
                      goto LABEL_303;
                    }
                    v74 = v182;
                    if (v199)
                      goto LABEL_303;
                    v162 = a2[5];
                    v237 = 0uLL;
                    v163 = v183[2];
                    if ((_DWORD)v163)
                    {
                      v164 = 0;
                      v209 = vdupq_n_s64(1uLL);
                      do
                      {
                        if (!(v95 % v181))
                        {
                          v231 = v237;
                          v230 = v162;
                          v232 = v194;
                          v233 = v209;
                          objc_msgSend(v182, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", &v230, a2[4], (v164 + a2[7]), v189 + v95, 0, 0);
                          v163 = v183[2];
                        }
                        ++v164;
                        v95 += v198;
                      }
                      while (v164 < v163);
                    }
LABEL_302:
                    v74 = v182;
                    goto LABEL_303;
                  }
                  if (v96 != 2)
                    goto LABEL_303;
                }
LABEL_226:
                WebGPU::Queue::ensureBlitCommandEncoder(a1);
                v109 = a4 - v95;
                v110 = (void *)(v189 + v95);
                v111 = (a4 - v95) >> 25;
                if (v111)
                  WebGPU::Device::newBufferWithBytesNoCopy((id *)v13, v110, v109, 0);
                else
                  WebGPU::Device::newBufferWithBytes((id *)v13, v110, v109, 0);
                v112 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v112)
                  goto LABEL_301;
                v113 = *((_DWORD *)v201 + 9);
                if (v113 > 1)
                {
                  if (v113 == 2)
                  {
                    if (!(_DWORD)v71 || !(_DWORD)v180)
                      goto LABEL_301;
                    v147 = a2[7];
                    v148 = (void *)*((_QWORD *)a1 + 4);
                    v213[0] = v194;
                    v213[1] = v71;
                    v213[2] = v180;
                    v149 = a2[4];
                    v150 = *(_QWORD *)(a2 + 5);
                    *(_QWORD *)&v151 = v150;
                    *((_QWORD *)&v151 + 1) = HIDWORD(v150);
                    v211 = v151;
                    v212 = v147;
                    objc_msgSend(v148, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v112, 0, v191, v198, v213, v182, 0, v149, &v211, v175);
                  }
                  else if (v113 == 0x7FFFFFFF)
                  {
                    goto LABEL_301;
                  }
                }
                else
                {
                  if (!v113)
                  {
                    if (v183[2])
                    {
                      v142 = 0;
                      v143 = 0;
                      v208 = a2[5];
                      *(int64x2_t *)v203 = vdupq_n_s64(1uLL);
                      do
                      {
                        v144 = a2[7];
                        if (v194 * v181 + v142 <= objc_msgSend(v112, "length") && !(v142 % v181))
                        {
                          v145 = (void *)*((_QWORD *)a1 + 4);
                          v218 = v194;
                          v219 = *(_OWORD *)v203;
                          v146 = a2[4];
                          v217[0] = v208;
                          v217[1] = 0;
                          v217[2] = 0;
                          objc_msgSend(v145, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v112, v142, 0, 0, &v218, v182, (v143 + v144), v146, v217, v175);
                        }
                        ++v143;
                        v142 += v198;
                      }
                      while (v143 < v183[2]);
                    }
                    goto LABEL_299;
                  }
                  if (v113 == 1)
                  {
                    if ((_DWORD)v71)
                    {
                      v114 = v183[2];
                      if ((_DWORD)v114)
                      {
                        v115 = 0;
                        v116 = 0;
                        v117 = *(_QWORD *)(a2 + 5);
                        *(_QWORD *)&v118 = v117;
                        *((_QWORD *)&v118 + 1) = HIDWORD(v117);
                        v206 = v118;
                        do
                        {
                          if (!(v115 % v181))
                          {
                            v119 = (v116 + a2[7]);
                            v120 = (void *)*((_QWORD *)a1 + 4);
                            v216[0] = v194;
                            v216[1] = v190;
                            v216[2] = 1;
                            v121 = a2[4];
                            v214 = v206;
                            v215 = 0;
                            objc_msgSend(v120, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v112, v115, v191, 0, v216, v182, v119, v121, &v214, v175);
                            v114 = v183[2];
                          }
                          ++v116;
                          v115 += v198;
                        }
                        while (v116 < v114);
                      }
                      goto LABEL_299;
                    }
LABEL_301:

                    goto LABEL_302;
                  }
                }
LABEL_299:
                if (v111)
                  WebGPU::Queue::finalizeBlitCommandEncoder(a1);
                goto LABEL_301;
              }
            }
            v74 = v182;
            v75 = v199;
            v73 = v188;
            goto LABEL_148;
          }
          v174 = 0;
          v58 = 2;
        }
        v175 = v58;
        goto LABEL_105;
      }
      v54 = *(_DWORD *)(v13 + 72);
    }
    else
    {
      v54 = *(_DWORD *)(v13 + 76);
    }
    v55 = v54 * v43;
    if (v55 >= v52)
      v52 = v52;
    else
      v52 = v55;
    goto LABEL_94;
  }
  if (!(*(_QWORD *)a2 | *(_QWORD *)a5))
    goto LABEL_13;
LABEL_10:
  if (!v13)
    return;
LABEL_306:
  v152 = *(id *)v13;
  if (__ldaxr((unsigned __int8 *)v152))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v152))
  {
    goto LABEL_310;
  }
  MEMORY[0x186DAB1AC](v152);
LABEL_310:
  v154 = *((_QWORD *)v152 + 1);
  v155 = v154 - 1;
  *((_QWORD *)v152 + 1) = v154 - 1;
  if (v154 != 1)
  {
    v156 = 0;
    v157 = 1;
    v158 = __ldxr((unsigned __int8 *)v152);
    if (v158 == 1)
      goto LABEL_312;
LABEL_316:
    __clrex();
LABEL_317:
    WTF::Lock::unlockSlow((WTF::Lock *)v152);
    if (v155)
      return;
    goto LABEL_318;
  }
  v159 = *((_QWORD *)v152 + 2);
  v156 = (WebGPU::Device *)*((_QWORD *)v152 + 3);
  *((_QWORD *)v152 + 3) = 0;
  v157 = v159 != 0;
  LODWORD(v159) = __ldxr((unsigned __int8 *)v152);
  if ((_DWORD)v159 != 1)
    goto LABEL_316;
LABEL_312:
  if (__stlxr(0, (unsigned __int8 *)v152))
    goto LABEL_317;
  if (v155)
    return;
LABEL_318:
  if (v156)
  {
    WebGPU::Device::~Device(v156);
    WTF::fastFree(v160, v161);
  }
  if (!v157)
    WTF::fastFree((WTF *)v152, a2);
}

void sub_18245B300(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  unsigned __int8 **v39;
  uint64_t v40;
  WTF *v42;
  void *v43;
  void *v44;

  v42 = *(WTF **)(v40 - 176);
  if (v42)
  {
    WTF::fastFree(v42, a2);

    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v39, v43);
    _Unwind_Resume(a1);
  }

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v39, v44);
  _Unwind_Resume(a1);
}

void sub_18245B484(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;
  _DWORD *v5;
  void *v6;

  v5 = *(_DWORD **)(v3 - 136);
  *(_QWORD *)(v3 - 136) = 0;
  if (v5)
  {
    if (*v5 != 2)
    {
      *v5 -= 2;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
      _Unwind_Resume(a1);
    }
    WTF::StringImpl::destroy();
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, v6);
    _Unwind_Resume(a1);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t result, WTF *a2)
{
  int v2;
  uint64_t v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if (v4 >= (unint64_t)a2 || (v5 = *(unsigned int *)(result + 8), v5 >= (unint64_t)a2))
  {
LABEL_14:
    *(_DWORD *)(v3 + 12) = v2;
    return result;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= (unint64_t)a2)
    v8 = (unint64_t)a2;
  else
    v8 = v7;
  if (!HIDWORD(v8))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)v8);
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, v4);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

void WebGPU::Queue::clearTextureViewIfNeeded(WebGPU::Queue *this, WebGPU::TextureView *a2)
{
  uint64_t v2;
  uint64_t *v5;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint32x2_t *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint32x2_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  WebGPU::Device *v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  void *v43;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return;
  v5 = (uint64_t *)*((_QWORD *)this + 6);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
  {
    ++*(_QWORD *)(v2 + 8);
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
      goto LABEL_8;
LABEL_12:
    __clrex();
    goto LABEL_13;
  }
  v5 = 0;
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
    goto LABEL_12;
LABEL_8:
  if (!__stlxr(0, (unsigned __int8 *)v2))
  {
    if (!v5)
      return;
    goto LABEL_14;
  }
LABEL_13:
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return;
LABEL_14:
  v9 = *((_DWORD *)a2 + 15);
  if (v9)
  {
    v10 = *((_DWORD *)a2 + 13);
    if (v10)
    {
      v11 = 0;
      v12 = (uint32x2_t *)*((_QWORD *)a2 + 12);
      v13 = *((_DWORD *)a2 + 13);
      do
      {
        if (v13 && !v12[12].i8[0])
        {
          v14 = 0;
LABEL_22:
          v15 = (*((_DWORD *)a2 + 12) + v14);
          v16 = *((_DWORD *)a2 + 14) + v11;
          v17 = v12[9];
          if (!*(_QWORD *)&v17)
            goto LABEL_36;
          v18 = *(_DWORD *)(*(_QWORD *)&v17 - 8);
          v19 = 9 * ((v15 + ~((_DWORD)v15 << 15)) ^ ((v15 + ~((_DWORD)v15 << 15)) >> 10));
          v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
          v21 = v18 & (v20 ^ HIWORD(v20));
          v22 = *(_DWORD *)(*(_QWORD *)&v17 + 16 * v21);
          if (v22 != (_DWORD)v15)
          {
            v23 = 1;
            while (v22 != -1)
            {
              v21 = ((_DWORD)v21 + v23) & v18;
              v22 = *(_DWORD *)(*(_QWORD *)&v17 + 16 * v21);
              ++v23;
              if (v22 == (_DWORD)v15)
                goto LABEL_27;
            }
LABEL_36:
            WebGPU::Queue::ensureBlitCommandEncoder(this);
            v30 = (id)v5[1];
            WebGPU::CommandEncoder::clearTextureIfNeeded(v12, v15, v16, v30, *((void **)this + 4));

            v10 = *((_DWORD *)a2 + 13);
            goto LABEL_37;
          }
LABEL_27:
          if (v21 == *(_DWORD *)(*(_QWORD *)&v17 - 4))
            goto LABEL_36;
          v24 = *(_QWORD *)(*(_QWORD *)&v17 + 16 * v21 + 8);
          if (!v24)
            goto LABEL_36;
          v25 = *(_DWORD *)(v24 - 8);
          v26 = 9 * ((v16 + ~((_DWORD)v16 << 15)) ^ ((v16 + ~((_DWORD)v16 << 15)) >> 10));
          v27 = v25 & (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6))
                                                                            + ~((v26 ^ (v26 >> 6)) << 11)) >> 16));
          v28 = *(_DWORD *)(v24 + 4 * v27);
          if (v28 == (_DWORD)v16)
            goto LABEL_37;
          v29 = 1;
          do
          {
            if (v28 == -1)
              goto LABEL_36;
            v27 = (v27 + v29) & v25;
            v28 = *(_DWORD *)(v24 + 4 * v27);
            ++v29;
          }
          while (v28 != (_DWORD)v16);
LABEL_37:
          while (++v14 < v10)
          {
            if (!v12[12].i8[0])
              goto LABEL_22;
          }
          v9 = *((_DWORD *)a2 + 15);
          v13 = v10;
        }
        ++v11;
      }
      while (v11 < v9);
    }
  }
  v31 = (void *)*((_QWORD *)this + 4);
  if (v31)
  {
    WebGPU::Queue::endEncoding((uint64_t)this, v31, *((void **)this + 2));
    WebGPU::Queue::commitMTLCommandBuffer((uint64_t)this, *((void **)this + 2));
    v32 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;

    v33 = (void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;

  }
  v34 = *v5;
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_46;
  }
  MEMORY[0x186DAB1AC](v34);
LABEL_46:
  v36 = *(_QWORD *)(v34 + 8);
  v37 = v36 - 1;
  *(_QWORD *)(v34 + 8) = v36 - 1;
  if (v36 != 1)
  {
    v38 = 0;
    v39 = 1;
    v40 = __ldxr((unsigned __int8 *)v34);
    if (v40 == 1)
      goto LABEL_48;
LABEL_52:
    __clrex();
LABEL_53:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
    if (v37)
      return;
    goto LABEL_54;
  }
  v41 = *(_QWORD *)(v34 + 16);
  v38 = *(WebGPU::Device **)(v34 + 24);
  *(_QWORD *)(v34 + 24) = 0;
  v39 = v41 != 0;
  LODWORD(v41) = __ldxr((unsigned __int8 *)v34);
  if ((_DWORD)v41 != 1)
    goto LABEL_52;
LABEL_48:
  if (__stlxr(0, (unsigned __int8 *)v34))
    goto LABEL_53;
  if (v37)
    return;
LABEL_54:
  if (v38)
  {
    WebGPU::Device::~Device(v38);
    WTF::fastFree(v42, v43);
  }
  if (!v39)
    WTF::fastFree((WTF *)v34, v31);
}

void sub_18245B93C(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void sub_18245B950(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;
  void *v2;
  void *v4;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v1, v4);
  _Unwind_Resume(a1);
}

void sub_18245B968(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *wgpuQueueReference(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

unsigned int *wgpuQueueRelease(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    WebGPU::Queue::~Queue((WebGPU::Queue *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t wgpuQueueOnSubmittedWorkDone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E0FD1E88;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebGPU::Queue::onSubmittedWorkDone(a1, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

void sub_18245BA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void wgpuQueueSubmit(WebGPU::Queue *this, void *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  __CFString *v29;
  __CFString *v30;
  char *v31;
  uint64_t v32;
  id v33;
  __CFString *v34;
  __CFString *v35;
  __CFString *v36;
  __CFString *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  __CFString *v47;
  __CFString *v48;
  __CFString *v49;
  void (**v50)(_QWORD, _QWORD);
  _QWORD *v51;
  __CFString *v52;
  void (**v53)(_QWORD, _QWORD);
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  __CFString *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  void *v66;
  BOOL v67;
  int v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned __int8 *v73;
  uint64_t v75;
  uint64_t v76;
  WebGPU::Device *v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  WTF *v81;
  void *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _QWORD v88[4];
  __CFString *v89;
  _QWORD v90[4];
  __CFString *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(a3 + 8 * v8);
      if ((_DWORD)v7 == (_DWORD)v6)
      {
        v12 = v7 + ((unint64_t)v7 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= (unint64_t)v7 + 1)
          v6 = v7 + 1;
        else
          v6 = v13;
        if (v6 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v10 = (char *)WTF::fastMalloc((WTF *)(8 * v6));
        memcpy(v10, v9, 8 * v7);
        if (v9)
        {
          if (v10 == v9)
          {
            LODWORD(v6) = 0;
            v10 = 0;
          }
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      else
      {
        v10 = v9;
      }
      *(_QWORD *)&v10[8 * v7] = v11;
      v7 = (v7 + 1);
      v8 = v7;
      v9 = v10;
      if (v7 >= (unint64_t)a2)
        goto LABEL_18;
    }
  }
  LODWORD(v7) = 0;
  v10 = 0;
LABEL_18:
  v14 = *((_QWORD *)this + 5);
  if (v14)
  {
    v15 = *((_QWORD *)this + 6);
    if (__ldaxr((unsigned __int8 *)v14))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v14))
    {
      goto LABEL_23;
    }
    MEMORY[0x186DAB1AC](v14);
LABEL_23:
    if (*(_QWORD *)(v14 + 24))
    {
      ++*(_QWORD *)(v14 + 8);
      v17 = __ldxr((unsigned __int8 *)v14);
      if (v17 == 1)
        goto LABEL_25;
    }
    else
    {
      v15 = 0;
      v18 = __ldxr((unsigned __int8 *)v14);
      if (v18 == 1)
      {
LABEL_25:
        if (!__stlxr(0, (unsigned __int8 *)v14))
        {
          if (!v15)
            goto LABEL_115;
LABEL_31:
          v83 = v15;
          if ((_DWORD)v7)
          {
            v19 = 8 * v7;
            v20 = v19;
            v21 = v10;
            while (1)
            {
              v22 = *(_QWORD *)v21;
              if (!*(_QWORD *)(*(_QWORD *)v21 + 16))
                break;
              v23 = *(_QWORD *)(v22 + 48);
              if (!*(_QWORD *)(v23 + 8))
                break;
              if ((unsigned __int8 **)v23 != WebGPU::Queue::device(this, a2))
                break;
              if (*(_DWORD *)(v22 + 40))
                break;
              v24 = *(id *)(v22 + 16);
              v25 = objc_msgSend(v24, "status");

              if (v25 > 1)
                break;
              v21 += 8;
              v20 -= 8;
              if (!v20)
                goto LABEL_39;
            }
            v34 = (__CFString *)*(id *)(v22 + 56);
            v35 = v34;
            v36 = CFSTR("Validation failure.");
            if (v34)
              v36 = v34;
            v37 = v36;

            MEMORY[0x186DAB230](v90, v37);
            v38 = *(_QWORD *)(v83 + 32);
            v39 = 32 * *(unsigned int *)(v83 + 44);
            v40 = v38 + v39;
            while (v39)
            {
              v41 = *(_DWORD *)(v40 - 8);
              v40 -= 32;
              v39 -= 32;
              if (!v41)
              {
                v42 = v38 + v39;
                if (!*(_BYTE *)(v42 + 16))
                {
                  v43 = v90[0];
                  v90[0] = 0;
                  *(_DWORD *)v42 = 1;
                  *(_QWORD *)(v42 + 8) = v43;
                  *(_BYTE *)(v42 + 16) = 1;
                }
                goto LABEL_57;
              }
            }
            v44 = *(_QWORD *)(v83 + 24);
            if (v44)
            {
              (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v44 + 16))(v44, 1, v90);
              v45 = *(_QWORD *)(v83 + 24);
              *(_QWORD *)(v83 + 24) = 0;
              if (v45)
                (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
            }
LABEL_57:
            v46 = (_DWORD *)v90[0];
            v90[0] = 0;
            if (v46)
            {
              if (*v46 == 2)
                WTF::StringImpl::destroy();
              else
                *v46 -= 2;
            }
            v90[0] = MEMORY[0x1E0C809B0];
            v90[1] = 3221225472;
            v90[2] = ___ZN6WebGPU5Queue6submitEON3WTF6VectorINSt3__117reference_wrapperINS_13CommandBufferEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke;
            v90[3] = &unk_1E0FD1D90;
            v29 = v37;
            v91 = v29;
            v50 = (void (**)(_QWORD, _QWORD))MEMORY[0x186DAB65C](v90);
            v51 = v10;
            do
            {
              v50[2](v50, *v51++);
              v19 -= 8;
            }
            while (v19);

            v52 = v91;
          }
          else
          {
LABEL_39:
            v26 = (void *)*((_QWORD *)this + 4);
            if (v26)
            {
              WebGPU::Queue::endEncoding((uint64_t)this, v26, *((void **)this + 2));
              WebGPU::Queue::commitMTLCommandBuffer((uint64_t)this, *((void **)this + 2));
              v27 = (void *)*((_QWORD *)this + 4);
              *((_QWORD *)this + 4) = 0;

              v28 = (void *)*((_QWORD *)this + 2);
              *((_QWORD *)this + 2) = 0;

            }
            objc_msgSend(MEMORY[0x1E0C99E10], "orderedSetWithCapacity:", v7);
            v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
            if ((_DWORD)v7)
            {
              v30 = (__CFString *)(8 * v7);
              v31 = v10;
              while (1)
              {
                v32 = *(_QWORD *)v31;
                v33 = *(id *)(*(_QWORD *)v31 + 16);
                if (!v33 || (-[__CFString containsObject:](v29, "containsObject:", v33) & 1) != 0)
                  break;
                -[__CFString addObject:](v29, "addObject:", v33);

                v31 += 8;
                v30 = (__CFString *)((char *)v30 - 8);
                if (!v30)
                  goto LABEL_68;
              }
              v47 = (__CFString *)*(id *)(v32 + 56);
              v48 = v47;
              v49 = CFSTR("Command buffer appears twice.");
              if (v47)
                v49 = v47;
              v30 = v49;

            }
            else
            {
              v30 = 0;
            }
LABEL_68:
            v88[0] = MEMORY[0x1E0C809B0];
            v88[1] = 3221225472;
            v88[2] = ___ZN6WebGPU5Queue6submitEON3WTF6VectorINSt3__117reference_wrapperINS_13CommandBufferEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke_2;
            v88[3] = &unk_1E0FD1D90;
            v52 = v30;
            v89 = v52;
            v53 = (void (**)(_QWORD, _QWORD))MEMORY[0x186DAB65C](v88);
            if ((_DWORD)v7)
            {
              v54 = 8 * v7;
              v55 = v10;
              do
              {
                v53[2](v53, *v55++);
                v54 -= 8;
              }
              while (v54);
            }

            if (v52)
            {
              MEMORY[0x186DAB230](v90, CFSTR("Command buffer appears twice."));
              v56 = *(_QWORD *)(v83 + 32);
              v57 = 32 * *(unsigned int *)(v83 + 44);
              v58 = v56 + v57;
              while (v57)
              {
                v59 = *(_DWORD *)(v58 - 8);
                v58 -= 32;
                v57 -= 32;
                if (!v59)
                {
                  v60 = v56 + v57;
                  if (!*(_BYTE *)(v60 + 16))
                  {
                    v61 = v90[0];
                    v90[0] = 0;
                    *(_DWORD *)v60 = 1;
                    *(_QWORD *)(v60 + 8) = v61;
                    *(_BYTE *)(v60 + 16) = 1;
                  }
                  goto LABEL_93;
                }
              }
              v70 = *(_QWORD *)(v83 + 24);
              if (v70)
              {
                (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v70 + 16))(v70, 1, v90);
                v71 = *(_QWORD *)(v83 + 24);
                *(_QWORD *)(v83 + 24) = 0;
                if (v71)
                  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              }
LABEL_93:
              v72 = (_DWORD *)v90[0];
              v90[0] = 0;
              if (v72)
              {
                if (*v72 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v72 -= 2;
              }
            }
            else
            {
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              v62 = v29;
              v63 = -[__CFString countByEnumeratingWithState:objects:count:](v62, "countByEnumeratingWithState:objects:count:", &v84, v90, 16);
              if (v63)
              {
                v64 = *(_QWORD *)v85;
                do
                {
                  for (i = 0; i != v63; ++i)
                  {
                    if (*(_QWORD *)v85 != v64)
                      objc_enumerationMutation(v62);
                    WebGPU::Queue::commitMTLCommandBuffer((uint64_t)this, *(void **)(*((_QWORD *)&v84 + 1) + 8 * i));
                  }
                  v63 = -[__CFString countByEnumeratingWithState:objects:count:](v62, "countByEnumeratingWithState:objects:count:", &v84, v90, 16);
                }
                while (v63);
              }

              objc_msgSend(MEMORY[0x1E0CC6A48], "sharedCaptureManager");
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v66, "isCapturing"))
              {
                v67 = WebGPU::GPUFrameCapture::submitCallsCaptured + 1 < WebGPU::GPUFrameCapture::maxSubmitCallsToCapture;
                if (WebGPU::GPUFrameCapture::submitCallsCaptured + 1 < WebGPU::GPUFrameCapture::maxSubmitCallsToCapture)
                  v68 = WebGPU::GPUFrameCapture::submitCallsCaptured + 1;
                else
                  v68 = 0;
                WebGPU::GPUFrameCapture::submitCallsCaptured = v68;

                if (!v67)
                {
                  objc_msgSend(MEMORY[0x1E0CC6A48], "sharedCaptureManager");
                  v69 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v69, "stopCapture");

                }
              }
              else
              {

              }
            }

          }
          v73 = *(unsigned __int8 **)v83;
          if (__ldaxr(*(unsigned __int8 **)v83))
          {
            __clrex();
          }
          else if (!__stxr(1u, v73))
          {
            goto LABEL_103;
          }
          MEMORY[0x186DAB1AC](v73);
LABEL_103:
          v75 = *((_QWORD *)v73 + 1);
          v76 = v75 - 1;
          *((_QWORD *)v73 + 1) = v75 - 1;
          if (v75 == 1)
          {
            v80 = *((_QWORD *)v73 + 2);
            v77 = (WebGPU::Device *)*((_QWORD *)v73 + 3);
            *((_QWORD *)v73 + 3) = 0;
            v78 = v80 != 0;
            LODWORD(v80) = __ldxr(v73);
            if ((_DWORD)v80 == 1)
            {
LABEL_105:
              if (!__stlxr(0, v73))
              {
                if (v76)
                  goto LABEL_115;
                goto LABEL_111;
              }
LABEL_110:
              WTF::Lock::unlockSlow((WTF::Lock *)v73);
              if (v76)
                goto LABEL_115;
LABEL_111:
              if (v77)
              {
                WebGPU::Device::~Device(v77);
                WTF::fastFree(v81, v82);
              }
              if (!v78)
                WTF::fastFree((WTF *)v73, a2);
              goto LABEL_115;
            }
          }
          else
          {
            v77 = 0;
            v78 = 1;
            v79 = __ldxr(v73);
            if (v79 == 1)
              goto LABEL_105;
          }
          __clrex();
          goto LABEL_110;
        }
LABEL_30:
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
        if (!v15)
          goto LABEL_115;
        goto LABEL_31;
      }
    }
    __clrex();
    goto LABEL_30;
  }
LABEL_115:
  if (v10)
    WTF::fastFree((WTF *)v10, a2);
}

void sub_18245C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  WTF *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v29;
  void *v30;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(a10, v29);
  if (v24)
  {
    WTF::fastFree(v24, v30);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void wgpuQueueWriteBuffer(WebGPU::Queue *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t v5;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int8 *v28;
  uint64_t v30;
  uint64_t v31;
  WebGPU::Device *v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  id v41;
  _DWORD *v42;
  _DWORD *v43;

  v5 = *((_QWORD *)a1 + 5);
  if (!v5)
    return;
  v11 = *((_QWORD *)a1 + 6);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x186DAB1AC](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 8);
    v13 = __ldxr((unsigned __int8 *)v5);
    if (v13 == 1)
      goto LABEL_8;
  }
  else
  {
    v11 = 0;
    v14 = __ldxr((unsigned __int8 *)v5);
    if (v14 == 1)
    {
LABEL_8:
      if (__stlxr(0, (unsigned __int8 *)v5))
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
        if (!v11)
          return;
      }
      else if (!v11)
      {
        return;
      }
      goto LABEL_15;
    }
  }
  __clrex();
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v11)
    return;
LABEL_15:
  if (*(_BYTE *)(a2 + 52) != 4 && !*(_QWORD *)(a2 + 16)
    || (v15 = *(_QWORD *)(a2 + 256), !*(_QWORD *)(v15 + 8))
    || (unsigned __int8 **)v15 != WebGPU::Queue::device(a1, (void *)a2)
    || *(_BYTE *)(a2 + 52) != 3
    || ((a5 | a3) & 3) != 0
    || (*(_DWORD *)(a2 + 48) & 8) == 0
    || __CFADD__(a3, a5)
    || a3 + a5 > objc_msgSend(*(id *)(a2 + 16), "length")
    || *(_BYTE *)(a2 + 52) != 4 && !*(_QWORD *)(a2 + 16)
    || (v17 = *(_QWORD *)(a2 + 256), !*(_QWORD *)(v17 + 8))
    || (unsigned __int8 **)v17 != WebGPU::Queue::device(a1, v16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v43;
    v42 = v43;
    v20 = *(_QWORD *)(v11 + 32);
    v21 = 32 * *(unsigned int *)(v11 + 44);
    v22 = v20 + v21;
    while (v21)
    {
      v23 = *(_DWORD *)(v22 - 8);
      v22 -= 32;
      v21 -= 32;
      if (!v23)
        goto LABEL_31;
    }
    v25 = *(_QWORD *)(v11 + 24);
    if (!v25)
      goto LABEL_36;
    goto LABEL_34;
  }
  if (!a5)
    goto LABEL_40;
  if (*(_BYTE *)(a2 + 52) == 4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v43;
    v42 = v43;
    v20 = *(_QWORD *)(v11 + 32);
    v21 = 32 * *(unsigned int *)(v11 + 44);
    v35 = v20 + v21;
    while (v21)
    {
      v36 = *(_DWORD *)(v35 - 8);
      v35 -= 32;
      v21 -= 32;
      if (!v36)
      {
LABEL_31:
        v24 = v20 + v21;
        if (!*(_BYTE *)(v24 + 16))
        {
          v42 = 0;
          *(_DWORD *)v24 = 1;
          *(_QWORD *)(v24 + 8) = v19;
          *(_BYTE *)(v24 + 16) = 1;
        }
        goto LABEL_36;
      }
    }
    v25 = *(_QWORD *)(v11 + 24);
    if (!v25)
      goto LABEL_36;
LABEL_34:
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v25 + 16))(v25, 1, &v42);
    v26 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
LABEL_36:
    v27 = v42;
    v42 = 0;
    if (v27)
    {
      if (*v27 == 2)
        WTF::StringImpl::destroy();
      else
        *v27 -= 2;
    }
    goto LABEL_40;
  }
  if (*((_QWORD *)a1 + 7) != *((_QWORD *)a1 + 8) || *((_QWORD *)a1 + 4))
    goto LABEL_57;
  v40 = objc_msgSend(*(id *)(a2 + 16), "storageMode");
  if (!v40)
  {
    v41 = objc_retainAutorelease(*(id *)(a2 + 16));
    memcpy((void *)(objc_msgSend(v41, "contents") + a3), a4, a5);

    goto LABEL_40;
  }
  if (v40 == 2)
LABEL_57:
    WebGPU::Queue::writeBuffer((uint64_t)a1, *(void **)(a2 + 16), a3, (uint64_t)a4, a5);
LABEL_40:
  v28 = *(unsigned __int8 **)v11;
  if (__ldaxr(*(unsigned __int8 **)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v28))
  {
    goto LABEL_44;
  }
  MEMORY[0x186DAB1AC](v28);
LABEL_44:
  v30 = *((_QWORD *)v28 + 1);
  v31 = v30 - 1;
  *((_QWORD *)v28 + 1) = v30 - 1;
  if (v30 != 1)
  {
    v32 = 0;
    v33 = 1;
    v34 = __ldxr(v28);
    if (v34 == 1)
      goto LABEL_46;
LABEL_59:
    __clrex();
LABEL_60:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
    if (v31)
      return;
    goto LABEL_61;
  }
  v37 = *((_QWORD *)v28 + 2);
  v32 = (WebGPU::Device *)*((_QWORD *)v28 + 3);
  *((_QWORD *)v28 + 3) = 0;
  v33 = v37 != 0;
  LODWORD(v37) = __ldxr(v28);
  if ((_DWORD)v37 != 1)
    goto LABEL_59;
LABEL_46:
  if (__stlxr(0, v28))
    goto LABEL_60;
  if (v31)
    return;
LABEL_61:
  if (v32)
  {
    WebGPU::Device::~Device(v32);
    WTF::fastFree(v38, v39);
  }
  if (!v33)
    WTF::fastFree((WTF *)v28, v18);
}

void sub_18245C6C4(_Unwind_Exception *a1)
{
  void *v1;
  unsigned __int8 **v2;
  void *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  WebGPU::Device *v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  void *v14;

  v5 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
LABEL_6:
    v7 = *((_QWORD *)v5 + 1);
    v8 = v7 - 1;
    *((_QWORD *)v5 + 1) = v7 - 1;
    if (v7 == 1)
    {
      v12 = *((_QWORD *)v5 + 2);
      v9 = (WebGPU::Device *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      v10 = v12 != 0;
      LODWORD(v12) = __ldxr(v5);
      if ((_DWORD)v12 == 1)
      {
LABEL_8:
        if (!__stlxr(0, v5))
        {
LABEL_13:
          if (!v8)
          {
            if (v9)
            {
              WebGPU::Device::~Device(v9);
              WTF::fastFree(v13, v14);
            }
            if (!v10)
              WTF::fastFree((WTF *)v5, v4);
          }
          _Unwind_Resume(a1);
        }
LABEL_12:
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
        goto LABEL_13;
      }
    }
    else
    {
      v9 = 0;
      v10 = 1;
      v11 = __ldxr(v5);
      if (v11 == 1)
        goto LABEL_8;
    }
    __clrex();
    goto LABEL_12;
  }
  MEMORY[0x186DAB1AC](v5);
  goto LABEL_6;
}

_DWORD *wgpuQueueSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 8), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_18245C87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_0::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v6;
  void *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E0FD1DC0;
  a1[1] = 0;
  if (!v2)
    return a1;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (v4)
    return a1;
  atomic_store(1u, v2);
  WebGPU::Queue::~Queue((WebGPU::Queue *)v2);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_0::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E0FD1DC0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, v3);
    WebGPU::Queue::~Queue((WebGPU::Queue *)v3);
    WTF::fastFree(v7, v8);
    v6 = this;
  }
  else
  {
LABEL_4:
    v6 = this;
  }
  return WTF::fastFree(v6, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_0::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = v3 + 1;
  *(_QWORD *)(v2 + 72) = v3 + 1;
  v7 = *(_QWORD *)(v2 + 80);
  result = (uint64_t *)(v2 + 80);
  v6 = v7;
  if (!v7)
    return result;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (v3 - (v4 << 32)) ^ ((unint64_t)(v3 - (v4 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 24 * v12);
  v14 = *v13;
  if (*v13 == v4)
  {
LABEL_6:
    if ((uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4)) == v13)
      return result;
    v16 = (WTF *)v13[1];
    v17 = *((unsigned int *)v13 + 5);
    v13[1] = 0;
    v13[2] = 0;
    v18 = *result;
    if (*result)
    {
      v18 += 24 * *(unsigned int *)(v18 - 4);
      if ((uint64_t *)v18 == v13)
        goto LABEL_22;
    }
    if ((uint64_t *)v18 == v13)
      goto LABEL_22;
    *v13 = -2;
    ++*(_DWORD *)(*result - 16);
    if (*result)
    {
      --*(_DWORD *)(*result - 12);
      v19 = *result;
      if (!*result)
        goto LABEL_22;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      v19 = *result;
      if (!*result)
      {
LABEL_22:
        if ((_DWORD)v17)
        {
          v23 = 0;
          v24 = 8 * v17;
          do
          {
            (*(void (**)(_QWORD))(**(_QWORD **)((char *)v16 + v23) + 16))(*(_QWORD *)((char *)v16 + v23));
            v23 += 8;
          }
          while (v24 != v23);
          v25 = (uint64_t **)v16;
          do
          {
            result = *v25;
            *v25 = 0;
            if (result)
              result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
            ++v25;
            v24 -= 8;
          }
          while (v24);
        }
        if (v16)
          return (uint64_t *)WTF::fastFree(v16, a2);
        return result;
      }
    }
    v20 = 6 * *(_DWORD *)(v19 - 12);
    v21 = *(_DWORD *)(v19 - 4);
    if (v20 < v21 && v21 >= 9)
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(result, v21 >> 1, 0);
    goto LABEL_22;
  }
  v15 = 1;
  while (v14 != -1)
  {
    v12 = (v12 + v15) & v8;
    v13 = (uint64_t *)(v6 + 24 * v12);
    v14 = *v13;
    ++v15;
    if (*v13 == v4)
      goto LABEL_6;
  }
  return result;
}

void sub_18245CB94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_18245CBA8(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)((char *)v2 + v5);
    *(_QWORD *)((char *)v2 + v5) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v5 += 8;
    if (v3 == v5)
    {
      if (!v2)
        _Unwind_Resume(exception_object);
      WTF::fastFree(v2, a2);
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  WTF **v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t *result;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v58;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v9 = v7 + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v9 = v7 + 16;
    if (!a2)
      goto LABEL_7;
  }
  v10 = a2;
  v11 = (_QWORD *)(v7 + 24);
  do
  {
    *(v11 - 1) = -1;
    *v11 = 0;
    v11[1] = 0;
    v11 += 3;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v54 = v5;
    v55 = v4;
    do
    {
      v15 = (uint64_t *)(v4 + 24 * v12);
      v16 = *v15;
      if (*v15 != -2)
      {
        if (v16 == -1)
        {
          v17 = v4 + 24 * v12;
          v18 = (WTF **)(v17 + 8);
          v19 = *(unsigned int *)(v17 + 20);
          if ((_DWORD)v19)
          {
            v20 = *v18;
            v21 = 8 * v19;
            do
            {
              v22 = *(_QWORD *)v20;
              *(_QWORD *)v20 = 0;
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              v20 = (WTF *)((char *)v20 + 8);
              v21 -= 8;
            }
            while (v21);
          }
          v25 = *v18;
          if (*v18)
          {
            *v18 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            WTF::fastFree(v25, v8);
          }
        }
        else
        {
          v23 = *a1;
          v58 = v13;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v26 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v24 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v32 = (uint64_t *)(v23 + 24 * v29);
            v29 = (v29 + v30++) & v24;
          }
          while (*v32 != -1);
          v33 = v31;
          v34 = v23 + 24 * v31;
          v37 = *(_DWORD *)(v34 + 20);
          v36 = (_DWORD *)(v34 + 20);
          v35 = v37;
          v38 = (WTF **)(v36 - 3);
          if (v37)
          {
            v39 = *v38;
            v40 = 8 * v35;
            do
            {
              v41 = *(_QWORD *)v39;
              *(_QWORD *)v39 = 0;
              if (v41)
                (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
              v39 = (WTF *)((char *)v39 + 8);
              v40 -= 8;
            }
            while (v40);
          }
          v42 = *v38;
          if (*v38)
          {
            *v38 = 0;
            *(_DWORD *)(v23 + 24 * v33 + 16) = 0;
            WTF::fastFree(v42, v8);
          }
          *v32 = *v15;
          v4 = v55;
          v43 = v55 + 24 * v12;
          *v38 = 0;
          *(_QWORD *)(v36 - 1) = 0;
          v45 = *(WTF **)(v43 + 8);
          v44 = v43 + 8;
          *(_QWORD *)v44 = 0;
          *v38 = v45;
          v46 = *(_DWORD *)(v44 + 8);
          *(_DWORD *)(v44 + 8) = 0;
          *(_DWORD *)(v23 + 24 * v33 + 16) = v46;
          v47 = *(_DWORD *)(v44 + 12);
          *(_DWORD *)(v44 + 12) = 0;
          *v36 = v47;
          v48 = *(unsigned int *)(v44 + 12);
          if ((_DWORD)v48)
          {
            v49 = *(uint64_t **)v44;
            v50 = 8 * v48;
            do
            {
              v51 = *v49;
              *v49 = 0;
              if (v51)
                (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
              ++v49;
              v50 -= 8;
            }
            while (v50);
          }
          v52 = *(WTF **)v44;
          if (*(_QWORD *)v44)
          {
            *(_QWORD *)v44 = 0;
            *(_DWORD *)(v44 + 8) = 0;
            WTF::fastFree(v52, v8);
          }
          v13 = v58;
          if (v15 == a3)
            v13 = v32;
          v14 = v54;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_1::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v6;
  void *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E0FD1DE8;
  a1[1] = 0;
  if (!v2)
    return a1;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (v4)
    return a1;
  atomic_store(1u, v2);
  WebGPU::Queue::~Queue((WebGPU::Queue *)v2);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_1::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E0FD1DE8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, v3);
    WebGPU::Queue::~Queue((WebGPU::Queue *)v3);
    WTF::fastFree(v7, v8);
    v6 = this;
  }
  else
  {
LABEL_4:
    v6 = this;
  }
  return WTF::fastFree(v6, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_1::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = v3 + 1;
  *(_QWORD *)(v2 + 64) = v3 + 1;
  v7 = *(_QWORD *)(v2 + 88);
  result = (uint64_t *)(v2 + 88);
  v6 = v7;
  if (!v7)
    return result;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (v3 - (v4 << 32)) ^ ((unint64_t)(v3 - (v4 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 24 * v12);
  v14 = *v13;
  if (*v13 == v4)
  {
LABEL_6:
    if ((uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4)) == v13)
      return result;
    v16 = (WTF *)v13[1];
    v17 = *((unsigned int *)v13 + 5);
    v13[1] = 0;
    v13[2] = 0;
    v18 = *result;
    if (*result)
    {
      v18 += 24 * *(unsigned int *)(v18 - 4);
      if ((uint64_t *)v18 == v13)
        goto LABEL_22;
    }
    if ((uint64_t *)v18 == v13)
      goto LABEL_22;
    *v13 = -2;
    ++*(_DWORD *)(*result - 16);
    if (*result)
    {
      --*(_DWORD *)(*result - 12);
      v19 = *result;
      if (!*result)
        goto LABEL_22;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      v19 = *result;
      if (!*result)
      {
LABEL_22:
        if ((_DWORD)v17)
        {
          v23 = 0;
          v24 = 8 * v17;
          do
          {
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)((char *)v16 + v23) + 16))(*(_QWORD *)((char *)v16 + v23), 0);
            v23 += 8;
          }
          while (v24 != v23);
          v25 = (uint64_t **)v16;
          do
          {
            result = *v25;
            *v25 = 0;
            if (result)
              result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
            ++v25;
            v24 -= 8;
          }
          while (v24);
        }
        if (v16)
          return (uint64_t *)WTF::fastFree(v16, a2);
        return result;
      }
    }
    v20 = 6 * *(_DWORD *)(v19 - 12);
    v21 = *(_DWORD *)(v19 - 4);
    if (v20 < v21 && v21 >= 9)
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(result, v21 >> 1, 0);
    goto LABEL_22;
  }
  v15 = 1;
  while (v14 != -1)
  {
    v12 = (v12 + v15) & v8;
    v13 = (uint64_t *)(v6 + 24 * v12);
    v14 = *v13;
    ++v15;
    if (*v13 == v4)
      goto LABEL_6;
  }
  return result;
}

void sub_18245D1E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_18245D1FC(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)((char *)v2 + v5);
    *(_QWORD *)((char *)v2 + v5) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v5 += 8;
    if (v3 == v5)
    {
      if (!v2)
        _Unwind_Resume(exception_object);
      WTF::fastFree(v2, a2);
      _Unwind_Resume(exception_object);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E0FD1E10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E0FD1E10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_18245D30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)>,void,WGPUQueueWorkDoneStatus>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E0FD1E38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)>,void,WGPUQueueWorkDoneStatus>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E0FD1E38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)>,void,WGPUQueueWorkDoneStatus>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_18245D3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkScheduled(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E0FD1E60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkScheduled(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E0FD1E60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkScheduled(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

char *WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v29 = *(WTF **)a1;
        return (char *)v29 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v12 = WTF::fastMalloc((WTF *)(8 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        v14 = 8 * v6;
        do
        {
          v15 = *(_QWORD *)((char *)v5 + v13);
          *(_QWORD *)((char *)v5 + v13) = 0;
          *(_QWORD *)(v12 + v13) = v15;
          v16 = *(_QWORD *)((char *)v5 + v13);
          *(_QWORD *)((char *)v5 + v13) = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          v13 += 8;
        }
        while (v14 != v13);
        v29 = *(WTF **)a1;
        if (v5)
        {
          if (v29 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v29 = *(WTF **)a1;
        }
        return (char *)v29 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x18245D654);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v20 = a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    if (v20 >> 29)
      goto LABEL_39;
    v21 = *(unsigned int *)(a1 + 12);
    v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + 8) = v20;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v21)
    {
      v24 = (_QWORD *)v22;
      v25 = 8 * v21;
      v26 = v5;
      do
      {
        v27 = *(_QWORD *)v26;
        *(_QWORD *)v26 = 0;
        *v24 = v27;
        v28 = *(_QWORD *)v26;
        *(_QWORD *)v26 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        ++v24;
        v26 = (WTF *)((char *)v26 + 8);
        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Detail::CallableWrapper<wgpuQueueOnSubmittedWorkDone::$_0,void,WGPUQueueWorkDoneStatus>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16));
}

void sub_18245D758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18245D804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD1EA0[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

id WebGPU::RenderBundle::RenderBundle(uint64_t a1, void *a2, _DWORD **a3, __int128 *a4, uint64_t a5, unsigned __int8 **a6)
{
  id v11;
  unsigned __int8 *v12;
  int v14;
  _DWORD *v15;
  id result;
  void *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  int v34;

  v11 = a2;
  *(_DWORD *)a1 = 1;
  v12 = *a6;
  if (__ldaxr(*a6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v12);
LABEL_5:
  ++*((_QWORD *)v12 + 1);
  v14 = __ldxr(v12);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v12))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  *(_QWORD *)(a1 + 8) = a6;
  v15 = *a3;
  if (*a3)
    ++*v15;
  *(_QWORD *)(a1 + 16) = v15;
  result = v11;
  v17 = result;
  *(_QWORD *)(a1 + 24) = result;
  v18 = *a4;
  v19 = a4[2];
  *(_OWORD *)(a1 + 48) = a4[1];
  *(_OWORD *)(a1 + 64) = v19;
  *(_OWORD *)(a1 + 32) = v18;
  v20 = (_QWORD *)(a1 + 80);
  v21 = *((_QWORD *)a4 + 3);
  if (!v21)
  {
    *v20 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    goto LABEL_22;
  }
  v22 = *((_QWORD *)a4 + 2);
  *v20 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = v22;
  if (!v22)
  {
LABEL_22:
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = a5;
    *(_QWORD *)(a1 + 112) = 0x3F80000000000000;
LABEL_27:

    return (id)a1;
  }
  if (!(v22 >> 30))
  {
    v23 = WTF::fastMalloc((WTF *)(4 * v22));
    *(_DWORD *)(a1 + 88) = v22;
    *(_QWORD *)(a1 + 80) = v23;
    v24 = (v22 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v24 < 7)
    {
      v25 = (_DWORD *)v23;
      v26 = (int *)v21;
    }
    else
    {
      v25 = (_DWORD *)v23;
      v26 = (int *)v21;
      if ((unint64_t)(v23 - v21) >= 0x20)
      {
        v27 = v24 + 1;
        v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
        v25 = (_DWORD *)(v23 + v28);
        v26 = (int *)(v21 + v28);
        v29 = (__int128 *)(v21 + 16);
        v30 = (_OWORD *)(v23 + 16);
        v31 = v27 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v32 = *v29;
          *(v30 - 1) = *(v29 - 1);
          *v30 = v32;
          v29 += 2;
          v30 += 2;
          v31 -= 8;
        }
        while (v31);
        if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_25;
      }
    }
    do
    {
      v33 = *v26++;
      *v25++ = v33;
    }
    while (v26 != (int *)(v21 + 4 * v22));
LABEL_25:
    v34 = *(_DWORD *)(a1 + 92);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = a5;
    *(_QWORD *)(a1 + 112) = 0x3F80000000000000;
    if (v34)
      *(_QWORD *)(a1 + 56) = v23;
    goto LABEL_27;
  }
  __break(0xC471u);
  return result;
}

void sub_18245DB0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 ***v3;
  void *v5;
  WebGPU::RenderBundleEncoder *v6;

  v6 = *(WebGPU::RenderBundleEncoder **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v6)
    WTF::RefCounted<WebGPU::RenderBundleEncoder>::deref(v6);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v3, v5);

  _Unwind_Resume(a1);
}

void sub_18245DB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WebGPU::RenderBundle *WebGPU::RenderBundle::RenderBundle(WebGPU::RenderBundle *this, unsigned __int8 **a2, NSString *a3)
{
  NSString *v5;
  unsigned __int8 *v6;
  int v8;

  v5 = a3;
  *(_DWORD *)this = 1;
  v6 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v6);
LABEL_5:
  ++*((_QWORD *)v6 + 1);
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 12) = v5;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0x3F80000000000000;

  return this;
}

void sub_18245DC04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundle::~RenderBundle(WebGPU::RenderBundle *this)
{
  void *v2;
  WTF *v3;
  void *v4;
  WebGPU::RenderBundleEncoder *v5;
  WTF *v6;
  void *v7;
  void *v8;

  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, v2);
  }

  v5 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v5)
    goto LABEL_6;
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
LABEL_6:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 1, v4);
    return;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v5);
  WTF::fastFree(v6, v7);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 1, v8);
}

void WebGPU::RenderBundle::setLabel(uint64_t a1, _QWORD *a2)
{
  const __CFString *v3;
  void *v4;
  void *v5;
  __CFString *v6;

  if (*a2)
    v3 = (const __CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  v6 = (__CFString *)v3;
  objc_msgSend(*(id *)(a1 + 24), "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "indirectCommandBuffer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setLabel:", v6);

}

void sub_18245DD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_18245DD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundle::updateMinMaxDepths(WebGPU::RenderBundle *this, float a2, float a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  _DWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*((float *)this + 28) != a2 || *((float *)this + 29) != a3)
  {
    *((float *)this + 28) = a2;
    *((float *)this + 29) = a3;
    *(float *)v15 = a2;
    *(float *)&v15[1] = a3;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = *((id *)this + 3);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v11;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v4);
          v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
          objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "fragmentDynamicOffsetsBuffer", (_QWORD)v10);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          WebGPU::Queue::writeBuffer(v8, v9, 0, (uint64_t)v15, 8uLL);

          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

  }
}

void sub_18245DE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL WebGPU::RenderBundle::validateRenderPass(_BOOL8 result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 && !*(_DWORD *)(result + 72))
    return 0;
  if (a3 && !*(_DWORD *)(result + 76))
    return 0;
  v6 = *(_QWORD *)(result + 48);
  if (v6 != *(_QWORD *)(a4 + 16))
    return 0;
  v7 = 0;
  if (!v6)
  {
LABEL_14:
    if (*(_QWORD *)(a4 + 32) && (v11 = *a6) != 0)
    {
      if (*(_DWORD *)(v11 + 40) == *(_DWORD *)(result + 64))
      {
        v7 = *(_DWORD *)(*(_QWORD *)(v11 + 96) + 32);
        return *(_DWORD *)(result + 68) == v7;
      }
    }
    else if (!*(_DWORD *)(result + 64))
    {
      return *(_DWORD *)(result + 68) == v7;
    }
    return 0;
  }
  v8 = 0;
  while (v8 < *(unsigned int *)(a5 + 12))
  {
    v9 = *(_DWORD *)(*(_QWORD *)(result + 56) + 4 * v8);
    v10 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v8);
    if (v10)
    {
      if (v9 != *(_DWORD *)(v10 + 40))
        return 0;
      v7 = *(_DWORD *)(*(_QWORD *)(v10 + 96) + 32);
      if (v6 == ++v8)
        goto LABEL_14;
    }
    else
    {
      if (v9)
        return 0;
      if (v6 == ++v8)
        goto LABEL_14;
    }
  }
  __break(0xC471u);
  return result;
}

_DWORD *wgpuRenderBundleReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::RenderBundle *wgpuRenderBundleRelease(WebGPU::RenderBundle *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderBundle::~RenderBundle(result);
    return (WebGPU::RenderBundle *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuRenderBundleSetLabel(uint64_t a1, char *__s)
{
  _DWORD *result;
  _DWORD *v4;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  WebGPU::RenderBundle::setLabel(a1, &v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

void sub_18245E058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebGPU::Buffer *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS17_EEEDcSZ_DpT0_(WebGPU::Buffer *result, WebGPU::Buffer **a2, WebGPU::Buffer **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebGPU::Buffer *v6;
  WebGPU::Buffer *v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      if (*a3)
        ++*(_DWORD *)v6;
      result = *a2;
      *a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebGPU::Buffer::~Buffer(result, a2);
          return (WebGPU::Buffer *)WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      return result;
    }
    result = (WebGPU::Buffer *)((uint64_t (*)(char *, uint64_t))off_1E0FD1EA0[v5])(&v10, v4);
  }
  v7 = *a3;
  if (*a3)
    ++*(_DWORD *)v7;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WebGPU::TextureView *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS17_EEEDcSZ_DpT0_(WebGPU::TextureView *result, WebGPU::TextureView **a2, WebGPU::TextureView **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebGPU::TextureView *v6;
  WebGPU::TextureView *v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
        ++*(_DWORD *)v6;
      result = *a2;
      *a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebGPU::TextureView::~TextureView(result, a2);
          return (WebGPU::TextureView *)WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      return result;
    }
    result = (WebGPU::TextureView *)((uint64_t (*)(char *, uint64_t))off_1E0FD1EA0[v5])(&v10, v4);
  }
  v7 = *a3;
  if (*a3)
    ++*(_DWORD *)v7;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

WebGPU::ExternalTexture *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS17_EEEDcSZ_DpT0_(WebGPU::ExternalTexture *result, WebGPU::ExternalTexture **a2, WebGPU::ExternalTexture **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebGPU::ExternalTexture *v6;
  WebGPU::ExternalTexture *v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v6 = *a3;
      if (*a3)
        ++*(_DWORD *)v6;
      result = *a2;
      *a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebGPU::ExternalTexture::~ExternalTexture(result, a2);
          return (WebGPU::ExternalTexture *)WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      return result;
    }
    result = (WebGPU::ExternalTexture *)((uint64_t (*)(char *, uint64_t))off_1E0FD1EA0[v5])(&v10, v4);
  }
  v7 = *a3;
  if (*a3)
    ++*(_DWORD *)v7;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

WebGPU::RenderBundleEncoder *WTF::RefCounted<WebGPU::RenderBundleEncoder>::deref(WebGPU::RenderBundleEncoder *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderBundleEncoder::~RenderBundleEncoder(result);
    return (WebGPU::RenderBundleEncoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_18245E538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned long long,WebGPU::IndexBufferAndIndexData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::IndexBufferAndIndexData>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 88 * i) != -2)
        {
          v6 = v3 + 88 * i;
          v7 = *(unsigned int **)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(WebGPU::RenderBundleEncoder *this, NSString *a2)
{
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v20;

  v3 = a2;
  if (!*((_BYTE *)this + 386))
    goto LABEL_6;
  v4 = *((_QWORD *)this + 37);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_BYTE *)(*(_QWORD *)(v5 + 152) + 76))
      {
        v6 = 0;

        if (v6)
        {
LABEL_6:
          v7 = 0;
          goto LABEL_21;
        }
      }
      else
      {
        v8 = *(id *)(v5 + 16);

        if (v8)
          goto LABEL_6;
      }
    }
  }
  v9 = *((_QWORD *)this + 1);
  MEMORY[0x186DAB230](&v20, v3);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = 32 * *(unsigned int *)(v9 + 44);
  v12 = v10 + v11;
  while (v11)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v12 -= 32;
    v11 -= 32;
    if (!v13)
    {
      v14 = v10 + v11;
      if (!*(_BYTE *)(v14 + 16))
      {
        v15 = v20;
        v20 = 0;
        *(_DWORD *)v14 = 1;
        *(_QWORD *)(v14 + 8) = v15;
        *(_BYTE *)(v14 + 16) = 1;
      }
      goto LABEL_16;
    }
  }
  v16 = *(_QWORD *)(v9 + 24);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 16))(v16, 1, &v20);
    v17 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
LABEL_16:
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (*v18 == 2)
      WTF::StringImpl::destroy();
    else
      *v18 -= 2;
  }
  v7 = 1;
LABEL_21:

  return v7;
}

void sub_18245E8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void WebGPU::Device::createRenderBundleEncoder(uint64_t a1@<X0>, __int128 *a2@<X1>, WebGPU::RenderBundleEncoder *a3@<X8>)
{
  WebGPU::RenderBundleEncoder *v5;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  NSString *v31;
  WebGPU::RenderBundleEncoder *v32;
  uint64_t v33;
  id v34;
  unsigned __int8 *v35;
  _DWORD *v37;
  int v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  NSString *v57;
  _DWORD *v58;
  WebGPU::RenderBundleEncoder *v59;
  int v60;
  int v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  id v69;
  _DWORD *v70;

  if (*(_QWORD *)a2 || !*(_QWORD *)(a1 + 8))
  {
    v5 = (WebGPU::RenderBundleEncoder *)WTF::fastMalloc((WTF *)0x188);
    WebGPU::RenderBundleEncoder::RenderBundleEncoder(v5, (unsigned __int8 **)a1, CFSTR("createRenderBundleEncoder: invalid device"));
    *(_QWORD *)a3 = v5;
    return;
  }
  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setInheritBuffers:", 0);
  objc_msgSend(v7, "setInheritPipelineState:", 0);
  objc_msgSend(v7, "setMaxFragmentBufferBindCount:", 1);
  v8 = *((_QWORD *)a2 + 2);
  v9 = *(unsigned int *)(a1 + 184);
  if (v8 > v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("descriptor.colorFormatCount(%zu) > limits().maxColorAttachments(%u)"), *((_QWORD *)a2 + 2), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v70, v10);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = 32 * *(unsigned int *)(a1 + 44);
    v13 = v11 + v12;
    while (v12)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v13 -= 32;
      v12 -= 32;
      if (!v14)
      {
        v15 = v11 + v12;
        if (!*(_BYTE *)(v15 + 16))
        {
          v16 = (uint64_t)v70;
          v70 = 0;
          *(_DWORD *)v15 = 1;
          *(_QWORD *)(v15 + 8) = v16;
          *(_BYTE *)(v15 + 16) = 1;
        }
        goto LABEL_30;
      }
    }
    v28 = *(_QWORD *)(a1 + 24);
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v28 + 16))(v28, 1, &v70);
      v29 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
LABEL_30:
    v30 = v70;
    v70 = 0;
    if (v30)
    {
      if (*v30 == 2)
        WTF::StringImpl::destroy();
      else
        *v30 -= 2;
    }
LABEL_34:
    v31 = v10;
    v32 = (WebGPU::RenderBundleEncoder *)WTF::fastMalloc((WTF *)0x188);
    WebGPU::RenderBundleEncoder::RenderBundleEncoder(v32, (unsigned __int8 **)a1, v31);
    *(_QWORD *)a3 = v32;

    goto LABEL_85;
  }
  if (v8)
  {
    v17 = 0;
    v18 = 0;
    v19 = *(_DWORD *)(a1 + 188);
    do
    {
      v20 = *((_QWORD *)a2 + 3);
      v21 = *(unsigned int *)(v20 + 4 * v18);
      if ((_DWORD)v21)
      {
        if (!WebGPU::Texture::isColorRenderableFormat(*(_DWORD *)(v20 + 4 * v18), a1))
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("createRenderBundleEncoder - colorAttachment[%zu] with format %d is not renderable"), v18, v21);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          MEMORY[0x186DAB230](&v70, v10);
          WebGPU::Device::generateAValidationError(a1, (uint64_t *)&v70);
          v37 = v70;
          v70 = 0;
          if (v37)
          {
            if (*v37 == 2)
              WTF::StringImpl::destroy();
            else
              *v37 -= 2;
          }
          goto LABEL_34;
        }
        v22 = WebGPU::Texture::renderTargetPixelByteAlignment(v21);
        v23 = WebGPU::Texture::renderTargetPixelByteCost(v21);
        if (v17 % v22)
          v24 = v22 - v17 % v22;
        else
          v24 = 0;
        v17 += v23 + v24;
        if (v17 > v19)
        {
          MEMORY[0x186DAB230](&v70, CFSTR("createRenderBundleEncoder - bytesPerSample > maxColorAttachmentBytesPerSample"));
          WebGPU::Device::generateAValidationError(a1, (uint64_t *)&v70);
          v25 = v70;
          v70 = 0;
          if (v25)
          {
            if (*v25 == 2)
              WTF::StringImpl::destroy();
            else
              *v25 -= 2;
          }
          v59 = (WebGPU::RenderBundleEncoder *)WTF::fastMalloc((WTF *)0x188);
          WebGPU::RenderBundleEncoder::RenderBundleEncoder(v59, (unsigned __int8 **)a1, CFSTR("createRenderBundleEncoder - bytesPerSample > maxColorAttachmentBytesPerSample"));
          *(_QWORD *)a3 = v59;
          goto LABEL_85;
        }
      }
      ++v18;
    }
    while (v8 != v18);
  }
  v26 = *((_DWORD *)a2 + 8);
  if (v26)
  {
    if ((v26 - 38) >= 6)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("createRenderBundleEncoder - provided depthStencilFormat %d is not a depth or stencil format"), *((unsigned int *)a2 + 8));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x186DAB230](&v70, v10);
      WebGPU::Device::generateAValidationError(a1, (uint64_t *)&v70);
      v27 = v70;
      v70 = 0;
      if (v27)
      {
        if (*v27 == 2)
          WTF::StringImpl::destroy();
        else
          *v27 -= 2;
      }
      goto LABEL_34;
    }
  }
  else if (!*((_QWORD *)a2 + 2))
  {
    MEMORY[0x186DAB230](&v70, CFSTR("createRenderBundleEncoder - zero color and depth-stencil formats provided"));
    WebGPU::Device::generateAValidationError(a1, (uint64_t *)&v70);
    v58 = v70;
    v70 = 0;
    if (v58)
    {
      if (*v58 == 2)
        WTF::StringImpl::destroy();
      else
        *v58 -= 2;
    }
    WebGPU::RenderBundleEncoder::createInvalid(a3, (unsigned __int8 **)a1, v57);
    goto LABEL_85;
  }
  v69 = v7;
  v33 = WTF::fastMalloc((WTF *)0x188);
  v34 = v69;
  *(_DWORD *)v33 = 1;
  *(_BYTE *)(v33 + 4) = 0;
  v35 = *(unsigned __int8 **)a1;
  if (__ldaxr(*(unsigned __int8 **)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v35))
  {
    goto LABEL_43;
  }
  MEMORY[0x186DAB1AC](v35);
LABEL_43:
  ++*((_QWORD *)v35 + 1);
  v38 = __ldxr(v35);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, v35))
LABEL_47:
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
  *(_QWORD *)(v33 + 8) = a1;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_OWORD *)(v33 + 32) = 0u;
  *(_OWORD *)(v33 + 48) = 0u;
  *(_OWORD *)(v33 + 64) = 0u;
  v39 = v34;
  *(_QWORD *)(v33 + 168) = 0;
  *(_QWORD *)(v33 + 80) = v39;
  *(_OWORD *)(v33 + 88) = 0u;
  *(_OWORD *)(v33 + 104) = 0u;
  *(_OWORD *)(v33 + 120) = 0u;
  *(_OWORD *)(v33 + 136) = 0u;
  *(_DWORD *)(v33 + 152) = 0;
  *(_QWORD *)(v33 + 160) = 3;
  *(_QWORD *)(v33 + 176) = 0;
  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v40 = objc_claimAutoreleasedReturnValue();
  *(_OWORD *)(v33 + 192) = 0u;
  *(_QWORD *)(v33 + 184) = v40;
  *(_OWORD *)(v33 + 208) = 0u;
  *(_BYTE *)(v33 + 224) = 0;
  v41 = (uint64_t *)(v33 + 224);
  *(_BYTE *)(v33 + 232) = 0;
  *(_OWORD *)(v33 + 240) = 0u;
  *(_OWORD *)(v33 + 256) = 0u;
  *(_OWORD *)(v33 + 272) = 0u;
  *(_OWORD *)(v33 + 288) = 0u;
  *(_QWORD *)(v33 + 304) = 0;
  v42 = *a2;
  v43 = a2[1];
  *(_OWORD *)(v33 + 344) = a2[2];
  *(_OWORD *)(v33 + 328) = v43;
  *(_OWORD *)(v33 + 312) = v42;
  v44 = (_QWORD *)(v33 + 360);
  v45 = *((_QWORD *)a2 + 3);
  if (!v45)
  {
    *v44 = 0;
    *(_QWORD *)(v33 + 368) = 0;
    goto LABEL_58;
  }
  v46 = *((_QWORD *)a2 + 2);
  *v44 = 0;
  *(_QWORD *)(v33 + 368) = 0;
  *(_DWORD *)(v33 + 372) = v46;
  if (!v46)
  {
LABEL_58:
    *(_QWORD *)(v33 + 376) = 0;
    *(_WORD *)(v33 + 384) = 256;
    *(_BYTE *)(v33 + 386) = 0;
    *(_DWORD *)(v33 + 388) = -1;
LABEL_72:
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v62 = objc_claimAutoreleasedReturnValue();
    v63 = *(void **)(v33 + 256);
    *(_QWORD *)(v33 + 256) = v62;

    if (*(_BYTE *)(v33 + 232))
    {
      v65 = *v41;
      *v41 = 0;
      if (v65)
      {
        v66 = *(unsigned int *)(v65 - 4);
        if ((_DWORD)v66)
        {
          v67 = v65 + 8;
          do
          {
            if (*(_DWORD *)(v67 - 8) != -2)
            {
              v68 = *(WTF **)v67;
              if (*(_QWORD *)v67)
              {
                *(_QWORD *)v67 = 0;
                *(_DWORD *)(v67 + 8) = 0;
                WTF::fastFree(v68, v64);
              }
            }
            v67 += 24;
            --v66;
          }
          while (v66);
        }
        WTF::fastFree((WTF *)(v65 - 16), v64);
      }
    }
    else
    {
      *(_QWORD *)(v33 + 224) = 0;
      *(_BYTE *)(v33 + 232) = 1;
    }

    *(_QWORD *)a3 = v33;
LABEL_85:

    return;
  }
  if (!(v46 >> 30))
  {
    v47 = WTF::fastMalloc((WTF *)(4 * v46));
    *(_DWORD *)(v33 + 368) = v46;
    *(_QWORD *)(v33 + 360) = v47;
    v48 = (v46 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v48 < 7)
    {
      v49 = (_DWORD *)v47;
      v50 = (int *)v45;
    }
    else
    {
      v49 = (_DWORD *)v47;
      v50 = (int *)v45;
      if ((unint64_t)(v47 - v45) >= 0x20)
      {
        v51 = v48 + 1;
        v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        v49 = (_DWORD *)(v47 + v52);
        v50 = (int *)(v45 + v52);
        v53 = (__int128 *)(v45 + 16);
        v54 = (_OWORD *)(v47 + 16);
        v55 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v56 = *v53;
          *(v54 - 1) = *(v53 - 1);
          *v54 = v56;
          v53 += 2;
          v54 += 2;
          v55 -= 8;
        }
        while (v55);
        if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_70:
          v61 = *(_DWORD *)(v33 + 372);
          *(_QWORD *)(v33 + 376) = 0;
          *(_WORD *)(v33 + 384) = 256;
          *(_BYTE *)(v33 + 386) = 0;
          *(_DWORD *)(v33 + 388) = -1;
          if (v61)
            *(_QWORD *)(v33 + 336) = v47;
          goto LABEL_72;
        }
      }
    }
    do
    {
      v60 = *v50++;
      *v49++ = v60;
    }
    while (v50 != (int *)(v45 + 4 * v46));
    goto LABEL_70;
  }
  __break(0xC471u);
}

void sub_18245F008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18245F320(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::createInvalid(WebGPU::RenderBundleEncoder *this, unsigned __int8 **a2, NSString *a3)
{
  __CFString *v5;
  WebGPU::RenderBundleEncoder *v6;

  v5 = CFSTR("createRenderBundleEncoder - zero color and depth-stencil formats provided");
  v6 = (WebGPU::RenderBundleEncoder *)WTF::fastMalloc((WTF *)0x188);
  WebGPU::RenderBundleEncoder::RenderBundleEncoder(v6, a2, CFSTR("createRenderBundleEncoder - zero color and depth-stencil formats provided"));
  *(_QWORD *)this = v6;

}

void sub_18245F390(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);

  _Unwind_Resume(a1);
}

void sub_18245F3B0(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

uint64_t *std::optional<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>::~optional(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  if (*((_BYTE *)a1 + 8))
  {
    v3 = *a1;
    if (*a1)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = v3 + 8;
        do
        {
          if (*(_DWORD *)(v5 - 8) != -2)
          {
            v6 = *(WTF **)v5;
            if (*(_QWORD *)v5)
            {
              *(_QWORD *)v5 = 0;
              *(_DWORD *)(v5 + 8) = 0;
              WTF::fastFree(v6, a2);
            }
          }
          v5 += 24;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebGPU::RenderBundleEncoder::BufferAndOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(void ***)a1;
    v5 = 40 * v3;
    do
    {
      v6 = *v4;
      v4 += 5;

      v5 -= 40;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WebGPU::RenderBundleEncoder *WebGPU::RenderBundleEncoder::RenderBundleEncoder(WebGPU::RenderBundleEncoder *this, unsigned __int8 **a2, NSString *a3)
{
  NSString *v5;
  unsigned __int8 *v6;
  int v8;

  v5 = a3;
  *(_DWORD *)this = 1;
  *((_BYTE *)this + 4) = 0;
  v6 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v6);
LABEL_5:
  ++*((_QWORD *)v6 + 1);
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *((_QWORD *)this + 20) = 3;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 209) = 0u;
  *((_QWORD *)this + 38) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_QWORD *)this + 47) = v5;
  *((_WORD *)this + 192) = 256;
  *((_BYTE *)this + 386) = 0;
  *((_DWORD *)this + 97) = -1;

  return this;
}

void sub_18245F5A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::makeInvalid(WebGPU::RenderBundleEncoder *this, NSString *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WebGPU::RenderPassEncoder *v9;
  NSString *v10;

  v10 = a2;
  v4 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;

  v5 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;

  v6 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;

  objc_storeStrong((id *)this + 47, a2);
  v7 = (void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;

  v8 = *((_QWORD *)this + 37);
  if (v8)
  {
    v9 = *(WebGPU::RenderPassEncoder **)(v8 + 8);
    if (v9)
      WebGPU::RenderPassEncoder::makeInvalid(v9, v10);
  }

}

void sub_18245F644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::~RenderBundleEncoder(WebGPU::RenderBundleEncoder *this)
{
  void *v2;
  WTF *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WebGPU::BindGroup **v18;
  WTF *v19;
  void *v20;
  WebGPU::BindGroup *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  WebGPU::RenderPipeline *v44;
  WebGPU::Buffer *v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;

  v3 = (WTF *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree(v3, v2);
  }

  v5 = (unsigned int *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }

  v9 = *((_QWORD *)this + 31);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)(v9 + 88 * i) != -2)
        {
          v12 = v9 + 88 * i;
          v13 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, v8);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v9 - 16), v8);
  }
  v16 = *((_QWORD *)this + 30);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WebGPU::BindGroup **)(v16 + 8);
      do
      {
        if (*((_DWORD *)v18 - 2) != -2)
        {
          v21 = *v18;
          *v18 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v21, v8);
              WTF::fastFree(v19, v20);
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v8);
  }
  if (*((_BYTE *)this + 232))
  {
    v22 = *((_QWORD *)this + 28);
    if (v22)
    {
      v23 = *(unsigned int *)(v22 - 4);
      if ((_DWORD)v23)
      {
        v24 = v22 + 8;
        do
        {
          if (*(_DWORD *)(v24 - 8) != -2)
          {
            v25 = *(WTF **)v24;
            if (*(_QWORD *)v24)
            {
              *(_QWORD *)v24 = 0;
              *(_DWORD *)(v24 + 8) = 0;
              WTF::fastFree(v25, v8);
            }
          }
          v24 += 24;
          --v23;
        }
        while (v23);
      }
      WTF::fastFree((WTF *)(v22 - 16), v8);
    }
  }
  v26 = *((unsigned int *)this + 55);
  if ((_DWORD)v26)
  {
    v27 = (void **)*((_QWORD *)this + 26);
    v28 = 40 * v26;
    do
    {
      v29 = *v27;
      v27 += 5;

      v28 -= 40;
    }
    while (v28);
  }
  v30 = (WTF *)*((_QWORD *)this + 26);
  if (v30)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v30, v8);
  }
  v31 = *((unsigned int *)this + 51);
  if ((_DWORD)v31)
  {
    v32 = (void **)*((_QWORD *)this + 24);
    v33 = 40 * v31;
    do
    {
      v34 = *v32;
      v32 += 5;

      v33 -= 40;
    }
    while (v33);
  }
  v35 = (WTF *)*((_QWORD *)this + 24);
  if (v35)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v35, v8);
  }

  v37 = *((unsigned int *)this + 45);
  if ((_DWORD)v37)
  {
    v38 = (uint64_t *)*((_QWORD *)this + 21);
    v39 = 8 * v37;
    do
    {
      v40 = *v38;
      *v38 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      ++v38;
      v39 -= 8;
    }
    while (v39);
  }
  v41 = (WTF *)*((_QWORD *)this + 21);
  if (v41)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v41, v36);
  }

  v43 = *((_QWORD *)this + 8);
  if (v43)
    WTF::fastFree((WTF *)(v43 - 16), v42);
  v44 = (WebGPU::RenderPipeline *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 1)
    {
      WebGPU::RenderPipeline::~RenderPipeline(v44, v42);
      WTF::fastFree(v46, v47);
      v45 = (WebGPU::Buffer *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v45)
        goto LABEL_64;
      goto LABEL_61;
    }
    --*(_DWORD *)v44;
  }
  v45 = (WebGPU::Buffer *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v45)
    goto LABEL_64;
LABEL_61:
  if (*(_DWORD *)v45 == 1)
  {
    WebGPU::Buffer::~Buffer(v45, v42);
    WTF::fastFree(v48, v49);
  }
  else
  {
    --*(_DWORD *)v45;
  }
LABEL_64:
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 1, v42);
}

id WebGPU::RenderBundleEncoder::currentRenderCommand(WebGPU::RenderBundleEncoder *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id *v6;
  unint64_t v7;
  uint64_t v8;
  id v10;

  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(*(_QWORD *)(v3 + 152) + 76))
      {
        v5 = *(id *)(v3 + 16);
        return v5;
      }
      v4 = 0;
      goto LABEL_5;
    }
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
LABEL_5:
    v5 = v4;
    return v5;
  }
  v6 = (id *)((char *)this + 304);
  v7 = *((_QWORD *)this + 12);
  if (v7 >= objc_msgSend(*((id *)this + 9), "size"))
  {
    v8 = 0;
  }
  else
  {
    objc_msgSend(*((id *)this + 9), "indirectRenderCommandAtIndex:", *((_QWORD *)this + 12));
    v8 = objc_claimAutoreleasedReturnValue();
  }
  v10 = *v6;
  *v6 = (id)v8;

  v5 = *v6;
  return v5;
}

void WebGPU::RenderBundleEncoder::addResource(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int v25;
  int *v26;
  int *v27;
  int *v28;
  int *v29;
  _DWORD *v30;
  id *v31;
  int *v32;
  int **v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 296);
  if (!v11 || !*(_QWORD *)(v11 + 8))
  {
    objc_msgSend(v7, "objectForKey:", v8);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      objc_msgSend(v15, "setUsage:", objc_msgSend(v15, "usage") | objc_msgSend(v10, "usage"));
      objc_msgSend(v15, "setRenderStages:", objc_msgSend(v15, "renderStages") | objc_msgSend(v10, "renderStages"));
      objc_msgSend(v15, "setEntryUsage:", objc_msgSend(v15, "entryUsage") | objc_msgSend(v10, "entryUsage"));
      objc_msgSend(v15, "setBinding:", objc_msgSend(v10, "binding"));
    }
    else
    {
      objc_msgSend(v7, "setObject:forKey:", v10, v8);
    }

    goto LABEL_31;
  }
  v12 = objc_msgSend(v9, "renderStages");
  if (v8 && v12)
  {
    v13 = *(_QWORD **)(a1 + 296);
    if (v13)
      v13 = (_QWORD *)v13[1];
    if (*(_BYTE *)(v13[19] + 76))
      v14 = 0;
    else
      v14 = (void *)v13[2];
    v16 = v14;
    objc_msgSend(v16, "useResource:usage:stages:", v8, objc_msgSend(v10, "usage"), objc_msgSend(v10, "renderStages"));

  }
  v17 = *(_QWORD *)(a1 + 296);
  if (v17)
  {
    v18 = *(_DWORD **)(v17 + 8);
    if (v10)
    {
LABEL_17:
      objc_msgSend(v10, "resource");
      goto LABEL_20;
    }
  }
  else
  {
    v18 = 0;
    if (v10)
      goto LABEL_17;
  }
  v22 = 0;
  v23 = 0;
LABEL_20:
  v25 = objc_msgSend(v10, "entryUsage");
  v24 = v8;
  v30 = v18;
  v31 = &v24;
  v32 = &v25;
  v26 = &v25;
  v27 = v18;
  v28 = v18;
  v29 = &v25;
  if ((_DWORD)v23 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_33;
  }
  v33 = &v26;
  ((void (*)(int ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU17RenderPassEncoder28addResourceToActiveResourcesERKNS_7variantIJNS6_6RefPtrINS8_6BufferENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_IKNS8_11TextureViewENSD_ISJ_EENSF_ISJ_EEEENSB_IKNS8_15ExternalTextureENSD_ISO_EENSF_ISO_EEEEEEEPU22objcproto11MTLResource11objc_objectNS6_9OptionSetINS8_19BindGroupEntryUsageEEEE3__0JZNS9_28addResourceToActiveResourcesESU_SW_SZ_E3__1ZNS9_28addResourceToActiveResourcesESU_SW_SZ_E3__2EEEEEJRKNS0_6__implIJSH_SM_SR_EEEEEEDcOT_DpOT0____fmatrix[v23])(&v33, &v22);

  if ((_DWORD)v23 != -1)
    ((void (*)(int **, uint64_t *))off_1E0FD1F08[v23])(&v26, &v22);
  v19 = *(_QWORD *)(a1 + 296);
  if (v19)
  {
    v20 = *(int **)(v19 + 8);
    if (v10)
      goto LABEL_25;
LABEL_28:
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v26 = v20;
    v27 = v20;
    v28 = v20;
LABEL_29:
    v33 = &v26;
    ((void (*)(int ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU17RenderPassEncoder17setCommandEncoderERKNS_7variantIJNS6_6RefPtrINS8_6BufferENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_IKNS8_11TextureViewENSD_ISJ_EENSF_ISJ_EEEENSB_IKNS8_15ExternalTextureENSD_ISO_EENSF_ISO_EEEEEEEE3__0JZNS9_17setCommandEncoderESU_E3__1ZNS9_17setCommandEncoderESU_E3__2EEEEEJRKNS0_6__implIJSH_SM_SR_EEEEEEDcOT_DpOT0____fmatrix[v21])(&v33, &v22);
    if ((_DWORD)v23 != -1)
      ((void (*)(int **, uint64_t *))off_1E0FD1F08[v23])(&v26, &v22);
LABEL_31:

    return;
  }
  v20 = 0;
  if (!v10)
    goto LABEL_28;
LABEL_25:
  objc_msgSend(v10, "resource");
  v21 = v23;
  v26 = v20;
  v27 = v20;
  v28 = v20;
  if ((_DWORD)v23 != -1)
    goto LABEL_29;
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_33:
  __break(1u);
}

void sub_18245FD08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18245FD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (a11 == -1)
  {

    _Unwind_Resume(a1);
  }
  JUMPOUT(0x18245FDA0);
}

void sub_18245FD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  JUMPOUT(0x18245FD84);
}

void sub_18245FDBC()
{
  void *v0;

  JUMPOUT(0x18245FDC4);
}

void WebGPU::RenderBundleEncoder::addResource(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  ResourceUsageAndRenderStage *v15;
  uint64_t v16;
  ResourceUsageAndRenderStage *v17;
  id v18;
  _BYTE v19[8];
  int v20;
  char v21;
  char v22;

  v9 = a2;
  v10 = a3;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 296);
  if (v12 && v10 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(v13 + 152) + 76))
      v14 = 0;
    else
      v14 = *(void **)(v13 + 16);
    v18 = v14;
    objc_msgSend(v18, "useResource:usage:stages:", v11, 1, a4);

  }
  else
  {
    v15 = [ResourceUsageAndRenderStage alloc];
    v19[0] = 0;
    v20 = -1;
    v16 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t))off_1E0FD1F20[v16])(&v21, v19, a5);
      v20 = v16;
    }
    v17 = -[ResourceUsageAndRenderStage initWithUsage:renderStages:entryUsage:binding:resource:](v15, "initWithUsage:renderStages:entryUsage:binding:resource:", 1, a4, 1, 0x7FFFFFFFLL, v19);
    WebGPU::RenderBundleEncoder::addResource(a1, v9, v11, v17);

    if (v20 != -1)
      ((void (*)(char *, _BYTE *))off_1E0FD1F08[v20])(&v22, v19);
    v20 = -1;
  }

}

void sub_18245FF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18245FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (a12 != -1)
    ((void (*)(char *, char *))off_1E0FD1F08[a12])(&a17, &a10);
  a12 = -1;

  _Unwind_Resume(a1);
}

void sub_18245FF98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebGPU::RenderBundleEncoder::executePreDrawCommands(WebGPU::RenderBundleEncoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  _DWORD *v25;
  __CFString *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;

  v2 = *((_QWORD *)this + 6);
  if (!v2)
  {
    v11 = CFSTR("Pipeline was not set prior to draw command");
LABEL_51:
    WebGPU::RenderBundleEncoder::makeInvalid(this, &v11->isa);
    return 0;
  }
  v4 = *((_QWORD *)this + 35);
  v3 = *((_QWORD *)this + 36);
  v5 = *(_QWORD *)(v2 + 136);
  v6 = *(_DWORD **)(v5 + 64);
  if (!v6)
  {
    v9 = 0;
    LODWORD(v7) = 0;
LABEL_12:
    v8 = &v6[6 * v7];
    goto LABEL_13;
  }
  v7 = *(v6 - 1);
  v8 = &v6[6 * v7];
  if (!*(v6 - 3))
  {
    v9 = &v6[6 * v7];
    goto LABEL_12;
  }
  v9 = *(_DWORD **)(v5 + 64);
  if ((_DWORD)v7)
  {
    v10 = 24 * v7;
    v9 = *(_DWORD **)(v5 + 64);
    while (*v9 >= 0xFFFFFFFE)
    {
      v9 += 6;
      v10 -= 24;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_13:
  if (v6)
    v6 += 6 * *(v6 - 1);
  if (v6 == v9)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v8;
      if (v9 + 6 != v8)
      {
        v13 = v9 + 6;
        while (*v13 >= 0xFFFFFFFE)
        {
          v13 += 6;
          if (v13 == v8)
          {
            v13 = v8;
            break;
          }
        }
      }
      v12 += v9[5];
      v9 = v13;
    }
    while (v13 != v6);
  }
  if (__CFADD__(v4, 4 * v12))
  {
    v11 = CFSTR("Invalid vertexDynamicOffset");
    goto LABEL_51;
  }
  *((_QWORD *)this + 35) = v4 + 4 * v12;
  v14 = *(_DWORD **)(v5 + 72);
  if (!v14)
  {
    v17 = 0;
    LODWORD(v15) = 0;
LABEL_36:
    v16 = &v14[6 * v15];
    goto LABEL_37;
  }
  v15 = *(v14 - 1);
  v16 = &v14[6 * v15];
  if (!*(v14 - 3))
  {
    v17 = &v14[6 * v15];
    goto LABEL_36;
  }
  v17 = v14;
  if ((_DWORD)v15)
  {
    v18 = 24 * v15;
    v17 = v14;
    while (*v17 >= 0xFFFFFFFE)
    {
      v17 += 6;
      v18 -= 24;
      if (!v18)
      {
        v17 = v16;
        break;
      }
    }
  }
LABEL_37:
  if (v14)
    v14 += 6 * *(v14 - 1);
  if (v14 == v17)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = v16;
      if (v17 + 6 != v16)
      {
        v20 = v17 + 6;
        while (*v20 >= 0xFFFFFFFE)
        {
          v20 += 6;
          if (v20 == v16)
          {
            v20 = v16;
            break;
          }
        }
      }
      v19 += v17[5];
      v17 = v20;
    }
    while (v20 != v14);
  }
  if (__CFADD__(v3, 4 * v19))
  {
    v11 = CFSTR("Invalid fragmentDynamicOffset");
    goto LABEL_51;
  }
  *((_QWORD *)this + 36) = v3 + 4 * v19;
  WebGPU::RenderBundleEncoder::currentRenderCommand(this);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)v23;
  if (!v23)
  {
LABEL_157:
    v21 = 1;
    goto LABEL_158;
  }
  WebGPU::PipelineLayout::errorValidatingBindGroupCompatibility(*(_BYTE **)(*((_QWORD *)this + 6) + 136), (uint64_t *)this + 30);
  v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v26)
    goto LABEL_89;
  if (*((_QWORD *)this + 13))
    objc_msgSend(v24, "setRenderPipelineState:");
  v27 = *((_QWORD *)this + 6);
  if (!v27)
  {
    v26 = CFSTR("pipeline is not set");
    goto LABEL_89;
  }
  v28 = *(_DWORD **)(v27 + 128);
  if (!v28)
  {
    v30 = 0;
    v29 = 0;
    goto LABEL_67;
  }
  v29 = *(v28 - 1);
  v30 = &v28[8 * v29];
  if (!*(v28 - 3))
  {
LABEL_67:
    v32 = v30;
    v30 = &v28[8 * v29];
    goto LABEL_68;
  }
  if (!(_DWORD)v29)
  {
    v33 = 0;
    v32 = v28;
    goto LABEL_71;
  }
  v31 = 32 * v29;
  v32 = v28;
  while (*v32 >= 0xFFFFFFFE)
  {
    v32 += 8;
    v31 -= 32;
    if (!v31)
    {
      v32 = v30;
      break;
    }
  }
LABEL_68:
  if (!v28)
    goto LABEL_72;
  v33 = *(v28 - 1);
LABEL_71:
  v28 += 8 * v33;
LABEL_72:
  if (v28 == v32)
  {
LABEL_85:
    if ((*((_DWORD *)this + 15) + *((_DWORD *)this + 14) + 2) > *(_DWORD *)(*((_QWORD *)this + 1) + 92))
    {
      v26 = CFSTR("Too many bind groups and vertex buffers used");
      goto LABEL_89;
    }
  }
  else
  {
    v34 = *((_QWORD *)this + 8);
    if (v34)
    {
      v35 = *(_DWORD *)(v34 - 8);
      while (1)
      {
        v36 = *v32;
        v37 = 9 * ((v36 + ~((_DWORD)v36 << 15)) ^ ((v36 + ~((_DWORD)v36 << 15)) >> 10));
        v38 = (v37 ^ (v37 >> 6)) + ~((v37 ^ (v37 >> 6)) << 11);
        v39 = (v38 ^ HIWORD(v38)) & v35;
        v40 = *(_DWORD *)(v34 + 16 * v39);
        if (v40 != (_DWORD)v36)
          break;
LABEL_80:
        v42 = v32 + 8;
        v32 = v30;
        if (v42 != v30)
        {
          v32 = v42;
          while (*v32 >= 0xFFFFFFFE)
          {
            v32 += 8;
            if (v32 == v30)
            {
              v32 = v30;
              break;
            }
          }
        }
        if (v32 == v28)
          goto LABEL_85;
      }
      v41 = 1;
      while (v40 != -1)
      {
        v39 = (v39 + v41) & v35;
        v40 = *(_DWORD *)(v34 + 16 * v39);
        ++v41;
        if (v40 == (_DWORD)v36)
          goto LABEL_80;
      }
    }
    else
    {
      v36 = *v32;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer index[%u] is missing"), v36);
    v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v26)
    {
LABEL_89:
      WebGPU::RenderBundleEncoder::makeInvalid(this, &v26->isa);

      goto LABEL_90;
    }
  }
  v43 = *((unsigned int *)this + 51);
  if (!(_DWORD)v43)
  {
LABEL_102:
    v52 = *((unsigned int *)this + 55);
    if ((_DWORD)v52)
    {
      v53 = 0;
      v54 = 0;
      v55 = 40 * v52;
      do
      {
        if (v54 >= *((unsigned int *)this + 55))
        {
          __break(0xC471u);
          JUMPOUT(0x182460854);
        }
        v56 = *((_QWORD *)this + 26);
        v57 = *(_QWORD *)(v56 + v53);
        if (v57)
          objc_msgSend(v24, "setFragmentBuffer:offset:atIndex:", v57, *(_QWORD *)(v56 + v53 + 8), v54);
        ++v54;
        v53 += 40;
      }
      while (v55 != v53);
    }
    v92 = (uint64_t *)((char *)this + 224);
    if (*((_BYTE *)this + 232))
    {
      v58 = *v92;
      v59 = WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::begin((_DWORD *)*v92);
      v60 = v59;
      v61 = v25;
      v62 = v58 ? v58 + 24 * *(unsigned int *)(v58 - 4) : 0;
      if ((_DWORD *)v62 != v59)
      {
        v93 = v62;
        do
        {
          v63 = *(_QWORD **)(*((_QWORD *)this + 6) + 136);
          v64 = *v60;
          v65 = (void *)*((_QWORD *)this + 33);
          if (v65)
          {
            v66 = objc_msgSend(v65, "length");
            v67 = objc_msgSend(*((id *)this + 33), "contents");
            v68 = WebGPU::PipelineLayout::offsetVectorForBindGroup((uint64_t)v63, v64, v63 + 8, (uint64_t *)v60 + 1, 1);
            if (v68)
            {
              v69 = v68[3];
              if ((_DWORD)v69)
              {
                v70 = v63[5];
                if (v70)
                {
                  v71 = *(_DWORD *)(v70 - 8);
                  v72 = 9 * ((v64 + ~(v64 << 15)) ^ ((v64 + ~(v64 << 15)) >> 10));
                  v73 = (v72 ^ (v72 >> 6)) + ~((v72 ^ (v72 >> 6)) << 11);
                  v74 = v71 & (v73 ^ HIWORD(v73));
                  v75 = *(_DWORD *)(v70 + 8 * v74);
                  if (v75 != v64)
                  {
                    v76 = 1;
                    while (v75 != -1)
                    {
                      v74 = ((_DWORD)v74 + v76) & v71;
                      v75 = *(_DWORD *)(v70 + 8 * v74);
                      ++v76;
                      if (v75 == v64)
                        goto LABEL_126;
                    }
                    v74 = *(unsigned int *)(v70 - 4);
                  }
LABEL_126:
                  if (v74 == *(_DWORD *)(v70 - 4))
                    v70 = 0;
                  else
                    v70 = *(unsigned int *)(v70 + 8 * v74 + 4);
                }
                v77 = 4 * v70;
                if (4 * v69 > (unint64_t)(v66 - v4 - v77))
                  goto LABEL_166;
                memcpy((void *)(v67 + v4 + v77), *(const void **)v68, 4 * v69);
              }
            }
          }
          v78 = (void *)*((_QWORD *)this + 34);
          if (v78)
          {
            v79 = objc_msgSend(v78, "length");
            v80 = objc_msgSend(*((id *)this + 34), "contents");
            v81 = WebGPU::PipelineLayout::offsetVectorForBindGroup((uint64_t)v63, v64, v63 + 9, (uint64_t *)v60 + 1, 2);
            if (v81)
            {
              v82 = v81[3];
              if ((_DWORD)v82)
              {
                v83 = v63[6];
                if (v83)
                {
                  v84 = *(_DWORD *)(v83 - 8);
                  v85 = 9 * ((v64 + ~(v64 << 15)) ^ ((v64 + ~(v64 << 15)) >> 10));
                  v86 = (v85 ^ (v85 >> 6)) + ~((v85 ^ (v85 >> 6)) << 11);
                  v87 = v84 & (v86 ^ HIWORD(v86));
                  v88 = *(_DWORD *)(v83 + 8 * v87);
                  if (v88 != v64)
                  {
                    v89 = 1;
                    while (v88 != -1)
                    {
                      v87 = ((_DWORD)v87 + v89) & v84;
                      v88 = *(_DWORD *)(v83 + 8 * v87);
                      ++v89;
                      if (v88 == v64)
                        goto LABEL_141;
                    }
                    v87 = *(unsigned int *)(v83 - 4);
                  }
LABEL_141:
                  if (v87 == *(_DWORD *)(v83 - 4))
                    v83 = 0;
                  else
                    v83 = *(unsigned int *)(v83 + 8 * v87 + 4);
                }
                v90 = 4 * v83;
                if (4 * v82 > (unint64_t)(v79 - v3 - v90))
                {
                  __break(0xC471u);
                  JUMPOUT(0x18246082CLL);
                }
                memcpy((void *)(v80 + v3 + 12 + v90), *(const void **)v81, 4 * v82);
              }
            }
          }
          v60 += 6;
          if (v60 == v61)
          {
LABEL_114:
            v60 = v61;
          }
          else
          {
            while (*v60 >= 0xFFFFFFFE)
            {
              v60 += 6;
              if (v60 == v61)
                goto LABEL_114;
            }
          }
        }
        while (v60 != (_DWORD *)v93);
      }
    }
    v91 = *((_QWORD *)this + 33);
    if (v91)
      objc_msgSend(v24, "setVertexBuffer:offset:atIndex:", v91, v4, *(unsigned int *)(*((_QWORD *)this + 1) + 92));
    if (*((_QWORD *)this + 34))
    {
      if (!*((_DWORD *)this + 55))
      {
        __break(0xC471u);
        JUMPOUT(0x18246084CLL);
      }
      objc_msgSend(v24, "setFragmentBuffer:offset:atIndex:");
    }
    if (*((_BYTE *)this + 232))
      WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::clear(v92, v25);
    goto LABEL_157;
  }
  v44 = 0;
  v45 = 32;
  while (1)
  {
    if (v44 >= *((unsigned int *)this + 51))
    {
      __break(0xC471u);
      JUMPOUT(0x18246085CLL);
    }
    v46 = *((_QWORD *)this + 24) + v45;
    v47 = *(void **)(v46 - 32);
    if (!v47)
      goto LABEL_93;
    v48 = *(_QWORD *)(v46 - 24);
    v49 = objc_msgSend(v47, "length");
    v50 = *((unsigned int *)this + 51);
    if (v48 < v49)
    {
      if (v44 >= v50)
      {
        __break(0xC471u);
        JUMPOUT(0x182460864);
      }
      objc_msgSend(v24, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(*((_QWORD *)this + 24) + v45 - 32), *(_QWORD *)(*((_QWORD *)this + 24) + v45 - 24), v44);
      goto LABEL_93;
    }
    if (v44 >= v50)
    {
LABEL_166:
      __break(0xC471u);
      JUMPOUT(0x18246080CLL);
    }
    if (*(_QWORD *)(*((_QWORD *)this + 24) + v45))
      break;
    v51 = *(id *)(*((_QWORD *)this + 1) + 272);
    objc_msgSend(v24, "setVertexBuffer:offset:atIndex:", v51, 0, v44);

LABEL_93:
    ++v44;
    v45 += 40;
    if (v43 == v44)
      goto LABEL_102;
  }
  WebGPU::RenderBundleEncoder::makeInvalid(this, CFSTR("attempting to set non-zero sized buffer"));
LABEL_90:
  v21 = 0;
LABEL_158:

  return v21;
}

void sub_182460870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182460880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182460890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1824608CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824608DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824608EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824608FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246090C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246091C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246092C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246093C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246094C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::begin(_DWORD *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *(result - 1);
  v2 = &result[6 * v1];
  if (*(result - 3))
  {
    if ((_DWORD)v1)
    {
      v3 = 24 * v1;
      while (*result >= 0xFFFFFFFE)
      {
        result += 6;
        v3 -= 24;
        if (!v3)
          return v2;
      }
    }
  }
  else
  {
    result += 6 * v1;
  }
  return result;
}

uint64_t *WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::clear(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  v2 = *result;
  if (*result)
  {
    *result = 0;
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = v2 + 8;
      do
      {
        if (*(_DWORD *)(v4 - 8) != -2)
        {
          v5 = *(WTF **)v4;
          if (*(_QWORD *)v4)
          {
            *(_QWORD *)v4 = 0;
            *(_DWORD *)(v4 + 8) = 0;
            WTF::fastFree(v5, a2);
          }
        }
        v4 += 24;
        --v3;
      }
      while (v3);
    }
    return (uint64_t *)WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  return result;
}

void WebGPU::RenderBundleEncoder::draw(WebGPU::RenderBundleEncoder *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unsigned int *v32;
  void *v33;
  NSString *v34;
  void *v35;
  id v36;
  __int128 v37;
  uint64_t v38;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "RenderBundleEncoder::FinalizeRenderCommand WebGPU::RenderBundleEncoder::draw(uint32_t, uint32_t, uint32_t, uint32_t)");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, (NSString *)v10) & 1) != 0)
  {

LABEL_44:
    v33 = (void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;

    ++*((_QWORD *)this + 12);
    return;
  }
  v11 = *((_QWORD *)this + 10);

  if (!v11 || (WebGPU::RenderBundleEncoder::executePreDrawCommands(this) & 1) == 0)
    goto LABEL_44;
  WebGPU::RenderBundleEncoder::currentRenderCommand(this);
  v36 = (id)objc_claimAutoreleasedReturnValue();
  if (!v36)
  {
    *(_QWORD *)&v37 = __PAIR64__(a3, a2);
    *((_QWORD *)&v37 + 1) = __PAIR64__(a5, a4);
    ++*(_DWORD *)this;
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = &off_1E0FD1F60;
    *(_OWORD *)(v18 + 8) = v37;
    v38 = v18;
    *(_QWORD *)(v18 + 24) = this;
    v19 = *((unsigned int *)this + 45);
    if ((_DWORD)v19 == *((_DWORD *)this + 44))
    {
      v20 = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 168, v19 + 1, (unint64_t)&v38);
      v19 = *((unsigned int *)this + 45);
      v21 = (uint64_t *)(*((_QWORD *)this + 21) + 8 * v19);
      v18 = *(_QWORD *)v20;
    }
    else
    {
      v21 = (uint64_t *)(*((_QWORD *)this + 21) + 8 * v19);
      v20 = (char *)&v38;
    }
    *(_QWORD *)v20 = 0;
    *v21 = v18;
    *((_DWORD *)this + 45) = v19 + 1;
    v22 = v38;
    v38 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    goto LABEL_43;
  }
  v12 = *((_QWORD *)this + 6);
  if (!v12)
  {
    WebGPU::RenderBundleEncoder::makeInvalid(this, CFSTR("Missing pipeline before draw command"));
    goto LABEL_48;
  }
  v13 = *(unsigned int **)(v12 + 128);
  if (v13)
  {
    v14 = *(v13 - 1);
    v15 = &v13[8 * v14];
    if (*(v13 - 3))
    {
      v16 = v13;
      if ((_DWORD)v14)
      {
        v17 = 32 * v14;
        v16 = v13;
        while (*v16 >= 0xFFFFFFFE)
        {
          v16 += 8;
          v17 -= 32;
          if (!v17)
          {
            v16 = v15;
            break;
          }
        }
      }
    }
    else
    {
      v16 = &v13[8 * v14];
      v15 = v16;
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  if (v13)
    v13 += 8 * *(v13 - 1);
  if (v13 == v16)
  {
LABEL_40:
    if (a2 && a3)
    {
      objc_msgSend(v36, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", *((_QWORD *)this + 20), a4, a2, a3, a5);
LABEL_43:

      objc_msgSend(*((id *)this + 10), "setCommandTypes:", objc_msgSend(*((id *)this + 10), "commandTypes") | 1);
      goto LABEL_44;
    }
LABEL_48:
    v35 = (void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;

    ++*((_QWORD *)this + 12);
    return;
  }
  while (1)
  {
    v23 = v16[6];
    v24 = a4 + (unint64_t)a2;
    if (v23)
    {
      if (v23 != 1)
        goto LABEL_35;
      v24 = a5 + (unint64_t)a3;
    }
    if (!v24)
      goto LABEL_35;
    v25 = *v16;
    if (*((_DWORD *)this + 51) <= v25)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("vertex buffer validation failed as vertex buffer %d was not set"), *v16);
      v34 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebGPU::RenderBundleEncoder::makeInvalid(this, v34);
LABEL_47:

      goto LABEL_48;
    }
    v26 = *((_QWORD *)v16 + 1);
    if (!is_mul_ok(v24 - 1, v26))
      break;
    v27 = (v24 - 1) * v26;
    v28 = *(_QWORD *)(*((_QWORD *)this + 24) + 40 * v25 + 32);
    v29 = *((_QWORD *)v16 + 2);
    v30 = __CFADD__(v27, v29);
    v31 = v27 + v29;
    if (v30 || v31 > v28)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer[%d] fails: (strideCount(%llu) - 1) * bufferData.stride(%llu) + bufferData.lastStride(%llu) > bufferSize(%llu)"), v25, v24, v26, *((_QWORD *)v16 + 2), v28);
      v34 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebGPU::RenderBundleEncoder::makeInvalid(this, v34);
      goto LABEL_47;
    }
LABEL_35:
    v32 = v16 + 8;
    v16 = v15;
    if (v32 != v15)
    {
      v16 = v32;
      while (*v16 >= 0xFFFFFFFE)
      {
        v16 += 8;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
    if (v16 == v13)
      goto LABEL_40;
  }
  __break(0xC471u);
}

void sub_182460DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_182460E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;

  v19 = a18;
  a18 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0::~$_0((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_182460E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_182460E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *WebGPU::RenderBundleEncoder::recordCommand(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  char *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (char *)(a1 + 168);
  v5 = *(unsigned int *)(a1 + 180);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 176))
  {
    result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = (uint64_t *)result;
    v5 = *(unsigned int *)(a1 + 180);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 180) = v5 + 1;
  return result;
}

uint64_t WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0::~$_0(uint64_t a1)
{
  WebGPU::RenderBundleEncoder *v2;
  WTF *v4;
  void *v5;

  v2 = *(WebGPU::RenderBundleEncoder **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WebGPU::RenderBundleEncoder::runIndexBufferValidation(WebGPU::RenderBundleEncoder *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  NSString *v19;

  v4 = *((_QWORD *)this + 6);
  if (!v4 || !*((_QWORD *)this + 2))
  {
    WebGPU::RenderBundleEncoder::makeInvalid(this, CFSTR("Missing pipeline before draw command"));
    return 0;
  }
  v5 = a3 + (unint64_t)a2;
  if (!v5)
    return 1;
  v6 = *(unsigned int **)(v4 + 128);
  if (!v6)
  {
    v9 = 0;
    v8 = 0;
    goto LABEL_13;
  }
  v7 = *(v6 - 1);
  v8 = &v6[8 * v7];
  if (*(v6 - 3))
  {
    v9 = v6;
    if ((_DWORD)v7)
    {
      v10 = 32 * v7;
      v9 = v6;
      while (*v9 >= 0xFFFFFFFE)
      {
        v9 += 8;
        v10 -= 32;
        if (!v10)
        {
          v9 = v8;
          goto LABEL_14;
        }
      }
    }
LABEL_13:
    if (!v6)
      goto LABEL_15;
    goto LABEL_14;
  }
  v9 = &v6[8 * v7];
  v8 = v9;
LABEL_14:
  v6 += 8 * *(v6 - 1);
LABEL_15:
  if (v6 == v9)
    return 1;
  v12 = v5 - 1;
  while (1)
  {
    v13 = *v9;
    if (*((_DWORD *)this + 51) <= v13)
      break;
    if (v9[6] == 1)
    {
      v14 = *((_QWORD *)v9 + 1);
      if (!is_mul_ok(v12, v14))
        return 0;
      v15 = *((_QWORD *)v9 + 2);
      if (__CFADD__(v12 * v14, v15))
        return 0;
      v16 = *((_QWORD *)this + 24);
      v17 = *(_QWORD *)(v16 + 40 * v13 + 32);
      if (v12 * v14 + v15 > v17)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(RenderBundle) Buffer[%d] fails: (strideCount(%lu) - 1) * stride(%llu) + lastStride(%llu) > bufferSize(%llu), metalBufferLength(%lu)"), v13, v5, v14, v15, v17, objc_msgSend(*(id *)(v16 + 40 * v13), "length"));
        v19 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebGPU::RenderBundleEncoder::makeInvalid(this, v19);

        return 0;
      }
    }
    v18 = v9 + 8;
    v9 = v8;
    if (v18 != v8)
    {
      v9 = v18;
      while (*v9 >= 0xFFFFFFFE)
      {
        v9 += 8;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v9 == v6)
      return 1;
  }
  result = 494;
  __break(0xC471u);
  return result;
}

void sub_182461130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::storeVertexBufferCountsForValidation(WebGPU::RenderBundleEncoder *this, int a2, int a3, int a4, int a5, int a6, MTLIndexType a7, uint64_t a8)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  MTLIndexType v68;
  unint64_t v69;
  id v70;

  v16 = *((_QWORD *)this + 2);
  if (v16)
    v70 = *(id *)(v16 + 16);
  else
    v70 = 0;
  WebGPU::RenderBundleEncoder::currentRenderCommand(this);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17 || !v70)
    goto LABEL_82;
  v18 = *((_QWORD *)this + 6);
  v68 = a7;
  if (v18)
  {
    v19 = *(unsigned int **)(v18 + 128);
    if (v19)
    {
      v20 = *(v19 - 1);
      v21 = &v19[8 * v20];
      if (!*(v19 - 3))
      {
        v22 = &v19[8 * v20];
        v21 = v22;
LABEL_18:
        v19 += 8 * *(v19 - 1);
LABEL_19:
        if (v19 != v22)
        {
          v26 = -1;
          v27 = 0xFFFFFFFFLL;
          while (1)
          {
            if (*((_DWORD *)this + 51) <= *v22)
            {
              v28 = 0;
              v29 = *((_QWORD *)v22 + 1);
              if (v29)
              {
LABEL_26:
                v30 = *((_QWORD *)v22 + 2);
                v31 = v28 >= v30;
                v32 = v28 - v30;
                if (v31)
                  v33 = v32 / v29 + 1;
                else
                  LODWORD(v33) = 0;
                v34 = v22[6];
                if (v27 >= v33)
                  v35 = v33;
                else
                  v35 = v27;
                if (v26 < v33)
                  LODWORD(v33) = v26;
                if (v34)
                  v27 = v35;
                else
                  v27 = v27;
                if (!v34)
                  v26 = v33;
              }
            }
            else
            {
              v28 = *(_QWORD *)(*((_QWORD *)this + 24) + 40 * *v22 + 32);
              v29 = *((_QWORD *)v22 + 1);
              if (v29)
                goto LABEL_26;
            }
            v36 = v22 + 8;
            v22 = v21;
            if (v36 != v21)
            {
              v22 = v36;
              while (*v22 >= 0xFFFFFFFE)
              {
                v22 += 8;
                if (v22 == v21)
                {
                  v22 = v21;
                  break;
                }
              }
            }
            if (v22 == v19)
              goto LABEL_45;
          }
        }
        v27 = 0xFFFFFFFFLL;
        v26 = -1;
LABEL_45:
        v69 = v26 | (unint64_t)(v27 << 32);
        v24 = *((_QWORD *)this + 2);
        if (v24)
          goto LABEL_46;
LABEL_15:
        v25 = 0;
        goto LABEL_52;
      }
      v22 = v19;
      if ((_DWORD)v20)
      {
        v23 = 32 * v20;
        v22 = v19;
        while (*v22 >= 0xFFFFFFFE)
        {
          v22 += 8;
          v23 -= 32;
          if (!v23)
          {
            v22 = v21;
            goto LABEL_18;
          }
        }
      }
    }
    else
    {
      v22 = 0;
      v21 = 0;
    }
    if (!v19)
      goto LABEL_19;
    goto LABEL_18;
  }
  v69 = 0;
  v24 = *((_QWORD *)this + 2);
  if (!v24)
    goto LABEL_15;
LABEL_46:
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = v24;
    v38 = *(unsigned int **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v25;
    if (v38)
    {
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (!v25)
          goto LABEL_52;
      }
      else
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v37);
        v25 = *(_QWORD *)(v24 + 8);
        if (!v25)
          goto LABEL_52;
      }
    }
  }
  do
    v41 = __ldaxr((unsigned int *)v25);
  while (__stlxr(v41 + 1, (unsigned int *)v25));
LABEL_52:
  v67 = *((_QWORD *)this + 12);
  v66 = objc_msgSend(v70, "gpuAddress");
  v43 = (uint64_t *)((char *)this + 248);
  v64 = *((_QWORD *)this + 20);
  v44 = *((_QWORD *)this + 31);
  v65 = a6;
  if (v44
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::IndexBufferAndIndexData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::IndexBufferAndIndexData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash((uint64_t *)this + 31, 8u, 0), (v44 = *v43) != 0))
  {
    v45 = *(_DWORD *)(v44 - 8);
  }
  else
  {
    v45 = 0;
  }
  v46 = *((_QWORD *)this + 12);
  v47 = (v46 + ~(v46 << 32)) ^ ((unint64_t)(v46 + ~(v46 << 32)) >> 22);
  v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
  v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
  v50 = v45 & ((v49 >> 31) ^ v49);
  v51 = v44 + 88 * v50;
  v52 = *(_QWORD *)v51;
  if (*(_QWORD *)v51 == -1)
  {
LABEL_63:
    v55 = *(unsigned int **)(v51 + 8);
    *(_QWORD *)v51 = v46;
    *(_QWORD *)(v51 + 8) = v25;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v42);
      }
    }
    *(_QWORD *)(v51 + 16) = v68;
    *(_QWORD *)(v51 + 24) = a8;
    *(_QWORD *)(v51 + 32) = v67;
    *(_QWORD *)(v51 + 40) = v69;
    *(_QWORD *)(v51 + 48) = v66;
    *(_DWORD *)(v51 + 56) = a2;
    *(_DWORD *)(v51 + 60) = a3;
    *(_DWORD *)(v51 + 64) = a4;
    *(_DWORD *)(v51 + 68) = a5;
    *(_DWORD *)(v51 + 72) = v65;
    *(_QWORD *)(v51 + 80) = v64;
    if (*v43)
    {
      ++*(_DWORD *)(*v43 - 12);
      v58 = *v43;
      if (*v43)
        goto LABEL_69;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v58 = *v43;
      if (*v43)
      {
LABEL_69:
        v59 = (*(_DWORD *)(v58 - 16) + *(_DWORD *)(v58 - 12));
        v60 = *(unsigned int *)(v58 - 4);
        if (v60 <= 0x400)
          goto LABEL_70;
        goto LABEL_79;
      }
    }
    v59 = *(unsigned int *)(v58 - 16);
    v60 = *(unsigned int *)(v58 - 4);
    if (v60 <= 0x400)
    {
LABEL_70:
      if (3 * v60 > 4 * v59)
        goto LABEL_82;
      if (!(_DWORD)v60)
      {
        v61 = 8;
LABEL_81:
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::IndexBufferAndIndexData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::IndexBufferAndIndexData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v43, v61, v51);
        goto LABEL_82;
      }
LABEL_80:
      v61 = (_DWORD)v60 << (6 * *(_DWORD *)(v58 - 12) >= (2 * v60));
      goto LABEL_81;
    }
LABEL_79:
    if (v60 > 2 * v59)
      goto LABEL_82;
    goto LABEL_80;
  }
  v53 = 0;
  v54 = 1;
  while (v52 != v46)
  {
    if (v52 == -2)
      v53 = v51;
    v50 = (v50 + v54) & v45;
    v51 = v44 + 88 * v50;
    v52 = *(_QWORD *)v51;
    ++v54;
    if (*(_QWORD *)v51 == -1)
    {
      if (v53)
      {
        *(_QWORD *)v53 = -1;
        *(_OWORD *)(v53 + 40) = 0u;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_OWORD *)(v53 + 24) = 0u;
        *(_OWORD *)(v53 + 8) = 0u;
        *(_QWORD *)(v53 + 40) = -1;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        *(_DWORD *)(v53 + 72) = 0;
        *(_QWORD *)(v53 + 80) = 3;
        --*(_DWORD *)(*((_QWORD *)this + 31) - 16);
        v46 = *((_QWORD *)this + 12);
        v51 = v53;
      }
      goto LABEL_63;
    }
  }
  if (v25)
  {
    do
    {
      v62 = __ldaxr((unsigned int *)v25);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, (unsigned int *)v25));
    if (!v63)
    {
      atomic_store(1u, (unsigned int *)v25);
      WTF::fastFree((WTF *)v25, v42);
    }
  }
LABEL_82:

}

void sub_182461624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18246163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_182461654(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  unsigned int *v17;
  unsigned int v19;
  unsigned int v20;

  if (v17)
  {
    do
    {
      v19 = __ldaxr(v17);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v17));
    if (!v20)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);

      _Unwind_Resume(a1);
    }
  }

  _Unwind_Resume(a1);
}

void sub_1824616C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::drawIndexed(WebGPU::RenderBundleEncoder *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  int valid;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  MTLIndexType v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id *v56;
  uint64_t v57;
  void *v58;
  __CFString *v59;
  void *v60;
  void *v61;
  id v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "RenderBundleEncoder::FinalizeRenderCommand WebGPU::RenderBundleEncoder::drawIndexed(uint32_t, uint32_t, uint32_t, int32_t, uint32_t)");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, (NSString *)v12) & 1) != 0)
  {

LABEL_10:
    v17 = (void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;

    ++*((_QWORD *)this + 12);
    return;
  }
  v13 = *((_QWORD *)this + 10);

  if (!v13 || (WebGPU::RenderBundleEncoder::executePreDrawCommands(this) & 1) == 0)
    goto LABEL_10;
  v14 = *((_QWORD *)this + 4);
  v15 = *((_QWORD *)this + 3) ? 2 : 1;
  v16 = v14 + ((unint64_t)a4 << v15);
  if (__CFADD__(v14, (unint64_t)a4 << v15))
    goto LABEL_10;
  v18 = *((_QWORD *)this + 2);
  if (v18)
  {
    v19 = *(id *)(v18 + 16);
    v20 = *((_QWORD *)this + 37);
    v63 = v16;
    v64 = v15;
    v65 = a4;
    if (!v20)
      goto LABEL_24;
  }
  else
  {
    v19 = 0;
    v20 = *((_QWORD *)this + 37);
    v63 = v14 + ((unint64_t)a4 << v15);
    v64 = v15;
    v65 = a4;
    if (!v20)
    {
LABEL_24:
      valid = 0;
      goto LABEL_61;
    }
  }
  v21 = *(_QWORD *)(v20 + 8);
  if (!v21)
    goto LABEL_24;
  v22 = *((_QWORD *)this + 6);
  if (v22)
  {
    v23 = *(unsigned int **)(v22 + 128);
    if (v23)
    {
      v24 = *(v23 - 1);
      v25 = &v23[8 * v24];
      if (*(v23 - 3))
      {
        v26 = v23;
        if ((_DWORD)v24)
        {
          v27 = 32 * v24;
          v26 = v23;
          while (*v26 >= 0xFFFFFFFE)
          {
            v26 += 8;
            v27 -= 32;
            if (!v27)
            {
              v26 = v25;
              break;
            }
          }
        }
      }
      else
      {
        v26 = &v23[8 * v24];
        v25 = v26;
      }
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    if (v23)
      v23 += 8 * *(v23 - 1);
    if (v23 != v26)
    {
      v30 = -1;
      v31 = 0xFFFFFFFFLL;
      while (1)
      {
        if (*((_DWORD *)this + 51) <= *v26)
        {
          v32 = 0;
          v33 = *((_QWORD *)v26 + 1);
          if (v33)
          {
LABEL_37:
            v34 = *((_QWORD *)v26 + 2);
            v35 = v32 >= v34;
            v36 = v32 - v34;
            if (v35)
              v37 = v36 / v33 + 1;
            else
              LODWORD(v37) = 0;
            v38 = v26[6];
            if (v31 >= v37)
              v39 = v37;
            else
              v39 = v31;
            if (v30 < v37)
              LODWORD(v37) = v30;
            if (v38)
              v31 = v39;
            else
              v31 = v31;
            if (!v38)
              v30 = v37;
          }
        }
        else
        {
          v32 = *(_QWORD *)(*((_QWORD *)this + 24) + 40 * *v26 + 32);
          v33 = *((_QWORD *)v26 + 1);
          if (v33)
            goto LABEL_37;
        }
        v40 = v26 + 8;
        v26 = v25;
        if (v40 != v25)
        {
          v26 = v40;
          while (*v26 >= 0xFFFFFFFE)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = v25;
              break;
            }
          }
        }
        if (v26 == v23)
          goto LABEL_56;
      }
    }
    v31 = 0xFFFFFFFFLL;
    v30 = -1;
LABEL_56:
    v29 = v30 | (unint64_t)(v31 << 32);
  }
  else
  {
    v29 = 0;
  }
  v42 = *((_QWORD *)this + 2);
  v41 = *((_QWORD *)this + 3);
  v62 = v19;
  if (*(_BYTE *)(*(_QWORD *)(v21 + 152) + 76))
    v43 = 0;
  else
    v43 = *(void **)(v21 + 16);
  v44 = v43;
  valid = WebGPU::RenderPassEncoder::clampIndexBufferToValidValues(a2, a3, a5, a6, v41, v63, v42, v29, SHIDWORD(v29), v44, *((WebGPU::Device **)this + 1), *((_DWORD *)this + 87), *((_QWORD *)this + 20));

  v19 = v62;
LABEL_61:
  WebGPU::RenderBundleEncoder::currentRenderCommand(this);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v45)
  {
    *(_QWORD *)&v66 = __PAIR64__(a3, a2);
    *((_QWORD *)&v66 + 1) = __PAIR64__(a5, a4);
    ++*(_DWORD *)this;
    v49 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v49 = &off_1E0FD1F88;
    *(_DWORD *)(v49 + 24) = a6;
    *(_OWORD *)(v49 + 8) = v66;
    *(_QWORD *)(v49 + 32) = this;
    v67 = v49;
    v50 = *((unsigned int *)this + 45);
    if ((_DWORD)v50 == *((_DWORD *)this + 44))
    {
      v51 = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 168, v50 + 1, (unint64_t)&v67);
      v50 = *((unsigned int *)this + 45);
      v52 = (uint64_t *)(*((_QWORD *)this + 21) + 8 * v50);
      v49 = *(_QWORD *)v51;
    }
    else
    {
      v52 = (uint64_t *)(*((_QWORD *)this + 21) + 8 * v50);
      v51 = (char *)&v67;
    }
    *(_QWORD *)v51 = 0;
    *v52 = v49;
    *((_DWORD *)this + 45) = v50 + 1;
    v57 = v67;
    v67 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    goto LABEL_85;
  }
  v46 = *((_QWORD *)this + 6);
  v47 = *(_QWORD *)(v46 + 128);
  if (v47 && *(_DWORD *)(v47 - 12))
  {
    if (*((_QWORD *)this + 2))
    {
      v48 = *(_DWORD *)(v46 + 232);
      if (v48 != 4 && v48 != 2 || *((_QWORD *)this + 3) == (*(_DWORD *)(v46 + 236) != 1))
        goto LABEL_68;
      v59 = CFSTR("Primitive topology mismiatch with render pipeline");
    }
    else
    {
      v59 = CFSTR("Index buffer is not set");
    }
    WebGPU::RenderBundleEncoder::makeInvalid(this, &v59->isa);
    goto LABEL_89;
  }
LABEL_68:
  if ((v65 + (unint64_t)a2) << v64 > *((_QWORD *)this + 5))
  {
    WebGPU::RenderBundleEncoder::makeInvalid(this, CFSTR("firstIndexOffsetInBytes + indexCount * indexSizeInBytes > m_indexBufferSize"));
LABEL_89:
    v60 = (void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;

    ++*((_QWORD *)this + 12);
    goto LABEL_90;
  }
  if (!WebGPU::RenderBundleEncoder::runIndexBufferValidation(this, a6, a3)
    || !a2
    || !a3
    || !v19
    || *(_BYTE *)(*((_QWORD *)this + 2) + 52) == 4)
  {
    goto LABEL_89;
  }
  WebGPU::RenderBundleEncoder::storeVertexBufferCountsForValidation(this, a2, a3, a4, a5, a6, *((MTLIndexType *)this + 3), v63);
  v53 = *((_QWORD *)this + 37);
  if (v53 && *(_QWORD *)(v53 + 8) && valid == 1)
  {
    v54 = *(id *)(*((_QWORD *)this + 2) + 32);
    v55 = *((_QWORD *)this + 37);
    if (v55)
      v56 = *(id **)(v55 + 8);
    else
      v56 = 0;
    WebGPU::RenderPassEncoder::renderCommandEncoder(v56);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:", *((_QWORD *)this + 20), *((_QWORD *)this + 3), v19, 0, v54, 0);

  }
  else if (valid != 2)
  {
    objc_msgSend(v45, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", *((_QWORD *)this + 20), a2, *((_QWORD *)this + 3), v19, v63, a3, a5, a6);
  }
LABEL_85:

  objc_msgSend(*((id *)this + 10), "setCommandTypes:", objc_msgSend(*((id *)this + 10), "commandTypes") | 2);
  v58 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;

  ++*((_QWORD *)this + 12);
LABEL_90:

}

void sub_182461C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182461CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182461CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182461D50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182461D68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182461D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0::~$_0(uint64_t a1)
{
  WebGPU::RenderBundleEncoder *v2;
  WTF *v4;
  void *v5;

  v2 = *(WebGPU::RenderBundleEncoder **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::RenderBundleEncoder *this, id *a2, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  MTLIndexType v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebGPU::Device *v35;
  int v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id *v46;
  _QWORD *v47;
  __CFString *v48;
  unsigned int *v49;
  unsigned int *v50;
  void *v51;
  id v52;
  uint64_t v53;
  WebGPU::RenderBundleEncoder *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  WebGPU::RenderBundleEncoder *v63;
  uint64_t v64;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "RenderBundleEncoder::FinalizeRenderCommand WebGPU::RenderBundleEncoder::drawIndexedIndirect(Buffer &, uint64_t)");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, (NSString *)v6) & 1) != 0)
  {

LABEL_14:
    v16 = (void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;

    ++*((_QWORD *)this + 12);
    return;
  }
  v7 = *((_QWORD *)this + 10);

  if (!v7)
    goto LABEL_14;
  *((_BYTE *)this + 384) = 1;
  v8 = *((_QWORD *)this + 37);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v10 = *((_QWORD *)this + 6);
    v61 = a3;
    if (v10)
    {
      v11 = *(unsigned int **)(v10 + 128);
      if (v11)
      {
        v12 = *(v11 - 1);
        v13 = &v11[8 * v12];
        if (*(v11 - 3))
        {
          v14 = v11;
          if ((_DWORD)v12)
          {
            v15 = 32 * v12;
            v14 = v11;
            while (*v14 >= 0xFFFFFFFE)
            {
              v14 += 8;
              v15 -= 32;
              if (!v15)
              {
                v14 = v13;
                break;
              }
            }
          }
        }
        else
        {
          v14 = &v11[8 * v12];
          v13 = v14;
        }
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
      if (v11)
        v11 += 8 * *(v11 - 1);
      if (v11 != v14)
      {
        v20 = -1;
        v21 = 0xFFFFFFFFLL;
        while (1)
        {
          if (*((_DWORD *)this + 51) <= *v14)
          {
            v22 = 0;
            v23 = *((_QWORD *)v14 + 1);
            if (v23)
            {
LABEL_28:
              v24 = *((_QWORD *)v14 + 2);
              v25 = v22 >= v24;
              v26 = v22 - v24;
              if (v25)
                v27 = v26 / v23 + 1;
              else
                LODWORD(v27) = 0;
              v28 = v14[6];
              if (v21 >= v27)
                v29 = v27;
              else
                v29 = v21;
              if (v20 < v27)
                LODWORD(v27) = v20;
              if (v28)
                v21 = v29;
              else
                v21 = v21;
              if (!v28)
                v20 = v27;
            }
          }
          else
          {
            v22 = *(_QWORD *)(*((_QWORD *)this + 24) + 40 * *v14 + 32);
            v23 = *((_QWORD *)v14 + 1);
            if (v23)
              goto LABEL_28;
          }
          v30 = v14 + 8;
          v14 = v13;
          if (v30 != v13)
          {
            v14 = v30;
            while (*v14 >= 0xFFFFFFFE)
            {
              v14 += 8;
              if (v14 == v13)
              {
                v14 = v13;
                break;
              }
            }
          }
          if (v14 == v11)
            goto LABEL_47;
        }
      }
      v21 = 0xFFFFFFFFLL;
      v20 = -1;
LABEL_47:
      v19 = v20 | (unint64_t)(v21 << 32);
    }
    else
    {
      v19 = 0;
    }
    v31 = *((_QWORD *)this + 3);
    v32 = *((_QWORD *)this + 4);
    v33 = *((_QWORD *)this + 20);
    v35 = (WebGPU::Device *)*((_QWORD *)this + 1);
    v34 = *((_QWORD *)this + 2);
    v36 = *((_DWORD *)this + 87);
    if (*(_BYTE *)(*(_QWORD *)(v9 + 152) + 76))
      v37 = 0;
    else
      v37 = *(void **)(v9 + 16);
    v38 = v37;
    LODWORD(v60) = v36;
    a3 = v61;
    WebGPU::RenderPassEncoder::clampIndirectIndexBufferToValidValues(v34, (uint64_t)a2, v31, v32, v61, v19, SHIDWORD(v19), v33, &v62, v35, v60, v38);

    v18 = (id)v62;
    v17 = *((_QWORD *)&v62 + 1);

  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  if ((WebGPU::RenderBundleEncoder::executePreDrawCommands(this) & 1) != 0)
  {
    v39 = *((_QWORD *)this + 2);
    if (v39)
      v40 = *(id *)(v39 + 16);
    else
      v40 = 0;
    WebGPU::RenderBundleEncoder::currentRenderCommand(this);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    if (v42)
    {
      if (objc_msgSend(v40, "length"))
      {
        v43 = *((_QWORD *)this + 37);
        if (v43)
        {
          v44 = *(_QWORD *)(v43 + 8);
          if (v44)
          {
            WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(v44 + 152));
            if (*((_BYTE *)a2 + 52) != 4 && objc_msgSend(v40, "length") && v18)
            {
              v45 = *((_QWORD *)this + 37);
              if (v45)
                v46 = *(id **)(v45 + 8);
              else
                v46 = 0;
              WebGPU::RenderPassEncoder::renderCommandEncoder(v46);
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v57, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:", *((_QWORD *)this + 20), *((_QWORD *)this + 3), v40, *((_QWORD *)this + 4), v18, v17);

            }
LABEL_87:

            objc_msgSend(*((id *)this + 10), "setCommandTypes:", objc_msgSend(*((id *)this + 10), "commandTypes") | 2);
            v58 = (void *)*((_QWORD *)this + 38);
            *((_QWORD *)this + 38) = 0;

            ++*((_QWORD *)this + 12);
LABEL_90:

            goto LABEL_91;
          }
        }
        v49 = (unsigned int *)objc_msgSend(objc_retainAutorelease(a2[2]), "contents");
        v50 = v49;
        if (v49 && *v49 && v49[1])
        {
          v51 = (void *)*((_QWORD *)this + 23);
          v52 = a2[2];
          ++*(_DWORD *)a2;
          *(_QWORD *)&v62 = a2;
          DWORD2(v62) = 0;
          WebGPU::RenderBundleEncoder::addResource((uint64_t)this, v51, v52, 1, (uint64_t)&v62);
          if (DWORD2(v62) != -1)
            ((void (*)(uint64_t *, __int128 *))off_1E0FD1F08[DWORD2(v62)])(&v64, &v62);
          objc_msgSend(v42, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", *((_QWORD *)this + 20), *v50, *((_QWORD *)this + 3), v40, *((_QWORD *)this + 4), v50[1], (int)v50[3], v50[4]);
          goto LABEL_87;
        }
      }
    }
    else
    {
      if ((*((_BYTE *)a2 + 52) == 4 || a2[2]) && (v47 = a2[32], v47[1]) && v47 == *((_QWORD **)this + 1))
      {
        v48 = CFSTR("drawIndexedIndirect: validation failed");
        if ((a3 & 3) == 0
          && ((_DWORD)a2[6] & 0x100) != 0
          && a3 < 0xFFFFFFFFFFFFFFECLL
          && (unint64_t)a2[5] >= a3 + 20)
        {
          ++*(_DWORD *)a2;
          *(_QWORD *)&v62 = a2;
          *((_QWORD *)&v62 + 1) = a3;
          ++*(_DWORD *)this;
          v63 = this;
          v53 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v53 = &off_1E0FD1FB0;
          *(_OWORD *)(v53 + 8) = v62;
          v54 = v63;
          *(_QWORD *)&v62 = 0;
          v63 = 0;
          v64 = v53;
          *(_QWORD *)(v53 + 24) = v54;
          WebGPU::RenderBundleEncoder::recordCommand((uint64_t)this, (unint64_t)&v64);
          v56 = v64;
          v64 = 0;
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0((WebGPU::Buffer **)&v62, v55);
          goto LABEL_87;
        }
      }
      else
      {
        v48 = CFSTR("drawIndexedIndirect: buffer was invalid");
      }
      WebGPU::RenderBundleEncoder::makeInvalid(this, &v48->isa);
    }
    v59 = (void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;

    ++*((_QWORD *)this + 12);
    goto LABEL_90;
  }
  v41 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;

  ++*((_QWORD *)this + 12);
LABEL_91:

}

void sub_182462354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182462448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182462458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WebGPU::Buffer **WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0(WebGPU::Buffer **a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      v4 = *a1;
      *a1 = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = *a1;
  *a1 = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

void WebGPU::RenderBundleEncoder::drawIndirect(WebGPU::RenderBundleEncoder *this, id *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  WebGPU::Device *v28;
  unsigned int v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  unsigned int *v37;
  unsigned int *v38;
  void *v39;
  id v40;
  _QWORD *v41;
  __CFString *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  WebGPU::RenderBundleEncoder *v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  WebGPU::RenderBundleEncoder *v51;
  uint64_t v52;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "RenderBundleEncoder::FinalizeRenderCommand WebGPU::RenderBundleEncoder::drawIndirect(Buffer &, uint64_t)");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, (NSString *)v6) & 1) != 0)
  {

LABEL_14:
    v16 = (void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;

    ++*((_QWORD *)this + 12);
    return;
  }
  v7 = *((_QWORD *)this + 10);

  if (!v7)
    goto LABEL_14;
  *((_BYTE *)this + 384) = 1;
  v8 = *((_QWORD *)this + 37);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v10 = *((_QWORD *)this + 6);
    if (v10)
    {
      v11 = *(unsigned int **)(v10 + 128);
      if (v11)
      {
        v12 = *(v11 - 1);
        v13 = &v11[8 * v12];
        if (*(v11 - 3))
        {
          v14 = v11;
          if ((_DWORD)v12)
          {
            v15 = 32 * v12;
            v14 = v11;
            while (*v14 >= 0xFFFFFFFE)
            {
              v14 += 8;
              v15 -= 32;
              if (!v15)
              {
                v14 = v13;
                break;
              }
            }
          }
        }
        else
        {
          v14 = &v11[8 * v12];
          v13 = v14;
        }
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
      if (v11)
        v11 += 8 * *(v11 - 1);
      if (v11 != v14)
      {
        v19 = -1;
        v18 = -1;
        while (1)
        {
          if (*((_DWORD *)this + 51) <= *v14)
          {
            v20 = 0;
            v21 = *((_QWORD *)v14 + 1);
            if (v21)
            {
LABEL_28:
              v22 = *((_QWORD *)v14 + 2);
              v23 = v20 >= v22;
              v24 = v20 - v22;
              if (v23)
                v25 = v24 / v21 + 1;
              else
                LODWORD(v25) = 0;
              if (v18 >= v25)
                v26 = v25;
              else
                v26 = v18;
              if (v19 < v25)
                LODWORD(v25) = v19;
              if (v14[6])
                v18 = v26;
              else
                v19 = v25;
            }
          }
          else
          {
            v20 = *(_QWORD *)(*((_QWORD *)this + 24) + 40 * *v14 + 32);
            v21 = *((_QWORD *)v14 + 1);
            if (v21)
              goto LABEL_28;
          }
          v27 = v14 + 8;
          v14 = v13;
          if (v27 != v13)
          {
            v14 = v27;
            while (*v14 >= 0xFFFFFFFE)
            {
              v14 += 8;
              if (v14 == v13)
              {
                v14 = v13;
                break;
              }
            }
          }
          if (v14 == v11)
            goto LABEL_45;
        }
      }
      v18 = -1;
      v19 = -1;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
LABEL_45:
    v28 = (WebGPU::Device *)*((_QWORD *)this + 1);
    v29 = *((_DWORD *)this + 87);
    if (*(_BYTE *)(*(_QWORD *)(v9 + 152) + 76))
      v30 = 0;
    else
      v30 = *(void **)(v9 + 16);
    v31 = v30;
    WebGPU::RenderPassEncoder::clampIndirectBufferToValidValues((uint64_t)a2, a3, v19, v18, v28, v29, v31);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v17 = 0;
  }
  if ((WebGPU::RenderBundleEncoder::executePreDrawCommands(this) & 1) == 0)
    goto LABEL_73;
  WebGPU::RenderBundleEncoder::currentRenderCommand(this);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  if (v32)
  {
    v33 = *((_QWORD *)this + 37);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
      {
        WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(v34 + 152));
        if (*((_BYTE *)a2 + 52) != 4 && v17)
        {
          v35 = *((_QWORD *)this + 37);
          if (v35)
            v36 = *(id **)(v35 + 8);
          else
            v36 = 0;
          WebGPU::RenderPassEncoder::renderCommandEncoder(v36);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "drawPrimitives:indirectBuffer:indirectBufferOffset:", *((_QWORD *)this + 20), v17, 0);

        }
LABEL_72:

        objc_msgSend(*((id *)this + 10), "setCommandTypes:", objc_msgSend(*((id *)this + 10), "commandTypes") | 1);
LABEL_73:
        v45 = (void *)*((_QWORD *)this + 38);
        *((_QWORD *)this + 38) = 0;

        ++*((_QWORD *)this + 12);
        goto LABEL_74;
      }
    }
    v37 = (unsigned int *)objc_msgSend(objc_retainAutorelease(a2[2]), "contents");
    v38 = v37;
    if (v37 && v37[1] && *v37)
    {
      v39 = (void *)*((_QWORD *)this + 23);
      v40 = a2[2];
      ++*(_DWORD *)a2;
      *(_QWORD *)&v50 = a2;
      DWORD2(v50) = 0;
      WebGPU::RenderBundleEncoder::addResource((uint64_t)this, v39, v40, 1, (uint64_t)&v50);
      if (DWORD2(v50) != -1)
        ((void (*)(uint64_t *, __int128 *))off_1E0FD1F08[DWORD2(v50)])(&v52, &v50);
      objc_msgSend(v32, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", *((_QWORD *)this + 20), v38[2], *v38, v38[1], v38[3]);
      goto LABEL_72;
    }
  }
  else
  {
    if ((*((_BYTE *)a2 + 52) == 4 || a2[2]) && (v41 = a2[32], v41[1]) && v41 == *((_QWORD **)this + 1))
    {
      v42 = CFSTR("drawIndirect: validation failed");
      if ((a3 & 3) == 0 && ((_DWORD)a2[6] & 0x100) != 0 && (unint64_t)a2[5] >= a3 + 16)
      {
        ++*(_DWORD *)a2;
        *(_QWORD *)&v50 = a2;
        *((_QWORD *)&v50 + 1) = a3;
        ++*(_DWORD *)this;
        v51 = this;
        v46 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v46 = &off_1E0FD1FD8;
        *(_OWORD *)(v46 + 8) = v50;
        v47 = v51;
        *(_QWORD *)&v50 = 0;
        v51 = 0;
        v52 = v46;
        *(_QWORD *)(v46 + 24) = v47;
        WebGPU::RenderBundleEncoder::recordCommand((uint64_t)this, (unint64_t)&v52);
        v49 = v52;
        v52 = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0((WebGPU::Buffer **)&v50, v48);
        goto LABEL_72;
      }
    }
    else
    {
      v42 = CFSTR("drawIndirect: buffer was invalid");
    }
    WebGPU::RenderBundleEncoder::makeInvalid(this, &v42->isa);
  }
  v43 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;

  ++*((_QWORD *)this + 12);
LABEL_74:

}

void sub_1824629A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WebGPU::Buffer *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  uint64_t v17;
  void *v18;

  v17 = a14;
  a14 = 0;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0(&a11, v18);

    _Unwind_Resume(a1);
  }
  WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0(&a11, a2);

  _Unwind_Resume(a1);
}

void sub_1824629F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182462A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182462A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182462A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182462A90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::endCurrentICB(id *this)
{
  WebGPU::RenderBundleEncoder *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  WTF **v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  void *v85;
  id v86;
  RenderBundleICBWithResources *v87;
  double v88;
  double v89;
  double v90;
  RenderBundleICBWithResources *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF **v96;
  RenderBundleICBWithResources *v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  WTF *v111;
  WTF *v112;
  WTF *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  id *v117;
  uint64_t v118;
  WTF *v119;
  RenderBundleICBWithResources *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t i;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  void *v128;
  WTF **v129;
  WTF **v130;
  WTF *v131;
  WTF *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  id *v137;
  uint64_t v138;
  WTF *v139;
  id *v140;
  uint64_t v141;
  WTF *v142;
  id *v143;
  uint64_t v144;
  WTF *v145;
  id *v146;
  uint64_t v147;
  WTF *v148;
  id *v149;
  uint64_t v150;
  WTF *v151;
  id *v152;
  uint64_t v153;
  WTF *v154;
  id *v155;
  uint64_t v156;
  WTF *v157;
  id *v158;
  uint64_t v159;
  WTF *v160;
  id *v161;
  uint64_t v162;
  WTF *v163;
  id *v164;
  uint64_t v165;
  WTF *v166;
  id *v167;
  uint64_t v168;
  WTF *v169;
  id *v170;
  uint64_t v171;
  WTF *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  uint64_t v178;
  void *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  id v187;
  id *v188;
  WebGPU::Device *v189;
  id v190;
  WebGPU::RenderBundleEncoder *v191;
  void *v192;
  void *v193;
  uint64_t v194;
  id obj;
  WTF *v196;
  WTF *v197;
  WTF *v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  id v205;
  char v206;
  char v207;
  _BYTE v208[128];
  _OWORD v209[12];
  WTF *v210[2];
  WTF *v211[2];
  WTF *v212[2];
  WTF *v213[2];
  WTF *v214[2];
  WTF *v215[2];
  WTF *v216[2];
  WTF *v217[2];
  WTF *v218[2];
  WTF *v219[2];
  WTF *v220[2];
  WTF *v221[2];
  uint64_t v222;

  v1 = (WebGPU::RenderBundleEncoder *)this;
  v222 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this[12];
  this[12] = 0;
  if (v2 && !objc_msgSend(this[10], "commandTypes"))
  {
    __break(0xC471u);
    JUMPOUT(0x182463A6CLL);
  }
  objc_msgSend(*((id *)v1 + 10), "setMaxVertexBufferBindCount:", (*(_DWORD *)(*((_QWORD *)v1 + 1) + 92) + 1));
  v3 = *((unsigned int *)v1 + 51);
  if (objc_msgSend(*((id *)v1 + 10), "maxVertexBufferBindCount") <= v3)
  {
    v6 = *((unsigned int *)v1 + 55);
    if (objc_msgSend(*((id *)v1 + 10), "maxFragmentBufferBindCount") <= v6)
    {
LABEL_5:
      if (!*((_QWORD *)v1 + 35))
        goto LABEL_12;
      goto LABEL_9;
    }
  }
  else
  {
    WTF::Vector<WebGPU::RenderBundleEncoder::BufferAndOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v1 + 192, objc_msgSend(*((id *)v1 + 10), "maxVertexBufferBindCount"));
    v4 = *((unsigned int *)v1 + 55);
    if (objc_msgSend(*((id *)v1 + 10), "maxFragmentBufferBindCount") <= v4)
      goto LABEL_5;
  }
  WTF::Vector<WebGPU::RenderBundleEncoder::BufferAndOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v1 + 208, objc_msgSend(*((id *)v1 + 10), "maxFragmentBufferBindCount"));
  if (!*((_QWORD *)v1 + 35))
    goto LABEL_12;
LABEL_9:
  if (!*((_QWORD *)v1 + 33))
  {
    v7 = *(id *)(*((_QWORD *)v1 + 1) + 8);
    v8 = objc_msgSend(v7, "newBufferWithLength:options:", *((_QWORD *)v1 + 35), 0);
    v9 = (void *)*((_QWORD *)v1 + 33);
    *((_QWORD *)v1 + 33) = v8;

    v10 = (void *)*((_QWORD *)v1 + 23);
    v11 = (void *)*((_QWORD *)v1 + 33);
    v210[0] = 0;
    LODWORD(v210[1]) = 0;
    WebGPU::RenderBundleEncoder::addResource((uint64_t)v1, v10, v11, 1, (uint64_t)v210);
    if (LODWORD(v210[1]) != -1)
      ((void (*)(_OWORD *, WTF **))off_1E0FD1F08[LODWORD(v210[1])])(v209, v210);
  }
LABEL_12:
  *((_QWORD *)v1 + 35) = 0;
  v191 = v1;
  if (!*((_QWORD *)v1 + 34))
  {
    v12 = *(id *)(*((_QWORD *)v1 + 1) + 8);
    v13 = objc_msgSend(v12, "newBufferWithLength:options:", *((_QWORD *)v1 + 36) + 12, 0);
    v14 = (void *)*((_QWORD *)v1 + 34);
    *((_QWORD *)v1 + 34) = v13;

    v15 = objc_msgSend(*((id *)v1 + 34), "contents");
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x182463A8CLL);
    }
    *(_QWORD *)v15 = 0x3F80000000000000;
    *(_DWORD *)(v15 + 8) = *((_DWORD *)v1 + 97);
    v16 = (void *)*((_QWORD *)v1 + 23);
    v17 = (void *)*((_QWORD *)v1 + 34);
    v210[0] = 0;
    LODWORD(v210[1]) = 0;
    WebGPU::RenderBundleEncoder::addResource((uint64_t)v1, v16, v17, 2, (uint64_t)v210);
    if (LODWORD(v210[1]) != -1)
      ((void (*)(_OWORD *, WTF **))off_1E0FD1F08[LODWORD(v210[1])])(v209, v210);
  }
  *((_QWORD *)v1 + 36) = 0;
  v18 = *((_QWORD *)v1 + 37);
  if (v18 && *(_QWORD *)(v18 + 8))
  {
    v19 = *((unsigned int *)v1 + 45);
    if ((_DWORD)v19)
      goto LABEL_19;
LABEL_25:
    v21 = 0;
    v23 = 0;
    v25 = *((_QWORD *)v1 + 37);
    if (!v25)
      goto LABEL_29;
    goto LABEL_28;
  }
  v26 = *(id *)(*((_QWORD *)v1 + 1) + 8);
  v27 = objc_msgSend(v26, "newIndirectCommandBufferWithDescriptor:maxCommandCount:options:", *((_QWORD *)v1 + 10), v2, 0);
  v28 = (void *)*((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 9) = v27;

  v19 = *((unsigned int *)v1 + 45);
  if (!(_DWORD)v19)
    goto LABEL_25;
LABEL_19:
  v20 = 0;
  v21 = 0;
  v22 = *((_QWORD *)v1 + 21);
  v23 = ((v19 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  v24 = 8 * v19;
  while (1)
  {
    v21 += (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v22 + 8 * v20) + 16))(*(_QWORD *)(v22 + 8 * v20));
    if (v21 == v2)
      break;
    ++v20;
    v24 -= 8;
    if (!v24)
    {
      v25 = *((_QWORD *)v1 + 37);
      if (v25)
        goto LABEL_28;
      goto LABEL_29;
    }
  }
  v23 = v20 + 1;
  v21 = v2;
  v25 = *((_QWORD *)v1 + 37);
  if (!v25)
    goto LABEL_29;
LABEL_28:
  if (*(_QWORD *)(v25 + 8))
    return;
LABEL_29:
  v29 = *((unsigned int *)v1 + 45);
  if (v23 != v29)
  {
    v33 = (_QWORD *)*((_QWORD *)v1 + 21);
    v34 = (char *)&v33[v23];
    if (v23)
    {
      v35 = 8 * v23;
      v36 = (uint64_t *)*((_QWORD *)v1 + 21);
      do
      {
        v37 = *v36;
        *v36 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        ++v36;
        v35 -= 8;
      }
      while (v35);
      v1 = v191;
      v38 = (char *)(*((_QWORD *)v191 + 21) + 8 * *((unsigned int *)v191 + 45));
      if (v23 >= 1)
      {
        if (v34 != v38)
        {
          do
          {
            v39 = v33[v23];
            v33[v23] = 0;
            *v33 = v39;
            v40 = v33[v23];
            v33[v23] = 0;
            if (v40)
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            ++v33;
          }
          while (&v33[v23] != (_QWORD *)v38);
        }
LABEL_57:
        *((_DWORD *)v1 + 45) -= v23;
        goto LABEL_58;
      }
    }
    else
    {
      v38 = (char *)&v33[v29];
    }
    if (v38 != v34)
    {
      v41 = (_QWORD *)((char *)v33 + ((v38 - v34) & 0xFFFFFFFFFFFFFFF8) - 8);
      do
      {
        v42 = *((_QWORD *)v38 - 1);
        v38 -= 8;
        *(_QWORD *)v38 = 0;
        *v41 = v42;
        v43 = *(_QWORD *)v38;
        *(_QWORD *)v38 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        --v41;
      }
      while (v38 != v34);
    }
    goto LABEL_57;
  }
  if (*((_DWORD *)v1 + 44))
  {
    v30 = (WTF *)*((_QWORD *)v1 + 21);
    if ((_DWORD)v29)
    {
      v31 = 8 * v23;
      do
      {
        v32 = *(_QWORD *)v30;
        *(_QWORD *)v30 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v30 = (WTF *)((char *)v30 + 8);
        v31 -= 8;
      }
      while (v31);
      *((_DWORD *)v1 + 45) = 0;
      v30 = (WTF *)*((_QWORD *)v1 + 21);
    }
    if (v30)
    {
      *((_QWORD *)v1 + 21) = 0;
      *((_DWORD *)v1 + 44) = 0;
      WTF::fastFree(v30, v5);
    }
  }
  objc_msgSend(*((id *)v1 + 10), "setCommandTypes:", 0);
LABEL_58:
  *((_QWORD *)v1 + 12) = v2 - v21;
  v44 = (void *)*((_QWORD *)v1 + 32);
  v45 = (void *)*((_QWORD *)v1 + 23);
  v46 = (void *)*((_QWORD *)v1 + 13);
  v47 = (void *)*((_QWORD *)v1 + 14);
  v183 = *((_QWORD *)v1 + 17);
  v184 = *((_QWORD *)v1 + 16);
  v48 = *((_DWORD *)v1 + 36);
  v49 = *((_DWORD *)v1 + 37);
  v50 = *((_DWORD *)v1 + 38);
  v51 = (void *)*((_QWORD *)v1 + 34);
  v181 = *((_QWORD *)v1 + 15);
  v182 = *((_QWORD *)v1 + 6);
  v188 = (id *)*((_QWORD *)v1 + 1);
  v190 = *((id *)v1 + 9);
  v52 = v45;
  v185 = v46;
  v186 = v47;
  v187 = v51;
  *(_OWORD *)v220 = 0u;
  *(_OWORD *)v221 = 0u;
  *(_OWORD *)v218 = 0u;
  *(_OWORD *)v219 = 0u;
  *(_OWORD *)v216 = 0u;
  *(_OWORD *)v217 = 0u;
  *(_OWORD *)v214 = 0u;
  *(_OWORD *)v215 = 0u;
  *(_OWORD *)v212 = 0u;
  *(_OWORD *)v213 = 0u;
  *(_OWORD *)v210 = 0u;
  *(_OWORD *)v211 = 0u;
  memset(v209, 0, sizeof(v209));
  v203 = 0u;
  v204 = 0u;
  v201 = 0u;
  v202 = 0u;
  obj = v52;
  v53 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v201, v208, 16);
  v180 = v44;
  if (v53)
  {
    v54 = *(_QWORD *)v202;
    v194 = *(_QWORD *)v202;
    do
    {
      v55 = 0;
      v56 = v53;
      do
      {
        if (*(_QWORD *)v202 != v54)
          objc_enumerationMutation(obj);
        v57 = *(id *)(*((_QWORD *)&v201 + 1) + 8 * v55);
        v205 = v57;
        if (v57)
        {
          objc_msgSend(obj, "objectForKey:", v57);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v58, "renderStages") && objc_msgSend(v58, "usage"))
          {
            v59 = objc_msgSend(v58, "renderStages");
            v60 = &v210[6 * v59] + 2 * objc_msgSend(v58, "usage");
            v61 = (uint64_t)(v60 - 8);
            v62 = *((unsigned int *)v60 - 13);
            if ((_DWORD)v62 == *((_DWORD *)v60 - 14))
            {
              v63 = WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v61, v62 + 1, (unint64_t)&v205);
              v64 = (_QWORD *)(*(_QWORD *)v61 + 8 * *(unsigned int *)(v61 + 12));
              v65 = *(id *)v63;
            }
            else
            {
              v64 = (_QWORD *)(*(_QWORD *)v61 + 8 * v62);
              v65 = v205;
            }
            *v64 = v65;
            ++*(_DWORD *)(v61 + 12);
            v66 = objc_msgSend(v58, "renderStages");
            v67 = objc_msgSend(v58, "usage");
            LODWORD(v196) = objc_msgSend(v58, "entryUsage");
            HIDWORD(v196) = objc_msgSend(v58, "binding");
            if (v58)
            {
              objc_msgSend(v58, "resource");
            }
            else
            {
              v197 = 0;
              v198 = 0;
            }
            v68 = &v209[3 * v66 - 4 + v67];
            v199 = 0;
            v69 = *((unsigned int *)v68 + 3);
            if ((_DWORD)v69 == *((_DWORD *)v68 + 2))
            {
              v70 = WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v196);
              v71 = v70;
              v72 = *((unsigned int *)v68 + 3);
              v73 = *(_QWORD *)v68;
              v74 = *(_QWORD *)v68 + 32 * v72;
              *(_QWORD *)v74 = *(_QWORD *)v70;
              *(_BYTE *)(v74 + 8) = 0;
              v75 = v74 + 8;
              *(_DWORD *)(v74 + 16) = -1;
              v76 = (_DWORD *)(v74 + 16);
              v77 = *(unsigned int *)(v70 + 16);
              if ((_DWORD)v77 != -1)
              {
                ((void (*)(char *, uint64_t, unint64_t))off_1E0FD1F38[v77])(&v206, v75, v70 + 8);
                *v76 = v77;
              }
              v78 = (uint64_t *)(v73 + 32 * v72 + 24);
              v79 = (uint64_t *)(v71 + 24);
            }
            else
            {
              v80 = *(_QWORD *)v68;
              v81 = *(_QWORD *)v68 + 32 * v69;
              *(_QWORD *)v81 = v196;
              *(_BYTE *)(v81 + 8) = 0;
              v82 = v81 + 8;
              *(_DWORD *)(v81 + 16) = -1;
              v83 = (_DWORD *)(v81 + 16);
              v84 = (int)v198;
              if ((_DWORD)v198 != -1)
              {
                ((void (*)(char *, uint64_t, WTF **))off_1E0FD1F38[v198])(&v206, v82, &v197);
                *v83 = v84;
              }
              v78 = (uint64_t *)(v80 + 32 * v69 + 24);
              v79 = &v199;
            }
            *v78 = *v79;
            ++*((_DWORD *)v68 + 3);
            v53 = v56;
            v54 = v194;
            if ((_DWORD)v198 != -1)
              ((void (*)(char *, WTF **))off_1E0FD1F08[v198])(&v207, &v197);
          }

        }
        ++v55;
      }
      while (v53 != v55);
      v53 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v201, v208, 16);
    }
    while (v53);
  }

  WebGPU::Device::icbCommandClampFunction((WebGPU::Device *)v188, MTLIndexTypeUInt32);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v193 = (void *)objc_msgSend(v85, "newArgumentEncoderWithBufferIndex:", 1);

  v86 = v188[1];
  v192 = (void *)objc_msgSend(v86, "newBufferWithLength:options:", objc_msgSend(v193, "encodedLength"), 0);

  objc_msgSend(v192, "setLabel:", CFSTR("ICB Argument Buffer"));
  objc_msgSend(v193, "setArgumentBuffer:offset:", v192, 0);
  objc_msgSend(v193, "setIndirectCommandBuffer:atIndex:", v190, 0);
  v87 = [RenderBundleICBWithResources alloc];
  v189 = (WebGPU::RenderBundleEncoder *)((char *)v191 + 248);
  LODWORD(v88) = v48;
  LODWORD(v89) = v49;
  LODWORD(v90) = v50;
  v91 = -[RenderBundleICBWithResources initWithICB:containerBuffer:pipelineState:depthStencilState:cullMode:frontFace:depthClipMode:depthBias:depthBiasSlopeScale:depthBiasClamp:fragmentDynamicOffsetsBuffer:pipeline:minVertexCounts:](v87, "initWithICB:containerBuffer:pipelineState:depthStencilState:cullMode:frontFace:depthClipMode:depthBias:depthBiasSlopeScale:depthBiasClamp:fragmentDynamicOffsetsBuffer:pipeline:minVertexCounts:", v190, v192, v185, v186, v181, v184, v88, v89, v90, v183, v187, v182, (char *)v191 + 248);
  v93 = 0;
  do
  {
    v94 = 0;
    v95 = v93 + 1;
    do
    {
      while (1)
      {
        v96 = &v210[6 * v93] + 2 * v94;
        if (*((_DWORD *)v96 + 3))
          break;
        if (++v94 == 3)
          goto LABEL_85;
      }
      v97 = v91;
      v98 = -[RenderBundleICBWithResources resources](v91, "resources");
      v99 = v98;
      v100 = &v209[3 * v93 + v94];
      v101 = *v96;
      *v96 = 0;
      v196 = v101;
      v102 = v96[1];
      v96[1] = 0;
      v197 = v102;
      v103 = *(WTF **)v100;
      *(_QWORD *)v100 = 0;
      v198 = v103;
      v104 = *((_QWORD *)v100 + 1);
      *((_QWORD *)v100 + 1) = 0;
      v199 = v104;
      *(_QWORD *)&v200 = ++v94;
      *((_QWORD *)&v200 + 1) = v93 + 1;
      v105 = *(unsigned int *)(v98 + 12);
      if ((_DWORD)v105 == *(_DWORD *)(v98 + 8))
      {
        v106 = WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v98, v105 + 1, (unint64_t)&v196);
        v107 = *(_QWORD *)v99 + 48 * *(unsigned int *)(v99 + 12);
        *(_QWORD *)v107 = 0;
        *(_QWORD *)(v107 + 8) = 0;
        v108 = *(_QWORD *)v106;
        *(_QWORD *)v106 = 0;
        *(_QWORD *)v107 = v108;
        LODWORD(v108) = *((_DWORD *)v106 + 2);
        *((_DWORD *)v106 + 2) = 0;
        *(_DWORD *)(v107 + 8) = v108;
        LODWORD(v108) = *((_DWORD *)v106 + 3);
        *((_DWORD *)v106 + 3) = 0;
        *(_DWORD *)(v107 + 12) = v108;
        *(_QWORD *)(v107 + 16) = 0;
        *(_QWORD *)(v107 + 24) = 0;
        v109 = *((_QWORD *)v106 + 2);
        *((_QWORD *)v106 + 2) = 0;
        *(_QWORD *)(v107 + 16) = v109;
        LODWORD(v109) = *((_DWORD *)v106 + 6);
        *((_DWORD *)v106 + 6) = 0;
        *(_DWORD *)(v107 + 24) = v109;
        LODWORD(v109) = *((_DWORD *)v106 + 7);
        *((_DWORD *)v106 + 7) = 0;
        *(_DWORD *)(v107 + 28) = v109;
        v110 = *((_OWORD *)v106 + 2);
      }
      else
      {
        v107 = *(_QWORD *)v98 + 48 * v105;
        *(_QWORD *)v107 = 0;
        *(_QWORD *)(v107 + 8) = 0;
        v111 = v196;
        v196 = 0;
        *(_QWORD *)v107 = v111;
        LODWORD(v111) = (_DWORD)v197;
        LODWORD(v197) = 0;
        *(_DWORD *)(v107 + 8) = (_DWORD)v111;
        LODWORD(v111) = HIDWORD(v197);
        HIDWORD(v197) = 0;
        *(_DWORD *)(v107 + 12) = (_DWORD)v111;
        *(_QWORD *)(v107 + 16) = 0;
        *(_QWORD *)(v107 + 24) = 0;
        v112 = v198;
        v198 = 0;
        *(_QWORD *)(v107 + 16) = v112;
        LODWORD(v112) = v199;
        LODWORD(v199) = 0;
        *(_DWORD *)(v107 + 24) = (_DWORD)v112;
        LODWORD(v112) = HIDWORD(v199);
        HIDWORD(v199) = 0;
        *(_DWORD *)(v107 + 28) = (_DWORD)v112;
        v110 = v200;
      }
      *(_OWORD *)(v107 + 32) = v110;
      ++*(_DWORD *)(v99 + 12);
      v113 = v198;
      if (HIDWORD(v199))
      {
        v114 = 32 * HIDWORD(v199);
        v115 = (char *)v198 + 8;
        do
        {
          v116 = *((unsigned int *)v115 + 2);
          if ((_DWORD)v116 != -1)
            ((void (*)(id *, char *))off_1E0FD1F08[v116])(&v205, v115);
          *((_DWORD *)v115 + 2) = -1;
          v115 += 32;
          v114 -= 32;
        }
        while (v114);
        v113 = v198;
      }
      if (v113)
      {
        v198 = 0;
        LODWORD(v199) = 0;
        WTF::fastFree(v113, v92);
      }
      if (HIDWORD(v197))
      {
        v117 = (id *)v196;
        v118 = 8 * HIDWORD(v197);
        do
        {

          v118 -= 8;
        }
        while (v118);
      }
      v119 = v196;
      if (v196)
      {
        v196 = 0;
        LODWORD(v197) = 0;
        WTF::fastFree(v119, v92);
      }
      v91 = v97;
    }
    while (v94 != 3);
LABEL_85:
    ++v93;
  }
  while (v95 != 4);
  v120 = v91;
  v121 = *(_QWORD *)v189;
  if (*(_QWORD *)v189)
  {
    *(_QWORD *)v189 = 0;
    v122 = *(unsigned int *)(v121 - 4);
    if ((_DWORD)v122)
    {
      for (i = 0; i != v122; ++i)
      {
        if (*(_QWORD *)(v121 + 88 * i) != -2)
        {
          v124 = v121 + 88 * i;
          v125 = *(unsigned int **)(v124 + 8);
          *(_QWORD *)(v124 + 8) = 0;
          if (v125)
          {
            do
            {
              v126 = __ldaxr(v125);
              v127 = v126 - 1;
            }
            while (__stlxr(v127, v125));
            if (!v127)
            {
              atomic_store(1u, v125);
              WTF::fastFree((WTF *)v125, v92);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v121 - 16), v92);
  }

  v129 = v210;
  v130 = v210;
  do
  {
    v132 = *(v130 - 2);
    v130 -= 2;
    v131 = v132;
    v133 = *((unsigned int *)v130 + 3);
    if ((_DWORD)v133)
    {
      v134 = 32 * v133;
      v135 = (char *)v131 + 8;
      do
      {
        v136 = *((unsigned int *)v135 + 2);
        if ((_DWORD)v136 != -1)
          ((void (*)(WTF **, char *))off_1E0FD1F08[v136])(&v196, v135);
        *((_DWORD *)v135 + 2) = -1;
        v135 += 32;
        v134 -= 32;
      }
      while (v134);
      v131 = *v130;
    }
    if (v131)
    {
      *(v129 - 2) = 0;
      *((_DWORD *)v129 - 2) = 0;
      WTF::fastFree(v131, v128);
    }
    v129 = v130;
  }
  while (v130 != (WTF **)v209);
  if (HIDWORD(v221[1]))
  {
    v137 = (id *)v221[0];
    v138 = 8 * HIDWORD(v221[1]);
    do
    {

      v138 -= 8;
    }
    while (v138);
  }
  v139 = v221[0];
  if (v221[0])
  {
    v221[0] = 0;
    LODWORD(v221[1]) = 0;
    WTF::fastFree(v139, v128);
  }
  if (HIDWORD(v220[1]))
  {
    v140 = (id *)v220[0];
    v141 = 8 * HIDWORD(v220[1]);
    do
    {

      v141 -= 8;
    }
    while (v141);
  }
  v142 = v220[0];
  if (v220[0])
  {
    v220[0] = 0;
    LODWORD(v220[1]) = 0;
    WTF::fastFree(v142, v128);
  }
  if (HIDWORD(v219[1]))
  {
    v143 = (id *)v219[0];
    v144 = 8 * HIDWORD(v219[1]);
    do
    {

      v144 -= 8;
    }
    while (v144);
  }
  v145 = v219[0];
  if (v219[0])
  {
    v219[0] = 0;
    LODWORD(v219[1]) = 0;
    WTF::fastFree(v145, v128);
  }
  if (HIDWORD(v218[1]))
  {
    v146 = (id *)v218[0];
    v147 = 8 * HIDWORD(v218[1]);
    do
    {

      v147 -= 8;
    }
    while (v147);
  }
  v148 = v218[0];
  if (v218[0])
  {
    v218[0] = 0;
    LODWORD(v218[1]) = 0;
    WTF::fastFree(v148, v128);
  }
  if (HIDWORD(v217[1]))
  {
    v149 = (id *)v217[0];
    v150 = 8 * HIDWORD(v217[1]);
    do
    {

      v150 -= 8;
    }
    while (v150);
  }
  v151 = v217[0];
  if (v217[0])
  {
    v217[0] = 0;
    LODWORD(v217[1]) = 0;
    WTF::fastFree(v151, v128);
  }
  if (HIDWORD(v216[1]))
  {
    v152 = (id *)v216[0];
    v153 = 8 * HIDWORD(v216[1]);
    do
    {

      v153 -= 8;
    }
    while (v153);
  }
  v154 = v216[0];
  if (v216[0])
  {
    v216[0] = 0;
    LODWORD(v216[1]) = 0;
    WTF::fastFree(v154, v128);
  }
  if (HIDWORD(v215[1]))
  {
    v155 = (id *)v215[0];
    v156 = 8 * HIDWORD(v215[1]);
    do
    {

      v156 -= 8;
    }
    while (v156);
  }
  v157 = v215[0];
  if (v215[0])
  {
    v215[0] = 0;
    LODWORD(v215[1]) = 0;
    WTF::fastFree(v157, v128);
  }
  if (HIDWORD(v214[1]))
  {
    v158 = (id *)v214[0];
    v159 = 8 * HIDWORD(v214[1]);
    do
    {

      v159 -= 8;
    }
    while (v159);
  }
  v160 = v214[0];
  if (v214[0])
  {
    v214[0] = 0;
    LODWORD(v214[1]) = 0;
    WTF::fastFree(v160, v128);
  }
  if (HIDWORD(v213[1]))
  {
    v161 = (id *)v213[0];
    v162 = 8 * HIDWORD(v213[1]);
    do
    {

      v162 -= 8;
    }
    while (v162);
  }
  v163 = v213[0];
  if (v213[0])
  {
    v213[0] = 0;
    LODWORD(v213[1]) = 0;
    WTF::fastFree(v163, v128);
  }
  if (HIDWORD(v212[1]))
  {
    v164 = (id *)v212[0];
    v165 = 8 * HIDWORD(v212[1]);
    do
    {

      v165 -= 8;
    }
    while (v165);
  }
  v166 = v212[0];
  if (v212[0])
  {
    v212[0] = 0;
    LODWORD(v212[1]) = 0;
    WTF::fastFree(v166, v128);
  }
  if (HIDWORD(v211[1]))
  {
    v167 = (id *)v211[0];
    v168 = 8 * HIDWORD(v211[1]);
    do
    {

      v168 -= 8;
    }
    while (v168);
  }
  v169 = v211[0];
  if (v211[0])
  {
    v211[0] = 0;
    LODWORD(v211[1]) = 0;
    WTF::fastFree(v169, v128);
  }
  if (HIDWORD(v210[1]))
  {
    v170 = (id *)v210[0];
    v171 = 8 * HIDWORD(v210[1]);
    do
    {

      v171 -= 8;
    }
    while (v171);
  }
  v172 = v210[0];
  if (v210[0])
  {
    v210[0] = 0;
    LODWORD(v210[1]) = 0;
    WTF::fastFree(v172, v128);
  }

  objc_msgSend(v180, "addObject:", v120);
  v173 = (void *)*((_QWORD *)v191 + 9);
  *((_QWORD *)v191 + 9) = 0;

  v174 = (void *)*((_QWORD *)v191 + 38);
  *((_QWORD *)v191 + 38) = 0;

  v175 = (void *)*((_QWORD *)v191 + 13);
  *((_QWORD *)v191 + 13) = 0;

  v176 = (void *)*((_QWORD *)v191 + 34);
  *((_QWORD *)v191 + 34) = 0;

  v177 = (void *)*((_QWORD *)v191 + 33);
  *((_QWORD *)v191 + 33) = 0;

  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v178 = objc_claimAutoreleasedReturnValue();
  v179 = (void *)*((_QWORD *)v191 + 23);
  *((_QWORD *)v191 + 23) = v178;

}

void sub_182463A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v62;

  v62 = LODWORD(STACK[0x268]);
  if ((_DWORD)v62 != -1)
  {
    ((void (*)(char *, unint64_t *))off_1E0FD1F08[v62])(&a61, &STACK[0x260]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN6WebGPU19RenderBundleEncoder6finishERK26WGPURenderBundleDescriptor_block_invoke(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned __int8 **v29;
  NSString *v30;
  WebGPU::RenderBundle *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;

  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 384))
  {
    v4 = *(void **)(v3 + 256);
    ++*(_DWORD *)v3;
    v34 = (_DWORD *)v3;
    WebGPU::RenderBundle::create(a2, v4, &v34, (__int128 *)(v3 + 312), *(_QWORD *)(v3 + 96), *(unsigned __int8 ***)(v3 + 8));
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder((WebGPU::RenderBundleEncoder *)v3);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  else
  {
    WebGPU::RenderBundleEncoder::endCurrentICB(*(id **)(a1 + 32));
    if (*(_DWORD *)(v3 + 200))
    {
      v6 = *(unsigned int *)(v3 + 204);
      if ((_DWORD)v6)
      {
        v7 = *(void ***)(v3 + 192);
        v8 = 40 * v6;
        do
        {
          v9 = *v7;
          v7 += 5;

          v8 -= 40;
        }
        while (v8);
        *(_DWORD *)(v3 + 204) = 0;
      }
      v10 = *(WTF **)(v3 + 192);
      if (v10)
      {
        *(_QWORD *)(v3 + 192) = 0;
        *(_DWORD *)(v3 + 200) = 0;
        WTF::fastFree(v10, v5);
      }
    }
    if (*(_DWORD *)(v3 + 216))
    {
      v11 = *(unsigned int *)(v3 + 220);
      if ((_DWORD)v11)
      {
        v12 = *(void ***)(v3 + 208);
        v13 = 40 * v11;
        do
        {
          v14 = *v12;
          v12 += 5;

          v13 -= 40;
        }
        while (v13);
        *(_DWORD *)(v3 + 220) = 0;
      }
      v15 = *(WTF **)(v3 + 208);
      if (v15)
      {
        *(_QWORD *)(v3 + 208) = 0;
        *(_DWORD *)(v3 + 216) = 0;
        WTF::fastFree(v15, v5);
      }
    }
    objc_msgSend(*(id *)(v3 + 80), "setMaxVertexBufferBindCount:", 0);
    objc_msgSend(*(id *)(v3 + 80), "setMaxFragmentBufferBindCount:", 0);
    v16 = *(void **)(v3 + 256);
    if (v16)
    {
      v33 = 0;
      WebGPU::RenderBundle::create(a2, v16, &v33, (__int128 *)(v3 + 312), *(_QWORD *)(v3 + 96), *(unsigned __int8 ***)(v3 + 8));
    }
    else if (*(_QWORD *)(v3 + 376))
    {
      v19 = *(_QWORD *)(v3 + 8);
      MEMORY[0x186DAB230](&v32);
      v20 = *(_QWORD *)(v19 + 32);
      v21 = 32 * *(unsigned int *)(v19 + 44);
      v22 = v20 + v21;
      while (v21)
      {
        v23 = *(_DWORD *)(v22 - 8);
        v22 -= 32;
        v21 -= 32;
        if (!v23)
        {
          v24 = v20 + v21;
          if (!*(_BYTE *)(v24 + 16))
          {
            v25 = v32;
            v32 = 0;
            *(_DWORD *)v24 = 1;
            *(_QWORD *)(v24 + 8) = v25;
            *(_BYTE *)(v24 + 16) = 1;
          }
          goto LABEL_30;
        }
      }
      v26 = *(_QWORD *)(v19 + 24);
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v26 + 16))(v26, 1, &v32);
        v27 = *(_QWORD *)(v19 + 24);
        *(_QWORD *)(v19 + 24) = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
LABEL_30:
      v28 = v32;
      v32 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WTF::StringImpl::destroy();
        else
          *v28 -= 2;
      }
      v29 = *(unsigned __int8 ***)(v3 + 8);
      v30 = (NSString *)*(id *)(v3 + 376);
      v31 = (WebGPU::RenderBundle *)WTF::fastMalloc((WTF *)0x78);
      WebGPU::RenderBundle::RenderBundle(v31, v29, v30);
      *a2 = (uint64_t)v31;

    }
    else
    {
      __break(0xC471u);
    }
  }
}

void sub_182464218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::RenderBundle::create(uint64_t *a1, void *a2, _DWORD **a3, __int128 *a4, uint64_t a5, unsigned __int8 **a6)
{
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WTF *v14;
  void *v15;
  id v16;
  _DWORD *v17;

  v16 = a2;
  v11 = WTF::fastMalloc((WTF *)0x78);
  v12 = v11;
  v13 = *a3;
  if (v13)
    ++*v13;
  v17 = v13;
  WebGPU::RenderBundle::RenderBundle(v11, v16, &v17, a4, a5, a6);
  *a1 = v12;
  if (v13)
  {
    if (*v13 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder((WebGPU::RenderBundleEncoder *)v13);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*v13;
    }
  }

}

void sub_182464340(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  WebGPU::RenderBundleEncoder *v9;
  WTF *v10;

  if (v9)
    WTF::RefCounted<WebGPU::RenderBundleEncoder>::deref(v9);
  WTF::fastFree(v10, a2);

  _Unwind_Resume(a1);
}

void sub_182464368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::replayCommands(WebGPU::RenderBundleEncoder *this, WebGPU::RenderPassEncoder *a2)
{
  id v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;

  if (*(_BYTE *)(*((_QWORD *)a2 + 19) + 76))
  {
    v2 = 0;
LABEL_3:

    return;
  }
  v2 = *((id *)a2 + 2);
  if (!v2 || !*((_QWORD *)this + 10))
    goto LABEL_3;
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);

  if (v5)
  {
    v7 = *((_QWORD *)a2 + 1);
    if (v7)
      goto LABEL_12;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a2;
    v8 = (unsigned int *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v7;
    if (!v8)
      goto LABEL_12;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (v10)
    {
      v7 = *((_QWORD *)a2 + 1);
      if (v7)
        goto LABEL_12;
    }
    else
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
      v7 = *((_QWORD *)a2 + 1);
      if (v7)
      {
        do
LABEL_12:
          v11 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v11 + 1, (unsigned int *)v7));
      }
    }
    v12 = (unsigned int *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v7;
    if (!v12)
      goto LABEL_16;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v6);
      WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
      v16 = (unsigned int *)*((_QWORD *)this + 37);
      *((_QWORD *)this + 37) = 0;
      if (v16)
      {
        do
        {
LABEL_17:
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, v15);
        }
      }
    }
    else
    {
LABEL_16:
      WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
      v16 = (unsigned int *)*((_QWORD *)this + 37);
      *((_QWORD *)this + 37) = 0;
      if (v16)
        goto LABEL_17;
    }
    v19 = (void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;

    v20 = (void *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;

    if (*((_BYTE *)this + 232))
    {
      v22 = *((_QWORD *)this + 28);
      if (v22)
      {
        v23 = *(unsigned int *)(v22 - 4);
        if ((_DWORD)v23)
        {
          v24 = v22 + 8;
          do
          {
            if (*(_DWORD *)(v24 - 8) != -2)
            {
              v25 = *(WTF **)v24;
              if (*(_QWORD *)v24)
              {
                *(_QWORD *)v24 = 0;
                *(_DWORD *)(v24 + 8) = 0;
                WTF::fastFree(v25, v21);
              }
            }
            v24 += 24;
            --v23;
          }
          while (v23);
        }
        WTF::fastFree((WTF *)(v22 - 16), v21);
      }
      *((_BYTE *)this + 232) = 0;
    }
  }
}

void WebGPU::RenderBundleEncoder::setBindGroup(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ResourceUsageAndRenderStage *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  ResourceUsageAndRenderStage *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  id v40;
  unsigned int v41;
  BOOL v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  unsigned int v54;
  unsigned int v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  __CFString *v68;
  void *v69;
  NSString *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  _DWORD *v75;
  int v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  char v83[8];
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  _DWORD *v92;

  v91 = a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderBundleEncoder::setBindGroup(uint32_t, const BindGroup &, std::optional<Vector<uint32_t>> &&)");
  v81 = (id)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)a1, (NSString *)v81) & 1) != 0)
  {

    return;
  }
  v80 = a3;
  v8 = *(_QWORD *)(a1 + 80);

  if (v8)
  {
    if (!*(_QWORD *)(v80 + 64) || (v9 = *(_QWORD *)(v80 + 40), !*(_QWORD *)(v9 + 8)) || v9 != *(_QWORD *)(a1 + 8))
    {
      WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, CFSTR("setBindGroup: invalid bind group"));
      return;
    }
    v78 = a4;
    WebGPU::RenderBundleEncoder::currentRenderCommand((WebGPU::RenderBundleEncoder *)a1);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v10;
    v12 = *(_DWORD *)(a1 + 60);
    if (a2 > v12)
      v12 = a2;
    *(_DWORD *)(a1 + 60) = v12;
    if (v10)
    {
      v77 = (void *)v10;
      if (*(_BYTE *)(v78 + 16) && (v76 = *(_DWORD *)(v78 + 12)) != 0)
      {
        if (*(_BYTE *)(a1 + 232))
          WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(a1 + 224), (int *)&v91, (uint64_t *)v78, (uint64_t)&v85);
      }
      else
      {
        v76 = 0;
      }
      v13 = *(_DWORD *)(v80 + 60);
      if (v13)
      {
        v14 = *(_QWORD *)(v80 + 48);
        v79 = v14 + 48 * v13;
        while (1)
        {
          v82 = (id)*(unsigned int *)(v14 + 28);
          if ((_DWORD)v82)
          {
            v15 = 0;
            v16 = 0;
            while (v16 < *(unsigned int *)(v14 + 28))
            {
              v17 = *(_QWORD *)(v14 + 16);
              v18 = [ResourceUsageAndRenderStage alloc];
              v19 = v17 + v15;
              v20 = *(_QWORD *)(v14 + 32);
              v21 = *(_QWORD *)(v14 + 40);
              v22 = *(unsigned int *)(v17 + v15);
              v23 = *(unsigned int *)(v17 + v15 + 4);
              v83[0] = 0;
              v84 = -1;
              v24 = *(unsigned int *)(v17 + v15 + 16);
              if ((_DWORD)v24 != -1)
              {
                ((void (*)(_DWORD **, char *, uint64_t))off_1E0FD1F20[v24])(&v92, v83, v19 + 8);
                v84 = v24;
              }
              v25 = -[ResourceUsageAndRenderStage initWithUsage:renderStages:entryUsage:binding:resource:](v18, "initWithUsage:renderStages:entryUsage:binding:resource:", v20, v21, v22, v23, v83);
              if (v84 != -1)
                ((void (*)(uint64_t *, char *))off_1E0FD1F08[v84])(&v85, v83);
              v84 = -1;
              if (v16 >= *(unsigned int *)(v14 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x182464BF0);
              }
              WebGPU::RenderBundleEncoder::addResource(a1, *(void **)(a1 + 184), *(void **)(*(_QWORD *)v14 + 8 * v16), v25);

              ++v16;
              v15 += 32;
              if (v82 == (id)v16)
                goto LABEL_28;
            }
            goto LABEL_87;
          }
LABEL_28:
          v26 = *(_QWORD *)(a1 + 296);
          if (v26)
          {
            if (*(_QWORD *)(v26 + 8))
            {
              v27 = *(unsigned int *)(v14 + 28);
              if ((_DWORD)v27)
                break;
            }
          }
LABEL_18:
          v14 += 48;
          if (v14 == v79)
            goto LABEL_38;
        }
        v28 = 0;
        v29 = 16;
        while (1)
        {
          if (v28 >= *(unsigned int *)(v14 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x182464BF8);
          }
          v30 = *(_QWORD *)(a1 + 296);
          if (v30)
            v30 = *(_QWORD *)(v30 + 8);
          v31 = (unsigned int *)(*(_QWORD *)(v14 + 16) + v29);
          v34 = *v31;
          v32 = v31 - 2;
          v33 = v34;
          v85 = v30;
          v86 = v30;
          v87 = v30;
          if (v34 == -1)
            break;
          v92 = &v85;
          ((void (*)(_DWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU17RenderPassEncoder17setCommandEncoderERKNS_7variantIJNS6_6RefPtrINS8_6BufferENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_IKNS8_11TextureViewENSD_ISJ_EENSF_ISJ_EEEENSB_IKNS8_15ExternalTextureENSD_ISO_EENSF_ISO_EEEEEEEE3__0JZNS9_17setCommandEncoderESU_E3__1ZNS9_17setCommandEncoderESU_E3__2EEEEEJRKNS0_6__implIJSH_SM_SR_EEEEEEDcOT_DpOT0____fmatrix[v33])(&v92, v32);
          ++v28;
          v29 += 32;
          if (v27 == v28)
            goto LABEL_18;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
        __break(1u);
LABEL_87:
        __break(0xC471u);
        JUMPOUT(0x182464BE8);
      }
LABEL_38:
      v35 = v80;
      v92 = (_DWORD *)v80;
      WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebGPU::BindGroup const*>((uint64_t *)(a1 + 240), (int *)&v91, &v92, (uint64_t)&v85);
      v36 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 92) - 1;
      v37 = v36 >= v91;
      v38 = v36 - v91;
      if (v37)
        v39 = v38;
      else
        v39 = v91;
      v40 = *(id *)(v80 + 16);
      v11 = v77;
      if (v40)
      {
        v41 = *(_DWORD *)(a1 + 204);

        v42 = v41 > v39;
        v35 = v80;
        if (v42)
        {
          v43 = *(void **)(a1 + 184);
          v44 = *(void **)(v80 + 16);
          v85 = 0;
          LODWORD(v86) = 0;
          WebGPU::RenderBundleEncoder::addResource(a1, v43, v44, 1, (uint64_t)&v85);
          if ((_DWORD)v86 != -1)
            ((void (*)(_DWORD **, uint64_t *))off_1E0FD1F08[v86])(&v92, &v85);
          v45 = *(id *)(v80 + 16);
          if (!*(_BYTE *)(v78 + 16))
            goto LABEL_82;
          v46 = v45;
          v47 = *(_QWORD *)v78;
          v48 = *(id *)(v80 + 16);
          v49 = objc_msgSend(v48, "length");
          if (*(_DWORD *)(a1 + 204) <= v39)
          {
            __break(0xC471u);
            JUMPOUT(0x182464C00);
          }
          v50 = v49;
          v51 = *(_QWORD *)(a1 + 192) + 40 * v39;
          v52 = *(void **)v51;
          *(_QWORD *)v51 = v46;

          *(_QWORD *)(v51 + 8) = 0;
          *(_DWORD *)(v51 + 16) = v76;
          *(_QWORD *)(v51 + 24) = v47;
          *(_QWORD *)(v51 + 32) = v50;

          v35 = v80;
        }
      }
      v53 = *(id *)(v35 + 24);
      if (!v53)
        goto LABEL_62;
      v54 = *(_DWORD *)(a1 + 220);
      v55 = v91;

      if (v54 <= v55)
        goto LABEL_62;
      v56 = *(void **)(a1 + 184);
      v57 = *(void **)(v80 + 24);
      v85 = 0;
      LODWORD(v86) = 0;
      WebGPU::RenderBundleEncoder::addResource(a1, v56, v57, 2, (uint64_t)&v85);
      if ((_DWORD)v86 != -1)
        ((void (*)(_DWORD **, uint64_t *))off_1E0FD1F08[v86])(&v92, &v85);
      v58 = *(id *)(v80 + 24);
      if (!*(_BYTE *)(v78 + 16))
        goto LABEL_82;
      v59 = v58;
      v60 = *(_QWORD *)v78;
      v61 = *(id *)(v80 + 24);
      v62 = objc_msgSend(v61, "length");
      if (*(_DWORD *)(a1 + 220) <= v91)
        goto LABEL_87;
      v63 = v62;
      v64 = *(_QWORD *)(a1 + 208) + 40 * v91;
      v65 = *(void **)v64;
      *(_QWORD *)v64 = v59;

      *(_QWORD *)(v64 + 8) = 0;
      *(_DWORD *)(v64 + 16) = v76;
      *(_QWORD *)(v64 + 24) = v60;
      *(_QWORD *)(v64 + 32) = v63;

LABEL_56:
      v11 = v77;
LABEL_62:

      return;
    }
    v66 = *(_QWORD *)(v80 + 64);
    if (v66 && (v67 = *(_QWORD *)(v80 + 40), *(_QWORD *)(v67 + 8)) && v67 == *(_QWORD *)(a1 + 8))
    {
      if (*(_DWORD *)(v67 + 88) > a2)
      {
        if (!*(_BYTE *)(v78 + 16)
          || (WebGPU::BindGroupLayout::errorValidatingDynamicOffsets(v66, *(_QWORD *)v78, *(unsigned int *)(v78 + 12), v80), (v69 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
        {
          if (*(_QWORD *)(v80 + 24))
          {
            v71 = objc_msgSend(*(id *)(a1 + 80), "maxFragmentBufferBindCount");
            if (v71 <= v91 + 2)
              v72 = v91 + 2;
            else
              v72 = v71;
            objc_msgSend(*(id *)(a1 + 80), "setMaxFragmentBufferBindCount:", v72);
          }
          if (*(_QWORD *)(v80 + 16))
            *(_BYTE *)(a1 + 385) = 0;
          LODWORD(v85) = v91;
          ++*(_DWORD *)v80;
          ++*(_DWORD *)a1;
          v86 = v80;
          v87 = a1;
          LOBYTE(v88) = 0;
          v90 = 0;
          if (*(_BYTE *)(v78 + 16))
          {
            v88 = *(_QWORD *)v78;
            v73 = *(_QWORD *)(v78 + 8);
            *(_QWORD *)v78 = 0;
            *(_QWORD *)(v78 + 8) = 0;
            v89 = v73;
            v90 = 1;
          }
          WTF::Function<BOOL ()(void)>::Function<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,void>((uint64_t *)&v92, (uint64_t)&v85);
          WebGPU::RenderBundleEncoder::recordCommand(a1, (unint64_t)&v92);
          v75 = v92;
          v92 = 0;
          if (v75)
            (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 8))(v75);
          WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0::~$_0((uint64_t)&v85, v74);
          goto LABEL_62;
        }
        v77 = v11;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPURenderBundleEncoder.setBindGroup: %@"), v69);
        v70 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, v70);

        goto LABEL_56;
      }
      v68 = CFSTR("setBindGroup: groupIndex >= limits.maxBindGroups");
    }
    else
    {
      v68 = CFSTR("setBindGroup: invalid bind group passed");
    }
    WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, &v68->isa);
    goto LABEL_62;
  }
}

void sub_182464C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, char a17, int a18, int a19, int a20,char a21,int a22,int a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t *WTF::Function<BOOL ()(void)>::Function<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v4 = &off_1E0FD2000;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v6;
  *(_BYTE *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 48) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(v4 + 32) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(v4 + 40) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(v4 + 44) = v7;
    *(_BYTE *)(v4 + 48) = 1;
  }
  *a1 = v4;
  return a1;
}

uint64_t WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  WTF *v3;
  WebGPU::RenderBundleEncoder *v4;
  WebGPU::BindGroup *v5;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = *(WebGPU::RenderBundleEncoder **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v4);
      WTF::fastFree(v7, v8);
      v5 = *(WebGPU::BindGroup **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v5)
        return a1;
      goto LABEL_8;
    }
    --*(_DWORD *)v4;
  }
  v5 = *(WebGPU::BindGroup **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v5)
    return a1;
LABEL_8:
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    return a1;
  }
  WebGPU::BindGroup::~BindGroup(v5, a2);
  WTF::fastFree(v9, v10);
  return a1;
}

void WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::RenderBundleEncoder *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5)
{
  uint64_t v10;
  void *v11;
  WebGPU::Buffer *v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WebGPU::RenderBundleEncoder *v26;
  void *v27;
  uint64_t v28;
  id v29;
  WebGPU::Buffer *v30;
  __int128 v31;
  unint64_t v32;
  WebGPU::RenderBundleEncoder *v33;
  uint64_t v34;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderBundleEncoder::setIndexBuffer(Buffer &, WGPUIndexFormat, uint64_t, uint64_t)");
  v29 = (id)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(a1, (NSString *)v29) & 1) != 0)
  {

    return;
  }
  v10 = *((_QWORD *)a1 + 10);

  if (v10)
  {
    ++*(_DWORD *)a2;
    v12 = (WebGPU::Buffer *)*((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = a2;
    v13 = a2;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebGPU::Buffer::~Buffer(v12, v11);
        WTF::fastFree(v14, v15);
        v13 = *((_QWORD *)a1 + 2);
        if (!v13)
        {
          __break(0xC471u);
          return;
        }
      }
      else
      {
        --*(_DWORD *)v12;
        v13 = a2;
      }
    }
    *((_QWORD *)a1 + 3) = a3 == 2;
    *((_QWORD *)a1 + 4) = a4;
    *((_QWORD *)a1 + 5) = a5;
    v16 = *((_QWORD *)a1 + 37);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(v17 + 152));
        v13 = *((_QWORD *)a1 + 2);
      }
    }
    v18 = *(id *)(v13 + 16);
    WebGPU::RenderBundleEncoder::currentRenderCommand(a1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      v20 = (void *)*((_QWORD *)a1 + 23);
      ++*(_DWORD *)a2;
      v30 = (WebGPU::Buffer *)a2;
      LODWORD(v31) = 0;
      WebGPU::RenderBundleEncoder::addResource((uint64_t)a1, v20, v18, 1, (uint64_t)&v30);
      if ((_DWORD)v31 != -1)
        ((void (*)(uint64_t *, WebGPU::Buffer **))off_1E0FD1F08[v31])(&v34, &v30);
      goto LABEL_25;
    }
    v21 = *(_QWORD *)(a2 + 40);
    if (a5 == -1)
    {
      if (v21 < a4)
      {
LABEL_24:
        WebGPU::RenderBundleEncoder::makeInvalid(a1, CFSTR("setIndexBuffer: computed size overflows"));
LABEL_25:

        return;
      }
      a5 = v21 - a4;
    }
    if (!__CFADD__(a4, a5) && a4 + a5 <= v21)
    {
      if ((*(_BYTE *)(a2 + 48) & 0x10) == 0)
        goto LABEL_23;
      v22 = 3;
      if (a3 == 1)
        v22 = 1;
      if ((v22 & a4) == 0)
      {
        if ((*(_BYTE *)(a2 + 52) == 4 || *(_QWORD *)(a2 + 16))
          && (v23 = *(_QWORD *)(a2 + 256), *(_QWORD *)(v23 + 8))
          && v23 == *((_QWORD *)a1 + 1))
        {
          ++*(_DWORD *)a2;
          v30 = (WebGPU::Buffer *)a2;
          LODWORD(v31) = a3;
          *((_QWORD *)&v31 + 1) = a4;
          v32 = a5;
          ++*(_DWORD *)a1;
          v33 = a1;
          v24 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v24 = &off_1E0FD2028;
          *(_QWORD *)(v24 + 8) = v30;
          v25 = v32;
          *(_OWORD *)(v24 + 16) = v31;
          *(_QWORD *)(v24 + 32) = v25;
          v26 = v33;
          v30 = 0;
          v33 = 0;
          v34 = v24;
          *(_QWORD *)(v24 + 40) = v26;
          WebGPU::RenderBundleEncoder::recordCommand((uint64_t)a1, (unint64_t)&v34);
          v28 = v34;
          v34 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0::~$_0(&v30, v27);
        }
        else
        {
          WebGPU::RenderBundleEncoder::makeInvalid(a1, CFSTR("setIndexBuffer: buffer is not valid"));
        }
      }
      else
      {
LABEL_23:
        WebGPU::RenderBundleEncoder::makeInvalid(a1, CFSTR("setIndexBuffer: validation failed"));
      }
      goto LABEL_25;
    }
    goto LABEL_24;
  }
}

void sub_1824651F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WebGPU::Buffer *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  uint64_t v18;

  v18 = a16;
  a16 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0::~$_0(&a11, a2);

  _Unwind_Resume(a1);
}

void sub_182465230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182465240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182465250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *, uint64_t *))off_1E0FD1F08[v7])(va1, (uint64_t *)va);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_182465294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

WebGPU::Buffer **WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0::~$_0(WebGPU::Buffer **a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  v3 = a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      v4 = *a1;
      *a1 = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = *a1;
  *a1 = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

BOOL WebGPU::RenderBundleEncoder::icbNeedsToBeSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  id v8;

  if (*(_BYTE *)(a1 + 384))
    return 0;
  v6 = *(_QWORD *)(a1 + 296);
  if (v6)
    LOBYTE(v6) = *(_QWORD *)(v6 + 8) != 0;
  result = 0;
  if (a2 != a3 && (v6 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 92) == *(_DWORD *)(a3 + 92)
      && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a3 + 64)
      && *(_QWORD *)(a2 + 56) == *(_QWORD *)(a3 + 56)
      && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a3 + 72)
      && (v7 = *(_QWORD *)(a3 + 112),
          v8 = *(id *)(a2 + 112),
          LOBYTE(v7) = objc_msgSend(v8, "isEqual:", v7),
          v8,
          (v7 & 1) != 0)
      && *(float *)(a2 + 80) == *(float *)(a3 + 80)
      && *(float *)(a2 + 84) == *(float *)(a3 + 84))
    {
      return *(float *)(a2 + 88) != *(float *)(a3 + 88);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_182465440(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderBundleEncoder *this, const WebGPU::RenderPipeline *a2)
{
  uint64_t v4;
  id *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  uint64_t v17;
  __CFString *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  WebGPU::RenderBundleEncoder *v23;
  void *v24;
  _QWORD *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  WebGPU::RenderPipeline *v30;
  WTF *v31;
  void *v32;
  id v33;
  NSString *v34;
  WebGPU::RenderPipeline *v35;
  WebGPU::RenderBundleEncoder *v36;
  _QWORD *v37;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderBundleEncoder::setPipeline(const RenderPipeline &)");
  v34 = (NSString *)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, v34) & 1) != 0)
    goto LABEL_2;
  v4 = *((_QWORD *)this + 10);

  if (v4)
  {
    WebGPU::RenderBundleEncoder::currentRenderCommand(this);
    v34 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v34)
    {
      v5 = (id *)((char *)this + 104);
      v6 = *((id *)this + 13);
      v7 = *((id *)this + 14);
      v8 = *((_QWORD *)this + 15);
      v9 = *((_QWORD *)this + 16);
      v10 = *((_QWORD *)this + 17);
      v12 = *((float *)this + 36);
      v11 = *((float *)this + 37);
      v13 = *((float *)this + 38);
      objc_storeStrong((id *)this + 13, *((id *)a2 + 2));
      objc_storeStrong((id *)this + 14, *((id *)a2 + 15));
      *(int8x16_t *)((char *)this + 120) = vextq_s8(*(int8x16_t *)((char *)a2 + 56), *(int8x16_t *)((char *)a2 + 56), 8uLL);
      *((_QWORD *)this + 17) = *((_QWORD *)a2 + 9);
      *((_QWORD *)this + 20) = *((_QWORD *)a2 + 4);
      *((_QWORD *)this + 18) = *((_QWORD *)a2 + 10);
      *((_DWORD *)this + 38) = *((_DWORD *)a2 + 22);
      *((_DWORD *)this + 97) = *((_DWORD *)a2 + 23);
      v14 = *((_QWORD *)this + 37);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          WebGPU::RenderPassEncoder::errorValidatingPipeline(v15, (uint64_t)a2);
          v16 = (NSString *)objc_claimAutoreleasedReturnValue();
          if (v16)
          {
            WebGPU::RenderBundleEncoder::makeInvalid(this, v16);

LABEL_2:
            return;
          }
          v19 = (_QWORD *)*((_QWORD *)this + 37);
          if (v19)
            v19 = (_QWORD *)v19[1];
          if (*(_BYTE *)(v19[19] + 76))
            v20 = 0;
          else
            v20 = (void *)v19[2];
          v26 = v20;
          v33 = *v5;
          if (v33 && v6 != *v5)
            objc_msgSend(v26, "setRenderPipelineState:", v33);
          v27 = *((id *)this + 14);
          v28 = v27;
          if (v27 && v7 != v27)
            objc_msgSend(v26, "setDepthStencilState:", v27);
          if (v8 != *((_QWORD *)this + 15))
            objc_msgSend(v26, "setCullMode:");
          if (v9 != *((_QWORD *)this + 16))
            objc_msgSend(v26, "setFrontFacingWinding:");
          if (v10 != *((_QWORD *)this + 17))
            objc_msgSend(v26, "setDepthClipMode:");
          if (v12 != *((float *)this + 36) || v11 != *((float *)this + 37) || v13 != *((float *)this + 38))
            objc_msgSend(v26, "setDepthBias:slopeScale:clamp:");

        }
      }

      goto LABEL_46;
    }
    if (*((_QWORD *)a2 + 2) && (v17 = *((_QWORD *)a2 + 3), *(_QWORD *)(v17 + 8)) && v17 == *((_QWORD *)this + 1))
    {
      if (WebGPU::RenderPipeline::validateRenderBundle((uint64_t)a2, (uint64_t)this + 312))
      {
        if (*((_DWORD *)a2 + 23) != -1)
          *((_BYTE *)this + 384) = 1;
        v21 = *((_QWORD *)this + 6);
        if (v21
          && *((_QWORD *)this + 12)
          && WebGPU::RenderBundleEncoder::icbNeedsToBeSplit((uint64_t)this, v21, (uint64_t)a2)
          && !*((_BYTE *)this + 385))
        {
          WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
        }
        ++*(_DWORD *)a2;
        ++*(_DWORD *)this;
        v35 = a2;
        v36 = this;
        v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v22 = &off_1E0FD2050;
        v22[1] = v35;
        v23 = v36;
        v35 = 0;
        v36 = 0;
        v22[2] = v23;
        v37 = v22;
        WebGPU::RenderBundleEncoder::recordCommand((uint64_t)this, (unint64_t)&v37);
        v25 = v37;
        v37 = 0;
        if (v25)
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
        WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0::~$_0(&v35, v24);
LABEL_46:

        ++*(_DWORD *)a2;
        v30 = (WebGPU::RenderPipeline *)*((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = a2;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
          {
            WebGPU::RenderPipeline::~RenderPipeline(v30, v29);
            WTF::fastFree(v31, v32);
          }
          else
          {
            --*(_DWORD *)v30;
          }
        }
        return;
      }
      v18 = CFSTR("setPipeline: validation failed");
    }
    else
    {
      v18 = CFSTR("setPipeline: invalid pipeline passed");
    }
    WebGPU::RenderBundleEncoder::makeInvalid(this, &v18->isa);
    goto LABEL_2;
  }
}

void sub_182465830(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, WebGPU::RenderPipeline *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  void *v18;

  v17 = a16;
  a16 = 0;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0::~$_0(&a13, v18);

    _Unwind_Resume(a1);
  }
  WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0::~$_0(&a13, a2);

  _Unwind_Resume(a1);
}

void sub_182465880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1824658D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1824658EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

WebGPU::RenderPipeline **WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0::~$_0(WebGPU::RenderPipeline **a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::RenderPipeline *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      v4 = *a1;
      *a1 = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = *a1;
  *a1 = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

void WebGPU::RenderBundleEncoder::setVertexBuffer(WebGPU::RenderBundleEncoder *this, unsigned int a2, WebGPU::Buffer *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  __CFString *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebGPU::Buffer *v48;
  WTF *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  void *v60;
  id v61;
  WebGPU::Buffer *v62;
  WebGPU::Buffer *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderBundleEncoder::setVertexBuffer(uint32_t, Buffer *, uint64_t, uint64_t)");
  v61 = (id)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, (NSString *)v61) & 1) != 0)
  {

    return;
  }
  v10 = *((_QWORD *)this + 10);

  if (v10)
  {
    v11 = *((_DWORD *)this + 14);
    if (v11 <= a2)
      v11 = a2;
    *((_DWORD *)this + 14) = v11;
    WebGPU::RenderBundleEncoder::currentRenderCommand(this);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v14 = (uint64_t *)((char *)this + 64);
      v13 = *((_QWORD *)this + 8);
      if (a3)
      {
        if (v13
          || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)this + 8, 8u, 0), (v13 = *v14) != 0))
        {
          v15 = *(_DWORD *)(v13 - 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
        v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
        v18 = v15 & (v17 ^ HIWORD(v17));
        v19 = (unsigned int *)(v13 + 16 * v18);
        v20 = *v19;
        if (*v19 != -1)
        {
          v21 = 0;
          v22 = 1;
          while (v20 != a2)
          {
            if (v20 == -2)
              v21 = v19;
            v18 = (v18 + v22) & v15;
            v19 = (unsigned int *)(v13 + 16 * v18);
            v20 = *v19;
            ++v22;
            if (*v19 == -1)
            {
              if (v21)
              {
                *v21 = -1;
                *((_QWORD *)v21 + 1) = 0;
                --*(_DWORD *)(*v14 - 16);
                v19 = v21;
              }
              goto LABEL_19;
            }
          }
          goto LABEL_46;
        }
LABEL_19:
        *v19 = a2;
        *((_QWORD *)v19 + 1) = a5;
        if (*v14)
        {
          ++*(_DWORD *)(*v14 - 12);
          v23 = *v14;
          if (*v14)
            goto LABEL_21;
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          v23 = *v14;
          if (*v14)
          {
LABEL_21:
            v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
            v25 = *(unsigned int *)(v23 - 4);
            if (v25 <= 0x400)
              goto LABEL_22;
            goto LABEL_43;
          }
        }
        v24 = *(unsigned int *)(v23 - 16);
        v25 = *(unsigned int *)(v23 - 4);
        if (v25 <= 0x400)
        {
LABEL_22:
          if (3 * v25 <= 4 * v24)
          {
            if (!(_DWORD)v25)
            {
              v26 = 8;
LABEL_45:
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)this + 8, v26, v19);
              goto LABEL_46;
            }
LABEL_44:
            v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25));
            goto LABEL_45;
          }
LABEL_46:
          v40 = (void *)*((_QWORD *)this + 23);
          v41 = (void *)*((_QWORD *)a3 + 2);
          ++*(_DWORD *)a3;
          v62 = a3;
          LODWORD(v63) = 0;
          WebGPU::RenderBundleEncoder::addResource((uint64_t)this, v40, v41, 1, (uint64_t)&v62);
          if ((_DWORD)v63 != -1)
            ((void (*)(uint64_t *, WebGPU::Buffer **))off_1E0FD1F08[v63])(&v66, &v62);
          v42 = *((id *)a3 + 2);
          if (*((_DWORD *)this + 51) <= a2)
          {
            __break(0xC471u);
            return;
          }
          v43 = *((_QWORD *)this + 24) + 40 * a2;
          v44 = *(void **)v43;
          *(_QWORD *)v43 = v42;

          *(_QWORD *)(v43 + 8) = a4;
          *(_DWORD *)(v43 + 16) = 0;
          *(_QWORD *)(v43 + 24) = 0;
          *(_QWORD *)(v43 + 32) = a5;
          v45 = *((_QWORD *)this + 37);
          if (v45)
          {
            v46 = *(_QWORD *)(v45 + 8);
            if (v46)
              WebGPU::Buffer::setCommandEncoder(a3, *(WebGPU::CommandEncoder **)(v46 + 152));
          }
          goto LABEL_81;
        }
LABEL_43:
        if (v25 <= 2 * v24)
          goto LABEL_44;
        goto LABEL_46;
      }
      if (v13)
      {
        v29 = *(_DWORD *)(v13 - 8);
        v30 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
        v31 = (v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11);
        v32 = v29 & (v31 ^ HIWORD(v31));
        v33 = *(_DWORD *)(v13 + 16 * v32);
        if (v33 != a2)
        {
          v34 = 1;
          while (v33 != -1)
          {
            v32 = ((_DWORD)v32 + v34) & v29;
            v33 = *(_DWORD *)(v13 + 16 * v32);
            ++v34;
            if (v33 == a2)
              goto LABEL_68;
          }
          v32 = *(unsigned int *)(v13 - 4);
        }
LABEL_68:
        if (v32 != *(_DWORD *)(v13 - 4))
        {
          *(_DWORD *)(v13 + 16 * v32) = -2;
          ++*(_DWORD *)(*v14 - 16);
          v53 = *v14;
          v54 = *v14 ? *(_DWORD *)(v53 - 12) - 1 : -1;
          *(_DWORD *)(v53 - 12) = v54;
          v55 = *v14;
          if (*v14)
          {
            v56 = 6 * *(_DWORD *)(v55 - 12);
            v57 = *(_DWORD *)(v55 - 4);
            v58 = v56 < v57 && v57 >= 9;
            if (v58)
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)this + 8, v57 >> 1, 0);
          }
        }
      }
      if (*((_DWORD *)this + 51) > a2)
      {
        v59 = *((_QWORD *)this + 24) + 40 * a2;
        v60 = *(void **)v59;
        *(_QWORD *)v59 = 0;

        *(_OWORD *)(v59 + 24) = 0u;
        *(_OWORD *)(v59 + 8) = 0u;
      }
LABEL_81:

      return;
    }
    if (a3)
    {
      if (*((_BYTE *)a3 + 52) != 4 && !*((_QWORD *)a3 + 2)
        || (v27 = *((_QWORD *)a3 + 32), !*(_QWORD *)(v27 + 8))
        || v27 != *((_QWORD *)this + 1))
      {
        v28 = CFSTR("setVertexBuffer: buffer is not valid");
LABEL_31:
        WebGPU::RenderBundleEncoder::makeInvalid(this, &v28->isa);
        goto LABEL_81;
      }
      if (a5 == -1)
      {
        v51 = *((_QWORD *)a3 + 5);
        v58 = v51 >= a4;
        v52 = v51 - a4;
        if (!v58)
        {
LABEL_66:
          v28 = CFSTR("setVertexBuffer: size overflowed");
          goto LABEL_31;
        }
        a5 = v52;
      }
      if (__CFADD__(a4, a5) || a4 + a5 > *((_QWORD *)a3 + 5))
        goto LABEL_66;
      v28 = CFSTR("setVertexBuffer: validation failed");
      if (*(_DWORD *)(v27 + 152) <= a2 || (a4 & 3) != 0 || (*((_DWORD *)a3 + 12) & 0x20) == 0)
        goto LABEL_31;
      *((_BYTE *)this + 385) = 0;
      LODWORD(v62) = a2;
      ++*(_DWORD *)a3;
    }
    else
    {
      *((_BYTE *)this + 385) = 0;
      LODWORD(v62) = a2;
    }
    v63 = a3;
    *(_QWORD *)&v64 = a4;
    ++*(_DWORD *)this;
    *((_QWORD *)&v64 + 1) = a5;
    v35 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v35 = &off_1E0FD2078;
    *(_DWORD *)(v35 + 8) = a2;
    *(_QWORD *)(v35 + 16) = v63;
    *(_OWORD *)(v35 + 24) = v64;
    v63 = 0;
    v65 = 0;
    v66 = v35;
    *(_QWORD *)(v35 + 40) = this;
    v37 = *((unsigned int *)this + 45);
    if ((_DWORD)v37 == *((_DWORD *)this + 44))
    {
      v38 = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 168, v37 + 1, (unint64_t)&v66);
      v37 = *((unsigned int *)this + 45);
      v39 = (uint64_t *)(*((_QWORD *)this + 21) + 8 * v37);
      v35 = *(_QWORD *)v38;
    }
    else
    {
      v39 = (uint64_t *)(*((_QWORD *)this + 21) + 8 * v37);
      v38 = (char *)&v66;
    }
    *(_QWORD *)v38 = 0;
    *v39 = v35;
    *((_DWORD *)this + 45) = v37 + 1;
    v47 = v66;
    v66 = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    v48 = v63;
    v63 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
      {
        WebGPU::Buffer::~Buffer(v48, v36);
        WTF::fastFree(v49, v50);
      }
      else
      {
        --*(_DWORD *)v48;
      }
    }
    goto LABEL_81;
  }
}

void sub_182465F38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182465F48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  uint64_t v18;
  void *v19;

  v18 = a16;
  a16 = 0;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0::~$_0((uint64_t)&a11, v19);

    _Unwind_Resume(a1);
  }
  WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0::~$_0((uint64_t)&a11, a2);

  _Unwind_Resume(a1);
}

void sub_182465F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182465FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182465FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182465FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t *))off_1E0FD1F08[v7])(va1, (uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_182465FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0::~$_0(uint64_t a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  v3 = *(WebGPU::RenderBundleEncoder **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v8, v9);
      v4 = *(WebGPU::Buffer **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = *(WebGPU::Buffer **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v6, v7);
  return a1;
}

_DWORD *wgpuRenderBundleEncoderReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::RenderBundleEncoder *wgpuRenderBundleEncoderRelease(WebGPU::RenderBundleEncoder *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderBundleEncoder::~RenderBundleEncoder(result);
    return (WebGPU::RenderBundleEncoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void wgpuRenderBundleEncoderDrawIndexedIndirect(WebGPU::RenderBundleEncoder *a1, id *a2, unint64_t a3)
{
  if (a2)
    WebGPU::RenderBundleEncoder::drawIndexedIndirect(a1, a2, a3);
  else
    __break(0xC471u);
}

void wgpuRenderBundleEncoderDrawIndirect(WebGPU::RenderBundleEncoder *a1, id *a2, uint64_t a3)
{
  if (a2)
    WebGPU::RenderBundleEncoder::drawIndirect(a1, a2, a3);
  else
    __break(0xC471u);
}

WebGPU::RenderBundle *wgpuRenderBundleEncoderFinish(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned __int8 **v13;
  NSString *v14;
  WebGPU::RenderBundle *v15;
  int v18;
  uint64_t v19;
  void (**v20)(_QWORD *__return_ptr);
  uint64_t v21;
  const char *v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  _QWORD v26[5];

  if (*(_QWORD *)(a1 + 80) && !*(_QWORD *)(a1 + 88) && *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8))
  {
    v18 = *(unsigned __int8 *)(a1 + 384);
    if (!*(_BYTE *)(a1 + 384))
    {
      if (*(_BYTE *)(a1 + 385))
        v18 = 1;
      else
        v18 = *(_QWORD *)(a1 + 96) == 0;
    }
    v19 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 384) = v18 != 0;
    v26[0] = v19;
    v26[1] = 3221225472;
    v26[2] = ___ZN6WebGPU19RenderBundleEncoder6finishERK26WGPURenderBundleDescriptor_block_invoke;
    v26[3] = &__block_descriptor_40_e138__Ref_WebGPU::RenderBundle__WTF::RawPtrTraits_WebGPU::RenderBundle___WTF::DefaultRefDerefTraits_WebGPU::RenderBundle_____RenderBundle__8__0l;
    v26[4] = a1;
    v20 = (void (**)(_QWORD *__return_ptr))MEMORY[0x186DAB65C](v26);
    v20[2](&v24);
    v21 = v24;
    v22 = *(const char **)(a2 + 8);
    if (v22)
      strlen(v22);
    WTF::String::fromUTF8();
    WebGPU::RenderBundle::setLabel(v21, &v25);
    v23 = v25;
    v25 = 0;
    if (v23)
    {
      if (*v23 == 2)
        WTF::StringImpl::destroy();
      else
        *v23 -= 2;
    }
    *(_BYTE *)(a1 + 386) = 1;

    return (WebGPU::RenderBundle *)v24;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    MEMORY[0x186DAB230](v26, *(_QWORD *)(a1 + 376));
    v4 = *(_QWORD *)(v3 + 32);
    v5 = 32 * *(unsigned int *)(v3 + 44);
    v6 = v4 + v5;
    while (v5)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v6 -= 32;
      v5 -= 32;
      if (!v7)
      {
        v8 = v4 + v5;
        if (!*(_BYTE *)(v8 + 16))
        {
          v9 = v26[0];
          v26[0] = 0;
          *(_DWORD *)v8 = 1;
          *(_QWORD *)(v8 + 8) = v9;
          *(_BYTE *)(v8 + 16) = 1;
        }
        goto LABEL_11;
      }
    }
    v10 = *(_QWORD *)(v3 + 24);
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, 1, v26);
      v11 = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
LABEL_11:
    v12 = (_DWORD *)v26[0];
    v26[0] = 0;
    if (v12)
    {
      if (*v12 == 2)
        WTF::StringImpl::destroy();
      else
        *v12 -= 2;
    }
    v13 = *(unsigned __int8 ***)(a1 + 8);
    v14 = (NSString *)*(id *)(a1 + 376);
    v15 = (WebGPU::RenderBundle *)WTF::fastMalloc((WTF *)0x78);
    WebGPU::RenderBundle::RenderBundle(v15, v13, v14);

    return v15;
  }
}

void sub_182466350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebGPU::RenderBundle *a10, _DWORD *a11, uint64_t a12)
{
  void *v12;
  WTF *v14;
  void *v15;

  if (a11)
  {
    if (*a11 == 2)
      WTF::StringImpl::destroy();
    else
      *a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
    {
      WebGPU::RenderBundle::~RenderBundle(a10);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)a10;
    }
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderBundleEncoderInsertDebugMarker(WebGPU::RenderBundleEncoder *a1, char *__s)
{
  NSString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderBundleEncoder::insertDebugMarker(String &&)");
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(a1, v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_1824664AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuRenderBundleEncoderPopDebugGroup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderBundleEncoder::popDebugGroup()");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)a1, (NSString *)v4) & 1) != 0)
  {

  }
  else
  {
    v2 = *(_QWORD *)(a1 + 80);

    if (v2 && *(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
    {
      v3 = *(_QWORD *)(a1 + 88);
      if (v3)
        *(_QWORD *)(a1 + 88) = v3 - 1;
      else
        WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, CFSTR("validatePopDebugGroup failed"));
    }
  }
}

void sub_1824665A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderBundleEncoderPushDebugGroup(uint64_t a1, char *__s)
{
  void *v3;
  uint64_t v4;
  _DWORD *result;
  _DWORD *v6;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderBundleEncoder::pushDebugGroup(String &&)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)a1, (NSString *)v3) & 1) != 0)
  {

  }
  else
  {
    v4 = *(_QWORD *)(a1 + 80);

    if (v4 && *(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
      ++*(_QWORD *)(a1 + 88);
  }
  result = v6;
  if (v6)
  {
    if (*v6 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v6 -= 2;
  }
  return result;
}

void sub_1824666A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderBundleEncoderSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 72), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_18246679C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void **v26;
  void *v27;
  void *v28;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v16 = *(WTF **)a1;
        return (char *)v16 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        v12 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        v13 = 8 * v6;
        do
        {
          v14 = *(_QWORD *)((char *)v5 + v12);
          *(_QWORD *)((char *)v5 + v12) = 0;
          *(_QWORD *)(v11 + v12) = v14;

          v12 += 8;
        }
        while (v13 != v12);
        v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v15);
          v16 = *(WTF **)a1;
        }
        return (char *)v16 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x182466968);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v20 = a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    if (v20 >> 29)
      goto LABEL_35;
    v21 = *(unsigned int *)(a1 + 12);
    v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + 8) = v20;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v21)
    {
      v24 = (_QWORD *)v22;
      v25 = 8 * v21;
      v26 = (void **)v5;
      do
      {
        v27 = *v26;
        *v26 = 0;
        *v24++ = v27;
        v28 = *v26++;

        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

WebGPU::Buffer *WTF::RefCounted<WebGPU::Buffer>::deref(WebGPU::Buffer *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::Buffer::~Buffer(result, a2);
    return (WebGPU::Buffer *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebGPU::RenderPipeline *WTF::RefCounted<WebGPU::RenderPipeline>::deref(WebGPU::RenderPipeline *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderPipeline::~RenderPipeline(result, a2);
    return (WebGPU::RenderPipeline *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0,BOOL>::~CallableWrapper(_QWORD *a1)
{
  WebGPU::RenderBundleEncoder *v2;
  WTF *v4;
  void *v5;

  *a1 = &off_1E0FD1F60;
  v2 = (WebGPU::RenderBundleEncoder *)a1[3];
  a1[3] = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E0FD1F60;
  v3 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v5, v6);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    --*(_DWORD *)v3;
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0,BOOL>::call(uint64_t a1)
{
  WebGPU::RenderBundleEncoder::draw(*(WebGPU::RenderBundleEncoder **)(a1 + 24), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  return 1;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::IndexBufferAndIndexData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::IndexBufferAndIndexData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  _QWORD *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1;
    v6 = a3;
    v7 = *(_DWORD *)(v4 - 4);
    v8 = *(_DWORD *)(v4 - 12);
    result = WTF::fastMalloc((WTF *)(88 * a2 + 16));
    v11 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = a1;
    v6 = a3;
    v7 = 0;
    v8 = 0;
    result = WTF::fastMalloc((WTF *)(88 * a2 + 16));
    v11 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  v12 = result + 56;
  v13 = a2;
  do
  {
    *(_QWORD *)(v12 - 40) = -1;
    *(_OWORD *)v12 = 0uLL;
    *(_OWORD *)(v12 + 16) = 0uLL;
    *(_OWORD *)(v12 - 32) = 0uLL;
    *(_OWORD *)(v12 - 16) = 0uLL;
    *(_QWORD *)v12 = -1;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 3;
    v12 += 88;
    --v13;
  }
  while (v13);
LABEL_7:
  *v5 = v11;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*v5 - 8) = a2 - 1;
  *(_DWORD *)(*v5 - 16) = 0;
  *(_DWORD *)(*v5 - 12) = v8;
  if (v7)
  {
    v14 = v5;
    v15 = 0;
    v16 = v7;
    v17 = v6;
    do
    {
      v18 = (uint64_t *)(v4 + 88 * v15);
      v19 = *v18;
      if (*v18 != -2)
      {
        if (v19 == -1)
        {
          v20 = v4 + 88 * v15;
          v21 = *(unsigned int **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              v24 = v17;
              v25 = v14;
              WTF::fastFree((WTF *)v21, v10);
              v14 = v25;
              v17 = v24;
            }
          }
        }
        else
        {
          v26 = *v14;
          if (*v14)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = (uint64_t *)(v26 + 88 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (*v34 != -1);
          v35 = v33;
          v36 = v26 + 88 * v33;
          v39 = *(unsigned int **)(v36 + 8);
          v38 = (_QWORD *)(v36 + 8);
          v37 = v39;
          *v38 = 0;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v37);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v37));
            if (!v41)
            {
              atomic_store(1u, v37);
              v53 = v14;
              v54 = v17;
              WTF::fastFree((WTF *)v37, v10);
              v14 = v53;
              v17 = v54;
            }
          }
          *v34 = *v18;
          v42 = v4 + 88 * v15;
          v43 = *(_QWORD *)(v42 + 8);
          *(_QWORD *)(v42 + 8) = 0;
          *v38 = v43;
          v44 = v26 + 88 * v35;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)(v42 + 16);
          v45 = *(_OWORD *)(v42 + 32);
          v46 = *(_OWORD *)(v42 + 48);
          v47 = *(_OWORD *)(v42 + 64);
          *(_QWORD *)(v44 + 80) = *(_QWORD *)(v42 + 80);
          *(_OWORD *)(v44 + 48) = v46;
          *(_OWORD *)(v44 + 64) = v47;
          *(_OWORD *)(v44 + 32) = v45;
          v48 = *(unsigned int **)(v42 + 8);
          *(_QWORD *)(v42 + 8) = 0;
          if (v48)
          {
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              atomic_store(1u, v48);
              v51 = v17;
              v52 = v14;
              WTF::fastFree((WTF *)v48, v10);
              v14 = v52;
              v17 = v51;
            }
          }
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v10);
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0,BOOL>::~CallableWrapper(_QWORD *a1)
{
  WebGPU::RenderBundleEncoder *v2;
  WTF *v4;
  void *v5;

  *a1 = &off_1E0FD1F88;
  v2 = (WebGPU::RenderBundleEncoder *)a1[4];
  a1[4] = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E0FD1F88;
  v3 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v5, v6);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    --*(_DWORD *)v3;
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0,BOOL>::call(uint64_t a1)
{
  WebGPU::RenderBundleEncoder::drawIndexed(*(WebGPU::RenderBundleEncoder **)(a1 + 32), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24));
  return 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *a1 = &off_1E0FD1FB0;
  v3 = (WebGPU::RenderBundleEncoder *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      v4 = (WebGPU::Buffer *)a1[1];
      a1[1] = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = (WebGPU::Buffer *)a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E0FD1FB0;
  v3 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (WebGPU::Buffer *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v4)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v6, v7);
  v4 = (WebGPU::Buffer *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    goto LABEL_7;
LABEL_5:
  if (*(_DWORD *)v4 == 1)
  {
    WebGPU::Buffer::~Buffer(v4, a2);
    WTF::fastFree(v8, v9);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
  --*(_DWORD *)v4;
LABEL_7:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::call(uint64_t a1)
{
  WebGPU::RenderBundleEncoder::drawIndexedIndirect(*(WebGPU::RenderBundleEncoder **)(a1 + 24), *(id **)(a1 + 8), *(_QWORD *)(a1 + 16));
  return 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *a1 = &off_1E0FD1FD8;
  v3 = (WebGPU::RenderBundleEncoder *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      v4 = (WebGPU::Buffer *)a1[1];
      a1[1] = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = (WebGPU::Buffer *)a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E0FD1FD8;
  v3 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (WebGPU::Buffer *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v4)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v6, v7);
  v4 = (WebGPU::Buffer *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    goto LABEL_7;
LABEL_5:
  if (*(_DWORD *)v4 == 1)
  {
    WebGPU::Buffer::~Buffer(v4, a2);
    WTF::fastFree(v8, v9);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
  --*(_DWORD *)v4;
LABEL_7:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::call(uint64_t a1)
{
  WebGPU::RenderBundleEncoder::drawIndirect(*(WebGPU::RenderBundleEncoder **)(a1 + 24), *(id **)(a1 + 8), *(_QWORD *)(a1 + 16));
  return 1;
}

void WTF::Vector<WebGPU::RenderBundleEncoder::BufferAndOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  __int128 v15;
  void *v16;
  uint64_t v17;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  if (v4 >= a2)
    goto LABEL_16;
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= a2)
    v7 = a2;
  if (v7 < 0x6666667)
  {
    v8 = *(_DWORD *)(a1 + 12);
    v9 = 40 * v7;
    v11 = WTF::fastMalloc((WTF *)(40 * v7));
    *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v11;
    if (v8)
    {
      v12 = (WTF *)((char *)v5 + 40 * v8);
      v13 = v5;
      do
      {
        v14 = *(void **)v13;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)v11 = v14;
        v15 = *(_OWORD *)((char *)v13 + 8);
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)v13 + 24);
        *(_OWORD *)(v11 + 8) = v15;
        v16 = *(void **)v13;
        v13 = (WTF *)((char *)v13 + 40);

        v11 += 40;
      }
      while (v13 != v12);
      v11 = *(_QWORD *)a1;
    }
    if (!v5)
    {
      v5 = (WTF *)v11;
      if (v11)
      {
LABEL_17:
        v17 = *(unsigned int *)(a1 + 12);
        if (v17 != a2)
          bzero((char *)v5 + 40 * v17, 40 * ((40 * a2 - 40 * v17 - 40) / 0x28) + 40);
      }
LABEL_19:
      *(_DWORD *)(a1 + 12) = a2;
      return;
    }
    if ((WTF *)v11 == v5)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v5, v10);
    v5 = *(WTF **)a1;
LABEL_16:
    if (v5)
      goto LABEL_17;
    goto LABEL_19;
  }
  __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WebGPU::RenderBundleEncoder *v4;
  WebGPU::BindGroup *v5;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)a1 = &off_1E0FD2000;
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF **)(a1 + 32);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = *(WebGPU::RenderBundleEncoder **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v4);
      WTF::fastFree(v7, v8);
      v5 = *(WebGPU::BindGroup **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (!v5)
        return a1;
      goto LABEL_8;
    }
    --*(_DWORD *)v4;
  }
  v5 = *(WebGPU::BindGroup **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v5)
    return a1;
LABEL_8:
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    return a1;
  }
  WebGPU::BindGroup::~BindGroup(v5, a2);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WebGPU::RenderBundleEncoder *v4;
  WebGPU::BindGroup *v5;
  WTF *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E0FD2000;
  if (*((_BYTE *)this + 48))
  {
    v3 = (WTF *)*((_QWORD *)this + 4);
    if (v3)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v4)
  {
LABEL_7:
    v5 = (WebGPU::BindGroup *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v5)
      goto LABEL_10;
    goto LABEL_8;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    goto LABEL_7;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v4);
  WTF::fastFree(v7, v8);
  v5 = (WebGPU::BindGroup *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v5)
    goto LABEL_10;
LABEL_8:
  if (*(_DWORD *)v5 == 1)
  {
    WebGPU::BindGroup::~BindGroup(v5, a2);
    WTF::fastFree(v9, v10);
    v6 = this;
    return WTF::fastFree(v6, a2);
  }
  --*(_DWORD *)v5;
LABEL_10:
  v6 = this;
  return WTF::fastFree(v6, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,BOOL>::call(uint64_t a1)
{
  WebGPU::RenderBundleEncoder::setBindGroup(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 32);
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *a1 = &off_1E0FD2028;
  v3 = (WebGPU::RenderBundleEncoder *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      v4 = (WebGPU::Buffer *)a1[1];
      a1[1] = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = (WebGPU::Buffer *)a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E0FD2028;
  v3 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (WebGPU::Buffer *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v4)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v6, v7);
  v4 = (WebGPU::Buffer *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    goto LABEL_7;
LABEL_5:
  if (*(_DWORD *)v4 == 1)
  {
    WebGPU::Buffer::~Buffer(v4, a2);
    WTF::fastFree(v8, v9);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
  --*(_DWORD *)v4;
LABEL_7:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0,BOOL>::call(uint64_t a1)
{
  WebGPU::RenderBundleEncoder::setIndexBuffer(*(WebGPU::RenderBundleEncoder **)(a1 + 40), *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::RenderPipeline *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *a1 = &off_1E0FD2050;
  v3 = (WebGPU::RenderBundleEncoder *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      v4 = (WebGPU::RenderPipeline *)a1[1];
      a1[1] = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = (WebGPU::RenderPipeline *)a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::RenderPipeline *v4;
  WTF *v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E0FD2050;
  v3 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (WebGPU::RenderPipeline *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v4)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v6, v7);
  v4 = (WebGPU::RenderPipeline *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    goto LABEL_7;
LABEL_5:
  if (*(_DWORD *)v4 == 1)
  {
    WebGPU::RenderPipeline::~RenderPipeline(v4, a2);
    WTF::fastFree(v8, v9);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
  --*(_DWORD *)v4;
LABEL_7:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0,BOOL>::call(uint64_t a1)
{
  WebGPU::RenderBundleEncoder::setPipeline(*(WebGPU::RenderBundleEncoder **)(a1 + 16), *(const WebGPU::RenderPipeline **)(a1 + 8));
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *a1 = &off_1E0FD2078;
  v3 = (WebGPU::RenderBundleEncoder *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v8, v9);
      v4 = (WebGPU::Buffer *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  v4 = (WebGPU::Buffer *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebGPU::RenderBundleEncoder *v3;
  WebGPU::Buffer *v4;
  WTF *v5;
  WTF *v6;
  void *v7;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E0FD2078;
  v3 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (WebGPU::Buffer *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v9, v10);
  v4 = (WebGPU::Buffer *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_7;
LABEL_5:
  if (*(_DWORD *)v4 == 1)
  {
    WebGPU::Buffer::~Buffer(v4, a2);
    WTF::fastFree(v6, v7);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
  --*(_DWORD *)v4;
LABEL_7:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0,BOOL>::call(uint64_t a1)
{
  WebGPU::RenderBundleEncoder::setVertexBuffer(*(WebGPU::RenderBundleEncoder **)(a1 + 40), *(_DWORD *)(a1 + 8), *(WebGPU::Buffer **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return 0;
}

id WebGPU::RenderPassEncoder::RenderPassEncoder(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, void *a8, uint64_t a9, unsigned __int8 **a10)
{
  id v16;
  id v17;
  unsigned __int8 *v18;
  int v20;
  uint64_t *v21;
  id result;
  void *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WebGPU::TextureView *v50;
  WTF *v51;
  void *v52;
  _DWORD **v53;
  _DWORD *v54;
  WebGPU::TextureView *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  id *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WebGPU::CommandBuffer *v70;
  uint64_t v71;
  uint64_t v72;
  WebGPU::CommandBuffer *v73;
  id v74;
  TextureAndClearColor *v75;
  TextureAndClearColor *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t *v83;
  uint64_t v84;
  uint32x2_t *v85;
  uint64_t v86;
  WebGPU::CommandBuffer *v87;
  id v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  WTF *v93;
  void *v94;
  float v95;
  float v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  id v100;
  _DWORD *v101;
  int v102;
  unsigned int v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  id v107;
  id *v108;
  void *v109;
  id v110;
  void **v111;
  uint64_t *v112;
  _QWORD v114[3];

  v16 = a2;
  v17 = a8;
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v110 = v16;
  *(_QWORD *)(a1 + 16) = v110;
  *(_QWORD *)(a1 + 24) = 0;
  v18 = *a10;
  if (__ldaxr(*a10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v18);
LABEL_5:
  ++*((_QWORD *)v18 + 1);
  v20 = __ldxr(v18);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v18))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  *(_QWORD *)(a1 + 32) = a10;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = xmmword_18260F0E0;
  *(_QWORD *)(a1 + 104) = a4;
  *(_BYTE *)(a1 + 112) = a5;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 152) = a7;
  v21 = (uint64_t *)(a1 + 152);
  *(_BYTE *)(a1 + 113) = a6;
  *(_OWORD *)(a1 + 136) = 0u;
  ++*(_DWORD *)a7;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = 1065353216;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  result = v17;
  *(_QWORD *)(a1 + 240) = 0;
  v108 = (id *)(a1 + 240);
  v109 = result;
  *(_QWORD *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v111 = (void **)(a1 + 224);
  *(_DWORD *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  v25 = *(_OWORD *)(a3 + 16);
  v24 = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 296) = v26;
  *(_OWORD *)(a1 + 280) = v24;
  *(_OWORD *)(a1 + 264) = v25;
  v27 = (_QWORD *)(a1 + 304);
  v28 = *(_QWORD *)(a3 + 16);
  if (!v28)
  {
    *v27 = 0;
    *(_QWORD *)(a1 + 312) = 0;
    v35 = a1 + 320;
    v36 = *(__int128 **)(a3 + 32);
    if (v36)
      goto LABEL_15;
    goto LABEL_18;
  }
  v29 = *(_QWORD *)(a3 + 24);
  *v27 = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 316) = v28;
  if (v28 < 0x38E38E4)
  {
    v30 = 72 * v28;
    v31 = WTF::fastMalloc((WTF *)(72 * v28));
    *(_DWORD *)(a1 + 312) = v30 / 0x48;
    *(_QWORD *)(a1 + 304) = v31;
    do
    {
      *(_OWORD *)v31 = *(_OWORD *)v29;
      v32 = *(_OWORD *)(v29 + 16);
      v33 = *(_OWORD *)(v29 + 32);
      v34 = *(_OWORD *)(v29 + 48);
      *(_QWORD *)(v31 + 64) = *(_QWORD *)(v29 + 64);
      *(_OWORD *)(v31 + 32) = v33;
      *(_OWORD *)(v31 + 48) = v34;
      *(_OWORD *)(v31 + 16) = v32;
      v31 += 72;
      v29 += 72;
      v30 -= 72;
    }
    while (v30);
    v35 = a1 + 320;
    v36 = *(__int128 **)(a3 + 32);
    if (v36)
    {
LABEL_15:
      v37 = *v36;
      v38 = v36[1];
      *(_QWORD *)(v35 + 32) = *((_QWORD *)v36 + 4);
      *(_OWORD *)v35 = v37;
      *(_OWORD *)(v35 + 16) = v38;
      v39 = a9;
      v40 = a1 + 360;
      v41 = *(_OWORD **)(a3 + 48);
      if (v41)
      {
LABEL_16:
        *(_OWORD *)v40 = *v41;
        goto LABEL_20;
      }
LABEL_19:
      *(_QWORD *)v40 = 0;
      *(_QWORD *)(v40 + 8) = 0;
LABEL_20:
      *(_DWORD *)(a1 + 424) = 0;
      *(_OWORD *)(a1 + 376) = 0u;
      *(_OWORD *)(a1 + 392) = 0u;
      v112 = (uint64_t *)(a1 + 376);
      *(_OWORD *)(a1 + 408) = 0u;
      *(_QWORD *)(a1 + 432) = 0;
      *(_QWORD *)(a1 + 440) = v39;
      *(_QWORD *)(a1 + 456) = 0;
      *(_QWORD *)(a1 + 464) = 0;
      *(_QWORD *)(a1 + 448) = 0;
      if (*(_DWORD *)(a1 + 316))
        *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 304);
      if (*(_QWORD *)(a3 + 32))
        *(_QWORD *)(a1 + 280) = v35;
      if (*(_QWORD *)(a3 + 48))
        *(_QWORD *)(a1 + 296) = v40;
      if (*(_QWORD *)(a3 + 16))
      {
        v42 = 0;
        v43 = 8;
        do
        {
          v44 = *(_DWORD **)(*(_QWORD *)(a3 + 24) + v43);
          if (v44)
            ++*v44;
          v114[0] = v44;
          v45 = *(unsigned int *)(a1 + 388);
          if ((_DWORD)v45 == *(_DWORD *)(a1 + 384))
          {
            v46 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v45 + 1, (unint64_t)v114);
            v45 = *(unsigned int *)(a1 + 388);
            v47 = *(_QWORD *)(a1 + 376);
            v48 = *v46;
            *v46 = 0;
            *(_QWORD *)(v47 + 8 * v45) = v48;
          }
          else
          {
            v49 = *v112;
            v114[0] = 0;
            *(_QWORD *)(v49 + 8 * v45) = v44;
          }
          *(_DWORD *)(a1 + 388) = v45 + 1;
          v50 = (WebGPU::TextureView *)v114[0];
          v114[0] = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 1)
            {
              WebGPU::TextureView::~TextureView(v50, v23);
              WTF::fastFree(v51, v52);
            }
            else
            {
              --*(_DWORD *)v50;
            }
          }
          ++v42;
          v43 += 72;
        }
        while (v42 < *(_QWORD *)(a3 + 16));
      }
      v53 = *(_DWORD ***)(a3 + 32);
      if (v53)
      {
        v54 = *v53;
        if (v54)
          ++*v54;
        v55 = *(WebGPU::TextureView **)(a1 + 392);
        *(_QWORD *)(a1 + 392) = v54;
        if (v55)
        {
          if (*(_DWORD *)v55 == 1)
          {
            WebGPU::TextureView::~TextureView(v55, v23);
            WTF::fastFree(v93, v94);
            v56 = *v21;
            if (*(_BYTE *)(*v21 + 4) == 2)
            {
LABEL_46:
              objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", a1 + 152, a1 + 120, a1 + 40, a1 + 8, v17, a1 + 304, a1 + 184, a1 + 168, a1 + 160);
              v57 = objc_claimAutoreleasedReturnValue();
              v58 = *v111;
              *v111 = (void *)v57;

              objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v59 = objc_claimAutoreleasedReturnValue();
              v60 = *(void **)(a1 + 232);
              *(_QWORD *)(a1 + 232) = v59;

              v61 = *(_QWORD *)(a3 + 16);
              if (v61)
              {
                v62 = 0;
                v63 = 1;
                do
                {
                  v64 = *(_QWORD *)(a3 + 24);
                  v65 = *(_QWORD *)(v64 + 72 * v62 + 8);
                  if (v65)
                  {
                    v66 = (id *)(v65 + 16);
                    WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(v65 + 96), objc_msgSend(*(id *)(v65 + 16), "parentRelativeLevel"), objc_msgSend(*(id *)(v65 + 16), "parentRelativeSlice"), 1);
                    WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v65, 16);
                    *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(_QWORD *)(v65 + 96) + 32);
                    v67 = *(_QWORD *)(v64 + 72 * v62 + 24);
                    if (v67)
                    {
                      WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v67 + 104, a7, (uint64_t)v114);
                      v68 = *(_QWORD *)(v67 + 96);
                      if (*(_BYTE *)(v68 + 96) && !*(_BYTE *)(v68 + 97))
                      {
                        *(_BYTE *)(a7 + 76) = 1;
                        v69 = *(_QWORD *)(a7 + 56);
                        if (v69)
                        {
                          v70 = *(WebGPU::CommandBuffer **)(v69 + 8);
                          if (v70)
                            WebGPU::CommandBuffer::makeInvalid(v70, *(NSString **)(a7 + 64));
                        }
                        v68 = *(_QWORD *)(v67 + 96);
                      }
                      WebGPU::Texture::setPreviouslyCleared((uint64_t *)v68, objc_msgSend(*(id *)(v67 + 16), "parentRelativeLevel"), objc_msgSend(*(id *)(v67 + 16), "parentRelativeSlice"), 1);
                      WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v67, 16);
                    }
                    WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v65 + 104, a7, (uint64_t)v114);
                    v71 = *(_QWORD *)(v65 + 96);
                    if (*(_BYTE *)(v71 + 96))
                    {
                      if (*(_BYTE *)(v71 + 97))
                        goto LABEL_65;
                      *(_BYTE *)(a7 + 76) = 1;
                      v72 = *(_QWORD *)(a7 + 56);
                      if (v72)
                      {
                        v73 = *(WebGPU::CommandBuffer **)(v72 + 8);
                        if (v73)
                          WebGPU::CommandBuffer::makeInvalid(v73, *(NSString **)(a7 + 64));
                      }
                      v71 = *(_QWORD *)(v65 + 96);
                      if (*(_BYTE *)(v71 + 96))
LABEL_65:
                        v66 = (id *)(v71 + 8);
                    }
                    v74 = *v66;
                    *(_DWORD *)(a1 + 208) = objc_msgSend(v74, "width");
                    *(_DWORD *)(a1 + 212) = objc_msgSend(v74, "height");
                    if (v74)
                    {
                      v75 = -[TextureAndClearColor initWithTexture:]([TextureAndClearColor alloc], "initWithTexture:", v74);
                      v76 = v75;
                      if (*(_DWORD *)(v64 + 72 * v62 + 36) == 2)
                      {
                        if (*(_DWORD *)(v64 + 72 * v62 + 32) == 2)
                        {
                          -[TextureAndClearColor setClearColor:](v75, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
                          v77 = *v111;
                          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v63 - 1);
                          v78 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v77, "setObject:forKey:", v76, v78);

                        }
                      }
                      else
                      {
                        -[TextureAndClearColor setClearColor:](v75, "setClearColor:", *(double *)(v64 + 72 * v62 + 40), *(double *)(v64 + 72 * v62 + 48), *(double *)(v64 + 72 * v62 + 56), *(double *)(v64 + 72 * v62 + 64));
                      }
                      v79 = v64 + 72 * v62;
                      if (*(_BYTE *)(v79 + 20))
                        v80 = *(unsigned int *)(v79 + 16);
                      else
                        v80 = 0;
                      -[TextureAndClearColor setDepthPlane:](v76, "setDepthPlane:", v80);
                      v81 = *(void **)(a1 + 232);
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v63 - 1);
                      v82 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v81, "setObject:forKey:", v76, v82);

                    }
                    v61 = *(_QWORD *)(a3 + 16);
                  }
                  v62 = v63++;
                }
                while (v61 > v62);
              }
              v83 = *(uint64_t **)(a3 + 32);
              if (!v83)
                goto LABEL_126;
              v84 = *v83;
              WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(*v83 + 96), objc_msgSend(*(id *)(*v83 + 16), "parentRelativeLevel"), objc_msgSend(*(id *)(*v83 + 16), "parentRelativeSlice"), 1);
              WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v84 + 104, a7, (uint64_t)v114);
              v85 = *(uint32x2_t **)(v84 + 96);
              if (!v85[12].i8[0])
                goto LABEL_89;
              if (v85[12].i8[1])
                goto LABEL_82;
              *(_BYTE *)(a7 + 76) = 1;
              v86 = *(_QWORD *)(a7 + 56);
              if (v86)
              {
                v87 = *(WebGPU::CommandBuffer **)(v86 + 8);
                if (v87)
                  WebGPU::CommandBuffer::makeInvalid(v87, *(NSString **)(a7 + 64));
              }
              v85 = *(uint32x2_t **)(v84 + 96);
              if (v85[12].i8[0])
              {
LABEL_82:
                v88 = 0;
                v89 = *(_DWORD *)(v84 + 48);
                v90 = v85[4].i32[1];
                v91 = v85[5].i32[0];
                if (v90 != 2)
                  goto LABEL_83;
              }
              else
              {
LABEL_89:
                v88 = *(id *)(v84 + 16);

                v85 = *(uint32x2_t **)(v84 + 96);
                v89 = *(_DWORD *)(v84 + 48);
                v90 = v85[4].i32[1];
                v91 = v85[5].i32[0];
                if (v90 != 2)
                {
LABEL_83:
                  if (v90 == 1)
                  {
                    if (!WebGPU::Texture::physicalTextureExtent(1, v91, *(_QWORD *)&vmax_u32(vshl_u32(v85[2], (uint32x2_t)vneg_s32(vdup_n_s32(v89))), (uint32x2_t)0x100000001)))goto LABEL_98;
                  }
                  else if (v90)
                  {
                    if (!WebGPU::Texture::physicalTextureExtent(v90, v91, 0))
                      goto LABEL_98;
                  }
                  else
                  {
                    v92 = (unsigned __int32)v85[2].i32[0] >> v89;
                    if (v92 <= 1)
                      v92 = 1;
                    if (!WebGPU::Texture::physicalTextureExtent(0, v91, v92 | 0x100000000))
                      goto LABEL_98;
                  }
LABEL_97:
                  if (!*(_DWORD *)(a1 + 208))
                  {
                    *(_DWORD *)(a1 + 208) = objc_msgSend(v88, "width");
                    *(_DWORD *)(a1 + 212) = objc_msgSend(v88, "height");
                    *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(_QWORD *)(v84 + 96) + 32);
                    v95 = 0.0;
                    if (*((_DWORD *)v83 + 3) == 2)
                      goto LABEL_104;
                    goto LABEL_99;
                  }
LABEL_98:
                  v95 = 0.0;
                  if (*((_DWORD *)v83 + 3) == 2)
                    goto LABEL_104;
LABEL_99:
                  v95 = *((float *)v83 + 4);
                  if (v95 >= 0.0 && v95 <= 1.0 && *(_DWORD *)(v84 + 40) == 39)
                  {
                    v96 = v95 + 0.00000762951095;
                    v95 = nextafterf(v96, 1.0);
                  }
LABEL_104:
                  *(float *)(a1 + 424) = v95;
                  if (((objc_msgSend(v88, "pixelFormat") - 253) & 0xFFFFFFFFFFFFFFF7) != 0)
                  {
                    v97 = v88 && *((_DWORD *)v83 + 3) == 2 && *((_DWORD *)v83 + 2) == 2;
                    *(_BYTE *)(a1 + 468) = v97;
                    objc_storeStrong(v108, v88);
                    if (*((_DWORD *)v83 + 5))
                      v98 = 32;
                    else
                      v98 = 16;
                    v99 = *(_QWORD *)(v84 + 96);
                    v100 = *(id *)(v99 + 8);
                    WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v99, v100, v98, *(_DWORD *)(v84 + 48), *(unsigned int *)(v84 + 56), 2u);

                  }
                  v101 = (_DWORD *)(a1 + 448);
                  v102 = *((_DWORD *)v83 + 7);
                  if (v102 == 2)
                  {
                    *v101 = 0;
                    v103 = *(_DWORD *)(v84 + 40);
                    if (v103 > 0x2B)
                    {
LABEL_125:

LABEL_126:
                      *(float32x2_t *)(a1 + 460) = vcvt_f32_u32(*(uint32x2_t *)(a1 + 208));

                      return (id)a1;
                    }
                  }
                  else
                  {
                    *v101 = *((_DWORD *)v83 + 8);
                    v103 = *(_DWORD *)(v84 + 40);
                    if (v103 > 0x2B)
                      goto LABEL_125;
                  }
                  if (((1 << v103) & 0xA4000000000) != 0)
                  {
                    v104 = 0;
                    if (v88 && v102 == 2)
                      v104 = *((_DWORD *)v83 + 6) == 2;
                    *(_BYTE *)(a1 + 469) = v104;
                    objc_storeStrong(v108, v88);
                    if (*((_DWORD *)v83 + 9))
                      v105 = 32;
                    else
                      v105 = 16;
                    v106 = *(_QWORD *)(v84 + 96);
                    v107 = *(id *)(v106 + 8);
                    WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v106, v107, v105, *(_DWORD *)(v84 + 48), *(unsigned int *)(v84 + 56), 1u);

                  }
                  goto LABEL_125;
                }
              }
              if (!WebGPU::Texture::physicalTextureExtent(v90, v91, *(_QWORD *)&vmax_u32(vshl_u32(v85[2], (uint32x2_t)vneg_s32(vdup_n_s32(v89))), (uint32x2_t)0x100000001)))goto LABEL_98;
              goto LABEL_97;
            }
LABEL_45:
            *(_BYTE *)(v56 + 4) = 1;
            goto LABEL_46;
          }
          --*(_DWORD *)v55;
        }
      }
      v56 = *v21;
      if (*(_BYTE *)(*v21 + 4) == 2)
        goto LABEL_46;
      goto LABEL_45;
    }
LABEL_18:
    *(_QWORD *)(v35 + 32) = 0;
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
    v39 = a9;
    v40 = a1 + 360;
    v41 = *(_OWORD **)(a3 + 48);
    if (v41)
      goto LABEL_16;
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

void sub_1824682C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebGPU::CommandEncoder **a9, WTF **a10, WebGPU::Buffer **a11, _QWORD *a12, void *a13, WTF **a14, _QWORD *a15, uint64_t *a16, uint64_t *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;
  void *v25;
  void *v26;
  WebGPU::TextureView *v27;
  void *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  unsigned __int8 ***v36;
  WebGPU::RenderPipeline *v37;
  WebGPU::Buffer *v38;
  void *v39;

  WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v22 + 408), v24);
  WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v22 + 400), v25);
  v27 = *(WebGPU::TextureView **)(v22 + 392);
  *(_QWORD *)(v22 + 392) = 0;
  if (v27)
    WTF::RefCounted<WebGPU::TextureView>::deref(v27, v26);
  WTF::Vector<WTF::RefPtr<WebGPU::TextureView,WTF::RawPtrTraits<WebGPU::TextureView>,WTF::DefaultRefDerefTraits<WebGPU::TextureView>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a22, v26);
  v29 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v22 + 304) = 0;
    *(_DWORD *)(v22 + 312) = 0;
    WTF::fastFree(v29, v28);
  }

  v31 = *(_QWORD *)(v22 + 192);
  if (v31)
    WTF::fastFree((WTF *)(v31 - 16), v30);
  if (*a15)
    WTF::fastFree((WTF *)(*a15 - 16), v30);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(a16, v30);
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(a17, v32);
  WTF::Ref<WebGPU::CommandEncoder,WTF::RawPtrTraits<WebGPU::CommandEncoder>,WTF::DefaultRefDerefTraits<WebGPU::CommandEncoder>>::~Ref(a9);
  v34 = *(WTF **)(v22 + 136);
  if (v34)
  {
    *(_QWORD *)(v22 + 136) = 0;
    *(_DWORD *)(v22 + 144) = 0;
    WTF::fastFree(v34, v33);
    v35 = *a10;
    if (!*a10)
    {
LABEL_11:
      v36 = (unsigned __int8 ***)(v22 + 32);
      v37 = *(WebGPU::RenderPipeline **)(v22 + 72);
      *(_QWORD *)(v22 + 72) = 0;
      if (!v37)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else
  {
    v35 = *a10;
    if (!*a10)
      goto LABEL_11;
  }
  *(_QWORD *)(v22 + 120) = 0;
  *(_DWORD *)(v22 + 128) = 0;
  WTF::fastFree(v35, v33);
  v36 = (unsigned __int8 ***)(v22 + 32);
  v37 = *(WebGPU::RenderPipeline **)(v22 + 72);
  *(_QWORD *)(v22 + 72) = 0;
  if (!v37)
  {
LABEL_13:
    v38 = *a11;
    *a11 = 0;
    if (v38)
      WTF::RefCounted<WebGPU::Buffer>::deref(v38, v33);
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v36, v33);

    WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(a12, v39);
    _Unwind_Resume(a1);
  }
LABEL_12:
  WTF::RefCounted<WebGPU::RenderPipeline>::deref(v37, v33);
  goto LABEL_13;
}

void WebGPU::RenderPassEncoder::addResourceToActiveResources(uint64_t *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v6 = *(_DWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(id *)(v7 + 8);
  v9 = *(_DWORD *)(a2 + 48);
  v10 = *(unsigned int *)(a2 + 56);
  v12 = v8;
  if (v6)
  {
    WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, v7, v8, a3, v9, v10, v6);
  }
  else
  {
    WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, v7, v8, a3, v9, v10, 2u);

    v11 = *(_QWORD *)(a2 + 96);
    v12 = *(id *)(v11 + 8);
    WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, v11, v12, a3, *(_DWORD *)(a2 + 48), *(unsigned int *)(a2 + 56), 1u);
  }

}

void sub_1824685A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1824685B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1824685C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id *v5;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (id *)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2)

        v5 += 4;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebGPU::TextureView,WTF::RawPtrTraits<WebGPU::TextureView>,WTF::DefaultRefDerefTraits<WebGPU::TextureView>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebGPU::TextureView **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WebGPU::TextureView *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebGPU::TextureView ***)a1;
    v5 = 8 * v3;
    do
    {
      v8 = *v4;
      *v4 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebGPU::TextureView::~TextureView(v8, a2);
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WebGPU::RenderPassEncoder::RenderPassEncoder(uint64_t a1, _DWORD *a2, unsigned __int8 **a3, void *a4)
{
  id v7;
  unsigned __int8 *v8;
  int v10;
  id v11;
  uint64_t v12;

  v7 = a4;
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v8);
LABEL_5:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr(v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v8))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  *(_QWORD *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 3;
  *(_WORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  ++*a2;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  v11 = v7;
  *(_QWORD *)(a1 + 416) = v11;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_QWORD *)(a1 + 464) = 0;
  v12 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v12 + 4) != 2)
    *(_BYTE *)(v12 + 4) = 1;

  return a1;
}

void sub_18246881C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v5;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v5);
  _Unwind_Resume(a1);
}

void WebGPU::RenderPassEncoder::makeInvalid(WebGPU::RenderPassEncoder *this, NSString *a2)
{
  id *v4;
  NSString *v5;
  NSString *v6;

  v6 = a2;
  objc_storeStrong((id *)this + 52, a2);
  v4 = (id *)*((_QWORD *)this + 19);
  if (*((_QWORD *)this + 2))
  {
    objc_storeStrong(v4 + 8, a2);
    WebGPU::CommandEncoder::endEncoding(*((_QWORD *)this + 19), *((void **)this + 2));
    v5 = (NSString *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("RenderPassEncoder.makeInvalid, rason = %@"), v6);
    v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)v4, v5);
  }

}

void sub_1824688E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182468900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id WebGPU::RenderPassEncoder::renderCommandEncoder(id *this)
{
  if (*((_BYTE *)this[19] + 76))
    return 0;
  else
    return this[2];
}

void WebGPU::RenderPassEncoder::addResourceToActiveResources(uint64_t *a1, uint64_t a2, void *a3, int a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t EntryMapKey;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  void *v55;
  void *v56;
  NSString *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t *v60;
  int v61;
  uint64_t v62;

  v13 = a3;
  if (v13)
  {
    v14 = v13;
    if ((a4 & 0xFFFFFFF0) != 0)
    {
      v15 = v13;
      objc_msgSend(v15, "parentTexture");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      v14 = v15;
      if (v16)
      {
        v14 = v16;

        a5 = objc_msgSend(v15, "parentRelativeLevel");
        a6 = objc_msgSend(v15, "parentRelativeSlice");
      }

    }
    EntryMapKey = WebGPU::BindGroup::makeEntryMapKey(a5, a6, a7);
    v62 = EntryMapKey;
    v61 = a4;
    v20 = a1 + 21;
    v19 = a1[21];
    if (v19)
    {
      v21 = *(_DWORD *)(v19 - 8);
      v22 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = *(_QWORD *)(v19 + 16 * v25);
      if (v26 == a2)
      {
LABEL_11:
        if (v25 != *(_DWORD *)(v19 - 4))
        {
          v29 = v19 + 16 * v25;
          v31 = *(_QWORD *)(v29 + 8);
          v28 = (uint64_t *)(v29 + 8);
          v30 = v31;
          if (v31)
          {
            v32 = *(_DWORD *)(v30 - 8);
            v33 = (EntryMapKey + ~(EntryMapKey << 32)) ^ ((unint64_t)(EntryMapKey + ~(EntryMapKey << 32)) >> 22);
            v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
            v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
            v36 = v32 & ((v35 >> 31) ^ v35);
            v37 = *(_QWORD *)(v30 + 16 * v36);
            if (v37 != EntryMapKey)
            {
              v38 = 1;
              while (v37 != -1)
              {
                v36 = ((_DWORD)v36 + v38) & v32;
                v37 = *(_QWORD *)(v30 + 16 * v36);
                ++v38;
                if (v37 == EntryMapKey)
                  goto LABEL_54;
              }
              v36 = *(unsigned int *)(v30 - 4);
            }
LABEL_54:
            if (v36 != *(_DWORD *)(v30 - 4))
            {
              a4 |= *(_DWORD *)(v30 + 16 * v36 + 8);
              v61 = a4;
            }
          }
LABEL_13:
          if ((a4 & 4) != 0)
          {
            if (a4 == 4)
              goto LABEL_21;
          }
          else if (a4 == 128 || (a4 & 0x80) == 0)
          {
            if ((a4 & 0x200) != 0)
            {
              if (a4 == 512)
                goto LABEL_21;
            }
            else if (a4 == 16 || (a4 & 0x10) == 0)
            {
LABEL_21:
              if (v28)
              {
                WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::OptionSet<WebGPU::BindGroupEntryUsage>&>(&v59, v28, &v62, &v61);
LABEL_51:

                return;
              }
              v60 = 0;
              WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::OptionSet<WebGPU::BindGroupEntryUsage>&>(&v59, (uint64_t *)&v60, &v62, &v61);
              v39 = *v20;
              if (*v20
                || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1 + 21, 8u), (v39 = *v20) != 0))
              {
                v40 = *(_DWORD *)(v39 - 8);
              }
              else
              {
                v40 = 0;
              }
              v41 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
              v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
              v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
              v44 = v40 & ((v43 >> 31) ^ v43);
              v45 = (_QWORD *)(v39 + 16 * v44);
              v46 = *v45;
              if (*v45)
              {
                v47 = 0;
                v48 = 1;
                while (v46 != a2)
                {
                  if (v46 == -1)
                    v47 = v45;
                  v44 = (v44 + v48) & v40;
                  v45 = (_QWORD *)(v39 + 16 * v44);
                  v46 = *v45;
                  ++v48;
                  if (!*v45)
                  {
                    if (v47)
                    {
                      *v47 = 0;
                      v47[1] = 0;
                      --*(_DWORD *)(*v20 - 16);
                      v45 = v47;
                    }
                    goto LABEL_41;
                  }
                }
                WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable((uint64_t *)&v59, &v60);
                v58 = v45[1];
                v45[1] = v59;
                *(_QWORD *)&v59 = v58;
                if (v58)
                  WTF::fastFree((WTF *)(v58 - 16), v49);
                goto LABEL_63;
              }
LABEL_41:
              *v45 = a2;
              WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable((uint64_t *)&v59, &v60);
              v50 = v45[1];
              v45[1] = v59;
              *(_QWORD *)&v59 = v50;
              if (v50)
                WTF::fastFree((WTF *)(v50 - 16), v49);
              if (*v20)
              {
                ++*(_DWORD *)(*v20 - 12);
                v51 = *v20;
                if (*v20)
                  goto LABEL_45;
              }
              else
              {
                MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                v51 = *v20;
                if (*v20)
                {
LABEL_45:
                  v52 = (*(_DWORD *)(v51 - 16) + *(_DWORD *)(v51 - 12));
                  v53 = *(unsigned int *)(v51 - 4);
                  if (v53 <= 0x400)
                    goto LABEL_46;
                  goto LABEL_60;
                }
              }
              v52 = *(unsigned int *)(v51 - 16);
              v53 = *(unsigned int *)(v51 - 4);
              if (v53 <= 0x400)
              {
LABEL_46:
                if (3 * v53 > 4 * v52)
                  goto LABEL_63;
                if (!(_DWORD)v53)
                {
                  v54 = 8;
LABEL_62:
                  WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v20, v54);
LABEL_63:
                  if (v60)
                    WTF::fastFree((WTF *)(v60 - 2), v49);
                  goto LABEL_51;
                }
LABEL_61:
                v54 = (_DWORD)v53 << (6 * *(_DWORD *)(v51 - 12) >= (2 * v53));
                goto LABEL_62;
              }
LABEL_60:
              if (v53 > 2 * v52)
                goto LABEL_63;
              goto LABEL_61;
            }
          }
          v55 = (void *)MEMORY[0x1E0CB3940];
          WebGPU::BindGroup::usageName(&v61);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "stringWithFormat:", CFSTR("Bind group has incompatible usage list: %@"), v56);
          v57 = (NSString *)objc_claimAutoreleasedReturnValue();
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v57);

          goto LABEL_51;
        }
      }
      else
      {
        v27 = 1;
        while (v26)
        {
          v25 = ((_DWORD)v25 + v27) & v21;
          v26 = *(_QWORD *)(v19 + 16 * v25);
          ++v27;
          if (v26 == a2)
            goto LABEL_11;
        }
      }
    }
    v28 = 0;
    goto LABEL_13;
  }
}

void sub_182468DB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (a14)
  {
    WTF::fastFree((WTF *)(a14 - 16), a2);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t WebGPU::RenderPassEncoder::executePreDrawCommands(WebGPU::RenderPassEncoder *this, id *a2)
{
  uint64_t v3;
  unsigned int **v5;
  NSString *v6;
  NSString *v7;
  __CFString *v8;
  id v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  __CFString *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  id v31;
  unsigned int *v32;
  id v33;
  id v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  _QWORD *v60;
  NSString *v61;
  void *v62;
  id v63;
  id v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  void *v68;
  id v69;
  id v70;
  unsigned int *v71;
  id v72;
  void *v73;
  id v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  id v88;
  double v89;
  double v90;
  double v91;
  void *v92;
  id v93;
  float64x2_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unsigned int v118;
  int *v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  int *v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  id v145;
  uint64_t v146;
  void *v147;
  int v148;
  int v149;
  uint64_t v150;
  void *v151;
  void *v152;
  void *v153;
  _DWORD *v154;
  void *v155;
  id v156;
  uint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  _OWORD v167[3];

  v3 = *((_QWORD *)this + 9);
  if (!v3)
  {
    v8 = CFSTR("Missing pipeline before draw command");
    goto LABEL_5;
  }
  v5 = (unsigned int **)((char *)this + 408);
  WebGPU::PipelineLayout::errorValidatingBindGroupCompatibility(*(_BYTE **)(v3 + 136), (uint64_t *)this + 51);
  v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = v6;
    WebGPU::RenderPassEncoder::makeInvalid(this, v6);

    return 0;
  }
  if (a2)
  {
    v9 = a2[2];
    WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)this, (uint64_t)a2, v9, 1, 0, 0, 2u);

  }
  v10 = *((_QWORD *)this + 9);
  if (!v10)
  {
    v16 = CFSTR("pipeline is not set");
    goto LABEL_111;
  }
  v11 = *(unsigned int **)(v10 + 128);
  v166 = v3;
  if (v11)
  {
    v12 = *(v11 - 1);
    v13 = &v11[8 * v12];
    if (!*(v11 - 3))
    {
      v14 = &v11[8 * v12];
      v13 = v14;
LABEL_19:
      v17 = &v11[8 * *(v11 - 1)];
      if (v17 != v14)
        goto LABEL_25;
      goto LABEL_48;
    }
    v14 = v11;
    if ((_DWORD)v12)
    {
      v15 = 32 * v12;
      v14 = v11;
      do
      {
        if (*v14 < 0xFFFFFFFE)
          goto LABEL_18;
        v14 += 8;
        v15 -= 32;
      }
      while (v15);
      v14 = v13;
      goto LABEL_19;
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
LABEL_18:
  if (v11)
    goto LABEL_19;
  v17 = 0;
  if (!v14)
  {
LABEL_48:
    if ((*((_DWORD *)this + 21) + *((_DWORD *)this + 20) + 2) <= *(_DWORD *)(*((_QWORD *)this + 4) + 92))
      goto LABEL_52;
    v16 = CFSTR("Too many bind groups and vertex buffers used");
LABEL_111:
    WebGPU::RenderPassEncoder::makeInvalid(this, &v16->isa);
LABEL_112:

    return 0;
  }
LABEL_25:
  while (1)
  {
    v18 = *((_QWORD *)this + 50);
    if (!v18)
      break;
    v19 = *(_DWORD *)(v18 - 8);
    v20 = *v14;
    v21 = 9 * ((v20 + ~((_DWORD)v20 << 15)) ^ ((v20 + ~((_DWORD)v20 << 15)) >> 10));
    v22 = (v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11);
    v23 = (v22 ^ HIWORD(v22)) & v19;
    v24 = *(_DWORD *)(v18 + 32 * v23);
    if (v24 != (_DWORD)v20)
    {
      v25 = 1;
      while (v24 != -1)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(_DWORD *)(v18 + 32 * v23);
        ++v25;
        if (v24 == (_DWORD)v20)
          goto LABEL_32;
      }
      v23 = *(unsigned int *)(v18 - 4);
    }
LABEL_32:
    if (v23 == *(_DWORD *)(v18 - 4))
      goto LABEL_51;
    v26 = (_QWORD *)(v18 + 32 * v23);
    v27 = v26 + 1;
    v28 = v26[2];
    if (v28 >= objc_msgSend((id)v26[1], "length"))
    {
      if (v26[3])
      {
        v16 = CFSTR("offset >= buffer.length && buffer.size");
        WebGPU::RenderPassEncoder::makeInvalid(this, CFSTR("offset >= buffer.length && buffer.size"));
        goto LABEL_111;
      }
      if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
        v30 = 0;
      else
        v30 = (void *)*((_QWORD *)this + 2);
      v33 = v30;
      v34 = *(id *)(*((_QWORD *)this + 4) + 272);
      objc_msgSend(v33, "setVertexBuffer:offset:atIndex:", v34, 0, *v14);

      v32 = v14 + 8;
      v14 = v13;
      if (v32 != v13)
      {
LABEL_44:
        v14 = v32;
        while (*v14 >= 0xFFFFFFFE)
        {
          v14 += 8;
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
    }
    else
    {
      if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
        v29 = 0;
      else
        v29 = (void *)*((_QWORD *)this + 2);
      v31 = v29;
      objc_msgSend(v31, "setVertexBuffer:offset:atIndex:", *v27, v27[1], *v14);

      v32 = v14 + 8;
      v14 = v13;
      if (v32 != v13)
        goto LABEL_44;
    }
    if (v14 == v17)
      goto LABEL_48;
  }
  v20 = *v14;
LABEL_51:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer1 index[%u] is missing"), v20);
  v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v16)
    goto LABEL_111;
LABEL_52:
  v35 = *v5;
  if (*v5)
  {
    v36 = *(v35 - 1);
    v37 = &v35[4 * v36];
    if (*(v35 - 3))
    {
      v38 = *v5;
      if ((_DWORD)v36)
      {
        v39 = 16 * v36;
        v38 = *v5;
        while (*v38 >= 0xFFFFFFFE)
        {
          v38 += 4;
          v39 -= 16;
          if (!v39)
          {
            v38 = v37;
            break;
          }
        }
      }
    }
    else
    {
      v38 = &v35[4 * v36];
      v37 = v38;
    }
  }
  else
  {
    v38 = 0;
    v37 = 0;
  }
  if (!v35)
  {
    v40 = 0;
    if (!v38)
      goto LABEL_106;
    while (1)
    {
LABEL_67:
      v41 = *((_QWORD *)v38 + 1);
      if (!v41)
      {
        v8 = CFSTR("Bind group is missing");
        goto LABEL_5;
      }
      WebGPU::BindGroup::rebindSamplersIfNeeded(*((WebGPU::BindGroup **)v38 + 1));
      v42 = *((_QWORD *)this + 20);
      if (v42)
      {
        v43 = *(_DWORD *)(v42 - 8);
        v44 = *v38;
        v45 = 9 * ((v44 + ~(v44 << 15)) ^ ((v44 + ~(v44 << 15)) >> 10));
        v46 = (v45 ^ (v45 >> 6)) + ~((v45 ^ (v45 >> 6)) << 11);
        v47 = (v46 ^ HIWORD(v46)) & v43;
        v48 = (int *)(v42 + 24 * v47);
        v49 = *v48;
        if (*v48 != *v38)
        {
          v50 = 1;
          while (v49 != -1)
          {
            v47 = (v47 + v50) & v43;
            v48 = (int *)(v42 + 24 * v47);
            v49 = *v48;
            ++v50;
            if (*v48 == v44)
              goto LABEL_77;
          }
          v48 = (int *)(v42 + 24 * *(unsigned int *)(v42 - 4));
        }
LABEL_77:
        if (v48 == (int *)(v42 + 24 * *(unsigned int *)(v42 - 4)))
          v51 = 0;
        else
          v51 = (uint64_t)(v48 + 2);
        v52 = *(_QWORD *)(*((_QWORD *)this + 9) + 440);
        if (!v52)
        {
LABEL_75:
          v53 = 0;
          goto LABEL_88;
        }
      }
      else
      {
        v44 = *v38;
        v51 = 0;
        v52 = *(_QWORD *)(*((_QWORD *)this + 9) + 440);
        if (!v52)
          goto LABEL_75;
      }
      v54 = *(_DWORD *)(v52 - 8);
      v55 = 9 * ((v44 + ~(v44 << 15)) ^ ((v44 + ~(v44 << 15)) >> 10));
      v56 = (v55 ^ (v55 >> 6)) + ~((v55 ^ (v55 >> 6)) << 11);
      v57 = v54 & (v56 ^ HIWORD(v56));
      v58 = *(_DWORD *)(v52 + 16 * v57);
      if (v58 != v44)
      {
        v59 = 1;
        while (v58 != -1)
        {
          v57 = ((_DWORD)v57 + v59) & v54;
          v58 = *(_DWORD *)(v52 + 16 * v57);
          ++v59;
          if (v58 == v44)
            goto LABEL_87;
        }
        v57 = *(unsigned int *)(v52 - 4);
      }
LABEL_87:
      v53 = v52 + 16 * v57;
      v52 += 16 * *(unsigned int *)(v52 - 4);
LABEL_88:
      if (v53 == v52)
        v60 = 0;
      else
        v60 = (_QWORD *)(v53 + 8);
      WebGPU::errorValidatingBindGroup(v41, v60, v51);
      v61 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v61)
      {
        v16 = (__CFString *)v61;
        WebGPU::RenderPassEncoder::makeInvalid(this, v61);
        goto LABEL_112;
      }
      if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
        v62 = 0;
      else
        v62 = (void *)*((_QWORD *)this + 2);
      v63 = v62;
      v64 = *(id *)(v41 + 16);
      v65 = *(_DWORD *)(*((_QWORD *)this + 4) + 92) - 1;
      v110 = v65 >= *v38;
      v66 = v65 - *v38;
      if (v110)
        v67 = v66;
      else
        v67 = *v38;
      objc_msgSend(v63, "setVertexBuffer:offset:atIndex:", v64, 0, v67);

      if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
        v68 = 0;
      else
        v68 = (void *)*((_QWORD *)this + 2);
      v69 = v68;
      v70 = *(id *)(v41 + 24);
      objc_msgSend(v69, "setFragmentBuffer:offset:atIndex:", v70, 0, *v38);

      v71 = v38 + 4;
      v38 = v37;
      if (v71 != v37)
      {
        v38 = v71;
        while (*v38 >= 0xFFFFFFFE)
        {
          v38 += 4;
          if (v38 == v37)
          {
            v38 = v37;
            break;
          }
        }
      }
      if (v38 == v40)
        goto LABEL_106;
    }
  }
  v40 = &v35[4 * *(v35 - 1)];
  if (v40 != v38)
    goto LABEL_67;
LABEL_106:
  v72 = *(id *)(v166 + 16);

  if (v72)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
      v73 = 0;
    else
      v73 = (void *)*((_QWORD *)this + 2);
    v75 = v73;
    v76 = *(id *)(v166 + 16);
    objc_msgSend(v75, "setRenderPipelineState:", v76);

  }
  v77 = *(id *)(v166 + 120);

  if (v77)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
      v78 = 0;
    else
      v78 = (void *)*((_QWORD *)this + 2);
    v79 = v78;
    v80 = *(id *)(v166 + 120);
    objc_msgSend(v79, "setDepthStencilState:", v80);

  }
  if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
    v81 = 0;
  else
    v81 = (void *)*((_QWORD *)this + 2);
  v82 = v81;
  objc_msgSend(v82, "setCullMode:", *(_QWORD *)(v166 + 64));

  if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
    v83 = 0;
  else
    v83 = (void *)*((_QWORD *)this + 2);
  v84 = v83;
  objc_msgSend(v84, "setFrontFacingWinding:", *(_QWORD *)(v166 + 56));

  if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
    v85 = 0;
  else
    v85 = (void *)*((_QWORD *)this + 2);
  v86 = v85;
  objc_msgSend(v86, "setDepthClipMode:", *(_QWORD *)(v166 + 72));

  if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
    v87 = 0;
  else
    v87 = (void *)*((_QWORD *)this + 2);
  v88 = v87;
  LODWORD(v89) = *(_DWORD *)(v166 + 80);
  LODWORD(v90) = *(_DWORD *)(v166 + 84);
  LODWORD(v91) = *(_DWORD *)(v166 + 88);
  objc_msgSend(v88, "setDepthBias:slopeScale:clamp:", v89, v90, v91);

  if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
    v92 = 0;
  else
    v92 = (void *)*((_QWORD *)this + 2);
  v93 = v92;
  v94 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 460));
  v167[0] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 452));
  v167[1] = v94;
  v167[2] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 176));
  objc_msgSend(v93, "setViewport:", v167);

  v95 = (uint64_t *)((char *)this + 184);
  v96 = *((_QWORD *)this + 23);
  if (v96)
  {
    v97 = *((_QWORD *)this + 12);
    v98 = *(_DWORD *)(v96 - 8);
    v99 = (v97 + ~(v97 << 32)) ^ ((unint64_t)(v97 + ~(v97 << 32)) >> 22);
    v100 = 9 * ((v99 + ~(v99 << 13)) ^ ((v99 + ~(v99 << 13)) >> 8));
    v101 = (v100 ^ (v100 >> 15)) + ~((v100 ^ (v100 >> 15)) << 27);
    v102 = v98 & ((v101 >> 31) ^ v101);
    v103 = *(_QWORD *)(v96 + 8 * v102);
    if (v103 != v97)
    {
      v104 = 1;
      while (v103 != -1)
      {
        v102 = ((_DWORD)v102 + v104) & v98;
        v103 = *(_QWORD *)(v96 + 8 * v102);
        ++v104;
        if (v103 == v97)
          goto LABEL_144;
      }
      v102 = *(unsigned int *)(v96 - 4);
    }
LABEL_144:
    if (v102 != *(_DWORD *)(v96 - 4))
    {
      *(_QWORD *)(v96 + 8 * v102) = -2;
      ++*(_DWORD *)(*v95 - 16);
      v105 = *v95;
      v106 = *v95 ? *(_DWORD *)(v105 - 12) - 1 : -1;
      *(_DWORD *)(v105 - 12) = v106;
      v107 = *v95;
      if (*v95)
      {
        v108 = 6 * *(_DWORD *)(v107 - 12);
        v109 = *(_DWORD *)(v107 - 4);
        v110 = v108 < v109 && v109 >= 9;
        if (v110)
          WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v95, v109 >> 1, 0);
      }
    }
  }
  v111 = *((_QWORD *)this + 20);
  if (!v111)
  {
    v114 = 0;
    LODWORD(v112) = 0;
LABEL_164:
    v113 = v111 + 24 * v112;
    goto LABEL_165;
  }
  v112 = *(unsigned int *)(v111 - 4);
  v113 = v111 + 24 * v112;
  if (!*(_DWORD *)(v111 - 12))
  {
    v114 = v111 + 24 * v112;
    goto LABEL_164;
  }
  v114 = *((_QWORD *)this + 20);
  if ((_DWORD)v112)
  {
    v115 = 24 * v112;
    v114 = *((_QWORD *)this + 20);
    while (*(_DWORD *)v114 >= 0xFFFFFFFE)
    {
      v114 += 24;
      v115 -= 24;
      if (!v115)
      {
        v114 = v113;
        break;
      }
    }
  }
LABEL_165:
  if (v111)
    v116 = v111 + 24 * *(unsigned int *)(v111 - 4);
  else
    v116 = 0;
  if (v116 == v114)
  {
LABEL_204:
    if (*((_DWORD *)this + 33))
    {
      if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
        v144 = 0;
      else
        v144 = (void *)*((_QWORD *)this + 2);
      v145 = v144;
      v146 = *((unsigned int *)this + 33);
      if (!(_DWORD)v146)
        goto LABEL_238;
      v147 = v145;
      objc_msgSend(v145, "setVertexBytes:length:atIndex:", *((_QWORD *)this + 15), 4 * v146, *(unsigned int *)(*((_QWORD *)this + 4) + 92));

    }
    v149 = *((_DWORD *)this + 44);
    v148 = *((_DWORD *)this + 45);
    v150 = *((unsigned int *)this + 37);
    if (v150 <= 2)
    {
      if (*((_DWORD *)this + 36) <= 2u)
      {
        v151 = (void *)*((_QWORD *)this + 17);
        v152 = (void *)WTF::fastMalloc((WTF *)0x40);
        *((_DWORD *)this + 36) = 16;
        *((_QWORD *)this + 17) = v152;
        memcpy(v152, v151, 4 * v150);
        if (v151)
        {
          if (*((void **)this + 17) == v151)
          {
            *((_QWORD *)this + 17) = 0;
            *((_DWORD *)this + 36) = 0;
          }
          WTF::fastFree((WTF *)v151, v153);
        }
      }
      *((_DWORD *)this + 37) = 3;
    }
    v154 = (_DWORD *)*((_QWORD *)this + 17);
    *v154 = v149;
    if (*((_DWORD *)this + 37) > 1u)
    {
      v154[1] = v148;
      if (*(_BYTE *)(*((_QWORD *)this + 19) + 76))
        v155 = 0;
      else
        v155 = (void *)*((_QWORD *)this + 2);
      v156 = v155;
      v157 = *((unsigned int *)this + 37);
      if (!(_DWORD)v157)
      {
        __break(0xC471u);
        JUMPOUT(0x182469BA4);
      }
      v158 = v156;
      objc_msgSend(v156, "setFragmentBytes:length:atIndex:", *((_QWORD *)this + 17), 4 * v157, *(unsigned int *)(*((_QWORD *)this + 4) + 88));

      v160 = *((_QWORD *)this + 20);
      if (v160)
      {
        *((_QWORD *)this + 20) = 0;
        v161 = *(unsigned int *)(v160 - 4);
        if ((_DWORD)v161)
        {
          v162 = v160 + 8;
          do
          {
            if (*(_DWORD *)(v162 - 8) != -2)
            {
              v163 = *(WTF **)v162;
              if (*(_QWORD *)v162)
              {
                *(_QWORD *)v162 = 0;
                *(_DWORD *)(v162 + 8) = 0;
                WTF::fastFree(v163, v159);
              }
            }
            v162 += 24;
            --v161;
          }
          while (v161);
        }
        WTF::fastFree((WTF *)(v160 - 16), v159);
      }
      v164 = *((_QWORD *)this + 54);
      v110 = __CFADD__(v164, 1);
      v165 = v164 + 1;
      if (v110 || v165 > *((_QWORD *)this + 55))
        WebGPU::RenderPassEncoder::makeInvalid(this, CFSTR("m_drawCount > m_maxDrawCount"));
      else
        *((_QWORD *)this + 54) = v165;
      return 1;
    }
LABEL_238:
    __break(0xC471u);
    JUMPOUT(0x182469B9CLL);
  }
  while (2)
  {
    v117 = *(_QWORD **)(*((_QWORD *)this + 9) + 136);
    v118 = *(_DWORD *)v114;
    v119 = WebGPU::PipelineLayout::offsetVectorForBindGroup((uint64_t)v117, *(_DWORD *)v114, v117 + 8, (uint64_t *)(v114 + 8), 1);
    if (v119)
    {
      v120 = v119[3];
      if ((_DWORD)v120)
      {
        v121 = v117[5];
        if (!v121)
          goto LABEL_179;
        v122 = *(_DWORD *)(v121 - 8);
        v123 = 9 * ((v118 + ~(v118 << 15)) ^ ((v118 + ~(v118 << 15)) >> 10));
        v124 = (v123 ^ (v123 >> 6)) + ~((v123 ^ (v123 >> 6)) << 11);
        v125 = v122 & (v124 ^ HIWORD(v124));
        v126 = *(_DWORD *)(v121 + 8 * v125);
        if (v126 == v118)
        {
LABEL_178:
          if (v125 == *(_DWORD *)(v121 - 4))
            goto LABEL_179;
          v128 = *(unsigned int *)(v121 + 8 * v125 + 4);
          v129 = *((unsigned int *)this + 33);
          if (v128 > v129)
            goto LABEL_235;
        }
        else
        {
          v127 = 1;
          while (v126 != -1)
          {
            v125 = ((_DWORD)v125 + v127) & v122;
            v126 = *(_DWORD *)(v121 + 8 * v125);
            ++v127;
            if (v126 == v118)
              goto LABEL_178;
          }
LABEL_179:
          v128 = 0;
          v129 = *((unsigned int *)this + 33);
        }
        if (v129 - v128 < v120)
          goto LABEL_235;
        memcpy((void *)(*((_QWORD *)this + 15) + 4 * v128), *(const void **)v119, 4 * v120);
      }
    }
    v130 = WebGPU::PipelineLayout::offsetVectorForBindGroup((uint64_t)v117, v118, v117 + 9, (uint64_t *)(v114 + 8), 2);
    if (!v130 || (v131 = v130[3], !(_DWORD)v131))
    {
LABEL_199:
      v143 = v114 + 24;
      v114 = v113;
      if (v143 != v113)
      {
        v114 = v143;
        while (*(_DWORD *)v114 >= 0xFFFFFFFE)
        {
          v114 += 24;
          if (v114 == v113)
          {
            v114 = v113;
            break;
          }
        }
      }
      if (v114 == v116)
        goto LABEL_204;
      continue;
    }
    break;
  }
  v132 = v117[6];
  if (v132)
  {
    v133 = *(_DWORD *)(v132 - 8);
    v134 = 9 * ((v118 + ~(v118 << 15)) ^ ((v118 + ~(v118 << 15)) >> 10));
    v135 = (v134 ^ (v134 >> 6)) + ~((v134 ^ (v134 >> 6)) << 11);
    v136 = v133 & (v135 ^ HIWORD(v135));
    v137 = *(_DWORD *)(v132 + 8 * v136);
    if (v137 == v118)
    {
LABEL_191:
      if (v136 == *(_DWORD *)(v132 - 4))
        goto LABEL_192;
      v132 = *(unsigned int *)(v132 + 8 * v136 + 4);
    }
    else
    {
      v138 = 1;
      while (v137 != -1)
      {
        v136 = ((_DWORD)v136 + v138) & v133;
        v137 = *(_DWORD *)(v132 + 8 * v136);
        ++v138;
        if (v137 == v118)
          goto LABEL_191;
      }
LABEL_192:
      v132 = 0;
    }
  }
  v139 = v132 + 3;
  v140 = *((unsigned int *)this + 37);
  v141 = v140 > v139;
  v142 = v140 - v139;
  if (v141)
  {
    if (v142 < v131)
    {
LABEL_235:
      __break(1u);
      goto LABEL_238;
    }
    memcpy((void *)(*((_QWORD *)this + 17) + 4 * v139), *(const void **)v130, 4 * v131);
    goto LABEL_199;
  }
  v8 = CFSTR("Invalid offset calculation");
LABEL_5:
  WebGPU::RenderPassEncoder::makeInvalid(this, &v8->isa);
  return 0;
}

void sub_182469BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469BC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182469BE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182469BF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469C58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182469C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182469CA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182469CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182469CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t WebGPU::RenderPassEncoder::computeMininumVertexInstanceCount(WebGPU::RenderPassEncoder *this)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  int *v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  id *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int *v31;
  unsigned int v33;
  int v34;
  _BOOL4 v35;
  int *v36;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
  {
    v8 = 0;
    v9 = 0;
    return v8 | (unint64_t)(v9 << 32);
  }
  v3 = *(int **)(v1 + 128);
  if (v3)
  {
    v4 = *(v3 - 1);
    v5 = &v3[8 * v4];
    if (!*(v3 - 3))
    {
      v6 = &v3[8 * v4];
      v5 = v6;
      goto LABEL_12;
    }
    v6 = v3;
    if ((_DWORD)v4)
    {
      v7 = 32 * v4;
      v6 = v3;
      do
      {
        if (*v6 < 0xFFFFFFFE)
          goto LABEL_11;
        v6 += 8;
        v7 -= 32;
      }
      while (v7);
      v6 = v5;
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
LABEL_11:
  if (!v3)
  {
    v10 = 0;
    if (v6)
      goto LABEL_13;
LABEL_51:
    v8 = -1;
    v9 = 0xFFFFFFFFLL;
    return v8 | (unint64_t)(v9 << 32);
  }
LABEL_12:
  v10 = &v3[8 * *(v3 - 1)];
  if (v10 == v6)
    goto LABEL_51;
LABEL_13:
  v11 = *((_QWORD *)this + 50);
  if (v11)
  {
    v8 = -1;
    v9 = 0xFFFFFFFFLL;
    while (1)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = *v6;
      v14 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
      v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      v16 = (v15 ^ HIWORD(v15)) & v12;
      v17 = *(_DWORD *)(v11 + 32 * v16);
      if (v17 != *v6)
      {
        v18 = 1;
        while (v17 != -1)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(_DWORD *)(v11 + 32 * v16);
          ++v18;
          if (v17 == v13)
            goto LABEL_19;
        }
LABEL_20:
        v11 = 0;
        v19 = *((_QWORD *)v6 + 1);
        if (v19)
          goto LABEL_26;
        goto LABEL_39;
      }
LABEL_19:
      if (v16 == *(_DWORD *)(v11 - 4))
        goto LABEL_20;
      v20 = v11 + 32 * v16;
      v21 = (id *)(v20 + 8);
      v22 = objc_msgSend(*(id *)(v20 + 8), "length");
      v24 = *(_QWORD *)(v20 + 16);
      v23 = (_QWORD *)(v20 + 16);
      if (v22 < v24)
      {
        v11 = 0;
        goto LABEL_25;
      }
      v11 = objc_msgSend(*v21, "length") - *v23;
      v19 = *((_QWORD *)v6 + 1);
      if (v19)
      {
LABEL_26:
        v25 = *((_QWORD *)v6 + 2);
        v26 = v11 >= v25;
        v27 = v11 - v25;
        if (v26)
          v28 = v27 / v19 + 1;
        else
          LODWORD(v28) = 0;
        v29 = v6[6];
        if (v9 >= v28)
          v30 = v28;
        else
          v30 = v9;
        if (v8 < v28)
          LODWORD(v28) = v8;
        if (v29)
          v9 = v30;
        else
          v9 = v9;
        if (!v29)
          v8 = v28;
      }
      while (1)
      {
LABEL_39:
        v31 = v6 + 8;
        v6 = v5;
        if (v31 != v5)
        {
          v6 = v31;
          while (*v6 >= 0xFFFFFFFE)
          {
            v6 += 8;
            if (v6 == v5)
            {
              v6 = v5;
              break;
            }
          }
        }
        if (v6 == v10)
          return v8 | (unint64_t)(v9 << 32);
        v11 = *((_QWORD *)this + 50);
        if (v11)
          break;
LABEL_25:
        v19 = *((_QWORD *)v6 + 1);
        if (v19)
          goto LABEL_26;
      }
    }
  }
  v8 = -1;
  v9 = 0xFFFFFFFFLL;
  do
  {
    if (*((_QWORD *)v6 + 1))
    {
      v33 = *((_QWORD *)v6 + 2) == 0;
      v34 = v6[6];
      if (v8 >= v33)
        v35 = *((_QWORD *)v6 + 2) == 0;
      else
        v35 = v8;
      if (v9 < v33)
        v33 = v9;
      if (v34)
        v9 = v33;
      else
        v9 = v9;
      if (!v34)
        v8 = v35;
    }
    v36 = v6 + 8;
    v6 = v5;
    if (v36 != v5)
    {
      v6 = v36;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 8;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  while (v6 != v10);
  return v8 | (unint64_t)(v9 << 32);
}

uint64_t WebGPU::RenderPassEncoder::clampIndexBufferToValidValues(unsigned int a1, int a2, int a3, int a4, MTLIndexType a5, unint64_t a6, uint64_t a7, int a8, int a9, id a10, WebGPU::Device *a11, unsigned int a12, uint64_t a13)
{
  int v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  _BOOL4 v36;
  int v37;
  WebGPU::Device *v38;
  char v39;
  id v40;
  int v41;
  _DWORD v43[5];
  _DWORD v44[2];
  uint64_t v45;

  v20 = a9;
  v45 = *MEMORY[0x1E0C80C00];
  v21 = a10;
  if (!a7)
  {
    v23 = 0;
    goto LABEL_18;
  }
  v41 = a8;
  v22 = *(id *)(a7 + 16);
  v23 = v22;
  v24 = 2;
  if (a1 && v22 && *(_BYTE *)(a7 + 52) != 4)
  {
    if ((v20 & v41) == 0xFFFFFFFF)
    {
      v24 = 0;
      goto LABEL_19;
    }
    v25 = 1;
    if (a5)
      v25 = 2;
    v39 = v25;
    if (v41)
    {
      if (v20 && objc_msgSend(v22, "length") > a6)
      {
        v26 = a6 >> v39;
        if (*(_DWORD *)(a7 + 232) == (a6 >> v39)
          && *(_DWORD *)(a7 + 236) == a1
          && *(_DWORD *)(a7 + 240) == v41
          && *(_DWORD *)(a7 + 244) == v20
          && *(_QWORD *)(a7 + 248) == a5)
        {
          v24 = 1;
          goto LABEL_19;
        }
        v28 = (unint64_t)a1 << v39;
        if (!__CFADD__(v28, a6) && v28 + a6 <= objc_msgSend(v23, "length"))
        {
          v29 = a12;
          v38 = a11;
          v40 = *(id *)(a7 + 32);
          v43[0] = a1;
          v43[1] = a2;
          v30 = v26;
          v43[2] = v26;
          v43[3] = a3;
          v31 = v29;
          v43[4] = a4;
          WebGPU::Device::copyIndexIndirectArgsPipeline(v38, v29);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          if (v32)
          {
            v33 = v40;
            objc_msgSend(v21, "setRenderPipelineState:", v32);

            objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v40, 0, 0);
            objc_msgSend(v21, "setVertexBytes:length:atIndex:", v43, 20, 1);
            objc_msgSend(v21, "setVertexBytes:length:atIndex:", &a9, 4, 2);
            objc_msgSend(v21, "drawPrimitives:vertexStart:vertexCount:", 0, 0, 1);
            objc_msgSend(v21, "memoryBarrierWithScope:afterStages:beforeStages:", 1, 1, 1);
            WebGPU::Device::indexBufferClampPipeline(v38, a5, v31);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            if (v34)
            {
              objc_msgSend(v21, "setRenderPipelineState:", v34);

              objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v23, a6, 0);
              objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v40, 0, 1);
              v36 = a13 == 2 || a13 == 4;
              v44[0] = v41;
              v44[1] = v36;
              objc_msgSend(v21, "setVertexBytes:length:atIndex:", v44, 8, 2, v38);
              objc_msgSend(v21, "drawPrimitives:vertexStart:vertexCount:", 0, 0, a1);
              objc_msgSend(v21, "memoryBarrierWithScope:afterStages:beforeStages:", 1, 1, 1);
              v37 = a9;
              *(_DWORD *)(a7 + 232) = v30;
              *(_DWORD *)(a7 + 236) = a1;
              *(_DWORD *)(a7 + 240) = v41;
              *(_DWORD *)(a7 + 244) = v37;
              *(_QWORD *)(a7 + 248) = a5;
              v24 = 1;
            }
            else
            {
              v24 = 2;
            }
          }
          else
          {
            v24 = 2;
            v33 = v40;
          }

          goto LABEL_19;
        }
LABEL_18:
        v24 = 2;
      }
    }
  }
LABEL_19:

  return v24;
}

void sub_18246A2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void WebGPU::RenderPassEncoder::clampIndirectIndexBufferToValidValues(uint64_t a1@<X0>, uint64_t a2@<X1>, MTLIndexType a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, WebGPU::Device *a10, unint64_t a11, void *a12)
{
  id v21;
  id v22;
  void *v23;
  char v24;
  id v25;
  void *v26;
  id v27;
  _BOOL4 v29;
  id v30;
  char v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  _DWORD v35[2];
  _DWORD v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v21 = a12;
  if ((a7 & a6) != 0xFFFFFFFF)
  {
    if (a1)
    {
      v34 = a8;
      v22 = *(id *)(a1 + 16);
      if (v22 && *(_BYTE *)(a1 + 52) != 4 && *(_BYTE *)(a2 + 52) != 4)
      {
        v33 = *(id *)(a2 + 24);
        if (!a7)
          goto LABEL_26;
        if (!a6)
          goto LABEL_26;
        if (!v33)
          goto LABEL_26;
        if (objc_msgSend(v22, "length") <= a4)
          goto LABEL_26;
        WebGPU::Device::indexedIndirectBufferClampPipeline(a10, a11);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v23)
          goto LABEL_26;
        objc_msgSend(v21, "setRenderPipelineState:", v23);

        v32 = objc_msgSend(v22, "length");
        v24 = 1;
        if (a3)
          v24 = 2;
        v31 = v24;
        objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(a2 + 16), a5, 0);
        v25 = *(id *)(a2 + 32);
        objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v25, 0, 1);

        objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v33, 0, 2);
        v36[0] = v32 >> v31;
        v36[1] = a7;
        objc_msgSend(v21, "setVertexBytes:length:atIndex:", v36, 8, 3);
        objc_msgSend(v21, "drawPrimitives:vertexStart:vertexCount:", 0, 0, 1);
        objc_msgSend(v21, "memoryBarrierWithScope:afterStages:beforeStages:", 1, 1, 1);
        WebGPU::Device::indexBufferClampPipeline(a10, a3, a11);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        if (v26)
        {
          objc_msgSend(v21, "setRenderPipelineState:", v26);

          objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v22, a4, 0);
          v27 = *(id *)(a2 + 32);
          objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v27, 0, 1);

          v29 = v34 == 2 || v34 == 4;
          v35[0] = a6;
          v35[1] = v29;
          objc_msgSend(v21, "setVertexBytes:length:atIndex:", v35, 8, 2);
          v30 = *(id *)(a2 + 32);
          objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v30, 0, 3);

          objc_msgSend(v21, "drawPrimitives:indirectBuffer:indirectBufferOffset:", 0, v33, 0);
          objc_msgSend(v21, "memoryBarrierWithScope:afterStages:beforeStages:", 1, 1, 1);
          *a9 = *(id *)(a2 + 32);
          a9[1] = 0;
        }
        else
        {
LABEL_26:
          *a9 = 0;
          a9[1] = 0;
        }

        goto LABEL_24;
      }
    }
    else
    {
      v22 = 0;
    }
    *a9 = 0;
    a9[1] = 0;
LABEL_24:

    goto LABEL_25;
  }
  *a9 = *(id *)(a2 + 16);
  a9[1] = a5;
LABEL_25:

}

void sub_18246A628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id WebGPU::RenderPassEncoder::clampIndirectBufferToValidValues(uint64_t a1, uint64_t a2, int a3, int a4, WebGPU::Device *a5, unsigned int a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  _DWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = a7;
  v14 = 0;
  if (a3 && a4 && *(_BYTE *)(a1 + 52) != 4)
  {
    WebGPU::Device::indirectBufferClampPipeline(a5, a6);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      objc_msgSend(v13, "setRenderPipelineState:", v15);

      objc_msgSend(v13, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(a1 + 16), a2, 0);
      v16 = *(id *)(a1 + 24);
      objc_msgSend(v13, "setVertexBuffer:offset:atIndex:", v16, 0, 1);

      v18[0] = a3;
      v18[1] = a4;
      objc_msgSend(v13, "setVertexBytes:length:atIndex:", v18, 8, 2);
      objc_msgSend(v13, "drawPrimitives:vertexStart:vertexCount:", 0, 0, 1);
      objc_msgSend(v13, "memoryBarrierWithScope:afterStages:beforeStages:", 1, 1, 1);
      v14 = *(id *)(a1 + 24);
    }
    else
    {
      v14 = 0;
    }

  }
  return v14;
}

void sub_18246A7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN6WebGPU17RenderPassEncoder7endPassEv_block_invoke(uint64_t a1)
{
  WebGPU::CommandEncoder::endEncoding(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 152), *(void **)(*(_QWORD *)(a1 + 32) + 16));
}

const __CFString *WebGPU::RenderPassEncoder::errorValidatingPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;

  if (!*(_QWORD *)(a2 + 16))
    return CFSTR("setPipeline: invalid RenderPipeline");
  v3 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(v3 + 8) || v3 != *(_QWORD *)(a1 + 32))
    return CFSTR("setPipeline: invalid RenderPipeline");
  v6 = *(unsigned __int8 *)(a1 + 113);
  if (*(_BYTE *)(a1 + 112) && (objc_msgSend(*(id *)(a2 + 112), "isDepthWriteEnabled") & 1) != 0
    || v6 && *(_BYTE *)(a2 + 448))
  {
    return CFSTR("setPipeline: invalid depth stencil state");
  }
  if (!WebGPU::RenderPipeline::colorDepthStencilTargetsMatch(a2, a1 + 248, a1 + 376, (uint64_t *)(a1 + 392)))
    return CFSTR("setPipeline: color and depth targets from pass do not match pipeline");
  v7 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
  if (v7)
  {
    v8 = *(v7 - 1);
    v9 = &v7[6 * v8];
    if (*(v7 - 3))
    {
      v10 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
      if ((_DWORD)v8)
      {
        v11 = 24 * v8;
        v10 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
        while (*v10 >= 0xFFFFFFFE)
        {
          v10 += 6;
          v11 -= 24;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_22;
          }
        }
      }
      goto LABEL_22;
    }
    v10 = &v7[6 * v8];
  }
  else
  {
    v10 = 0;
    LODWORD(v8) = 0;
  }
  v9 = &v7[6 * v8];
LABEL_22:
  if (v7)
    v7 += 6 * *(v7 - 1);
  if (v7 == v10)
    return 0;
  v12 = 0;
  do
  {
    v13 = v9;
    if (v10 + 6 != v9)
    {
      v13 = v10 + 6;
      while (*v13 >= 0xFFFFFFFE)
      {
        v13 += 6;
        if (v13 == v9)
        {
          v13 = v9;
          break;
        }
      }
    }
    v12 += v10[5];
    v10 = v13;
  }
  while (v13 != v7);
  if (v12 <= 0xFFFFFFFFFFFFFFFCLL)
    return 0;
  else
    return CFSTR("setPipeline: invalid size of fragmentDynamicOffsets");
}

_DWORD *wgpuRenderPassEncoderReference(_DWORD *result)
{
  ++*result;
  return result;
}

uint64_t wgpuRenderPassEncoderRelease(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WebGPU::BindGroup **v7;
  WTF *v8;
  void *v9;
  WebGPU::BindGroup *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  WebGPU::TextureView *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  WebGPU::TextureView **v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WebGPU::TextureView *v22;
  WTF *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WebGPU::CommandEncoder *v35;
  WTF *v36;
  WTF *v37;
  WebGPU::RenderPipeline *v38;
  WebGPU::Buffer *v39;
  WTF *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  WTF *v47;
  WTF *v48;
  void *v49;
  void *v50;
  WTF *v51;
  void *v52;

  v1 = result;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  v2 = *(void **)(result + 16);
  if (v2)
  {
    WebGPU::CommandEncoder::endEncoding(*(_QWORD *)(result + 152), v2);
    v3 = *(void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;

    v5 = *(_QWORD *)(v1 + 408);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
    *(_QWORD *)(result + 16) = 0;

    v5 = *(_QWORD *)(v1 + 408);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v6)
  {
    v7 = (WebGPU::BindGroup **)(v5 + 8);
    do
    {
      if (*((_DWORD *)v7 - 2) != -2)
      {
        v10 = *v7;
        *v7 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 1)
          {
            WebGPU::BindGroup::~BindGroup(v10, v4);
            WTF::fastFree(v8, v9);
          }
          else
          {
            --*(_DWORD *)v10;
          }
        }
      }
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  WTF::fastFree((WTF *)(v5 - 16), v4);
LABEL_16:
  v11 = *(_QWORD *)(v1 + 400);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (id *)(v11 + 8);
      do
      {
        if (*((_DWORD *)v13 - 2) != -2)

        v13 += 4;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), v4);
  }
  v14 = *(WebGPU::TextureView **)(v1 + 392);
  *(_QWORD *)(v1 + 392) = 0;
  if (!v14)
  {
LABEL_26:
    v15 = *(unsigned int *)(v1 + 388);
    if (!(_DWORD)v15)
      goto LABEL_35;
    goto LABEL_29;
  }
  if (*(_DWORD *)v14 != 1)
  {
    --*(_DWORD *)v14;
    goto LABEL_26;
  }
  WebGPU::TextureView::~TextureView(v14, v4);
  WTF::fastFree(v16, v17);
  v15 = *(unsigned int *)(v1 + 388);
  if (!(_DWORD)v15)
    goto LABEL_35;
LABEL_29:
  v18 = *(WebGPU::TextureView ***)(v1 + 376);
  v19 = 8 * v15;
  do
  {
    v22 = *v18;
    *v18 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WebGPU::TextureView::~TextureView(v22, v4);
        WTF::fastFree(v20, v21);
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
    ++v18;
    v19 -= 8;
  }
  while (v19);
LABEL_35:
  v23 = *(WTF **)(v1 + 376);
  if (v23)
  {
    *(_QWORD *)(v1 + 376) = 0;
    *(_DWORD *)(v1 + 384) = 0;
    WTF::fastFree(v23, v4);
  }
  v24 = *(WTF **)(v1 + 304);
  if (v24)
  {
    *(_QWORD *)(v1 + 304) = 0;
    *(_DWORD *)(v1 + 312) = 0;
    WTF::fastFree(v24, v4);
  }

  v26 = *(_QWORD *)(v1 + 192);
  if (v26)
    WTF::fastFree((WTF *)(v26 - 16), v25);
  v27 = *(_QWORD *)(v1 + 184);
  if (v27)
    WTF::fastFree((WTF *)(v27 - 16), v25);
  v28 = *(_QWORD *)(v1 + 168);
  if (v28)
  {
    v29 = *(unsigned int *)(v28 - 4);
    if ((_DWORD)v29)
    {
      v30 = (_QWORD *)(v28 + 8);
      do
      {
        if (*(v30 - 1) != -1 && *v30)
          WTF::fastFree((WTF *)(*v30 - 16), v25);
        v30 += 2;
        --v29;
      }
      while (v29);
    }
    WTF::fastFree((WTF *)(v28 - 16), v25);
  }
  v31 = *(_QWORD *)(v1 + 160);
  if (v31)
  {
    v32 = *(unsigned int *)(v31 - 4);
    if ((_DWORD)v32)
    {
      v33 = v31 + 8;
      do
      {
        if (*(_DWORD *)(v33 - 8) != -2)
        {
          v34 = *(WTF **)v33;
          if (*(_QWORD *)v33)
          {
            *(_QWORD *)v33 = 0;
            *(_DWORD *)(v33 + 8) = 0;
            WTF::fastFree(v34, v25);
          }
        }
        v33 += 24;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v31 - 16), v25);
  }
  v35 = *(WebGPU::CommandEncoder **)(v1 + 152);
  *(_QWORD *)(v1 + 152) = 0;
  if (!v35)
  {
LABEL_62:
    v36 = *(WTF **)(v1 + 136);
    if (!v36)
      goto LABEL_64;
    goto LABEL_63;
  }
  if (*(_DWORD *)v35 != 1)
  {
    --*(_DWORD *)v35;
    goto LABEL_62;
  }
  WebGPU::CommandEncoder::~CommandEncoder(v35);
  WTF::fastFree(v51, v52);
  v36 = *(WTF **)(v1 + 136);
  if (v36)
  {
LABEL_63:
    *(_QWORD *)(v1 + 136) = 0;
    *(_DWORD *)(v1 + 144) = 0;
    WTF::fastFree(v36, v25);
  }
LABEL_64:
  v37 = *(WTF **)(v1 + 120);
  if (v37)
  {
    *(_QWORD *)(v1 + 120) = 0;
    *(_DWORD *)(v1 + 128) = 0;
    WTF::fastFree(v37, v25);
  }
  v38 = *(WebGPU::RenderPipeline **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (!v38)
  {
LABEL_69:
    v39 = *(WebGPU::Buffer **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (!v39)
      goto LABEL_74;
    goto LABEL_72;
  }
  if (*(_DWORD *)v38 != 1)
  {
    --*(_DWORD *)v38;
    goto LABEL_69;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v38, v25);
  WTF::fastFree(v40, v41);
  v39 = *(WebGPU::Buffer **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (!v39)
    goto LABEL_74;
LABEL_72:
  if (*(_DWORD *)v39 == 1)
  {
    WebGPU::Buffer::~Buffer(v39, v25);
    WTF::fastFree(v48, v49);
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v1 + 32), v50);

    v43 = *(_QWORD *)(v1 + 8);
    if (v43)
      goto LABEL_75;
    goto LABEL_81;
  }
  --*(_DWORD *)v39;
LABEL_74:
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v1 + 32), v25);

  v43 = *(_QWORD *)(v1 + 8);
  if (v43)
  {
LABEL_75:
    *(_QWORD *)(v43 + 8) = 0;
    v44 = *(unsigned int **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (!v44)
      goto LABEL_78;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, v42);
      v47 = (WTF *)v1;
    }
    else
    {
LABEL_78:
      v47 = (WTF *)v1;
    }
    return WTF::fastFree(v47, v42);
  }
LABEL_81:
  *(_QWORD *)(v1 + 8) = 0;
  v47 = (WTF *)v1;
  return WTF::fastFree(v47, v42);
}

void sub_18246AE18(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WebGPU::TextureView *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebGPU::CommandEncoder *v19;
  WTF *v20;
  WTF *v21;
  WebGPU::RenderPipeline *v22;
  WebGPU::TextureView **v23;
  uint64_t v24;
  WebGPU::TextureView *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  WebGPU::BindGroup **v32;
  WebGPU::BindGroup *v33;
  WTF *v34;
  void *v35;
  id *v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  void *v41;
  WebGPU::Buffer *v42;
  WTF *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;

  v4 = *(_QWORD *)(v1 + 408);
  if (v4)
  {
    v7 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v7)
    {
      v32 = (WebGPU::BindGroup **)(v4 + 8);
      do
      {
        if (*((_DWORD *)v32 - 2) != -2)
        {
          v33 = *v32;
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v33, v3);
              WTF::fastFree(v34, v35);
            }
            else
            {
              --*(_DWORD *)v33;
            }
          }
        }
        v32 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
    v5 = *(_QWORD *)(v1 + 400);
    if (!v5)
    {
LABEL_3:
      v6 = *(WebGPU::TextureView **)(v1 + 392);
      *(_QWORD *)(v1 + 392) = 0;
      if (!v6)
        goto LABEL_12;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 400);
    if (!v5)
      goto LABEL_3;
  }
  v8 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v8)
  {
    v36 = (id *)(v5 + 8);
    do
    {
      if (*((_DWORD *)v36 - 2) != -2)

      v36 += 4;
      --v8;
    }
    while (v8);
  }
  WTF::fastFree((WTF *)(v5 - 16), v3);
  v6 = *(WebGPU::TextureView **)(v1 + 392);
  *(_QWORD *)(v1 + 392) = 0;
  if (!v6)
  {
LABEL_12:
    v11 = *(unsigned int *)(v1 + 388);
    if ((_DWORD)v11)
    {
      v23 = *(WebGPU::TextureView ***)(v1 + 376);
      v24 = 8 * v11;
      do
      {
        v25 = *v23;
        *v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
          {
            WebGPU::TextureView::~TextureView(v25, v3);
            WTF::fastFree(v26, v27);
          }
          else
          {
            --*(_DWORD *)v25;
          }
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
    v12 = *(WTF **)(v1 + 376);
    if (v12)
    {
      *(_QWORD *)(v1 + 376) = 0;
      *(_DWORD *)(v1 + 384) = 0;
      WTF::fastFree(v12, v3);
    }
    v13 = *(WTF **)(v1 + 304);
    if (v13)
    {
      *(_QWORD *)(v1 + 304) = 0;
      *(_DWORD *)(v1 + 312) = 0;
      WTF::fastFree(v13, v3);
    }

    v15 = *(_QWORD *)(v1 + 192);
    if (v15)
    {
      WTF::fastFree((WTF *)(v15 - 16), v14);
      v16 = *(_QWORD *)(v1 + 184);
      if (!v16)
      {
LABEL_19:
        v17 = *(_QWORD *)(v1 + 168);
        if (!v17)
          goto LABEL_20;
        goto LABEL_34;
      }
    }
    else
    {
      v16 = *(_QWORD *)(v1 + 184);
      if (!v16)
        goto LABEL_19;
    }
    WTF::fastFree((WTF *)(v16 - 16), v14);
    v17 = *(_QWORD *)(v1 + 168);
    if (!v17)
    {
LABEL_20:
      v18 = *(_QWORD *)(v1 + 160);
      if (!v18)
        goto LABEL_21;
      goto LABEL_36;
    }
LABEL_34:
    v28 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v28)
    {
      v37 = (_QWORD *)(v17 + 8);
      do
      {
        if (*(v37 - 1) != -1 && *v37)
          WTF::fastFree((WTF *)(*v37 - 16), v14);
        v37 += 2;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v17 - 16), v14);
    v18 = *(_QWORD *)(v1 + 160);
    if (!v18)
    {
LABEL_21:
      v19 = *(WebGPU::CommandEncoder **)(v1 + 152);
      *(_QWORD *)(v1 + 152) = 0;
      if (!v19)
        goto LABEL_22;
      goto LABEL_38;
    }
LABEL_36:
    v29 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v29)
    {
      v38 = v18 + 8;
      do
      {
        if (*(_DWORD *)(v38 - 8) != -2)
        {
          v39 = *(WTF **)v38;
          if (*(_QWORD *)v38)
          {
            *(_QWORD *)v38 = 0;
            *(_DWORD *)(v38 + 8) = 0;
            WTF::fastFree(v39, v14);
          }
        }
        v38 += 24;
        --v29;
      }
      while (v29);
    }
    WTF::fastFree((WTF *)(v18 - 16), v14);
    v19 = *(WebGPU::CommandEncoder **)(v1 + 152);
    *(_QWORD *)(v1 + 152) = 0;
    if (!v19)
    {
LABEL_22:
      v20 = *(WTF **)(v1 + 136);
      if (!v20)
        goto LABEL_23;
LABEL_63:
      *(_QWORD *)(v1 + 136) = 0;
      *(_DWORD *)(v1 + 144) = 0;
      WTF::fastFree(v20, v14);
      v21 = *(WTF **)(v1 + 120);
      if (!v21)
      {
LABEL_24:
        v22 = *(WebGPU::RenderPipeline **)(v1 + 72);
        *(_QWORD *)(v1 + 72) = 0;
        if (!v22)
          goto LABEL_68;
        goto LABEL_65;
      }
LABEL_64:
      *(_QWORD *)(v1 + 120) = 0;
      *(_DWORD *)(v1 + 128) = 0;
      WTF::fastFree(v21, v14);
      v22 = *(WebGPU::RenderPipeline **)(v1 + 72);
      *(_QWORD *)(v1 + 72) = 0;
      if (!v22)
        goto LABEL_68;
LABEL_65:
      if (*(_DWORD *)v22 == 1)
      {
        WebGPU::RenderPipeline::~RenderPipeline(v22, v14);
        WTF::fastFree(v40, v41);
      }
      else
      {
        --*(_DWORD *)v22;
      }
LABEL_68:
      v42 = *(WebGPU::Buffer **)(v1 + 40);
      *(_QWORD *)(v1 + 40) = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
        {
          WebGPU::Buffer::~Buffer(v42, v14);
          WTF::fastFree(v43, v44);
        }
        else
        {
          --*(_DWORD *)v42;
        }
      }
      WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v1 + 32), v14);

      v46 = *(_QWORD *)(v1 + 8);
      if (!v46)
      {
        *(_QWORD *)(v1 + 8) = 0;
        _Unwind_Resume(a1);
      }
      *(_QWORD *)(v46 + 8) = 0;
      v47 = *(unsigned int **)(v1 + 8);
      *(_QWORD *)(v1 + 8) = 0;
      if (v47)
      {
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, v47);
          WTF::fastFree((WTF *)v47, v45);
          _Unwind_Resume(a1);
        }
      }
      _Unwind_Resume(a1);
    }
LABEL_38:
    if (*(_DWORD *)v19 == 1)
    {
      WebGPU::CommandEncoder::~CommandEncoder(v19);
      WTF::fastFree(v30, v31);
      v20 = *(WTF **)(v1 + 136);
      if (v20)
        goto LABEL_63;
    }
    else
    {
      --*(_DWORD *)v19;
      v20 = *(WTF **)(v1 + 136);
      if (v20)
        goto LABEL_63;
    }
LABEL_23:
    v21 = *(WTF **)(v1 + 120);
    if (!v21)
      goto LABEL_24;
    goto LABEL_64;
  }
LABEL_9:
  if (*(_DWORD *)v6 == 1)
  {
    WebGPU::TextureView::~TextureView(v6, v3);
    WTF::fastFree(v9, v10);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  goto LABEL_12;
}

void wgpuRenderPassEncoderBeginOcclusionQuery(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  void *v36;
  id v37;
  uint64_t v38[3];
  unint64_t v39;

  v3 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v3 + 4) != 1)
  {
    v6 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::beginOcclusionQuery(uint32_t)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](v38, v7);
    v8 = *(_QWORD *)(v6 + 32);
    v9 = 32 * *(unsigned int *)(v6 + 44);
    v10 = v8 + v9;
    while (v9)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v10 -= 32;
      v9 -= 32;
      if (!v11)
      {
        v12 = v8 + v9;
        if (!*(_BYTE *)(v12 + 16))
        {
          v13 = v38[0];
          v38[0] = 0;
          *(_DWORD *)v12 = 1;
          *(_QWORD *)(v12 + 8) = v13;
          *(_BYTE *)(v12 + 16) = 1;
        }
        goto LABEL_15;
      }
    }
    v14 = *(_QWORD *)(v6 + 24);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, 1, v38);
      v15 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_15:
    v16 = (_DWORD *)v38[0];
    v38[0] = 0;
    if (v16)
    {
      if (*v16 == 2)
        WTF::StringImpl::destroy();
      else
        *v16 -= 2;
    }

    return;
  }
  v5 = *(void **)(a1 + 16);
  if (!v5 || !*(_QWORD *)(v3 + 16))
  {
LABEL_22:
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
  {
    v5 = *(void **)(a1 + 16);
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 470))
  {
LABEL_6:
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("beginOcclusionQuery validation failure"));
    return;
  }
  v17 = (8 * a2);
  v18 = *(_QWORD *)(a1 + 184);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = (~(v17 << 32) + v17) ^ ((~(v17 << 32) + v17) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(_QWORD *)(v18 + 8 * v23);
    if (v24 == v17)
      goto LABEL_6;
    v25 = 1;
    while (v24 != -1)
    {
      v23 = (v23 + v25) & v19;
      v24 = *(_QWORD *)(v18 + 8 * v23);
      ++v25;
      if (v24 == v17)
        goto LABEL_6;
    }
  }
  *(_BYTE *)(a1 + 470) = 1;
  *(_QWORD *)(a1 + 96) = v17;
  v39 = v17;
  WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v38, (uint64_t *)(a1 + 184), (uint64_t *)&v39);
  v26 = *(_QWORD *)(a1 + 104);
  if (v26 != -1)
  {
    if (v26 <= v17)
      goto LABEL_6;
    v28 = (uint64_t *)(a1 + 192);
    v27 = *(_QWORD *)(a1 + 192);
    if (v27)
    {
      v29 = *(_DWORD *)(v27 - 8);
      v30 = (~(v17 << 32) + v17) ^ ((~(v17 << 32) + v17) >> 22);
      v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
      v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
      v33 = v29 & ((v32 >> 31) ^ v32);
      v34 = *(_QWORD *)(v27 + 8 * v33);
      if (v34 == v17)
        return;
      v35 = 1;
      while (v34 != -1)
      {
        v33 = (v33 + v35) & v29;
        v34 = *(_QWORD *)(v27 + 8 * v33);
        ++v35;
        if (v34 == v17)
          return;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
      v36 = 0;
    else
      v36 = *(void **)(a1 + 16);
    v37 = v36;
    objc_msgSend(v37, "setVisibilityResultMode:offset:", 2, v17);

    v39 = v17;
    WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v38, v28, (uint64_t *)&v39);
  }
}

void sub_18246B4A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderDraw(WebGPU::RenderPassEncoder *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6;
  void *v8;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  __CFString *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  unsigned int *v50;
  void *v51;
  NSString *v52;
  id v53;
  _DWORD *v54;

  v6 = *((_QWORD *)a1 + 19);
  if (*(_BYTE *)(v6 + 4) != 1)
  {
    v18 = *((_QWORD *)a1 + 4);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::draw(uint32_t, uint32_t, uint32_t, uint32_t)");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v54, v19);
    v20 = *(_QWORD *)(v18 + 32);
    v21 = 32 * *(unsigned int *)(v18 + 44);
    v22 = v20 + v21;
    while (v21)
    {
      v23 = *(_DWORD *)(v22 - 8);
      v22 -= 32;
      v21 -= 32;
      if (!v23)
      {
        v24 = v20 + v21;
        if (!*(_BYTE *)(v24 + 16))
        {
          v25 = v54;
          v54 = 0;
          *(_DWORD *)v24 = 1;
          *(_QWORD *)(v24 + 8) = v25;
          *(_BYTE *)(v24 + 16) = 1;
        }
LABEL_22:
        v28 = v54;
        v54 = 0;
        if (v28)
        {
          if (*v28 == 2)
            WTF::StringImpl::destroy();
          else
            *v28 -= 2;
        }

        return;
      }
    }
    v26 = *(_QWORD *)(v18 + 24);
    if (v26)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v26 + 16))(v26, 1, &v54);
      v27 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    goto LABEL_22;
  }
  v8 = (void *)*((_QWORD *)a1 + 2);
  if (!v8 || !*(_QWORD *)(v6 + 16))
  {
LABEL_29:
    *((_QWORD *)a1 + 2) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
  {
    v8 = (void *)*((_QWORD *)a1 + 2);
    goto LABEL_29;
  }
  if (!WebGPU::RenderPassEncoder::executePreDrawCommands(a1, 0))
    return;
  v12 = *((_QWORD *)a1 + 9);
  if (!v12)
  {
    v29 = CFSTR("Missing pipeline before draw command");
LABEL_66:
    WebGPU::RenderPassEncoder::makeInvalid(a1, &v29->isa);
    goto LABEL_67;
  }
  v13 = *(unsigned int **)(v12 + 128);
  if (v13)
  {
    v14 = *(v13 - 1);
    v15 = &v13[8 * v14];
    if (*(v13 - 3))
    {
      v16 = v13;
      if ((_DWORD)v14)
      {
        v17 = 32 * v14;
        v16 = v13;
        while (*v16 >= 0xFFFFFFFE)
        {
          v16 += 8;
          v17 -= 32;
          if (!v17)
          {
            v16 = v15;
            break;
          }
        }
      }
    }
    else
    {
      v16 = &v13[8 * v14];
      v15 = v16;
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  if (v13)
    v13 += 8 * *(v13 - 1);
  if (v13 == v16)
  {
LABEL_67:
    if (!a2)
      return;
    goto LABEL_68;
  }
  v30 = __CFADD__(a5, a3);
  v31 = __CFADD__(a4, a2);
  while (1)
  {
    v32 = v16[6];
    if (v32 == 1)
      break;
    if (!v32)
    {
      v33 = a4 + a2;
      if (v31)
        goto LABEL_65;
      goto LABEL_48;
    }
LABEL_60:
    v50 = v16 + 8;
    v16 = v15;
    if (v50 != v15)
    {
      v16 = v50;
      while (*v16 >= 0xFFFFFFFE)
      {
        v16 += 8;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
    if (v16 == v13)
      goto LABEL_67;
  }
  v33 = a5 + a3;
  if (v30)
  {
LABEL_65:
    v29 = CFSTR("StrideCount invalid");
    goto LABEL_66;
  }
LABEL_48:
  if (!v33)
    goto LABEL_60;
  v34 = *((_QWORD *)a1 + 50);
  if (!v34)
    goto LABEL_75;
  v35 = *(_DWORD *)(v34 - 8);
  v36 = *v16;
  v37 = 9 * ((v36 + ~((_DWORD)v36 << 15)) ^ ((v36 + ~((_DWORD)v36 << 15)) >> 10));
  v38 = (v37 ^ (v37 >> 6)) + ~((v37 ^ (v37 >> 6)) << 11);
  v39 = (v38 ^ HIWORD(v38)) & v35;
  v40 = *(_DWORD *)(v34 + 32 * v39);
  if (v40 != (_DWORD)v36)
  {
    v41 = 1;
    while (v40 != -1)
    {
      v39 = ((_DWORD)v39 + v41) & v35;
      v40 = *(_DWORD *)(v34 + 32 * v39);
      ++v41;
      if (v40 == (_DWORD)v36)
        goto LABEL_56;
    }
    v39 = *(unsigned int *)(v34 - 4);
  }
LABEL_56:
  if (v39 == *(_DWORD *)(v34 - 4) || (v42 = v33, v43 = v33 - 1, v44 = *((_QWORD *)v16 + 1), !is_mul_ok(v43, v44)))
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x18246B8F4);
  }
  v45 = v43 * v44;
  v46 = *(_QWORD *)(v34 + 32 * v39 + 24);
  v47 = *((_QWORD *)v16 + 2);
  v48 = __CFADD__(v45, v47);
  v49 = v45 + v47;
  if (!v48 && v49 <= v46)
    goto LABEL_60;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer[%d] fails: (strideCount(%llu) - 1) * bufferData.stride(%llu) + bufferData.lastStride(%llu) > bufferSize(%llu)"), v36, v42, v44, *((_QWORD *)v16 + 2), v46);
  v52 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebGPU::RenderPassEncoder::makeInvalid(a1, v52);

  if (!a2)
    return;
LABEL_68:
  if (a3)
  {
    if (*(_BYTE *)(*((_QWORD *)a1 + 19) + 76))
      v51 = 0;
    else
      v51 = (void *)*((_QWORD *)a1 + 2);
    v53 = v51;
    objc_msgSend(v53, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", *((_QWORD *)a1 + 11), a4, a2, a3, a5);

  }
}

void sub_18246B900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246B910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{

  _Unwind_Resume(a1);
}

void sub_18246B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  void *v16;

  if (a16)
  {
    if (*a16 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a16 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderDrawIndexed(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6)
{
  uint64_t v7;
  void *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  __CFString *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  __CFString *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  MTLIndexType v54;
  unint64_t v55;
  int valid;
  uint64_t v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  NSString *v65;
  _DWORD *v66;

  v7 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v7 + 4) != 1)
  {
    v20 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::drawIndexed(uint32_t, uint32_t, uint32_t, int32_t, uint32_t)");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v66, v21);
    v22 = *(_QWORD *)(v20 + 32);
    v23 = 32 * *(unsigned int *)(v20 + 44);
    v24 = v22 + v23;
    while (v23)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v24 -= 32;
      v23 -= 32;
      if (!v25)
      {
        v26 = v22 + v23;
        if (!*(_BYTE *)(v26 + 16))
        {
          v27 = v66;
          v66 = 0;
          *(_DWORD *)v26 = 1;
          *(_QWORD *)(v26 + 8) = v27;
          *(_BYTE *)(v26 + 16) = 1;
        }
LABEL_20:
        v30 = v66;
        v66 = 0;
        if (v30)
        {
          if (*v30 == 2)
            WTF::StringImpl::destroy();
          else
            *v30 -= 2;
        }

        return;
      }
    }
    v28 = *(_QWORD *)(v20 + 24);
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v28 + 16))(v28, 1, &v66);
      v29 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 24) = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    goto LABEL_20;
  }
  v9 = *(void **)(a1 + 16);
  if (!v9 || !*(_QWORD *)(v7 + 16))
  {
LABEL_27:
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v7, v9))
  {
    v9 = *(void **)(a1 + 16);
    goto LABEL_27;
  }
  v14 = a4;
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  if (v15)
    v17 = 2;
  else
    v17 = 1;
  v18 = v16 + ((unint64_t)a4 << v17);
  if (__CFADD__(v16, v14 << v17))
  {
    v19 = CFSTR("Invalid offset to drawIndexed");
LABEL_11:
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v19->isa);
    return;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    v33 = CFSTR("Index buffer is not set");
LABEL_38:
    v65 = v33;
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v65);
    goto LABEL_39;
  }
  v31 = *(_QWORD *)(a1 + 72);
  if (!v31)
  {
    v33 = CFSTR("Pipeline is not set");
    goto LABEL_38;
  }
  v32 = *(_DWORD *)(v31 + 232);
  if ((v32 == 4 || v32 == 2) && v15 != (*(_DWORD *)(v31 + 236) != 1))
  {
    v33 = CFSTR("Primitive topology mismiatch with render pipeline");
    goto LABEL_38;
  }
  if ((v14 + (unint64_t)a2) << v17 > *(_QWORD *)(a1 + 64))
  {
    v19 = CFSTR("Values to drawIndexed are invalid");
    goto LABEL_11;
  }
  v34 = *(_QWORD *)(a1 + 72);
  if (!v34 || !*(_QWORD *)(a1 + 40))
  {
    v19 = CFSTR("Missing pipeline before draw command");
    goto LABEL_11;
  }
  v63 = a6;
  v64 = a3;
  if (!(a6 + (unint64_t)a3))
    goto LABEL_79;
  v35 = *(unsigned int **)(v34 + 128);
  if (v35)
  {
    v36 = *(v35 - 1);
    v37 = &v35[8 * v36];
    if (*(v35 - 3))
    {
      v38 = v35;
      if ((_DWORD)v36)
      {
        v39 = 32 * v36;
        v38 = v35;
        while (*v38 >= 0xFFFFFFFE)
        {
          v38 += 8;
          v39 -= 32;
          if (!v39)
          {
            v38 = v37;
            break;
          }
        }
      }
    }
    else
    {
      v38 = &v35[8 * v36];
      v37 = v38;
    }
  }
  else
  {
    v38 = 0;
    v37 = 0;
  }
  if (v35)
    v35 += 8 * *(v35 - 1);
  if (v35 == v38)
  {
LABEL_79:
    v54 = *(_QWORD *)(a1 + 48);
    v55 = WebGPU::RenderPassEncoder::computeMininumVertexInstanceCount((WebGPU::RenderPassEncoder *)a1);
    valid = WebGPU::RenderPassEncoder::clampIndexBufferToValidValues(a2, a3, a5, a6, v54, v18, *(_QWORD *)(a1 + 40), v55, SHIDWORD(v55), *(id *)(a1 + 16), *(WebGPU::Device **)(a1 + 32), *(_DWORD *)(a1 + 216), *(_QWORD *)(a1 + 88));
    if (!WebGPU::RenderPassEncoder::executePreDrawCommands((WebGPU::RenderPassEncoder *)a1, 0))
      return;
    if (!a2)
      return;
    if (!a3)
      return;
    v57 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(v57 + 52) == 4)
      return;
    v62 = *(id *)(v57 + 16);
    if (valid)
    {
      if (valid != 1)
      {
LABEL_95:

        return;
      }
      v58 = *(id *)(*(_QWORD *)(a1 + 40) + 32);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
        v59 = 0;
      else
        v59 = *(void **)(a1 + 16);
      v61 = v59;
      objc_msgSend(v61, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:", *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 48), v62, 0, v58, 0);

    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
        v60 = 0;
      else
        v60 = *(void **)(a1 + 16);
      v58 = v60;
      objc_msgSend(v58, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", *(_QWORD *)(a1 + 88), a2, *(_QWORD *)(a1 + 48), v62, v18, v64, a5, v63);
    }

    goto LABEL_95;
  }
  v40 = *(_QWORD *)(a1 + 400);
  if (!v40)
  {
    do
    {
      v53 = v38 + 8;
      v38 = v37;
      if (v53 != v37)
      {
        v38 = v53;
        do
        {
          if (*v38 < 0xFFFFFFFE)
            goto LABEL_73;
          v38 += 8;
        }
        while (v38 != v37);
        v38 = v37;
      }
LABEL_73:
      ;
    }
    while (v38 != v35);
    goto LABEL_79;
  }
  v41 = a6 + (unint64_t)a3 - 1;
  v42 = *(_DWORD *)(v40 - 8);
  while (1)
  {
    v43 = *v38;
    v44 = 9 * ((v43 + ~((_DWORD)v43 << 15)) ^ ((v43 + ~((_DWORD)v43 << 15)) >> 10));
    v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
    v46 = (v45 ^ HIWORD(v45)) & v42;
    v47 = *(_DWORD *)(v40 + 32 * v46);
    if (v47 == (_DWORD)v43)
      break;
    v48 = 1;
    while (v47 != -1)
    {
      v46 = ((_DWORD)v46 + v48) & v42;
      v47 = *(_DWORD *)(v40 + 32 * v46);
      ++v48;
      if (v47 == (_DWORD)v43)
        goto LABEL_63;
    }
LABEL_68:
    v52 = v38 + 8;
    v38 = v37;
    if (v52 != v37)
    {
      v38 = v52;
      while (*v38 >= 0xFFFFFFFE)
      {
        v38 += 8;
        if (v38 == v37)
        {
          v38 = v37;
          break;
        }
      }
    }
    if (v38 == v35)
      goto LABEL_79;
  }
LABEL_63:
  if (v46 == *(_DWORD *)(v40 - 4) || v38[6] != 1)
    goto LABEL_68;
  v49 = *((_QWORD *)v38 + 1);
  if (!is_mul_ok(v41, v49))
    return;
  v50 = *((_QWORD *)v38 + 2);
  if (__CFADD__(v41 * v49, v50))
    return;
  v51 = *(_QWORD *)(v40 + 32 * v46 + 24);
  if (v41 * v49 + v50 <= v51)
    goto LABEL_68;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer[%d] fails: (strideCount(%lu) - 1) * stride(%llu) + lastStride(%llu) > bufferSize(%llu) / mtlBufferSize(%lu)"), v43, a6 + (unint64_t)a3, v49, v50, v51, objc_msgSend(*(id *)(v40 + 32 * v46 + 8), "length"));
  v65 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v65);
LABEL_39:

}

void sub_18246BF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{

  _Unwind_Resume(a1);
}

void sub_18246BF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18246BF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18246BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{

  _Unwind_Resume(a1);
}

void sub_18246BFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20)
{
  void *v20;

  if (a20)
  {
    if (*a20 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a20 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderDrawIndexedIndirect(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  unint64_t v26;
  id v27;
  id v28[2];

  v4 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v4 + 4) == 1)
  {
    v6 = *(void **)(a1 + 16);
    if (v6 && *(_QWORD *)(v4 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v4, v6))
      {
        if ((*(_BYTE *)(a2 + 52) == 4 || *(_QWORD *)(a2 + 16))
          && (v8 = *(_QWORD *)(a2 + 256), *(_QWORD *)(v8 + 8))
          && v8 == *(_QWORD *)(a1 + 32))
        {
          WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(a1 + 152));
          if (*(_BYTE *)(a2 + 52) != 4)
          {
            v20 = *(_QWORD *)(a1 + 40);
            if (v20)
            {
              v27 = *(id *)(v20 + 16);
              if (objc_msgSend(v27, "length"))
              {
                if ((a3 & 3) != 0
                  || (*(_DWORD *)(a2 + 48) & 0x100) == 0
                  || a3 >= 0xFFFFFFFFFFFFFFECLL
                  || *(_QWORD *)(a2 + 40) < a3 + 20)
                {
                  WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("drawIndexedIndirect: validation failed"));
                }
                else
                {
                  v21 = WebGPU::RenderPassEncoder::computeMininumVertexInstanceCount((WebGPU::RenderPassEncoder *)a1);
                  LODWORD(v26) = *(_DWORD *)(a1 + 216);
                  WebGPU::RenderPassEncoder::clampIndirectIndexBufferToValidValues(*(_QWORD *)(a1 + 40), a2, *(MTLIndexType *)(a1 + 48), *(_QWORD *)(a1 + 56), a3, v21, SHIDWORD(v21), *(_QWORD *)(a1 + 88), v28, *(WebGPU::Device **)(a1 + 32), v26, *(void **)(a1 + 16));
                  v22 = v28[0];
                  v23 = v28[1];
                  if (WebGPU::RenderPassEncoder::executePreDrawCommands((WebGPU::RenderPassEncoder *)a1, (id *)a2)&& *(_BYTE *)(*(_QWORD *)(a1 + 40) + 52) != 4)
                  {
                    if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
                      v24 = 0;
                    else
                      v24 = *(void **)(a1 + 16);
                    v25 = v24;
                    objc_msgSend(v25, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:", *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 48), v27, *(_QWORD *)(a1 + 56), v22, v23);

                  }
                }
              }

            }
            else
            {
              WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("drawIndexedIndirect: index buffer is nil"));
            }
          }
        }
        else
        {
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("drawIndexedIndirect: buffer was invalid"));
        }
        return;
      }
      v6 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  v9 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::drawIndexedIndirect(const Buffer &, uint64_t)");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](v28, v10);
  v11 = *(_QWORD *)(v9 + 32);
  v12 = 32 * *(unsigned int *)(v9 + 44);
  v13 = v11 + v12;
  while (v12)
  {
    v14 = *(_DWORD *)(v13 - 8);
    v13 -= 32;
    v12 -= 32;
    if (!v14)
    {
      v15 = v11 + v12;
      if (!*(_BYTE *)(v15 + 16))
      {
        v16 = v28[0];
        v28[0] = 0;
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = v16;
        *(_BYTE *)(v15 + 16) = 1;
      }
      goto LABEL_18;
    }
  }
  v17 = *(_QWORD *)(v9 + 24);
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t, id *))(*(_QWORD *)v17 + 16))(v17, 1, v28);
    v18 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
LABEL_18:
  v19 = v28[0];
  v28[0] = 0;
  if (v19)
  {
    if (*v19 == 2)
      WTF::StringImpl::destroy();
    else
      *v19 -= 2;
  }

}

void sub_18246C310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  v14 = v12;

  _Unwind_Resume(a1);
}

void sub_18246C350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_18246C364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_18246C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_18246C38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  void *v13;

  if (a13)
  {
    if (*a13 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a13 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18246C3C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderDrawIndirect(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  void *v21;
  id v22;
  id v23;
  _DWORD *v24;

  v4 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v4 + 4) == 1)
  {
    v6 = *(void **)(a1 + 16);
    if (v6 && *(_QWORD *)(v4 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v4, v6))
      {
        if ((*(_BYTE *)(a2 + 52) == 4 || *(_QWORD *)(a2 + 16))
          && (v8 = *(_QWORD *)(a2 + 256), *(_QWORD *)(v8 + 8))
          && v8 == *(_QWORD *)(a1 + 32))
        {
          WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(a1 + 152));
          if (*(_BYTE *)(a2 + 52) != 4)
          {
            if ((a3 & 3) != 0
              || (*(_DWORD *)(a2 + 48) & 0x100) == 0
              || a3 >= 0xFFFFFFFFFFFFFFF0
              || *(_QWORD *)(a2 + 40) < a3 + 16)
            {
              WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("drawIndirect: validation failed"));
            }
            else
            {
              v20 = WebGPU::RenderPassEncoder::computeMininumVertexInstanceCount((WebGPU::RenderPassEncoder *)a1);
              WebGPU::RenderPassEncoder::clampIndirectBufferToValidValues(a2, a3, v20, SHIDWORD(v20), *(WebGPU::Device **)(a1 + 32), *(_DWORD *)(a1 + 216), *(void **)(a1 + 16));
              v23 = (id)objc_claimAutoreleasedReturnValue();
              if (WebGPU::RenderPassEncoder::executePreDrawCommands((WebGPU::RenderPassEncoder *)a1, (id *)a2)&& v23&& *(_BYTE *)(a2 + 52) != 4)
              {
                if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
                  v21 = 0;
                else
                  v21 = *(void **)(a1 + 16);
                v22 = v21;
                objc_msgSend(v22, "drawPrimitives:indirectBuffer:indirectBufferOffset:", *(_QWORD *)(a1 + 88), v23, 0);

              }
            }
          }
        }
        else
        {
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("drawIndirect: buffer was invalid"));
        }
        return;
      }
      v6 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  v9 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::drawIndirect(const Buffer &, uint64_t)");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v24, v10);
  v11 = *(_QWORD *)(v9 + 32);
  v12 = 32 * *(unsigned int *)(v9 + 44);
  v13 = v11 + v12;
  while (v12)
  {
    v14 = *(_DWORD *)(v13 - 8);
    v13 -= 32;
    v12 -= 32;
    if (!v14)
    {
      v15 = v11 + v12;
      if (!*(_BYTE *)(v15 + 16))
      {
        v16 = v24;
        v24 = 0;
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = v16;
        *(_BYTE *)(v15 + 16) = 1;
      }
      goto LABEL_19;
    }
  }
  v17 = *(_QWORD *)(v9 + 24);
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v17 + 16))(v17, 1, &v24);
    v18 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
LABEL_19:
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    if (*v19 == 2)
      WTF::StringImpl::destroy();
    else
      *v19 -= 2;
  }

}

void sub_18246C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18246C694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{

  _Unwind_Resume(a1);
}

void sub_18246C6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  void *v12;

  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18246C6E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderEndOcclusionQuery(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  id v16;
  _DWORD *v17;

  v2 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v2 + 4) == 1)
  {
    v3 = *(void **)(a1 + 16);
    if (v3 && *(_QWORD *)(v2 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v2, v3))
      {
        if (*(_BYTE *)(a1 + 470))
        {
          *(_BYTE *)(a1 + 470) = 0;
          if (*(_QWORD *)(a1 + 104) != -1)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
              v4 = 0;
            else
              v4 = *(void **)(a1 + 16);
            v16 = v4;
            objc_msgSend(v16, "setVisibilityResultMode:offset:", 0, *(_QWORD *)(a1 + 96));

          }
        }
        else
        {
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("endOcclusionQuery - occlusion query was not active"));
        }
        return;
      }
      v3 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::endOcclusionQuery()");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v17, v6);
  v7 = *(_QWORD *)(v5 + 32);
  v8 = 32 * *(unsigned int *)(v5 + 44);
  v9 = v7 + v8;
  while (v8)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v9 -= 32;
    v8 -= 32;
    if (!v10)
    {
      v11 = v7 + v8;
      if (!*(_BYTE *)(v11 + 16))
      {
        v12 = v17;
        v17 = 0;
        *(_DWORD *)v11 = 1;
        *(_QWORD *)(v11 + 8) = v12;
        *(_BYTE *)(v11 + 16) = 1;
      }
      goto LABEL_17;
    }
  }
  v13 = *(_QWORD *)(v5 + 24);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v13 + 16))(v13, 1, &v17);
    v14 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
LABEL_17:
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*v15 == 2)
      WTF::StringImpl::destroy();
    else
      *v15 -= 2;
  }

}

void sub_18246C8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{

  _Unwind_Resume(a1);
}

void sub_18246C8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  void *v12;

  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18246C8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderEnd(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL IsCurrent;
  _BOOL8 v13;
  void *v14;
  WebGPU::CommandEncoder *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(_QWORD);
  uint64_t v30;
  _BOOL4 v31;
  void **v32;
  _BOOL4 v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  int v38;
  BOOL v39;
  BOOL v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  NSString *v55;
  _QWORD v56[5];

  if (*(_BYTE *)(a1 + 471))
  {
    v2 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as pass is already ended"), "void WebGPU::RenderPassEncoder::endPass()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](v56, v3);
    v4 = *(_QWORD *)(v2 + 32);
    v5 = 32 * *(unsigned int *)(v2 + 44);
    v6 = v4 + v5;
    while (v5)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v6 -= 32;
      v5 -= 32;
      if (!v7)
      {
        v8 = v4 + v5;
        if (!*(_BYTE *)(v8 + 16))
        {
          v9 = v56[0];
          v56[0] = 0;
          *(_DWORD *)v8 = 1;
          *(_QWORD *)(v8 + 8) = v9;
          *(_BYTE *)(v8 + 16) = 1;
        }
        goto LABEL_16;
      }
    }
    v16 = *(_QWORD *)(v2 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v16 + 16))(v16, 1, v56);
      v17 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
LABEL_16:
    v18 = (int *)v56[0];
    v56[0] = 0;
    if (!v18)
      goto LABEL_31;
    v19 = *v18 - 2;
    if (*v18 != 2)
      goto LABEL_18;
    goto LABEL_30;
  }
  *(_BYTE *)(a1 + 471) = 1;
  v10 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v10 + 4) != 1)
  {
    v20 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::endPass()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](v56, v3);
    v21 = *(_QWORD *)(v20 + 32);
    v22 = 32 * *(unsigned int *)(v20 + 44);
    v23 = v21 + v22;
    while (v22)
    {
      v24 = *(_DWORD *)(v23 - 8);
      v23 -= 32;
      v22 -= 32;
      if (!v24)
      {
        v25 = v21 + v22;
        if (!*(_BYTE *)(v25 + 16))
        {
          v26 = v56[0];
          v56[0] = 0;
          *(_DWORD *)v25 = 1;
          *(_QWORD *)(v25 + 8) = v26;
          *(_BYTE *)(v25 + 16) = 1;
        }
        goto LABEL_28;
      }
    }
    v27 = *(_QWORD *)(v20 + 24);
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v27 + 16))(v27, 1, v56);
      v28 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 24) = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
LABEL_28:
    v18 = (int *)v56[0];
    v56[0] = 0;
    if (!v18)
      goto LABEL_31;
    v19 = *v18 - 2;
    if (*v18 != 2)
    {
LABEL_18:
      *v18 = v19;
LABEL_31:

      return;
    }
LABEL_30:
    WTF::StringImpl::destroy();
    goto LABEL_31;
  }
  v11 = *(void **)(a1 + 16);
  if (!v11
    || !*(_QWORD *)(v10 + 16)
    || (IsCurrent = WebGPU::CommandEncoder::encoderIsCurrent(v10, v11), v11 = *(void **)(a1 + 16), !IsCurrent))
  {
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  if (*(_QWORD *)(a1 + 24) || *(_BYTE *)(a1 + 470) || !v11)
  {
    v13 = v11 != 0;
    WebGPU::CommandEncoder::endEncoding(*(_QWORD *)(a1 + 152), v11);
    v14 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

    v15 = *(WebGPU::CommandEncoder **)(a1 + 152);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("RenderPassEncoder.endPass failure, m_debugGroupStackSize = %llu, m_occlusionQueryActive = %d, isValid = %d, error = %@"), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 470), v13, *(_QWORD *)(a1 + 416));
    v55 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebGPU::CommandEncoder::makeInvalid(v15, v55);

    return;
  }
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 3221225472;
  v56[2] = ___ZN6WebGPU17RenderPassEncoder7endPassEv_block_invoke;
  v56[3] = &__block_descriptor_40_e5_v8__0l;
  v56[4] = a1;
  v29 = (void (**)(_QWORD))MEMORY[0x186DAB65C](v56);
  v30 = *(_QWORD *)(a1 + 432);
  v31 = objc_msgSend(*(id *)(a1 + 224), "count") || *(_BYTE *)(a1 + 468) || *(_BYTE *)(a1 + 469) != 0;
  v32 = (void **)(a1 + 232);
  if (objc_msgSend(*(id *)(a1 + 232), "count") || objc_msgSend(*(id *)(a1 + 224), "count"))
    goto LABEL_39;
  if (!*(_QWORD *)(a1 + 240))
    goto LABEL_59;
  if (*(_BYTE *)(a1 + 468))
  {
LABEL_39:
    v33 = 1;
    v34 = !v31;
    if (!v30)
      v34 = 0;
    if (v34)
      goto LABEL_59;
  }
  else
  {
    v33 = *(_BYTE *)(a1 + 469) != 0;
    v39 = !v31;
    if (!v30)
      v39 = 0;
    if (v39)
      goto LABEL_59;
  }
  if (v33)
  {
    v35 = *(_QWORD *)(a1 + 392);
    if (v35)
    {
      v36 = *(_QWORD *)(a1 + 240) && v30 == 0;
      if (v36 && !v31)
      {
        v38 = *(_DWORD *)(v35 + 40);
        switch(v38)
        {
          case '\'':
          case '(':
          case '*':
            *(_BYTE *)(a1 + 468) = 1;
            *(_BYTE *)(a1 + 469) = 0;
            break;
          case ')':
          case '+':
            v40 = 1;
            *(_BYTE *)(a1 + 468) = 1;
            goto LABEL_62;
          default:
            *(_BYTE *)(a1 + 468) = 0;
            v40 = v38 == 38;
LABEL_62:
            *(_BYTE *)(a1 + 469) = v40;
            break;
        }
      }
    }
    if (v31)
    {
      v29[2](v29);
      v32 = (void **)(a1 + 224);
    }
    if (v31)
      v41 = 0;
    else
      v41 = *(void **)(a1 + 16);
    WebGPU::CommandEncoder::runClearEncoder(*(_QWORD *)(a1 + 152), *v32, *(void **)(a1 + 240), *(unsigned __int8 *)(a1 + 468) != 0, *(unsigned __int8 *)(a1 + 469) != 0, *(unsigned int *)(a1 + 448), v41, *(float *)(a1 + 424));
    goto LABEL_69;
  }
LABEL_59:
  v29[2](v29);
LABEL_69:
  v42 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

  v43 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v43 + 4) != 2)
  {
    *(_BYTE *)(v43 + 4) = 0;
    v44 = *(void **)(v43 + 40);
    *(_QWORD *)(v43 + 40) = 0;

    WebGPU::Queue::setEncoderForBuffer(*(_QWORD *)(*(_QWORD *)(v43 + 80) + 16), *(void **)(v43 + 16), 0);
  }
  v45 = *(_QWORD *)(a1 + 184);
  if (v45 && *(_DWORD *)(v45 - 12) && *(_QWORD *)(a1 + 104) != -1)
  {
    WebGPU::CommandEncoder::ensureBlitCommandEncoder(*(id **)(a1 + 152));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = *(_QWORD *)(a1 + 184);
    if (v48)
    {
      v49 = *(unsigned int *)(v48 - 4);
      v50 = (_QWORD *)(v48 + 8 * v49);
      if (*(_DWORD *)(v48 - 12))
      {
        v51 = *(_QWORD **)(a1 + 184);
        if ((_DWORD)v49)
        {
          v52 = 8 * v49;
          v51 = *(_QWORD **)(a1 + 184);
          while (*v51 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v51;
            v52 -= 8;
            if (!v52)
            {
              v51 = v50;
              break;
            }
          }
        }
      }
      else
      {
        v51 = (_QWORD *)(v48 + 8 * v49);
        v50 = v51;
      }
    }
    else
    {
      v51 = 0;
      v50 = 0;
    }
    if (v48)
      v53 = (_QWORD *)(v48 + 8 * *(unsigned int *)(v48 - 4));
    else
      v53 = 0;
    if (v53 != v51)
    {
      do
      {
        objc_msgSend(v47, "fillBuffer:range:value:", *(_QWORD *)(a1 + 200), *v51, 8, 0);
        v54 = v51 + 1;
        v51 = v50;
        if (v54 != v50)
        {
          v51 = v54;
          while (*v51 >= 0xFFFFFFFFFFFFFFFELL)
          {
            if (++v51 == v50)
            {
              v51 = v50;
              break;
            }
          }
        }
      }
      while (v51 != v53);
      v48 = *(_QWORD *)(a1 + 184);
    }
    if (v48)
    {
      *(_QWORD *)(a1 + 184) = 0;
      WTF::fastFree((WTF *)(v48 - 16), v46);
    }
    WebGPU::CommandEncoder::finalizeBlitCommandEncoder(*(id **)(a1 + 152));

  }
}

void sub_18246CEF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246CF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18246CF14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246CF24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246CF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_18246CF48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18246CF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  void *v14;

  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18246CFC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderExecuteBundles(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  void *v45;
  float64x2_t v46;
  WebGPU::RenderBundle **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  MTLIndexType v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  id v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  id v102;
  WebGPU::RenderBundleEncoder *v103;
  void *v104;
  id v105;
  NSString *v106;
  char *v107;
  WebGPU::RenderBundle **v108;
  id obj;
  uint64_t v110;
  uint64_t v111;
  WebGPU::RenderBundle *v112;
  uint64_t i;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[3];
  id v122;
  int v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  id *v129;
  int *v130;
  int **v131;
  _QWORD v132[18];

  v132[16] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v11 = *(_QWORD *)(a3 + 8 * v8);
      if ((_DWORD)v7 == (_DWORD)v6)
      {
        v12 = v7 + ((unint64_t)v7 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= (unint64_t)v7 + 1)
          v6 = v7 + 1;
        else
          v6 = v13;
        if (v6 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x18246DA94);
        }
        v10 = (char *)WTF::fastMalloc((WTF *)(8 * v6));
        memcpy(v10, v9, 8 * v7);
        if (v9)
        {
          if (v10 == v9)
          {
            LODWORD(v6) = 0;
            v10 = 0;
          }
          WTF::fastFree((WTF *)v9, v14);
        }
      }
      else
      {
        v10 = v9;
      }
      *(_QWORD *)&v10[8 * v7] = v11;
      v7 = (v7 + 1);
      v8 = v7;
      v9 = v10;
    }
    while (v7 < a2);
  }
  else
  {
    LODWORD(v7) = 0;
    v10 = 0;
  }
  v15 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v15 + 4) != 1)
  {
    v27 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::executeBundles(Vector<std::reference_wrapper<RenderBundle>> &&)");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](v132, v28);
    v29 = *(_QWORD *)(v27 + 32);
    v30 = 32 * *(unsigned int *)(v27 + 44);
    v31 = v29 + v30;
    while (v30)
    {
      v32 = *(_DWORD *)(v31 - 8);
      v31 -= 32;
      v30 -= 32;
      if (!v32)
      {
        v33 = v29 + v30;
        if (!*(_BYTE *)(v33 + 16))
        {
          v34 = v132[0];
          v132[0] = 0;
          *(_DWORD *)v33 = 1;
          *(_QWORD *)(v33 + 8) = v34;
          *(_BYTE *)(v33 + 16) = 1;
        }
        goto LABEL_36;
      }
    }
    v35 = *(_QWORD *)(v27 + 24);
    if (v35)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v35 + 16))(v35, 1, v132);
      v36 = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v27 + 24) = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    }
LABEL_36:
    v37 = (_DWORD *)v132[0];
    v132[0] = 0;
    if (v37)
    {
      if (*v37 == 2)
        WTF::StringImpl::destroy();
      else
        *v37 -= 2;
    }

    goto LABEL_43;
  }
  v16 = *(void **)(a1 + 16);
  if (!v16 || !*(_QWORD *)(v15 + 16))
  {
LABEL_42:
    *(_QWORD *)(a1 + 16) = 0;

    goto LABEL_43;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v15, v16))
  {
    v16 = *(void **)(a1 + 16);
    goto LABEL_42;
  }
  v17 = (uint64_t *)(a1 + 184);
  v18 = *(_QWORD *)(a1 + 184);
  if (v18)
  {
    v19 = *(_QWORD *)(a1 + 96);
    v20 = *(_DWORD *)(v18 - 8);
    v21 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(_QWORD *)(v18 + 8 * v24);
    if (v25 != v19)
    {
      v26 = 1;
      while (v25 != -1)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(_QWORD *)(v18 + 8 * v24);
        ++v26;
        if (v25 == v19)
          goto LABEL_47;
      }
      v24 = *(unsigned int *)(v18 - 4);
    }
LABEL_47:
    if (v24 != *(_DWORD *)(v18 - 4))
    {
      *(_QWORD *)(v18 + 8 * v24) = -2;
      ++*(_DWORD *)(*v17 - 16);
      v39 = *v17;
      v40 = *v17 ? *(_DWORD *)(v39 - 12) - 1 : -1;
      *(_DWORD *)(v39 - 12) = v40;
      v41 = *v17;
      if (*v17)
      {
        v42 = 6 * *(_DWORD *)(v41 - 12);
        v43 = *(_DWORD *)(v41 - 4);
        v44 = v42 < v43 && v43 >= 9;
        if (v44)
          WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v17, v43 >> 1, 0);
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
    v45 = 0;
  else
    v45 = *(void **)(a1 + 16);
  v46 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 460));
  v121[0] = vcvtq_f64_f32(*(float32x2_t *)(a1 + 452));
  v121[1] = v46;
  v121[2] = vcvtq_f64_f32(*(float32x2_t *)(a1 + 176));
  objc_msgSend(v45, "setViewport:", v121);
  if (!(_DWORD)v7)
    goto LABEL_43;
  v107 = &v10[8 * v7];
  v47 = (WebGPU::RenderBundle **)v10;
  while (1)
  {
    v108 = v47;
    v112 = *v47;
    if (!*((_QWORD *)*v47 + 2) && !objc_msgSend(*((id *)v112 + 3), "count")
      || (v48 = *((_QWORD *)v112 + 1), !*(_QWORD *)(v48 + 8))
      || v48 != *(_QWORD *)(a1 + 32))
    {
      v104 = (void *)MEMORY[0x1E0CB3940];
      v105 = *((id *)v112 + 12);
      objc_msgSend(v104, "stringWithFormat:", CFSTR("executeBundles: render bundle is not valid, reason = %@"), v105);
      v106 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v106);

      goto LABEL_43;
    }
    WebGPU::RenderBundle::updateMinMaxDepths(v112, *(float *)(a1 + 176), *(float *)(a1 + 180));
    if (!WebGPU::RenderBundle::validateRenderPass((_BOOL8)v112, *(unsigned __int8 *)(a1 + 112), *(unsigned __int8 *)(a1 + 113), a1 + 248, a1 + 376, (uint64_t *)(a1 + 392)))break;
    v49 = *((unsigned int *)v112 + 26);
    v50 = *(_QWORD *)(a1 + 432);
    v44 = __CFADD__(v50, v49);
    v51 = v50 + v49;
    if (v44 || v51 > *(_QWORD *)(a1 + 440))
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("m_drawCount > m_maxDrawCount"));
    else
      *(_QWORD *)(a1 + 432) = v51;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    obj = *((id *)v112 + 3);
    v110 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v117, v132, 16);
    if (v110)
    {
      v111 = *(_QWORD *)v118;
      do
      {
        for (i = 0; i != v110; ++i)
        {
          if (*(_QWORD *)v118 != v111)
            objc_enumerationMutation(obj);
          v114 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * i);
          v52 = (uint64_t *)objc_msgSend(v114, "minVertexCountForDrawCommand");
          v53 = *v52;
          if (!*v52)
          {
            v56 = 0;
            v54 = 0;
LABEL_86:
            v55 = v53 + 88 * v54;
            goto LABEL_87;
          }
          v54 = *(_DWORD *)(v53 - 4);
          v55 = v53 + 88 * v54;
          if (!*(_DWORD *)(v53 - 12))
          {
            v56 = v53 + 88 * v54;
            goto LABEL_86;
          }
          v56 = *v52;
          if (v54)
          {
            v57 = 88 * v54;
            v56 = *v52;
            while (*(_QWORD *)v56 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v56 += 88;
              v57 -= 88;
              if (!v57)
              {
                v56 = v55;
                break;
              }
            }
          }
LABEL_87:
          if (v53)
            v53 += 88 * *(unsigned int *)(v53 - 4);
          if (v53 != v56)
          {
            v115 = v53;
            do
            {
              v58 = *(_QWORD *)(v56 + 8);
              if (v58)
              {
                v59 = *(_QWORD *)(v58 + 8);
                if (v59)
                {
                  v60 = *(_QWORD *)(v56 + 16);
                  if (*(_DWORD *)(v59 + 232) != *(_DWORD *)(v56 + 64)
                    || *(_DWORD *)(v59 + 236) != *(_DWORD *)(v56 + 56)
                    || *(_DWORD *)(v59 + 240) != *(_DWORD *)(v56 + 40)
                    || *(_DWORD *)(v59 + 244) != *(_DWORD *)(v56 + 44)
                    || *(_QWORD *)(v59 + 248) != v60)
                  {
                    WebGPU::Device::icbCommandClampPipeline(*(WebGPU::Device **)(a1 + 32), v60, *(unsigned int *)(a1 + 216));
                    v61 = (id)objc_claimAutoreleasedReturnValue();
                    if (!v61)
                    {

                      goto LABEL_43;
                    }
                    v62 = v61;
                    objc_msgSend(*(id *)(a1 + 16), "setRenderPipelineState:", v61);

                    objc_msgSend(*(id *)(a1 + 16), "setVertexBytes:length:atIndex:", v56 + 32, 56, 0);
                    v63 = *(void **)(a1 + 16);
                    objc_msgSend(v114, "indirectCommandBufferContainer");
                    v64 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v63, "setVertexBuffer:offset:atIndex:", v64, 0, 1);

                    objc_msgSend(*(id *)(a1 + 16), "drawPrimitives:vertexStart:vertexCount:", 0, 0, *(unsigned int *)(v56 + 56));
                    objc_msgSend(*(id *)(a1 + 16), "memoryBarrierWithScope:afterStages:beforeStages:", 1, 1, 1);
                    v65 = *(_DWORD *)(v56 + 56);
                    v66 = *(_QWORD *)(v56 + 16);
                    *(_DWORD *)(v59 + 232) = *(_DWORD *)(v56 + 64);
                    *(_DWORD *)(v59 + 236) = v65;
                    *(_QWORD *)(v59 + 240) = *(_QWORD *)(v56 + 40);
                    *(_QWORD *)(v59 + 248) = v66;

                  }
                }
              }
              v67 = v56 + 88;
              v56 = v55;
              if (v67 != v55)
              {
                v56 = v67;
                while (*(_QWORD *)v56 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v56 += 88;
                  if (v56 == v55)
                  {
                    v56 = v55;
                    break;
                  }
                }
              }
            }
            while (v56 != v115);
          }
          objc_msgSend(v114, "depthStencilState");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          if (v68)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
              v69 = 0;
            else
              v69 = *(void **)(a1 + 16);
            v70 = v69;
            objc_msgSend(v70, "setDepthStencilState:", v68);

          }
          if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
            v71 = 0;
          else
            v71 = *(void **)(a1 + 16);
          v72 = v71;
          objc_msgSend(v72, "setCullMode:", objc_msgSend(v114, "cullMode"));

          if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
            v73 = 0;
          else
            v73 = *(void **)(a1 + 16);
          v74 = v73;
          objc_msgSend(v74, "setFrontFacingWinding:", objc_msgSend(v114, "frontFace"));

          if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
            v75 = 0;
          else
            v75 = *(void **)(a1 + 16);
          v76 = v75;
          objc_msgSend(v76, "setDepthClipMode:", objc_msgSend(v114, "depthClipMode"));

          if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
            v77 = 0;
          else
            v77 = *(void **)(a1 + 16);
          v78 = v77;
          objc_msgSend(v114, "depthBias");
          v80 = v79;
          objc_msgSend(v114, "depthBiasSlopeScale");
          v82 = v81;
          objc_msgSend(v114, "depthBiasClamp");
          LODWORD(v84) = v83;
          LODWORD(v85) = v80;
          LODWORD(v86) = v82;
          objc_msgSend(v78, "setDepthBias:slopeScale:clamp:", v85, v86, v84);

          v87 = objc_msgSend(v114, "resources");
          v88 = *(_DWORD *)(v87 + 12);
          if (v88)
          {
            v89 = *(_QWORD *)v87;
            v116 = *(_QWORD *)v87 + 48 * v88;
            do
            {
              if ((*(_BYTE *)(v89 + 40) & 3) != 0 && *(_DWORD *)(v89 + 12))
              {
                if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
                {
                  v90 = 0;
                  v91 = *(unsigned int *)(v89 + 12);
                  if (!(_DWORD)v91)
                    goto LABEL_157;
                }
                else
                {
                  v90 = *(id *)(a1 + 16);
                  v91 = *(unsigned int *)(v89 + 12);
                  if (!(_DWORD)v91)
                    goto LABEL_157;
                }
                v92 = v90;
                objc_msgSend(v90, "useResources:count:usage:stages:", *(_QWORD *)v89, v91, *(_QWORD *)(v89 + 32), *(_QWORD *)(v89 + 40));

              }
              v93 = *(unsigned int *)(v89 + 12);
              if ((_DWORD)v93)
              {
                v94 = 0;
                v95 = 0;
                while (v95 < *(unsigned int *)(v89 + 28))
                {
                  if (v95 >= *(unsigned int *)(v89 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18246DA8CLL);
                  }
                  v96 = (int *)(*(_QWORD *)(v89 + 16) + v94);
                  v97 = *(void **)(*(_QWORD *)v89 + 8 * v95);
                  v123 = *v96;
                  v122 = v97;
                  v128 = a1;
                  v129 = &v122;
                  v130 = &v123;
                  v124 = &v123;
                  v125 = a1;
                  v126 = a1;
                  v127 = &v123;
                  v98 = v96[4];
                  if ((_DWORD)v98 == -1
                    || (v131 = &v124,
                        ((void (*)(int ***, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU17RenderPassEncoder28addResourceToActiveResourcesERKNS_7variantIJNS6_6RefPtrINS8_6BufferENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_IKNS8_11TextureViewENSD_ISJ_EENSF_ISJ_EEEENSB_IKNS8_15ExternalTextureENSD_ISO_EENSF_ISO_EEEEEEEPU22objcproto11MTLResource11objc_objectNS6_9OptionSetINS8_19BindGroupEntryUsageEEEE3__0JZNS9_28addResourceToActiveResourcesESU_SW_SZ_E3__1ZNS9_28addResourceToActiveResourcesESU_SW_SZ_E3__2EEEEEJRKNS0_6__implIJSH_SM_SR_EEEEEEDcOT_DpOT0____fmatrix[v98])(&v131, v96 + 2), v122, v124 = (int *)a1, v125 = a1, v126 = a1, v99 = v96[4], (_DWORD)v99 == -1))
                  {
                    std::__throw_bad_variant_access[abi:sn180100]();
                    __break(1u);
                  }
                  v131 = &v124;
                  ((void (*)(int ***, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU17RenderPassEncoder17setCommandEncoderERKNS_7variantIJNS6_6RefPtrINS8_6BufferENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_IKNS8_11TextureViewENSD_ISJ_EENSF_ISJ_EEEENSB_IKNS8_15ExternalTextureENSD_ISO_EENSF_ISO_EEEEEEEE3__0JZNS9_17setCommandEncoderESU_E3__1ZNS9_17setCommandEncoderESU_E3__2EEEEEJRKNS0_6__implIJSH_SM_SR_EEEEEEDcOT_DpOT0____fmatrix[v99])(&v131, v96 + 2);
                  ++v95;
                  v94 += 32;
                  if (v93 == v95)
                    goto LABEL_125;
                }
LABEL_157:
                __break(0xC471u);
                JUMPOUT(0x18246DA84);
              }
LABEL_125:
              v89 += 48;
            }
            while (v89 != v116);
          }
          objc_msgSend(v114, "indirectCommandBuffer");
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
            v101 = 0;
          else
            v101 = *(void **)(a1 + 16);
          v102 = v101;
          objc_msgSend(v102, "executeCommandsInBuffer:withRange:", v100, 0, objc_msgSend(v100, "size"));

        }
        v110 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v117, v132, 16);
      }
      while (v110);
    }

    v103 = (WebGPU::RenderBundleEncoder *)*((_QWORD *)v112 + 2);
    if (v103)
      WebGPU::RenderBundleEncoder::replayCommands(v103, (WebGPU::RenderPassEncoder *)a1);
    v47 = v108 + 1;
    if (v108 + 1 == (WebGPU::RenderBundle **)v107)
      goto LABEL_43;
  }
  WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("executeBundles: validation failed"));
LABEL_43:
  if (v10)
    WTF::fastFree((WTF *)v10, v38);
}

void sub_18246DAA0(_Unwind_Exception *a1)
{
  WTF *v1;
  void *v2;
  void *v3;
  void *v5;

  if (v1)
  {
    WTF::fastFree(v1, v5);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderPassEncoderInsertDebugMarker(uint64_t a1, char *__s)
{
  void *v3;
  __CFString *v4;
  _DWORD *result;
  _DWORD *v6;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (*(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
  {
    v3 = *(void **)(a1 + 16);
    if (v6)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E0FD9588;
    objc_msgSend(v3, "insertDebugSignpost:", v4);

  }
  result = v6;
  if (v6)
  {
    if (*v6 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v6 -= 2;
  }
  return result;
}

void sub_18246DCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void wgpuRenderPassEncoderPopDebugGroup(uint64_t a1)
{
  uint64_t v1;

  if (*(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 4) == 1 && (v1 = *(_QWORD *)(a1 + 24)) != 0)
    {
      *(_QWORD *)(a1 + 24) = v1 - 1;
      objc_msgSend(*(id *)(a1 + 16), "popDebugGroup");
    }
    else
    {
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("popDebugGroup: validation failed"));
    }
  }
}

_DWORD *wgpuRenderPassEncoderPushDebugGroup(uint64_t a1, char *__s)
{
  void *v3;
  __CFString *v4;
  _DWORD *result;
  _DWORD *v6;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (*(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
  {
    v3 = *(void **)(a1 + 16);
    ++*(_QWORD *)(a1 + 24);
    if (v6)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E0FD9588;
    objc_msgSend(v3, "pushDebugGroup:", v4);

  }
  result = v6;
  if (v6)
  {
    if (*v6 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v6 -= 2;
  }
  return result;
}

void sub_18246DE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void wgpuRenderPassEncoderSetBindGroup(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v6;
  void *v8;
  uint64_t v12;
  uint64_t v13;
  __CFString *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  NSString *v27;
  unsigned int v28;
  WTF *v29;
  unint64_t v30;
  int *v31;
  unint64_t v32;
  uint64_t v33;
  WTF *v34;
  __int128 *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  void *v40;
  WTF *v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  WTF *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  id v61;
  int v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  id *v68;
  int *v69;

  v60 = a2;
  v6 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v6 + 4) != 1)
  {
    v15 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::setBindGroup(uint32_t, const BindGroup &, uint32_t, const uint32_t *)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v63, v16);
    v17 = *(_QWORD *)(v15 + 32);
    v18 = 32 * *(unsigned int *)(v15 + 44);
    v19 = v17 + v18;
    while (v18)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v19 -= 32;
      v18 -= 32;
      if (!v20)
      {
        v21 = v17 + v18;
        if (!*(_BYTE *)(v21 + 16))
        {
          v22 = v63;
          v63 = 0;
          *(_DWORD *)v21 = 1;
          *(_QWORD *)(v21 + 8) = v22;
          *(_BYTE *)(v21 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    v23 = *(_QWORD *)(v15 + 24);
    if (v23)
    {
      (*(void (**)(uint64_t, uint64_t, int **))(*(_QWORD *)v23 + 16))(v23, 1, &v63);
      v24 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
LABEL_18:
    v25 = v63;
    v63 = 0;
    if (v25)
    {
      if (*v25 == 2)
        WTF::StringImpl::destroy();
      else
        *v25 -= 2;
    }

    return;
  }
  v8 = *(void **)(a1 + 16);
  if (!v8 || !*(_QWORD *)(v6 + 16))
  {
LABEL_24:
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
  {
    v8 = *(void **)(a1 + 16);
    goto LABEL_24;
  }
  v12 = *(_QWORD *)(a3 + 64);
  if (!v12 || (v13 = *(_QWORD *)(a3 + 40), !*(_QWORD *)(v13 + 8)) || v13 != *(_QWORD *)(a1 + 32))
  {
    v14 = CFSTR("setBindGroup: invalid bind group");
LABEL_9:
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v14->isa);
    return;
  }
  if (*(_DWORD *)(v13 + 88) <= a2)
  {
    v14 = CFSTR("setBindGroup: groupIndex >= limits.maxBindGroups");
    goto LABEL_9;
  }
  WebGPU::BindGroupLayout::errorValidatingDynamicOffsets(v12, a5, a4, a3);
  v26 = objc_claimAutoreleasedReturnValue();
  if (v26)
  {
    v55 = (id)v26;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GPURenderPassEncoder.setBindGroup: %@"), v26);
    v27 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v27);

    return;
  }
  v28 = *(_DWORD *)(a1 + 84);
  if (a2 > v28)
    v28 = a2;
  *(_DWORD *)(a1 + 84) = v28;
  if (!a4)
    goto LABEL_43;
  v59 = a4;
  if ((unint64_t)a4 >> 30)
  {
    __break(0xC471u);
    goto LABEL_68;
  }
  v29 = (WTF *)WTF::fastMalloc((WTF *)(4 * a4));
  v58 = a4;
  v57 = v29;
  v30 = (a4 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v30 < 7)
  {
    v31 = (int *)a5;
    do
    {
LABEL_40:
      v39 = *v31++;
      *(_DWORD *)v29 = v39;
      v29 = (WTF *)((char *)v29 + 4);
    }
    while (v31 != (int *)(a5 + 4 * a4));
    goto LABEL_41;
  }
  v31 = (int *)a5;
  if ((unint64_t)v29 - a5 < 0x20)
    goto LABEL_40;
  v32 = v30 + 1;
  v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
  v34 = (WTF *)((char *)v29 + v33);
  v31 = (int *)(a5 + v33);
  v35 = (__int128 *)(a5 + 16);
  v36 = (_OWORD *)((char *)v29 + 16);
  v37 = v32 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v38 = *v35;
    *(v36 - 1) = *(v35 - 1);
    *v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 8;
  }
  while (v37);
  v29 = v34;
  if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_40;
LABEL_41:
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(a1 + 160), (int *)&v60, (uint64_t *)&v57, (uint64_t)&v63);
  v41 = v57;
  if (v57)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree(v41, v40);
  }
LABEL_43:
  v42 = *(_DWORD *)(a3 + 60);
  if (v42)
  {
    v43 = *(_QWORD *)(a3 + 48);
    v56 = (id)(v43 + 48 * v42);
    while (1)
    {
      if ((*(_BYTE *)(v43 + 40) & 3) != 0 && *(_DWORD *)(v43 + 12))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
          v44 = 0;
        else
          v44 = *(void **)(a1 + 16);
        v45 = v44;
        v46 = *(unsigned int *)(v43 + 12);
        if (!(_DWORD)v46)
        {
          __break(0xC471u);
          JUMPOUT(0x18246E324);
        }
        v47 = v45;
        objc_msgSend(v45, "useResources:count:usage:stages:", *(_QWORD *)v43, v46, *(_QWORD *)(v43 + 32), *(_QWORD *)(v43 + 40));

      }
      v48 = *(unsigned int *)(v43 + 12);
      if ((_DWORD)v48)
        break;
LABEL_45:
      v43 += 48;
      if ((id)v43 == v56)
        goto LABEL_61;
    }
    v49 = 0;
    v50 = 0;
    while (1)
    {
      if (v50 >= *(unsigned int *)(v43 + 28))
        goto LABEL_64;
      if (v50 >= *(unsigned int *)(v43 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x18246E31CLL);
      }
      v51 = (int *)(*(_QWORD *)(v43 + 16) + v49);
      v52 = *(void **)(*(_QWORD *)v43 + 8 * v50);
      v62 = *v51;
      v61 = v52;
      v67 = a1;
      v68 = &v61;
      v69 = &v62;
      v63 = &v62;
      v64 = a1;
      v65 = a1;
      v66 = &v62;
      v53 = v51[4];
      if ((_DWORD)v53 == -1)
        goto LABEL_63;
      v57 = (WTF *)&v63;
      ((void (*)(WTF **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU17RenderPassEncoder28addResourceToActiveResourcesERKNS_7variantIJNS6_6RefPtrINS8_6BufferENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_IKNS8_11TextureViewENSD_ISJ_EENSF_ISJ_EEEENSB_IKNS8_15ExternalTextureENSD_ISO_EENSF_ISO_EEEEEEEPU22objcproto11MTLResource11objc_objectNS6_9OptionSetINS8_19BindGroupEntryUsageEEEE3__0JZNS9_28addResourceToActiveResourcesESU_SW_SZ_E3__1ZNS9_28addResourceToActiveResourcesESU_SW_SZ_E3__2EEEEEJRKNS0_6__implIJSH_SM_SR_EEEEEEDcOT_DpOT0____fmatrix[v53])(&v57, v51 + 2);

      v63 = (int *)a1;
      v64 = a1;
      v65 = a1;
      v54 = v51[4];
      if ((_DWORD)v54 == -1)
        break;
      v57 = (WTF *)&v63;
      ((void (*)(WTF **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU17RenderPassEncoder17setCommandEncoderERKNS_7variantIJNS6_6RefPtrINS8_6BufferENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_IKNS8_11TextureViewENSD_ISJ_EENSF_ISJ_EEEENSB_IKNS8_15ExternalTextureENSD_ISO_EENSF_ISO_EEEEEEEE3__0JZNS9_17setCommandEncoderESU_E3__1ZNS9_17setCommandEncoderESU_E3__2EEEEEJRKNS0_6__implIJSH_SM_SR_EEEEEEDcOT_DpOT0____fmatrix[v54])(&v57, v51 + 2);
      ++v50;
      v49 += 32;
      if (v48 == v50)
        goto LABEL_45;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_64:
    __break(0xC471u);
LABEL_68:
    JUMPOUT(0x18246E314);
  }
LABEL_61:
  v57 = (WTF *)a3;
  WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebGPU::BindGroup const*>((uint64_t *)(a1 + 408), (int *)&v60, (_DWORD **)&v57, (uint64_t)&v63);
}

void sub_18246E330(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF *a11, int a12)
{
  if (a11)
  {
    WTF::fastFree(a11, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_18246E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  void *v16;

  if (a16)
  {
    if (*a16 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a16 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18246E3C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246E3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_18246E3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetBlendConstant(_QWORD *a1, double *a2)
{
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _DWORD *v22;

  v3 = a1[19];
  if (*(_BYTE *)(v3 + 4) != 1)
  {
    v7 = a1[4];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::setBlendConstant(const WGPUColor &)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v22, v8);
    v9 = *(_QWORD *)(v7 + 32);
    v10 = 32 * *(unsigned int *)(v7 + 44);
    v11 = v9 + v10;
    while (v10)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v11 -= 32;
      v10 -= 32;
      if (!v12)
      {
        v13 = v9 + v10;
        if (!*(_BYTE *)(v13 + 16))
        {
          v14 = v22;
          v22 = 0;
          *(_DWORD *)v13 = 1;
          *(_QWORD *)(v13 + 8) = v14;
          *(_BYTE *)(v13 + 16) = 1;
        }
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v7 + 24);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v15 + 16))(v15, 1, &v22);
      v16 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
LABEL_15:
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*v17 == 2)
      {
        WTF::StringImpl::destroy();

        return;
      }
      *v17 -= 2;
    }

    return;
  }
  v5 = (void *)a1[2];
  if (!v5 || !*(_QWORD *)(v3 + 16))
    goto LABEL_21;
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
  {
    v5 = (void *)a1[2];
LABEL_21:
    a1[2] = 0;

    return;
  }
  if (*(_BYTE *)(a1[19] + 76))
    v6 = 0;
  else
    v6 = (void *)a1[2];
  v18 = *a2;
  v19 = a2[1];
  *(float *)&v18 = *a2;
  *(float *)&v19 = v19;
  v20 = a2[2];
  v21 = a2[3];
  *(float *)&v20 = v20;
  *(float *)&v21 = v21;
  objc_msgSend(v6, "setBlendColorRed:green:blue:alpha:", v18, v19, v20, v21);
}

void sub_18246E598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetIndexBuffer(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6;
  void *v8;
  uint64_t v12;
  __CFString *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  WebGPU::Buffer *v28;
  WTF *v29;
  void *v30;
  _DWORD *v31;

  v6 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v6 + 4) != 1)
  {
    v14 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::setIndexBuffer(Buffer &, WGPUIndexFormat, uint64_t, uint64_t)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v31, v15);
    v16 = *(_QWORD *)(v14 + 32);
    v17 = 32 * *(unsigned int *)(v14 + 44);
    v18 = v16 + v17;
    while (v17)
    {
      v19 = *(_DWORD *)(v18 - 8);
      v18 -= 32;
      v17 -= 32;
      if (!v19)
      {
        v20 = v16 + v17;
        if (!*(_BYTE *)(v20 + 16))
        {
          v21 = v31;
          v31 = 0;
          *(_DWORD *)v20 = 1;
          *(_QWORD *)(v20 + 8) = v21;
          *(_BYTE *)(v20 + 16) = 1;
        }
        goto LABEL_19;
      }
    }
    v22 = *(_QWORD *)(v14 + 24);
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v22 + 16))(v22, 1, &v31);
      v23 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
LABEL_19:
    v24 = v31;
    v31 = 0;
    if (v24)
    {
      if (*v24 == 2)
        WTF::StringImpl::destroy();
      else
        *v24 -= 2;
    }

    return;
  }
  v8 = *(void **)(a1 + 16);
  if (!v8 || !*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
  {
    v8 = *(void **)(a1 + 16);
    goto LABEL_26;
  }
  if (*(_BYTE *)(a2 + 52) != 4 && !*(_QWORD *)(a2 + 16)
    || (v12 = *(_QWORD *)(a2 + 256), !*(_QWORD *)(v12 + 8))
    || v12 != *(_QWORD *)(a1 + 32))
  {
    v13 = CFSTR("setIndexBuffer: invalid buffer");
LABEL_10:
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v13->isa);
    return;
  }
  WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(a1 + 152));
  if (*(_BYTE *)(a2 + 52) != 4)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0)
      goto LABEL_32;
    v26 = 3;
    if (a3 == 1)
      v26 = 1;
    if ((v26 & a4) != 0)
    {
LABEL_32:
      v13 = CFSTR("setIndexBuffer: validation failed");
      goto LABEL_10;
    }
    v27 = *(_QWORD *)(a2 + 40);
    if (a5 == -1)
    {
      if (v27 < a4)
        goto LABEL_41;
      a5 = v27 - a4;
    }
    if (!__CFADD__(a4, a5) && a4 + a5 <= v27)
    {
      ++*(_DWORD *)a2;
      v28 = *(WebGPU::Buffer **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = a2;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
        {
          WebGPU::Buffer::~Buffer(v28, v25);
          WTF::fastFree(v29, v30);
        }
        else
        {
          --*(_DWORD *)v28;
        }
      }
      *(_QWORD *)(a1 + 56) = a4;
      *(_QWORD *)(a1 + 64) = a5;
      *(_QWORD *)(a1 + 48) = a3 == 2;
      WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, a2, *(void **)(a2 + 16), 1, 0, 0, 2u);
      return;
    }
LABEL_41:
    v13 = CFSTR("setIndexBuffer: computed size overflows");
    goto LABEL_10;
  }
}

void sub_18246E890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  __CFString *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  void *v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  WebGPU::RenderPipeline *v28;
  WTF *v29;
  void *v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  int v43;
  void *v44;
  void *v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  _DWORD *v65;

  v3 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v3 + 4) == 1)
  {
    v5 = *(void **)(a1 + 16);
    if (v5 && *(_QWORD *)(v3 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
      {
        if (!*(_QWORD *)(a2 + 16) || (v6 = *(_QWORD *)(a2 + 24), !*(_QWORD *)(v6 + 8)) || v6 != *(_QWORD *)(a1 + 32))
        {
          v7 = CFSTR("setPipeline: invalid RenderPipeline");
LABEL_9:
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v7->isa);
          return;
        }
        v19 = *(unsigned __int8 *)(a1 + 113);
        if (*(_BYTE *)(a1 + 112) && (objc_msgSend(*(id *)(a2 + 112), "isDepthWriteEnabled") & 1) != 0
          || v19 && *(_BYTE *)(a2 + 448))
        {
          v7 = CFSTR("setPipeline: invalid depth stencil state");
          goto LABEL_9;
        }
        if (!WebGPU::RenderPipeline::colorDepthStencilTargetsMatch(a2, a1 + 248, a1 + 376, (uint64_t *)(a1 + 392)))
        {
          v7 = CFSTR("setPipeline: color and depth targets from pass do not match pipeline");
          goto LABEL_9;
        }
        v21 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
        if (v21)
        {
          v22 = *(v21 - 1);
          v23 = &v21[6 * v22];
          if (*(v21 - 3))
          {
            v24 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
            if ((_DWORD)v22)
            {
              v25 = 24 * v22;
              v24 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
              while (*v24 >= 0xFFFFFFFE)
              {
                v24 += 6;
                v25 -= 24;
                if (!v25)
                {
                  v24 = v23;
                  break;
                }
              }
            }
LABEL_42:
            if (v21)
              v21 += 6 * *(v21 - 1);
            if (v21 != v24)
            {
              v26 = 0;
              do
              {
                v27 = v23;
                if (v24 + 6 != v23)
                {
                  v27 = v24 + 6;
                  while (*v27 >= 0xFFFFFFFE)
                  {
                    v27 += 6;
                    if (v27 == v23)
                    {
                      v27 = v23;
                      break;
                    }
                  }
                }
                v26 += v24[5];
                v24 = v27;
              }
              while (v27 != v21);
              if (v26 >= 0xFFFFFFFFFFFFFFFDLL)
              {
                v7 = CFSTR("setPipeline: invalid size of fragmentDynamicOffsets");
                goto LABEL_9;
              }
            }
            *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 32);
            ++*(_DWORD *)a2;
            v28 = *(WebGPU::RenderPipeline **)(a1 + 72);
            *(_QWORD *)(a1 + 72) = a2;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
              {
                WebGPU::RenderPipeline::~RenderPipeline(v28, v20);
                WTF::fastFree(v29, v30);
              }
              else
              {
                --*(_DWORD *)v28;
              }
            }
            v31 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 64);
            if (v31)
            {
              v32 = *(v31 - 1);
              v33 = &v31[6 * v32];
              if (*(v31 - 3))
              {
                v34 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 64);
                if ((_DWORD)v32)
                {
                  v35 = 24 * v32;
                  v34 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 64);
                  while (*v34 >= 0xFFFFFFFE)
                  {
                    v34 += 6;
                    v35 -= 24;
                    if (!v35)
                    {
                      v34 = v33;
                      break;
                    }
                  }
                }
LABEL_68:
                if (v31)
                  v31 += 6 * *(v31 - 1);
                if (v31 == v34)
                {
                  LODWORD(v36) = 0;
                }
                else
                {
                  v36 = 0;
                  do
                  {
                    v37 = v33;
                    if (v34 + 6 != v33)
                    {
                      v37 = v34 + 6;
                      while (*v37 >= 0xFFFFFFFE)
                      {
                        v37 += 6;
                        if (v37 == v33)
                        {
                          v37 = v33;
                          break;
                        }
                      }
                    }
                    v36 += v34[5];
                    v34 = v37;
                  }
                  while (v37 != v31);
                  v38 = *(unsigned int *)(a1 + 132);
                  if (v36 > v38)
                  {
                    v39 = *(unsigned int *)(a1 + 128);
                    if (v36 > v39)
                    {
                      v40 = v39 + (v39 >> 2);
                      if (v40 >= 0x10)
                        v41 = v40 + 1;
                      else
                        v41 = 16;
                      if (v41 <= v36)
                        v41 = v36;
                      if (v41 >> 30)
                        goto LABEL_134;
                      v42 = *(void **)(a1 + 120);
                      v43 = v41;
                      v44 = (void *)WTF::fastMalloc((WTF *)(4 * v41));
                      *(_DWORD *)(a1 + 128) = v43;
                      *(_QWORD *)(a1 + 120) = v44;
                      memcpy(v44, v42, 4 * v38);
                      if (v42)
                      {
                        if (*(void **)(a1 + 120) == v42)
                        {
                          *(_QWORD *)(a1 + 120) = 0;
                          *(_DWORD *)(a1 + 128) = 0;
                        }
                        WTF::fastFree((WTF *)v42, v45);
                      }
                    }
                  }
                }
                *(_DWORD *)(a1 + 132) = v36;
                v46 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
                if (v46)
                {
                  v47 = *(v46 - 1);
                  v48 = &v46[6 * v47];
                  if (*(v46 - 3))
                  {
                    v49 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
                    if ((_DWORD)v47)
                    {
                      v50 = 24 * v47;
                      v49 = *(_DWORD **)(*(_QWORD *)(a2 + 136) + 72);
                      while (*v49 >= 0xFFFFFFFE)
                      {
                        v49 += 6;
                        v50 -= 24;
                        if (!v50)
                        {
                          v49 = v48;
                          goto LABEL_101;
                        }
                      }
                    }
                    goto LABEL_101;
                  }
                  v49 = &v46[6 * v47];
                }
                else
                {
                  v49 = 0;
                  LODWORD(v47) = 0;
                }
                v48 = &v46[6 * v47];
LABEL_101:
                if (v46)
                  v46 += 6 * *(v46 - 1);
                if (v46 == v49)
                {
                  v53 = 3;
                }
                else
                {
                  v51 = 0;
                  do
                  {
                    v52 = v48;
                    if (v49 + 6 != v48)
                    {
                      v52 = v49 + 6;
                      while (*v52 >= 0xFFFFFFFE)
                      {
                        v52 += 6;
                        if (v52 == v48)
                        {
                          v52 = v48;
                          break;
                        }
                      }
                    }
                    v51 += v49[5];
                    v49 = v52;
                  }
                  while (v52 != v46);
                  v53 = v51 + 3;
                }
                v54 = *(unsigned int *)(a1 + 148);
                if (v53 <= v54)
                  goto LABEL_126;
                v55 = *(unsigned int *)(a1 + 144);
                if (v53 <= v55)
                  goto LABEL_126;
                v56 = v55 + (v55 >> 2);
                if (v56 >= 0x10)
                  v57 = v56 + 1;
                else
                  v57 = 16;
                if (v57 <= v53)
                  v58 = v53;
                else
                  v58 = v57;
                if (!(v58 >> 30))
                {
                  v59 = *(void **)(a1 + 136);
                  v60 = (void *)WTF::fastMalloc((WTF *)(4 * v58));
                  *(_DWORD *)(a1 + 144) = v58;
                  *(_QWORD *)(a1 + 136) = v60;
                  memcpy(v60, v59, 4 * v54);
                  if (v59)
                  {
                    if (*(void **)(a1 + 136) == v59)
                    {
                      *(_QWORD *)(a1 + 136) = 0;
                      *(_DWORD *)(a1 + 144) = 0;
                    }
                    WTF::fastFree((WTF *)v59, v61);
                  }
LABEL_126:
                  *(_DWORD *)(a1 + 148) = v53;
                  if (v53 <= 2)
                  {
                    if (*(_DWORD *)(a1 + 144) <= 2u)
                    {
                      v62 = *(void **)(a1 + 136);
                      v63 = (void *)WTF::fastMalloc((WTF *)0x40);
                      *(_DWORD *)(a1 + 144) = 16;
                      *(_QWORD *)(a1 + 136) = v63;
                      memcpy(v63, v62, 4 * v53);
                      if (v62)
                      {
                        if (*(void **)(a1 + 136) == v62)
                        {
                          *(_QWORD *)(a1 + 136) = 0;
                          *(_DWORD *)(a1 + 144) = 0;
                        }
                        WTF::fastFree((WTF *)v62, v64);
                      }
                    }
                    *(_DWORD *)(a1 + 148) = 3;
                  }
                  *(_DWORD *)(*(_QWORD *)(a1 + 136) + 8) = *(_DWORD *)(a2 + 92);
                  return;
                }
LABEL_134:
                __break(0xC471u);
                JUMPOUT(0x18246EF38);
              }
              v34 = &v31[6 * v32];
            }
            else
            {
              v34 = 0;
              LODWORD(v32) = 0;
            }
            v33 = &v31[6 * v32];
            goto LABEL_68;
          }
          v24 = &v21[6 * v22];
        }
        else
        {
          v24 = 0;
          LODWORD(v22) = 0;
        }
        v23 = &v21[6 * v22];
        goto LABEL_42;
      }
      v5 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  v8 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::setPipeline(const RenderPipeline &)");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v65, v9);
  v10 = *(_QWORD *)(v8 + 32);
  v11 = 32 * *(unsigned int *)(v8 + 44);
  v12 = v10 + v11;
  while (v11)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v12 -= 32;
    v11 -= 32;
    if (!v13)
    {
      v14 = v10 + v11;
      if (!*(_BYTE *)(v14 + 16))
      {
        v15 = v65;
        v65 = 0;
        *(_DWORD *)v14 = 1;
        *(_QWORD *)(v14 + 8) = v15;
        *(_BYTE *)(v14 + 16) = 1;
      }
      goto LABEL_18;
    }
  }
  v16 = *(_QWORD *)(v8 + 24);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 16))(v16, 1, &v65);
    v17 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
LABEL_18:
  v18 = v65;
  v65 = 0;
  if (v18)
  {
    if (*v18 == 2)
      WTF::StringImpl::destroy();
    else
      *v18 -= 2;
  }

}

void sub_18246EF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetScissorRect(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6;
  void *v8;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  void *v23;
  id v24;
  _QWORD v25[4];

  v6 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v6 + 4) == 1)
  {
    v8 = *(void **)(a1 + 16);
    if (v8 && *(_QWORD *)(v6 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
      {
        if (__CFADD__(a2, a4)
          || a4 + a2 > *(_DWORD *)(a1 + 208)
          || __CFADD__(a3, a5)
          || a5 + a3 > *(_DWORD *)(a1 + 212))
        {
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, 0);
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76))
            v23 = 0;
          else
            v23 = *(void **)(a1 + 16);
          v24 = v23;
          v25[0] = a2;
          v25[1] = a3;
          v25[2] = a4;
          v25[3] = a5;
          objc_msgSend(v24, "setScissorRect:", v25);

        }
        return;
      }
      v8 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  v12 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::setScissorRect(uint32_t, uint32_t, uint32_t, uint32_t)");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](v25, v13);
  v14 = *(_QWORD *)(v12 + 32);
  v15 = 32 * *(unsigned int *)(v12 + 44);
  v16 = v14 + v15;
  while (v15)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v16 -= 32;
    v15 -= 32;
    if (!v17)
    {
      v18 = v14 + v15;
      if (!*(_BYTE *)(v18 + 16))
      {
        v19 = v25[0];
        v25[0] = 0;
        *(_DWORD *)v18 = 1;
        *(_QWORD *)(v18 + 8) = v19;
        *(_BYTE *)(v18 + 16) = 1;
      }
      goto LABEL_18;
    }
  }
  v20 = *(_QWORD *)(v12 + 24);
  if (v20)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v20 + 16))(v20, 1, v25);
    v21 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
LABEL_18:
  v22 = (_DWORD *)v25[0];
  v25[0] = 0;
  if (v22)
  {
    if (*v22 == 2)
      WTF::StringImpl::destroy();
    else
      *v22 -= 2;
  }

}

void sub_18246F1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246F1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  void *v11;

  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18246F1F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetStencilReference(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;

  v3 = a1[19];
  if (*(_BYTE *)(v3 + 4) != 1)
  {
    v7 = a1[4];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::setStencilReference(uint32_t)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v18, v8);
    v9 = *(_QWORD *)(v7 + 32);
    v10 = 32 * *(unsigned int *)(v7 + 44);
    v11 = v9 + v10;
    while (v10)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v11 -= 32;
      v10 -= 32;
      if (!v12)
      {
        v13 = v9 + v10;
        if (!*(_BYTE *)(v13 + 16))
        {
          v14 = v18;
          v18 = 0;
          *(_DWORD *)v13 = 1;
          *(_QWORD *)(v13 + 8) = v14;
          *(_BYTE *)(v13 + 16) = 1;
        }
        goto LABEL_16;
      }
    }
    v15 = *(_QWORD *)(v7 + 24);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v15 + 16))(v15, 1, &v18);
      v16 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
LABEL_16:
    v17 = v18;
    v18 = 0;
    if (v17)
    {
      if (*v17 == 2)
      {
        WTF::StringImpl::destroy();

        return;
      }
      *v17 -= 2;
    }

    return;
  }
  v5 = (void *)a1[2];
  if (!v5 || !*(_QWORD *)(v3 + 16))
    goto LABEL_22;
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
  {
    v5 = (void *)a1[2];
LABEL_22:
    a1[2] = 0;

    return;
  }
  if (*(_BYTE *)(a1[19] + 76))
    v6 = 0;
  else
    v6 = (void *)a1[2];
  objc_msgSend(v6, "setStencilReferenceValue:", a2);
}

void sub_18246F398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetVertexBuffer(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6;
  void *v8;
  int v12;
  uint64_t v13;
  __CFString *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  id v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  int v54;
  void *v55;
  uint64_t v56;
  int v57;
  void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  id v64;
  _DWORD *v65;

  v6 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v6 + 4) != 1)
  {
    v15 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::setVertexBuffer(uint32_t, const Buffer *, uint64_t, uint64_t)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x186DAB230](&v65, v16);
    v17 = *(_QWORD *)(v15 + 32);
    v18 = 32 * *(unsigned int *)(v15 + 44);
    v19 = v17 + v18;
    while (v18)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v19 -= 32;
      v18 -= 32;
      if (!v20)
      {
        v21 = v17 + v18;
        if (!*(_BYTE *)(v21 + 16))
        {
          v22 = v65;
          v65 = 0;
          *(_DWORD *)v21 = 1;
          *(_QWORD *)(v21 + 8) = v22;
          *(_BYTE *)(v21 + 16) = 1;
        }
        goto LABEL_20;
      }
    }
    v23 = *(_QWORD *)(v15 + 24);
    if (v23)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v23 + 16))(v23, 1, &v65);
      v24 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
LABEL_20:
    v25 = v65;
    v65 = 0;
    if (v25)
    {
      if (*v25 == 2)
        WTF::StringImpl::destroy();
      else
        *v25 -= 2;
    }

    return;
  }
  v8 = *(void **)(a1 + 16);
  if (!v8 || !*(_QWORD *)(v6 + 16))
  {
LABEL_27:
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
  {
    v8 = *(void **)(a1 + 16);
    goto LABEL_27;
  }
  if (a3)
  {
    WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a3, *(WebGPU::CommandEncoder **)(a1 + 152));
    v12 = *(unsigned __int8 *)(a3 + 52);
    if (v12 != 4 && !*(_QWORD *)(a3 + 16)
      || (v13 = *(_QWORD *)(a3 + 256), !*(_QWORD *)(v13 + 8))
      || v13 != *(_QWORD *)(a1 + 32))
    {
      v14 = CFSTR("setVertexBuffer: invalid buffer");
LABEL_11:
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v14->isa);
      return;
    }
    if (v12 != 4)
    {
      if (a5 == -1)
      {
        v33 = *(_QWORD *)(a3 + 40);
        v42 = v33 >= a4;
        v34 = v33 - a4;
        if (!v42)
        {
LABEL_41:
          v14 = CFSTR("setVertexBuffer: size overflowed");
          goto LABEL_11;
        }
        a5 = v34;
      }
      if (__CFADD__(a4, a5) || a4 + a5 > *(_QWORD *)(a3 + 40))
        goto LABEL_41;
      if (*(_DWORD *)(v13 + 152) <= a2 || (a4 & 3) != 0 || (*(_DWORD *)(a3 + 48) & 0x20) == 0)
      {
        v14 = CFSTR("setVertexBuffer: validation failed");
        goto LABEL_11;
      }
      v43 = *(_DWORD *)(a1 + 80);
      if (a2 > v43)
        v43 = a2;
      *(_DWORD *)(a1 + 80) = v43;
      v44 = *(id *)(a3 + 16);
      v45 = objc_msgSend(v44, "length");
      v46 = (uint64_t *)(a1 + 400);
      v64 = v44;
      v47 = *(_QWORD *)(a1 + 400);
      if (v47
        || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 400), 8u), (v47 = *v46) != 0))
      {
        v48 = *(_DWORD *)(v47 - 8);
      }
      else
      {
        v48 = 0;
      }
      v49 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v50 = v48 & (((v49 ^ (v49 >> 6)) + ~((v49 ^ (v49 >> 6)) << 11)) ^ (((v49 ^ (v49 >> 6))
                                                                        + ~((v49 ^ (v49 >> 6)) << 11)) >> 16));
      v51 = (unsigned int *)(v47 + 32 * v50);
      v52 = *v51;
      if (*v51 != -1)
      {
        v53 = 0;
        v54 = 1;
        do
        {
          if (v52 == a2)
          {
            v58 = (void *)*((_QWORD *)v51 + 1);
            *((_QWORD *)v51 + 1) = v64;

            *((_QWORD *)v51 + 2) = a4;
            *((_QWORD *)v51 + 3) = a5;
            goto LABEL_85;
          }
          if (v52 == -2)
            v53 = v51;
          v50 = ((_DWORD)v50 + v54) & v48;
          v51 = (unsigned int *)(v47 + 32 * v50);
          v52 = *v51;
          ++v54;
        }
        while (*v51 != -1);
        if (v53)
        {
          *v53 = -1;
          *((_QWORD *)v53 + 2) = 0;
          *((_QWORD *)v53 + 3) = 0;
          *((_QWORD *)v53 + 1) = 0;
          --*(_DWORD *)(*v46 - 16);
          v51 = v53;
        }
      }
      *v51 = a2;
      v55 = (void *)*((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = v64;

      *((_QWORD *)v51 + 2) = a4;
      *((_QWORD *)v51 + 3) = a5;
      v56 = *v46;
      if (*v46)
        v57 = *(_DWORD *)(v56 - 12) + 1;
      else
        v57 = 1;
      *(_DWORD *)(v56 - 12) = v57;
      v59 = *v46;
      if (*v46)
        v60 = *(_DWORD *)(v59 - 12);
      else
        v60 = 0;
      v61 = (*(_DWORD *)(v59 - 16) + v60);
      v62 = *(unsigned int *)(v59 - 4);
      if (v62 > 0x400)
      {
        if (v62 > 2 * v61)
          goto LABEL_85;
      }
      else
      {
        if (3 * v62 > 4 * v61)
          goto LABEL_85;
        if (!(_DWORD)v62)
        {
          v63 = 8;
LABEL_84:
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 400), v63);
LABEL_85:
          if (a5 || v45 != a4)
          {
            if (v45 <= a4)
              WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, CFSTR("setVertexBuffer: buffer length is invalid"));
            else
              WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, a3, v64, 1, 0, 0, 2u);
          }

          return;
        }
      }
      v63 = (_DWORD)v62 << (6 * *(_DWORD *)(v59 - 12) >= (2 * v62));
      goto LABEL_84;
    }
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 400);
    if (v26)
    {
      v27 = *(_DWORD *)(v26 - 8);
      v28 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
      v30 = v27 & (v29 ^ HIWORD(v29));
      v31 = *(_DWORD *)(v26 + 32 * v30);
      if (v31 != a2)
      {
        v32 = 1;
        while (v31 != -1)
        {
          v30 = ((_DWORD)v30 + v32) & v27;
          v31 = *(_DWORD *)(v26 + 32 * v30);
          ++v32;
          if (v31 == a2)
            goto LABEL_43;
        }
        v30 = *(unsigned int *)(v26 - 4);
      }
LABEL_43:
      if (v30 != *(_DWORD *)(v26 - 4))
      {
        v35 = (uint64_t *)(a1 + 400);
        v36 = v26 + 32 * v30;
        *(_DWORD *)v36 = -2;

        ++*(_DWORD *)(*v35 - 16);
        v37 = *v35;
        v38 = *v35 ? *(_DWORD *)(v37 - 12) - 1 : -1;
        *(_DWORD *)(v37 - 12) = v38;
        v39 = *v35;
        if (*v35)
        {
          v40 = 6 * *(_DWORD *)(v39 - 12);
          v41 = *(_DWORD *)(v39 - 4);
          v42 = v40 < v41 && v41 >= 9;
          if (v42)
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v35, v41 >> 1);
        }
      }
    }
  }
}

void sub_18246F96C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18246F980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18246F990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  void *v12;

  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18246F9CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetViewport(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v8;
  void *v9;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;

  v8 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v8 + 4) == 1)
  {
    v9 = *(void **)(a1 + 16);
    if (v9 && *(_QWORD *)(v8 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v8, v9))
      {
        if (a2 < 0.0
          || a3 < 0.0
          || a4 < 0.0
          || a5 < 0.0
          || (float)(a2 + a4) > (float)*(unsigned int *)(a1 + 208)
          || a6 > a7
          || a7 > 1.0
          || a6 < 0.0
          || (float)(a3 + a5) > (float)*(unsigned int *)(a1 + 212))
        {
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, 0);
        }
        else
        {
          *(float *)(a1 + 176) = a6;
          *(float *)(a1 + 180) = a7;
          *(float *)(a1 + 452) = a2;
          *(float *)(a1 + 456) = a3;
          *(float *)(a1 + 460) = a4;
          *(float *)(a1 + 464) = a5;
        }
        return;
      }
      v9 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = 0;

    return;
  }
  v16 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: failed as encoding has finished"), "void WebGPU::RenderPassEncoder::setViewport(float, float, float, float, float, float)");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x186DAB230](&v27, v17);
  v18 = *(_QWORD *)(v16 + 32);
  v19 = 32 * *(unsigned int *)(v16 + 44);
  v20 = v18 + v19;
  while (v19)
  {
    v21 = *(_DWORD *)(v20 - 8);
    v20 -= 32;
    v19 -= 32;
    if (!v21)
    {
      v22 = v18 + v19;
      if (!*(_BYTE *)(v22 + 16))
      {
        v23 = v27;
        v27 = 0;
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = v23;
        *(_BYTE *)(v22 + 16) = 1;
      }
      goto LABEL_23;
    }
  }
  v24 = *(_QWORD *)(v16 + 24);
  if (v24)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v24 + 16))(v24, 1, &v27);
    v25 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
LABEL_23:
  v26 = v27;
  v27 = 0;
  if (v26)
  {
    if (*v26 == 2)
      WTF::StringImpl::destroy();
    else
      *v26 -= 2;
  }

}

void sub_18246FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderPassEncoderSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 16), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_18246FCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebGPU::TextureView *WTF::RefCounted<WebGPU::TextureView>::deref(WebGPU::TextureView *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::TextureView::~TextureView(result, a2);
    return (WebGPU::TextureView *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_OWORD *WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::OptionSet<WebGPU::BindGroupEntryUsage>&>(_OWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_OWORD *)(v8 + 16 * v15);
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16 == -1)
  {
LABEL_12:
    *(_QWORD *)v16 = v11;
    *((_DWORD *)v16 + 2) = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v20 = *a2;
      if (*a2)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v20 = *a2;
      if (*a2)
      {
LABEL_14:
        v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v21 = *(unsigned int *)(v20 - 16);
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(_QWORD *)v7 = v16;
        *((_QWORD *)v7 + 1) = v20 + 16 * v22;
        *((_BYTE *)v7 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v22)
      {
        result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, v16);
        v16 = result;
        v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      v16 = result;
      v20 = *a2;
      if (!*a2)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21)
      goto LABEL_26;
    goto LABEL_24;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -2)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (_OWORD *)(v8 + 16 * v15);
    v17 = *(_QWORD *)v16;
    ++v19;
    if (*(_QWORD *)v16 == -1)
    {
      if (v18)
      {
        *(_QWORD *)v18 = -1;
        *((_DWORD *)v18 + 2) = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v8 + 16 * v23;
  *((_BYTE *)v7 + 16) = 0;
  *((_DWORD *)v16 + 2) = *a4;
  return result;
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_7;
  }
  v12 = a2;
  v13 = (_DWORD *)(v9 + 24);
  do
  {
    *((_QWORD *)v13 - 1) = -1;
    *v13 = 0;
    v13 += 4;
    --v12;
  }
  while (v12);
LABEL_7:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (_QWORD *)(v6 + 16 * v14);
      if (*v16 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = (*v16 + ~(*v16 << 32)) ^ ((*v16 + ~(*v16 << 32)) >> 22);
        v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((unint64_t)(v19 + ~(v19 << 13)) >> 8));
        v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
        v22 = v18 & ((v21 >> 31) ^ v21);
        v23 = 1;
        do
        {
          v24 = v22;
          v25 = *(_QWORD *)(v17 + 16 * v22);
          v22 = (v22 + v23++) & v18;
        }
        while (v25 != -1);
        v26 = (_OWORD *)(v17 + 16 * v24);
        *v26 = *(_OWORD *)v16;
        if (v16 == a3)
          v15 = v26;
      }
      ++v14;
    }
    while (v14 != v7);
  }
  else
  {
    v15 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v15;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400)
      goto LABEL_8;
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3)
LABEL_11:
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = WTF::fastMalloc((WTF *)(16 * v8 + 16));
  v10 = (_DWORD *)(v9 + 24);
  v11 = v8;
  do
  {
    *((_QWORD *)v10 - 1) = -1;
    *v10 = 0;
    v10 += 4;
    --v11;
  }
  while (v11);
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v12 = *a2;
  if (!*a2)
  {
    v15 = 0;
    v14 = 0;
    goto LABEL_26;
  }
  v13 = *((unsigned int *)v12 - 1);
  v14 = &v12[2 * v13];
  if (*((_DWORD *)v12 - 3))
  {
    v15 = *a2;
    if ((_DWORD)v13)
    {
      v16 = 16 * v13;
      v15 = *a2;
      while ((unint64_t)*v15 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v15 += 2;
        v16 -= 16;
        if (!v16)
        {
          v15 = v14;
          if (v12)
            goto LABEL_27;
          goto LABEL_28;
        }
      }
    }
LABEL_26:
    if (!v12)
      goto LABEL_28;
    goto LABEL_27;
  }
  v15 = &v12[2 * v13];
  v14 = v15;
  if (v12)
LABEL_27:
    v12 += 2 * *((unsigned int *)v12 - 1);
LABEL_28:
  while (v15 != v12)
  {
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 8);
    else
      v18 = 0;
    v19 = *v15 + ~(*v15 << 32);
    v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
    v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
    v22 = v18 & (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~((_DWORD)v21 << 27)));
    v23 = 1;
    do
    {
      v24 = v22;
      v25 = *(_QWORD *)(v17 + 16 * v22);
      v22 = (v22 + v23++) & v18;
    }
    while (v25 != -1);
    v26 = v17 + 16 * v24;
    v27 = *v15;
    *(_DWORD *)(v26 + 8) = *((_DWORD *)v15 + 2);
    *(_QWORD *)v26 = v27;
    v28 = v15 + 2;
    v15 = v14;
    if (v28 != v14)
    {
      v15 = v28;
      while ((unint64_t)*v15 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v15 += 2;
        if (v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
  }
  return a1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource}*,WTF::OptionSet<WebGPU::BindGroupEntryUsage>)::$_0,WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage)::$_1,WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(int ***a1, uint64_t *a2)
{
  uint64_t v3;
  int **v4;
  uint64_t *v5;
  int *v6;
  int v7;

  v3 = *a2;
  if (v3)
  {
    v4 = *a1;
    v6 = **a1;
    v5 = (uint64_t *)(*a1)[1];
    v7 = *v6;
    if ((v7 & 4) != 0)
    {
      *(_QWORD *)(v3 + 232) = 0;
      *(_QWORD *)(v3 + 240) = 0;
      *(_QWORD *)(v3 + 248) = 0;
      v3 = *a2;
      v7 = **v4;
    }
    WebGPU::RenderPassEncoder::addResourceToActiveResources(v5, v3, *(void **)(v3 + 16), v7, 0, 0, 2u);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource}*,WTF::OptionSet<WebGPU::BindGroupEntryUsage>)::$_0,WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage)::$_1,WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (v2)
    WebGPU::RenderPassEncoder::addResourceToActiveResources(*(uint64_t **)(*(_QWORD *)a1 + 16), v2, **(_DWORD **)(*(_QWORD *)a1 + 24));
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource}*,WTF::OptionSet<WebGPU::BindGroupEntryUsage>)::$_0,WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage)::$_1,WebGPU::RenderPassEncoder::addResourceToActiveResources(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&,objc_object  {objcproto11MTLResource},WebGPU::BindGroupEntryUsage)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t a1, uint64_t *a2)
{
  WebGPU::RenderPassEncoder::addResourceToActiveResources(*(uint64_t **)(*(_QWORD *)a1 + 32), *a2, **(void ***)(*(_QWORD *)a1 + 40), **(_DWORD **)(*(_QWORD *)a1 + 48), 0, 0, 2u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_0,WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_1,WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t a1, WebGPU::Buffer **a2)
{
  if (*a2)
    WebGPU::Buffer::setCommandEncoder(*a2, *(WebGPU::CommandEncoder **)(**(_QWORD **)a1 + 152));
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_0,WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_1,WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebGPU::CommandBuffer *v6;
  _BYTE v7[24];

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 152);
    WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v2 + 104, v3, (uint64_t)v7);
    v4 = *(_QWORD *)(v2 + 96);
    if (*(_BYTE *)(v4 + 96))
    {
      if (!*(_BYTE *)(v4 + 97))
      {
        *(_BYTE *)(v3 + 76) = 1;
        v5 = *(_QWORD *)(v3 + 56);
        if (v5)
        {
          v6 = *(WebGPU::CommandBuffer **)(v5 + 8);
          if (v6)
            WebGPU::CommandBuffer::makeInvalid(v6, *(NSString **)(v3 + 64));
        }
      }
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_0,WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_1,WebGPU::RenderPassEncoder::setCommandEncoder(std::variant<WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebGPU::Buffer,WTF::RawPtrTraits<WebGPU::Buffer>,WTF::DefaultRefDerefTraits<WebGPU::Buffer>>,WTF::RefPtr<WebGPU::TextureView const,WTF::RawPtrTraits<WebGPU::TextureView const>,WTF::DefaultRefDerefTraits<WebGPU::TextureView const>>,WTF::RefPtr<WebGPU::ExternalTexture const,WTF::RawPtrTraits<WebGPU::ExternalTexture const>,WTF::DefaultRefDerefTraits<WebGPU::ExternalTexture const>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebGPU::CommandBuffer *v5;
  _BYTE v6[24];

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 152);
    WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v2 + 48, v3, (uint64_t)v6);
    if (*(_BYTE *)(v2 + 40))
    {
      *(_BYTE *)(v3 + 76) = 1;
      v4 = *(_QWORD *)(v3 + 56);
      if (v4)
      {
        v5 = *(WebGPU::CommandBuffer **)(v4 + 8);
        if (v5)
          WebGPU::CommandBuffer::makeInvalid(v5, *(NSString **)(v3 + 64));
      }
    }
  }
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t i;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = a2;
    result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    v10 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = a2;
    result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    v10 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  v11 = (_QWORD *)(result + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 0;
    v11 += 4;
    --v7;
  }
  while (v7);
LABEL_7:
  *a1 = v10;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v13 = (int *)(v4 + 32 * i);
      v14 = *v13;
      if (*v13 != -2)
      {
        if (v14 == -1)
        {

        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
          v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
          do
          {
            v20 = v19 & v16;
            v19 = ++v17 + v20;
          }
          while (*(_DWORD *)(v15 + 32 * v20) != -1);
          v21 = v15 + 32 * v20;

          *(_DWORD *)v21 = *v13;
          v22 = v4 + 32 * i;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v21 + 8) = v23;
          *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);

        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v9);
}

__CFString *WebGPU::Device::addPipelineLayouts(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v4;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  char **v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  const WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  WTF::StringImpl *v65;
  unsigned int v66;
  int v67;
  int v68;
  __int128 v69;
  int i;
  uint64_t v71;
  WTF *v72;
  __int128 v73;
  uint64_t v74;
  void *v75;
  WTF **v76;
  int j;
  uint64_t v78;
  WTF **v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD **v101;
  _DWORD *v102;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  int v108;
  _QWORD v109[5];
  __int128 v110;
  __int128 v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  WTF::StringImpl *v124;
  uint64_t *v125;
  uint64_t *v126;
  __int128 *v127;
  __int128 *v128;
  __int128 *v129;
  __int128 *v130;
  _QWORD v131[3];

  if (!*((_BYTE *)a3 + 16) || (v4 = *((unsigned int *)a3 + 3), !(_DWORD)v4))
  {
LABEL_141:
    v32 = 0;
    return (__CFString *)v32;
  }
  v6 = *a3;
  v7 = 6 * v4;
  v8 = (uint64_t)&(*a3)[v7];
  v9 = v7 * 4 - 24;
  if (v9 < 0x18)
  {
    v10 = 0;
    v11 = *a3;
    v12 = *a3;
    do
    {
LABEL_14:
      v17 = *v12;
      v12 += 6;
      v16 = v17;
      if (v10 <= v17)
        v10 = v16;
    }
    while (v12 != (unsigned int *)v8);
    goto LABEL_17;
  }
  v10 = 0;
  v13 = 0;
  v14 = v9 / 0x18 + 1;
  v12 = &v6[6 * (v14 & 0x1FFFFFFFFFFFFFFELL)];
  v15 = v14 & 0x1FFFFFFFFFFFFFFELL;
  v11 = *a3;
  do
  {
    if (v10 <= *v6)
      v10 = *v6;
    if (v13 <= v6[6])
      v13 = v6[6];
    v6 += 12;
    v15 -= 2;
  }
  while (v15);
  if (v10 <= v13)
    v10 = v13;
  if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_14;
LABEL_17:
  v18 = v10 + 1;
  v19 = *(unsigned int *)(a1 + 88);
  if (v10 < v19)
  {
    v20 = *(unsigned int *)(a2 + 12);
    v105 = a2;
    if (v20 > v10)
    {
LABEL_44:
      v104 = v8;
      while (1)
      {
        v35 = *v11;
        if (*(_DWORD *)(a2 + 12) <= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x182470FD0);
        }
        v36 = *(WTF **)a2;
        v121 = 0;
        v37 = v11[5];
        if (!v37)
          goto LABEL_46;
        v38 = (char **)((char *)v36 + 16 * v35);
        v39 = *((_QWORD *)v11 + 1);
        v106 = v11;
        v107 = v39 + 120 * v37;
        while (2)
        {
          v47 = *(unsigned __int8 *)(v39 + 8);
          v108 = v47 & 7;
          v48 = (v47 >> 1) & 3;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v116 = 0u;
          v114 = 0u;
          v115 = 0u;
          v113 = 0u;
          v49 = *((unsigned int *)v38 + 3);
          if ((_DWORD)v49)
          {
            v50 = 0;
            v51 = *v38;
            while (*((_DWORD *)v51 + 2) != *(_DWORD *)(v39 + 4))
            {
              ++v50;
              v51 += 128;
              if (v49 == v50)
                goto LABEL_57;
            }
            if (v50 < v49)
            {
              *((_DWORD *)v51 + 6) |= v108;
              *(_DWORD *)&v51[4 * v48 + 12] = *(_DWORD *)v39;
              if (v50 >= *((unsigned int *)v38 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x182470FC8);
              }
              v112 = 0;
              v110 = 0u;
              v111 = 0u;
              if (*((_DWORD *)v51 + 10))
              {
                v61 = *((_OWORD *)v51 + 3);
                v110 = *((_OWORD *)v51 + 2);
                v111 = v61;
                goto LABEL_99;
              }
              if (*((_DWORD *)v51 + 18))
              {
                v110 = *((_OWORD *)v51 + 4);
                v68 = 1;
LABEL_98:
                v112 = v68;
                goto LABEL_99;
              }
              if (*((_DWORD *)v51 + 22) && *((_DWORD *)v51 + 23))
              {
                v69 = *((_OWORD *)v51 + 5);
                *(_QWORD *)&v111 = *((_QWORD *)v51 + 12);
                v110 = v69;
                v68 = 2;
                goto LABEL_98;
              }
              if (*((_DWORD *)v51 + 28) && *((_DWORD *)v51 + 29) && *((_DWORD *)v51 + 30))
              {
                v73 = *(_OWORD *)(v51 + 104);
                *(_QWORD *)&v111 = *((_QWORD *)v51 + 15);
                v110 = v73;
                v68 = 3;
                goto LABEL_98;
              }
LABEL_99:
              v123 = 0;
              v122 = 0;
              v124 = (WTF::StringImpl *)&v113;
              v125 = (uint64_t *)&v123;
              v126 = &v122;
              v127 = &v113;
              v128 = &v113;
              v129 = &v113;
              v130 = &v113;
              v74 = *(unsigned int *)(v39 + 32);
              if ((_DWORD)v74 != -1)
              {
                v131[0] = &v124;
                ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))off_1E0FD20E0[v74])(v109, v131, v39 + 16);
                v124 = (WTF::StringImpl *)v109;
                v125 = v109;
                v126 = v109;
                v127 = (__int128 *)v109;
                v128 = (__int128 *)v109;
                if (v112 != -1)
                {
                  v131[0] = &v124;
                  if ((((uint64_t (*)(_QWORD *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPU15BindGroupLayout19equalBindingEntriesERKNS_7variantIJ23WGPUBufferBindingLayout24WGPUSamplerBindingLayout24WGPUTextureBindingLayout31WGPUStorageTextureBindingLayout32WGPUExternalTextureBindingLayoutEEESI_E3__0JZNS9_19equalBindingEntriesESI_SI_E3__1ZNS9_19equalBindingEntriesESI_SI_E3__2ZNS9_19equalBindingEntriesESI_SI_E3__3ZNS9_19equalBindingEntriesESI_SI_E3__4EEEEEJRKNS0_6__implIJSB_SC_SD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v112])(v131, &v110) & 1) != 0)goto LABEL_52;
                  v98 = 0;
                  v99 = v121;
                  if (!v121)
                    goto LABEL_139;
LABEL_130:
                  v100 = *(unsigned int *)(v99 - 4);
                  a2 = v105;
                  if ((_DWORD)v100)
                  {
                    v101 = (_DWORD **)v99;
                    do
                    {
                      v102 = *v101;
                      if (*v101 != (_DWORD *)-1)
                      {
                        *v101 = 0;
                        if (v102)
                        {
                          if (*v102 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *v102 -= 2;
                        }
                      }
                      v101 += 2;
                      --v100;
                    }
                    while (v100);
                  }
                  WTF::fastFree((WTF *)(v99 - 16), v75);
                  v11 = v106;
                  v8 = v104;
                  if ((v98 & 1) == 0)
                    return CFSTR("Binding mismatch in auto-generated layouts");
                  goto LABEL_46;
                }
              }
LABEL_143:
              std::__throw_bad_variant_access[abi:sn180100]();
              __break(1u);
            }
            __break(0xC471u);
LABEL_148:
            JUMPOUT(0x182470FC0);
          }
LABEL_57:
          v52 = *(_QWORD *)(v39 + 40);
          if (!v52)
            goto LABEL_125;
          v53 = *(_DWORD *)(v52 + 4);
          if (!v53)
          {
            v62 = 0;
            goto LABEL_126;
          }
          if (WTF::StringImpl::endsWith())
          {
            v55 = *(WTF::StringImpl **)(v39 + 40);
            if (v55)
            {
              WTF::StringImpl::substring(v55);
              v56 = v124;
              v57 = v121;
              if (v121)
              {
LABEL_62:
                v58 = *(_DWORD *)(v57 - 8);
                v59 = *((_DWORD *)v56 + 4);
                if (v59 < 0x100)
                  v60 = WTF::StringImpl::hashSlowCase(v56);
                else
                  v60 = v59 >> 8;
                for (i = 0; ; v60 = i + v71)
                {
                  v71 = v60 & v58;
                  v72 = *(WTF **)(v57 + 16 * v71);
                  if (v72 != (WTF *)-1)
                  {
                    if (!v72)
                      goto LABEL_88;
                    if ((WTF::equal(v72, v56, v54) & 1) != 0)
                      break;
                  }
                  ++i;
                }
                if (v71 != *(_DWORD *)(v57 - 4))
                {
                  v62 = *(_QWORD *)(v57 + 16 * v71 + 8);
                  goto LABEL_89;
                }
LABEL_88:
                v62 = 0;
                goto LABEL_89;
              }
            }
            else
            {
              v56 = 0;
              v57 = v121;
              if (v121)
                goto LABEL_62;
            }
            v62 = 0;
LABEL_89:
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v56 -= 2;
            }
            v53 = 2147483644;
            goto LABEL_126;
          }
          v63 = v121;
          if (v121
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v121, 8u), (v63 = v121) != 0))
          {
            v64 = *(_DWORD *)(v63 - 8);
            v65 = *(WTF::StringImpl **)(v39 + 40);
            v66 = *((_DWORD *)v65 + 4);
            if (v66 < 0x100)
              goto LABEL_104;
          }
          else
          {
            v64 = 0;
            v65 = *(WTF::StringImpl **)(v39 + 40);
            v66 = *((_DWORD *)v65 + 4);
            if (v66 < 0x100)
            {
LABEL_104:
              v67 = WTF::StringImpl::hashSlowCase(v65);
              goto LABEL_105;
            }
          }
          v67 = v66 >> 8;
LABEL_105:
          v76 = 0;
          for (j = 1; ; ++j)
          {
            v78 = v67 & v64;
            v79 = (WTF **)(v63 + 16 * v78);
            v80 = *v79;
            if (*v79 == (WTF *)-1)
            {
              v76 = (WTF **)(v63 + 16 * v78);
              goto LABEL_107;
            }
            if (!v80)
              break;
            if (WTF::equal(v80, *(const WTF::StringImpl **)(v39 + 40), v54))
            {
              v62 = 0;
              v53 = 0;
              *(_QWORD *)(v63 + 16 * v78 + 8) = *(unsigned int *)(v39 + 4);
              goto LABEL_126;
            }
LABEL_107:
            v67 = j + v78;
          }
          if (v76)
          {
            *v76 = 0;
            v76[1] = 0;
            --*(_DWORD *)(v63 - 16);
            v79 = v76;
          }
          v81 = *(WTF **)(v39 + 40);
          if (v81)
            *(_DWORD *)v81 += 2;
          *v79 = v81;
          v79[1] = (WTF *)*(unsigned int *)(v39 + 4);
          v82 = v121;
          if (v121)
          {
            v83 = *(_DWORD *)(v121 - 16);
            v84 = *(_DWORD *)(v121 - 12) + 1;
            *(_DWORD *)(v121 - 12) = v84;
            v85 = (v83 + v84);
            v86 = *(unsigned int *)(v82 - 4);
            if (v86 <= 0x400)
              goto LABEL_118;
LABEL_122:
            if (v86 <= 2 * v85)
            {
LABEL_123:
              v87 = (_DWORD)v86 << (6 * v84 >= (2 * v86));
              goto LABEL_124;
            }
          }
          else
          {
            v84 = 1;
            MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
            v85 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
            v86 = MEMORY[0xFFFFFFFFFFFFFFFC];
            if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u)
              goto LABEL_122;
LABEL_118:
            if (3 * v86 <= 4 * v85)
            {
              if ((_DWORD)v86)
                goto LABEL_123;
              v87 = 8;
LABEL_124:
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v121, v87);
            }
          }
LABEL_125:
          v62 = 0;
          v53 = 0;
LABEL_126:
          DWORD2(v113) = *(_DWORD *)(v39 + 4);
          *(_DWORD *)(((unint64_t)&v113 | (4 * v48)) + 0xC) = *(_DWORD *)v39;
          DWORD2(v114) = v108;
          LODWORD(v122) = v53;
          v130 = &v113;
          v131[0] = v62;
          v124 = (WTF::StringImpl *)&v113;
          v125 = &v122;
          v126 = v131;
          v127 = &v113;
          v128 = &v113;
          v129 = &v113;
          v88 = *(unsigned int *)(v39 + 32);
          if ((_DWORD)v88 == -1)
            goto LABEL_143;
          v109[0] = &v124;
          ((void (*)(__int128 *__return_ptr, _QWORD *, uint64_t))off_1E0FD20E0[v88])(&v110, v109, v39 + 16);
          v89 = *((unsigned int *)v38 + 3);
          if ((_DWORD)v89 == *((_DWORD *)v38 + 2))
          {
            v90 = WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v89 + 1, (unint64_t)&v113);
            v91 = &(*v38)[128 * (unint64_t)*((unsigned int *)v38 + 3)];
            v92 = *((_OWORD *)v90 + 7);
            v94 = *((_OWORD *)v90 + 4);
            v93 = *((_OWORD *)v90 + 5);
            *((_OWORD *)v91 + 6) = *((_OWORD *)v90 + 6);
            *((_OWORD *)v91 + 7) = v92;
            *((_OWORD *)v91 + 4) = v94;
            *((_OWORD *)v91 + 5) = v93;
            v95 = *(_OWORD *)v90;
            v96 = *((_OWORD *)v90 + 1);
            v97 = *((_OWORD *)v90 + 3);
            *((_OWORD *)v91 + 2) = *((_OWORD *)v90 + 2);
            *((_OWORD *)v91 + 3) = v97;
            *(_OWORD *)v91 = v95;
            *((_OWORD *)v91 + 1) = v96;
          }
          else
          {
            v40 = &(*v38)[128 * v89];
            v41 = v113;
            v42 = v114;
            v43 = v116;
            *((_OWORD *)v40 + 2) = v115;
            *((_OWORD *)v40 + 3) = v43;
            *(_OWORD *)v40 = v41;
            *((_OWORD *)v40 + 1) = v42;
            v44 = v117;
            v45 = v118;
            v46 = v120;
            *((_OWORD *)v40 + 6) = v119;
            *((_OWORD *)v40 + 7) = v46;
            *((_OWORD *)v40 + 4) = v44;
            *((_OWORD *)v40 + 5) = v45;
          }
          ++*((_DWORD *)v38 + 3);
LABEL_52:
          v39 += 120;
          if (v39 != v107)
            continue;
          break;
        }
        v98 = 1;
        v99 = v121;
        if (v121)
          goto LABEL_130;
LABEL_139:
        a2 = v105;
        v11 = v106;
        v8 = v104;
        if ((v98 & 1) == 0)
          return CFSTR("Binding mismatch in auto-generated layouts");
LABEL_46:
        v11 += 6;
        if (v11 == (unsigned int *)v8)
          goto LABEL_141;
      }
    }
    v21 = *(unsigned int *)(a2 + 8);
    v22 = *(WTF **)a2;
    if (v10 < v21)
      goto LABEL_39;
    v23 = v21 + (v21 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v18)
      v25 = v10 + 1;
    else
      v25 = v24;
    if (v25 >> 28)
    {
      __break(0xC471u);
      goto LABEL_148;
    }
    v27 = WTF::fastMalloc((WTF *)(16 * v25));
    *(_DWORD *)(v105 + 8) = v25;
    *(_QWORD *)v105 = v27;
    if ((_DWORD)v20)
    {
      v28 = 16 * v20;
      v29 = (_DWORD *)((char *)v22 + 8);
      do
      {
        *(_QWORD *)v27 = 0;
        *(_QWORD *)(v27 + 8) = 0;
        v30 = *((_QWORD *)v29 - 1);
        *((_QWORD *)v29 - 1) = 0;
        *(_QWORD *)v27 = v30;
        LODWORD(v30) = *v29;
        *v29 = 0;
        *(_DWORD *)(v27 + 8) = v30;
        LODWORD(v30) = v29[1];
        v29[1] = 0;
        *(_DWORD *)(v27 + 12) = v30;
        v31 = (WTF *)*((_QWORD *)v29 - 1);
        if (v31)
        {
          *((_QWORD *)v29 - 1) = 0;
          *v29 = 0;
          WTF::fastFree(v31, v26);
        }
        v29 += 4;
        v27 += 16;
        v28 -= 16;
      }
      while (v28);
      a2 = v105;
      v27 = *(_QWORD *)v105;
      if (v22)
        goto LABEL_34;
    }
    else
    {
      a2 = v105;
      if (v22)
      {
LABEL_34:
        if ((WTF *)v27 == v22)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree(v22, v26);
        v22 = *(WTF **)a2;
LABEL_39:
        if (v22)
        {
          v33 = *(unsigned int *)(a2 + 12);
          if (v18 != v33)
            bzero((char *)v22 + 16 * v33, (16 * v18 - 16 * v33) & 0xFFFFFFFFFFFFFFF0);
        }
        *(_DWORD *)(a2 + 12) = v18;
        v34 = *((_DWORD *)a3 + 3);
        if (v34)
        {
          v11 = *a3;
          v8 = (uint64_t)&(*a3)[6 * v34];
          goto LABEL_44;
        }
        goto LABEL_141;
      }
    }
    v22 = (WTF *)v27;
    goto LABEL_39;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("too many bind groups, limit %u, attempted %zu"), v19, v18);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  return (__CFString *)v32;
}

void sub_182470FDC(_Unwind_Exception *a1, void *a2)
{
  _DWORD *v2;
  uint64_t v3;
  void *v5;

  if (*v2 == 2)
  {
    WTF::StringImpl::destroy();
    WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::~HashMap((_QWORD *)(v3 - 184), v5);
    _Unwind_Resume(a1);
  }
  *v2 -= 2;
  WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::~HashMap((_QWORD *)(v3 - 184), a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::~HashMap(_QWORD *a1, void *a2)
{
  _DWORD **v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;

  v3 = (_DWORD **)*a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = (_DWORD **)*a1;
      do
      {
        v6 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WTF::StringImpl::destroy();
            else
              *v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

WTF *WebGPU::Device::generatePipelineLayout@<X0>(unsigned __int8 **a1@<X0>, void ***a2@<X1>, WebGPU::PipelineLayout *a3@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  void **v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  void *v15;
  void *v16;
  WebGPU::BindGroupLayout *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  WTF *v21;
  uint64_t v22;
  WebGPU::PipelineLayout *v23;
  WebGPU::BindGroupLayout *v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  WTF *v33;
  uint64_t v34;
  WebGPU::BindGroupLayout *v35;
  WTF *v36;
  void *v37;
  WTF *result;
  WebGPU::PipelineLayout *v39;
  WebGPU::BindGroupLayout *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  WTF *v45;
  uint64_t v46;

  v45 = 0;
  v46 = 0;
  v5 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v5)
    goto LABEL_38;
  if (v5 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1824713E0);
  }
  LODWORD(v46) = *((_DWORD *)a2 + 3);
  v45 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
  v7 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v7)
  {
LABEL_38:
    v8 = 0;
LABEL_39:
    v41 = 0;
    v42 = "generated pipeline layout";
    v43 = 0;
    goto LABEL_40;
  }
  if (v7 >> 29)
  {
    __break(0xC471u);
LABEL_60:
    JUMPOUT(0x1824713D0);
  }
  v8 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
  v9 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v9)
    goto LABEL_39;
  v39 = a3;
  v10 = 0;
  v11 = *a2;
  v12 = 16 * v9;
  do
  {
    v41 = 0;
    v42 = "getBindGroup() generated layout";
    v43 = *((unsigned int *)v11 + 3);
    if ((_DWORD)v43)
      v16 = *v11;
    else
      v16 = 0;
    v44 = v16;
    WebGPU::Device::createBindGroupLayout((uint64_t)a1, (uint64_t)&v41, 1, (WebGPU::BindGroupLayout *)&v40);
    v17 = v40;
    v18 = *((unsigned __int8 *)v40 + 72);
    if (*((_BYTE *)v40 + 72))
    {
      LODWORD(v19) = HIDWORD(v46);
      if (HIDWORD(v46) == (_DWORD)v46)
      {
        v20 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, HIDWORD(v46) + 1, (unint64_t)&v40);
        v19 = HIDWORD(v46);
        v21 = v45;
        v22 = *v20;
        *v20 = 0;
        *((_QWORD *)v21 + v19) = v22;
      }
      else
      {
        v40 = 0;
        *((_QWORD *)v45 + HIDWORD(v46)) = v17;
      }
      v25 = __CFADD__((_DWORD)v19, 1);
      v26 = v19 + 1;
      HIDWORD(v46) = v26;
      if (v25)
      {
        __break(0xC471u);
        goto LABEL_60;
      }
      v27 = *((_QWORD *)v45 + v26 - 1);
      v28 = v10;
      if (v10 == (_DWORD)v7)
      {
        v29 = v10 + ((unint64_t)v10 >> 2);
        if (v29 >= 0x10)
          v30 = v29 + 1;
        else
          v30 = 16;
        if (v30 <= (unint64_t)v10 + 1)
          v7 = v10 + 1;
        else
          v7 = v30;
        if (v7 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824713D8);
        }
        v31 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
        memcpy(v31, v8, 8 * v10);
        if (v8)
        {
          if (v31 == v8)
          {
            LODWORD(v7) = 0;
            v31 = 0;
          }
          WTF::fastFree((WTF *)v8, v15);
        }
        ++v10;
        *((_QWORD *)v31 + v28) = v27;
        v8 = v31;
        v24 = v40;
        v40 = 0;
        if (!v24)
          goto LABEL_8;
      }
      else
      {
        ++v10;
        *((_QWORD *)v8 + v28) = v27;
        v24 = v40;
        v40 = 0;
        if (!v24)
          goto LABEL_8;
      }
    }
    else
    {
      v23 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
      WebGPU::PipelineLayout::PipelineLayout(v23, a1);
      v24 = v40;
      *(_QWORD *)v39 = v23;
      v40 = 0;
      if (!v24)
        goto LABEL_8;
    }
    if (*(_DWORD *)v24 == 1)
    {
      WebGPU::BindGroupLayout::~BindGroupLayout(v24, v15);
      WTF::fastFree(v13, v14);
LABEL_8:
      if (!v18)
        goto LABEL_42;
      goto LABEL_9;
    }
    --*(_DWORD *)v24;
    if (!v18)
      goto LABEL_42;
LABEL_9:
    v11 += 2;
    v12 -= 16;
  }
  while (v12);
  v41 = 0;
  v42 = "generated pipeline layout";
  v43 = v10;
  v32 = v8;
  a3 = v39;
  if (!v10)
LABEL_40:
    v32 = 0;
  v44 = v32;
  WebGPU::Device::createPipelineLayout((uint64_t)a1, &v41, (NSString *)1, a3);
LABEL_42:
  if (HIDWORD(v46))
  {
    v33 = v45;
    v34 = 8 * HIDWORD(v46);
    do
    {
      v35 = *(WebGPU::BindGroupLayout **)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1)
        {
          WebGPU::BindGroupLayout::~BindGroupLayout(v35, v15);
          WTF::fastFree(v36, v37);
        }
        else
        {
          --*(_DWORD *)v35;
        }
      }
      v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  result = v45;
  if (v45)
  {
    v45 = 0;
    LODWORD(v46) = 0;
    result = (WTF *)WTF::fastFree(result, v15);
  }
  if (v8)
    return (WTF *)WTF::fastFree((WTF *)v8, v15);
  return result;
}

void sub_1824713EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  WTF *v8;
  void *v10;
  va_list va;

  va_start(va, a8);
  WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  if (v8)
    WTF::fastFree(v8, v10);
  _Unwind_Resume(a1);
}

WebGPU::BindGroupLayout **WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>::~Ref(WebGPU::BindGroupLayout **a1, void *a2)
{
  WebGPU::BindGroupLayout *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::BindGroupLayout::~BindGroupLayout(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

void WebGPU::Device::createRenderPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v8;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  __CFString *v16;
  __CFString *v17;
  WebGPU::RenderPipeline **v18;
  const char *v19;
  const WTF::StringImpl *v20;
  void *v21;
  int *v22;
  uint64_t v23;
  int *v24;
  WTF *v25;
  uint64_t v26;
  void **v27;
  WTF *v28;
  _DWORD *v29;
  WebGPU *v30;
  WTF::StringImpl *v31;
  NSString *v32;
  int v33;
  void *v34;
  void *v35;
  int v36;
  uint64_t v37;
  unsigned __int8 **v38;
  uint64_t v39;
  int v40;
  int v41;
  const WTF::StringImpl *v42;
  uint64_t v43;
  __CFString *v44;
  void *v45;
  WTF::StringImpl *v46;
  WebGPU::RenderPipeline *v47;
  uint64_t v48;
  NSString *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  void *v54;
  int v55;
  void *v56;
  void *v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  const char *v62;
  const WTF::StringImpl *v63;
  WebGPU *v64;
  WTF::StringImpl *v65;
  const WTF::StringImpl *v66;
  void *v67;
  void *v68;
  int v69;
  uint64_t v70;
  WebGPU::RenderPipeline *v71;
  int v72;
  int v73;
  const WTF::StringImpl *v74;
  const WTF::StringImpl *v75;
  char v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  uint64_t v80;
  __CFString *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  void *v101;
  WTF::StringImpl *v102;
  char v103;
  int v104;
  WebGPU::RenderPipeline *v105;
  uint64_t v106;
  int v107;
  NSString *v108;
  unint64_t v109;
  WebGPU::RenderPipeline *v110;
  void *v111;
  WebGPU::RenderPipeline *v112;
  NSString *v113;
  __int128 v114;
  void *v115;
  __CFString *v116;
  NSString *v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  int v130;
  int v131;
  _BOOL8 v132;
  uint64_t v133;
  void *v134;
  id v135;
  void *v136;
  WTF::StringImpl *v137;
  void *v138;
  void *v139;
  void *v140;
  WTF::StringImpl **v141;
  NSString *v142;
  WebGPU::RenderPipeline *v143;
  void *v144;
  void *v145;
  NSString *v146;
  WebGPU::RenderPipeline *v147;
  WTF::StringImpl *v148;
  int v149;
  unint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  id v156;
  WebGPU::RenderPipeline **v157;
  int v158;
  uint64_t v159;
  int **v160;
  uint64_t *v161;
  _BOOL4 v162;
  uint64_t v163;
  WebGPU::ShaderModule *v164;
  _BOOL8 v165;
  _BOOL4 v166;
  uint64_t v167;
  char v168;
  NSString *v169;
  _BOOL8 v170;
  const WTF::StringImpl *v171;
  void *v172;
  WebGPU::RenderPipeline *v173;
  WebGPU::RenderPipeline *v174;
  id v175;
  __CFString *v176;
  _OWORD v177[3];
  uint64_t v178;
  id v179;
  WebGPU::RenderPipeline *v180;
  uint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  WTF::StringImpl *v186;
  id v187;
  unsigned __int8 **v188;
  uint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  unsigned __int8 **v194;
  char v195;
  int *v196;
  void **v197;
  uint64_t v198;
  _DWORD *v199;
  WTF::StringImpl *v200[2];

  v8 = *(_QWORD *)(a2 + 136);
  if ((!v8 || *(_QWORD *)(v8 + 40) <= (unint64_t)*(unsigned int *)(a1 + 184)) && *(_QWORD *)(a1 + 8))
  {
    v9 = (void *)objc_opt_new();
    if (*(_QWORD *)(a2 + 8))
      strlen(*(const char **)(a2 + 8));
    WTF::String::fromUTF8();
    objc_msgSend(v9, "setSupportIndirectCommandBuffers:", 1);
    v197 = 0;
    v198 = 0;
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      if (!*(_BYTE *)(v11 + 96))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v194;
        if (v194)
        {
LABEL_22:
          v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          goto LABEL_34;
        }
        v17 = &stru_1E0FD9588;
LABEL_34:
        WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v17->isa);

        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v12 -= 2;
        }
LABEL_65:
        v29 = v199;
        v199 = 0;
        if (v29)
        {
          if (*v29 == 2)
            WTF::StringImpl::destroy();
          else
            *v29 -= 2;
        }

        return;
      }
      if (*(_QWORD *)(v11 + 88) != a1)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v194;
        if (v194)
          goto LABEL_22;
        v17 = &stru_1E0FD9588;
        goto LABEL_34;
      }
      if (*(_BYTE *)(v11 + 97))
        v13 = 0;
      else
        v13 = *(_QWORD *)(a2 + 16);
      v196 = 0;
      LOBYTE(v194) = 0;
      v195 = 0;
      v14 = a2 + 24;
      if (!*(_QWORD *)(a2 + 24))
        goto LABEL_27;
    }
    else
    {
      v13 = 0;
      v196 = 0;
      LOBYTE(v194) = 0;
      v195 = 0;
      v14 = a2 + 24;
      if (!*(_QWORD *)(a2 + 24))
      {
LABEL_27:
        v18 = *(WebGPU::RenderPipeline ***)(a2 + 32);
        if (!*((_DWORD *)v18 + 10)
          && std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::ShaderModule::ast(void)::$_0,WebGPU::ShaderModule::ast(void)::$_1,WebGPU::ShaderModule::ast(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::SuccessfulCheck,std::__variant_detail::_Trait::FailedCheck,std::monostate> const&>((uint64_t)&v188, (uint64_t)(v18 + 1)))
        {
          if (v18[9] != (WebGPU::RenderPipeline *)a1)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v15 = v188;
            WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v188);
            if (!v15)
              goto LABEL_48;
LABEL_45:
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v15 -= 2;
            goto LABEL_48;
          }
          v30 = *(WebGPU **)(a2 + 40);
          if (v30)
          {
            WebGPU::fromAPI((uint64_t *)v200, v30, v19);
          }
          else
          {
            v31 = v18[15];
            if (v31)
              *(_DWORD *)v31 += 2;
            v200[0] = v31;
          }
          v171 = WebGPU::ShaderModule::stageInTypesForEntryPoint((WebGPU::ShaderModule *)v18, v200, v20);
          WebGPU::errorValidatingVertexStageIn(v171, (void *)*(unsigned int *)(a1 + 168));
          v32 = (NSString *)objc_claimAutoreleasedReturnValue();
          v173 = (WebGPU::RenderPipeline *)v13;
          if (v32)
          {
            WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v32);
            v18 = 0;
            v33 = 1;
            goto LABEL_102;
          }
          v34 = *(void **)(a1 + 8);
          WTF::String::operator NSString *(&v199);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = *(_DWORD *)(a2 + 48);
          v37 = *(_QWORD *)(a2 + 56);
          v187 = 0;
          WebGPU::createLibrary(v34, (uint64_t)v18, v13, v200, v35, v36, v37, (uint64_t *)&v196, &v188, &v187);
          v32 = (NSString *)v187;

          if (!v193)
          {
            -[NSString localizedDescription](v32, "localizedDescription");
            v43 = objc_claimAutoreleasedReturnValue();
            v39 = v43;
            if (v43)
              v44 = (__CFString *)v43;
            else
              v44 = CFSTR("Vertex library failed creation");
            WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v44->isa);
            goto LABEL_99;
          }
          if (!v13)
          {
            WebGPU::Device::addPipelineLayouts(a1, (uint64_t)&v197, &v190);
            v39 = objc_claimAutoreleasedReturnValue();
            if (v39)
            {
              WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (NSString *)v39);
              goto LABEL_99;
            }
            if (!v193)
              goto LABEL_133;
          }
          v38 = v188;
          WTF::String::operator NSString *(&v199);
          v13 = objc_claimAutoreleasedReturnValue();
          WebGPU::createFunction(v38, (uint64_t)&v189, (void *)v13);
          v39 = objc_claimAutoreleasedReturnValue();

          if (v39 && objc_msgSend((id)v39, "functionType") == 1)
          {
            v40 = v191;
            if (v191)
              v40 = *(_DWORD *)(v191 - 12);
            if (!v193)
              goto LABEL_133;
            v41 = v192;
            if (v192)
              v41 = *(_DWORD *)(v192 - 12);
            if (v40 == v41)
            {
              objc_msgSend(v9, "setVertexFunction:", v39);
              v18 = (WebGPU::RenderPipeline **)WebGPU::ShaderModule::vertexReturnTypeForEntryPoint((WebGPU::ShaderModule *)v18, v200, v42);
              v33 = 0;
LABEL_101:

              std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v188, v45);
LABEL_102:

              v46 = v200[0];
              v200[0] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v46 -= 2;
              }
              if (v33)
                goto LABEL_48;
              LOBYTE(v188) = 0;
              v193 = 0;
              v39 = *(_QWORD *)(a2 + 136);
              if (v39)
              {
                if (*(_QWORD *)v39)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v47 = v180;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v180);
                }
                else
                {
                  v13 = *(_QWORD *)(v39 + 8);
                  if (!*(_DWORD *)(v13 + 40))
                  {
                    while (WebGPU::ShaderModule::ast((WebGPU::ShaderModule *)v13) && *(_QWORD *)(v13 + 72) == a1)
                    {
                      v157 = v18;
                      v164 = (WebGPU::ShaderModule *)v13;
                      if (!WebGPU::ShaderModule::ast((WebGPU::ShaderModule *)v13))
                        goto LABEL_334;
                      v64 = *(WebGPU **)(v39 + 16);
                      if (v64)
                      {
                        WebGPU::fromAPI((uint64_t *)&v186, v64, v62);
                      }
                      else
                      {
                        v65 = *(WTF::StringImpl **)(v13 + 128);
                        if (v65)
                          *(_DWORD *)v65 += 2;
                        v186 = v65;
                      }
                      v166 = WebGPU::ShaderModule::usesFragDepth((WebGPU::ShaderModule *)v13, &v186, v63);
                      v162 = WebGPU::ShaderModule::usesSampleMaskInOutput((WebGPU::ShaderModule *)v13, &v186, v66);
                      v67 = *(void **)(a1 + 8);
                      WTF::String::operator NSString *(&v199);
                      v68 = (void *)objc_claimAutoreleasedReturnValue();
                      v69 = *(_DWORD *)(v39 + 24);
                      v70 = *(_QWORD *)(v39 + 32);
                      v179 = 0;
                      WebGPU::createLibrary(v67, v13, (uint64_t)v173, &v186, v68, v69, v70, (uint64_t *)&v196, &v180, &v179);
                      v156 = v179;

                      if (!v185)
                      {
                        objc_msgSend(v156, "localizedDescription");
                        v80 = objc_claimAutoreleasedReturnValue();
                        v169 = (NSString *)v80;
                        if (v80)
                          v81 = (__CFString *)v80;
                        else
                          v81 = CFSTR("Fragment library could not be created");
                        WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v81->isa);
                        goto LABEL_205;
                      }
                      v18 = &v180;
                      if (v173)
                        goto LABEL_144;
                      WebGPU::Device::addPipelineLayouts(a1, (uint64_t)&v197, &v182);
                      v169 = (NSString *)objc_claimAutoreleasedReturnValue();
                      if (v169)
                      {
                        WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v169);
                        goto LABEL_205;
                      }
                      if (v185)
                      {
LABEL_144:
                        v71 = v180;
                        WTF::String::operator NSString *(&v199);
                        v13 = objc_claimAutoreleasedReturnValue();
                        WebGPU::createFunction(v71, (uint64_t)&v181, (void *)v13);
                        v169 = (NSString *)objc_claimAutoreleasedReturnValue();

                        if (!v169 || -[NSString functionType](v169, "functionType") != 2)
                          goto LABEL_154;
                        v72 = v183;
                        if (v183)
                          v72 = *(_DWORD *)(v183 - 12);
                        if (v185)
                        {
                          v73 = v184;
                          if (v184)
                            v73 = *(_DWORD *)(v184 - 12);
                          if (v72 == v73)
                          {
                            objc_msgSend(v9, "setFragmentFunction:", v169);
                            v160 = (int **)WebGPU::ShaderModule::fragmentInputsForEntryPoint(v164, &v186, v74);
                            v161 = (uint64_t *)WebGPU::ShaderModule::fragmentReturnTypeForEntryPoint(v164, &v186, v75);
                            v159 = *(_QWORD *)(v39 + 40);
                            if ((_DWORD)v159)
                            {
                              v153 = 0;
                              v76 = 0;
                              v151 = 0;
                              v77 = 16;
                              do
                              {
                                v152 = *(_QWORD *)(v39 + 48);
                                v154 = v152 + v77;
                                if (*(_DWORD *)(v152 + v77 - 8))
                                {
                                  if (!v161
                                    || ((v82 = *v161,
                                         v83 = WTF::HashMap<unsigned int,MTLDataType,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<MTLDataType>,WTF::HashTableTraits>::find(*v161, v153), !v82)? (v84 = 0): (v84 = v82 + 16 * *(unsigned int *)(v82 - 4)), v84 == v83))
                                  {
                                    v150 = 0;
                                  }
                                  else
                                  {
                                    v150 = *(_QWORD *)(v83 + 8);
                                  }
                                  objc_msgSend(v9, "colorAttachments");
                                  v85 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(v85, "objectAtIndexedSubscript:", v153);
                                  v155 = (void *)objc_claimAutoreleasedReturnValue();

                                  v86 = *(unsigned int *)(v154 - 8);
                                  if ((v86 - 38) < 6 || !WebGPU::Texture::isRenderableFormat(v86, a1))
                                  {
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    v129 = v200[0];
                                    WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v200[0]);
                                    if (v129)
                                    {
                                      if (*(_DWORD *)v129 == 2)
                                        WTF::StringImpl::destroy();
                                      else
                                        *(_DWORD *)v129 -= 2;
                                    }
                                    goto LABEL_326;
                                  }
                                  v87 = *(_DWORD *)(v154 - 8);
                                  v88 = WebGPU::Texture::renderTargetPixelByteAlignment(v87);
                                  v149 = WebGPU::Texture::renderTargetPixelByteCost(v87);
                                  if (v151 % v88)
                                    v89 = v88 - v151 % v88;
                                  else
                                    v89 = 0;
                                  objc_msgSend(v155, "setPixelFormat:", WebGPU::Texture::pixelFormat(v87));
                                  v90 = *(_DWORD *)(v152 + v77 + 8);
                                  if (v90 > 0xF || !v150 && v90)
                                  {
LABEL_321:
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    v148 = v200[0];
                                    WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v200[0]);
                                    if (v148)
                                    {
                                      if (*(_DWORD *)v148 == 2)
                                        WTF::StringImpl::destroy();
                                      else
                                        *(_DWORD *)v148 -= 2;
                                    }
LABEL_325:
                                    v76 = 1;
LABEL_326:

                                    goto LABEL_206;
                                  }
                                  objc_msgSend(v155, "setWriteMask:", __rbit32(v90) >> 28);
                                  if (*(_QWORD *)(v152 + v77))
                                  {
                                    if (!WebGPU::Texture::supportsBlending(*(_DWORD *)(v154 - 8), a1))
                                      goto LABEL_321;
                                    objc_msgSend(v155, "setBlendingEnabled:", 1);
                                    v91 = *(_DWORD **)(v152 + v77);
                                    v92 = v91[3];
                                    if ((v92 - 3) <= 1 && (v91[4] != 1 || v91[5] != 1))
                                      goto LABEL_321;
                                    if ((*v91 - 3) <= 1 && (v91[1] != 1 || v91[2] != 1))
                                      goto LABEL_321;
                                    v93 = (v92 - 1);
                                    if (v93 < 4)
                                      v94 = v93 + 1;
                                    else
                                      v94 = 0;
                                    objc_msgSend(v155, "setAlphaBlendOperation:", v94);
                                    objc_msgSend(v155, "setSourceAlphaBlendFactor:", WebGPU::blendFactor(v91[4]));
                                    objc_msgSend(v155, "setDestinationAlphaBlendFactor:", WebGPU::blendFactor(v91[5]));
                                    v95 = (*v91 - 1);
                                    if (v95 < 4)
                                      v96 = v95 + 1;
                                    else
                                      v96 = 0;
                                    objc_msgSend(v155, "setRgbBlendOperation:", v96);
                                    objc_msgSend(v155, "setSourceRGBBlendFactor:", WebGPU::blendFactor(v91[1]));
                                    objc_msgSend(v155, "setDestinationRGBBlendFactor:", WebGPU::blendFactor(v91[2]));
                                    v97 = v91[1];
                                    if (v97 <= 0xA && ((1 << v97) & 0x430) != 0)
                                    {
                                      v98 = 1;
                                    }
                                    else
                                    {
                                      v99 = v91[2];
                                      if (v99 >= 0xB)
                                        v98 = 0;
                                      else
                                        v98 = (0x430u >> v99) & 1;
                                    }
                                  }
                                  else
                                  {
                                    objc_msgSend(v155, "setBlendingEnabled:", 0);
                                    v98 = 0;
                                  }
                                  if (!WebGPU::textureFormatAllowedForRetunType(*(_DWORD *)(v154 - 8), v150, v98))
                                  {
                                    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("pipeline creation - color target pixel format(%u) for location(%zu) is incompatible with shader output data type of %zu"), v153, objc_msgSend(v155, "pixelFormat"), v150);
                                    v146 = (NSString *)objc_claimAutoreleasedReturnValue();
                                    WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v146);

                                    goto LABEL_325;
                                  }
                                  v151 += v149 + v89;

                                  v76 = 1;
                                }
                                v77 += 32;
                                ++v153;
                              }
                              while (v159 != v153);
                              if (v151 <= *(_DWORD *)(a1 + 188))
                              {
                                v100 = 0;
                                goto LABEL_207;
                              }
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v78 = v200[0];
                              WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v200[0]);
                              if (!v78)
                                goto LABEL_206;
                              v79 = *(_DWORD *)v78 - 2;
                              if (*(_DWORD *)v78 == 2)
                              {
                                WTF::StringImpl::destroy();
                                goto LABEL_206;
                              }
LABEL_157:
                              *(_DWORD *)v78 = v79;
LABEL_206:
                              v100 = 1;
                            }
                            else
                            {
                              LODWORD(v159) = 0;
                              v76 = 0;
                              v100 = 0;
                            }
LABEL_207:

                            std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v180, v101);
                            v102 = v186;
                            v186 = 0;
                            if (v102)
                            {
                              if (*(_DWORD *)v102 == 2)
                                WTF::StringImpl::destroy();
                              else
                                *(_DWORD *)v102 -= 2;
                            }
                            if (v100)
                              goto LABEL_230;
                            v168 = v76 & 1;
                            v18 = v157;
                            LODWORD(v39) = v159;
                            v48 = *(_QWORD *)(a2 + 104);
                            if (v48)
                              goto LABEL_111;
                            goto LABEL_213;
                          }
LABEL_154:
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v78 = v200[0];
                          WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v200[0]);
                          if (v78)
                          {
                            v79 = *(_DWORD *)v78 - 2;
                            if (*(_DWORD *)v78 != 2)
                            {
                              LODWORD(v159) = 0;
                              v160 = 0;
                              v161 = 0;
                              v76 = 0;
                              goto LABEL_157;
                            }
                            WTF::StringImpl::destroy();
                          }
LABEL_205:
                          LODWORD(v159) = 0;
                          v160 = 0;
                          v161 = 0;
                          v76 = 0;
                          goto LABEL_206;
                        }
                      }
LABEL_133:
                      __break(1u);
                    }
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v47 = v180;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v180);
                }
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                  {
                    WTF::StringImpl::destroy();
                    if (!v193)
                      goto LABEL_48;
                  }
                  else
                  {
                    *(_DWORD *)v47 -= 2;
                    if (!v193)
                      goto LABEL_48;
                  }
                  goto LABEL_231;
                }
LABEL_230:
                if (v193)
LABEL_231:
                  WebGPU::PipelineLayout::~PipelineLayout(&v188, v21);
LABEL_48:
                if (v195)
                  WebGPU::PipelineLayout::~PipelineLayout(&v194, v21);
                v22 = v196;
                if (v196)
                {
                  v23 = *(v196 - 1);
                  if ((_DWORD)v23)
                  {
                    v24 = v196 + 2;
                    do
                    {
                      if (*(v24 - 2) != -2 && *(_QWORD *)v24)
                        WTF::fastFree((WTF *)(*(_QWORD *)v24 - 16), v21);
                      v24 += 4;
                      --v23;
                    }
                    while (v23);
                  }
                  WTF::fastFree((WTF *)(v22 - 4), v21);
                }
                v25 = (WTF *)v197;
                if (HIDWORD(v198))
                {
                  v26 = 16 * HIDWORD(v198);
                  v27 = v197;
                  do
                  {
                    v28 = (WTF *)*v27;
                    if (*v27)
                    {
                      *v27 = 0;
                      *((_DWORD *)v27 + 2) = 0;
                      WTF::fastFree(v28, v21);
                    }
                    v27 += 2;
                    v26 -= 16;
                  }
                  while (v26);
                }
                if (v25)
                  WTF::fastFree(v25, v21);
                goto LABEL_65;
              }
              v164 = 0;
              v160 = 0;
              v161 = 0;
              v168 = 0;
              v162 = 0;
              v166 = 0;
              v48 = *(_QWORD *)(a2 + 104);
              if (v48)
              {
LABEL_111:
                WebGPU::errorValidatingDepthStencilState(v48);
                v49 = (NSString *)objc_claimAutoreleasedReturnValue();
                if (v49)
                {
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v49);
                  goto LABEL_113;
                }
                v158 = v39;
                v50 = WebGPU::Texture::pixelFormat(*(_DWORD *)(v48 + 8));
                v51 = v50;
                if (((v50 - 253) & 0xFFFFFFFFFFFFFFF7) != 0)
                  v52 = v50;
                else
                  v52 = 0;
                objc_msgSend(v9, "setDepthAttachmentPixelFormat:", v52);
                v53 = *(_DWORD *)(v48 + 8);
                if (v53 <= 0x2B && ((1 << v53) & 0xA4000000000) != 0)
                  objc_msgSend(v9, "setStencilAttachmentPixelFormat:", v51);
                v54 = (void *)objc_opt_new();
                objc_msgSend(v54, "setDepthCompareFunction:", WebGPU::convertToMTLCompare(*(_DWORD *)(v48 + 20)));
                v55 = *(unsigned __int8 *)(v48 + 16);
                if (*(_BYTE *)(v48 + 16))
                  v55 = *(_DWORD *)(v48 + 12);
                objc_msgSend(v54, "setDepthWriteEnabled:", v55 != 0);
                objc_msgSend(v54, "frontFaceStencil");
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                WebGPU::populateStencilOperation(v56, (_DWORD *)(v48 + 24), *(unsigned int *)(v48 + 56), *(unsigned int *)(v48 + 60));

                objc_msgSend(v54, "backFaceStencil");
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                WebGPU::populateStencilOperation(v57, (_DWORD *)(v48 + 40), *(unsigned int *)(v48 + 56), *(unsigned int *)(v48 + 60));

                v58 = *(float *)(v48 + 68);
                v59 = (float)*(int *)(v48 + 64);
                v60 = *(float *)(v48 + 72);
                v61 = *(_QWORD *)(a2 + 104);
              }
              else
              {
LABEL_213:
                v158 = v39;
                v61 = 0;
                v54 = 0;
                v60 = 0.0;
                v58 = 0.0;
                v59 = 0.0;
              }
              v103 = v168;
              if (!*(_QWORD *)(a2 + 136))
                v103 = 1;
              if ((v103 & 1) == 0 && !v61
                || v166 && !objc_msgSend(v9, "depthAttachmentPixelFormat")
                || (v104 = *(_DWORD *)(a2 + 120), v104 != 1) && v104 != 4)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v105 = v180;
                WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v180);
                if (v105)
                {
                  if (*(_DWORD *)v105 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *(_DWORD *)v105 -= 2;
                }
                goto LABEL_229;
              }
              objc_msgSend(v9, "setRasterSampleCount:");
              objc_msgSend(v9, "setAlphaToCoverageEnabled:", *(_DWORD *)(a2 + 128) != 0);
              if (*(_DWORD *)(a2 + 128))
              {
                v49 = (NSString *)v54;
                if (v162
                  || (v106 = *(_QWORD *)(a2 + 136)) == 0
                  || !*(_QWORD *)(v106 + 40)
                  || !WebGPU::hasAlphaChannel(*(_DWORD *)(*(_QWORD *)(v106 + 48) + 8))
                  || !WebGPU::Texture::supportsBlending(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 48) + 8), a1)|| *(_DWORD *)(a2 + 120) == 1)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v112 = v180;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v180);
                  if (v112)
                  {
                    if (*(_DWORD *)v112 == 2)
                    {
                      WTF::StringImpl::destroy();

                      if (!v193)
                        goto LABEL_48;
                      goto LABEL_231;
                    }
                    *(_DWORD *)v112 -= 2;
                  }
LABEL_113:

                  if (!v193)
                    goto LABEL_48;
                  goto LABEL_231;
                }
              }
              if ((objc_opt_respondsToSelector() & 1) == 0)
              {
LABEL_334:
                __break(0xC471u);
                JUMPOUT(0x182472D24);
              }
              v107 = *(_DWORD *)(a2 + 124);
              if (v107 != -1)
                objc_msgSend(v9, "setSampleMask:", *(unsigned int *)(a2 + 124));
              WebGPU::errorValidatingInterstageShaderInterfaces<WGPUFragmentState const>(*(unsigned int *)(a1 + 176), (MTLDataType)*(unsigned int *)(a1 + 180), (const WTF::StringImpl *)*(unsigned int *)(a2 + 88), (uint64_t *)v18, v160, (unsigned int **)v161, (uint64_t)v164, *(_QWORD *)(a2 + 136));
              v108 = (NSString *)objc_claimAutoreleasedReturnValue();
              if (v108)
              {
                WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v108);

LABEL_229:
                goto LABEL_230;
              }
              v200[0] = 0;
              v109 = *(_QWORD *)(a2 + 64);
              if (v109)
              {
                if (!v171)
                {
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Vertex shader has no stageIn parameters but buffer count was %zu and attribute count was %zu"), v109, *(_QWORD *)(*(_QWORD *)(a2 + 72) + 16));
                  v113 = (NSString *)objc_claimAutoreleasedReturnValue();
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v113);

                  goto LABEL_332;
                }
                if (v109 > *(unsigned int *)(a1 + 152))
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v110 = v180;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v180);
                  goto LABEL_279;
                }
                v114 = *(_OWORD *)(v14 + 16);
                v177[0] = *(_OWORD *)v14;
                v177[1] = v114;
                v177[2] = *(_OWORD *)(v14 + 32);
                v178 = *(_QWORD *)(v14 + 48);
                v176 = 0;
                WebGPU::createVertexDescriptor((uint64_t)v177, a1 + 72, (unsigned int **)v171, (uint64_t *)v200, (const __CFString **)&v176);
                v115 = (void *)objc_claimAutoreleasedReturnValue();
                v116 = v176;
                if (v116)
                {
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("vertex descriptor creation failed %@"), v116);
                  v117 = (NSString *)objc_claimAutoreleasedReturnValue();
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v117);

LABEL_332:
                  if (v200[0])
                    WTF::fastFree((WTF::StringImpl *)((char *)v200[0] - 16), v111);
                  goto LABEL_229;
                }
                objc_msgSend(v9, "setVertexDescriptor:", v115);

              }
              v118 = *(_QWORD *)(a2 + 80);
              if (v118)
              {
                v119 = *(unsigned int *)(a1 + 228);
                if (!(_DWORD)v119)
                  goto LABEL_278;
                v120 = *(int **)(a1 + 216);
                while (1)
                {
                  v121 = *v120++;
                  if (v121 == 1)
                    break;
                  if (!--v119)
                    goto LABEL_278;
                }
                if (*(_DWORD *)(v118 + 8) != 7 || *(_QWORD *)v118)
                  goto LABEL_278;
                v170 = *(_DWORD *)(v118 + 16) != 0;
              }
              else
              {
                v170 = 0;
              }
              v122 = *(_DWORD *)(a2 + 88);
              v123 = v122 - 1;
              v124 = v122 - 3;
              v125 = v122 == 0x7FFFFFFF;
              v126 = 3;
              if (!v125)
                v126 = 1;
              if (v124 < 2)
                v126 = 3;
              if (v123 >= 2)
                v127 = v126;
              else
                v127 = 2;
              objc_msgSend(v9, "setInputPrimitiveTopology:", v127);
              v128 = *(unsigned int *)(a2 + 88);
              if ((_DWORD)v128 == 2)
              {
                v128 = 2;
              }
              else if ((_DWORD)v128 != 4)
              {
                if (*(_DWORD *)(a2 + 92))
                {
LABEL_278:
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v110 = v180;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v180);
LABEL_279:
                  if (v110)
                  {
                    if (*(_DWORD *)v110 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *(_DWORD *)v110 -= 2;
                  }
                  goto LABEL_332;
                }
                v167 = 0;
                if ((int)v128 > 2)
                {
                  if ((_DWORD)v128 != 3 && (_DWORD)v128 != 0x7FFFFFFF)
                    goto LABEL_293;
                  v128 = 3;
                }
                else
                {
                  if ((_DWORD)v128 != 1)
                  {
LABEL_293:
                    v130 = *(_DWORD *)(a2 + 92);
                    if (!v130 || v130 == 0x7FFFFFFF)
                    {
                      v163 = 0;
                      v165 = 0;
                    }
                    else
                    {
                      v165 = v130 == 2;
                      v163 = 1;
                    }
                    v131 = *(_DWORD *)(a2 + 100);
                    v132 = *(_DWORD *)(a2 + 96) == 0;
                    if (v131 == 2)
                      v133 = 2;
                    else
                      v133 = v131 == 1;
                    v134 = *(void **)(a1 + 8);
                    v175 = 0;
                    v172 = (void *)objc_msgSend(v134, "newRenderPipelineStateWithDescriptor:error:", v9, &v175);
                    v135 = v175;
                    v136 = v135;
                    if (v135 || !v172)
                    {
                      objc_msgSend(v135, "localizedDescription");
                      v142 = (NSString *)objc_claimAutoreleasedReturnValue();
                      WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v142);

                    }
                    else
                    {
                      if (v173)
                      {
                        ++*(_DWORD *)v173;
                        v174 = v173;
                        WebGPU::RenderPipeline::create((uint64_t *)&v186, v172, v167, v165, v163, v132, v133, v170, v59, v58, v60, v54, (uint64_t *)&v174, v107, v9, v158, a2, (uint64_t *)v200, &v196,
                          a1);
                        v137 = v186;
                        v186 = 0;
                        v180 = 0;
                        v181 = 0;
                        *a4 = v137;
                        a4[1] = 0;
                        std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(&v180, v138);
                        std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(&v186, v139);
                        v141 = &v174;
                      }
                      else
                      {
                        WebGPU::Device::generatePipelineLayout((unsigned __int8 **)a1, &v197, (WebGPU::PipelineLayout *)&v186);
                        if (*((_BYTE *)v186 + 96))
                        {
                          WebGPU::RenderPipeline::create((uint64_t *)&v174, v172, v167, v165, v163, v132, v133, v170, v59, v58, v60, v54, (uint64_t *)&v186, v107, v9, v158, a2, (uint64_t *)v200, &v196,
                            a1);
                          v143 = v174;
                          v174 = 0;
                          v180 = 0;
                          v181 = 0;
                          *a4 = v143;
                          a4[1] = 0;
                          std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(&v180, v144);
                          std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(&v174, v145);
                        }
                        else
                        {
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v147 = v180;
                          WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v180);
                          if (v147)
                          {
                            if (*(_DWORD *)v147 == 2)
                              WTF::StringImpl::destroy();
                            else
                              *(_DWORD *)v147 -= 2;
                          }
                        }
                        v141 = &v186;
                      }
                      WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref((unsigned __int8 ****)v141, v140);
                    }

                    goto LABEL_332;
                  }
                  v128 = 1;
                }
              }
              v167 = v128;
              goto LABEL_293;
            }
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v18 = (WebGPU::RenderPipeline **)v180;
          WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v180);
          if (!v180)
          {
LABEL_100:
            v33 = 1;
            goto LABEL_101;
          }
          if (*(_DWORD *)v180 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v180 -= 2;
LABEL_99:
          v18 = 0;
          goto LABEL_100;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v15 = v188;
        if (v188)
          v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v16 = &stru_1E0FD9588;
        WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v16->isa);
LABEL_44:

        if (v15)
          goto LABEL_45;
        goto LABEL_48;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = v188;
    if (v188)
      v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v16 = &stru_1E0FD9588;
    WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v16->isa);
    goto LABEL_44;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v194)
    v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E0FD9588;
  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v10->isa);

  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v194 -= 2;
  }
}

void sub_182472D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,_DWORD *a63)
{
  unsigned __int8 **a65;
  void *v65;
  _DWORD *v66;
  uint64_t v67;
  void *v69;
  void *v70;
  _DWORD *v71;
  void *v72;
  _DWORD *v73;

  if (v66)
  {
    if (*v66 == 2)
      WTF::StringImpl::destroy();
    else
      *v66 -= 2;
  }

  std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a49, v69);
  v71 = a63;
  a63 = 0;
  if (v71)
  {
    if (*v71 == 2)
      WTF::StringImpl::destroy();
    else
      *v71 -= 2;
  }
  if (LOBYTE(STACK[0x228]))
    WebGPU::PipelineLayout::~PipelineLayout(&a65, v70);
  if (LOBYTE(STACK[0x298]))
    WebGPU::PipelineLayout::~PipelineLayout((unsigned __int8 ***)&STACK[0x230], v70);
  WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v67 - 160), v70);
  WTF::Vector<WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v67 - 152, v72);
  v73 = *(_DWORD **)(v67 - 136);
  *(_QWORD *)(v67 - 136) = 0;
  if (v73)
  {
    if (*v73 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *v73 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18247333C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18247334C()
{
  uint64_t v0;
  void *v1;

  if (v0)
    JUMPOUT(0x182473358);
  JUMPOUT(0x182473378);
}

void WebGPU::returnInvalidRenderPipeline(WebGPU *a1, WebGPU::Device *a2, char a3, uint64_t a4)
{
  __CFString *v7;
  __CFString *v8;

  if (a4)
    v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E0FD9588;
  v8 = v7;
  WebGPU::returnInvalidRenderPipeline(a1, a2, a3, &v7->isa);

}

void sub_1824733F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WebGPU::fromAPI(WebGPU *this, const char *a2)
{
  if (this)
    strlen((const char *)this);
  return WTF::String::fromUTF8();
}

id WebGPU::errorValidatingVertexStageIn(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[28];
  int v21;
  uint64_t v22;

  if (!a1)
    return 0;
  v22 = 0;
  v3 = (_DWORD *)*a1;
  if (!*a1)
  {
    v6 = 0;
    v5 = 0;
    goto LABEL_12;
  }
  v4 = *(v3 - 1);
  v5 = &v3[2 * v4];
  if (*(v3 - 3))
  {
    v6 = (_DWORD *)*a1;
    if ((_DWORD)v4)
    {
      v7 = 8 * v4;
      v6 = (_DWORD *)*a1;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 2;
        v7 -= 8;
        if (!v7)
        {
          v6 = v5;
          if (v3)
            goto LABEL_13;
          goto LABEL_16;
        }
      }
    }
LABEL_12:
    if (v3)
      goto LABEL_13;
    goto LABEL_16;
  }
  v6 = &v3[2 * v4];
  v5 = v6;
  if (v3)
  {
LABEL_13:
    v9 = &v3[2 * *(v3 - 1)];
    if (v9 != v6)
      goto LABEL_19;
LABEL_35:
    v18 = 0;
    v19 = v22;
    if (!v22)
      return v18;
    goto LABEL_33;
  }
LABEL_16:
  v9 = 0;
  if (!v6)
    goto LABEL_35;
LABEL_19:
  while (1)
  {
    v21 = 0;
    v10 = *v6;
    v21 = v10;
    if (v10 >= a2)
      break;
    if (v22)
    {
      v11 = *(_DWORD *)(v22 - 8);
      v12 = 9 * ((v10 + ~((_DWORD)v10 << 15)) ^ ((v10 + ~((_DWORD)v10 << 15)) >> 10));
      v13 = v11 & (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6))
                                                                        + ~((v12 ^ (v12 >> 6)) << 11)) >> 16));
      v14 = *(_DWORD *)(v22 + 4 * v13);
      if (v14 == (_DWORD)v10)
      {
LABEL_31:
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Shader location %u appears twice"), v10);
        v17 = objc_claimAutoreleasedReturnValue();
        goto LABEL_32;
      }
      v15 = 1;
      while (v14 != -1)
      {
        v13 = (v13 + v15) & v11;
        v14 = *(_DWORD *)(v22 + 4 * v13);
        ++v15;
        if (v14 == (_DWORD)v10)
          goto LABEL_31;
      }
    }
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(&v22, &v21, (uint64_t)v20);
    v16 = v6 + 2;
    v6 = v5;
    if (v16 != v5)
    {
      v6 = v16;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
    if (v6 == v9)
      goto LABEL_35;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Shader location %u exceeds the maximum allowed value of %u"), v10, a2);
  v17 = objc_claimAutoreleasedReturnValue();
LABEL_32:
  v18 = (void *)v17;
  v19 = v22;
  if (!v22)
    return v18;
LABEL_33:
  WTF::fastFree((WTF *)(v19 - 16), a2);
  return v18;
}

void sub_182473650(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    WTF::fastFree((WTF *)(a16 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebGPU::returnInvalidRenderPipeline(WebGPU *this, WebGPU::Device *a2, char a3, NSString *a4)
{
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  WebGPU::PipelineLayout *v21;
  uint64_t v22;
  uint64_t result;
  _DWORD *v24;

  v7 = a4;
  if ((a3 & 1) == 0)
  {
    MEMORY[0x186DAB230](&v24, v7);
    v8 = *((_QWORD *)a2 + 4);
    v9 = 32 * *((unsigned int *)a2 + 11);
    v10 = v8 + v9;
    while (v9)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v10 -= 32;
      v9 -= 32;
      if (!v11)
      {
        v12 = v8 + v9;
        if (!*(_BYTE *)(v12 + 16))
        {
          v13 = v24;
          v24 = 0;
          *(_DWORD *)v12 = 1;
          *(_QWORD *)(v12 + 8) = v13;
          *(_BYTE *)(v12 + 16) = 1;
        }
        goto LABEL_10;
      }
    }
    v14 = *((_QWORD *)a2 + 3);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v14 + 16))(v14, 1, &v24);
      v15 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_10:
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      if (*v16 == 2)
        WTF::StringImpl::destroy();
      else
        *v16 -= 2;
    }
  }
  v17 = WTF::fastMalloc((WTF *)0x1C8);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v18 = *(_QWORD *)a2;
  if (__ldaxr(*(unsigned __int8 **)a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_18;
  }
  MEMORY[0x186DAB1AC](v18);
LABEL_18:
  ++*(_QWORD *)(v18 + 8);
  v20 = __ldxr((unsigned __int8 *)v18);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_23:
  *(_QWORD *)(v17 + 24) = a2;
  *(_BYTE *)(v17 + 40) = 0;
  *(_BYTE *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v17 + 96) = 0;
  *(_DWORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 120) = 0;
  *(_QWORD *)(v17 + 128) = 0;
  *(_QWORD *)(v17 + 112) = 0;
  v21 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
  WebGPU::PipelineLayout::PipelineLayout(v21, (unsigned __int8 **)a2);
  *(_QWORD *)(v17 + 136) = v21;
  *(_BYTE *)(v17 + 300) = 0;
  *(_BYTE *)(v17 + 304) = 0;
  *(_QWORD *)(v17 + 432) = 0;
  *(_QWORD *)(v17 + 440) = 0;
  *(_QWORD *)(v17 + 424) = 0;
  v22 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v22 + 16) = -1;
  result = v22 + 16;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = -1;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = -1;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = -1;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)(result + 96) = -1;
  *(_QWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = -1;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(v17 + 440) = result;
  *(_DWORD *)(result - 4) = 8;
  *(_DWORD *)(*(_QWORD *)(v17 + 440) - 8) = 7;
  *(_DWORD *)(*(_QWORD *)(v17 + 440) - 16) = 0;
  *(_DWORD *)(*(_QWORD *)(v17 + 440) - 12) = 0;
  *(_BYTE *)(v17 + 448) = 0;
  *(_QWORD *)this = v17;
  *((_QWORD *)this + 1) = v7;
  return result;
}

void sub_1824738C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  void *v10;

  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::HashMap<unsigned int,MTLDataType,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<MTLDataType>,WTF::HashTableTraits>::find(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6 != -1)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_6;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t WebGPU::blendFactor(int a1)
{
  uint64_t result;

  result = 11;
  switch(a1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 6;
      break;
    case 7:
      result = 7;
      break;
    case 8:
      result = 8;
      break;
    case 9:
      result = 9;
      break;
    case 10:
      result = 10;
      break;
    case 11:
      return result;
    case 12:
      result = 12;
      break;
    default:
      if (a1 == 0x7FFFFFFF)
        result = 1;
      break;
  }
  return result;
}

BOOL WebGPU::textureFormatAllowedForRetunType(int a1, unint64_t a2, int a3)
{
  _BOOL8 result;

  result = 1;
  if (a1)
  {
    if (a2)
    {
      if (!a3 || (result = 0, a2 <= 0x24) && ((1 << a2) & 0x1100000040) != 0)
      {
        result = a2 == 6;
        switch(a1)
        {
          case 1:
          case 7:
          case 12:
            result = a2 - 3 < 4;
            break;
          case 3:
          case 5:
          case 13:
            result = a2 - 33 < 4;
            break;
          case 4:
          case 6:
          case 14:
            result = a2 - 29 < 4;
            break;
          case 8:
          case 17:
          case 29:
            result = a2 == 6 || (a2 & 0xFFFFFFFFFFFFFFFELL) == 4;
            break;
          case 10:
          case 15:
          case 30:
            result = a2 == 36 || (a2 & 0xFFFFFFFFFFFFFFFELL) == 34;
            break;
          case 11:
          case 16:
          case 31:
            result = a2 == 32 || (a2 & 0xFFFFFFFFFFFFFFFELL) == 30;
            break;
          case 18:
          case 19:
          case 23:
          case 24:
          case 26:
          case 34:
          case 35:
            return result;
          case 21:
          case 25:
          case 32:
          case 36:
            result = a2 == 36;
            break;
          case 22:
          case 33:
          case 37:
            result = a2 == 32;
            break;
          case 27:
            result = a2 - 5 < 2;
            break;
          default:
            result = 0;
            break;
        }
      }
    }
  }
  return result;
}

id WebGPU::errorValidatingDepthStencilState(uint64_t a1)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v13;
  id result;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  int v19;
  const char *v20;
  int v21;
  const char *v22;
  int v23;
  const char *v24;
  int v25;
  const char *v26;
  void *v27;
  void *v28;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 - 38 >= 6)
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    v5 = CFSTR("Color format passed to depth / stencil format");
    goto LABEL_11;
  }
  v2 = *(_DWORD *)(a1 + 12);
  if (*(_BYTE *)(a1 + 16))
    v3 = v2 == 0;
  else
    v3 = 1;
  if ((!v3 || (*(_DWORD *)(a1 + 20) | 8) != 8) && v1 <= 0x26)
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    v5 = CFSTR("depth-stencil state missing format");
    goto LABEL_11;
  }
  v8 = *(_DWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 36);
  v13 = v8 == 8 && v7 == 0 && v9 == 0 && v10 == 0;
  if (v13
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a1 + 40), (int32x4_t)xmmword_18260F1F0)))) & 1) == 0|| v1 <= 0x2B && ((1 << v1) & 0xA4000000000) != 0)
  {
    if (v1 >= 0x27)
    {
      if (*(_BYTE *)(a1 + 16))
      {
        v6 = 0;
        if (!(v2 | v9 | *(_DWORD *)(a1 + 48)) || *(_DWORD *)(a1 + 20))
          return v6;
        v4 = (void *)MEMORY[0x1E0CB3940];
        v5 = CFSTR("Depth compare must be provided");
      }
      else
      {
        v4 = (void *)MEMORY[0x1E0CB3940];
        v5 = CFSTR("depthWrite must be provided");
      }
LABEL_11:
      objc_msgSend(v4, "stringWithFormat:", CFSTR("Invalid DepthStencilState: %@"), v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      return v6;
    }
    return 0;
  }
  else
  {
    switch(v8)
    {
      case 1:
        v15 = "never";
        break;
      case 2:
        v15 = "less";
        break;
      case 3:
        v15 = "less-equal";
        break;
      case 4:
        v15 = "greater";
        break;
      case 5:
        v15 = "greater-equal";
        break;
      case 6:
        v15 = "equal";
        break;
      case 7:
        v15 = "not-equal";
        break;
      case 8:
        v15 = "always";
        break;
      default:
        if (v8 == 0x7FFFFFFF)
        {
LABEL_124:
          __break(0xC471u);
          JUMPOUT(0x18247428CLL);
        }
        v15 = "undefined";
        break;
    }
    switch(v7)
    {
      case 1:
        v16 = "zero";
        break;
      case 2:
        v16 = "replace";
        break;
      case 3:
        v16 = "invert";
        break;
      case 4:
        v16 = "increment-clamp";
        break;
      case 5:
        v16 = "decrement-clamp";
        break;
      case 6:
        v16 = "increment-wrap";
        break;
      case 7:
        v16 = "decrement-wrap";
        break;
      default:
        if (v7 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1824742ACLL);
        }
        v16 = "keep";
        break;
    }
    switch(v9)
    {
      case 1:
        v17 = "zero";
        break;
      case 2:
        v17 = "replace";
        break;
      case 3:
        v17 = "invert";
        break;
      case 4:
        v17 = "increment-clamp";
        break;
      case 5:
        v17 = "decrement-clamp";
        break;
      case 6:
        v17 = "increment-wrap";
        break;
      case 7:
        v17 = "decrement-wrap";
        break;
      default:
        if (v9 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1824742CCLL);
        }
        v17 = "keep";
        break;
    }
    switch(v10)
    {
      case 1:
        v18 = "zero";
        break;
      case 2:
        v18 = "replace";
        break;
      case 3:
        v18 = "invert";
        break;
      case 4:
        v18 = "increment-clamp";
        break;
      case 5:
        v18 = "decrement-clamp";
        break;
      case 6:
        v18 = "increment-wrap";
        break;
      case 7:
        v18 = "decrement-wrap";
        break;
      default:
        if (v10 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1824742ECLL);
        }
        v18 = "keep";
        break;
    }
    v19 = *(_DWORD *)(a1 + 40);
    switch(v19)
    {
      case 1:
        v20 = "never";
        break;
      case 2:
        v20 = "less";
        break;
      case 3:
        v20 = "less-equal";
        break;
      case 4:
        v20 = "greater";
        break;
      case 5:
        v20 = "greater-equal";
        break;
      case 6:
        v20 = "equal";
        break;
      case 7:
        v20 = "not-equal";
        break;
      case 8:
        v20 = "always";
        break;
      default:
        if (v19 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x18247430CLL);
        }
        v20 = "undefined";
        break;
    }
    v21 = *(_DWORD *)(a1 + 44);
    switch(v21)
    {
      case 1:
        v22 = "zero";
        break;
      case 2:
        v22 = "replace";
        break;
      case 3:
        v22 = "invert";
        break;
      case 4:
        v22 = "increment-clamp";
        break;
      case 5:
        v22 = "decrement-clamp";
        break;
      case 6:
        v22 = "increment-wrap";
        break;
      case 7:
        v22 = "decrement-wrap";
        break;
      default:
        if (v21 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x18247432CLL);
        }
        v22 = "keep";
        break;
    }
    v23 = *(_DWORD *)(a1 + 48);
    switch(v23)
    {
      case 1:
        v24 = "zero";
        break;
      case 2:
        v24 = "replace";
        break;
      case 3:
        v24 = "invert";
        break;
      case 4:
        v24 = "increment-clamp";
        break;
      case 5:
        v24 = "decrement-clamp";
        break;
      case 6:
        v24 = "increment-wrap";
        break;
      case 7:
        v24 = "decrement-wrap";
        break;
      default:
        if (v23 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x18247434CLL);
        }
        v24 = "keep";
        break;
    }
    v25 = *(_DWORD *)(a1 + 52);
    switch(v25)
    {
      case 1:
        v26 = "zero";
        goto LABEL_116;
      case 2:
        v26 = "replace";
        goto LABEL_116;
      case 3:
        v26 = "invert";
        goto LABEL_116;
      case 4:
        v26 = "increment-clamp";
        goto LABEL_116;
      case 5:
        v26 = "decrement-clamp";
        goto LABEL_116;
      case 6:
        v26 = "increment-wrap";
        goto LABEL_116;
      case 7:
        v26 = "decrement-wrap";
        goto LABEL_116;
      default:
        if (v25 == 0x7FFFFFFF)
          goto LABEL_124;
        v26 = "keep";
LABEL_116:
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("missing stencil format - stencilFront: compare = %s, failOp = %s, depthFailOp = %s, passOp = %s, stencilBack: compare = %s, failOp = %s, depthFailOp = %s, passOp = %s"), v15, v16, v17, v18, v20, v22, v24, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid DepthStencilState: %@"), v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        result = v28;
        break;
    }
  }
  return result;
}

void sub_182474370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebGPU::convertToMTLCompare(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
    case 8:
      goto LABEL_4;
    case 1:
      return result;
    case 2:
      result = 1;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 6;
      break;
    case 6:
      result = 2;
      break;
    case 7:
      result = 5;
      break;
    default:
      if (a1 == 0x7FFFFFFF)
LABEL_4:
        result = 7;
      break;
  }
  return result;
}

void WebGPU::populateStencilOperation(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  id v18;

  v7 = a1;
  v8 = 0;
  switch(*a2)
  {
    case 0:
    case 8:
      goto LABEL_4;
    case 1:
      break;
    case 2:
      v8 = 1;
      break;
    case 3:
      v8 = 3;
      break;
    case 4:
      v8 = 4;
      break;
    case 5:
      v8 = 6;
      break;
    case 6:
      v8 = 2;
      break;
    case 7:
      v8 = 5;
      break;
    default:
      if (*a2 == 0x7FFFFFFF)
LABEL_4:
        v8 = 7;
      break;
  }
  v18 = v7;
  objc_msgSend(v7, "setStencilCompareFunction:", v8);
  v9 = a2[1];
  v10 = v18;
  switch(v9)
  {
    case 1:
      v11 = 1;
      break;
    case 2:
      v11 = 2;
      break;
    case 3:
      v11 = 5;
      break;
    case 4:
      v11 = 3;
      break;
    case 5:
      v11 = 4;
      break;
    case 6:
      v11 = 6;
      break;
    case 7:
      v11 = 7;
      break;
    default:
      v11 = v9 == 0x7FFFFFFF;
      v10 = v18;
      break;
  }
  objc_msgSend(v10, "setStencilFailureOperation:", v11);
  v12 = a2[2];
  v13 = v18;
  switch(v12)
  {
    case 1:
      v14 = 1;
      break;
    case 2:
      v14 = 2;
      break;
    case 3:
      v14 = 5;
      break;
    case 4:
      v14 = 3;
      break;
    case 5:
      v14 = 4;
      break;
    case 6:
      v14 = 6;
      break;
    case 7:
      v14 = 7;
      break;
    default:
      v14 = v12 == 0x7FFFFFFF;
      v13 = v18;
      break;
  }
  objc_msgSend(v13, "setDepthFailureOperation:", v14);
  v15 = a2[3];
  v16 = v18;
  switch(v15)
  {
    case 1:
      v17 = 1;
      break;
    case 2:
      v17 = 2;
      break;
    case 3:
      v17 = 5;
      break;
    case 4:
      v17 = 3;
      break;
    case 5:
      v17 = 4;
      break;
    case 6:
      v17 = 6;
      break;
    case 7:
      v17 = 7;
      break;
    default:
      v17 = v15 == 0x7FFFFFFF;
      v16 = v18;
      break;
  }
  objc_msgSend(v16, "setDepthStencilPassOperation:", v17);
  objc_msgSend(v18, "setWriteMask:", a4);
  objc_msgSend(v18, "setReadMask:", a3);

}

void sub_182474710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WebGPU::hasAlphaChannel(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 56:
    case 57:
    case 60:
    case 61:
    case 62:
    case 63:
      result = 1;
      break;
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 58:
    case 59:
      return result;
    default:
      if (a1 == 0x7FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x182474780);
      }
      return result;
  }
  return result;
}

__CFString *WebGPU::errorValidatingInterstageShaderInterfaces<WGPUFragmentState const>(uint64_t a1, MTLDataType a2, const WTF::StringImpl *a3, uint64_t *a4, int **a5, unsigned int **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v21;
  __CFString *v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int **v26;
  int **v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int i;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int j;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  int k;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  int *v65;
  int *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int *v76;
  int v77;
  int v78;
  WebGPU *v79;
  int v80;
  __int16 *v81;
  int v82;
  int v83;
  int v84;
  unsigned int v86;
  int *v88;
  unsigned int *v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int *v92;
  uint64_t v93;
  unsigned int *v94;
  WTF::StringImpl *v95;
  int **v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  __int16 v101;
  WTF::StringImpl *v102;

  if (!a4)
    return CFSTR("vertex shader has no outputs");
  v9 = a7;
  v10 = a2;
  v11 = a1;
  if ((_DWORD)a3)
  {
    v97 = a5;
    v99 = a1;
    v12 = *a4;
    v13 = a6;
    if (*a4)
      goto LABEL_4;
LABEL_13:
    v16 = 0;
    LODWORD(v14) = 0;
LABEL_15:
    v15 = v12 + 24 * v14;
    goto LABEL_16;
  }
  if (!(_DWORD)a1)
    return CFSTR("maxVertexShaderOutputComponents is zero");
  v11 = a1 - 1;
  v97 = a5;
  v99 = a1;
  v12 = *a4;
  v13 = a6;
  if (!*a4)
    goto LABEL_13;
LABEL_4:
  v14 = *(unsigned int *)(v12 - 4);
  v15 = v12 + 24 * v14;
  if (!*(_DWORD *)(v12 - 12))
  {
    v16 = v12 + 24 * v14;
    goto LABEL_15;
  }
  v16 = v12;
  if ((_DWORD)v14)
  {
    v17 = 24 * v14;
    v16 = v12;
    while (*(_DWORD *)v16 >= 0xFFFFFFFE)
    {
      v16 += 24;
      v17 -= 24;
      if (!v17)
      {
        v16 = v15;
        break;
      }
    }
  }
LABEL_16:
  if (v12)
  {
    v19 = v12 + 24 * *(unsigned int *)(v12 - 4);
    if (v19 == v16)
      goto LABEL_31;
  }
  else
  {
    v19 = 0;
    if (!v16)
      goto LABEL_31;
  }
  v21 = 0;
  v22 = CFSTR("location >= maxInterStageShaderVariables");
  do
  {
    if (*(_DWORD *)v16 >= v10)
      return v22;
    v23 = WebGPU::componentsForDataType(*(WebGPU **)(v16 + 8), a2);
    v24 = v16 + 24;
    v16 = v15;
    if (v24 != v15)
    {
      v16 = v24;
      while (*(_DWORD *)v16 >= 0xFFFFFFFE)
      {
        v16 += 24;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
    v21 += v23;
  }
  while (v16 != v19);
  v25 = v21 > v11;
  v9 = a7;
  if (v25)
    return CFSTR("vertexScalarComponents > maxVertexShaderOutputComponents");
LABEL_31:
  if (!v9)
    goto LABEL_170;
  if (a8 && *(_QWORD *)(a8 + 16))
  {
    strlen(*(const char **)(a8 + 16));
    WTF::String::fromUTF8();
    v26 = v13;
    v27 = v97;
    v28 = v99;
    v29 = *(_QWORD *)(v9 + 160);
    if (!v29)
      goto LABEL_91;
  }
  else
  {
    v30 = *(WTF::StringImpl **)(v9 + 128);
    v26 = v13;
    v28 = v99;
    if (v30)
      *(_DWORD *)v30 += 2;
    v102 = v30;
    v27 = v97;
    v29 = *(_QWORD *)(v9 + 160);
    if (!v29)
      goto LABEL_91;
  }
  v31 = *(_DWORD *)(v29 - 8);
  v32 = *((_DWORD *)v102 + 4);
  if (v32 < 0x100)
  {
    v34 = WTF::StringImpl::hashSlowCase(v102);
    v33 = v9;
  }
  else
  {
    v33 = v9;
    v34 = v32 >> 8;
  }
  for (i = 0; ; v34 = i + v36)
  {
    v36 = v34 & v31;
    v37 = *(WTF **)(v29 + 16 * v36);
    if (v37 != (WTF *)-1)
    {
      if (!v37)
      {
        v40 = *(_QWORD *)(v33 + 160);
        if (!v40)
          goto LABEL_91;
        v39 = v33;
        goto LABEL_57;
      }
      if ((WTF::equal(v37, v102, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  v38 = v29 + 16 * v36;
  v39 = v33;
  v40 = *(_QWORD *)(v33 + 160);
  if (!v40 || v38 != v40 + 16 * *(unsigned int *)(v40 - 4))
  {
    if (*(_BYTE *)(v38 + 8))
    {
      if (!(_DWORD)v28)
      {
        v56 = 0;
        v22 = CFSTR("maxFragmentShaderInputComponents is less than zero due to front facing");
        goto LABEL_166;
      }
      v28 = (v28 - 1);
    }
    if (!v40)
      goto LABEL_91;
  }
LABEL_57:
  v41 = *(_DWORD *)(v40 - 8);
  v42 = *((_DWORD *)v102 + 4);
  if (v42 < 0x100)
  {
    v44 = WTF::StringImpl::hashSlowCase(v102);
    v43 = v39;
  }
  else
  {
    v43 = v39;
    v44 = v42 >> 8;
  }
  for (j = 0; ; v44 = j + v46)
  {
    v46 = v44 & v41;
    v47 = *(WTF **)(v40 + 16 * v46);
    if (v47 != (WTF *)-1)
    {
      if (!v47)
      {
        v50 = *(_QWORD *)(v43 + 160);
        if (!v50)
          goto LABEL_91;
        v49 = v43;
        v51 = *(unsigned int *)(v50 - 4);
        v48 = v50 + 16 * v51;
        goto LABEL_69;
      }
      if ((WTF::equal(v47, v102, a3) & 1) != 0)
        break;
    }
    ++j;
  }
  v48 = v40 + 16 * v46;
  v49 = v43;
  v50 = *(_QWORD *)(v43 + 160);
  if (!v50)
    goto LABEL_70;
  v51 = *(unsigned int *)(v50 - 4);
LABEL_69:
  if (v48 == v50 + 16 * v51)
    goto LABEL_74;
LABEL_70:
  if (*(_BYTE *)(v48 + 9))
  {
    if (!(_DWORD)v28)
    {
      v56 = 0;
      v22 = CFSTR("maxFragmentShaderInputComponents is less than zero due to sample index");
      goto LABEL_166;
    }
    v28 = (v28 - 1);
  }
  if (!v50)
    goto LABEL_91;
LABEL_74:
  v52 = *(_DWORD *)(v50 - 8);
  v53 = *((_DWORD *)v102 + 4);
  if (v53 < 0x100)
  {
    v55 = WTF::StringImpl::hashSlowCase(v102);
    v54 = v49;
  }
  else
  {
    v54 = v49;
    v55 = v53 >> 8;
  }
  for (k = 0; ; v55 = k + v58)
  {
    v58 = v55 & v52;
    v59 = *(WTF **)(v50 + 16 * v58);
    if (v59 != (WTF *)-1)
    {
      if (!v59)
      {
        v61 = *(_QWORD *)(v54 + 160);
        if (!v61)
          goto LABEL_91;
        v62 = *(unsigned int *)(v61 - 4);
        v60 = v61 + 16 * v62;
        goto LABEL_87;
      }
      if ((WTF::equal(v59, v102, a3) & 1) != 0)
        break;
    }
    ++k;
  }
  v60 = v50 + 16 * v58;
  v61 = *(_QWORD *)(v54 + 160);
  if (!v61)
    goto LABEL_88;
  v62 = *(unsigned int *)(v61 - 4);
LABEL_87:
  if (v60 == v61 + 16 * v62)
    goto LABEL_91;
LABEL_88:
  if (*(_BYTE *)(v60 + 10))
  {
    if (!(_DWORD)v28)
    {
      v56 = 0;
      v22 = CFSTR("maxFragmentShaderInputComponents is less than zero due to sample mask");
      goto LABEL_166;
    }
    v28 = (v28 - 1);
  }
LABEL_91:
  if (!v27)
    goto LABEL_144;
  v101 = 2;
  v63 = *v27;
  if (!*v27)
  {
    v66 = 0;
    LODWORD(v64) = 0;
LABEL_101:
    v65 = &v63[6 * v64];
    goto LABEL_102;
  }
  v64 = *(v63 - 1);
  v65 = &v63[6 * v64];
  if (!*(v63 - 3))
  {
    v66 = &v63[6 * v64];
    goto LABEL_101;
  }
  v66 = *v27;
  if ((_DWORD)v64)
  {
    v67 = 24 * v64;
    v66 = *v27;
    while (*v66 >= 0xFFFFFFFE)
    {
      v66 += 6;
      v67 -= 24;
      if (!v67)
      {
        v66 = v65;
        break;
      }
    }
  }
LABEL_102:
  if (v63)
  {
    v68 = &v63[6 * *(v63 - 1)];
    if (v68 == v66)
      goto LABEL_144;
    goto LABEL_106;
  }
  v68 = 0;
  if (!v66)
  {
LABEL_144:
    if (!v26)
      goto LABEL_165;
    v89 = *v26;
    if (*v26)
    {
      v90 = *(v89 - 1);
      v91 = &v89[4 * v90];
      if (*(v89 - 3))
      {
        v92 = *v26;
        if ((_DWORD)v90)
        {
          v93 = 16 * v90;
          v92 = *v26;
          while (*v92 >= 0xFFFFFFFE)
          {
            v92 += 4;
            v93 -= 16;
            if (!v93)
            {
              v92 = v91;
              break;
            }
          }
        }
      }
      else
      {
        v92 = &v89[4 * v90];
        v91 = v92;
      }
    }
    else
    {
      v92 = 0;
      v91 = 0;
    }
    if (v89)
      v89 += 4 * *(v89 - 1);
    if (v89 == v92)
    {
LABEL_165:
      v22 = CFSTR("location >= maxInterStageShaderVariables");
      v56 = 1;
    }
    else
    {
      v22 = CFSTR("location >= maxInterStageShaderVariables");
      do
      {
        v56 = *v92 < v10;
        if (*v92 >= v10)
          break;
        v94 = v92 + 4;
        v92 = v91;
        if (v94 != v91)
        {
          v92 = v94;
          while (*v92 >= 0xFFFFFFFE)
          {
            v92 += 4;
            if (v92 == v91)
            {
              v92 = v91;
              break;
            }
          }
        }
      }
      while (v92 != v89);
    }
    goto LABEL_166;
  }
LABEL_106:
  v69 = *a4;
  if (!*a4)
    goto LABEL_138;
  v100 = v28;
  LODWORD(v70) = 0;
  v71 = *(_DWORD *)(v69 - 8);
  v98 = (int *)(v69 + 24 * *(unsigned int *)(v69 - 4));
  v22 = CFSTR("interpolation attributes do not match");
  while (1)
  {
    v72 = *v66;
    v73 = 9 * ((v72 + ~(v72 << 15)) ^ ((v72 + ~(v72 << 15)) >> 10));
    v74 = (v73 ^ (v73 >> 6)) + ~((v73 ^ (v73 >> 6)) << 11);
    v75 = (v74 ^ HIWORD(v74)) & v71;
    v76 = (int *)(v69 + 24 * v75);
    v77 = *v76;
    if (*v76 != *v66)
      break;
LABEL_113:
    if (v76 == v98)
      goto LABEL_138;
    v79 = (WebGPU *)*((_QWORD *)v76 + 1);
    if (v79 != *((WebGPU **)v66 + 1))
      goto LABEL_138;
    v80 = WebGPU::componentsForDataType(v79, a2);
    if (*((_BYTE *)v66 + 18))
    {
      if (*((_BYTE *)v76 + 18))
      {
        v81 = (__int16 *)(v76 + 4);
        v82 = *((_WORD *)v66 + 8);
        v83 = HIBYTE(*((unsigned __int16 *)v66 + 8));
      }
      else
      {
        if (*((_BYTE *)v66 + 16) != 2 || *((_BYTE *)v66 + 17))
          goto LABEL_143;
        v82 = *((_WORD *)v66 + 8);
        v83 = HIBYTE(*((unsigned __int16 *)v66 + 8));
        v81 = &v101;
      }
LABEL_128:
      v86 = (unsigned __int16)*v81;
      if (v82 != v86 || v83 != v86 >> 8)
        goto LABEL_143;
      goto LABEL_133;
    }
    if (*((_BYTE *)v76 + 18))
    {
      v84 = *((unsigned __int8 *)v76 + 16);
      v81 = (__int16 *)(v76 + 4);
      if (v84 != 2 || *((_BYTE *)v81 + 1) != 0)
        goto LABEL_143;
      v83 = 0;
      v82 = 2;
      goto LABEL_128;
    }
LABEL_133:
    v88 = v66 + 6;
    v66 = v65;
    if (v88 != v65)
    {
      v66 = v88;
      while (*v66 >= 0xFFFFFFFE)
      {
        v66 += 6;
        if (v66 == v65)
        {
          v66 = v65;
          break;
        }
      }
    }
    v70 = (v80 + v70);
    if (v66 == v68)
    {
      if (v70 <= v100)
        goto LABEL_144;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fragmentScalarComponents(%u) > maxFragmentShaderInputComponents(%u)"), v70, v100);
      v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_143:
      v56 = 0;
      goto LABEL_166;
    }
  }
  v78 = 1;
  while (v77 != -1)
  {
    v75 = (v75 + v78) & v71;
    v76 = (int *)(v69 + 24 * v75);
    v77 = *v76;
    ++v78;
    if (*v76 == v72)
      goto LABEL_113;
  }
LABEL_138:
  v22 = CFSTR("data type between fragment inputs and vertex outputs do not match");
  v56 = 0;
LABEL_166:
  v95 = v102;
  v102 = 0;
  if (!v95)
  {
LABEL_169:
    if (!v56)
      return v22;
    goto LABEL_170;
  }
  if (*(_DWORD *)v95 != 2)
  {
    *(_DWORD *)v95 -= 2;
    goto LABEL_169;
  }
  WTF::StringImpl::destroy();
  if (v56)
LABEL_170:
    v22 = 0;
  return v22;
}

void sub_182474FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a16)
  {
    if (*a16 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebGPU::createVertexDescriptor(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t *a4, const __CFString **a5)
{
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  int *v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v60;
  int v61;
  _QWORD *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  void *v88;
  int v89;
  int v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  unsigned int *v106;
  const __CFString *v107;
  void *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  const char *v123;
  unsigned int **v125;
  int v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v131;
  uint64_t *v132;
  id v134;
  uint64_t v136;

  v7 = objc_opt_new();
  v136 = 0;
  v9 = *(_QWORD *)(a1 + 40);
  v134 = (id)v7;
  if (!v9)
  {
    v131 = 0;
LABEL_135:
    v91 = *a3;
    if (*a3)
    {
      v92 = *(v91 - 1);
      v93 = &v91[2 * v92];
      if (!*(v91 - 3))
      {
        v94 = &v91[2 * v92];
        v93 = v94;
        if (v91)
        {
LABEL_145:
          v96 = &v91[2 * *(v91 - 1)];
          if (v96 == v94)
            goto LABEL_165;
LABEL_151:
          while (1)
          {
            v97 = *v94;
            v98 = v94[1];
            if (!v136)
              break;
            v99 = *(_DWORD *)(v136 - 8);
            v100 = 9 * ((v97 + ~((_DWORD)v97 << 15)) ^ ((v97 + ~((_DWORD)v97 << 15)) >> 10));
            v101 = (v100 ^ (v100 >> 6)) + ~((v100 ^ (v100 >> 6)) << 11);
            v102 = v99 & (v101 ^ HIWORD(v101));
            v103 = *(_DWORD *)(v136 + 8 * v102);
            if (v103 != (_DWORD)v97)
            {
              v104 = 1;
              while (v103 != -1)
              {
                v102 = ((_DWORD)v102 + v104) & v99;
                v103 = *(_DWORD *)(v136 + 8 * v102);
                ++v104;
                if (v103 == (_DWORD)v97)
                  goto LABEL_158;
              }
              v102 = *(unsigned int *)(v136 - 4);
            }
LABEL_158:
            if (v102 == *(_DWORD *)(v136 - 4))
              break;
            v105 = WebGPU::formatType(*(unsigned int *)(v136 + 8 * v102 + 4));
            if (v105 != WebGPU::formatType(v98))
            {
              v97 = *v94;
              break;
            }
            v106 = v94 + 2;
            v94 = v93;
            if (v106 != v93)
            {
              v94 = v106;
              while (*v94 >= 0xFFFFFFFE)
              {
                v94 += 2;
                if (v94 == v93)
                {
                  v94 = v93;
                  break;
                }
              }
            }
            if (v94 == v96)
              goto LABEL_165;
          }
          v111 = WebGPU::vertexFormatSize(v98);
          v112 = *a3;
          v10 = v134;
          if (*a3)
          {
            v113 = *(v112 - 2);
            v114 = 9 * ((v97 + ~((_DWORD)v97 << 15)) ^ ((v97 + ~((_DWORD)v97 << 15)) >> 10));
            v115 = (v114 ^ (v114 >> 6)) + ~((v114 ^ (v114 >> 6)) << 11);
            v116 = (v115 ^ HIWORD(v115)) & v113;
            v117 = v112[2 * v116];
            if (v117 == (_DWORD)v97)
            {
LABEL_177:
              if (v116 != *(v112 - 1))
              {
                v119 = v112[2 * v116 + 1];
                goto LABEL_187;
              }
            }
            else
            {
              v118 = 1;
              while (v117 != -1)
              {
                v116 = ((_DWORD)v116 + v118) & v113;
                v117 = v112[2 * v116];
                ++v118;
                if (v117 == (_DWORD)v97)
                  goto LABEL_177;
              }
            }
          }
          v119 = 0;
LABEL_187:
          v122 = v94[1];
          v123 = "UChar2";
          switch(v122)
          {
            case 0u:
              goto LABEL_192;
            case 1u:
              break;
            case 2u:
              v123 = "UChar4";
              break;
            case 3u:
              v123 = "Char2";
              break;
            case 4u:
              v123 = "Char4";
              break;
            case 5u:
              v123 = "UChar2Normalized";
              break;
            case 6u:
              v123 = "UChar4Normalized";
              break;
            case 7u:
              v123 = "Char2Normalized";
              break;
            case 8u:
              v123 = "Char4Normalized";
              break;
            case 9u:
              v123 = "UShort2";
              break;
            case 0xAu:
              v123 = "UShort4";
              break;
            case 0xBu:
              v123 = "Short2";
              break;
            case 0xCu:
              v123 = "Short4";
              break;
            case 0xDu:
              v123 = "UShort2Normalized";
              break;
            case 0xEu:
              v123 = "UShort4Normalized";
              break;
            case 0xFu:
              v123 = "Short2Normalized";
              break;
            case 0x10u:
              v123 = "Short4Normalized";
              break;
            case 0x11u:
              v123 = "Half2";
              break;
            case 0x12u:
              v123 = "Half4";
              break;
            case 0x13u:
              v123 = "Float";
              break;
            case 0x14u:
              v123 = "Float2";
              break;
            case 0x15u:
              v123 = "Float3";
              break;
            case 0x16u:
              v123 = "Float4";
              break;
            case 0x17u:
              v123 = "UInt";
              break;
            case 0x18u:
              v123 = "UInt2";
              break;
            case 0x19u:
              v123 = "UInt3";
              break;
            case 0x1Au:
              v123 = "UInt4";
              break;
            case 0x1Bu:
              v123 = "Int";
              break;
            case 0x1Cu:
              v123 = "Int2";
              break;
            case 0x1Du:
              v123 = "Int3";
              break;
            case 0x1Eu:
              v123 = "Int4";
              break;
            case 0x1Fu:
              v123 = "UInt1010102Normalized";
              break;
            default:
              if (v122 == 0x7FFFFFFF)
LABEL_192:
                v123 = "none";
              break;
          }
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("!matchesFormat(attribute(%d), format(%s), size(%zu), otherFormat(%d)"), v97, v123, v111, v119);
          v110 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_224;
        }
LABEL_148:
        v96 = 0;
        if (v94)
          goto LABEL_151;
LABEL_165:
        if (v131 > *(_DWORD *)(a2 + 96))
        {
          v107 = CFSTR("totalAttributeCount > limits.maxVertexAttributes");
          goto LABEL_180;
        }
        v108 = v134;
        v109 = v136;
        if (v136)
          goto LABEL_226;
        return v108;
      }
      v94 = *a3;
      if ((_DWORD)v92)
      {
        v95 = 8 * v92;
        v94 = *a3;
        while (*v94 >= 0xFFFFFFFE)
        {
          v94 += 2;
          v95 -= 8;
          if (!v95)
          {
            v94 = v93;
            if (v91)
              goto LABEL_145;
            goto LABEL_148;
          }
        }
      }
    }
    else
    {
      v94 = 0;
      v93 = 0;
    }
    if (v91)
      goto LABEL_145;
    goto LABEL_148;
  }
  v10 = (void *)v7;
  v131 = 0;
  v11 = 0;
  v125 = a3;
  v128 = a1;
  while (1)
  {
    v12 = *(_QWORD *)(a1 + 48);
    v13 = (unint64_t *)(v12 + 32 * v11);
    v14 = *v13;
    if (*v13 == 0xFFFFFFFF)
      goto LABEL_4;
    if ((v14 & 3) != 0 || v14 > *(unsigned int *)(a2 + 100))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("buffer.arrayStride(%llu) > limits.maxVertexBufferArrayStride(%u) || (buffer.arrayStride %llu)"), v14, *(unsigned int *)(a2 + 100), v14);
      v110 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_224:
      v107 = v110;
      goto LABEL_225;
    }
    v132 = (uint64_t *)(v12 + 32 * v11 + 16);
    v129 = *v132;
    if (*v132)
      break;
    a1 = v128;
LABEL_4:
    if (++v11 >= v9)
      goto LABEL_135;
  }
  if (v14 <= 4)
    v16 = 4;
  else
    v16 = *v13;
  v17 = *a4;
  if (*a4)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = 9 * ((~((_DWORD)v11 << 15) + v11) ^ ((~((_DWORD)v11 << 15) + v11) >> 10));
    v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
    v21 = v18 & (v20 ^ HIWORD(v20));
    v22 = *(_DWORD *)(v17 + 32 * v21);
    if (v22 == (_DWORD)v11)
    {
LABEL_193:
      __break(0xC471u);
      JUMPOUT(0x182475BBCLL);
    }
    v23 = 1;
    while (v22 != -1)
    {
      v21 = (v21 + v23) & v18;
      v22 = *(_DWORD *)(v17 + 32 * v21);
      ++v23;
      if (v22 == (_DWORD)v11)
        goto LABEL_193;
    }
  }
  objc_msgSend(v10, "layouts");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "objectAtIndexedSubscript:", v11);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setStride:", v16);

  v26 = v12 + 32 * v11;
  v29 = *(_DWORD *)(v26 + 8);
  v28 = (int *)(v26 + 8);
  v27 = v29;
  v30 = 1;
  if (v29 == 1)
    v30 = 2;
  if (*v13)
    v31 = v27 == 2;
  else
    v31 = 1;
  if (v31)
    v32 = 0;
  else
    v32 = v30;
  objc_msgSend(v10, "layouts");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "objectAtIndexedSubscript:", v11);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "setStepFunction:", v32);

  objc_msgSend(v10, "layouts");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "objectAtIndexedSubscript:", v11);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v36, "stepFunction");

  if (v37)
  {
    v126 = ~((_DWORD)v11 << 15);
    if (*v132)
      goto LABEL_30;
LABEL_104:
    v39 = 0;
LABEL_105:
    v74 = *v13;
    v75 = *v28;
    v76 = *a4;
    a3 = v125;
    a1 = v128;
    if (*a4
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPipeline::BufferData,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPipeline::BufferData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, 8u), (v76 = *a4) != 0))
    {
      v77 = *(_DWORD *)(v76 - 8);
    }
    else
    {
      v77 = 0;
    }
    v78 = 9 * ((v126 + v11) ^ ((v126 + v11) >> 10));
    v79 = v77 & (((v78 ^ (v78 >> 6)) + ~((v78 ^ (v78 >> 6)) << 11)) ^ (((v78 ^ (v78 >> 6)) + ~((v78 ^ (v78 >> 6)) << 11)) >> 16));
    v80 = v76 + 32 * v79;
    v81 = *(_DWORD *)v80;
    v10 = v134;
    if (*(_DWORD *)v80 != -1)
    {
      v82 = 0;
      v83 = 1;
      while (v81 != (_DWORD)v11)
      {
        if (v81 == -2)
          v82 = v80;
        v79 = ((_DWORD)v79 + v83) & v77;
        v80 = v76 + 32 * v79;
        v81 = *(_DWORD *)v80;
        ++v83;
        if (*(_DWORD *)v80 == -1)
        {
          if (v82)
          {
            *(_DWORD *)v82 = -1;
            *(_QWORD *)(v82 + 16) = 0;
            *(_QWORD *)(v82 + 24) = 0;
            *(_QWORD *)(v82 + 8) = 0;
            --*(_DWORD *)(*a4 - 16);
            v80 = v82;
          }
          goto LABEL_116;
        }
      }
      goto LABEL_127;
    }
LABEL_116:
    *(_DWORD *)v80 = v11;
    *(_QWORD *)(v80 + 8) = v74;
    *(_QWORD *)(v80 + 16) = v39;
    *(_DWORD *)(v80 + 24) = v75;
    if (*a4)
    {
      ++*(_DWORD *)(*a4 - 12);
      v84 = *a4;
      if (*a4)
        goto LABEL_118;
LABEL_123:
      v85 = *(unsigned int *)(v84 - 16);
      v86 = *(unsigned int *)(v84 - 4);
      if (v86 > 0x400)
        goto LABEL_124;
LABEL_119:
      if (3 * v86 <= 4 * v85)
      {
        if (!(_DWORD)v86)
        {
          v87 = 8;
          goto LABEL_126;
        }
LABEL_125:
        v87 = (_DWORD)v86 << (6 * *(_DWORD *)(v84 - 12) >= (2 * v86));
LABEL_126:
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPipeline::BufferData,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPipeline::BufferData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, v87);
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v84 = *a4;
      if (!*a4)
        goto LABEL_123;
LABEL_118:
      v85 = (*(_DWORD *)(v84 - 16) + *(_DWORD *)(v84 - 12));
      v86 = *(unsigned int *)(v84 - 4);
      if (v86 <= 0x400)
        goto LABEL_119;
LABEL_124:
      if (v86 <= 2 * v85)
        goto LABEL_125;
    }
LABEL_127:
    v131 += v129;
    v9 = *(_QWORD *)(v128 + 40);
    goto LABEL_4;
  }
  objc_msgSend(v10, "layouts");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v72, "objectAtIndexedSubscript:", v11);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v73, "setStepRate:", 0);

  v126 = ~((_DWORD)v11 << 15);
  if (!*v132)
    goto LABEL_104;
LABEL_30:
  v38 = 0;
  v39 = 0;
  v40 = (_QWORD *)(v12 + 32 * v11 + 24);
  v127 = v40;
  while (2)
  {
    v41 = *v40;
    v42 = *v40 + 24 * v38;
    v43 = WebGPU::vertexFormatSize(*(_DWORD *)v42);
    v44 = *(_QWORD *)(v42 + 8);
    v45 = v44 + v43;
    if (v39 <= v44 + v43)
      v39 = v44 + v43;
    if (*v13)
    {
      if (v45 > *v13)
        break;
    }
    else if (v45 > *(unsigned int *)(a2 + 100))
    {
      v10 = v134;
      v107 = CFSTR("attribute.offset + formatSize > limits.maxVertexBufferArrayStride");
      goto LABEL_225;
    }
    v46 = 4;
    if (v43 < 4)
      v46 = v43;
    if (!(v44 % v46))
    {
      v47 = *(unsigned int *)(v41 + 24 * v38 + 16);
      v48 = v136;
      if (v47 >= *(_DWORD *)(a2 + 96))
      {
        v88 = (void *)MEMORY[0x1E0CB3940];
        if (v136)
        {
          v50 = *(_DWORD *)(v136 - 8);
          v120 = 9 * ((v47 + ~((_DWORD)v47 << 15)) ^ ((v47 + ~((_DWORD)v47 << 15)) >> 10));
          v121 = (v120 ^ (v120 >> 6)) + ~((v120 ^ (v120 >> 6)) << 11);
          v53 = v50 & (v121 ^ HIWORD(v121));
          v10 = v134;
          v89 = *(_DWORD *)(v136 + 8 * v53);
          if (v89 != (_DWORD)v47)
            goto LABEL_130;
          goto LABEL_133;
        }
        v10 = v134;
LABEL_170:
        objc_msgSend(v88, "stringWithFormat:", CFSTR("shaderLocation(%u) >= limits.maxVertexAttributes(%u) || shaderLocations.contains(shaderLocation) %d"), v47, *(unsigned int *)(a2 + 96), v48);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_224;
      }
      v49 = ~((_DWORD)v47 << 15);
      if (v136)
      {
        v50 = *(_DWORD *)(v136 - 8);
        v51 = 9 * ((v47 + v49) ^ ((v47 + v49) >> 10));
        v52 = (v51 ^ (v51 >> 6)) + ~((v51 ^ (v51 >> 6)) << 11);
        v53 = v50 & (v52 ^ HIWORD(v52));
        v54 = *(_DWORD *)(v136 + 8 * v53);
        if (v54 == (_DWORD)v47)
        {
LABEL_129:
          v88 = (void *)MEMORY[0x1E0CB3940];
          v10 = v134;
          v89 = *(_DWORD *)(v136 + 8 * v53);
          if (v89 != (_DWORD)v47)
          {
LABEL_130:
            v90 = 1;
            while (v89 != -1)
            {
              LODWORD(v53) = (v53 + v90) & v50;
              v89 = *(_DWORD *)(v136 + 8 * v53);
              ++v90;
              if (v89 == (_DWORD)v47)
                goto LABEL_133;
            }
            v48 = 0;
            goto LABEL_170;
          }
LABEL_133:
          v48 = 1;
          goto LABEL_170;
        }
        v55 = 1;
        v56 = v53;
        while (v54 != -1)
        {
          v56 = (v56 + v55) & v50;
          v54 = *(_DWORD *)(v136 + 8 * v56);
          ++v55;
          if (v54 == (_DWORD)v47)
            goto LABEL_129;
        }
      }
      else
      {
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v136, 8u, 0);
        v48 = v136;
        if (v136)
          v50 = *(_DWORD *)(v136 - 8);
        else
          v50 = 0;
      }
      v57 = 9 * ((v47 + v49) ^ ((v47 + v49) >> 10));
      v58 = (v57 ^ (v57 >> 6)) + ~((v57 ^ (v57 >> 6)) << 11);
      v59 = v50 & (v58 ^ HIWORD(v58));
      v60 = (_DWORD *)(v48 + 8 * v59);
      v61 = *v60;
      if (*v60 != -1)
      {
        v62 = 0;
        v63 = 1;
        while (v61 != (_DWORD)v47)
        {
          if (v61 == -2)
            v62 = v60;
          v59 = (v59 + v63) & v50;
          v60 = (_DWORD *)(v48 + 8 * v59);
          v61 = *v60;
          ++v63;
          if (*v60 == -1)
          {
            if (v62)
            {
              *v62 = 0xFFFFFFFFLL;
              --*(_DWORD *)(v136 - 16);
              v60 = v62;
            }
            goto LABEL_58;
          }
        }
LABEL_69:
        objc_msgSend(v134, "attributes");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "objectAtIndexedSubscript:", v47);
        v70 = (void *)objc_claimAutoreleasedReturnValue();

        v71 = 1;
        v40 = v127;
        switch(*(_DWORD *)v42)
        {
          case 0:
          case 0x13:
            goto LABEL_72;
          case 1:
            break;
          case 2:
            v71 = 3;
            break;
          case 3:
            v71 = 4;
            break;
          case 4:
            v71 = 6;
            break;
          case 5:
            v71 = 7;
            break;
          case 6:
            v71 = 9;
            break;
          case 7:
            v71 = 10;
            break;
          case 8:
            v71 = 12;
            break;
          case 9:
            v71 = 13;
            break;
          case 0xA:
            v71 = 15;
            break;
          case 0xB:
            v71 = 16;
            break;
          case 0xC:
            v71 = 18;
            break;
          case 0xD:
            v71 = 19;
            break;
          case 0xE:
            v71 = 21;
            break;
          case 0xF:
            v71 = 22;
            break;
          case 0x10:
            v71 = 24;
            break;
          case 0x11:
            v71 = 25;
            break;
          case 0x12:
            v71 = 27;
            break;
          case 0x14:
            v71 = 29;
            break;
          case 0x15:
            v71 = 30;
            break;
          case 0x16:
            v71 = 31;
            break;
          case 0x17:
            v71 = 36;
            break;
          case 0x18:
            v71 = 37;
            break;
          case 0x19:
            v71 = 38;
            break;
          case 0x1A:
            v71 = 39;
            break;
          case 0x1B:
            v71 = 32;
            break;
          case 0x1C:
            v71 = 33;
            break;
          case 0x1D:
            v71 = 34;
            break;
          case 0x1E:
            v71 = 35;
            break;
          case 0x1F:
            v71 = 41;
            break;
          default:
            v40 = v127;
            if (*(_DWORD *)v42 == 0x7FFFFFFF)
LABEL_72:
              v71 = 28;
            break;
        }
        objc_msgSend(v70, "setFormat:", v71);
        objc_msgSend(v70, "setBufferIndex:", v11);
        objc_msgSend(v70, "setOffset:", *(_QWORD *)(v42 + 8));

        if (++v38 >= (unint64_t)*v132)
          goto LABEL_105;
        continue;
      }
LABEL_58:
      v64 = *(_DWORD *)v42;
      *v60 = v47;
      v60[1] = v64;
      if (v136)
      {
        ++*(_DWORD *)(v136 - 12);
        v65 = v136;
        if (v136)
        {
          v66 = (*(_DWORD *)(v136 - 16) + *(_DWORD *)(v136 - 12));
          v67 = *(unsigned int *)(v136 - 4);
          if (v67 <= 0x400)
            goto LABEL_61;
LABEL_66:
          if (v67 > 2 * v66)
            goto LABEL_69;
          goto LABEL_67;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v65 = 0;
      }
      v66 = *(unsigned int *)(v65 - 16);
      v67 = *(unsigned int *)(v65 - 4);
      if (v67 > 0x400)
        goto LABEL_66;
LABEL_61:
      if (3 * v67 > 4 * v66)
        goto LABEL_69;
      if ((_DWORD)v67)
LABEL_67:
        v68 = (_DWORD)v67 << (6 * *(_DWORD *)(v65 - 12) >= (2 * v67));
      else
        v68 = 8;
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v136, v68, v60);
      goto LABEL_69;
    }
    break;
  }
  v107 = CFSTR("attribute.offset + formatSize > buffer.arrayStride");
LABEL_180:
  v10 = v134;
LABEL_225:
  *a5 = v107;

  v108 = 0;
  v109 = v136;
  if (v136)
LABEL_226:
    WTF::fastFree((WTF *)(v109 - 16), v8);
  return v108;
}

void sub_182475D80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  uint64_t v22;
  uint64_t v24;

  v24 = *(_QWORD *)(v22 - 104);
  if (v24)
    WTF::fastFree((WTF *)(v24 - 16), a2);

  _Unwind_Resume(a1);
}

void WebGPU::RenderPipeline::create(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, void *a12, uint64_t *a13, int a14, void *a15, int a16, uint64_t a17, uint64_t *a18, int **a19, uint64_t a20)
{
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  unsigned __int8 *v28;
  int v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  __int128 *v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  int **v61;
  int *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  int *v73;
  int *v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  _DWORD *v88;
  int v89;
  id v90;
  id v91;
  id v92;
  uint64_t v98;
  void *v100;
  void *v102;
  id v103;
  uint64_t v104;

  v23 = a2;
  v91 = a12;
  v92 = v23;
  v90 = a15;
  v24 = WTF::fastMalloc((WTF *)0x1C8);
  v25 = v23;
  v26 = v91;
  v27 = v90;
  *(_DWORD *)v24 = 1;
  *(_QWORD *)(v24 + 8) = 0;
  v103 = v25;
  *(_QWORD *)(v24 + 16) = v103;
  v28 = *(unsigned __int8 **)a20;
  if (__ldaxr(*(unsigned __int8 **)a20))
  {
    __clrex();
  }
  else if (!__stxr(1u, v28))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v28);
LABEL_5:
  ++*((_QWORD *)v28 + 1);
  v30 = __ldxr(v28);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v28))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
  *(_QWORD *)(v24 + 24) = a20;
  *(_QWORD *)(v24 + 32) = a3;
  *(_QWORD *)(v24 + 40) = a4;
  *(_QWORD *)(v24 + 48) = a5;
  *(_QWORD *)(v24 + 56) = a6;
  *(_QWORD *)(v24 + 64) = a7;
  *(_QWORD *)(v24 + 72) = a8;
  *(float *)(v24 + 80) = a9;
  *(float *)(v24 + 84) = a10;
  *(float *)(v24 + 88) = a11;
  *(_DWORD *)(v24 + 92) = a14;
  v31 = v27;
  *(_QWORD *)(v24 + 96) = v31;
  *(_DWORD *)(v24 + 104) = a16;
  v32 = v26;
  *(_QWORD *)(v24 + 112) = v32;
  v102 = v32;
  if (v32)
  {
    v33 = v32;
    v34 = *(id *)(a20 + 8);
    *(_QWORD *)(v24 + 120) = objc_msgSend(v34, "newDepthStencilStateWithDescriptor:", v33, v24 + 8, v27, v26, v90, v91, v92);

  }
  else
  {
    *(_QWORD *)(v24 + 120) = 0;
  }
  *(_QWORD *)(v24 + 128) = 0;
  v35 = *a18;
  *a18 = 0;
  *(_QWORD *)(v24 + 128) = v35;
  v36 = *a13;
  *a13 = 0;
  *(_QWORD *)(v24 + 136) = v36;
  *(_OWORD *)(v24 + 144) = *(_OWORD *)a17;
  v37 = *(_OWORD *)(a17 + 16);
  v38 = *(_OWORD *)(a17 + 32);
  v39 = *(_OWORD *)(a17 + 48);
  *(_OWORD *)(v24 + 208) = *(_OWORD *)(a17 + 64);
  *(_OWORD *)(v24 + 192) = v39;
  *(_OWORD *)(v24 + 176) = v38;
  *(_OWORD *)(v24 + 160) = v37;
  v40 = *(_OWORD *)(a17 + 80);
  v41 = *(_OWORD *)(a17 + 96);
  v42 = *(_OWORD *)(a17 + 112);
  *(_OWORD *)(v24 + 272) = *(_OWORD *)(a17 + 128);
  *(_OWORD *)(v24 + 256) = v42;
  *(_OWORD *)(v24 + 240) = v41;
  *(_OWORD *)(v24 + 224) = v40;
  v43 = (_OWORD *)(v24 + 288);
  v44 = *(_OWORD **)(a17 + 104);
  if (v44)
  {
    *v43 = *v44;
    v45 = v44[1];
    v46 = v44[2];
    v47 = v44[4];
    *(_OWORD *)(v24 + 336) = v44[3];
    *(_OWORD *)(v24 + 352) = v47;
    *(_OWORD *)(v24 + 304) = v45;
    *(_OWORD *)(v24 + 320) = v46;
    v48 = v24 + 368;
    v49 = *(__int128 **)(a17 + 136);
    if (v49)
      goto LABEL_15;
LABEL_18:
    *(_QWORD *)(v48 + 48) = 0;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_OWORD *)v48 = 0u;
    v98 = v48;
    v100 = v31;
    v53 = (_QWORD *)(v24 + 424);
    v54 = *(_QWORD *)(a17 + 136);
    if (!v54)
      goto LABEL_25;
    goto LABEL_19;
  }
  *(_OWORD *)(v24 + 336) = 0u;
  *(_OWORD *)(v24 + 352) = 0u;
  *(_OWORD *)(v24 + 304) = 0u;
  *(_OWORD *)(v24 + 320) = 0u;
  *v43 = 0u;
  v48 = v24 + 368;
  v49 = *(__int128 **)(a17 + 136);
  if (!v49)
    goto LABEL_18;
LABEL_15:
  v50 = *v49;
  v51 = v49[1];
  v52 = v49[2];
  *(_QWORD *)(v48 + 48) = *((_QWORD *)v49 + 6);
  *(_OWORD *)(v48 + 16) = v51;
  *(_OWORD *)(v48 + 32) = v52;
  *(_OWORD *)v48 = v50;
  v98 = v48;
  v100 = v31;
  v53 = (_QWORD *)(v24 + 424);
  v54 = *(_QWORD *)(a17 + 136);
  if (!v54)
  {
LABEL_25:
    *v53 = 0;
    v53[1] = 0;
    *(_QWORD *)(v24 + 440) = 0;
    v61 = a19;
    v62 = *a19;
    if (!*a19)
      goto LABEL_69;
    goto LABEL_26;
  }
LABEL_19:
  v55 = *(_QWORD *)(v54 + 40);
  if (!v55)
    goto LABEL_25;
  v56 = *(__int128 **)(v54 + 48);
  *v53 = 0;
  v53[1] = 0;
  *(_DWORD *)(v24 + 436) = v55;
  if (!(v55 >> 27))
  {
    v57 = 32 * v55;
    v58 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v55));
    *(_DWORD *)(v24 + 432) = v55;
    *(_QWORD *)(v24 + 424) = v58;
    do
    {
      v59 = *v56;
      v60 = v56[1];
      v56 += 2;
      *v58 = v59;
      v58[1] = v60;
      v58 += 2;
      v57 -= 32;
    }
    while (v57);
    *(_QWORD *)(v24 + 440) = 0;
    v61 = a19;
    v62 = *a19;
    if (!*a19)
      goto LABEL_69;
LABEL_26:
    v63 = *(v62 - 3);
    if (!(_DWORD)v63)
      goto LABEL_69;
    v64 = (v63 - 1) | ((v63 - 1) >> 1) | ((((_DWORD)v63 - 1) | ((v63 - 1) >> 1)) >> 2);
    v65 = v64 | (v64 >> 4) | ((v64 | (v64 >> 4)) >> 8);
    v66 = (v65 | HIWORD(v65)) + 1;
    if (v66 > 0x400)
    {
      if (v66 > 2 * v63)
        goto LABEL_34;
    }
    else if (3 * v66 > 4 * v63)
    {
LABEL_32:
      if ((double)v66 * 0.604166667 > (double)v63)
      {
LABEL_36:
        if (v66 <= 8)
          v67 = 8;
        else
          v67 = v66;
        v68 = WTF::fastMalloc((WTF *)(16 * v67 + 16));
        v69 = (_QWORD *)(v68 + 24);
        v70 = v67;
        do
        {
          *((_DWORD *)v69 - 2) = -1;
          *v69 = 0;
          v69 += 2;
          --v70;
        }
        while (v70);
        *(_QWORD *)(v24 + 440) = v68 + 16;
        *(_DWORD *)(v68 + 12) = v67;
        *(_DWORD *)(*(_QWORD *)(v24 + 440) - 8) = v67 - 1;
        *(_DWORD *)(*(_QWORD *)(v24 + 440) - 12) = v63;
        *(_DWORD *)(*(_QWORD *)(v24 + 440) - 16) = 0;
        v71 = *v61;
        if (*v61)
        {
          v72 = *(v71 - 1);
          v73 = &v71[4 * v72];
          if (!*(v71 - 3))
          {
            v74 = &v71[4 * v72];
            v73 = v74;
            if (v71)
            {
LABEL_51:
              v76 = &v71[4 * *(v71 - 1)];
              if (v76 == v74)
                goto LABEL_69;
              goto LABEL_57;
            }
LABEL_54:
            v76 = 0;
            if (!v74)
              goto LABEL_69;
            do
            {
LABEL_57:
              v77 = *(_QWORD *)(v24 + 440);
              if (v77)
                v78 = *(_DWORD *)(v77 - 8);
              else
                v78 = 0;
              v79 = 0;
              v80 = *v74;
              v81 = 9 * ((v80 + ~(v80 << 15)) ^ ((v80 + ~(v80 << 15)) >> 10));
              v82 = ((v81 ^ (v81 >> 6)) + ~((v81 ^ (v81 >> 6)) << 11)) ^ (((v81 ^ (v81 >> 6))
                                                                         + ~((v81 ^ (v81 >> 6)) << 11)) >> 16);
              do
              {
                v83 = v82 & v78;
                v82 = ++v79 + v83;
              }
              while (*(_DWORD *)(v77 + 16 * v83) != -1);
              *(_DWORD *)(v77 + 16 * v83) = v80;
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(&v104, (_QWORD *)v74 + 1);
              v85 = v77 + 16 * v83;
              v86 = *(_QWORD *)(v85 + 8);
              *(_QWORD *)(v85 + 8) = v104;
              v104 = v86;
              if (v86)
                WTF::fastFree((WTF *)(v86 - 16), v84);
              v87 = v74 + 4;
              v74 = v73;
              if (v87 != v73)
              {
                v74 = v87;
                while (*v74 >= 0xFFFFFFFE)
                {
                  v74 += 4;
                  if (v74 == v73)
                  {
                    v74 = v73;
                    break;
                  }
                }
              }
            }
            while (v74 != v76);
LABEL_69:
            *(_BYTE *)(v24 + 448) = 0;
            if (*(_QWORD *)(a17 + 104))
              *(_QWORD *)(v24 + 248) = v43;
            if (*(_DWORD *)(v24 + 436))
              *(_QWORD *)(v24 + 416) = *(_QWORD *)(v24 + 424);
            if (*(_QWORD *)(a17 + 136))
              *(_QWORD *)(v24 + 280) = v98;
            v88 = *(_DWORD **)(a17 + 104);
            if (!v88 || !v88[15])
              goto LABEL_86;
            v89 = *(_DWORD *)(a17 + 100);
            if (v89 != 1)
            {
              if (v88[9] || v88[8] || v88[7])
              {
LABEL_85:
                *(_BYTE *)(v24 + 448) = 1;
LABEL_86:

                *a1 = v24;
                return;
              }
              if (v89 == 2)
                goto LABEL_86;
            }
            if (!v88[13] && !v88[12] && !v88[11])
              goto LABEL_86;
            goto LABEL_85;
          }
          v74 = *v61;
          if ((_DWORD)v72)
          {
            v75 = 16 * v72;
            v74 = *v61;
            while (*v74 >= 0xFFFFFFFE)
            {
              v74 += 4;
              v75 -= 16;
              if (!v75)
              {
                v74 = v73;
                if (v71)
                  goto LABEL_51;
                goto LABEL_54;
              }
            }
          }
        }
        else
        {
          v74 = 0;
          v73 = 0;
        }
        if (v71)
          goto LABEL_51;
        goto LABEL_54;
      }
LABEL_35:
      LODWORD(v66) = 2 * v66;
      goto LABEL_36;
    }
    LODWORD(v66) = 2 * v66;
    if (v66 <= 0x400)
      goto LABEL_32;
LABEL_34:
    if ((double)v66 * 0.416666667 > (double)v63)
      goto LABEL_36;
    goto LABEL_35;
  }
  __break(0xC471u);
}

void sub_182476578(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF **a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  uint64_t v24;
  unsigned __int8 ****v25;
  WTF *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;

  v27 = *a20;
  if (*a20)
  {
    *(_QWORD *)(v24 + 424) = 0;
    *(_DWORD *)(v24 + 432) = 0;
    WTF::fastFree(v27, a2);
  }
  WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref(v25, a2);
  v29 = *(_QWORD *)(v24 + 128);
  if (v29)
    WTF::fastFree((WTF *)(v29 - 16), v28);

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v24 + 24), v30);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(a9, v31);

  WTF::fastFree((WTF *)v24, v32);
  _Unwind_Resume(a1);
}

WebGPU::RenderPipeline **std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(WebGPU::RenderPipeline **a1, void *a2)
{
  WebGPU::RenderPipeline *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WebGPU::Device::createRenderPipelineAsync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  WebGPU::Device::createRenderPipeline(a1, a2, 1, &v15);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 16);
  v6 = *(unsigned __int8 **)a1;
  if (__ldaxr(*(unsigned __int8 **)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v6);
LABEL_5:
  ++*((_QWORD *)v6 + 1);
  v8 = __ldxr(v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v6))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v9 = v15;
  v10 = v16;
  v11 = *a3;
  *a3 = 0;
  v15 = 0;
  v16 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v12 = off_1E0FD2118;
  v12[1] = a1;
  v12[2] = v9;
  v12[3] = v11;
  v12[4] = v10;
  v14 = v12;
  WebGPU::Instance::scheduleWork(v5, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

void sub_1824767B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1824767C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
    WebGPU::Device::createRenderPipelineAsync(WGPURenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0::~$_0((uint64_t)&a9);
    std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  WebGPU::Device::createRenderPipelineAsync(WGPURenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0::~$_0((uint64_t)&a9);
  std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unsigned __int8 ***WebGPU::Device::createRenderPipelineAsync(WGPURenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0::~$_0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  WebGPU::RenderPipeline *v4;
  unsigned __int8 ***v5;
  WTF *v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WebGPU::RenderPipeline **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebGPU::RenderPipeline::~RenderPipeline(v4, v2);
      WTF::fastFree(v6, v7);
      v5 = (unsigned __int8 ***)a1;
      return WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v5, v2);
    }
    --*(_DWORD *)v4;
  }
  v5 = (unsigned __int8 ***)a1;
  return WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v5, v2);
}

uint64_t std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair(uint64_t a1)
{
  void *v2;
  WebGPU::RenderPipeline *v3;
  WTF *v5;
  void *v6;

  v3 = *(WebGPU::RenderPipeline **)a1;
  *(_QWORD *)a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v3, v2);
  WTF::fastFree(v5, v6);
  return a1;
}

void WebGPU::RenderPipeline::~RenderPipeline(WebGPU::RenderPipeline *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  WTF *v6;
  unsigned __int8 ***v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;

  v3 = *((_QWORD *)this + 55);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2 && *v5)
          WTF::fastFree((WTF *)(*v5 - 16), a2);
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 53);
  if (v6)
  {
    *((_QWORD *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (unsigned __int8 ***)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (!v7)
  {
LABEL_14:
    v8 = *((_QWORD *)this + 16);
    if (!v8)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_14;
  }
  WebGPU::PipelineLayout::~PipelineLayout(v7, a2);
  WTF::fastFree(v15, v16);
  v8 = *((_QWORD *)this + 16);
  if (v8)
LABEL_15:
    WTF::fastFree((WTF *)(v8 - 16), a2);
LABEL_16:

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 3, v9);
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

BOOL WebGPU::RenderPipeline::colorDepthStencilTargetsMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  id *v18;
  id v19;
  int v20;

  if (*(_QWORD *)(a1 + 280))
  {
    v5 = *(unsigned int *)(a1 + 436);
    v6 = *(unsigned int *)(a3 + 12);
    if (v5 <= v6)
      v7 = v6;
    else
      v7 = v5;
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 8;
      do
      {
        if (v8 >= v6)
        {
          if (v8 < v5)
          {
            v11 = *(_DWORD *)(*(_QWORD *)(a1 + 424) + v9);
LABEL_7:
            if (v11)
              return 0;
          }
        }
        else
        {
          v10 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v8);
          if (v8 >= v5)
          {
            if (!v10)
              goto LABEL_8;
            if (*(_DWORD *)(v10 + 40))
              return 0;
          }
          else
          {
            v11 = *(_DWORD *)(*(_QWORD *)(a1 + 424) + v9);
            if (!v10)
              goto LABEL_7;
            if (v11 != *(_DWORD *)(v10 + 40))
              return 0;
          }
          if (*(_DWORD *)(*(_QWORD *)(v10 + 96) + 32) != *(_DWORD *)(a1 + 264))
            return 0;
        }
LABEL_8:
        ++v8;
        v9 += 32;
      }
      while (v7 != v8);
    }
  }
  else if (*(_QWORD *)(a2 + 16))
  {
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 248);
  v14 = *(_QWORD *)(a2 + 32);
  result = v14 == 0;
  if (v13)
  {
    if (v14)
    {
      v15 = *a4;
      if (!*a4 || *(_DWORD *)(v15 + 40) != *(_DWORD *)(v13 + 8))
        return 0;
      v16 = *(_QWORD *)(v15 + 96);
      v17 = *(unsigned __int8 *)(v16 + 96);
      v18 = (id *)(v16 + 8);
      if (!v17)
        v18 = (id *)(v15 + 16);
      v19 = *v18;
      if (objc_msgSend(v19, "pixelFormat") == 261)
      {
        v20 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 8);

        if (v20 == 38)
          return 0;
      }
      else
      {

      }
      if (*(_DWORD *)(*(_QWORD *)(v15 + 96) + 32) == *(_DWORD *)(a1 + 264))
        return 1;
    }
    else if (!*(_DWORD *)(v13 + 8))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_182476BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL WebGPU::RenderPipeline::validateRenderBundle(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  int v14;

  v4 = *(_DWORD *)(a2 + 44);
  if (*(_DWORD *)(a2 + 40) && (objc_msgSend(*(id *)(a1 + 112), "isDepthWriteEnabled") & 1) != 0
    || v4 && *(_BYTE *)(a1 + 448)
    || *(_DWORD *)(a2 + 36) != *(_DWORD *)(a1 + 264))
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 280);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 40);
    v7 = *(_QWORD *)(a2 + 16);
    if (v6 <= v7)
      v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      v8 = 0;
      v9 = *(unsigned int *)(a1 + 436);
      v10 = 8;
      do
      {
        if (v8 >= v7)
        {
          v11 = 0;
          if (v8 < v9)
          {
LABEL_11:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 424) + v10) != v11)
              return 0;
            goto LABEL_12;
          }
        }
        else
        {
          v11 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v8);
          if (v8 < v9)
            goto LABEL_11;
        }
        if (v11)
          return 0;
LABEL_12:
        ++v8;
        v10 += 32;
      }
      while (v6 != v8);
    }
    v13 = *(_QWORD *)(a1 + 248);
    v14 = *(_DWORD *)(a2 + 32);
    if (v13)
      return v14 == *(_DWORD *)(v13 + 8);
    else
      return v14 == 0;
  }
  else
  {
    return !*(_QWORD *)(a2 + 16) && *(_DWORD *)(a2 + 32) == 0;
  }
}

_DWORD *wgpuRenderPipelineReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::RenderPipeline *wgpuRenderPipelineRelease(WebGPU::RenderPipeline *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderPipeline::~RenderPipeline(result, a2);
    return (WebGPU::RenderPipeline *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuRenderPipelineGetBindGroupLayout(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _DWORD *result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  WebGPU::BindGroupLayout **v30;
  uint64_t v31;
  WebGPU::BindGroupLayout *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  WebGPU::BindGroupLayout **v36;
  uint64_t v37;
  WebGPU::BindGroupLayout *v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  WTF *v42;
  unsigned __int8 **v43;
  uint64_t v44;
  _DWORD *v45;

  if (a1[2])
  {
    v3 = a1[17];
    if (*(_BYTE *)(v3 + 32) && *(_DWORD *)(v3 + 28) > a2)
    {
      result = (_DWORD *)WebGPU::PipelineLayout::bindGroupLayout((WebGPU::PipelineLayout *)v3, a2);
      ++*result;
      return result;
    }
    v5 = a1[3];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *(_QWORD *)(v5 + 32);
    v8 = 32 * *(unsigned int *)(v5 + 44);
    v9 = v7 + v8;
    while (v8)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v9 -= 32;
      v8 -= 32;
      if (!v10)
      {
        v11 = v7 + v8;
        if (!*(_BYTE *)(v11 + 16))
        {
          v12 = v45;
          v45 = 0;
          *(_DWORD *)v11 = 1;
          *(_QWORD *)(v11 + 8) = v12;
          *(_BYTE *)(v11 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    v21 = *(_QWORD *)(v5 + 24);
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v21 + 16))(v21, 1, &v45);
      v22 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
LABEL_18:
    v23 = v45;
    v45 = 0;
    if (v23)
    {
      if (*v23 == 2)
      {
        WTF::StringImpl::destroy();
        v24 = a1[17];
        *(_BYTE *)(v24 + 96) = 0;
        if (!*(_BYTE *)(v24 + 32))
          goto LABEL_56;
        goto LABEL_32;
      }
      *v23 -= 2;
    }
    v24 = a1[17];
    *(_BYTE *)(v24 + 96) = 0;
    if (!*(_BYTE *)(v24 + 32))
      goto LABEL_56;
LABEL_32:
    if (*(_DWORD *)(v24 + 24))
    {
      v29 = *(unsigned int *)(v24 + 28);
      if ((_DWORD)v29)
      {
        v30 = *(WebGPU::BindGroupLayout ***)(v24 + 16);
        v31 = 8 * v29;
        do
        {
          v32 = *v30;
          *v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout(v32, v6);
              WTF::fastFree(v33, v34);
            }
            else
            {
              --*(_DWORD *)v32;
            }
          }
          ++v30;
          v31 -= 8;
        }
        while (v31);
        *(_DWORD *)(v24 + 28) = 0;
      }
      v41 = *(WTF **)(v24 + 16);
      if (v41)
      {
        *(_QWORD *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 24) = 0;
        WTF::fastFree(v41, v6);
      }
    }
    goto LABEL_56;
  }
  v13 = a1[3];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = *(_QWORD *)(v13 + 32);
  v16 = 32 * *(unsigned int *)(v13 + 44);
  v17 = v15 + v16;
  while (v16)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v17 -= 32;
    v16 -= 32;
    if (!v18)
    {
      v19 = v15 + v16;
      if (!*(_BYTE *)(v19 + 16))
      {
        v20 = v45;
        v45 = 0;
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = v20;
        *(_BYTE *)(v19 + 16) = 1;
      }
      goto LABEL_26;
    }
  }
  v25 = *(_QWORD *)(v13 + 24);
  if (v25)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v25 + 16))(v25, 1, &v45);
    v26 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
LABEL_26:
  v27 = v45;
  v45 = 0;
  if (!v27)
    goto LABEL_29;
  if (*v27 != 2)
  {
    *v27 -= 2;
LABEL_29:
    v28 = a1[17];
    *(_BYTE *)(v28 + 96) = 0;
    if (!*(_BYTE *)(v28 + 32))
      goto LABEL_56;
LABEL_41:
    if (*(_DWORD *)(v28 + 24))
    {
      v35 = *(unsigned int *)(v28 + 28);
      if ((_DWORD)v35)
      {
        v36 = *(WebGPU::BindGroupLayout ***)(v28 + 16);
        v37 = 8 * v35;
        do
        {
          v38 = *v36;
          *v36 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout(v38, v14);
              WTF::fastFree(v39, v40);
            }
            else
            {
              --*(_DWORD *)v38;
            }
          }
          ++v36;
          v37 -= 8;
        }
        while (v37);
        *(_DWORD *)(v28 + 28) = 0;
      }
      v42 = *(WTF **)(v28 + 16);
      if (v42)
      {
        *(_QWORD *)(v28 + 16) = 0;
        *(_DWORD *)(v28 + 24) = 0;
        WTF::fastFree(v42, v14);
      }
    }
    goto LABEL_56;
  }
  WTF::StringImpl::destroy();
  v28 = a1[17];
  *(_BYTE *)(v28 + 96) = 0;
  if (*(_BYTE *)(v28 + 32))
    goto LABEL_41;
LABEL_56:
  v43 = (unsigned __int8 **)a1[3];
  v44 = WTF::fastMalloc((WTF *)0xC0);
  WebGPU::BindGroupLayout::BindGroupLayout(v44, v43);
  return (_DWORD *)v44;
}

void sub_182477094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1824770E4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  WTF *v3;

  v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

void sub_1824770FC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  WTF *v3;

  v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderPipelineSetLabel(int a1, char *__s)
{
  _DWORD *result;
  _DWORD *v3;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  result = v3;
  if (v3)
  {
    if (*v3 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v3 -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPUL17makeBindingLayoutIKNS_7variantIJN4WGSL19BufferBindingLayoutENSD_20SamplerBindingLayoutENSD_20TextureBindingLayoutENSD_27StorageTextureBindingLayoutENSD_28ExternalTextureBindingLayoutEEEEEEDaR24WGPUBindGroupLayoutEntryRT_21WGPUBufferBindingTypeyEUlRKSE_E_JZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSF_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSG_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSH_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSI_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSE_SF_SG_SH_SI_EEEEEEDcSO_DpT0_@<Q0>(uint64_t **a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1)[1];
  if (!v4)
  {
    v5 = *a2;
    if (v5 == 1)
      v6 = 2;
    else
      v6 = 1;
    if (v5 == 2)
      v4 = 3;
    else
      v4 = v6;
  }
  v7 = a2[1];
  v8 = *((_QWORD *)a2 + 1);
  v9 = *(_QWORD *)v3[2];
  v10 = *v3;
  *(_QWORD *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 40) = v4;
  *(_DWORD *)(v10 + 44) = v7;
  *(_QWORD *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 56) = v9;
  result = *(__n128 *)(v10 + 32);
  v12 = *(_OWORD *)(v10 + 48);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPUL17makeBindingLayoutIKNS_7variantIJN4WGSL19BufferBindingLayoutENSD_20SamplerBindingLayoutENSD_20TextureBindingLayoutENSD_27StorageTextureBindingLayoutENSD_28ExternalTextureBindingLayoutEEEEEEDaR24WGPUBindGroupLayoutEntryRT_21WGPUBufferBindingTypeyEUlRKSE_E_JZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSF_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSG_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSH_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSI_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSE_SF_SG_SH_SI_EEEEEEDcSO_DpT0_@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, __n128 *a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  __n128 result;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v3 == 1)
    v5 = 2;
  else
    v5 = 1;
  if (v3 == 2)
    v6 = 3;
  else
    v6 = v5;
  *(_QWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 72) = v6;
  result = *(__n128 *)(v4 + 64);
  *a3 = result;
  a3[2].n128_u32[0] = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPUL17makeBindingLayoutIKNS_7variantIJN4WGSL19BufferBindingLayoutENSD_20SamplerBindingLayoutENSD_20TextureBindingLayoutENSD_27StorageTextureBindingLayoutENSD_28ExternalTextureBindingLayoutEEEEEEDaR24WGPUBindGroupLayoutEntryRT_21WGPUBufferBindingTypeyEUlRKSE_E_JZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSF_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSG_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSH_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSI_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSE_SF_SG_SH_SI_EEEEEEDcSO_DpT0_@<Q0>(uint64_t a1@<X0>, __int8 *a2@<X1>, __n128 *a3@<X8>, int32x2_t a4@<D0>)
{
  int32x2_t *v4;
  __int32 v5;
  int32x2_t v6;
  int8x8_t v7;
  __n128 result;

  v4 = *(int32x2_t **)(*(_QWORD *)a1 + 32);
  v4[10] = 0;
  a4.i8[0] = *a2;
  v5 = a2[2];
  a4.i8[4] = a2[1];
  v6 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(a4, (int32x2_t)-1), (int8x8_t)0xFF000000FFLL);
  v7 = (int8x8_t)vcgt_u32((uint32x2_t)0x500000004, (uint32x2_t)v6);
  v4[11] = vsub_s32((int32x2_t)vand_s8((int8x8_t)vadd_s32(v6, (int32x2_t)0x200000002), v7), (int32x2_t)vmvn_s8(v7));
  v4[12].i32[0] = v5;
  a3[1].n128_u64[0] = (unint64_t)v4[12];
  result = *(__n128 *)v4[10].i8;
  *a3 = result;
  a3[2].n128_u32[0] = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPUL17makeBindingLayoutIKNS_7variantIJN4WGSL19BufferBindingLayoutENSD_20SamplerBindingLayoutENSD_20TextureBindingLayoutENSD_27StorageTextureBindingLayoutENSD_28ExternalTextureBindingLayoutEEEEEEDaR24WGPUBindGroupLayoutEntryRT_21WGPUBufferBindingTypeyEUlRKSE_E_JZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSF_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSG_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSH_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSI_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSE_SF_SG_SH_SI_EEEEEEDcSO_DpT0_@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  __n128 result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *a2;
  if ((a2[1] - 1) > 0xFu)
    v5 = 23;
  else
    v5 = dword_18260F1A8[(char)(a2[1] - 1)];
  if (a2[2] - 1 >= 5)
    v6 = 1;
  else
    v6 = (a2[2] - 1) + 2;
  if (v4 == 1)
    v7 = 2;
  else
    v7 = 1;
  if (v4 == 2)
    v7 = 3;
  *(_QWORD *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 112) = v7;
  *(_DWORD *)(v3 + 116) = v5;
  *(_DWORD *)(v3 + 120) = v6;
  result = *(__n128 *)(v3 + 104);
  *a3 = result;
  a3[1].n128_u64[0] = *(_QWORD *)(v3 + 120);
  a3[2].n128_u32[0] = 3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebGPUL17makeBindingLayoutIKNS_7variantIJN4WGSL19BufferBindingLayoutENSD_20SamplerBindingLayoutENSD_20TextureBindingLayoutENSD_27StorageTextureBindingLayoutENSD_28ExternalTextureBindingLayoutEEEEEEDaR24WGPUBindGroupLayoutEntryRT_21WGPUBufferBindingTypeyEUlRKSE_E_JZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSF_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSG_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSH_E_ZNSB_ISK_EESL_SN_SP_SQ_yEUlRKSI_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSE_SF_SG_SH_SI_EEEEEEDcSO_DpT0_@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0x27FFFFFFELL;
  *(_DWORD *)(v2 + 96) = 0;
  result = *(__n128 *)(v2 + 80);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(v2 + 96);
  a2[2].n128_u32[0] = 2;
  return result;
}

uint64_t WebGPU::vertexFormatSize(int a1)
{
  uint64_t result;

  result = 2;
  switch(a1)
  {
    case 0:
      goto LABEL_8;
    case 1:
    case 3:
    case 5:
    case 7:
      return result;
    case 2:
    case 4:
    case 6:
    case 8:
    case 9:
    case 11:
    case 13:
    case 15:
    case 17:
    case 19:
    case 23:
    case 27:
    case 31:
      result = 4;
      break;
    case 10:
    case 12:
    case 14:
    case 16:
    case 18:
    case 20:
    case 24:
    case 28:
      result = 8;
      break;
    case 21:
    case 25:
    case 29:
      result = 12;
      break;
    case 22:
    case 26:
    case 30:
      result = 16;
      break;
    default:
      if (a1 == 0x7FFFFFFF)
LABEL_8:
        result = 0;
      break;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPipeline::BufferData,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPipeline::BufferData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = a2;
    result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    v10 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = a2;
    result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    v10 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  v11 = (_QWORD *)(result + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 0;
    v11 += 4;
    --v7;
  }
  while (v7);
LABEL_7:
  *a1 = v10;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v13 = v4 + 32 * i;
      if (*(_DWORD *)v13 <= 0xFFFFFFFD)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = 0;
        v17 = 9
            * ((*(_DWORD *)v13 + ~(*(_DWORD *)v13 << 15)) ^ ((*(_DWORD *)v13 + ~(*(_DWORD *)v13 << 15)) >> 10));
        v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
        do
        {
          v19 = v18 & v15;
          v18 = ++v16 + v19;
        }
        while (*(_DWORD *)(v14 + 32 * v19) != -1);
        v20 = (_OWORD *)(v14 + 32 * v19);
        v21 = *(_OWORD *)(v13 + 16);
        *v20 = *(_OWORD *)v13;
        v20[1] = v21;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v9);
}

uint64_t WebGPU::formatType(uint64_t result)
{
  if (result > 0x1F)
    goto LABEL_8;
  if (((1 << result) & 0x807FE1E0) != 0)
    return 3;
  if (((1 << result) & 0x78001818) != 0)
    return 1;
  if ((_DWORD)result)
  {
LABEL_8:
    if ((_DWORD)result == 0x7FFFFFFF)
    {
      result = 538;
      __break(0xC471u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
          {
            v13 = *(_DWORD *)(v12 - 8);
            v14 = *((_DWORD *)v11 + 4);
            if (v14 >= 0x100)
              goto LABEL_12;
LABEL_14:
            v15 = WTF::StringImpl::hashSlowCase(v11);
          }
          else
          {
            v13 = 0;
            v14 = *((_DWORD *)v11 + 4);
            if (v14 < 0x100)
              goto LABEL_14;
LABEL_12:
            v15 = v14 >> 8;
          }
          v16 = 0;
          do
          {
            v17 = v15 & v13;
            v15 = ++v16 + v17;
          }
          while (*(_QWORD *)(v12 + 16 * v17));
          v18 = (WTF::StringImpl **)(v12 + 16 * v17);
          v19 = *(WTF::StringImpl **)(v4 + 16 * v9 + 8);
          *v18 = 0;
          v20 = *v10;
          *v10 = 0;
          *v18 = v20;
          v18[1] = v19;
          v21 = *v10;
          *v10 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v21 -= 2;
          }
          goto LABEL_7;
        }
        *v10 = 0;
      }
LABEL_7:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

char *WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v5 = *a1;
  if ((unint64_t)*a1 > a3 || (v6 = *((unsigned int *)a1 + 3), (unint64_t)&v5[128 * v6] <= a3))
  {
    v14 = *((unsigned int *)a1 + 2);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 25)
        goto LABEL_30;
      v18 = *((unsigned int *)a1 + 3);
      v19 = (char *)WTF::fastMalloc((WTF *)(v17 << 7));
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
      memcpy(v19, v5, v18 << 7);
      if (v5)
      {
        if (*a1 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return (char *)a3;
  }
  v7 = *((unsigned int *)a1 + 2);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 25))
    {
      v11 = (char *)WTF::fastMalloc((WTF *)(v10 << 7));
      *((_DWORD *)a1 + 2) = v10;
      *a1 = v11;
      memcpy(v11, v5, v6 << 7);
      v13 = *a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *a1;
      }
      return &v13[128 * ((uint64_t)(a3 - (_QWORD)v5) >> 7)];
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x182477894);
  }
  v13 = *a1;
  return &v13[128 * ((uint64_t)(a3 - (_QWORD)v5) >> 7)];
}

uint64_t WebGPU::componentsForDataType(WebGPU *this, MTLDataType a2)
{
  char *v2;
  uint64_t result;

  v2 = (char *)this - 3;
  result = 1;
  switch((unint64_t)v2)
  {
    case 0uLL:
    case 0xDuLL:
    case 0x1AuLL:
    case 0x1EuLL:
    case 0x32uLL:
      return result;
    case 1uLL:
    case 0xEuLL:
    case 0x1BuLL:
    case 0x1FuLL:
    case 0x33uLL:
      result = 2;
      break;
    case 2uLL:
    case 0xFuLL:
    case 0x1CuLL:
    case 0x20uLL:
    case 0x34uLL:
      result = 3;
      break;
    case 3uLL:
    case 0x10uLL:
    case 0x1DuLL:
    case 0x21uLL:
    case 0x35uLL:
      result = 4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Device::createRenderPipelineAsync(WGPURenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  WebGPU::RenderPipeline *v4;
  WTF *v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = off_1E0FD2118;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WebGPU::RenderPipeline **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    goto LABEL_6;
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
LABEL_6:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(a1 + 8), v2);
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, v2);
  WTF::fastFree(v6, v7);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(a1 + 8), v8);
  return a1;
}

{
  void *v2;
  uint64_t v3;
  WebGPU::RenderPipeline *v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = off_1E0FD2118;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WebGPU::RenderPipeline **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebGPU::RenderPipeline::~RenderPipeline(v4, v2);
      WTF::fastFree(v7, v8);
      WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(a1 + 8), v9);
      v6 = (WTF *)a1;
      return WTF::fastFree(v6, v5);
    }
    --*(_DWORD *)v4;
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(a1 + 8), v2);
  v6 = (WTF *)a1;
  return WTF::fastFree(v6, v5);
}

_DWORD *WTF::Detail::CallableWrapper<WebGPU::Device::createRenderPipelineAsync(WGPURenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  _BOOL8 v2;
  uint64_t v3;
  _DWORD *result;
  _DWORD *v5;

  if (*(_BYTE *)(a1[1] + 57))
    v2 = 0;
  else
    v2 = *(_QWORD *)(a1[2] + 16) == 0;
  MEMORY[0x186DAB230](&v5, a1[4]);
  v3 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, _BOOL8, _QWORD *, _DWORD **))(*(_QWORD *)v3 + 16))(v3, v2, a1 + 2, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

void sub_182477AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebGPU::Device::createSampler(unsigned __int8 **this@<X0>, const WGPUSamplerDescriptor *a2@<X1>, WebGPU::Sampler **a3@<X8>)
{
  WebGPU::Sampler *v5;
  float v7;
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  SamplerIdentifier *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  SamplerIdentifier *v25;
  WebGPU::Sampler *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 *v31;
  _DWORD *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  _DWORD *v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  id v41;
  _DWORD *v42;

  if (*(_QWORD *)a2 || !this[1])
  {
    v5 = (WebGPU::Sampler *)WTF::fastMalloc((WTF *)0x58);
    WebGPU::Sampler::Sampler(v5, this);
LABEL_31:
    *a3 = v5;
    return;
  }
  v7 = *((float *)a2 + 10);
  if (v7 < 0.0
    || *((float *)a2 + 11) < v7
    || !*((_WORD *)a2 + 26)
    || *((_WORD *)a2 + 26) != 1 && (*((_DWORD *)a2 + 7) != 1 || *((_DWORD *)a2 + 8) != 1 || *((_DWORD *)a2 + 9) != 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27 = this[4];
    v28 = 32 * *((unsigned int *)this + 11);
    v29 = &v27[v28];
    while (v28)
    {
      v30 = *((_DWORD *)v29 - 2);
      v29 -= 32;
      v28 -= 32;
      if (!v30)
      {
        v31 = &v27[v28];
        if (!v31[16])
        {
          v32 = v42;
          v42 = 0;
          *(_DWORD *)v31 = 1;
          *((_QWORD *)v31 + 1) = v32;
          v31[16] = 1;
        }
        goto LABEL_26;
      }
    }
    v33 = this[3];
    if (v33)
    {
      (*(void (**)(unsigned __int8 *, uint64_t, _DWORD **))(*(_QWORD *)v33 + 16))(v33, 1, &v42);
      v34 = this[3];
      this[3] = 0;
      if (v34)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v34 + 8))(v34);
    }
LABEL_26:
    v35 = v42;
    v42 = 0;
    if (v35)
    {
      if (*v35 == 2)
        WTF::StringImpl::destroy();
      else
        *v35 -= 2;
    }
    v5 = (WebGPU::Sampler *)WTF::fastMalloc((WTF *)0x58);
    WebGPU::Sampler::Sampler(v5, this);
    goto LABEL_31;
  }
  WebGPU::createMetalDescriptorFromDescriptor((uint64_t)a2);
  v41 = (id)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(v41, "minFilter");
  v39 = objc_msgSend(v41, "magFilter");
  v38 = objc_msgSend(v41, "mipFilter");
  v37 = objc_msgSend(v41, "sAddressMode");
  v36 = objc_msgSend(v41, "tAddressMode");
  v8 = objc_msgSend(v41, "rAddressMode");
  v9 = objc_msgSend(v41, "normalizedCoordinates");
  v10 = objc_msgSend(v41, "borderColor");
  v11 = objc_msgSend(v41, "lodAverage");
  v12 = objc_msgSend(v41, "compareFunction");
  v13 = objc_msgSend(v41, "supportArgumentBuffers");

  objc_msgSend(v41, "lodMinClamp");
  v15 = v14;
  objc_msgSend(v41, "lodMaxClamp");
  v17 = v16;
  v18 = objc_msgSend(v41, "maxAnisotropy");

  v19 = [SamplerIdentifier alloc];
  v20 = 0x8000;
  if (!v9)
    v20 = 0;
  v21 = v20 | ((unint64_t)(v10 & 3) << 16);
  v22 = 0x40000;
  if (!v11)
    v22 = 0;
  v23 = v21 | v22 | ((unint64_t)(v12 & 7) << 19);
  v24 = 0x400000;
  if (!v13)
    v24 = 0;
  v25 = -[SamplerIdentifier initWithFirst:second:](v19, "initWithFirst:second:", v40 & 3 | (unint64_t)((4 * (v39 & 3)) & 0xF) | (16 * (v38 & 3)) & 0x3F | ((v37 & 7) << 6) & 0x81FF | ((v36 & 7) << 9) & 0x8FFF | ((unint64_t)(v8 & 7) << 12) | v23 | v24 | ((unint64_t)v15 << 32), v17 | ((unint64_t)COERCE_UNSIGNED_INT((float)v18) << 32));
  v26 = (WebGPU::Sampler *)WTF::fastMalloc((WTF *)0x58);
  WebGPU::Sampler::Sampler(v26, v25, a2, this);
  *a3 = v26;

}

void sub_182477EF0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16)
{
  void *v16;
  WTF *v17;

  WTF::fastFree(v17, a2);

  _Unwind_Resume(a1);
}

void sub_182477F8C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

id WebGPU::createMetalDescriptorFromDescriptor(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __CFString *v19;

  v2 = (void *)objc_opt_new();
  v3 = v2;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = 2;
  if (v4 == 1)
    v5 = 3;
  if (v4 == 2)
    v5 = 0;
  if (v4 == 0x7FFFFFFF)
    v6 = 0;
  else
    v6 = v5;
  objc_msgSend(v2, "setSAddressMode:", v6);
  v7 = *(_DWORD *)(a1 + 20);
  v8 = 2;
  if (v7 == 1)
    v8 = 3;
  if (v7 == 2)
    v8 = 0;
  if (v7 == 0x7FFFFFFF)
    v9 = 0;
  else
    v9 = v8;
  objc_msgSend(v3, "setTAddressMode:", v9);
  v10 = *(_DWORD *)(a1 + 24);
  v11 = 2;
  if (v10 == 1)
    v11 = 3;
  if (v10 == 2)
    v11 = 0;
  if (v10 == 0x7FFFFFFF)
    v12 = 0;
  else
    v12 = v11;
  objc_msgSend(v3, "setRAddressMode:", v12);
  objc_msgSend(v3, "setMagFilter:", *(_DWORD *)(a1 + 28) == 1);
  objc_msgSend(v3, "setMinFilter:", *(_DWORD *)(a1 + 32) == 1);
  if (*(_DWORD *)(a1 + 36) == 1)
    v13 = 2;
  else
    v13 = 1;
  objc_msgSend(v3, "setMipFilter:", v13);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  objc_msgSend(v3, "setLodMinClamp:", v14);
  LODWORD(v15) = *(_DWORD *)(a1 + 44);
  objc_msgSend(v3, "setLodMaxClamp:", v15);
  v16 = 0;
  v17 = *(_DWORD *)(a1 + 48);
  switch(v17)
  {
    case 0:
    case 8:
      goto LABEL_28;
    case 1:
      break;
    case 2:
      v16 = 1;
      break;
    case 3:
      v16 = 3;
      break;
    case 4:
      v16 = 4;
      break;
    case 5:
      v16 = 6;
      break;
    case 6:
      v16 = 2;
      break;
    case 7:
      v16 = 5;
      break;
    default:
      if (v17 == 0x7FFFFFFF)
LABEL_28:
        v16 = 7;
      break;
  }
  objc_msgSend(v3, "setCompareFunction:", v16);
  objc_msgSend(v3, "setSupportArgumentBuffers:", 1);
  if (*(unsigned __int16 *)(a1 + 52) >= 0x10u)
    v18 = 16;
  else
    v18 = *(unsigned __int16 *)(a1 + 52);
  objc_msgSend(v3, "setMaxAnisotropy:", v18);
  if (*(_QWORD *)(a1 + 8))
    v19 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v19 = &stru_1E0FD9588;
  objc_msgSend(v3, "setLabel:", v19);

  return v3;
}

void sub_18247817C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182478190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824781A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WebGPU::Sampler *WebGPU::Sampler::Sampler(WebGPU::Sampler *this, SamplerIdentifier *a2, const WGPUSamplerDescriptor *a3, unsigned __int8 **a4)
{
  SamplerIdentifier *v7;
  SamplerIdentifier *v8;
  _DWORD *v9;
  __int128 v10;
  __int128 v11;
  unsigned __int8 *v12;
  int v14;
  void *v15;

  v7 = a2;
  *(_DWORD *)this = 1;
  v8 = v7;
  *((_QWORD *)this + 2) = *(_QWORD *)a3;
  *((_QWORD *)this + 1) = v8;
  v9 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 3) = v9;
  v10 = *((_OWORD *)a3 + 1);
  v11 = *((_OWORD *)a3 + 2);
  *(_QWORD *)((char *)this + 62) = *(_QWORD *)((char *)a3 + 46);
  *((_OWORD *)this + 2) = v10;
  *((_OWORD *)this + 3) = v11;
  v12 = *a4;
  if (__ldaxr(*a4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_7;
  }
  MEMORY[0x186DAB1AC](v12);
LABEL_7:
  ++*((_QWORD *)v12 + 1);
  v14 = __ldxr(v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, v12))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_12:
  *((_QWORD *)this + 9) = a4;
  *((_QWORD *)this + 10) = 0;
  WebGPU::Sampler::samplerState(this);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeWeak((id *)this + 10, v15);

  return this;
}

void sub_1824782C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  WGPUSamplerDescriptor *v3;

  WGPUSamplerDescriptor::~WGPUSamplerDescriptor(v3);

  _Unwind_Resume(a1);
}

id WebGPU::Sampler::samplerState(WebGPU::Sampler *this)
{
  void *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  if (!*((_QWORD *)this + 1))
    return 0;
  if (_MergedGlobals_1)
  {
    objc_msgSend((id)_MergedGlobals_1, "objectForKey:");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
      return v2;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)_MergedGlobals_1;
    _MergedGlobals_1 = v4;

    objc_msgSend(MEMORY[0x1E0C99E10], "orderedSet");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)qword_1EDB98D10;
    qword_1EDB98D10 = v6;

    objc_msgSend((id)_MergedGlobals_1, "objectForKey:", *((_QWORD *)this + 1));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
      return v2;
  }
  v8 = *(id *)(*((_QWORD *)this + 9) + 8);
  v9 = objc_msgSend((id)_MergedGlobals_1, "count");
  if (v9 >= objc_msgSend(v8, "maxArgumentBufferSamplerCount"))
  {
    objc_msgSend((id)qword_1EDB98D10, "objectAtIndex:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)_MergedGlobals_1, "removeObjectForKey:", v10);
    objc_msgSend((id)qword_1EDB98D10, "removeObjectAtIndex:", 0);

  }
  WebGPU::createMetalDescriptorFromDescriptor((uint64_t)this + 16);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v8, "newSamplerStateWithDescriptor:", v11);

  if (v12)
  {
    objc_msgSend((id)_MergedGlobals_1, "setObject:forKey:", v12, *((_QWORD *)this + 1));
    objc_msgSend((id)qword_1EDB98D10, "addObject:", *((_QWORD *)this + 1));
    objc_storeWeak((id *)this + 10, v12);
  }

  return v12;
}

void sub_182478494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1824784A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1824784B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1824784CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WGPUSamplerDescriptor::~WGPUSamplerDescriptor(WGPUSamplerDescriptor *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (*v2 == 2)
      WTF::StringImpl::destroy();
    else
      *v2 -= 2;
  }
}

WebGPU::Sampler *WebGPU::Sampler::Sampler(WebGPU::Sampler *this, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 54) = 0u;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v4);
LABEL_5:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
    {
      *((_QWORD *)this + 9) = a2;
      *((_QWORD *)this + 10) = 0;
      return this;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1824785EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  _DWORD *v4;

  v4 = *(_DWORD **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *v4 -= 2;
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuSamplerReference(_DWORD *result)
{
  ++*result;
  return result;
}

uint64_t wgpuSamplerRelease(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _DWORD *v3;
  void *v4;
  WTF *v5;

  v1 = result;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  objc_destroyWeak((id *)(result + 80));
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v1 + 72), v2);
  v3 = *(_DWORD **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
  {
    if (*v3 == 2)
    {
      WTF::StringImpl::destroy();

      v5 = (WTF *)v1;
      return WTF::fastFree(v5, v4);
    }
    *v3 -= 2;
  }

  v5 = (WTF *)v1;
  return WTF::fastFree(v5, v4);
}

_DWORD *wgpuSamplerSetLabel(uint64_t a1, char *__s)
{
  _DWORD *result;
  _DWORD *v4;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  result = v5;
  if (v5)
    *v5 += 2;
  v4 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      result = v5;
      if (!v5)
        return result;
      goto LABEL_11;
    }
    *v4 -= 2;
  }
  if (!v5)
    return result;
LABEL_11:
  if (*result == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *result -= 2;
  return result;
}

id WebGPU::ShaderModule::createLibrary(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = (void *)objc_opt_new();
  objc_msgSend(v8, "setFastMathEnabled:", 1);
  if (*a2)
    v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E0FD9588;
  v10 = (void *)objc_msgSend(v7, "newLibraryWithSource:options:error:", v9, v8, a4);

  if (a4 && *a4)
  {
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v18 = *MEMORY[0x1E0CB2D50];
    v12 = (void *)MEMORY[0x1E0CB3940];
    if (*a2)
      v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E0FD9588;
    objc_msgSend(v12, "stringWithFormat:", CFSTR("Failed to compile the shader source, generated metal:\n%@"), v13, v18);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v15;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("WebGPU"), 1, v16);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    v10 = 0;
  }
  else
  {
    if (*a3)
      v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v14 = &stru_1E0FD9588;
    objc_msgSend(v10, "setLabel:", v14);

  }
  return v10;
}

