void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::Variable *a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringBuilder *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringBuilder *v11;
  WGSL::AST::Expression *v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int8x16_t *v20;
  size_t v21;
  _BYTE *v22;
  unint64_t v23;
  unsigned __int128 *v24;
  unsigned __int128 v25;
  uint64_t v26;
  _WORD *v27;
  unint64_t v28;
  __int128 v29;
  char *v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  _WORD *v42;
  int8x16_t *v43;
  __int16 v44;
  _WORD *v45;
  size_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  _BYTE *v50;
  int8x16_t *v51;
  char v52;
  _BYTE *v53;
  uint8x8_t *v54;
  uint16x8_t *v55;
  unint64_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint8x8_t *v60;
  uint16x8_t *v61;
  unint64_t v62;
  uint8x8_t v63;
  int8x16_t *v64;
  int8x16_t *v65;
  unint64_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int16x8_t *v71;
  int8x8_t *v72;
  unint64_t v73;
  int16x8_t v74;
  uint64_t v75;
  uint64_t v76[13];
  uint64_t *v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;

  if (*((_BYTE *)a2 + 128))
  {
    v4 = *((_WORD *)this + 31);
    *((_WORD *)this + 31) = *((unsigned __int8 *)a2 + 129) | 0x100;
    v5 = *((_QWORD *)a2 + 18);
    if (!v5
      || *(_DWORD *)(v5 + 48) != 10
      || (v6 = *(_QWORD *)(v5 + 8)) == 0
      || *(_DWORD *)(v6 + 48)
      || *(_BYTE *)v6 != 10)
    {
      v9 = *((_QWORD *)a2 + 13);
      if (v9 && *(_BYTE *)(v9 + 24) == 5)
        WTF::StringBuilder::append();
      v75 = v5;
      v76[0] = (uint64_t)this;
      v76[1] = (uint64_t)&v75;
      v76[2] = (uint64_t)this;
      v76[3] = (uint64_t)this;
      v76[4] = (uint64_t)this;
      v76[5] = (uint64_t)this;
      v76[6] = (uint64_t)this;
      v76[7] = (uint64_t)this;
      v76[8] = (uint64_t)this;
      v76[9] = (uint64_t)this;
      v76[10] = (uint64_t)this;
      v76[11] = (uint64_t)this;
      v76[12] = (uint64_t)this;
      v10 = *(unsigned int *)(v5 + 48);
      if ((_DWORD)v10 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        JUMPOUT(0x1824CE64CLL);
      }
      v77 = v76;
      ((void (*)(uint64_t **, uint64_t))*(&off_1E0FD6CA0 + v10))(&v77, v5);
      v11 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LOBYTE(v77) = 32;
      v76[0] = *((_QWORD *)a2 + 6);
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(v11, (__int8 *)&v77, v76);
      if (*((_BYTE *)a2 + 128) == 2)
        goto LABEL_16;
      v12 = (WGSL::AST::Expression *)*((_QWORD *)a2 + 15);
      if (v12)
      {
        WTF::StringBuilder::append();
        WGSL::Metal::FunctionDefinitionWriter::visit(this, (const WGSL::Type *)v5, v12);
LABEL_16:
        *((_WORD *)this + 31) = v4;
        return;
      }
LABEL_15:
      WTF::StringBuilder::append();
      goto LABEL_16;
    }
    v7 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v8 = *((_QWORD *)a2 + 6);
    v13 = *((_QWORD *)v7 + 1);
    if ((v13 || (v13 = *(_QWORD *)v7) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0 || v8 && (*(_BYTE *)(v8 + 16) & 4) == 0)
    {
      v14 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v7);
      if (v14)
      {
        *(_OWORD *)v14 = xmmword_18260FE70;
        *(_OWORD *)(v14 + 16) = xmmword_18260FE80;
        *(_WORD *)(v14 + 32) = 32;
        v15 = (_WORD *)(v14 + 34);
        if (!v8)
        {
          v26 = 0;
LABEL_60:
          v45 = &v15[v26];
          *(_DWORD *)v45 = 8060960;
          v45[2] = 32;
          goto LABEL_77;
        }
        v16 = *(int8x16_t **)(v8 + 8);
        v17 = *(unsigned int *)(v8 + 4);
        if ((*(_BYTE *)(v8 + 16) & 4) == 0)
        {
          if ((_DWORD)v17)
          {
            if ((_DWORD)v17 == 1)
              *v15 = v16->i16[0];
            else
              memcpy((void *)(v14 + 34), v16, 2 * v17);
          }
          goto LABEL_59;
        }
        v27 = &v15[v17];
        if (v17 < 0x40)
        {
          v28 = v14 + 34;
        }
        else
        {
          v28 = (unint64_t)&v15[v17 & 0xFFFFFFC0];
          v29 = 0uLL;
          v30 = (char *)(v14 + 34);
          do
          {
            v78.val[0] = *v16;
            v31 = v16[1];
            v79.val[0] = v16[2];
            v32 = v16[3];
            v16 += 4;
            v33 = v32;
            v79.val[1] = 0uLL;
            v80.val[0] = v31;
            v78.val[1] = 0uLL;
            v34 = v30;
            vst2q_s8(v34, v78);
            v34 += 32;
            v80.val[1] = 0uLL;
            vst2q_s8(v34, v80);
            v35 = v30 + 64;
            vst2q_s8(v35, v79);
            v36 = v30 + 96;
            vst2q_s8(v36, *(int8x16x2_t *)(&v29 - 1));
            v30 += 128;
          }
          while (v30 != (char *)v28);
        }
        if ((_WORD *)v28 == v27)
          goto LABEL_59;
        v38 = v14 + 2 * v17 - v28 + 32;
        if (v38 < 0xE
          || (v28 < (unint64_t)v16->u64 + (v38 >> 1) + 1
            ? (v39 = (unint64_t)v16 >= (v38 & 0xFFFFFFFFFFFFFFFELL) + v28 + 2)
            : (v39 = 1),
              !v39))
        {
          v42 = (_WORD *)v28;
          v43 = v16;
          goto LABEL_56;
        }
        v40 = (v38 >> 1) + 1;
        if (v38 >= 0x3E)
        {
          v41 = v40 & 0xFFFFFFFFFFFFFFE0;
          v54 = (uint8x8_t *)&v16[1];
          v55 = (uint16x8_t *)(v28 + 32);
          v56 = v40 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v57 = *(uint8x16_t *)v54[-2].i8;
            v58 = vmovl_u8(*v54);
            v59 = vmovl_high_u8(*(uint8x16_t *)v54->i8);
            v55[-2] = vmovl_u8(*(uint8x8_t *)v57.i8);
            v55[-1] = vmovl_high_u8(v57);
            *v55 = v58;
            v55[1] = v59;
            v55 += 4;
            v54 += 4;
            v56 -= 32;
          }
          while (v56);
          if (v40 == v41)
            goto LABEL_59;
          if ((v40 & 0x18) == 0)
          {
            v43 = (int8x16_t *)((char *)v16 + v41);
            v42 = (_WORD *)(v28 + 2 * v41);
            do
            {
LABEL_56:
              v44 = v43->u8[0];
              v43 = (int8x16_t *)((char *)v43 + 1);
              *v42++ = v44;
            }
            while (v42 != v27);
LABEL_59:
            v26 = *(unsigned int *)(v8 + 4);
            goto LABEL_60;
          }
        }
        else
        {
          v41 = 0;
        }
        v42 = (_WORD *)(v28 + 2 * (v40 & 0xFFFFFFFFFFFFFFF8));
        v43 = (int8x16_t *)((char *)v16 + (v40 & 0xFFFFFFFFFFFFFFF8));
        v60 = (uint8x8_t *)&v16->i8[v41];
        v61 = (uint16x8_t *)(v28 + 2 * v41);
        v62 = v41 - (v40 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v63 = *v60++;
          *v61++ = vmovl_u8(v63);
          v62 += 8;
        }
        while (v62);
        if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_59;
        goto LABEL_56;
      }
LABEL_77:
      (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 15));
      WTF::StringBuilder::append();
      (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 15));
      WTF::StringBuilder::append();
      (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 15));
      WTF::StringBuilder::append();
      (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 15));
      goto LABEL_15;
    }
    v18 = MEMORY[0x186DAB068]();
    if (!v18)
      goto LABEL_77;
    *(_BYTE *)(v18 + 16) = 32;
    *(_OWORD *)v18 = *(_OWORD *)"texture_external ";
    v19 = (_BYTE *)(v18 + 17);
    if (!v8)
    {
      v37 = 0;
LABEL_76:
      v53 = &v19[v37];
      v53[2] = 32;
      *(_WORD *)v53 = 31520;
      goto LABEL_77;
    }
    v20 = *(int8x16_t **)(v8 + 8);
    v21 = *(unsigned int *)(v8 + 4);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == 1)
          *v19 = v20->i8[0];
        else
          memcpy((void *)(v18 + 17), v20, v21);
      }
      goto LABEL_75;
    }
    v22 = &v19[v21];
    if (v21 < 0x10)
    {
      v23 = v18 + 17;
    }
    else
    {
      v23 = (unint64_t)&v19[v21 & 0xFFFFFFF0];
      v24 = (unsigned __int128 *)(v18 + 17);
      do
      {
        v25 = (unsigned __int128)vld2q_s8(v20->i8);
        v20 += 2;
        *v24++ = v25;
      }
      while (v24 != (unsigned __int128 *)v23);
    }
    if ((_BYTE *)v23 == v22)
    {
LABEL_75:
      v37 = *(unsigned int *)(v8 + 4);
      goto LABEL_76;
    }
    v46 = v18 + v21;
    v47 = v18 + v21 - v23 + 17;
    if (v47 < 8
      || (v23 < (unint64_t)v20[2].u64 + 2 * v46 + -2 * v23 + 2
        ? (v48 = (unint64_t)v20 >= v46 + 17)
        : (v48 = 1),
          !v48))
    {
      v50 = (_BYTE *)v23;
      v51 = v20;
      goto LABEL_72;
    }
    if (v47 >= 0x20)
    {
      v49 = v47 & 0xFFFFFFFFFFFFFFE0;
      v64 = v20 + 2;
      v65 = (int8x16_t *)(v23 + 16);
      v66 = v47 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v68 = v64[-2];
        v67 = v64[-1];
        v70 = *v64;
        v69 = v64[1];
        v64 += 4;
        v65[-1] = vuzp1q_s8(v68, v67);
        *v65 = vuzp1q_s8(v70, v69);
        v65 += 2;
        v66 -= 32;
      }
      while (v66);
      if (v47 == v49)
        goto LABEL_75;
      if ((v47 & 0x18) == 0)
      {
        v51 = (int8x16_t *)((char *)v20 + 2 * v49);
        v50 = (_BYTE *)(v23 + v49);
        do
        {
LABEL_72:
          v52 = v51->i8[0];
          v51 = (int8x16_t *)((char *)v51 + 2);
          *v50++ = v52;
        }
        while (v50 != v22);
        goto LABEL_75;
      }
    }
    else
    {
      v49 = 0;
    }
    v50 = (_BYTE *)(v23 + (v47 & 0xFFFFFFFFFFFFFFF8));
    v51 = (int8x16_t *)((char *)v20 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
    v71 = (int16x8_t *)((char *)v20 + 2 * v49);
    v72 = (int8x8_t *)(v23 + v49);
    v73 = v49 - (v47 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v74 = *v71++;
      *v72++ = vmovn_s16(v74);
      v73 += 8;
    }
    while (v73);
    if (v47 == (v47 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_75;
    goto LABEL_72;
  }
}

WTF *WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::add<WGSL::ConstantValue const&>@<X0>(uint64_t *a1@<X0>, const WTF::StringImpl **a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF *v13;
  int i;
  uint64_t v15;
  WTF *v16;
  WTF *result;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char v29;

  v8 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    v8 = *a1;
    if (!*a1)
    {
      v9 = 0;
      v10 = *a2;
      v11 = *((_DWORD *)*a2 + 4);
      if (v11 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *a2;
  v11 = *((_DWORD *)*a2 + 4);
  if (v11 < 0x100)
    goto LABEL_6;
LABEL_4:
  v12 = v11 >> 8;
LABEL_7:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF *)(v8 + 32 * v15);
    result = *(WTF **)v16;
    if (*(_QWORD *)v16 == -1)
    {
      v13 = (WTF *)(v8 + 32 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        result = 0;
        *(_OWORD *)v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        --*(_DWORD *)(*a1 - 16);
        v16 = v13;
      }
      v20 = *a2;
      if (*a2)
        *(_DWORD *)v20 += 2;
      *(_QWORD *)v16 = v20;
      v21 = *((unsigned int *)v16 + 6);
      v22 = a3[4];
      if ((_DWORD)v21 == -1)
      {
        if ((_DWORD)v22 == -1)
          goto LABEL_26;
      }
      else if ((_DWORD)v22 == -1)
      {
        result = (WTF *)((uint64_t (*)(char *, char *))off_1E0FD6B98[v21])(&v29, (char *)v16 + 8);
        *((_DWORD *)v16 + 6) = -1;
        goto LABEL_26;
      }
      v28 = (char *)v16 + 8;
      result = (WTF *)((uint64_t (*)(char **))off_1E0FD6C48[v22])(&v28);
LABEL_26:
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        v25 = *a1;
        if (*a1)
          goto LABEL_28;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v25 = *a1;
        if (*a1)
        {
LABEL_28:
          v26 = (*(_DWORD *)(v25 - 16) + *(_DWORD *)(v25 - 12));
          v27 = *(unsigned int *)(v25 - 4);
          if (v27 <= 0x400)
            goto LABEL_29;
          goto LABEL_35;
        }
      }
      v26 = *(unsigned int *)(v25 - 16);
      v27 = *(unsigned int *)(v25 - 4);
      if (v27 <= 0x400)
      {
LABEL_29:
        if (3 * v27 > 4 * v26)
        {
LABEL_38:
          v24 = v25 + 32 * v27;
          v23 = 1;
          goto LABEL_39;
        }
        if (!(_DWORD)v27)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, (WTF::StringImpl **)v16);
          v16 = result;
          v25 = *a1;
          if (!*a1)
          {
LABEL_32:
            v27 = 0;
            goto LABEL_38;
          }
LABEL_37:
          v27 = *(unsigned int *)(v25 - 4);
          goto LABEL_38;
        }
LABEL_36:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, (_DWORD)v27 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v27)), (WTF::StringImpl **)v16);
        v16 = result;
        v25 = *a1;
        if (!*a1)
          goto LABEL_32;
        goto LABEL_37;
      }
LABEL_35:
      if (v27 > 2 * v26)
        goto LABEL_38;
      goto LABEL_36;
    }
    result = (WTF *)WTF::equal(result, *a2, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v12 = i + v15;
  }
  v18 = *a1;
  if (*a1)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v23 = 0;
  v24 = v18 + 32 * v19;
LABEL_39:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v23;
  return result;
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, const WGSL::Type *a2, WGSL::AST::Expression *a3)
{
  WGSL::AST::Expression *v3;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)();
  uint64_t v9;
  _BOOL8 v10;
  _BYTE v11[16];
  int v12;
  _BYTE v13[16];
  int v14;
  char v15;
  const WGSL::Type *v16;
  _QWORD v17[16];
  _QWORD *v18;

  v3 = a3;
  v13[0] = 0;
  v15 = 0;
  if (*((_BYTE *)a3 + 56))
  {
LABEL_2:
    v14 = -1;
    v6 = *((unsigned int *)v3 + 12);
    if ((_DWORD)v6 == -1)
    {
      v15 = 1;
      v11[0] = 0;
      v12 = -1;
    }
    else
    {
      v7 = (char *)v3 + 32;
      v8 = off_1E0FD6BF0[v6];
      ((void (*)(_QWORD *, _BYTE *, char *))v8)(v17, v13, v7);
      v14 = v6;
      v15 = 1;
      v11[0] = 0;
      v12 = -1;
      ((void (*)(_QWORD *, _BYTE *, _BYTE *))v8)(v17, v11, v13);
      v12 = v6;
    }
    v16 = a2;
    v17[0] = this;
    v17[4] = v11;
    v17[5] = this;
    v17[6] = &v16;
    v17[7] = v11;
    v17[8] = this;
    v17[9] = &v16;
    v17[1] = v11;
    v17[2] = this;
    v17[3] = v11;
    v17[10] = v11;
    v17[11] = this;
    v17[12] = v11;
    v17[13] = this;
    v17[14] = v11;
    v17[15] = this;
    v9 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v9 == -1)
    {
      v10 = std::__throw_bad_variant_access[abi:sn180100]();
      WGSL::Metal::FunctionDefinitionWriter::visit(v10);
    }
    else
    {
      v18 = v17;
      ((void (*)(_QWORD **, const WGSL::Type *))off_1E0FD6D30[v9])(&v18, a2);
      if (v12 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E0FD6B98[v12])(v17, v11);
      v12 = -1;
      if (v15)
      {
        if (v14 != -1)
          ((void (*)(_QWORD *, _BYTE *))off_1E0FD6B98[v14])(v17, v13);
      }
    }
  }
  else
  {
    while (1)
    {
      if ((*(unsigned int (**)(WGSL::AST::Expression *))(*(_QWORD *)v3 + 16))(v3) == 20)
      {
        WGSL::Metal::FunctionDefinitionWriter::visit(this, a2, v3);
        return;
      }
      if ((*(unsigned int (**)(WGSL::AST::Expression *))(*(_QWORD *)v3 + 16))(v3) != 23)
        break;
      v3 = (WGSL::AST::Expression *)*((_QWORD *)v3 + 8);
      v13[0] = 0;
      v15 = 0;
      if (*((_BYTE *)v3 + 56))
        goto LABEL_2;
    }
    WGSL::AST::Visitor::visit(this, (uint64_t)v3);
  }
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(uint64_t this, WGSL::AST::BuiltinAttribute *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(this + 61)
    || ((v2 = *(unsigned __int8 *)(this + 60), v3 = v2 > 9, v4 = (1 << v2) & 0x310, !v3) ? (v5 = v4 == 0) : (v5 = 1), !v5))
  {
    switch(*((_BYTE *)a2 + 24))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
        this = WTF::StringBuilder::append();
        break;
      default:
        return this;
    }
  }
  return this;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(uint64_t this, WGSL::AST::StageAttribute *a2)
{
  int v2;

  *(_WORD *)(this + 66) = *((unsigned __int8 *)a2 + 24) | 0x100;
  v2 = *((unsigned __int8 *)a2 + 24);
  if (v2 == 1 || v2 == 4 || v2 == 2)
    return WTF::StringBuilder::append();
  return this;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::GroupAttribute *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  WTF::StringBuilder *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint16x8_t *v31;
  unint64_t v32;
  uint8x8_t *v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t *v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE v42[13];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 3);
  if (!*(_BYTE *)(v2 + 56))
  {
    __break(1u);
LABEL_46:
    result = 151;
    __break(0xC471u);
    return result;
  }
  v3 = *(_DWORD *)(v2 + 48);
  if (v3 != 5 && v3 != 4 && v3 != 3)
    goto LABEL_46;
  v4 = *(_DWORD *)(v2 + 32);
  if (*((_BYTE *)this + 67))
  {
    if (*((_BYTE *)this + 66) == 1)
    {
      v5 = *(_DWORD *)(*((_QWORD *)this + 6) + 40) - 1;
      v6 = v5 >= v4;
      v7 = v5 - v4;
      if (v6)
        v4 = v7;
    }
  }
  v8 = 0;
  v9 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v10 = v4;
  do
  {
    ++v8;
    v11 = v10 > 9;
    v10 /= 0xAu;
  }
  while (v11);
  v12 = *((_QWORD *)v9 + 1);
  if ((v12 || (v12 = *(_QWORD *)v9) != 0) && (*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v9);
    if (!result)
      return result;
    v14 = 0;
    *(_OWORD *)result = xmmword_18260FE90;
    v15 = 13;
    v16 = 1;
    *(_WORD *)(result + 16) = 40;
    v17 = v4;
    do
    {
      v18 = v15;
      v19 = v14;
      v20 = v16;
      v42[--v15] = (v17 % 0xA) | 0x30;
      ++v14;
      ++v16;
      v11 = v17 > 9;
      v17 /= 0xAu;
    }
    while (v11);
    v21 = result + 18;
    if (v18 > 13)
      goto LABEL_42;
    v22 = v19 + 1;
    if ((unint64_t)(v19 + 1) < 8)
    {
      v23 = v15;
      v24 = (_WORD *)(result + 18);
      goto LABEL_41;
    }
    if (v22 >= 0x20)
    {
      v30 = v22 & 0xFFFFFFFFFFFFFFE0;
      v31 = (uint16x8_t *)(result + 50);
      v32 = v20 & 0xFFFFFFFFFFFFFFE0;
      v33 = (uint8x8_t *)&v42[-v19 + 28];
      do
      {
        v34 = *(uint8x16_t *)v33[-2].i8;
        v35 = vmovl_u8(*v33);
        v36 = vmovl_high_u8(*(uint8x16_t *)v33->i8);
        v31[-2] = vmovl_u8(*(uint8x8_t *)v34.i8);
        v31[-1] = vmovl_high_u8(v34);
        *v31 = v35;
        v31[1] = v36;
        v31 += 4;
        v33 += 4;
        v32 -= 32;
      }
      while (v32);
      if (v22 == v30)
        goto LABEL_42;
      if ((v22 & 0x18) == 0)
      {
        v24 = (_WORD *)(v21 + 2 * v30);
        v23 = v15 + v30;
        do
LABEL_41:
          *v24++ = v42[v23++];
        while (v23 != 13);
LABEL_42:
        v40 = 0;
        do
        {
          ++v40;
          v11 = v4 > 9;
          v4 /= 0xAu;
        }
        while (v11);
        v41 = v21 + 2 * v40;
        *(_DWORD *)v41 = 6094889;
        *(_WORD *)(v41 + 4) = 93;
        return result;
      }
    }
    else
    {
      v30 = 0;
    }
    v23 = v15 + (v22 & 0xFFFFFFFFFFFFFFF8);
    v24 = (_WORD *)(v21 + 2 * (v22 & 0xFFFFFFFFFFFFFFF8));
    v37 = (uint16x8_t *)(result + 2 * v30 + 18);
    v38 = v30 - (v20 & 0xFFFFFFFFFFFFFFF8);
    v39 = &v42[v30];
    do
    {
      *v37++ = vmovl_u8(*(uint8x8_t *)&v39[v15]);
      v39 += 8;
      v38 += 8;
    }
    while (v38);
    if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_42;
    goto LABEL_41;
  }
  result = MEMORY[0x186DAB068]();
  if (result)
  {
    v25 = 0;
    *(_BYTE *)(result + 8) = 40;
    *(_QWORD *)result = *(_QWORD *)"[[buffer(";
    v26 = v4;
    do
    {
      v42[v25-- + 12] = (v26 % 0xA) | 0x30;
      v11 = v26 > 9;
      v26 /= 0xAu;
    }
    while (v11);
    v27 = result + 9;
    if (v25 + 14 <= 13)
      result = (uint64_t)memcpy((void *)(result + 9), &v42[v25 + 13], -v25);
    v28 = 0;
    do
    {
      ++v28;
      v11 = v4 > 9;
      v4 /= 0xAu;
    }
    while (v11);
    v29 = v27 + v28;
    *(_BYTE *)(v29 + 2) = 93;
    *(_WORD *)v29 = 23849;
  }
  return result;
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::BindingAttribute *a2)
{
  uint64_t v2;
  WTF::StringBuilder *v3;
  int v4;
  unint64_t v5;
  const char *v6;
  int v7;
  unint64_t v8;
  const char *v9;
  int v10;

  v2 = *((_QWORD *)a2 + 3);
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v4 = *(_DWORD *)(v2 + 48);
    switch(v4)
    {
      case 5:
        v5 = *(_QWORD *)(v2 + 32);
        goto LABEL_8;
      case 4:
        v5 = *(unsigned int *)(v2 + 32);
        goto LABEL_8;
      case 3:
        v5 = *(int *)(v2 + 32);
LABEL_8:
        v9 = "[[id(";
        v10 = 5;
        v8 = v5;
        v6 = ")]]";
        v7 = 3;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v3, (unint64_t *)&v9, &v8, (unint64_t *)&v6);
        return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(0xC471u);
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::LocationAttribute *a2)
{
  uint64_t v2;
  WTF::StringBuilder *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  int v12;
  unint64_t v13;
  const char *v14;
  int v15;

  if (*((_BYTE *)this + 61))
  {
    switch(*((_BYTE *)this + 60))
    {
      case 1:
        v6 = *((_QWORD *)a2 + 3);
        if (!*(_BYTE *)(v6 + 56))
          goto LABEL_29;
        v3 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
        v7 = *(_DWORD *)(v6 + 48);
        switch(v7)
        {
          case 5:
            v5 = *(_QWORD *)(v6 + 32);
            break;
          case 4:
            v5 = *(unsigned int *)(v6 + 32);
            break;
          case 3:
            v5 = *(int *)(v6 + 32);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1824CF298);
        }
        v14 = "[[attribute(";
        v10 = 12;
        goto LABEL_27;
      case 2:
      case 4:
        v2 = *((_QWORD *)a2 + 3);
        if (!*(_BYTE *)(v2 + 56))
          goto LABEL_29;
        v3 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
        v4 = *(_DWORD *)(v2 + 48);
        switch(v4)
        {
          case 5:
            v5 = *(_QWORD *)(v2 + 32);
            break;
          case 4:
            v5 = *(unsigned int *)(v2 + 32);
            break;
          case 3:
            v5 = *(int *)(v2 + 32);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1824CF278);
        }
        v14 = "[[user(loc";
        v10 = 10;
        goto LABEL_27;
      case 8:
        v8 = *((_QWORD *)a2 + 3);
        if (!*(_BYTE *)(v8 + 56))
        {
LABEL_29:
          __break(1u);
LABEL_30:
          __break(0xC471u);
          JUMPOUT(0x1824CF258);
        }
        v3 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
        v9 = *(_DWORD *)(v8 + 48);
        switch(v9)
        {
          case 5:
            v5 = *(_QWORD *)(v8 + 32);
            break;
          case 4:
            v5 = *(unsigned int *)(v8 + 32);
            break;
          case 3:
            v5 = *(int *)(v8 + 32);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1824CF2B8);
        }
        v14 = "[[color(";
        v10 = 8;
LABEL_27:
        v15 = v10;
        v13 = v5;
        v11 = ")]]";
        v12 = 3;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v3, (unint64_t *)&v14, &v13, (unint64_t *)&v11);
        break;
      case 9:
        goto LABEL_30;
      default:
        return;
    }
  }
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::InterpolateAttribute *a2)
{
  int v2;
  int v3;
  const char *v4;
  uint64_t v5;
  WTF::StringBuilder *v6;
  BOOL v7;
  unint64_t v8;
  uint64_t result;
  const char *v10;
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;

  v2 = *((unsigned __int8 *)a2 + 24);
  if (!*((_BYTE *)a2 + 24))
    goto LABEL_12;
  v3 = *((unsigned __int8 *)a2 + 25);
  if (v2 == 2)
  {
    if (*((_BYTE *)a2 + 25))
    {
      if (v3 != 2)
      {
        if (v3 == 1)
        {
          v4 = "centroid_perspective";
          v5 = 21;
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      v4 = "sample_perspective";
      v5 = 19;
    }
    else
    {
      v4 = "center_perspective";
      v5 = 19;
    }
    goto LABEL_13;
  }
  if (v2 != 1)
  {
LABEL_12:
    v4 = "flat";
    v5 = 5;
    goto LABEL_13;
  }
  if (*((_BYTE *)a2 + 25))
  {
    if (v3 != 2)
    {
      if (v3 == 1)
      {
        v4 = "centroid_no_perspective";
        v5 = 24;
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    v4 = "sample_no_perspective";
    v5 = 22;
  }
  else
  {
    v4 = "center_no_perspective";
    v5 = 22;
  }
LABEL_13:
  v6 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v14 = "[[";
  v15 = 2;
  v7 = v5 != 0;
  v8 = v5 - 1;
  if (!v7)
    v8 = 0;
  v12 = v4;
  if (v8 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v13 = v8;
    v10 = "]]";
    v11 = 2;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v6, (unint64_t *)&v14, (uint64_t)&v12, (uint64_t)&v10);
  }
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::Parameter *a2)
{
  __int16 v3;
  uint64_t v4;
  WTF::StringBuilder *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BOOL8 v16;
  WGSL::AST::Expression *v17;
  uint64_t v18;
  uint64_t v19[13];
  uint64_t *v20;

  v3 = *((_WORD *)this + 32);
  *((_WORD *)this + 32) = *((unsigned __int8 *)a2 + 24) | 0x100;
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 24);
  v19[0] = (uint64_t)this;
  v19[1] = (uint64_t)&v18;
  v19[2] = (uint64_t)this;
  v19[3] = (uint64_t)this;
  v19[4] = (uint64_t)this;
  v19[5] = (uint64_t)this;
  v19[6] = (uint64_t)this;
  v19[7] = (uint64_t)this;
  v19[8] = (uint64_t)this;
  v19[9] = (uint64_t)this;
  v19[10] = (uint64_t)this;
  v19[11] = (uint64_t)this;
  v19[12] = (uint64_t)this;
  v4 = *(unsigned int *)(v18 + 48);
  if ((_DWORD)v4 == -1)
  {
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::Metal::FunctionDefinitionWriter::visit((WGSL::Metal::FunctionDefinitionWriter *)v16, v17);
  }
  else
  {
    v20 = v19;
    ((void (*)(uint64_t **))*(&off_1E0FD6CA0 + v4))(&v20);
    v6 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LOBYTE(v20) = 32;
    v19[0] = *((_QWORD *)a2 + 7);
    result = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(v6, (__int8 *)&v20, v19);
    v8 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)*((_QWORD *)a2 + 9);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        result = *((_QWORD *)this + 5);
        LOBYTE(v19[0]) = 32;
        v12 = *(_QWORD *)(result + 8);
        if (v12
          && (v13 = *(unsigned int *)(result + 16), v13 < *(_DWORD *)(v12 + 4))
          && !*(_QWORD *)result)
        {
          v14 = *(_DWORD *)(v12 + 16);
          v15 = *(_QWORD *)(v12 + 8);
          *(_DWORD *)(result + 16) = v13 + 1;
          if ((v14 & 4) != 0)
            *(_BYTE *)(v15 + v13) = 32;
          else
            *(_WORD *)(v15 + 2 * v13) = 32;
        }
        else
        {
          result = WTF::StringBuilder::append();
        }
        if (!*((_BYTE *)this + 32))
          result = (*(uint64_t (**)(WGSL::Metal::FunctionDefinitionWriter *, uint64_t))(*(_QWORD *)this + 88))(this, v11);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    *((_WORD *)this + 32) = v3;
  }
  return result;
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, const WGSL::Type **a2)
{
  WGSL::Metal::FunctionDefinitionWriter::visit(this, a2[3], (WGSL::AST::Expression *)a2);
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, const WGSL::Type *a2, WGSL::AST::CallExpression *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const WGSL::Type *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  WGSL::AST::Expression **v24;
  uint64_t v25;
  WGSL::AST::Expression *v26;
  WTF::StringBuilder *v27;
  size_t v28;
  uint64_t v29;
  void *v30;
  BOOL v31;
  void *v32;
  BOOL v33;
  uint64_t v34;
  WGSL::AST::Expression *v35;
  WTF::StringBuilder *v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  BOOL v40;
  void *v41;
  BOOL v42;
  int v43;
  WTF::StringBuilder *v44;
  char **v45;
  unint64_t v46;
  char **v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char **v58;
  unint64_t v59;
  char **v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  const WGSL::Type *v68;
  const char *v69;
  const WGSL::Type **v70;
  WGSL::Metal::FunctionDefinitionWriter *v71;
  WGSL::Metal::FunctionDefinitionWriter *v72;
  WGSL::Metal::FunctionDefinitionWriter *v73;
  WGSL::Metal::FunctionDefinitionWriter *v74;
  WGSL::Metal::FunctionDefinitionWriter *v75;
  WGSL::Metal::FunctionDefinitionWriter *v76;
  WGSL::Metal::FunctionDefinitionWriter *v77;
  WGSL::Metal::FunctionDefinitionWriter *v78;
  WGSL::Metal::FunctionDefinitionWriter *v79;
  WGSL::Metal::FunctionDefinitionWriter *v80;
  WGSL::Metal::FunctionDefinitionWriter *v81;
  const char **v82;

  v6 = (_QWORD *)*((_QWORD *)a3 + 8);
  if ((*(unsigned int (**)(_QWORD *))(*v6 + 16))(v6) == 60
    && MEMORY[0x186DAB1B8](v6[11], "bitcast", 7))
  {
    WTF::StringBuilder::append();
    v68 = *(const WGSL::Type **)(*((_QWORD *)a3 + 8) + 24);
    v69 = (const char *)this;
    v70 = &v68;
    v71 = this;
    v72 = this;
    v73 = this;
    v74 = this;
    v75 = this;
    v76 = this;
    v77 = this;
    v78 = this;
    v79 = this;
    v80 = this;
    v81 = this;
    v7 = *((unsigned int *)v68 + 12);
    if ((_DWORD)v7 != -1)
    {
      v82 = &v69;
      ((void (*)(const char ***))*(&off_1E0FD6CA0 + v7))(&v82);
      WTF::StringBuilder::append();
      if (*((_DWORD *)a3 + 21))
      {
        (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a3 + 9));
        v8 = *((_QWORD *)this + 5);
        LOBYTE(v69) = 41;
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 && (v10 = *(unsigned int *)(v8 + 16), v10 < *(_DWORD *)(v9 + 4)) && !*(_QWORD *)v8)
        {
          v56 = *(_DWORD *)(v9 + 16);
          v57 = *(_QWORD *)(v9 + 8);
          *(_DWORD *)(v8 + 16) = v10 + 1;
          if ((v56 & 4) != 0)
            *(_BYTE *)(v57 + v10) = 41;
          else
            *(_WORD *)(v57 + 2 * v10) = 41;
        }
        else
        {
          WTF::StringBuilder::append();
        }
        return;
      }
LABEL_111:
      __break(0xC471u);
      return;
    }
LABEL_110:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_111;
  }
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
  if (v11 == 59)
  {
    v12 = 0;
    v13 = 1;
    if (!*((_BYTE *)a3 + 88))
      goto LABEL_22;
  }
  else
  {
    v13 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 8) + 24) + 48) == 4;
    v12 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 8) + 24) + 48) == 4;
    if (!*((_BYTE *)a3 + 88))
    {
LABEL_22:
      v19 = (_QWORD *)*((_QWORD *)a3 + 8);
      if ((*(unsigned int (**)(_QWORD *))(*v19 + 16))(v19) != 22)
        goto LABEL_72;
      v20 = v19[11];
      v21 = 0x100000000;
      v67 = v19;
      if (v20)
      {
        v22 = *(unsigned __int8 **)(v20 + 8);
        v21 = *(unsigned int *)(v20 + 4) | ((unint64_t)((*(_DWORD *)(v20 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v22 = 0;
      }
      v45 = &WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*,WGSL::AST::CallExpression &)::builtinMappings;
      v46 = 44;
      do
      {
        v47 = &v45[3 * (v46 >> 1)];
        v48 = WTF::codePointCompare();
        if (v48 >= 0)
          v46 >>= 1;
        else
          v46 += ~(v46 >> 1);
        if (v48 < 0)
          v45 = v47 + 3;
      }
      while (v46);
      if (v45 != &WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*,WGSL::AST::CallExpression &)::directMappings
        && WTF::operator==(v22, v21, (unsigned __int8 *)*v45, (uint64_t)v45[1]))
      {
        v49 = v45[2];
        if (v49)
        {
          ((void (*)(WGSL::Metal::FunctionDefinitionWriter *, WGSL::AST::CallExpression *))v49)(this, a3);
          return;
        }
      }
      if (!*((_BYTE *)a3 + 88))
      {
        v51 = v67[11];
        v52 = 0x100000000;
        if (v51)
        {
          v53 = *(unsigned __int8 **)(v51 + 8);
          v52 = *(unsigned int *)(v51 + 4) | ((unint64_t)((*(_DWORD *)(v51 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v53 = 0;
        }
        v58 = &WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*,WGSL::AST::CallExpression &)::directMappings;
        v59 = 34;
        do
        {
          v60 = &v58[4 * (v59 >> 1)];
          v61 = WTF::codePointCompare();
          if (v61 >= 0)
            v59 >>= 1;
          else
            v59 += ~(v59 >> 1);
          if (v61 < 0)
            v58 = v60 + 4;
        }
        while (v59);
          && WTF::operator==(v53, v52, (unsigned __int8 *)*v58, (uint64_t)v58[1])
          && v58[2])
        {
          goto LABEL_93;
        }
        v62 = *((_QWORD *)this + 5);
        if (!*(_DWORD *)(v62 + 16) && !*(_QWORD *)(v62 + 8))
        {
          v64 = (_DWORD *)v67[11];
          if (v64)
            *v64 += 2;
          v65 = *(_DWORD **)v62;
          *(_QWORD *)v62 = v64;
          if (v65)
          {
            if (*v65 == 2)
              WTF::StringImpl::destroy();
            else
              *v65 -= 2;
          }
          v66 = v67[11];
          if (v66)
            LODWORD(v66) = *(_DWORD *)(v66 + 4);
          *(_DWORD *)(v62 + 16) = v66;
          goto LABEL_74;
        }
        v63 = v67[11];
        if (!v63 || (*(_BYTE *)(v63 + 16) & 4) != 0)
LABEL_93:
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
      }
      else
      {
LABEL_72:
        v68 = a2;
        v69 = (const char *)this;
        v70 = &v68;
        v71 = this;
        v72 = this;
        v73 = this;
        v74 = this;
        v75 = this;
        v76 = this;
        v77 = this;
        v78 = this;
        v79 = this;
        v80 = this;
        v81 = this;
        v50 = *((unsigned int *)a2 + 12);
        if ((_DWORD)v50 == -1)
          goto LABEL_110;
        v82 = &v69;
        ((void (*)(const char ***, const WGSL::Type *))*(&off_1E0FD6CA0 + v50))(&v82, a2);
      }
LABEL_74:
      WGSL::Metal::visitArguments(this, a3, 0);
      return;
    }
  }
  if (!v13)
    goto LABEL_22;
  v68 = a2;
  v69 = (const char *)this;
  v70 = &v68;
  v71 = this;
  v72 = this;
  v73 = this;
  v74 = this;
  v75 = this;
  v76 = this;
  v77 = this;
  v78 = this;
  v79 = this;
  v80 = this;
  v81 = this;
  v14 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v14 == -1)
    goto LABEL_110;
  v82 = &v69;
  ((void (*)(const char ***, const WGSL::Type *))*(&off_1E0FD6CA0 + v14))(&v82, a2);
  v15 = *((_QWORD *)this + 5);
  LOBYTE(v69) = 40;
  v16 = *(_QWORD *)(v15 + 8);
  if (v16 && (v17 = *(unsigned int *)(v15 + 16), v17 < *(_DWORD *)(v16 + 4)) && !*(_QWORD *)v15)
  {
    v54 = *(_DWORD *)(v16 + 16);
    v55 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(v15 + 16) = v17 + 1;
    if ((v54 & 4) != 0)
      *(_BYTE *)(v55 + v17) = 40;
    else
      *(_WORD *)(v55 + 2 * v17) = 40;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if (v11 == 59)
  {
    if (*((_DWORD *)a2 + 12) != 3)
      goto LABEL_110;
    v18 = *(const WGSL::Type **)a2;
  }
  else
  {
    v18 = 0;
  }
  WTF::StringBuilder::append();
  ++*((_DWORD *)this + 14);
  v23 = *((unsigned int *)a3 + 21);
  if ((_DWORD)v23)
  {
    v24 = (WGSL::AST::Expression **)*((_QWORD *)a3 + 9);
    if (v12)
    {
      v25 = 8 * v23;
      do
      {
        v26 = *v24;
        v27 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
        v28 = (4 * *((_DWORD *)this + 14));
        v29 = *((_QWORD *)v27 + 1);
        if ((v29 || (v29 = *(_QWORD *)v27) != 0) && (*(_BYTE *)(v29 + 16) & 4) == 0)
        {
          v30 = (void *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v27);
          if (v30)
            v31 = (_DWORD)v28 == 0;
          else
            v31 = 1;
          if (!v31)
            memset_pattern16(v30, asc_18260FF50, 2 * v28);
        }
        else
        {
          v32 = (void *)MEMORY[0x186DAB068]();
          if (v32)
            v33 = (_DWORD)v28 == 0;
          else
            v33 = 1;
          if (!v33)
            memset(v32, 32, v28);
        }
        (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, WGSL::AST::Expression *))(*(_QWORD *)this
                                                                                                 + 208))(this, v26);
        WTF::StringBuilder::append();
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    else
    {
      v34 = 8 * v23;
      do
      {
        v35 = *v24;
        v36 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
        v37 = (4 * *((_DWORD *)this + 14));
        v38 = *((_QWORD *)v36 + 1);
        if ((v38 || (v38 = *(_QWORD *)v36) != 0) && (*(_BYTE *)(v38 + 16) & 4) == 0)
        {
          v39 = (void *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v36);
          if (v39)
            v40 = (_DWORD)v37 == 0;
          else
            v40 = 1;
          if (!v40)
            memset_pattern16(v39, asc_18260FF50, 2 * v37);
        }
        else
        {
          v41 = (void *)MEMORY[0x186DAB068]();
          if (v41)
            v42 = (_DWORD)v37 == 0;
          else
            v42 = 1;
          if (!v42)
            memset(v41, 32, v37);
        }
        WGSL::Metal::FunctionDefinitionWriter::visit(this, v18, v35);
        WTF::StringBuilder::append();
        ++v24;
        v34 -= 8;
      }
      while (v34);
    }
  }
  v43 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v43;
  v44 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  LODWORD(v82) = v43;
  v69 = "})";
  LODWORD(v70) = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v44, (int *)&v82, (uint64_t)&v69);
}

uint64_t WGSL::Metal::emitDynamicOffset(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  char *v3;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringBuilder *v11;
  int v12;
  const char *v14;
  const char **v15;
  WGSL::Metal *v16;
  WGSL::Metal *v17;
  WGSL::Metal *v18;
  WGSL::Metal *v19;
  WGSL::Metal *v20;
  WGSL::Metal *v21;
  WGSL::Metal *v22;
  WGSL::Metal *v23;
  WGSL::Metal *v24;
  WGSL::Metal *v25;
  WGSL::Metal *v26;
  const char *v27;
  int v28;
  const char **v29;
  int v30;

  v3 = *(char **)(*((_QWORD *)a2 + 8) + 24);
  if (*((_DWORD *)v3 + 12) != 11)
    goto LABEL_11;
  v6 = *v3;
  if (v6 > 5)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v7 = v6;
    v8 = (&off_1E0FD6E50)[v7];
    v9 = *(_QWORD *)((char *)&unk_18260FF90 + v7 * 8);
  }
  WTF::StringBuilder::append();
  v27 = v3;
  v14 = (const char *)this;
  v15 = &v27;
  v16 = this;
  v17 = this;
  v18 = this;
  v19 = this;
  v20 = this;
  v21 = this;
  v22 = this;
  v23 = this;
  v24 = this;
  v25 = this;
  v26 = this;
  v10 = *((unsigned int *)v3 + 12);
  if ((_DWORD)v10 == -1)
  {
LABEL_11:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_12;
  }
  v29 = &v14;
  ((void (*)(const char ***, char *))*(&off_1E0FD6CA0 + v10))(&v29, v3);
  v11 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v14 = ")(((";
  LODWORD(v15) = 4;
  v12 = v9 - 1;
  if (!v9)
    v12 = 0;
  v29 = (const char **)v8;
  v30 = v12;
  v27 = " uint8_t*)&(";
  v28 = 12;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v11, (unint64_t *)&v14, (uint64_t)&v29, (uint64_t)&v27);
  if (!*((_DWORD *)a2 + 21)
    || ((*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9)),
        WTF::StringBuilder::append(),
        *((_DWORD *)a2 + 21) <= 1u))
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1824CFE68);
  }
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8));
  return WTF::StringBuilder::append();
}

void WGSL::Metal::emitArrayLength()
{
  __break(0xC471u);
}

uint64_t WGSL::Metal::emitAtomicAdd(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_fetch_add_explicit";
  v14 = 25;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicAnd(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_fetch_and_explicit";
  v14 = 25;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicExchange(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_exchange_explicit";
  v14 = 24;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicLoad(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_load_explicit";
  v14 = 20;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicMax(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_fetch_max_explicit";
  v14 = 25;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicMin(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_fetch_min_explicit";
  v14 = 25;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicOr(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_fetch_or_explicit";
  v14 = 24;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicStore(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_store_explicit";
  v14 = 21;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicSub(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_fetch_sub_explicit";
  v14 = 25;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitAtomicXor(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WTF::StringBuilder *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  const char *v13;
  int v14;

  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = "atomic_fetch_xor_explicit";
  v14 = 25;
  v12 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v13, &v12);
  v6 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 9);
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        WTF::StringBuilder::append();
        (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return WTF::StringBuilder::append();
}

_DWORD *WGSL::Metal::emitDegrees(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  WTF::StringBuilder *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  _DWORD *v14;
  const char *v15;
  int v16;

  result = (_DWORD *)*((_QWORD *)this + 5);
  LOBYTE(v15) = 40;
  v6 = *((_QWORD *)result + 1);
  if (v6 && (v7 = result[4], v7 < *(_DWORD *)(v6 + 4)) && !*(_QWORD *)result)
  {
    v10 = *(_DWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 8);
    result[4] = v7 + 1;
    if ((v10 & 4) != 0)
      *(_BYTE *)(v11 + v7) = 40;
    else
      *(_WORD *)(v11 + 2 * v7) = 40;
  }
  else
  {
    result = (_DWORD *)WTF::StringBuilder::append();
  }
  if (*((_DWORD *)a2 + 21))
  {
    v8 = (WTF::String *)(*(uint64_t (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    v9 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    WTF::String::number(v8, 57.2957795);
    v16 = 3;
    v14 = v12;
    v15 = " * ";
    v13 = 41;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v9, (unint64_t *)&v15, (uint64_t *)&v14, &v13);
    result = v12;
    if (v12)
    {
      if (*v12 == 2)
        return (_DWORD *)WTF::StringImpl::destroy();
      else
        *v12 -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitDistance(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (!*((_DWORD *)a2 + 21))
    goto LABEL_15;
  if (*(_DWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 9) + 24) + 48))
  {
    (*(void (**)(WGSL::Metal *, _QWORD, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 8), a3);
    return WGSL::Metal::visitArguments(this, a2, 0);
  }
  WTF::StringBuilder::append();
  if (!*((_DWORD *)a2 + 21))
  {
    __break(0xC471u);
    JUMPOUT(0x1824D09E8);
  }
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
  WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21) <= 1u)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x1824D09E0);
  }
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8));
  result = *((_QWORD *)this + 5);
  v6 = *(_QWORD *)(result + 8);
  if (!v6)
    return WTF::StringBuilder::append();
  v7 = *(unsigned int *)(result + 16);
  if (v7 >= *(_DWORD *)(v6 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v8 = *(_DWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v6 + 8);
  *(_DWORD *)(result + 16) = v7 + 1;
  if ((v8 & 4) != 0)
    *(_BYTE *)(v9 + v7) = 41;
  else
    *(_WORD *)(v9 + 2 * v7) = 41;
  return result;
}

WGSL::Metal *WGSL::Metal::emitLength(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WGSL::Metal *v4;

  if (*((_DWORD *)a2 + 21))
  {
    v4 = this;
    WTF::StringBuilder::append();
    return (WGSL::Metal *)WGSL::Metal::visitArguments(v4, a2, 0);
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WGSL::Metal::emitPack2x16Float(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitPack4xI8(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitPack4xI8Clamp(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitPack4xU8(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitPack4xU8Clamp(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WGSL::Metal::emitQuantizeToF16(_QWORD *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringBuilder *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  _WORD *v19;
  int8x16_t *v20;
  uint64_t v21;
  int8x16_t *v22;
  size_t v23;
  _BYTE *v24;
  unint64_t v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  _WORD *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  _WORD *v42;
  int8x16_t *v43;
  __int16 v44;
  _WORD *v45;
  size_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  _BYTE *v50;
  int8x16_t *v51;
  char v52;
  _WORD *v53;
  int8x16_t *v54;
  uint64_t v55;
  _WORD *v56;
  unint64_t v57;
  __int128 v58;
  char *v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  _WORD *v70;
  int8x16_t *v71;
  __int16 v72;
  uint64_t v73;
  _BYTE *v74;
  int8x16_t *v75;
  size_t v76;
  _BYTE *v77;
  unint64_t v78;
  unsigned __int128 *v79;
  unsigned __int128 v80;
  size_t v81;
  unint64_t v82;
  unint64_t v83;
  BOOL v84;
  unint64_t v85;
  _BYTE *v86;
  int8x16_t *v87;
  char v88;
  uint8x8_t *v89;
  uint16x8_t *v90;
  unint64_t v91;
  uint8x16_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint8x8_t *v95;
  uint16x8_t *v96;
  unint64_t v97;
  uint8x8_t v98;
  uint8x8_t *v99;
  uint16x8_t *v100;
  unint64_t v101;
  uint8x16_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  uint8x8_t *v105;
  uint16x8_t *v106;
  unint64_t v107;
  uint8x8_t v108;
  int8x16_t *v109;
  int8x16_t *v110;
  unint64_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int16x8_t *v116;
  int8x8_t *v117;
  unint64_t v118;
  int16x8_t v119;
  int8x16_t *v120;
  int8x16_t *v121;
  unint64_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int16x8_t *v127;
  int8x8_t *v128;
  unint64_t v129;
  int16x8_t v130;
  uint64_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;

  if (!*((_DWORD *)a2 + 21))
  {
    __break(0xC471u);
    return this;
  }
  v3 = this;
  v4 = **((_QWORD **)a2 + 9);
  v5 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  v6 = *(_QWORD *)(v4 + 24);
  if (v6 && *(_DWORD *)(v6 + 48) == 1)
  {
    WTF::String::number((WTF::String *)*(unsigned __int8 *)(v6 + 8));
    v7 = v131;
    if (*v5 == 2)
    {
      WTF::StringImpl::destroy();
      v8 = (WTF::StringBuilder *)v3[5];
      if (!v131)
      {
LABEL_47:
        v9 = 1;
        goto LABEL_10;
      }
    }
    else
    {
      *v5 -= 2;
      v8 = (WTF::StringBuilder *)v3[5];
      if (!v131)
        goto LABEL_47;
    }
  }
  else
  {
    v8 = (WTF::StringBuilder *)this[5];
    v7 = MEMORY[0x1E0CBEF70];
  }
  v9 = 0;
LABEL_10:
  v10 = *((_QWORD *)v8 + 1);
  if ((v10 || (v10 = *(_QWORD *)v8) != 0) && (*(_BYTE *)(v10 + 16) & 4) == 0
    || (v9 & 1) == 0 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    v11 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v8);
    if (!v11)
      goto LABEL_115;
    *(_QWORD *)v11 = 0x61006F006C0066;
    *(_WORD *)(v11 + 8) = 116;
    if (v9)
    {
      v12 = 0;
      *(_QWORD *)(v11 + 10) = 0x6C006100680028;
      *(_WORD *)(v11 + 18) = 102;
      v13 = (_WORD *)(v11 + 20);
LABEL_89:
      v13[v12] = 40;
      goto LABEL_115;
    }
    v19 = (_WORD *)(v11 + 10);
    v20 = *(int8x16_t **)(v7 + 8);
    v21 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) == 0)
    {
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == 1)
          *v19 = v20->i16[0];
        else
          memcpy((void *)(v11 + 10), v20, 2 * v21);
      }
      v53 = &v19[*(unsigned int *)(v7 + 4)];
      *(_QWORD *)v53 = 0x6C006100680028;
      v53[4] = 102;
      v13 = v53 + 5;
LABEL_66:
      v54 = *(int8x16_t **)(v7 + 8);
      v55 = *(unsigned int *)(v7 + 4);
      if ((*(_BYTE *)(v7 + 16) & 4) == 0)
      {
        if ((_DWORD)v55)
        {
          if ((_DWORD)v55 == 1)
            *v13 = v54->i16[0];
          else
            memcpy(v13, v54, 2 * v55);
        }
        goto LABEL_88;
      }
      v56 = &v13[v55];
      if (v55 < 0x40)
      {
        v57 = (unint64_t)v13;
      }
      else
      {
        v57 = (unint64_t)&v13[v55 & 0xFFFFFFC0];
        v58 = 0uLL;
        v59 = (char *)v13;
        do
        {
          v133.val[0] = *v54;
          v60 = v54[1];
          v135.val[0] = v54[2];
          v61 = v54[3];
          v54 += 4;
          v62 = v61;
          v135.val[1] = 0uLL;
          v137.val[0] = v60;
          v133.val[1] = 0uLL;
          v63 = v59;
          vst2q_s8(v63, v133);
          v63 += 32;
          v137.val[1] = 0uLL;
          vst2q_s8(v63, v137);
          v64 = v59 + 64;
          vst2q_s8(v64, v135);
          v65 = v59 + 96;
          vst2q_s8(v65, *(int8x16x2_t *)(&v58 - 1));
          v59 += 128;
        }
        while (v59 != (char *)v57);
      }
      if ((_WORD *)v57 == v56)
      {
LABEL_88:
        v12 = *(unsigned int *)(v7 + 4);
        goto LABEL_89;
      }
      v66 = (unint64_t)&v13[v55 - 1] - v57;
      if (v66 < 0xE
        || (v57 < (unint64_t)v54->u64 + (v66 >> 1) + 1
          ? (v67 = (unint64_t)v54 >= (v66 & 0xFFFFFFFFFFFFFFFELL) + v57 + 2)
          : (v67 = 1),
            !v67))
      {
        v70 = (_WORD *)v57;
        v71 = v54;
        goto LABEL_85;
      }
      v68 = (v66 >> 1) + 1;
      if (v66 >= 0x3E)
      {
        v69 = v68 & 0xFFFFFFFFFFFFFFE0;
        v99 = (uint8x8_t *)&v54[1];
        v100 = (uint16x8_t *)(v57 + 32);
        v101 = v68 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v102 = *(uint8x16_t *)v99[-2].i8;
          v103 = vmovl_u8(*v99);
          v104 = vmovl_high_u8(*(uint8x16_t *)v99->i8);
          v100[-2] = vmovl_u8(*(uint8x8_t *)v102.i8);
          v100[-1] = vmovl_high_u8(v102);
          *v100 = v103;
          v100[1] = v104;
          v100 += 4;
          v99 += 4;
          v101 -= 32;
        }
        while (v101);
        if (v68 == v69)
          goto LABEL_88;
        if ((v68 & 0x18) == 0)
        {
          v71 = (int8x16_t *)((char *)v54 + v69);
          v70 = (_WORD *)(v57 + 2 * v69);
          do
          {
LABEL_85:
            v72 = v71->u8[0];
            v71 = (int8x16_t *)((char *)v71 + 1);
            *v70++ = v72;
          }
          while (v70 != v56);
          goto LABEL_88;
        }
      }
      else
      {
        v69 = 0;
      }
      v70 = (_WORD *)(v57 + 2 * (v68 & 0xFFFFFFFFFFFFFFF8));
      v71 = (int8x16_t *)((char *)v54 + (v68 & 0xFFFFFFFFFFFFFFF8));
      v105 = (uint8x8_t *)&v54->i8[v69];
      v106 = (uint16x8_t *)(v57 + 2 * v69);
      v107 = v69 - (v68 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v108 = *v105++;
        *v106++ = vmovl_u8(v108);
        v107 += 8;
      }
      while (v107);
      if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_88;
      goto LABEL_85;
    }
    v28 = &v19[v21];
    if (v21 < 0x40)
    {
      v29 = v11 + 10;
    }
    else
    {
      v29 = (unint64_t)&v19[v21 & 0xFFFFFFC0];
      v30 = 0uLL;
      v31 = (char *)(v11 + 10);
      do
      {
        v132.val[0] = *v20;
        v32 = v20[1];
        v134.val[0] = v20[2];
        v33 = v20[3];
        v20 += 4;
        v34 = v33;
        v134.val[1] = 0uLL;
        v136.val[0] = v32;
        v132.val[1] = 0uLL;
        v35 = v31;
        vst2q_s8(v35, v132);
        v35 += 32;
        v136.val[1] = 0uLL;
        vst2q_s8(v35, v136);
        v36 = v31 + 64;
        vst2q_s8(v36, v134);
        v37 = v31 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v30 - 1));
        v31 += 128;
      }
      while (v31 != (char *)v29);
    }
    if ((_WORD *)v29 == v28)
    {
LABEL_50:
      v45 = &v19[*(unsigned int *)(v7 + 4)];
      *(_QWORD *)v45 = 0x6C006100680028;
      v45[4] = 102;
      v13 = v45 + 5;
      goto LABEL_66;
    }
    v38 = v11 + 2 * v21 - v29 + 8;
    if (v38 < 0xE
      || (v29 < (unint64_t)v20->u64 + (v38 >> 1) + 1
        ? (v39 = (unint64_t)v20 >= (v38 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
        : (v39 = 1),
          !v39))
    {
      v42 = (_WORD *)v29;
      v43 = v20;
      goto LABEL_49;
    }
    v40 = (v38 >> 1) + 1;
    if (v38 >= 0x3E)
    {
      v41 = v40 & 0xFFFFFFFFFFFFFFE0;
      v89 = (uint8x8_t *)&v20[1];
      v90 = (uint16x8_t *)(v29 + 32);
      v91 = v40 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v92 = *(uint8x16_t *)v89[-2].i8;
        v93 = vmovl_u8(*v89);
        v94 = vmovl_high_u8(*(uint8x16_t *)v89->i8);
        v90[-2] = vmovl_u8(*(uint8x8_t *)v92.i8);
        v90[-1] = vmovl_high_u8(v92);
        *v90 = v93;
        v90[1] = v94;
        v90 += 4;
        v89 += 4;
        v91 -= 32;
      }
      while (v91);
      if (v40 == v41)
        goto LABEL_50;
      if ((v40 & 0x18) == 0)
      {
        v43 = (int8x16_t *)((char *)v20 + v41);
        v42 = (_WORD *)(v29 + 2 * v41);
        do
        {
LABEL_49:
          v44 = v43->u8[0];
          v43 = (int8x16_t *)((char *)v43 + 1);
          *v42++ = v44;
        }
        while (v42 != v28);
        goto LABEL_50;
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = (_WORD *)(v29 + 2 * (v40 & 0xFFFFFFFFFFFFFFF8));
    v43 = (int8x16_t *)((char *)v20 + (v40 & 0xFFFFFFFFFFFFFFF8));
    v95 = (uint8x8_t *)&v20->i8[v41];
    v96 = (uint16x8_t *)(v29 + 2 * v41);
    v97 = v41 - (v40 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v98 = *v95++;
      *v96++ = vmovl_u8(v98);
      v97 += 8;
    }
    while (v97);
    if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_50;
    goto LABEL_49;
  }
  v14 = MEMORY[0x186DAB068]();
  if (!v14)
    goto LABEL_115;
  v15 = v14;
  *(_BYTE *)(v14 + 4) = 116;
  *(_DWORD *)v14 = 1634692198;
  v16 = (_BYTE *)(v14 + 5);
  if (!v9)
  {
    v22 = *(int8x16_t **)(v7 + 8);
    v23 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((_DWORD)v23)
      {
        if ((_DWORD)v23 == 1)
          *v16 = v22->i8[0];
        else
          memcpy((void *)(v14 + 5), v22, v23);
      }
    }
    else
    {
      v24 = &v16[v23];
      if (v23 < 0x10)
      {
        v25 = v14 + 5;
      }
      else
      {
        v25 = (unint64_t)&v16[v23 & 0xFFFFFFF0];
        v26 = (unsigned __int128 *)(v14 + 5);
        do
        {
          v27 = (unsigned __int128)vld2q_s8(v22->i8);
          v22 += 2;
          *v26++ = v27;
        }
        while (v26 != (unsigned __int128 *)v25);
      }
      if ((_BYTE *)v25 != v24)
      {
        v46 = v14 + v23;
        v47 = v14 + v23 - v25 + 5;
        if (v47 < 8
          || (v25 < (unint64_t)&v22->u64[1] + 2 * v46 + -2 * v25 + 2
            ? (v48 = (unint64_t)v22 >= v46 + 5)
            : (v48 = 1),
              !v48))
        {
          v50 = (_BYTE *)v25;
          v51 = v22;
          goto LABEL_62;
        }
        if (v47 >= 0x20)
        {
          v49 = v47 & 0xFFFFFFFFFFFFFFE0;
          v109 = v22 + 2;
          v110 = (int8x16_t *)(v25 + 16);
          v111 = v47 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v113 = v109[-2];
            v112 = v109[-1];
            v115 = *v109;
            v114 = v109[1];
            v109 += 4;
            v110[-1] = vuzp1q_s8(v113, v112);
            *v110 = vuzp1q_s8(v115, v114);
            v110 += 2;
            v111 -= 32;
          }
          while (v111);
          if (v47 == v49)
            goto LABEL_91;
          if ((v47 & 0x18) == 0)
          {
            v51 = (int8x16_t *)((char *)v22 + 2 * v49);
            v50 = (_BYTE *)(v25 + v49);
            do
            {
LABEL_62:
              v52 = v51->i8[0];
              v51 = (int8x16_t *)((char *)v51 + 2);
              *v50++ = v52;
            }
            while (v50 != v24);
            goto LABEL_91;
          }
        }
        else
        {
          v49 = 0;
        }
        v50 = (_BYTE *)(v25 + (v47 & 0xFFFFFFFFFFFFFFF8));
        v51 = (int8x16_t *)((char *)v22 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
        v116 = (int16x8_t *)((char *)v22 + 2 * v49);
        v117 = (int8x8_t *)(v25 + v49);
        v118 = v49 - (v47 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v119 = *v116++;
          *v117++ = vmovn_s16(v119);
          v118 += 8;
        }
        while (v118);
        if (v47 != (v47 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_62;
      }
    }
LABEL_91:
    v73 = *(unsigned int *)(v7 + 4);
    v74 = &v16[v73];
    v74[4] = 102;
    *(_DWORD *)v74 = 1818322984;
    v18 = &v16[v73 + 5];
    v75 = *(int8x16_t **)(v7 + 8);
    v76 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((_DWORD)v76)
      {
        if ((_DWORD)v76 == 1)
          *v18 = v75->i8[0];
        else
          memcpy(v18, v75, v76);
      }
      goto LABEL_113;
    }
    v77 = &v18[v76];
    if (v76 < 0x10)
    {
      v78 = (unint64_t)v18;
    }
    else
    {
      v78 = (unint64_t)&v18[v76 & 0xFFFFFFF0];
      v79 = (unsigned __int128 *)v18;
      do
      {
        v80 = (unsigned __int128)vld2q_s8(v75->i8);
        v75 += 2;
        *v79++ = v80;
      }
      while (v79 != (unsigned __int128 *)v78);
    }
    if ((_BYTE *)v78 == v77)
    {
LABEL_113:
      v17 = *(unsigned int *)(v7 + 4);
      goto LABEL_114;
    }
    v81 = v15 + v73 + v76;
    v82 = v81 - v78 + 10;
    if (v82 < 8
      || ((v83 = v15 + v76 + v73 + 10, v78 < (unint64_t)v75[1].u64 + 2 * v81 + -2 * v78 + 4)
        ? (v84 = (unint64_t)v75 >= v83)
        : (v84 = 1),
          !v84))
    {
      v86 = (_BYTE *)v78;
      v87 = v75;
      goto LABEL_110;
    }
    if (v82 >= 0x20)
    {
      v85 = v82 & 0xFFFFFFFFFFFFFFE0;
      v120 = v75 + 2;
      v121 = (int8x16_t *)(v78 + 16);
      v122 = v82 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v124 = v120[-2];
        v123 = v120[-1];
        v126 = *v120;
        v125 = v120[1];
        v120 += 4;
        v121[-1] = vuzp1q_s8(v124, v123);
        *v121 = vuzp1q_s8(v126, v125);
        v121 += 2;
        v122 -= 32;
      }
      while (v122);
      if (v82 == v85)
        goto LABEL_113;
      if ((v82 & 0x18) == 0)
      {
        v87 = (int8x16_t *)((char *)v75 + 2 * v85);
        v86 = (_BYTE *)(v78 + v85);
        do
        {
LABEL_110:
          v88 = v87->i8[0];
          v87 = (int8x16_t *)((char *)v87 + 2);
          *v86++ = v88;
        }
        while (v86 != v77);
        goto LABEL_113;
      }
    }
    else
    {
      v85 = 0;
    }
    v86 = (_BYTE *)(v78 + (v82 & 0xFFFFFFFFFFFFFFF8));
    v87 = (int8x16_t *)((char *)v75 + 2 * (v82 & 0xFFFFFFFFFFFFFFF8));
    v127 = (int16x8_t *)((char *)v75 + 2 * v85);
    v128 = (int8x8_t *)(v78 + v85);
    v129 = v85 - (v82 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v130 = *v127++;
      *v128++ = vmovn_s16(v130);
      v129 += 8;
    }
    while (v129);
    if (v82 == (v82 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_113;
    goto LABEL_110;
  }
  v17 = 0;
  *(_BYTE *)(v14 + 9) = 102;
  *(_DWORD *)v16 = 1818322984;
  v18 = (_BYTE *)(v14 + 10);
LABEL_114:
  v18[v17] = 40;
LABEL_115:
  (*(void (**)(_QWORD *, uint64_t))(*v3 + 208))(v3, v4);
  this = (_QWORD *)WTF::StringBuilder::append();
  if ((v9 & 1) == 0)
  {
    if (*(_DWORD *)v7 == 2)
      return (_QWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)v7 -= 2;
  }
  return this;
}

_DWORD *WGSL::Metal::emitRadians(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  WTF::StringBuilder *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  _DWORD *v14;
  const char *v15;
  int v16;

  result = (_DWORD *)*((_QWORD *)this + 5);
  LOBYTE(v15) = 40;
  v6 = *((_QWORD *)result + 1);
  if (v6 && (v7 = result[4], v7 < *(_DWORD *)(v6 + 4)) && !*(_QWORD *)result)
  {
    v10 = *(_DWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 8);
    result[4] = v7 + 1;
    if ((v10 & 4) != 0)
      *(_BYTE *)(v11 + v7) = 40;
    else
      *(_WORD *)(v11 + 2 * v7) = 40;
  }
  else
  {
    result = (_DWORD *)WTF::StringBuilder::append();
  }
  if (*((_DWORD *)a2 + 21))
  {
    v8 = (WTF::String *)(*(uint64_t (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    v9 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    WTF::String::number(v8, 0.0174532925);
    v16 = 3;
    v14 = v12;
    v15 = " * ";
    v13 = 41;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v9, (unint64_t *)&v15, (uint64_t *)&v14, &v13);
    result = v12;
    if (v12)
    {
      if (*v12 == 2)
        return (_DWORD *)WTF::StringImpl::destroy();
      else
        *v12 -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitStorageBarrier(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitTextureBarrier(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitTextureDimensions(WTF::StringBuilder **this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t v3;
  unsigned int v4;
  WTF::StringBuilder *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12[2];
  WGSL::Metal *v13;
  char v14;
  _DWORD *v15;
  const char *v16;
  int v17;

  v12[1] = a2;
  v13 = (WGSL::Metal *)this;
  v12[0] = &v13;
  v3 = *((_QWORD *)a2 + 3);
  if (!v3 || *(_DWORD *)(v3 + 48) != 1)
    return WGSL::Metal::emitTextureDimensions(WGSL::Metal::FunctionDefinitionWriter *,WGSL::AST::CallExpression &)::$_0::operator()(v12, (uint64_t)"width", 6);
  v4 = *(unsigned __int8 *)(v3 + 8);
  v5 = this[5];
  WTF::String::number((WTF::String *)*(unsigned __int8 *)(v3 + 8));
  v16 = "uint";
  v17 = 4;
  v15 = v11;
  v14 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v5, (unint64_t *)&v16, (uint64_t *)&v15, &v14);
  if (v11)
  {
    if (*v11 == 2)
      WTF::StringImpl::destroy();
    else
      *v11 -= 2;
  }
  WGSL::Metal::emitTextureDimensions(WGSL::Metal::FunctionDefinitionWriter *,WGSL::AST::CallExpression &)::$_0::operator()(v12, (uint64_t)"width", 6);
  WTF::StringBuilder::append();
  WGSL::Metal::emitTextureDimensions(WGSL::Metal::FunctionDefinitionWriter *,WGSL::AST::CallExpression &)::$_0::operator()(v12, (uint64_t)"height", 7);
  if (v4 >= 3)
  {
    WTF::StringBuilder::append();
    WGSL::Metal::emitTextureDimensions(WGSL::Metal::FunctionDefinitionWriter *,WGSL::AST::CallExpression &)::$_0::operator()(v12, (uint64_t)"depth", 6);
  }
  result = *((_QWORD *)v13 + 5);
  LOBYTE(v16) = 41;
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    return WTF::StringBuilder::append();
  v8 = *(unsigned int *)(result + 16);
  if (v8 >= *(_DWORD *)(v7 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v9 = *(_DWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 8);
  *(_DWORD *)(result + 16) = v8 + 1;
  if ((v9 & 4) != 0)
    *(_BYTE *)(v10 + v8) = 41;
  else
    *(_WORD *)(v10 + 2 * v8) = 41;
  return result;
}

uint64_t WGSL::Metal::emitTextureGather(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t i;
  uint64_t result;
  uint64_t v21;
  WTF::StringBuilder *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  const char *v26;
  int v27;
  const char *v28;
  int v29;

  v3 = *((unsigned int *)a2 + 21);
  if (!(_DWORD)v3)
  {
    __break(0xC471u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v6 = (_QWORD *)*((_QWORD *)a2 + 9);
  v7 = *v6;
  v8 = *(_DWORD *)(*(_QWORD *)(*v6 + 24) + 48);
  if (v8)
  {
    v9 = 0;
    v10 = -1;
    v11 = 1;
    v12 = 1;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(v7 + 56))
    goto LABEL_49;
  v13 = *(_DWORD *)(v7 + 48);
  switch(v13)
  {
    case 5:
      v14 = *(_QWORD *)(v7 + 32);
      break;
    case 4:
      v14 = *(unsigned int *)(v7 + 32);
      break;
    case 3:
      v14 = *(int *)(v7 + 32);
      break;
    default:
LABEL_45:
      __break(0xC471u);
      JUMPOUT(0x1824D1B40);
  }
  v9 = "x";
  switch(v14)
  {
    case 0:
      break;
    case 1:
      v9 = "y";
      break;
    case 2:
      v9 = "z";
      break;
    case 3:
      v9 = "w";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1824D1B60);
  }
  if (v3 <= 1)
  {
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x1824D1B78);
  }
  v15 = *(_QWORD *)(v6[1] + 24);
  if (*(_DWORD *)(v15 + 48) != 7)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_45;
  }
  if ((*(_BYTE *)(v15 + 8) & 0xFE) != 2)
    goto LABEL_26;
  v16 = *(unsigned __int8 ***)(v6[v3 - 1] + 24);
  if (!v16)
    goto LABEL_27;
  if (*((_DWORD *)v16 + 12) != 1)
    goto LABEL_27;
  v17 = *v16;
  if (!v17)
    goto LABEL_27;
  while (1)
  {
    v18 = *((_DWORD *)v17 + 12);
    if (v18 != 10)
      break;
    v17 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
    if (!v17)
      goto LABEL_27;
  }
  if (!v18 && *v17 < 3u)
  {
LABEL_26:
    v12 = 1;
    v11 = 2;
    v10 = 1;
  }
  else
  {
LABEL_27:
    v12 = 0;
    v10 = 1;
    v11 = 2;
  }
LABEL_28:
  (*(void (**)(WGSL::Metal *))(*(_QWORD *)this + 208))(this);
  WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21) > v11)
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v11));
    for (i = v11 + 1; i < *((unsigned int *)a2 + 21); ++i)
    {
      WTF::StringBuilder::append();
      if (i >= *((unsigned int *)a2 + 21))
      {
        __break(0xC471u);
        JUMPOUT(0x1824D1B68);
      }
      (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * i));
    }
  }
  if ((v12 & 1) != 0)
  {
    if (v8)
      goto LABEL_34;
  }
  else
  {
    WTF::StringBuilder::append();
    if (v8)
    {
LABEL_34:
      result = *((_QWORD *)this + 5);
      LOBYTE(v28) = 41;
      v21 = *(_QWORD *)(result + 8);
      if (!v21)
        return WTF::StringBuilder::append();
      goto LABEL_38;
    }
  }
  v22 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v28 = ", component::";
  v29 = 13;
  v26 = v9;
  v27 = v10;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v22, (unint64_t *)&v28, (uint64_t)&v26);
  result = *((_QWORD *)this + 5);
  LOBYTE(v28) = 41;
  v21 = *(_QWORD *)(result + 8);
  if (!v21)
    return WTF::StringBuilder::append();
LABEL_38:
  v23 = *(unsigned int *)(result + 16);
  if (v23 >= *(_DWORD *)(v21 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v24 = *(_DWORD *)(v21 + 16);
  v25 = *(_QWORD *)(v21 + 8);
  *(_DWORD *)(result + 16) = v23 + 1;
  if ((v24 & 4) != 0)
    *(_BYTE *)(v25 + v23) = 41;
  else
    *(_WORD *)(v25 + 2 * v23) = 41;
  return result;
}

WGSL::Metal *WGSL::Metal::emitTextureGatherCompare(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WGSL::Metal *v4;

  if (*((_DWORD *)a2 + 21))
  {
    v4 = this;
    (*(void (**)(WGSL::Metal *, _QWORD, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9), a3);
    WTF::StringBuilder::append();
    return (WGSL::Metal *)WGSL::Metal::visitArguments(v4, a2, (WGSL::AST::CallExpression *)1);
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

void WGSL::Metal::emitTextureLoad(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  unsigned int v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringBuilder *v11;
  WTF::StringBuilder *v12;
  WTF::StringBuilder *v13;
  WTF::StringBuilder *v14;
  WTF::StringBuilder *v15;
  int v16;
  WTF::StringBuilder *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  const char *v26;
  WTF::StringBuilder *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  const char *v43;
  int v44;
  int v45;

  v3 = *((_DWORD *)a2 + 21);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D2184);
  }
  v6 = (_QWORD *)*((_QWORD *)a2 + 9);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 24);
  if (v8 && !*(_DWORD *)(v8 + 48) && *(_BYTE *)v8 == 10)
  {
    if (v3 > 1)
    {
      v9 = v6[1];
      WTF::StringBuilder::append();
      v10 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v10;
      v11 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v45 = v10;
      v43 = "auto __coords = uint2((";
      v44 = 23;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v11, &v45, (uint64_t)&v43);
      (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
      WTF::StringBuilder::append();
      (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v9);
      WTF::StringBuilder::append();
      v12 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v45 = *((_DWORD *)this + 14);
      v43 = "auto __y = float(";
      v44 = 17;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v12, &v45, (uint64_t)&v43);
      (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
      WTF::StringBuilder::append();
      v13 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v45 = *((_DWORD *)this + 14);
      v43 = "auto __cbcr = float2(";
      v44 = 21;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v13, &v45, (uint64_t)&v43);
      (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
      WTF::StringBuilder::append();
      v14 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v45 = *((_DWORD *)this + 14);
      v43 = "auto __ycbcr = float3(__y, __cbcr);\n";
      v44 = 36;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v14, &v45, (uint64_t)&v43);
      v15 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v45 = *((_DWORD *)this + 14);
      v43 = "float4(";
      v44 = 7;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v15, &v45, (uint64_t)&v43);
      (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
      WTF::StringBuilder::append();
      v16 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v16;
      v17 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v45 = v16;
      v43 = "})";
      v44 = 2;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v17, &v45, (uint64_t)&v43);
      return;
    }
    __break(0xC471u);
LABEL_54:
    JUMPOUT(0x1824D2000);
  }
  (*(void (**)(WGSL::Metal *, uint64_t, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, v7, a3);
  WTF::StringBuilder::append();
  v18 = *((_QWORD *)this + 5);
  LOBYTE(v43) = 40;
  v19 = *(_QWORD *)(v18 + 8);
  if (v19 && (v20 = *(unsigned int *)(v18 + 16), v20 < *(_DWORD *)(v19 + 4)) && !*(_QWORD *)v18)
  {
    v37 = *(_DWORD *)(v19 + 16);
    v38 = *(_QWORD *)(v19 + 8);
    *(_DWORD *)(v18 + 16) = v20 + 1;
    if ((v37 & 4) != 0)
      *(_BYTE *)(v38 + v20) = 40;
    else
      *(_WORD *)(v38 + 2 * v20) = 40;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v21 = *((unsigned int *)a2 + 21);
  if (v21 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D218CLL);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 24);
  if (v22 && *(_DWORD *)(v22 + 48) == 1)
  {
    v23 = *(unsigned __int8 *)(v22 + 8);
    if (v23 == 2)
    {
      v24 = 0;
      v25 = 5;
      v26 = "uint2";
    }
    else
    {
      if (v23 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1824D217CLL);
      }
      v24 = 0;
      v25 = 5;
      v26 = "uint3";
    }
  }
  else
  {
    v25 = 4;
    v26 = "uint";
    v24 = 1;
  }
  v27 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v43 = v26;
  v44 = v25;
  LOBYTE(v45) = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v27, (unint64_t *)&v43, (char *)&v45);
  if (*((_DWORD *)a2 + 21) < 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D2194);
  }
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8));
  v28 = *((_QWORD *)this + 5);
  LOBYTE(v43) = 41;
  v29 = *(_QWORD *)(v28 + 8);
  if (v29 && (v30 = *(unsigned int *)(v28 + 16), v30 < *(_DWORD *)(v29 + 4)) && !*(_QWORD *)v28)
  {
    v39 = *(_DWORD *)(v29 + 16);
    v40 = *(_QWORD *)(v29 + 8);
    *(_DWORD *)(v28 + 16) = v30 + 1;
    if ((v39 & 4) != 0)
      *(_BYTE *)(v40 + v30) = 41;
    else
      *(_WORD *)(v40 + 2 * v30) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if ((_DWORD)v21 != 2)
  {
    if ((v24 & 1) != 0)
    {
      v31 = -v21;
      v32 = 2;
      while (1)
      {
        if (v31 + v32 != -1)
        {
          WTF::StringBuilder::append();
          if (v32 >= *((unsigned int *)a2 + 21))
            goto LABEL_30;
          (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v32));
        }
        ++v32;
        if (!(v31 + v32))
          goto LABEL_34;
      }
    }
    v33 = 2;
    while (1)
    {
      WTF::StringBuilder::append();
      if (v33 >= *((unsigned int *)a2 + 21))
        break;
      (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v33++));
      if (v21 == v33)
        goto LABEL_34;
    }
LABEL_30:
    __break(0xC471u);
    goto LABEL_54;
  }
LABEL_34:
  v34 = *((_QWORD *)this + 5);
  LOBYTE(v43) = 41;
  v35 = *(_QWORD *)(v34 + 8);
  if (v35 && (v36 = *(unsigned int *)(v34 + 16), v36 < *(_DWORD *)(v35 + 4)) && !*(_QWORD *)v34)
  {
    v41 = *(_DWORD *)(v35 + 16);
    v42 = *(_QWORD *)(v35 + 8);
    *(_DWORD *)(v34 + 16) = v36 + 1;
    if ((v41 & 4) != 0)
      *(_BYTE *)(v42 + v36) = 41;
    else
      *(_WORD *)(v42 + 2 * v36) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
}

uint64_t WGSL::Metal::emitTextureNumLayers(uint64_t this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(uint64_t, _QWORD, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9), a3);
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WGSL::Metal::emitTextureNumLevels(uint64_t this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(uint64_t, _QWORD, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9), a3);
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WGSL::Metal::emitTextureNumSamples(uint64_t this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(uint64_t, _QWORD, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9), a3);
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

WGSL::Metal *WGSL::Metal::emitTextureSample(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WGSL::Metal *v4;

  if (*((_DWORD *)a2 + 21))
  {
    v4 = this;
    (*(void (**)(WGSL::Metal *, _QWORD, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9), a3);
    WTF::StringBuilder::append();
    return (WGSL::Metal *)WGSL::Metal::visitArguments(v4, a2, (WGSL::AST::CallExpression *)1);
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

void WGSL::Metal::emitTextureSampleBaseClampToEdge(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  unsigned int v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringBuilder *v12;
  WTF::StringBuilder *v13;
  WTF::StringBuilder *v14;
  WTF::StringBuilder *v15;
  WTF::StringBuilder *v16;
  int v17;
  WTF::StringBuilder *v18;
  const char *v19;
  int v20;
  int v21;

  v3 = *((_DWORD *)a2 + 21);
  if (!v3)
    goto LABEL_10;
  v6 = (_QWORD *)*((_QWORD *)a2 + 9);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 24);
  if (v8 && *(_DWORD *)(v8 + 48) == 7)
  {
    (*(void (**)(WGSL::Metal *, uint64_t, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, v7, a3);
    WTF::StringBuilder::append();
    WGSL::Metal::visitArguments(this, a2, (WGSL::AST::CallExpression *)1);
    return;
  }
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D25FCLL);
  }
  if (v3 == 2)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x1824D25F4);
  }
  v9 = v6[1];
  v10 = v6[2];
  WTF::StringBuilder::append();
  v11 = *((_DWORD *)this + 14) + 1;
  *((_DWORD *)this + 14) = v11;
  v12 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v21 = v11;
  v19 = "auto __coords = (";
  v20 = 17;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v12, &v21, (uint64_t)&v19);
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
  WTF::StringBuilder::append();
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v10);
  WTF::StringBuilder::append();
  v13 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v21 = *((_DWORD *)this + 14);
  v19 = "auto __y = float(";
  v20 = 17;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v13, &v21, (uint64_t)&v19);
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
  WTF::StringBuilder::append();
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v9);
  WTF::StringBuilder::append();
  v14 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v21 = *((_DWORD *)this + 14);
  v19 = "auto __cbcr = float2(";
  v20 = 21;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v14, &v21, (uint64_t)&v19);
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
  WTF::StringBuilder::append();
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v9);
  WTF::StringBuilder::append();
  v15 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v21 = *((_DWORD *)this + 14);
  v19 = "auto __ycbcr = float3(__y, __cbcr);\n";
  v20 = 36;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v15, &v21, (uint64_t)&v19);
  v16 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v21 = *((_DWORD *)this + 14);
  v19 = "float4(";
  v20 = 7;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v16, &v21, (uint64_t)&v19);
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
  WTF::StringBuilder::append();
  v17 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v17;
  v18 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v21 = v17;
  v19 = "})";
  v20 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v18, &v21, (uint64_t)&v19);
}

uint64_t WGSL::Metal::emitTextureSampleBias(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t v4;
  int v6;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (!*((_DWORD *)a2 + 21))
  {
    __break(0xC471u);
    JUMPOUT(0x1824D28A4);
  }
  v4 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 24);
  if (*(_DWORD *)(v4 + 48) != 7)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_36;
  }
  v6 = *(unsigned __int8 *)(v4 + 8);
  if (v6 == 6 || v6 == 3)
    v8 = 4;
  else
    v8 = 3;
  (*(void (**)(WGSL::Metal *))(*(_QWORD *)this + 208))(this);
  WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21) < 2u)
    goto LABEL_36;
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8));
  for (i = 2;
        i != v8;
        (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * i++)))
  {
    WTF::StringBuilder::append();
    if (i >= *((unsigned int *)a2 + 21))
      goto LABEL_36;
  }
  WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21) <= v8)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1824D2894);
  }
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v8));
  v10 = *((_QWORD *)this + 5);
  v11 = *(_QWORD *)(v10 + 8);
  if (v11 && (v12 = *(unsigned int *)(v10 + 16), v12 < *(_DWORD *)(v11 + 4)) && !*(_QWORD *)v10)
  {
    v17 = *(_DWORD *)(v11 + 16);
    v18 = *(_QWORD *)(v11 + 8);
    *(_DWORD *)(v10 + 16) = v12 + 1;
    if ((v17 & 4) != 0)
      *(_BYTE *)(v18 + v12) = 41;
    else
      *(_WORD *)(v18 + 2 * v12) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if (*((_DWORD *)a2 + 21) > (v8 + 1))
  {
    v13 = v8 + 1;
    do
    {
      WTF::StringBuilder::append();
      if (v13 >= *((unsigned int *)a2 + 21))
      {
        __break(0xC471u);
        JUMPOUT(0x1824D289CLL);
      }
      (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v13++));
    }
    while (v13 < *((unsigned int *)a2 + 21));
  }
  result = *((_QWORD *)this + 5);
  v15 = *(_QWORD *)(result + 8);
  if (!v15)
    return WTF::StringBuilder::append();
  v16 = *(unsigned int *)(result + 16);
  if (v16 >= *(_DWORD *)(v15 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v19 = *(_DWORD *)(v15 + 16);
  v20 = *(_QWORD *)(v15 + 8);
  *(_DWORD *)(result + 16) = v16 + 1;
  if ((v19 & 4) != 0)
    *(_BYTE *)(v20 + v16) = 41;
  else
    *(_WORD *)(v20 + 2 * v16) = 41;
  return result;
}

WGSL::Metal *WGSL::Metal::emitTextureSampleCompare(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  WGSL::Metal *v4;

  if (*((_DWORD *)a2 + 21))
  {
    v4 = this;
    (*(void (**)(WGSL::Metal *, _QWORD, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9), a3);
    WTF::StringBuilder::append();
    return (WGSL::Metal *)WGSL::Metal::visitArguments(v4, a2, (WGSL::AST::CallExpression *)1);
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WGSL::Metal::emitTextureSampleGrad(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t v4;
  char v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringBuilder *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  const char *v27;
  int v28;
  const char *v29;
  int v30;

  if (!*((_DWORD *)a2 + 21))
  {
    __break(0xC471u);
    JUMPOUT(0x1824D2CA8);
  }
  v4 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 24);
  if (*(_DWORD *)(v4 + 48) != 7)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_45;
  }
  switch(*(_BYTE *)(v4 + 8))
  {
    case 1:
    case 2:
    case 7:
      v6 = 0;
      v7 = 3;
      goto LABEL_6;
    case 3:
      v6 = 0;
      v7 = 4;
LABEL_6:
      v8 = 1;
      v9 = 11;
      v10 = "gradient2d";
      break;
    case 4:
      v6 = 0;
      v7 = 3;
      v8 = 1;
      v9 = 11;
      v10 = "gradient3d";
      break;
    case 5:
      v6 = 0;
      v7 = 3;
      goto LABEL_10;
    case 6:
      v6 = 0;
      v7 = 4;
LABEL_10:
      v8 = 1;
      v9 = 13;
      v10 = "gradientcube";
      break;
    default:
      v9 = 0;
      v10 = 0;
      v8 = 0;
      v7 = 0;
      v6 = 1;
      break;
  }
  (*(void (**)(WGSL::Metal *))(*(_QWORD *)this + 208))(this);
  WTF::StringBuilder::append();
  if (v8)
  {
    if (v7 <= 2)
      v11 = 2;
    else
      v11 = v7;
    if (*((_DWORD *)a2 + 21) < 2u)
      goto LABEL_46;
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8));
    if ((v6 & 1) == 0)
    {
      v12 = 2;
      while (1)
      {
        WTF::StringBuilder::append();
        if (v12 >= *((unsigned int *)a2 + 21))
          break;
        (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v12++));
        if (v11 == v12)
          goto LABEL_21;
      }
LABEL_46:
      __break(0xC471u);
      JUMPOUT(0x1824D2CA0);
    }
  }
LABEL_21:
  v13 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v29 = ", ";
  v30 = 2;
  v27 = v10;
  v14 = v9 - 1;
  if (!v9)
    v14 = 0;
  v28 = v14;
  v26 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v13, (unint64_t *)&v29, (uint64_t)&v27, &v26);
  if (*((_DWORD *)a2 + 21) <= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D2CB0);
  }
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v7));
  WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21) <= v7 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D2CB8);
  }
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * (v7 + 1)));
  v15 = *((_QWORD *)this + 5);
  LOBYTE(v29) = 41;
  v16 = *(_QWORD *)(v15 + 8);
  if (v16 && (v17 = *(unsigned int *)(v15 + 16), v17 < *(_DWORD *)(v16 + 4)) && !*(_QWORD *)v15)
  {
    v22 = *(_DWORD *)(v16 + 16);
    v23 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(v15 + 16) = v17 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v17) = 41;
    else
      *(_WORD *)(v23 + 2 * v17) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if (*((_DWORD *)a2 + 21) > v7 + 2)
  {
    v18 = v7 + 2;
    while (1)
    {
      WTF::StringBuilder::append();
      if (v18 >= *((unsigned int *)a2 + 21))
        break;
      (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v18++));
      if (v18 >= *((unsigned int *)a2 + 21))
        goto LABEL_33;
    }
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x1824D2C98);
  }
LABEL_33:
  result = *((_QWORD *)this + 5);
  LOBYTE(v29) = 41;
  v20 = *(_QWORD *)(result + 8);
  if (!v20)
    return WTF::StringBuilder::append();
  v21 = *(unsigned int *)(result + 16);
  if (v21 >= *(_DWORD *)(v20 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v24 = *(_DWORD *)(v20 + 16);
  v25 = *(_QWORD *)(v20 + 8);
  *(_DWORD *)(result + 16) = v21 + 1;
  if ((v24 & 4) != 0)
    *(_BYTE *)(v25 + v21) = 41;
  else
    *(_WORD *)(v25 + 2 * v21) = 41;
  return result;
}

uint64_t WGSL::Metal::emitTextureSampleLevel(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  if (!*((_DWORD *)a2 + 21))
  {
    __break(0xC471u);
    JUMPOUT(0x1824D304CLL);
  }
  v5 = *(unsigned __int8 **)(**((_QWORD **)a2 + 9) + 24);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 12);
    if (v6 == 8)
    {
      v8 = *v5 == 3;
      goto LABEL_12;
    }
    if (v6 == 7)
    {
      v7 = v5[8];
      v8 = v7 == 3 || v7 == 6;
      goto LABEL_12;
    }
  }
  else
  {
    v6 = MEMORY[0x30];
  }
  if (v6 != 9)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_61;
  }
  v8 = ((*v5 - 2) & 0xFD) == 0;
LABEL_12:
  if (v8)
    v10 = 4;
  else
    v10 = 3;
  (*(void (**)(WGSL::Metal *))(*(_QWORD *)this + 208))(this);
  WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21) < 2u)
    goto LABEL_61;
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8));
  for (i = 2;
        i != v10;
        (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * i++)))
  {
    v12 = *((_QWORD *)this + 5);
    v13 = *(_QWORD *)(v12 + 8);
    if (v13 && (v14 = *(unsigned int *)(v12 + 16), v14 < *(_DWORD *)(v13 + 4)) && !*(_QWORD *)v12)
    {
      v15 = *(_DWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v12 + 16) = v14 + 1;
      if ((v15 & 4) != 0)
        *(_BYTE *)(v16 + v14) = 44;
      else
        *(_WORD *)(v16 + 2 * v14) = 44;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    if (i >= *((unsigned int *)a2 + 21))
      goto LABEL_61;
  }
  WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21) <= v10)
  {
LABEL_61:
    __break(0xC471u);
    JUMPOUT(0x1824D303CLL);
  }
  (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v10));
  v17 = *((_QWORD *)this + 5);
  v18 = *(_QWORD *)(v17 + 8);
  if (v18 && (v19 = *(unsigned int *)(v17 + 16), v19 < *(_DWORD *)(v18 + 4)) && !*(_QWORD *)v17)
  {
    v29 = *(_DWORD *)(v18 + 16);
    v30 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(v17 + 16) = v19 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v19) = 41;
    else
      *(_WORD *)(v30 + 2 * v19) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if (*((_DWORD *)a2 + 21) > (v10 + 1))
  {
    v20 = v10 + 1;
    do
    {
      v21 = *((_QWORD *)this + 5);
      v22 = *(_QWORD *)(v21 + 8);
      if (v22 && (v23 = *(unsigned int *)(v21 + 16), v23 < *(_DWORD *)(v22 + 4)) && !*(_QWORD *)v21)
      {
        v24 = *(_DWORD *)(v22 + 16);
        v25 = *(_QWORD *)(v22 + 8);
        *(_DWORD *)(v21 + 16) = v23 + 1;
        if ((v24 & 4) != 0)
          *(_BYTE *)(v25 + v23) = 44;
        else
          *(_WORD *)(v25 + 2 * v23) = 44;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      if (v20 >= *((unsigned int *)a2 + 21))
      {
        __break(0xC471u);
        JUMPOUT(0x1824D3044);
      }
      (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v20++));
    }
    while (v20 < *((unsigned int *)a2 + 21));
  }
  result = *((_QWORD *)this + 5);
  v27 = *(_QWORD *)(result + 8);
  if (!v27)
    return WTF::StringBuilder::append();
  v28 = *(unsigned int *)(result + 16);
  if (v28 >= *(_DWORD *)(v27 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v31 = *(_DWORD *)(v27 + 16);
  v32 = *(_QWORD *)(v27 + 8);
  *(_DWORD *)(result + 16) = v28 + 1;
  if ((v31 & 4) != 0)
    *(_BYTE *)(v32 + v28) = 41;
  else
    *(_WORD *)(v32 + 2 * v28) = 41;
  return result;
}

uint64_t WGSL::Metal::emitTextureStore(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  unsigned int v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringBuilder *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  const char *v27;
  int v28;
  const char *v29;
  int v30;

  v3 = *((_DWORD *)a2 + 21);
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D32E0);
  }
  v5 = (uint64_t *)*((_QWORD *)a2 + 9);
  v6 = v5[1];
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 && *(_DWORD *)(v7 + 48) == 1)
  {
    v8 = *(unsigned __int8 *)(v7 + 8);
    if (v8 == 2)
    {
      v9 = 5;
      v10 = "uint2";
      v11 = *v5;
      if (v3 != 3)
        goto LABEL_11;
    }
    else
    {
      if (v8 != 3)
        goto LABEL_31;
      v9 = 5;
      v10 = "uint3";
      v11 = *v5;
      if (v3 != 3)
      {
LABEL_11:
        if (v3 > 2)
        {
          v12 = v5[2];
          v13 = 3;
          goto LABEL_13;
        }
LABEL_31:
        __break(0xC471u);
        JUMPOUT(0x1824D32D8);
      }
    }
  }
  else
  {
    v9 = 4;
    v10 = "uint";
    v11 = *v5;
    if (v3 != 3)
      goto LABEL_11;
  }
  v12 = 0;
  v13 = 2;
LABEL_13:
  v14 = v5[v13];
  (*(void (**)(WGSL::Metal *, uint64_t, WGSL::AST::CallExpression *))(*(_QWORD *)this + 208))(this, v11, a3);
  WTF::StringBuilder::append();
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v14);
  v15 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v29 = ", ";
  v30 = 2;
  v27 = v10;
  v28 = v9;
  v26 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v15, (unint64_t *)&v29, (uint64_t)&v27, &v26);
  (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v6);
  v16 = *((_QWORD *)this + 5);
  LOBYTE(v29) = 41;
  v17 = *(_QWORD *)(v16 + 8);
  if (v17 && (v18 = *(unsigned int *)(v16 + 16), v18 < *(_DWORD *)(v17 + 4)) && !*(_QWORD *)v16)
  {
    v22 = *(_DWORD *)(v17 + 16);
    v23 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(v16 + 16) = v18 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v18) = 41;
    else
      *(_WORD *)(v23 + 2 * v18) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  result = *((_QWORD *)this + 5);
  if (v12)
  {
    WTF::StringBuilder::append();
    (*(void (**)(WGSL::Metal *, uint64_t))(*(_QWORD *)this + 208))(this, v12);
    result = *((_QWORD *)this + 5);
  }
  LOBYTE(v29) = 41;
  v20 = *(_QWORD *)(result + 8);
  if (!v20)
    return WTF::StringBuilder::append();
  v21 = *(unsigned int *)(result + 16);
  if (v21 >= *(_DWORD *)(v20 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v24 = *(_DWORD *)(v20 + 16);
  v25 = *(_QWORD *)(v20 + 8);
  *(_DWORD *)(result + 16) = v21 + 1;
  if ((v24 & 4) != 0)
    *(_BYTE *)(v25 + v21) = 41;
  else
    *(_WORD *)(v25 + 2 * v21) = 41;
  return result;
}

uint64_t WGSL::Metal::emitUnpack2x16Float(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitUnpack4xI8(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitUnpack4xU8(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    return WTF::StringBuilder::append();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::emitWorkgroupBarrier(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::emitWorkgroupUniformLoad(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  result = WTF::StringBuilder::append();
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, **((_QWORD **)a2 + 9));
    result = *((_QWORD *)this + 5);
    v6 = *(_QWORD *)(result + 8);
    if (v6 && (v7 = *(unsigned int *)(result + 16), v7 < *(_DWORD *)(v6 + 4)) && !*(_QWORD *)result)
    {
      v8 = *(_DWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 8);
      *(_DWORD *)(result + 16) = v7 + 1;
      if ((v8 & 4) != 0)
        *(_BYTE *)(v9 + v7) = 41;
      else
        *(_WORD *)(v9 + 2 * v7) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::visitArguments(WGSL::Metal *this, WGSL::Metal::FunctionDefinitionWriter *a2, WGSL::AST::CallExpression *a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v3 = a3;
  v6 = *((_QWORD *)this + 5);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 && (v8 = *(unsigned int *)(v6 + 16), v8 < *(_DWORD *)(v7 + 4)) && !*(_QWORD *)v6)
  {
    v15 = *(_DWORD *)(v7 + 16);
    v16 = *(_QWORD *)(v7 + 8);
    *(_DWORD *)(v6 + 16) = v8 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v8) = 40;
    else
      *(_WORD *)(v16 + 2 * v8) = 40;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if (*((_DWORD *)a2 + 21) <= v3
    || (result = (*(uint64_t (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v3)), v10 = v3 + 1, v11 = *((unsigned int *)a2 + 21), v10 >= v11))
  {
LABEL_12:
    result = *((_QWORD *)this + 5);
    v13 = *(_QWORD *)(result + 8);
    if (v13 && (v14 = *(unsigned int *)(result + 16), v14 < *(_DWORD *)(v13 + 4)) && !*(_QWORD *)result)
    {
      v17 = *(_DWORD *)(v13 + 16);
      v18 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(result + 16) = v14 + 1;
      if ((v17 & 4) != 0)
        *(_BYTE *)(v18 + v14) = 41;
      else
        *(_WORD *)(v18 + 2 * v14) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  else
  {
    v12 = -1;
    while (1)
    {
      if (v12)
      {
        result = WTF::StringBuilder::append();
        v11 = *((unsigned int *)a2 + 21);
      }
      if (v10 >= v11)
        break;
      result = (*(uint64_t (**)(WGSL::Metal *, _QWORD))(*(_QWORD *)this + 208))(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v10++));
      v11 = *((unsigned int *)a2 + 21);
      --v12;
      if (v10 >= v11)
        goto LABEL_12;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::UnaryExpression *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v4 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 && (v6 = *(unsigned int *)(v4 + 16), v6 < *(_DWORD *)(v5 + 4)) && !*(_QWORD *)v4)
  {
    v25 = *(_DWORD *)(v5 + 16);
    v26 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(v4 + 16) = v6 + 1;
    if ((v25 & 4) != 0)
      *(_BYTE *)(v26 + v6) = 40;
    else
      *(_WORD *)(v26 + 2 * v6) = 40;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  switch(*((_BYTE *)a2 + 72))
  {
    case 0:
      v7 = *((_QWORD *)this + 5);
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        goto LABEL_25;
      v9 = *(unsigned int *)(v7 + 16);
      if (v9 >= *(_DWORD *)(v8 + 4) || *(_QWORD *)v7)
        goto LABEL_25;
      v29 = *(_DWORD *)(v8 + 16);
      v30 = *(_QWORD *)(v8 + 8);
      *(_DWORD *)(v7 + 16) = v9 + 1;
      if ((v29 & 4) != 0)
        *(_BYTE *)(v30 + v9) = 38;
      else
        *(_WORD *)(v30 + 2 * v9) = 38;
      break;
    case 1:
      v10 = *((_QWORD *)this + 5);
      v11 = *(_QWORD *)(v10 + 8);
      if (!v11)
        goto LABEL_25;
      v12 = *(unsigned int *)(v10 + 16);
      if (v12 >= *(_DWORD *)(v11 + 4) || *(_QWORD *)v10)
        goto LABEL_25;
      v31 = *(_DWORD *)(v11 + 16);
      v32 = *(_QWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 16) = v12 + 1;
      if ((v31 & 4) != 0)
        *(_BYTE *)(v32 + v12) = 126;
      else
        *(_WORD *)(v32 + 2 * v12) = 126;
      break;
    case 2:
      v13 = *((_QWORD *)this + 5);
      v14 = *(_QWORD *)(v13 + 8);
      if (!v14)
        goto LABEL_25;
      v15 = *(unsigned int *)(v13 + 16);
      if (v15 >= *(_DWORD *)(v14 + 4) || *(_QWORD *)v13)
        goto LABEL_25;
      v33 = *(_DWORD *)(v14 + 16);
      v34 = *(_QWORD *)(v14 + 8);
      *(_DWORD *)(v13 + 16) = v15 + 1;
      if ((v33 & 4) != 0)
        *(_BYTE *)(v34 + v15) = 42;
      else
        *(_WORD *)(v34 + 2 * v15) = 42;
      break;
    case 3:
      v16 = *((_QWORD *)this + 5);
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        goto LABEL_25;
      v18 = *(unsigned int *)(v16 + 16);
      if (v18 >= *(_DWORD *)(v17 + 4) || *(_QWORD *)v16)
        goto LABEL_25;
      v35 = *(_DWORD *)(v17 + 16);
      v36 = *(_QWORD *)(v17 + 8);
      *(_DWORD *)(v16 + 16) = v18 + 1;
      if ((v35 & 4) != 0)
        *(_BYTE *)(v36 + v18) = 45;
      else
        *(_WORD *)(v36 + 2 * v18) = 45;
      break;
    case 4:
      v19 = *((_QWORD *)this + 5);
      v20 = *(_QWORD *)(v19 + 8);
      if (v20 && (v21 = *(unsigned int *)(v19 + 16), v21 < *(_DWORD *)(v20 + 4)) && !*(_QWORD *)v19)
      {
        v37 = *(_DWORD *)(v20 + 16);
        v38 = *(_QWORD *)(v20 + 8);
        *(_DWORD *)(v19 + 16) = v21 + 1;
        if ((v37 & 4) != 0)
          *(_BYTE *)(v38 + v21) = 33;
        else
          *(_WORD *)(v38 + 2 * v21) = 33;
      }
      else
      {
LABEL_25:
        WTF::StringBuilder::append();
      }
      break;
    default:
      break;
  }
  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 8));
  result = *((_QWORD *)this + 5);
  v23 = *(_QWORD *)(result + 8);
  if (!v23)
    return WTF::StringBuilder::append();
  v24 = *(unsigned int *)(result + 16);
  if (v24 >= *(_DWORD *)(v23 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v27 = *(_DWORD *)(v23 + 16);
  v28 = *(_QWORD *)(v23 + 8);
  *(_DWORD *)(result + 16) = v24 + 1;
  if ((v27 & 4) != 0)
    *(_BYTE *)(v28 + v24) = 41;
  else
    *(_WORD *)(v28 + 2 * v24) = 41;
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::serializeBinaryExpression(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned __int8 *v8;
  int v9;
  const char *v10;
  int v11;
  WTF::StringBuilder *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  const char *v25;
  int v26;

  if ((a3 - 3) <= 1)
  {
    v8 = *(unsigned __int8 **)(a4 + 24);
    if (v8)
    {
      if (*((_DWORD *)v8 + 12) != 1 || (v8 = *(unsigned __int8 **)v8) != 0)
      {
        while (1)
        {
          v9 = *((_DWORD *)v8 + 12);
          if (v9 != 10)
            break;
          v8 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
          if (!v8)
            goto LABEL_13;
        }
        if (!v9 && *v8 <= 2u)
        {
          v10 = "__wgslMod";
          if (a3 == 3)
            v10 = "__wgslDiv";
          v11 = 9;
          goto LABEL_15;
        }
      }
    }
LABEL_13:
    if (a3 == 4)
    {
      v10 = "fmod";
      v11 = 4;
LABEL_15:
      v12 = (WTF::StringBuilder *)a1[5];
      v25 = v10;
      v26 = v11;
      v24 = 40;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v12, (unint64_t *)&v25, &v24);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, a2);
LABEL_23:
      WTF::StringBuilder::append();
      goto LABEL_24;
    }
  }
  v13 = a1[5];
  LOBYTE(v25) = 40;
  v14 = *(_QWORD *)(v13 + 8);
  if (v14 && (v15 = *(unsigned int *)(v13 + 16), v15 < *(_DWORD *)(v14 + 4)) && !*(_QWORD *)v13)
  {
    v17 = *(_DWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(v13 + 16) = v15 + 1;
    if ((v17 & 4) != 0)
      *(_BYTE *)(v18 + v15) = 40;
    else
      *(_WORD *)(v18 + 2 * v15) = 40;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, a2);
  v16 = 3;
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      goto LABEL_23;
    default:
      break;
  }
LABEL_24:
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 208))(a1, a4, v16);
  result = a1[5];
  LOBYTE(v25) = 41;
  v20 = *(_QWORD *)(result + 8);
  if (!v20)
    return WTF::StringBuilder::append();
  v21 = *(unsigned int *)(result + 16);
  if (v21 >= *(_DWORD *)(v20 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v22 = *(_DWORD *)(v20 + 16);
  v23 = *(_QWORD *)(v20 + 8);
  *(_DWORD *)(result + 16) = v21 + 1;
  if ((v22 & 4) != 0)
    *(_BYTE *)(v23 + v21) = 41;
  else
    *(_WORD *)(v23 + 2 * v21) = 41;
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::BinaryExpression *a2)
{
  return WGSL::Metal::FunctionDefinitionWriter::serializeBinaryExpression(this, *((_QWORD *)a2 + 8), *((unsigned __int8 *)a2 + 80), *((_QWORD *)a2 + 9));
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  WTF::StringBuilder::append();
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 208))(a1, *(_QWORD *)(a2 + 64));
  result = a1[5];
  v5 = *(_QWORD *)(result + 8);
  if (!v5)
    return WTF::StringBuilder::append();
  v6 = *(unsigned int *)(result + 16);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v7 = *(_DWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)(result + 16) = v6 + 1;
  if ((v7 & 4) != 0)
    *(_BYTE *)(v8 + v6) = 41;
  else
    *(_WORD *)(v8 + 2 * v6) = 41;
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::IndexAccessExpression *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 24) + 48) == 11)
  {
    WTF::StringBuilder::append();
    (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 8));
    WTF::StringBuilder::append();
    v4 = *((_QWORD *)this + 5);
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      goto LABEL_7;
  }
  else
  {
    (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *))(*(_QWORD *)this + 208))(this);
    v4 = *((_QWORD *)this + 5);
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
    {
LABEL_7:
      WTF::StringBuilder::append();
      goto LABEL_8;
    }
  }
  v6 = *(unsigned int *)(v4 + 16);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)v4)
    goto LABEL_7;
  v10 = *(_DWORD *)(v5 + 16);
  v11 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)(v4 + 16) = v6 + 1;
  if ((v10 & 4) != 0)
    *(_BYTE *)(v11 + v6) = 91;
  else
    *(_WORD *)(v11 + 2 * v6) = 91;
LABEL_8:
  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 9));
  result = *((_QWORD *)this + 5);
  v8 = *(_QWORD *)(result + 8);
  if (!v8)
    return WTF::StringBuilder::append();
  v9 = *(unsigned int *)(result + 16);
  if (v9 >= *(_DWORD *)(v8 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v12 = *(_DWORD *)(v8 + 16);
  v13 = *(_QWORD *)(v8 + 8);
  *(_DWORD *)(result + 16) = v9 + 1;
  if ((v12 & 4) != 0)
    *(_BYTE *)(v13 + v9) = 93;
  else
    *(_WORD *)(v13 + 2 * v9) = 93;
  return result;
}

_BYTE *WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringBuilder *v16;
  _BYTE *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BOOL8 v30;
  WGSL::AST::FieldAccessExpression *v31;
  _BYTE v32[16];
  int v33;
  uint64_t v34;
  uint64_t v35[16];
  uint64_t *v36;

  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
    v8 = *((_DWORD *)v7 + 4);
    if (v8 < 0x100)
      v9 = WTF::StringImpl::hashSlowCase(v7);
    else
      v9 = v8 >> 8;
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v6;
      v12 = *(WTF **)(v5 + 32 * v11);
      if (v12 != (WTF *)-1)
      {
        if (!v12)
        {
          v14 = *((_QWORD *)this + 15);
          if (!v14)
            goto LABEL_15;
          v15 = *(unsigned int *)(v14 - 4);
          v13 = v14 + 32 * v15;
          goto LABEL_14;
        }
        if ((WTF::equal(v12, *((const WTF::StringImpl **)a2 + 11), a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v13 = v5 + 32 * v11;
    v14 = *((_QWORD *)this + 15);
    if (!v14)
      goto LABEL_16;
    v15 = *(unsigned int *)(v14 - 4);
LABEL_14:
    if (v13 == v14 + 32 * v15)
      goto LABEL_15;
LABEL_16:
    v18 = *((_QWORD *)this + 5);
    LOBYTE(v35[0]) = 40;
    v19 = *(_QWORD *)(v18 + 8);
    if (v19 && (v20 = *(unsigned int *)(v18 + 16), v20 < *(_DWORD *)(v19 + 4)) && !*(_QWORD *)v18)
    {
      v26 = *(_DWORD *)(v19 + 16);
      v27 = *(_QWORD *)(v19 + 8);
      *(_DWORD *)(v18 + 16) = v20 + 1;
      if ((v26 & 4) != 0)
        *(_BYTE *)(v27 + v20) = 40;
      else
        *(_WORD *)(v27 + 2 * v20) = 40;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v21 = *((_QWORD *)a2 + 3);
    v32[0] = 0;
    v33 = -1;
    v22 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v22 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E0FD6BF0[v22])(v35, v32, v13 + 8);
      v33 = v22;
    }
    v34 = v21;
    v35[0] = (uint64_t)this;
    v35[4] = (uint64_t)v32;
    v35[5] = (uint64_t)this;
    v35[6] = (uint64_t)&v34;
    v35[7] = (uint64_t)v32;
    v35[8] = (uint64_t)this;
    v35[9] = (uint64_t)&v34;
    v35[1] = (uint64_t)v32;
    v35[2] = (uint64_t)this;
    v35[3] = (uint64_t)v32;
    v35[10] = (uint64_t)v32;
    v35[11] = (uint64_t)this;
    v35[12] = (uint64_t)v32;
    v35[13] = (uint64_t)this;
    v35[14] = (uint64_t)v32;
    v35[15] = (uint64_t)this;
    v23 = *(unsigned int *)(v21 + 48);
    if ((_DWORD)v23 == -1)
    {
      v30 = std::__throw_bad_variant_access[abi:sn180100]();
      return (_BYTE *)WGSL::Metal::FunctionDefinitionWriter::visit((WGSL::Metal::FunctionDefinitionWriter *)v30, v31);
    }
    else
    {
      v36 = v35;
      ((void (*)(uint64_t **, uint64_t))off_1E0FD6D30[v23])(&v36, v21);
      if (v33 != -1)
        ((void (*)(uint64_t *, _BYTE *))off_1E0FD6B98[v33])(v35, v32);
      v33 = -1;
      result = (_BYTE *)*((_QWORD *)this + 5);
      LOBYTE(v35[0]) = 41;
      v24 = *((_QWORD *)result + 1);
      if (v24 && (v25 = *((unsigned int *)result + 4), v25 < *(_DWORD *)(v24 + 4)) && !*(_QWORD *)result)
      {
        v28 = *(_DWORD *)(v24 + 16);
        v29 = *(_QWORD *)(v24 + 8);
        *((_DWORD *)result + 4) = v25 + 1;
        if ((v28 & 4) != 0)
          *(_BYTE *)(v29 + v25) = 41;
        else
          *(_WORD *)(v29 + 2 * v25) = 41;
      }
      else
      {
        return (_BYTE *)WTF::StringBuilder::append();
      }
    }
  }
  else
  {
LABEL_15:
    v16 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v35[0] = *((_QWORD *)a2 + 11);
    return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(v16, v35);
  }
  return result;
}

_BYTE *WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::FieldAccessExpression *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringBuilder *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 8));
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 24);
  if (v4 && *(_DWORD *)(v4 + 48) == 11
    || (v5 = *((_QWORD *)this + 5), (v6 = *(_QWORD *)(v5 + 8)) == 0)
    || (v7 = *(unsigned int *)(v5 + 16), v7 >= *(_DWORD *)(v6 + 4))
    || *(_QWORD *)v5)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v10 = *(_DWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(v5 + 16) = v7 + 1;
    if ((v10 & 4) != 0)
      *(_BYTE *)(v11 + v7) = 46;
    else
      *(_WORD *)(v11 + 2 * v7) = 46;
  }
  v8 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v12 = *((_QWORD *)a2 + 12);
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(v8, &v12);
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::BoolLiteral *a2)
{
  return WTF::StringBuilder::append();
}

uint16x8_t *WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::AbstractIntegerLiteral *a2)
{
  WTF::StringBuilder *v4;
  uint16x8_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BOOL8 v11;
  WGSL::AST::Signed32Literal *v12;
  unint64_t v13;
  char v14;

  v4 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v13 = *((_QWORD *)a2 + 8);
  result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<long long,void>>(v4, &v13);
  v6 = *((_QWORD *)a2 + 3);
  if (*(_DWORD *)(v6 + 48))
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint16x8_t *)WGSL::Metal::FunctionDefinitionWriter::visit((WGSL::Metal::FunctionDefinitionWriter *)v11, v12);
  }
  else if (*(_BYTE *)v6 == 2)
  {
    result = (uint16x8_t *)*((_QWORD *)this + 5);
    v14 = 117;
    v7 = result->i64[1];
    if (v7 && (v8 = result[1].u32[0], v8 < *(_DWORD *)(v7 + 4)) && !result->i64[0])
    {
      v9 = *(_DWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 8);
      result[1].i32[0] = v8 + 1;
      if ((v9 & 4) != 0)
        *(_BYTE *)(v10 + v8) = 117;
      else
        *(_WORD *)(v10 + 2 * v8) = 117;
    }
    else
    {
      return (uint16x8_t *)WTF::StringBuilder::append();
    }
  }
  return result;
}

uint16x8_t *WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::Signed32Literal *a2)
{
  WTF::StringBuilder *v2;
  unsigned int v4;

  v2 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v4 = *((_DWORD *)a2 + 16);
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(v2, &v4);
}

uint16x8_t *WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::Unsigned32Literal *a2)
{
  WTF::StringBuilder *v2;
  char v4;
  unsigned int v5;

  v2 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v5 = *((_DWORD *)a2 + 16);
  v4 = 117;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>>(v2, &v5, &v4);
}

char *WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::AbstractFloatLiteral *a2)
{
  WTF::StringBuilder *v3;
  size_t v4;
  char *v6;
  int v7;
  char __s[124];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WTF::numberToStringWithTrailingPoint();
  v3 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v4 = strlen(__s);
  v6 = __s;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D4534);
  }
  v7 = v4;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v3, (unint64_t *)&v6);
}

char *WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::Float32Literal *a2)
{
  WTF::StringBuilder *v3;
  size_t v4;
  char *v6;
  int v7;
  char __s[124];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WTF::numberToStringWithTrailingPoint();
  v3 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v4 = strlen(__s);
  v6 = __s;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D45E0);
  }
  v7 = v4;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v3, (unint64_t *)&v6);
}

char *WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::Float16Literal *a2)
{
  WTF::StringBuilder *v9;
  size_t v10;
  char *v12;
  int v13;
  char __s[124];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  _H0 = *((_WORD *)a2 + 32);
  __asm { FCVT            D0, H0 }
  WTF::numberToStringWithTrailingPoint();
  v9 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v10 = strlen(__s);
  v12 = __s;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824D468CLL);
  }
  v13 = v10;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v9, (unint64_t *)&v12);
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::AssignmentStatement *a2)
{
  uint64_t v4;
  _BOOL8 v5;
  WGSL::AST::CallStatement *v6;

  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 3));
  WTF::StringBuilder::append();
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 24);
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 10)
    {
      WGSL::Metal::FunctionDefinitionWriter::visit(this, *(const WGSL::Type **)(v4 + 8), *((WGSL::AST::Expression **)a2 + 4));
    }
    else
    {
      v5 = std::__throw_bad_variant_access[abi:sn180100]();
      WGSL::Metal::FunctionDefinitionWriter::visit((WGSL::Metal::FunctionDefinitionWriter *)v5, v6);
    }
  }
  else
  {
    (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 4));
  }
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::CallStatement *a2)
{
  WGSL::Metal::FunctionDefinitionWriter::visit(this, *(const WGSL::Type **)(*((_QWORD *)a2 + 3) + 24), *((WGSL::AST::CallExpression **)a2 + 3));
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::CompoundAssignmentStatement *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;

  v5 = (_QWORD *)((char *)a2 + 24);
  v4 = *((_QWORD *)a2 + 3);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) == 23)
    v4 = *(_QWORD *)(v4 + 64);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) != 20)
    goto LABEL_8;
  v6 = *(_QWORD **)(v4 + 64);
  if ((*(unsigned int (**)(_QWORD *))(*v6 + 16))(v6) != 22)
    goto LABEL_8;
  result = MEMORY[0x186DAB1B8](v6[11], "__unpack", 8);
  if (!(_DWORD)result)
    goto LABEL_8;
  if (*(_DWORD *)(v4 + 84))
  {
    v5 = *(_QWORD **)(v4 + 72);
LABEL_8:
    (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *v5);
    WTF::StringBuilder::append();
    return WGSL::Metal::FunctionDefinitionWriter::serializeBinaryExpression(this, *((_QWORD *)a2 + 3), *((unsigned __int8 *)a2 + 40), *((_QWORD *)a2 + 4));
  }
  __break(0xC471u);
  return result;
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::CompoundStatement *a2)
{
  int v4;
  WTF::StringBuilder *v5;
  size_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  _BYTE *v10;
  _BYTE *v11;

  WTF::StringBuilder::append();
  ++*((_DWORD *)this + 14);
  WGSL::Metal::FunctionDefinitionWriter::visitStatements((uint64_t)this, *((uint64_t **)a2 + 5), *((_DWORD *)a2 + 13));
  v4 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v4;
  v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v6 = (4 * v4);
  v7 = *((_QWORD *)v5 + 1);
  if ((v7 || (v7 = *(_QWORD *)v5) != 0) && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    v8 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v5);
    if (v8)
    {
      v9 = v8;
      if ((_DWORD)v6)
      {
        memset_pattern16(v8, asc_18260FF50, 2 * v6);
        v9[v6] = 125;
      }
      else
      {
        *v8 = 125;
      }
    }
  }
  else
  {
    v10 = (_BYTE *)MEMORY[0x186DAB068]();
    if (v10)
    {
      v11 = v10;
      if ((_DWORD)v6)
        memset(v10, 32, v6);
      else
        v6 = 0;
      v11[v6] = 125;
    }
  }
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visitStatements(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringBuilder *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  if (a3)
  {
    v4 = result;
    v5 = 8 * a3;
    do
    {
      v6 = *a2;
      v7 = *(WTF::StringBuilder **)(v4 + 40);
      v8 = (4 * *(_DWORD *)(v4 + 56));
      v9 = *((_QWORD *)v7 + 1);
      if ((v9 || (v9 = *(_QWORD *)v7) != 0) && (*(_BYTE *)(v9 + 16) & 4) == 0)
      {
        v10 = (void *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v7);
        if (v10)
          v11 = (_DWORD)v8 == 0;
        else
          v11 = 1;
        if (!v11)
          memset_pattern16(v10, asc_18260FF50, 2 * v8);
      }
      else
      {
        v12 = (void *)MEMORY[0x186DAB068]();
        if (v12)
          v13 = (_DWORD)v8 == 0;
        else
          v13 = 1;
        if (!v13)
          memset(v12, 32, v8);
      }
      if (!*(_BYTE *)(v4 + 32))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 360))(v4, v6);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      if (v14 <= 0x36 && ((1 << v14) & 0x4C73C000000000) != 0)
      {
        v16 = *(_QWORD *)(v4 + 40);
        v17 = *(_QWORD *)(v16 + 8);
        if (v17 && (v18 = *(unsigned int *)(v16 + 16), v18 < *(_DWORD *)(v17 + 4)) && !*(_QWORD *)v16)
        {
          v23 = *(_DWORD *)(v17 + 16);
          v24 = *(_QWORD *)(v17 + 8);
          *(_DWORD *)(v16 + 16) = v18 + 1;
          if ((v23 & 4) != 0)
            *(_BYTE *)(v24 + v18) = 59;
          else
            *(_WORD *)(v24 + 2 * v18) = 59;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      result = *(_QWORD *)(v4 + 40);
      v19 = *(_QWORD *)(result + 8);
      if (!v19
        || (v20 = *(unsigned int *)(result + 16), v20 >= *(_DWORD *)(v19 + 4))
        || *(_QWORD *)result)
      {
        result = WTF::StringBuilder::append();
      }
      else
      {
        v21 = *(_DWORD *)(v19 + 16);
        v22 = *(_QWORD *)(v19 + 8);
        *(_DWORD *)(result + 16) = v20 + 1;
        if ((v21 & 4) != 0)
          *(_BYTE *)(v22 + v20) = 10;
        else
          *(_WORD *)(v22 + 2 * v20) = 10;
      }
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::DecrementIncrementStatement *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 3));
  if (*((_BYTE *)a2 + 32) == 1 || !*((_BYTE *)a2 + 32))
    return WTF::StringBuilder::append();
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::DiscardStatement *a2)
{
  return WTF::StringBuilder::append();
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::IfStatement *a2)
{
  uint64_t result;

  WTF::StringBuilder::append();
  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 3));
  WTF::StringBuilder::append();
  result = (*(uint64_t (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 400))(this, *((_QWORD *)a2 + 4));
  if (*((_QWORD *)a2 + 5))
  {
    WTF::StringBuilder::append();
    return (*(uint64_t (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 360))(this, *((_QWORD *)a2 + 5));
  }
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::PhonyAssignmentStatement *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  WTF::StringBuilder::append();
  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 3));
  result = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(result + 8);
  if (!v5)
    return WTF::StringBuilder::append();
  v6 = *(unsigned int *)(result + 16);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v7 = *(_DWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)(result + 16) = v6 + 1;
  if ((v7 & 4) != 0)
    *(_BYTE *)(v8 + v6) = 41;
  else
    *(_WORD *)(v8 + 2 * v6) = 41;
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::ReturnStatement *a2)
{
  _DWORD *v2;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t result;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringBuilder *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  int8x16_t *v35;
  size_t v36;
  _BYTE *v37;
  unint64_t v38;
  unsigned __int128 *v39;
  unsigned __int128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  unint64_t v45;
  __int128 v46;
  char *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  _WORD *v60;
  int8x16_t *v61;
  __int16 v62;
  _WORD *v63;
  _WORD *v64;
  int8x16_t *v65;
  uint64_t v66;
  uint64_t v67;
  _WORD *v68;
  unint64_t v69;
  __int128 v70;
  char *v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  _WORD *v79;
  int8x16_t *v80;
  __int16 v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  size_t v86;
  unint64_t v87;
  BOOL v88;
  unint64_t v89;
  _BYTE *v90;
  int8x16_t *v91;
  char v92;
  uint64_t v93;
  int8x16_t *v94;
  size_t v95;
  _BYTE *v96;
  unint64_t v97;
  unsigned __int128 *v98;
  unsigned __int128 v99;
  size_t v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  unint64_t v104;
  _BYTE *v105;
  int8x16_t *v106;
  char v107;
  WTF::StringBuilder *v108;
  uint64_t v109;
  unint64_t v110;
  uint8x8_t *v111;
  uint16x8_t *v112;
  unint64_t v113;
  uint8x16_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint8x8_t *v117;
  uint16x8_t *v118;
  unint64_t v119;
  uint8x8_t v120;
  uint8x8_t *v121;
  uint16x8_t *v122;
  unint64_t v123;
  uint8x16_t v124;
  uint16x8_t v125;
  uint16x8_t v126;
  uint8x8_t *v127;
  uint16x8_t *v128;
  unint64_t v129;
  uint8x8_t v130;
  int8x16_t *v131;
  int8x16_t *v132;
  unint64_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int16x8_t *v138;
  int8x8_t *v139;
  unint64_t v140;
  int16x8_t v141;
  int8x16_t *v142;
  int8x16_t *v143;
  unint64_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int16x8_t *v149;
  int8x8_t *v150;
  unint64_t v151;
  int16x8_t v152;
  const char *v153;
  int v154;
  _DWORD *v155;
  int8x16x2_t v156;
  int8x16x2_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;
  int8x16x2_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;
  int8x16x2_t v165;

  v5 = *((_QWORD *)this + 9);
  if (!v5
    || (*(unsigned __int16 *)(v5 + 121) >= 0x100u ? (v6 = *(_WORD *)(v5 + 121) == 2) : (v6 = 0),
        !v6
     || (v7 = *(_QWORD *)(v5 + 104)) == 0
     || (v2 = *(_DWORD **)(v7 + 24)) == 0
     || v2[12] != 4
     || (v8 = *(unsigned int *)(*(_QWORD *)v2 + 84), !(_DWORD)v8)))
  {
LABEL_33:
    result = WTF::StringBuilder::append();
    v20 = 0;
    v17 = 0;
    v21 = 1;
    if (!*((_QWORD *)a2 + 3))
      goto LABEL_39;
    goto LABEL_34;
  }
  v9 = *(uint64_t **)(*(_QWORD *)v2 + 72);
  v10 = &v9[v8];
  while (1)
  {
    v11 = *v9;
    if (*(unsigned __int16 *)(*v9 + 140) >= 0x100u && *(_WORD *)(*v9 + 140) == 0)
    {
      v17 = *(_DWORD **)(*(_QWORD *)v2 + 48);
      if (v17)
        *v17 += 2;
      v2 = *(_DWORD **)(v11 + 48);
      if (v2)
        *v2 += 2;
      if (v17)
        *v17 += 2;
      if (v2)
      {
        v18 = *v2;
        *v2 += 2;
        if (v18)
LABEL_30:
          *v2 = v18;
        else
          WTF::StringImpl::destroy();
      }
LABEL_31:
      if (!v17)
        goto LABEL_160;
      goto LABEL_157;
    }
    v13 = *(unsigned int *)(v11 + 100);
    if ((_DWORD)v13)
      break;
LABEL_12:
    if (++v9 == v10)
      goto LABEL_33;
  }
  v14 = *(_QWORD **)(v11 + 88);
  v15 = 8 * v13;
  while (1)
  {
    v16 = *v14;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v14 + 16))(*v14) == 3 && !*(_BYTE *)(v16 + 24))
      break;
    ++v14;
    v15 -= 8;
    if (!v15)
      goto LABEL_12;
  }
  v17 = *(_DWORD **)(*(_QWORD *)v2 + 48);
  if (v17)
    *v17 += 2;
  v2 = *(_DWORD **)(v11 + 48);
  if (v2)
    *v2 += 2;
  if (v17)
    *v17 += 2;
  if (!v2)
    goto LABEL_31;
  v18 = *v2;
  *v2 += 2;
  if (v18)
    goto LABEL_30;
  WTF::StringImpl::destroy();
  if (!v17)
    goto LABEL_160;
LABEL_157:
  if (*v17 == 2)
    WTF::StringImpl::destroy();
  else
    *v17 -= 2;
LABEL_160:
  v108 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v155 = v17;
  v153 = " __wgslFragmentReturnResult = ";
  v154 = 30;
  result = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v108, (uint64_t *)&v155, (uint64_t)&v153);
  v21 = 0;
  v20 = 1;
  if (*((_QWORD *)a2 + 3))
  {
LABEL_34:
    v22 = *((_QWORD *)this + 5);
    LOBYTE(v153) = 32;
    v23 = *(_QWORD *)(v22 + 8);
    if (v23 && (v24 = *(unsigned int *)(v22 + 16), v24 < *(_DWORD *)(v23 + 4)) && !*(_QWORD *)v22)
    {
      v41 = *(_DWORD *)(v23 + 16);
      v42 = *(_QWORD *)(v23 + 8);
      *(_DWORD *)(v22 + 16) = v24 + 1;
      if ((v41 & 4) != 0)
        *(_BYTE *)(v42 + v24) = 32;
      else
        *(_WORD *)(v42 + 2 * v24) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    result = (*(uint64_t (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 3));
  }
LABEL_39:
  if (!v20)
    goto LABEL_145;
  v25 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v26 = *((_QWORD *)v25 + 1);
  if ((!v26 && (v26 = *(_QWORD *)v25) == 0 || (*(_BYTE *)(v26 + 16) & 4) != 0) && (!v2 || (v2[4] & 4) != 0))
  {
    v32 = MEMORY[0x186DAB068]();
    if (!v32)
      goto LABEL_144;
    v33 = v32;
    qmemcpy((void *)v32, ";\n__wgslFragmentReturnResult.", 29);
    v34 = (_BYTE *)(v32 + 29);
    if (!v2)
    {
      v54 = 0;
      qmemcpy((void *)(v32 + 29), " = clamp(__wgslFragmentReturnResult.", 36);
      v55 = (_BYTE *)(v32 + 65);
LABEL_143:
      qmemcpy(&v55[v54], ", as_type<float>(__DynamicOffsets[0]), as_type<float>(__DynamicOffsets[1]));\n", 77);
      goto LABEL_144;
    }
    v35 = (int8x16_t *)*((_QWORD *)v2 + 1);
    v36 = v2[1];
    if ((v2[4] & 4) != 0)
    {
      if ((_DWORD)v36)
      {
        if ((_DWORD)v36 == 1)
          *v34 = v35->i8[0];
        else
          memcpy((void *)(v32 + 29), v35, v36);
      }
    }
    else
    {
      v37 = &v34[v36];
      if (v36 < 0x10)
      {
        v38 = v32 + 29;
      }
      else
      {
        v38 = (unint64_t)&v34[v36 & 0xFFFFFFF0];
        v39 = (unsigned __int128 *)(v32 + 29);
        do
        {
          v40 = (unsigned __int128)vld2q_s8(v35->i8);
          v35 += 2;
          *v39++ = v40;
        }
        while (v39 != (unsigned __int128 *)v38);
      }
      if ((_BYTE *)v38 != v37)
      {
        v86 = v32 + v36;
        v87 = v32 + v36 - v38 + 29;
        if (v87 < 8
          || (v38 < (unint64_t)&v35[3].u64[1] + 2 * v86 + -2 * v38 + 2
            ? (v88 = (unint64_t)v35 >= v86 + 29)
            : (v88 = 1),
              !v88))
        {
          v90 = (_BYTE *)v38;
          v91 = v35;
          goto LABEL_117;
        }
        if (v87 >= 0x20)
        {
          v89 = v87 & 0xFFFFFFFFFFFFFFE0;
          v131 = v35 + 2;
          v132 = (int8x16_t *)(v38 + 16);
          v133 = v87 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v135 = v131[-2];
            v134 = v131[-1];
            v137 = *v131;
            v136 = v131[1];
            v131 += 4;
            v132[-1] = vuzp1q_s8(v135, v134);
            *v132 = vuzp1q_s8(v137, v136);
            v132 += 2;
            v133 -= 32;
          }
          while (v133);
          if (v87 == v89)
            goto LABEL_120;
          if ((v87 & 0x18) == 0)
          {
            v91 = (int8x16_t *)((char *)v35 + 2 * v89);
            v90 = (_BYTE *)(v38 + v89);
            do
            {
LABEL_117:
              v92 = v91->i8[0];
              v91 = (int8x16_t *)((char *)v91 + 2);
              *v90++ = v92;
            }
            while (v90 != v37);
            goto LABEL_120;
          }
        }
        else
        {
          v89 = 0;
        }
        v90 = (_BYTE *)(v38 + (v87 & 0xFFFFFFFFFFFFFFF8));
        v91 = (int8x16_t *)((char *)v35 + 2 * (v87 & 0xFFFFFFFFFFFFFFF8));
        v138 = (int16x8_t *)((char *)v35 + 2 * v89);
        v139 = (int8x8_t *)(v38 + v89);
        v140 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v141 = *v138++;
          *v139++ = vmovn_s16(v141);
          v140 += 8;
        }
        while (v140);
        if (v87 != (v87 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_117;
      }
    }
LABEL_120:
    v93 = v2[1];
    qmemcpy(&v34[v93], " = clamp(__wgslFragmentReturnResult.", 36);
    v55 = &v34[v93 + 36];
    v94 = (int8x16_t *)*((_QWORD *)v2 + 1);
    v95 = v2[1];
    if ((v2[4] & 4) != 0)
    {
      if ((_DWORD)v95)
      {
        if ((_DWORD)v95 == 1)
          *v55 = v94->i8[0];
        else
          memcpy(v55, v94, v95);
      }
      goto LABEL_142;
    }
    v96 = &v55[v95];
    if (v95 < 0x10)
    {
      v97 = (unint64_t)v55;
    }
    else
    {
      v97 = (unint64_t)&v55[v95 & 0xFFFFFFF0];
      v98 = (unsigned __int128 *)v55;
      do
      {
        v99 = (unsigned __int128)vld2q_s8(v94->i8);
        v94 += 2;
        *v98++ = v99;
      }
      while (v98 != (unsigned __int128 *)v97);
    }
    if ((_BYTE *)v97 == v96)
    {
LABEL_142:
      v54 = v2[1];
      goto LABEL_143;
    }
    v100 = v33 + v93 + v95;
    v101 = v100 - v97 + 65;
    if (v101 < 8
      || ((v102 = v33 + v95 + v93 + 65, v97 < (unint64_t)v94[8].u64 + 2 * v100 + -2 * v97 + 2)
        ? (v103 = (unint64_t)v94 >= v102)
        : (v103 = 1),
          !v103))
    {
      v105 = (_BYTE *)v97;
      v106 = v94;
      goto LABEL_139;
    }
    if (v101 >= 0x20)
    {
      v104 = v101 & 0xFFFFFFFFFFFFFFE0;
      v142 = v94 + 2;
      v143 = (int8x16_t *)(v97 + 16);
      v144 = v101 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v146 = v142[-2];
        v145 = v142[-1];
        v148 = *v142;
        v147 = v142[1];
        v142 += 4;
        v143[-1] = vuzp1q_s8(v146, v145);
        *v143 = vuzp1q_s8(v148, v147);
        v143 += 2;
        v144 -= 32;
      }
      while (v144);
      if (v101 == v104)
        goto LABEL_142;
      if ((v101 & 0x18) == 0)
      {
        v106 = (int8x16_t *)((char *)v94 + 2 * v104);
        v105 = (_BYTE *)(v97 + v104);
        do
        {
LABEL_139:
          v107 = v106->i8[0];
          v106 = (int8x16_t *)((char *)v106 + 2);
          *v105++ = v107;
        }
        while (v105 != v96);
        goto LABEL_142;
      }
    }
    else
    {
      v104 = 0;
    }
    v105 = (_BYTE *)(v97 + (v101 & 0xFFFFFFFFFFFFFFF8));
    v106 = (int8x16_t *)((char *)v94 + 2 * (v101 & 0xFFFFFFFFFFFFFFF8));
    v149 = (int16x8_t *)((char *)v94 + 2 * v104);
    v150 = (int8x8_t *)(v97 + v104);
    v151 = v104 - (v101 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v152 = *v149++;
      *v150++ = vmovn_s16(v152);
      v151 += 8;
    }
    while (v151);
    if (v101 == (v101 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_142;
    goto LABEL_139;
  }
  v27 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v25);
  if (!v27)
    goto LABEL_144;
  v28 = v27;
  *(_OWORD *)v27 = xmmword_18260FEA0;
  *(_OWORD *)(v27 + 16) = xmmword_18260FEB0;
  *(_OWORD *)(v27 + 32) = xmmword_18260FEC0;
  *(_QWORD *)(v27 + 48) = 0x74006C00750073;
  *(_WORD *)(v27 + 56) = 46;
  v29 = (_WORD *)(v27 + 58);
  if (!v2)
  {
    v43 = 0;
    goto LABEL_85;
  }
  v30 = (int8x16_t *)*((_QWORD *)v2 + 1);
  v31 = v2[1];
  if ((v2[4] & 4) != 0)
  {
    v44 = &v29[v31];
    if (v31 < 0x40)
    {
      v45 = v27 + 58;
    }
    else
    {
      v45 = (unint64_t)&v29[v31 & 0xFFFFFFC0];
      v46 = 0uLL;
      v47 = (char *)(v27 + 58);
      do
      {
        v157.val[0] = *v30;
        v48 = v30[1];
        v160.val[0] = v30[2];
        v49 = v30[3];
        v30 += 4;
        v50 = v49;
        v160.val[1] = 0uLL;
        v163.val[0] = v48;
        v157.val[1] = 0uLL;
        v51 = v47;
        vst2q_s8(v51, v157);
        v51 += 32;
        v163.val[1] = 0uLL;
        vst2q_s8(v51, v163);
        v52 = v47 + 64;
        vst2q_s8(v52, v160);
        v53 = v47 + 96;
        vst2q_s8(v53, *(int8x16x2_t *)(&v46 - 1));
        v47 += 128;
      }
      while (v47 != (char *)v45);
    }
    if ((_WORD *)v45 == v44)
      goto LABEL_84;
    v56 = v27 + 2 * v31 - v45 + 56;
    if (v56 < 0xE
      || (v45 < (unint64_t)v30->u64 + (v56 >> 1) + 1
        ? (v57 = (unint64_t)v30 >= (v56 & 0xFFFFFFFFFFFFFFFELL) + v45 + 2)
        : (v57 = 1),
          !v57))
    {
      v60 = (_WORD *)v45;
      v61 = v30;
      goto LABEL_81;
    }
    v58 = (v56 >> 1) + 1;
    if (v56 >= 0x3E)
    {
      v59 = v58 & 0xFFFFFFFFFFFFFFE0;
      v111 = (uint8x8_t *)&v30[1];
      v112 = (uint16x8_t *)(v45 + 32);
      v113 = v58 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v114 = *(uint8x16_t *)v111[-2].i8;
        v115 = vmovl_u8(*v111);
        v116 = vmovl_high_u8(*(uint8x16_t *)v111->i8);
        v112[-2] = vmovl_u8(*(uint8x8_t *)v114.i8);
        v112[-1] = vmovl_high_u8(v114);
        *v112 = v115;
        v112[1] = v116;
        v112 += 4;
        v111 += 4;
        v113 -= 32;
      }
      while (v113);
      if (v58 == v59)
        goto LABEL_84;
      if ((v58 & 0x18) == 0)
      {
        v61 = (int8x16_t *)((char *)v30 + v59);
        v60 = (_WORD *)(v45 + 2 * v59);
        goto LABEL_81;
      }
    }
    else
    {
      v59 = 0;
    }
    v60 = (_WORD *)(v45 + 2 * (v58 & 0xFFFFFFFFFFFFFFF8));
    v61 = (int8x16_t *)((char *)v30 + (v58 & 0xFFFFFFFFFFFFFFF8));
    v117 = (uint8x8_t *)&v30->i8[v59];
    v118 = (uint16x8_t *)(v45 + 2 * v59);
    v119 = v59 - (v58 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v120 = *v117++;
      *v118++ = vmovl_u8(v120);
      v119 += 8;
    }
    while (v119);
    if (v58 == (v58 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_84;
    do
    {
LABEL_81:
      v62 = v61->u8[0];
      v61 = (int8x16_t *)((char *)v61 + 1);
      *v60++ = v62;
    }
    while (v60 != v44);
    goto LABEL_84;
  }
  if ((_DWORD)v31)
  {
    if ((_DWORD)v31 == 1)
      *v29 = v30->i16[0];
    else
      memcpy((void *)(v27 + 58), v30, 2 * v31);
  }
LABEL_84:
  v43 = v2[1];
LABEL_85:
  v63 = &v29[v43];
  *(_OWORD *)v63 = xmmword_18260FED0;
  *((_OWORD *)v63 + 1) = xmmword_18260FEE0;
  *((_OWORD *)v63 + 2) = xmmword_18260FEF0;
  *((_OWORD *)v63 + 3) = xmmword_18260FF00;
  *((_QWORD *)v63 + 8) = 0x2E0074006C0075;
  v64 = v63 + 36;
  if (v2)
  {
    v65 = (int8x16_t *)*((_QWORD *)v2 + 1);
    v66 = v2[1];
    if ((v2[4] & 4) == 0)
    {
      if ((_DWORD)v66)
      {
        if ((_DWORD)v66 == 1)
          *v64 = v65->i16[0];
        else
          memcpy(v64, v65, 2 * v66);
      }
      goto LABEL_104;
    }
    v68 = &v64[v66];
    if (v66 < 0x40)
    {
      v69 = (unint64_t)v64;
    }
    else
    {
      v69 = (unint64_t)&v64[v66 & 0xFFFFFFC0];
      v70 = 0uLL;
      v71 = (char *)v64;
      do
      {
        v158.val[0] = *v65;
        v72 = v65[1];
        v161.val[0] = v65[2];
        v73 = v65[3];
        v65 += 4;
        v74 = v73;
        v161.val[1] = 0uLL;
        v164.val[0] = v72;
        v158.val[1] = 0uLL;
        v75 = v71;
        vst2q_s8(v75, v158);
        v75 += 32;
        v164.val[1] = 0uLL;
        vst2q_s8(v75, v164);
        v76 = v71 + 64;
        vst2q_s8(v76, v161);
        v77 = v71 + 96;
        vst2q_s8(v77, *(int8x16x2_t *)(&v70 - 1));
        v71 += 128;
      }
      while (v71 != (char *)v69);
    }
    if ((_WORD *)v69 != v68)
    {
      v78 = v28 + 2 * (v43 + v66) - v69 + 128;
      if (v78 < 0xE
        || v69 < (unint64_t)v65->u64 + (v78 >> 1) + 1
        && (unint64_t)v65 < (v78 & 0xFFFFFFFFFFFFFFFELL) + v69 + 2)
      {
        v79 = (_WORD *)v69;
        v80 = v65;
        goto LABEL_101;
      }
      v109 = (v78 >> 1) + 1;
      if (v78 < 0x3E)
      {
        v110 = 0;
        goto LABEL_176;
      }
      v110 = v109 & 0xFFFFFFFFFFFFFFE0;
      v121 = (uint8x8_t *)&v65[1];
      v122 = (uint16x8_t *)(v69 + 32);
      v123 = v109 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v124 = *(uint8x16_t *)v121[-2].i8;
        v125 = vmovl_u8(*v121);
        v126 = vmovl_high_u8(*(uint8x16_t *)v121->i8);
        v122[-2] = vmovl_u8(*(uint8x8_t *)v124.i8);
        v122[-1] = vmovl_high_u8(v124);
        *v122 = v125;
        v122[1] = v126;
        v122 += 4;
        v121 += 4;
        v123 -= 32;
      }
      while (v123);
      if (v109 == v110)
        goto LABEL_104;
      if ((v109 & 0x18) != 0)
      {
LABEL_176:
        v79 = (_WORD *)(v69 + 2 * (v109 & 0xFFFFFFFFFFFFFFF8));
        v80 = (int8x16_t *)((char *)v65 + (v109 & 0xFFFFFFFFFFFFFFF8));
        v127 = (uint8x8_t *)&v65->i8[v110];
        v128 = (uint16x8_t *)(v69 + 2 * v110);
        v129 = v110 - (v109 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v130 = *v127++;
          *v128++ = vmovl_u8(v130);
          v129 += 8;
        }
        while (v129);
        if (v109 == (v109 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_104;
      }
      else
      {
        v80 = (int8x16_t *)((char *)v65 + v110);
        v79 = (_WORD *)(v69 + 2 * v110);
      }
      do
      {
LABEL_101:
        v81 = v80->u8[0];
        v80 = (int8x16_t *)((char *)v80 + 1);
        *v79++ = v81;
      }
      while (v79 != v68);
    }
LABEL_104:
    v67 = v2[1];
  }
  else
  {
    v67 = 0;
  }
  v156.val[0] = *(int8x16_t *)", as_type<float>(__DynamicOffsets[0]), as_type<float>(__DynamicOffsets[1]));\n";
  v159.val[0] = *(int8x16_t *)"s[0]), as_type<float>(__DynamicOffsets[1]));\n";
  v82 = (char *)&v64[v67];
  v162.val[1] = 0uLL;
  v162.val[0] = *(int8x16_t *)"loat>(__DynamicOffsets[1]));\n";
  v159.val[1] = 0u;
  v165.val[0] = *(int8x16_t *)"(__DynamicOffsets[0]), as_type<float>(__DynamicOffsets[1]));\n";
  v156.val[1] = 0u;
  v83 = v82;
  vst2q_s8(v83, v156);
  v83 += 32;
  v165.val[1] = 0u;
  vst2q_s8(v83, v165);
  v84 = v82 + 64;
  vst2q_s8(v84, v159);
  v85 = v82 + 96;
  vst2q_s8(v85, v162);
  *((_OWORD *)v82 + 8) = xmmword_18260FF10;
  *((_QWORD *)v82 + 18) = 0x3B00290029005DLL;
  *((_WORD *)v82 + 76) = 10;
LABEL_144:
  result = WTF::StringBuilder::append();
LABEL_145:
  if ((v21 & 1) != 0)
    return result;
  if (!v2)
    goto LABEL_149;
  if (*v2 == 2)
  {
    result = WTF::StringImpl::destroy();
    if (!v17)
      return result;
    goto LABEL_152;
  }
  *v2 -= 2;
LABEL_149:
  if (v17)
  {
LABEL_152:
    if (*v17 == 2)
      return WTF::StringImpl::destroy();
    else
      *v17 -= 2;
  }
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::ForStatement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  WTF::StringBuilder::append();
  if (*((_QWORD *)a2 + 3))
    (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *))(*(_QWORD *)this + 360))(this);
  v4 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 && (v6 = *(unsigned int *)(v4 + 16), v6 < *(_DWORD *)(v5 + 4)) && !*(_QWORD *)v4)
  {
    v18 = *(_DWORD *)(v5 + 16);
    v19 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(v4 + 16) = v6 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v6) = 59;
    else
      *(_WORD *)(v19 + 2 * v6) = 59;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)this + 5);
  if (v7)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9 && (v10 = *(unsigned int *)(v8 + 16), v10 < *(_DWORD *)(v9 + 4)) && !*(_QWORD *)v8)
    {
      v22 = *(_DWORD *)(v9 + 16);
      v23 = *(_QWORD *)(v9 + 8);
      *(_DWORD *)(v8 + 16) = v10 + 1;
      if ((v22 & 4) != 0)
        *(_BYTE *)(v23 + v10) = 32;
      else
        *(_WORD *)(v23 + 2 * v10) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, uint64_t))(*(_QWORD *)this + 208))(this, v7);
    v8 = *((_QWORD *)this + 5);
  }
  v11 = *(_QWORD *)(v8 + 8);
  if (v11 && (v12 = *(unsigned int *)(v8 + 16), v12 < *(_DWORD *)(v11 + 4)) && !*(_QWORD *)v8)
  {
    v20 = *(_DWORD *)(v11 + 16);
    v21 = *(_QWORD *)(v11 + 8);
    *(_DWORD *)(v8 + 16) = v12 + 1;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v12) = 59;
    else
      *(_WORD *)(v21 + 2 * v12) = 59;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v13 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 5);
  if (v13)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15 && (v16 = *(unsigned int *)(v14 + 16), v16 < *(_DWORD *)(v15 + 4)) && !*(_QWORD *)v14)
    {
      v24 = *(_DWORD *)(v15 + 16);
      v25 = *(_QWORD *)(v15 + 8);
      *(_DWORD *)(v14 + 16) = v16 + 1;
      if ((v24 & 4) != 0)
        *(_BYTE *)(v25 + v16) = 32;
      else
        *(_WORD *)(v25 + 2 * v16) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, uint64_t))(*(_QWORD *)this + 360))(this, v13);
  }
  WTF::StringBuilder::append();
  return (*(uint64_t (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 400))(this, *((_QWORD *)a2 + 6));
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::LoopStatement *a2)
{
  WTF::StringBuilder *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::StringBuilder *v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  void *v16;
  BOOL v17;
  int v18;
  WTF::StringBuilder *v19;
  size_t v20;
  uint64_t v21;
  _WORD *v22;
  _WORD *v23;
  _BYTE *v24;
  _BYTE *v25;

  WTF::StringBuilder::append();
  if (*((_BYTE *)a2 + 104))
  {
    v4 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v5 = (4 * *((_DWORD *)this + 14));
    v6 = *((_QWORD *)v4 + 1);
    if ((v6 || (v6 = *(_QWORD *)v4) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      v7 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v4);
      if (v7)
      {
        *(_OWORD *)v7 = xmmword_18260FF20;
        *(_OWORD *)(v7 + 16) = xmmword_18260FF30;
        *(_OWORD *)(v7 + 32) = xmmword_18260FF40;
        *(_DWORD *)(v7 + 48) = 3866725;
        *(_WORD *)(v7 + 52) = 10;
        if ((_DWORD)v5)
          memset_pattern16((void *)(v7 + 54), asc_18260FF50, 2 * v5);
      }
    }
    else
    {
      v8 = MEMORY[0x186DAB068]();
      if (v8)
      {
        qmemcpy((void *)v8, "BOOL __continuing = false;\n", 27);
        if ((_DWORD)v5)
          memset((void *)(v8 + 27), 32, v5);
      }
    }
  }
  if (*((_BYTE *)a2 + 96))
    v9 = (char *)a2 + 56;
  else
    v9 = 0;
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v9;
  ++*((_DWORD *)this + 14);
  WGSL::Metal::FunctionDefinitionWriter::visitStatements((uint64_t)this, *((uint64_t **)a2 + 5), *((_DWORD *)a2 + 13));
  if (*((_BYTE *)a2 + 96))
  {
    v11 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v12 = (4 * *((_DWORD *)this + 14));
    v13 = *((_QWORD *)v11 + 1);
    if ((v13 || (v13 = *(_QWORD *)v11) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0)
    {
      v14 = (void *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v11);
      if (v14)
        v15 = (_DWORD)v12 == 0;
      else
        v15 = 1;
      if (!v15)
        memset_pattern16(v14, asc_18260FF50, 2 * v12);
    }
    else
    {
      v16 = (void *)MEMORY[0x186DAB068]();
      if (v16)
        v17 = (_DWORD)v12 == 0;
      else
        v17 = 1;
      if (!v17)
        memset(v16, 32, v12);
    }
    if (!*((_BYTE *)a2 + 96))
    {
      __break(1u);
      return;
    }
    (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, char *))(*(_QWORD *)this + 560))(this, (char *)a2 + 56);
  }
  v18 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v18;
  *((_QWORD *)this + 11) = v10;
  v19 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v20 = (4 * v18);
  v21 = *((_QWORD *)v19 + 1);
  if ((v21 || (v21 = *(_QWORD *)v19) != 0) && (*(_BYTE *)(v21 + 16) & 4) == 0)
  {
    v22 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v19);
    if (v22)
    {
      v23 = v22;
      if ((_DWORD)v20)
        memset_pattern16(v22, asc_18260FF50, 2 * v20);
      else
        v20 = 0;
      v23[v20] = 125;
    }
  }
  else
  {
    v24 = (_BYTE *)MEMORY[0x186DAB068]();
    if (v24)
    {
      v25 = v24;
      if ((_DWORD)v20)
        memset(v24, 32, v20);
      else
        v20 = 0;
      v25[v20] = 125;
    }
  }
}

void WGSL::Metal::FunctionDefinitionWriter::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF::StringBuilder *v7;
  int v8;
  WTF::StringBuilder *v9;
  int v10;
  WTF::StringBuilder *v11;
  const char *v12;
  int v13;
  int v14;

  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  WTF::StringBuilder::append();
  ++*(_DWORD *)(a1 + 56);
  WGSL::Metal::FunctionDefinitionWriter::visitStatements(a1, *(uint64_t **)a2, *(_DWORD *)(a2 + 12));
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a1 + 56);
  if (v5)
  {
    v7 = *(WTF::StringBuilder **)(a1 + 40);
    v14 = *(_DWORD *)(a1 + 56);
    v12 = "if (";
    v13 = 4;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v7, &v14, (uint64_t)&v12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v5);
    WTF::StringBuilder::append();
    v8 = *(_DWORD *)(a1 + 56) + 1;
    *(_DWORD *)(a1 + 56) = v8;
    v9 = *(WTF::StringBuilder **)(a1 + 40);
    v14 = v8;
    v12 = "break;\n";
    v13 = 7;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v9, &v14, (uint64_t)&v12);
    v6 = *(_DWORD *)(a1 + 56) - 1;
  }
  v10 = v6 - 1;
  *(_DWORD *)(a1 + 56) = v10;
  v11 = *(WTF::StringBuilder **)(a1 + 40);
  v14 = v10;
  v12 = "}\n";
  v13 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v11, &v14, (uint64_t)&v12);
  *(_QWORD *)(a1 + 88) = v4;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::WhileStatement *a2)
{
  WTF::StringBuilder::append();
  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 3));
  WTF::StringBuilder::append();
  return (*(uint64_t (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 400))(this, *((_QWORD *)a2 + 4));
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::SwitchStatement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringBuilder *v7;
  size_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  WTF::StringBuilder *v12;
  int v13;
  WTF::StringBuilder *v14;
  int v15;
  WTF::StringBuilder *v16;
  size_t v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  WTF::StringBuilder *v25;
  int v26;
  WTF::StringBuilder *v27;
  uint64_t v28;
  _WORD *v29;
  _BYTE *v30;
  const char *v31;
  int v32;
  int v33;
  char v34;

  WTF::StringBuilder::append();
  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 4));
  WTF::StringBuilder::append();
  v4 = *((unsigned int *)a2 + 17);
  if ((_DWORD)v4)
  {
    v5 = *((_QWORD *)a2 + 7);
    v6 = 24 * v4;
    do
    {
      WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::AST::SwitchStatement &)::$_0::operator()((uint64_t)this, v5, 0);
      v5 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::AST::SwitchStatement &)::$_0::operator()((uint64_t)this, (uint64_t)a2 + 72, 1);
  v7 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v8 = (4 * *((_DWORD *)this + 14));
  v9 = *((_QWORD *)v7 + 1);
  if (!v9 && (v9 = *(_QWORD *)v7) == 0 || (*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    v21 = (_BYTE *)MEMORY[0x186DAB068]();
    if (v21)
    {
      *v21 = 10;
      v22 = v21 + 1;
      if ((_DWORD)v8)
        memset(v21 + 1, 32, v8);
      else
        v8 = 0;
      v22[v8] = 125;
    }
LABEL_25:
    if (*((_BYTE *)a2 + 24))
      goto LABEL_26;
    goto LABEL_10;
  }
  v10 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v7);
  if (!v10)
    goto LABEL_25;
  *v10 = 10;
  v11 = v10 + 1;
  if (!(_DWORD)v8)
  {
    *v11 = 125;
    if (*((_BYTE *)a2 + 24))
      goto LABEL_26;
LABEL_10:
    if (!*((_BYTE *)a2 + 25))
      return;
    v12 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v34 = 10;
    v33 = *((_DWORD *)this + 14);
    v31 = "if (__continuing) {";
    v32 = 19;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v12, &v34, &v33, (uint64_t)&v31);
    v13 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v13;
    v14 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v34 = 10;
    v33 = v13;
    v31 = "break;";
    v32 = 6;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v14, &v34, &v33, (uint64_t)&v31);
    v15 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v15;
    v16 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v17 = (4 * v15);
    v18 = *((_QWORD *)v16 + 1);
    if ((v18 || (v18 = *(_QWORD *)v16) != 0) && (*(_BYTE *)(v18 + 16) & 4) == 0)
    {
      v19 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v16);
      if (v19)
      {
        *v19 = 10;
        v20 = v19 + 1;
        if (!(_DWORD)v17)
        {
LABEL_16:
          v17 = 0;
LABEL_32:
          v20[v17] = 125;
          return;
        }
LABEL_31:
        memset_pattern16(v20, asc_18260FF50, 2 * v17);
        goto LABEL_32;
      }
      return;
    }
    v23 = (_BYTE *)MEMORY[0x186DAB068]();
    if (!v23)
      return;
    *v23 = 10;
    v24 = v23 + 1;
    if (!(_DWORD)v17)
      goto LABEL_22;
    goto LABEL_35;
  }
  memset_pattern16(v10 + 1, asc_18260FF50, 2 * v8);
  v11[v8] = 125;
  if (!*((_BYTE *)a2 + 24))
    goto LABEL_10;
LABEL_26:
  v25 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v34 = 10;
  v33 = *((_DWORD *)this + 14);
  v31 = "if (__continuing) {";
  v32 = 19;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v25, &v34, &v33, (uint64_t)&v31);
  ++*((_DWORD *)this + 14);
  (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 560))(this, *((_QWORD *)this + 11));
  v26 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v26;
  v27 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v17 = (4 * v26);
  v28 = *((_QWORD *)v27 + 1);
  if (!v28 && (v28 = *(_QWORD *)v27) == 0 || (*(_BYTE *)(v28 + 16) & 4) != 0)
  {
    v30 = (_BYTE *)MEMORY[0x186DAB068]();
    if (!v30)
      return;
    *v30 = 10;
    v24 = v30 + 1;
    if (!(_DWORD)v17)
    {
LABEL_22:
      v17 = 0;
LABEL_36:
      v24[v17] = 125;
      return;
    }
LABEL_35:
    memset(v24, 32, v17);
    goto LABEL_36;
  }
  v29 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v27);
  if (v29)
  {
    *v29 = 10;
    v20 = v29 + 1;
    if (!(_DWORD)v17)
      goto LABEL_16;
    goto LABEL_31;
  }
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::AST::SwitchStatement &)::$_0::operator()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringBuilder *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringBuilder *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::StringBuilder *v21;
  int v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  char v27;

  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      v10 = *(WTF::StringBuilder **)(a1 + 40);
      v27 = 10;
      v26 = *(_DWORD *)(a1 + 56);
      v24 = "case ";
      v25 = 5;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v10, &v27, &v26, (uint64_t)&v24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v9);
      v11 = *(_QWORD *)(a1 + 40);
      LOBYTE(v24) = 58;
      v12 = *(_QWORD *)(v11 + 8);
      if (!v12 || (v13 = *(unsigned int *)(v11 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)v11)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v14 = *(_DWORD *)(v12 + 16);
        v15 = *(_QWORD *)(v12 + 8);
        *(_DWORD *)(v11 + 16) = v13 + 1;
        if ((v14 & 4) != 0)
          *(_BYTE *)(v15 + v13) = 58;
        else
          *(_WORD *)(v15 + 2 * v13) = 58;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  if ((a3 & 1) != 0)
  {
    v16 = *(WTF::StringBuilder **)(a1 + 40);
    v27 = 10;
    v26 = *(_DWORD *)(a1 + 56);
    v24 = "default:";
    v25 = 8;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v16, &v27, &v26, (uint64_t)&v24);
  }
  v17 = *(_QWORD *)(a1 + 40);
  LOBYTE(v24) = 32;
  v18 = *(_QWORD *)(v17 + 8);
  if (v18 && (v19 = *(unsigned int *)(v17 + 16), v19 < *(_DWORD *)(v18 + 4)) && !*(_QWORD *)v17)
  {
    v22 = *(_DWORD *)(v18 + 16);
    v23 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(v17 + 16) = v19 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v19) = 32;
    else
      *(_WORD *)(v23 + 2 * v19) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 400))(a1, *(_QWORD *)(a2 + 16));
  v20 = *(_DWORD *)(a1 + 56) + 1;
  *(_DWORD *)(a1 + 56) = v20;
  v21 = *(WTF::StringBuilder **)(a1 + 40);
  v27 = 10;
  v26 = v20;
  v24 = "break;";
  v25 = 6;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v21, &v27, &v26, (uint64_t)&v24);
  --*(_DWORD *)(a1 + 56);
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::BreakStatement *a2)
{
  return WTF::StringBuilder::append();
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::ContinueStatement *a2)
{
  WTF::StringBuilder *v3;
  WTF::StringBuilder *v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  void *v9;
  BOOL v10;
  const char *v11;
  int v12;
  int v13;

  if (*((_BYTE *)a2 + 24))
  {
    WTF::StringBuilder::append();
    v3 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v13 = *((_DWORD *)this + 14);
    v11 = "break";
    v12 = 5;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v3, &v13, (uint64_t)&v11);
  }
  else
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *))(*(_QWORD *)this + 560))(this);
      v4 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v5 = (4 * *((_DWORD *)this + 14));
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 || (v6 = *(_QWORD *)v4) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0)
      {
        v7 = (void *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v4);
        if (v7)
          v8 = (_DWORD)v5 == 0;
        else
          v8 = 1;
        if (!v8)
          memset_pattern16(v7, asc_18260FF50, 2 * v5);
      }
      else
      {
        v9 = (void *)MEMORY[0x186DAB068]();
        if (v9)
          v10 = (_DWORD)v5 == 0;
        else
          v10 = 1;
        if (!v10)
          memset(v9, 32, v5);
      }
    }
    WTF::StringBuilder::append();
  }
}

void WGSL::Metal::FunctionDefinitionWriter::~FunctionDefinitionWriter(WGSL::Metal::FunctionDefinitionWriter *this, void *a2)
{
  WGSL::Metal::FunctionDefinitionWriter::~FunctionDefinitionWriter(this, a2);
  JUMPOUT(0x186DAB2A8);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  char v10;

  *(_QWORD *)this = &off_1E0FD6960;
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 15);
      do
      {
        v6 = *(_DWORD **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(unsigned int *)(v5 + 24);
          if ((_DWORD)v7 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E0FD6B98[v7])(&v10, v5 + 8);
            v6 = *(_DWORD **)v5;
          }
          *(_DWORD *)(v5 + 24) = -1;
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WTF::StringImpl::destroy();
            else
              *v6 -= 2;
          }
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = *((_QWORD *)this + 12);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v9 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      if (*v9 == 2)
        WTF::StringImpl::destroy();
      else
        *v9 -= 2;
    }
  }
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, unint64_t *a2, uint64_t *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  _WORD *v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE *v29;
  _BYTE *v30;
  int8x16_t *v31;
  size_t v32;
  _BYTE *v33;
  unint64_t v34;
  unsigned __int128 *v35;
  unsigned __int128 v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  _WORD *v41;
  unsigned __int8 *v42;
  __int16 v43;
  int8x16_t *v44;
  uint64_t v45;
  _WORD *v46;
  unint64_t v47;
  __int128 v48;
  char *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  _WORD *v57;
  int8x16_t *v58;
  __int16 v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  _BYTE *v64;
  int8x16_t *v65;
  char v66;
  uint8x8_t *v67;
  uint16x8_t *v68;
  unint64_t v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint8x8_t *v73;
  uint16x8_t *v74;
  unint64_t v75;
  uint8x8_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8x8_t *v79;
  uint16x8_t *v80;
  unint64_t v81;
  uint8x16_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint8x8_t *v85;
  uint16x8_t *v86;
  unint64_t v87;
  uint8x8_t v88;
  int8x16_t *v89;
  int8x16_t *v90;
  unint64_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int16x8_t *v96;
  int8x8_t *v97;
  unint64_t v98;
  int16x8_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((!v8 && (v8 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v8 + 16) & 4) != 0) && (!v7 || (*(_BYTE *)(v7 + 16) & 4) != 0))
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v24 = result;
    v25 = a2[1];
    v26 = v25;
    v27 = *a3;
    v28 = *a4;
    if ((_DWORD)v25)
    {
      v29 = (_BYTE *)*a2;
      if ((_DWORD)v25 != 1)
      {
        result = memcpy(result, v29, a2[1]);
        v30 = &v24[v26];
        if (v27)
        {
LABEL_17:
          v31 = *(int8x16_t **)(v27 + 8);
          v32 = *(unsigned int *)(v27 + 4);
          if ((*(_BYTE *)(v27 + 16) & 4) != 0)
          {
            if ((_DWORD)v32)
            {
              if ((_DWORD)v32 == 1)
                *v30 = v31->i8[0];
              else
                result = memcpy(v30, v31, v32);
            }
            goto LABEL_81;
          }
          v33 = &v30[v32];
          if (v32 < 0x10)
          {
            v34 = (unint64_t)v30;
          }
          else
          {
            v34 = (unint64_t)&v30[v32 & 0xFFFFFFF0];
            v35 = (unsigned __int128 *)v30;
            do
            {
              v36 = (unsigned __int128)vld2q_s8(v31->i8);
              v31 += 2;
              *v35++ = v36;
            }
            while (v35 != (unsigned __int128 *)v34);
          }
          if ((_BYTE *)v34 == v33)
          {
LABEL_81:
            v30[*(unsigned int *)(v27 + 4)] = v28;
            return result;
          }
          v60 = (unint64_t)&v24[v32 + v26];
          v61 = v60 - v34;
          if (v60 - v34 < 8
            || (v34 < (unint64_t)v31 + 2 * v61 ? (v62 = (unint64_t)v31 >= v60) : (v62 = 1), !v62))
          {
            v64 = (_BYTE *)v34;
            v65 = v31;
            goto LABEL_70;
          }
          if (v61 >= 0x20)
          {
            v63 = v61 & 0xFFFFFFFFFFFFFFE0;
            v89 = v31 + 2;
            v90 = (int8x16_t *)(v34 + 16);
            v91 = v61 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v93 = v89[-2];
              v92 = v89[-1];
              v95 = *v89;
              v94 = v89[1];
              v89 += 4;
              v90[-1] = vuzp1q_s8(v93, v92);
              *v90 = vuzp1q_s8(v95, v94);
              v90 += 2;
              v91 -= 32;
            }
            while (v91);
            if (v61 == v63)
              goto LABEL_81;
            if ((v61 & 0x18) == 0)
            {
              v65 = (int8x16_t *)((char *)v31 + 2 * v63);
              v64 = (_BYTE *)(v34 + v63);
              do
              {
LABEL_70:
                v66 = v65->i8[0];
                v65 = (int8x16_t *)((char *)v65 + 2);
                *v64++ = v66;
              }
              while (v64 != v33);
              goto LABEL_81;
            }
          }
          else
          {
            v63 = 0;
          }
          v64 = (_BYTE *)(v34 + (v61 & 0xFFFFFFFFFFFFFFF8));
          v65 = (int8x16_t *)((char *)v31 + 2 * (v61 & 0xFFFFFFFFFFFFFFF8));
          v96 = (int16x8_t *)((char *)v31 + 2 * v63);
          v97 = (int8x8_t *)(v34 + v63);
          v98 = v63 - (v61 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v99 = *v96++;
            *v97++ = vmovn_s16(v99);
            v98 += 8;
          }
          while (v98);
          if (v61 == (v61 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_81;
          goto LABEL_70;
        }
LABEL_45:
        *v30 = v28;
        return result;
      }
      *result = *v29;
    }
    v30 = &result[v25];
    if (v27)
      goto LABEL_17;
    goto LABEL_45;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v11 = *a2;
    v10 = a2[1];
    v12 = *a3;
    v13 = *a4;
    v14 = &result[2 * v10];
    if ((v10 & 0xFFFFFFC0) != 0)
    {
      v15 = (unint64_t)&result[2 * (v10 & 0xFFFFFFC0)];
      v16 = 0uLL;
      v17 = result;
      do
      {
        v100.val[0] = *(int8x16_t *)v11;
        v18 = *(int8x16_t *)(v11 + 16);
        v102.val[0] = *(int8x16_t *)(v11 + 32);
        v19 = *(_OWORD *)(v11 + 48);
        v11 += 64;
        v20 = v19;
        v102.val[1] = 0uLL;
        v104.val[0] = v18;
        v100.val[1] = 0uLL;
        v21 = v17;
        vst2q_s8(v21, v100);
        v21 += 32;
        v104.val[1] = 0uLL;
        vst2q_s8(v21, v104);
        v22 = v17 + 64;
        vst2q_s8(v22, v102);
        v23 = v17 + 96;
        vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
        v17 += 128;
      }
      while (v17 != (char *)v15);
      v10 = v10;
      if ((_WORD *)v15 == v14)
      {
LABEL_33:
        if (!v12)
        {
          *v14 = v13;
          return result;
        }
        v44 = *(int8x16_t **)(v12 + 8);
        v45 = *(unsigned int *)(v12 + 4);
        if ((*(_BYTE *)(v12 + 16) & 4) == 0)
        {
          if ((_DWORD)v45)
          {
            if ((_DWORD)v45 == 1)
              *v14 = v44->i16[0];
            else
              result = memcpy(v14, v44, 2 * v45);
          }
          goto LABEL_58;
        }
        v46 = &v14[v45];
        if (v45 < 0x40)
        {
          v47 = (unint64_t)&result[2 * v10];
          if (v14 == v46)
          {
LABEL_58:
            v14[*(unsigned int *)(v12 + 4)] = v13;
            return result;
          }
        }
        else
        {
          v47 = (unint64_t)&v14[v45 & 0xFFFFFFC0];
          v48 = 0uLL;
          v49 = &result[2 * v10];
          do
          {
            v101.val[0] = *v44;
            v50 = v44[1];
            v103.val[0] = v44[2];
            v51 = v44[3];
            v44 += 4;
            v52 = v51;
            v103.val[1] = 0uLL;
            v105.val[0] = v50;
            v101.val[1] = 0uLL;
            v53 = v49;
            vst2q_s8(v53, v101);
            v53 += 32;
            v105.val[1] = 0uLL;
            vst2q_s8(v53, v105);
            v54 = v49 + 64;
            vst2q_s8(v54, v103);
            v55 = v49 + 96;
            vst2q_s8(v55, *(int8x16x2_t *)(&v48 - 1));
            v49 += 128;
          }
          while (v49 != (char *)v47);
          if ((_WORD *)v47 == v46)
            goto LABEL_58;
        }
        v56 = (unint64_t)&result[2 * v10 + 2 * v45 - v47 - 2];
        if (v56 < 0xE
          || v47 < (unint64_t)v44->u64 + (v56 >> 1) + 1
          && (unint64_t)v44 < (v56 & 0xFFFFFFFFFFFFFFFELL) + v47 + 2)
        {
          v57 = (_WORD *)v47;
          v58 = v44;
          goto LABEL_55;
        }
        v77 = (v56 >> 1) + 1;
        if (v56 >= 0x3E)
        {
          v78 = v77 & 0xFFFFFFFFFFFFFFE0;
          v79 = (uint8x8_t *)&v44[1];
          v80 = (uint16x8_t *)(v47 + 32);
          v81 = v77 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v82 = *(uint8x16_t *)v79[-2].i8;
            v83 = vmovl_u8(*v79);
            v84 = vmovl_high_u8(*(uint8x16_t *)v79->i8);
            v80[-2] = vmovl_u8(*(uint8x8_t *)v82.i8);
            v80[-1] = vmovl_high_u8(v82);
            *v80 = v83;
            v80[1] = v84;
            v80 += 4;
            v79 += 4;
            v81 -= 32;
          }
          while (v81);
          if (v77 == v78)
            goto LABEL_58;
          if ((v77 & 0x18) == 0)
          {
            v58 = (int8x16_t *)((char *)v44 + v78);
            v57 = (_WORD *)(v47 + 2 * v78);
            do
            {
LABEL_55:
              v59 = v58->u8[0];
              v58 = (int8x16_t *)((char *)v58 + 1);
              *v57++ = v59;
            }
            while (v57 != v46);
            goto LABEL_58;
          }
        }
        else
        {
          v78 = 0;
        }
        v57 = (_WORD *)(v47 + 2 * (v77 & 0xFFFFFFFFFFFFFFF8));
        v58 = (int8x16_t *)((char *)v44 + (v77 & 0xFFFFFFFFFFFFFFF8));
        v85 = (uint8x8_t *)&v44->i8[v78];
        v86 = (uint16x8_t *)(v47 + 2 * v78);
        v87 = v78 - (v77 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v88 = *v85++;
          *v86++ = vmovl_u8(v88);
          v87 += 8;
        }
        while (v87);
        if (v77 == (v77 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_58;
        goto LABEL_55;
      }
    }
    else
    {
      v15 = (unint64_t)result;
      v10 = v10;
      if (result == (_BYTE *)v14)
        goto LABEL_33;
    }
    v37 = (unint64_t)&result[2 * v10 - v15 - 2];
    if (v37 < 0xE
      || (v15 < v11 + (v37 >> 1) + 1 ? (v38 = v11 >= (v37 & 0xFFFFFFFFFFFFFFFELL) + v15 + 2) : (v38 = 1), !v38))
    {
      v41 = (_WORD *)v15;
      v42 = (unsigned __int8 *)v11;
      goto LABEL_32;
    }
    v39 = (v37 >> 1) + 1;
    if (v37 >= 0x3E)
    {
      v40 = v39 & 0xFFFFFFFFFFFFFFE0;
      v67 = (uint8x8_t *)(v11 + 16);
      v68 = (uint16x8_t *)(v15 + 32);
      v69 = v39 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v70 = *(uint8x16_t *)v67[-2].i8;
        v71 = vmovl_u8(*v67);
        v72 = vmovl_high_u8(*(uint8x16_t *)v67->i8);
        v68[-2] = vmovl_u8(*(uint8x8_t *)v70.i8);
        v68[-1] = vmovl_high_u8(v70);
        *v68 = v71;
        v68[1] = v72;
        v68 += 4;
        v67 += 4;
        v69 -= 32;
      }
      while (v69);
      if (v39 == v40)
        goto LABEL_33;
      if ((v39 & 0x18) == 0)
      {
        v42 = (unsigned __int8 *)(v11 + v40);
        v41 = (_WORD *)(v15 + 2 * v40);
        goto LABEL_32;
      }
    }
    else
    {
      v40 = 0;
    }
    v41 = (_WORD *)(v15 + 2 * (v39 & 0xFFFFFFFFFFFFFFF8));
    v42 = (unsigned __int8 *)(v11 + (v39 & 0xFFFFFFFFFFFFFFF8));
    v73 = (uint8x8_t *)(v11 + v40);
    v74 = (uint16x8_t *)(v15 + 2 * v40);
    v75 = v40 - (v39 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v76 = *v73++;
      *v74++ = vmovl_u8(v76);
      v75 += 8;
    }
    while (v75);
    if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_33;
    do
    {
LABEL_32:
      v43 = *v42++;
      *v41++ = v43;
    }
    while (v41 != v14);
    goto LABEL_33;
  }
  return result;
}

uint64_t WGSL::Metal::emitTextureDimensions(WGSL::Metal::FunctionDefinitionWriter *,WGSL::AST::CallExpression &)::$_0::operator()(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  WTF::StringBuilder *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  const char *v18;
  int v19;

  v3 = a1[1];
  if (!*((_DWORD *)v3 + 21))
    goto LABEL_14;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 208))(**a1, *(_QWORD *)v3[9]);
  v7 = *(WTF::StringBuilder **)(**a1 + 40);
  v18 = ".get_";
  v19 = 5;
  v8 = a3 - 1;
  if (!a3)
    v8 = 0;
  v16 = a2;
  if (v8 >> 31)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1824D6C84);
  }
  v17 = v8;
  v15 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v7, (unint64_t *)&v18, (uint64_t)&v16, &v15);
  v9 = a1[1];
  if (*((_DWORD *)v9 + 21) >= 2u)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 208))(**a1, *(_QWORD *)(v9[9] + 8));
  result = *(_QWORD *)(**a1 + 40);
  LOBYTE(v18) = 41;
  v11 = *(_QWORD *)(result + 8);
  if (!v11)
    return WTF::StringBuilder::append();
  v12 = *(unsigned int *)(result + 16);
  if (v12 >= *(_DWORD *)(v11 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v13 = *(_DWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 8);
  *(_DWORD *)(result + 16) = v12 + 1;
  if ((v13 & 4) != 0)
    *(_BYTE *)(v14 + v12) = 41;
  else
    *(_WORD *)(v14 + 2 * v12) = 41;
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, unint64_t *a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  _BYTE *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  size_t v28;
  char v29;
  _BYTE *v30;
  _BYTE *v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  _WORD *v36;
  unsigned __int8 *v37;
  __int16 v38;
  _WORD *v39;
  unint64_t v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  _WORD *v49;
  unsigned __int8 *v50;
  __int16 v51;
  uint64_t v52;
  unint64_t v53;
  uint8x8_t *v54;
  uint16x8_t *v55;
  unint64_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint8x8_t *v60;
  uint16x8_t *v61;
  unint64_t v62;
  uint8x8_t v63;
  uint8x8_t *v64;
  uint16x8_t *v65;
  unint64_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint8x8_t *v70;
  uint16x8_t *v71;
  unint64_t v72;
  uint8x8_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;

  v7 = *((_QWORD *)a1 + 1);
  if (!v7 && (v7 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v24 = result;
    v25 = a2[1];
    v26 = v25;
    v27 = *(_BYTE **)a3;
    v28 = *(unsigned int *)(a3 + 8);
    v29 = *a4;
    if ((_DWORD)v25)
    {
      v30 = (_BYTE *)*a2;
      if ((_DWORD)v25 != 1)
      {
        result = memcpy(result, v30, a2[1]);
        v31 = &v24[v26];
        if (!(_DWORD)v28)
          goto LABEL_21;
        goto LABEL_17;
      }
      *result = *v30;
    }
    v31 = &result[v25];
    if (!(_DWORD)v28)
      goto LABEL_21;
LABEL_17:
    if ((_DWORD)v28 == 1)
    {
      *v31 = *v27;
      v31[v28] = v29;
      return result;
    }
    result = memcpy(v31, v27, v28);
LABEL_21:
    v31[v28] = v29;
    return result;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v10 = *a2;
    v9 = a2[1];
    v11 = *(_QWORD *)a3;
    v12 = *(unsigned int *)(a3 + 8);
    v13 = *a4;
    v14 = (unint64_t)&result[2 * v9];
    if ((v9 & 0xFFFFFFC0) != 0)
    {
      v15 = (unint64_t)&result[2 * (a2[1] & 0xFFFFFFC0)];
      v16 = 0uLL;
      v17 = result;
      do
      {
        v74.val[0] = *(int8x16_t *)v10;
        v18 = *(int8x16_t *)(v10 + 16);
        v76.val[0] = *(int8x16_t *)(v10 + 32);
        v19 = *(_OWORD *)(v10 + 48);
        v10 += 64;
        v20 = v19;
        v76.val[1] = 0uLL;
        v78.val[0] = v18;
        v74.val[1] = 0uLL;
        v21 = v17;
        vst2q_s8(v21, v74);
        v21 += 32;
        v78.val[1] = 0uLL;
        vst2q_s8(v21, v78);
        v22 = v17 + 64;
        vst2q_s8(v22, v76);
        v23 = v17 + 96;
        vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
        v17 += 128;
      }
      while (v17 != (char *)v15);
      v9 = v9;
      if (v15 == v14)
      {
LABEL_33:
        v39 = (_WORD *)(v14 + 2 * v12);
        if ((v12 & 0xFFFFFFC0) != 0)
        {
          v40 = v14 + 2 * (v12 & 0xFFFFFFC0);
          v41 = 0uLL;
          do
          {
            v75.val[0] = *(int8x16_t *)v11;
            v42 = *(int8x16_t *)(v11 + 16);
            v77.val[0] = *(int8x16_t *)(v11 + 32);
            v43 = *(_OWORD *)(v11 + 48);
            v11 += 64;
            v44 = v43;
            v77.val[1] = 0uLL;
            v79.val[0] = v42;
            v75.val[1] = 0uLL;
            v45 = (char *)v14;
            vst2q_s8(v45, v75);
            v45 += 32;
            v79.val[1] = 0uLL;
            vst2q_s8(v45, v79);
            v46 = (char *)(v14 + 64);
            vst2q_s8(v46, v77);
            v47 = (char *)(v14 + 96);
            vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
            v14 += 128;
          }
          while (v14 != v40);
          v14 = v40;
        }
        if ((_WORD *)v14 == v39)
          goto LABEL_43;
        v48 = (unint64_t)&result[2 * v9 + 2 * v12 - v14 - 2];
        if (v48 < 0xE || v14 < v11 + (v48 >> 1) + 1 && v11 < (v48 & 0xFFFFFFFFFFFFFFFELL) + v14 + 2)
        {
          v49 = (_WORD *)v14;
          v50 = (unsigned __int8 *)v11;
          goto LABEL_42;
        }
        v52 = (v48 >> 1) + 1;
        if (v48 >= 0x3E)
        {
          v53 = v52 & 0xFFFFFFFFFFFFFFE0;
          v64 = (uint8x8_t *)(v11 + 16);
          v65 = (uint16x8_t *)(v14 + 32);
          v66 = v52 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v67 = *(uint8x16_t *)v64[-2].i8;
            v68 = vmovl_u8(*v64);
            v69 = vmovl_high_u8(*(uint8x16_t *)v64->i8);
            v65[-2] = vmovl_u8(*(uint8x8_t *)v67.i8);
            v65[-1] = vmovl_high_u8(v67);
            *v65 = v68;
            v65[1] = v69;
            v65 += 4;
            v64 += 4;
            v66 -= 32;
          }
          while (v66);
          if (v52 == v53)
            goto LABEL_43;
          if ((v52 & 0x18) == 0)
          {
            v50 = (unsigned __int8 *)(v11 + v53);
            v49 = (_WORD *)(v14 + 2 * v53);
            do
            {
LABEL_42:
              v51 = *v50++;
              *v49++ = v51;
            }
            while (v49 != v39);
LABEL_43:
            *v39 = v13;
            return result;
          }
        }
        else
        {
          v53 = 0;
        }
        v49 = (_WORD *)(v14 + 2 * (v52 & 0xFFFFFFFFFFFFFFF8));
        v50 = (unsigned __int8 *)(v11 + (v52 & 0xFFFFFFFFFFFFFFF8));
        v70 = (uint8x8_t *)(v11 + v53);
        v71 = (uint16x8_t *)(v14 + 2 * v53);
        v72 = v53 - (v52 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v73 = *v70++;
          *v71++ = vmovl_u8(v73);
          v72 += 8;
        }
        while (v72);
        if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_43;
        goto LABEL_42;
      }
    }
    else
    {
      v15 = (unint64_t)result;
      v9 = a2[1];
      if (result == (_BYTE *)v14)
        goto LABEL_33;
    }
    v32 = (unint64_t)&result[2 * v9 - v15 - 2];
    if (v32 < 0xE
      || (v15 < v10 + (v32 >> 1) + 1 ? (v33 = v10 >= (v32 & 0xFFFFFFFFFFFFFFFELL) + v15 + 2) : (v33 = 1), !v33))
    {
      v36 = (_WORD *)v15;
      v37 = (unsigned __int8 *)v10;
      goto LABEL_32;
    }
    v34 = (v32 >> 1) + 1;
    if (v32 >= 0x3E)
    {
      v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      v54 = (uint8x8_t *)(v10 + 16);
      v55 = (uint16x8_t *)(v15 + 32);
      v56 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v57 = *(uint8x16_t *)v54[-2].i8;
        v58 = vmovl_u8(*v54);
        v59 = vmovl_high_u8(*(uint8x16_t *)v54->i8);
        v55[-2] = vmovl_u8(*(uint8x8_t *)v57.i8);
        v55[-1] = vmovl_high_u8(v57);
        *v55 = v58;
        v55[1] = v59;
        v55 += 4;
        v54 += 4;
        v56 -= 32;
      }
      while (v56);
      if (v34 == v35)
        goto LABEL_33;
      if ((v34 & 0x18) == 0)
      {
        v37 = (unsigned __int8 *)(v10 + v35);
        v36 = (_WORD *)(v15 + 2 * v35);
        goto LABEL_32;
      }
    }
    else
    {
      v35 = 0;
    }
    v36 = (_WORD *)(v15 + 2 * (v34 & 0xFFFFFFFFFFFFFFF8));
    v37 = (unsigned __int8 *)(v10 + (v34 & 0xFFFFFFFFFFFFFFF8));
    v60 = (uint8x8_t *)(v10 + v35);
    v61 = (uint16x8_t *)(v15 + 2 * v35);
    v62 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v63 = *v60++;
      *v61++ = vmovl_u8(v63);
      v62 += 8;
    }
    while (v62);
    if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_33;
    do
    {
LABEL_32:
      v38 = *v37++;
      *v36++ = v38;
    }
    while (v36 != (_WORD *)v14);
    goto LABEL_33;
  }
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  size_t v25;
  _BYTE *v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  _WORD *v31;
  unsigned __int8 *v32;
  __int16 v33;
  _WORD *v34;
  unint64_t v35;
  __int128 v36;
  int8x16_t v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  _WORD *v44;
  unsigned __int8 *v45;
  __int16 v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t *v49;
  uint16x8_t *v50;
  unint64_t v51;
  uint8x16_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint8x8_t *v55;
  uint16x8_t *v56;
  unint64_t v57;
  uint8x8_t v58;
  uint8x8_t *v59;
  uint16x8_t *v60;
  unint64_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x8_t *v65;
  uint16x8_t *v66;
  unint64_t v67;
  uint8x8_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;

  v5 = *((_QWORD *)a1 + 1);
  if (!v5 && (v5 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v21 = result;
    v22 = a2[1];
    v23 = v22;
    v24 = *(_BYTE **)a3;
    v25 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v22)
    {
      v26 = (_BYTE *)*a2;
      if ((_DWORD)v22 != 1)
      {
        result = memcpy(result, v26, a2[1]);
        if (!(_DWORD)v25)
          return result;
        goto LABEL_17;
      }
      *result = *v26;
    }
    if (!(_DWORD)v25)
      return result;
LABEL_17:
    result = &v21[v23];
    if ((_DWORD)v25 != 1)
      return memcpy(result, v24, v25);
    *result = *v24;
    return result;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result)
    return result;
  v8 = *a2;
  v7 = a2[1];
  v9 = *(_QWORD *)a3;
  v10 = *(unsigned int *)(a3 + 8);
  v11 = (unint64_t)&result[2 * v7];
  if ((v7 & 0xFFFFFFC0) == 0)
  {
    v12 = (unint64_t)result;
    v7 = a2[1];
    if (result == (_BYTE *)v11)
      goto LABEL_31;
LABEL_21:
    v27 = (unint64_t)&result[2 * v7 - v12 - 2];
    if (v27 < 0xE
      || (v12 < v8 + (v27 >> 1) + 1 ? (v28 = v8 >= (v27 & 0xFFFFFFFFFFFFFFFELL) + v12 + 2) : (v28 = 1), !v28))
    {
      v31 = (_WORD *)v12;
      v32 = (unsigned __int8 *)v8;
      goto LABEL_30;
    }
    v29 = (v27 >> 1) + 1;
    if (v27 >= 0x3E)
    {
      v30 = v29 & 0xFFFFFFFFFFFFFFE0;
      v49 = (uint8x8_t *)(v8 + 16);
      v50 = (uint16x8_t *)(v12 + 32);
      v51 = v29 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v52 = *(uint8x16_t *)v49[-2].i8;
        v53 = vmovl_u8(*v49);
        v54 = vmovl_high_u8(*(uint8x16_t *)v49->i8);
        v50[-2] = vmovl_u8(*(uint8x8_t *)v52.i8);
        v50[-1] = vmovl_high_u8(v52);
        *v50 = v53;
        v50[1] = v54;
        v50 += 4;
        v49 += 4;
        v51 -= 32;
      }
      while (v51);
      if (v29 == v30)
        goto LABEL_31;
      if ((v29 & 0x18) == 0)
      {
        v32 = (unsigned __int8 *)(v8 + v30);
        v31 = (_WORD *)(v12 + 2 * v30);
        goto LABEL_30;
      }
    }
    else
    {
      v30 = 0;
    }
    v31 = (_WORD *)(v12 + 2 * (v29 & 0xFFFFFFFFFFFFFFF8));
    v32 = (unsigned __int8 *)(v8 + (v29 & 0xFFFFFFFFFFFFFFF8));
    v55 = (uint8x8_t *)(v8 + v30);
    v56 = (uint16x8_t *)(v12 + 2 * v30);
    v57 = v30 - (v29 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v58 = *v55++;
      *v56++ = vmovl_u8(v58);
      v57 += 8;
    }
    while (v57);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_31;
    do
    {
LABEL_30:
      v33 = *v32++;
      *v31++ = v33;
    }
    while (v31 != (_WORD *)v11);
    goto LABEL_31;
  }
  v12 = (unint64_t)&result[2 * (a2[1] & 0xFFFFFFC0)];
  v13 = 0uLL;
  v14 = result;
  do
  {
    v69.val[0] = *(int8x16_t *)v8;
    v15 = *(int8x16_t *)(v8 + 16);
    v71.val[0] = *(int8x16_t *)(v8 + 32);
    v16 = *(_OWORD *)(v8 + 48);
    v8 += 64;
    v17 = v16;
    v71.val[1] = 0uLL;
    v73.val[0] = v15;
    v69.val[1] = 0uLL;
    v18 = v14;
    vst2q_s8(v18, v69);
    v18 += 32;
    v73.val[1] = 0uLL;
    vst2q_s8(v18, v73);
    v19 = v14 + 64;
    vst2q_s8(v19, v71);
    v20 = v14 + 96;
    vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
    v14 += 128;
  }
  while (v14 != (char *)v12);
  v7 = v7;
  if (v12 != v11)
    goto LABEL_21;
LABEL_31:
  v34 = (_WORD *)(v11 + 2 * v10);
  if ((v10 & 0xFFFFFFC0) != 0)
  {
    v35 = v11 + 2 * (v10 & 0xFFFFFFC0);
    v36 = 0uLL;
    do
    {
      v70.val[0] = *(int8x16_t *)v9;
      v37 = *(int8x16_t *)(v9 + 16);
      v72.val[0] = *(int8x16_t *)(v9 + 32);
      v38 = *(_OWORD *)(v9 + 48);
      v9 += 64;
      v39 = v38;
      v72.val[1] = 0uLL;
      v74.val[0] = v37;
      v70.val[1] = 0uLL;
      v40 = (char *)v11;
      vst2q_s8(v40, v70);
      v40 += 32;
      v74.val[1] = 0uLL;
      vst2q_s8(v40, v74);
      v41 = (char *)(v11 + 64);
      vst2q_s8(v41, v72);
      v42 = (char *)(v11 + 96);
      vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
      v11 += 128;
    }
    while (v11 != v35);
    v11 = v35;
  }
  if ((_WORD *)v11 != v34)
  {
    v43 = (unint64_t)&result[2 * v7 + 2 * v10 - v11 - 2];
    if (v43 < 0xE || v11 < v9 + (v43 >> 1) + 1 && v9 < (v43 & 0xFFFFFFFFFFFFFFFELL) + v11 + 2)
    {
      v44 = (_WORD *)v11;
      v45 = (unsigned __int8 *)v9;
      goto LABEL_40;
    }
    v47 = (v43 >> 1) + 1;
    if (v43 >= 0x3E)
    {
      v48 = v47 & 0xFFFFFFFFFFFFFFE0;
      v59 = (uint8x8_t *)(v9 + 16);
      v60 = (uint16x8_t *)(v11 + 32);
      v61 = v47 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v62 = *(uint8x16_t *)v59[-2].i8;
        v63 = vmovl_u8(*v59);
        v64 = vmovl_high_u8(*(uint8x16_t *)v59->i8);
        v60[-2] = vmovl_u8(*(uint8x8_t *)v62.i8);
        v60[-1] = vmovl_high_u8(v62);
        *v60 = v63;
        v60[1] = v64;
        v60 += 4;
        v59 += 4;
        v61 -= 32;
      }
      while (v61);
      if (v47 == v48)
        return result;
      if ((v47 & 0x18) == 0)
      {
        v45 = (unsigned __int8 *)(v9 + v48);
        v44 = (_WORD *)(v11 + 2 * v48);
        do
        {
LABEL_40:
          v46 = *v45++;
          *v44++ = v46;
        }
        while (v44 != v34);
        return result;
      }
    }
    else
    {
      v48 = 0;
    }
    v44 = (_WORD *)(v11 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
    v45 = (unsigned __int8 *)(v9 + (v47 & 0xFFFFFFFFFFFFFFF8));
    v65 = (uint8x8_t *)(v9 + v48);
    v66 = (uint16x8_t *)(v11 + 2 * v48);
    v67 = v48 - (v47 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v68 = *v65++;
      *v66++ = vmovl_u8(v68);
      v67 += 8;
    }
    while (v67);
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_40;
  }
  return result;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int *a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  _BYTE *v25;
  size_t v26;
  int v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  size_t v33;
  char *v34;
  unint64_t v35;
  __int128 v36;
  int8x16_t v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  unsigned __int8 *v45;
  __int16 v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  int8x16_t v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unsigned __int8 *v64;
  __int16 v65;
  uint64_t v66;
  unint64_t v67;
  uint8x8_t *v68;
  uint16x8_t *v69;
  unint64_t v70;
  uint8x16_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint8x8_t *v74;
  uint16x8_t *v75;
  unint64_t v76;
  uint8x8_t v77;
  uint8x8_t *v78;
  uint16x8_t *v79;
  unint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint8x8_t *v84;
  uint16x8_t *v85;
  unint64_t v86;
  uint8x8_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;

  v9 = *((_QWORD *)a1 + 1);
  if (!v9 && (v9 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    v22 = (char *)MEMORY[0x186DAB068]();
    if (!v22)
      return;
    v23 = v22;
    v24 = *a2;
    v25 = *(_BYTE **)a3;
    v26 = *(unsigned int *)(a3 + 8);
    v27 = *a4;
    v28 = *(char **)a5;
    v29 = *(unsigned int *)(a5 + 8);
    v30 = (4 * v24);
    if ((_DWORD)v30)
    {
      memset(v22, 32, (4 * v24));
      v31 = &v23[v30];
      if (!(_DWORD)v26)
        goto LABEL_15;
    }
    else
    {
      v31 = v22;
      if (!(_DWORD)v26)
        goto LABEL_15;
    }
    if ((_DWORD)v26 != 1)
    {
      memcpy(v31, v25, v26);
      v32 = &v31[v26];
      v33 = (4 * v27);
      if ((_DWORD)v33)
      {
LABEL_16:
        memset(v32, 32, v33);
        if (!(_DWORD)v29)
          return;
LABEL_20:
        v34 = &v32[v33];
        if ((_DWORD)v29 == 1)
          *v34 = *v28;
        else
          memcpy(v34, v28, v29);
        return;
      }
LABEL_19:
      v33 = 0;
      if (!(_DWORD)v29)
        return;
      goto LABEL_20;
    }
    *v31 = *v25;
LABEL_15:
    v32 = &v31[v26];
    v33 = (4 * v27);
    if ((_DWORD)v33)
      goto LABEL_16;
    goto LABEL_19;
  }
  v10 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!v10)
    return;
  v11 = v10;
  v12 = *a2;
  v13 = *(_QWORD *)a3;
  v14 = *(unsigned int *)(a3 + 8);
  v15 = *a4;
  v16 = *(_QWORD *)a5;
  v17 = *(unsigned int *)(a5 + 8);
  v18 = (4 * v12);
  if ((_DWORD)v18)
  {
    memset_pattern16(v10, asc_18260FF50, 2 * (4 * v12));
    v19 = (unint64_t)&v11[2 * v18];
    v20 = (char *)(v19 + 2 * v14);
    v21 = v14 & 0xFFFFFFC0;
    if ((v14 & 0xFFFFFFC0) == 0)
      goto LABEL_27;
  }
  else
  {
    v18 = 0;
    v19 = (unint64_t)v10;
    v20 = &v10[2 * v14];
    v21 = v14 & 0xFFFFFFC0;
    if ((v14 & 0xFFFFFFC0) == 0)
      goto LABEL_27;
  }
  v35 = v19 + 2 * v21;
  v36 = 0uLL;
  do
  {
    v88.val[0] = *(int8x16_t *)v13;
    v37 = *(int8x16_t *)(v13 + 16);
    v90.val[0] = *(int8x16_t *)(v13 + 32);
    v38 = *(_OWORD *)(v13 + 48);
    v13 += 64;
    v39 = v38;
    v90.val[1] = 0uLL;
    v92.val[0] = v37;
    v88.val[1] = 0uLL;
    v40 = (char *)v19;
    vst2q_s8(v40, v88);
    v40 += 32;
    v92.val[1] = 0uLL;
    vst2q_s8(v40, v92);
    v41 = (char *)(v19 + 64);
    vst2q_s8(v41, v90);
    v42 = (char *)(v19 + 96);
    vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
    v19 += 128;
  }
  while (v19 != v35);
  v19 = v35;
LABEL_27:
  if ((char *)v19 == v20)
    goto LABEL_33;
  v43 = (unint64_t)&v11[2 * v18 + 2 * v14 - v19 - 2];
  if (v43 < 0xE || v19 < v13 + (v43 >> 1) + 1 && v13 < (v43 & 0xFFFFFFFFFFFFFFFELL) + v19 + 2)
  {
    v44 = (char *)v19;
    v45 = (unsigned __int8 *)v13;
    goto LABEL_32;
  }
  v66 = (v43 >> 1) + 1;
  if (v43 >= 0x3E)
  {
    v67 = v66 & 0xFFFFFFFFFFFFFFE0;
    v78 = (uint8x8_t *)(v13 + 16);
    v79 = (uint16x8_t *)(v19 + 32);
    v80 = v66 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v81 = *(uint8x16_t *)v78[-2].i8;
      v82 = vmovl_u8(*v78);
      v83 = vmovl_high_u8(*(uint8x16_t *)v78->i8);
      v79[-2] = vmovl_u8(*(uint8x8_t *)v81.i8);
      v79[-1] = vmovl_high_u8(v81);
      *v79 = v82;
      v79[1] = v83;
      v79 += 4;
      v78 += 4;
      v80 -= 32;
    }
    while (v80);
    if (v66 == v67)
      goto LABEL_33;
    if ((v66 & 0x18) == 0)
    {
      v45 = (unsigned __int8 *)(v13 + v67);
      v44 = (char *)(v19 + 2 * v67);
      do
      {
LABEL_32:
        v46 = *v45++;
        *(_WORD *)v44 = v46;
        v44 += 2;
      }
      while (v44 != v20);
      goto LABEL_33;
    }
  }
  else
  {
    v67 = 0;
  }
  v44 = (char *)(v19 + 2 * (v66 & 0xFFFFFFFFFFFFFFF8));
  v45 = (unsigned __int8 *)(v13 + (v66 & 0xFFFFFFFFFFFFFFF8));
  v84 = (uint8x8_t *)(v13 + v67);
  v85 = (uint16x8_t *)(v19 + 2 * v67);
  v86 = v67 - (v66 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v87 = *v84++;
    *v85++ = vmovl_u8(v87);
    v86 += 8;
  }
  while (v86);
  if (v66 != (v66 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_32;
LABEL_33:
  v47 = (4 * v15);
  if ((_DWORD)v47)
  {
    memset_pattern16(v20, asc_18260FF50, 2 * v47);
    v48 = (unint64_t)&v20[2 * v47];
    v49 = (char *)(v48 + 2 * v17);
    v50 = v17 & 0xFFFFFFC0;
    if ((v17 & 0xFFFFFFC0) == 0)
      goto LABEL_40;
LABEL_37:
    v51 = v48 + 2 * v50;
    v52 = 0uLL;
    do
    {
      v89.val[0] = *(int8x16_t *)v16;
      v53 = *(int8x16_t *)(v16 + 16);
      v91.val[0] = *(int8x16_t *)(v16 + 32);
      v54 = *(_OWORD *)(v16 + 48);
      v16 += 64;
      v55 = v54;
      v91.val[1] = 0uLL;
      v93.val[0] = v53;
      v89.val[1] = 0uLL;
      v56 = (char *)v48;
      vst2q_s8(v56, v89);
      v56 += 32;
      v93.val[1] = 0uLL;
      vst2q_s8(v56, v93);
      v57 = (char *)(v48 + 64);
      vst2q_s8(v57, v91);
      v58 = (char *)(v48 + 96);
      vst2q_s8(v58, *(int8x16x2_t *)(&v52 - 1));
      v48 += 128;
    }
    while (v48 != v51);
    v48 = v51;
    goto LABEL_40;
  }
  v47 = 0;
  v48 = (unint64_t)v20;
  v49 = &v20[2 * v17];
  v50 = v17 & 0xFFFFFFC0;
  if ((v17 & 0xFFFFFFC0) != 0)
    goto LABEL_37;
LABEL_40:
  if ((char *)v48 == v49)
    return;
  v59 = (unint64_t)&v11[2 * v18 + 2 * v47 + 2 * v14 + 2 * v17 - v48 - 2];
  if (v59 < 0xE
    || (v48 < v16 + (v59 >> 1) + 1 ? (v60 = v16 >= (v59 & 0xFFFFFFFFFFFFFFFELL) + v48 + 2) : (v60 = 1), !v60))
  {
    v63 = (char *)v48;
    v64 = (unsigned __int8 *)v16;
    goto LABEL_50;
  }
  v61 = (v59 >> 1) + 1;
  if (v59 >= 0x3E)
  {
    v62 = v61 & 0xFFFFFFFFFFFFFFE0;
    v68 = (uint8x8_t *)(v16 + 16);
    v69 = (uint16x8_t *)(v48 + 32);
    v70 = v61 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v71 = *(uint8x16_t *)v68[-2].i8;
      v72 = vmovl_u8(*v68);
      v73 = vmovl_high_u8(*(uint8x16_t *)v68->i8);
      v69[-2] = vmovl_u8(*(uint8x8_t *)v71.i8);
      v69[-1] = vmovl_high_u8(v71);
      *v69 = v72;
      v69[1] = v73;
      v69 += 4;
      v68 += 4;
      v70 -= 32;
    }
    while (v70);
    if (v61 == v62)
      return;
    if ((v61 & 0x18) == 0)
    {
      v64 = (unsigned __int8 *)(v16 + v62);
      v63 = (char *)(v48 + 2 * v62);
      do
      {
LABEL_50:
        v65 = *v64++;
        *(_WORD *)v63 = v65;
        v63 += 2;
      }
      while (v63 != v49);
      return;
    }
  }
  else
  {
    v62 = 0;
  }
  v63 = (char *)(v48 + 2 * (v61 & 0xFFFFFFFFFFFFFFF8));
  v64 = (unsigned __int8 *)(v16 + (v61 & 0xFFFFFFFFFFFFFFF8));
  v74 = (uint8x8_t *)(v16 + v62);
  v75 = (uint16x8_t *)(v48 + 2 * v62);
  v76 = v62 - (v61 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v77 = *v74++;
    *v75++ = vmovl_u8(v77);
    v76 += 8;
  }
  while (v76);
  if (v61 != (v61 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_50;
}

uint16x8_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, unint64_t a2, unsigned int a3, int a4, unint64_t a5, unsigned int a6, int a7, uint64_t a8, unint64_t a9, unsigned int a10)
{
  char *v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  uint16x8_t v20;
  uint16x8_t result;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unsigned __int8 *v31;
  __int16 v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  int8x16_t v39;
  uint16x8_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unsigned __int8 *v50;
  __int16 v51;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  int8x16_t v59;
  uint16x8_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  unsigned __int8 *v69;
  __int16 v70;
  uint8x8_t *v71;
  uint16x8_t *v72;
  unint64_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint8x8_t *v78;
  uint16x8_t *v79;
  unint64_t v80;
  uint8x8_t v81;
  uint8x8_t *v82;
  uint16x8_t *v83;
  unint64_t v84;
  uint8x16_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint8x8_t *v89;
  uint16x8_t *v90;
  unint64_t v91;
  uint8x8_t v92;
  uint8x8_t *v93;
  uint16x8_t *v94;
  unint64_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x8_t *v100;
  uint16x8_t *v101;
  unint64_t v102;
  uint8x8_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;

  v15 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) == 0)
  {
    v16 = (unint64_t)a1;
    v25 = a3;
    if (a1 == v15)
      goto LABEL_17;
LABEL_7:
    v26 = (unint64_t)&a1[2 * v25 - v16 - 2];
    if (v26 < 0xE
      || (v16 < a2 + (v26 >> 1) + 1 ? (v27 = a2 >= (v26 & 0xFFFFFFFFFFFFFFFELL) + v16 + 2) : (v27 = 1), !v27))
    {
      v30 = (char *)v16;
      v31 = (unsigned __int8 *)a2;
      goto LABEL_16;
    }
    v28 = (v26 >> 1) + 1;
    if (v26 >= 0x3E)
    {
      v29 = v28 & 0xFFFFFFFFFFFFFFE0;
      v71 = (uint8x8_t *)(a2 + 16);
      v72 = (uint16x8_t *)(v16 + 32);
      v73 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v74 = *(uint8x16_t *)v71[-2].i8;
        v75 = vmovl_u8(*(uint8x8_t *)v74.i8);
        result = vmovl_high_u8(v74);
        v76 = vmovl_u8(*v71);
        v77 = vmovl_high_u8(*(uint8x16_t *)v71->i8);
        v72[-2] = v75;
        v72[-1] = result;
        *v72 = v76;
        v72[1] = v77;
        v72 += 4;
        v71 += 4;
        v73 -= 32;
      }
      while (v73);
      if (v28 == v29)
        goto LABEL_17;
      if ((v28 & 0x18) == 0)
      {
        v31 = (unsigned __int8 *)(a2 + v29);
        v30 = (char *)(v16 + 2 * v29);
        goto LABEL_16;
      }
    }
    else
    {
      v29 = 0;
    }
    v30 = (char *)(v16 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
    v31 = (unsigned __int8 *)(a2 + (v28 & 0xFFFFFFFFFFFFFFF8));
    v78 = (uint8x8_t *)(a2 + v29);
    v79 = (uint16x8_t *)(v16 + 2 * v29);
    v80 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v81 = *v78++;
      result = vmovl_u8(v81);
      *v79++ = result;
      v80 += 8;
    }
    while (v80);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_17;
    do
    {
LABEL_16:
      v32 = *v31++;
      *(_WORD *)v30 = v32;
      v30 += 2;
    }
    while (v30 != v15);
    goto LABEL_17;
  }
  v16 = (unint64_t)&a1[2 * (a3 & 0xFFFFFFC0)];
  v17 = 0uLL;
  v18 = a1;
  do
  {
    v104.val[0] = *(int8x16_t *)a2;
    v19 = *(int8x16_t *)(a2 + 16);
    v107.val[0] = *(int8x16_t *)(a2 + 32);
    v20 = *(uint16x8_t *)(a2 + 48);
    a2 += 64;
    result = v20;
    v107.val[1] = 0uLL;
    v110.val[0] = v19;
    v104.val[1] = 0uLL;
    v22 = v18;
    vst2q_s8(v22, v104);
    v22 += 32;
    v110.val[1] = 0uLL;
    vst2q_s8(v22, v110);
    v23 = v18 + 64;
    vst2q_s8(v23, v107);
    v24 = v18 + 96;
    vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
    v18 += 128;
  }
  while (v18 != (char *)v16);
  v25 = a3;
  if ((char *)v16 != v15)
    goto LABEL_7;
LABEL_17:
  v33 = (4 * a4);
  if ((_DWORD)v33)
  {
    memset_pattern16(v15, asc_18260FF50, 2 * (4 * a4));
    v34 = (unint64_t)&v15[2 * v33];
    v35 = (char *)(v34 + 2 * a6);
    v36 = a6 & 0xFFFFFFC0;
    if ((a6 & 0xFFFFFFC0) == 0)
      goto LABEL_24;
  }
  else
  {
    v34 = (unint64_t)&a1[2 * a3];
    v35 = &v15[2 * a6];
    v36 = a6 & 0xFFFFFFC0;
    if ((a6 & 0xFFFFFFC0) == 0)
      goto LABEL_24;
  }
  v37 = v34 + 2 * v36;
  v38 = 0uLL;
  do
  {
    v105.val[0] = *(int8x16_t *)a5;
    v39 = *(int8x16_t *)(a5 + 16);
    v108.val[0] = *(int8x16_t *)(a5 + 32);
    v40 = *(uint16x8_t *)(a5 + 48);
    a5 += 64;
    result = v40;
    v108.val[1] = 0uLL;
    v111.val[0] = v39;
    v105.val[1] = 0uLL;
    v41 = (char *)v34;
    vst2q_s8(v41, v105);
    v41 += 32;
    v111.val[1] = 0uLL;
    vst2q_s8(v41, v111);
    v42 = (char *)(v34 + 64);
    vst2q_s8(v42, v108);
    v43 = (char *)(v34 + 96);
    vst2q_s8(v43, *(int8x16x2_t *)result.i8);
    v34 += 128;
  }
  while (v34 != v37);
  v34 = v37;
LABEL_24:
  v44 = 8 * (a4 & 0x3FFFFFFF);
  if ((char *)v34 == v35)
    goto LABEL_35;
  v45 = (unint64_t)&a1[2 * v25 + 2 * a6 + v44 - v34 - 2];
  if (v45 < 0xE || (v34 < a5 + (v45 >> 1) + 1 ? (v46 = a5 >= (v45 & 0xFFFFFFFFFFFFFFFELL) + v34 + 2) : (v46 = 1), !v46))
  {
    v49 = (char *)v34;
    v50 = (unsigned __int8 *)a5;
    goto LABEL_34;
  }
  v47 = (v45 >> 1) + 1;
  if (v45 >= 0x3E)
  {
    v48 = v47 & 0xFFFFFFFFFFFFFFE0;
    v82 = (uint8x8_t *)(a5 + 16);
    v83 = (uint16x8_t *)(v34 + 32);
    v84 = v47 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v85 = *(uint8x16_t *)v82[-2].i8;
      v86 = vmovl_u8(*(uint8x8_t *)v85.i8);
      result = vmovl_high_u8(v85);
      v87 = vmovl_u8(*v82);
      v88 = vmovl_high_u8(*(uint8x16_t *)v82->i8);
      v83[-2] = v86;
      v83[-1] = result;
      *v83 = v87;
      v83[1] = v88;
      v83 += 4;
      v82 += 4;
      v84 -= 32;
    }
    while (v84);
    if (v47 == v48)
      goto LABEL_35;
    if ((v47 & 0x18) == 0)
    {
      v50 = (unsigned __int8 *)(a5 + v48);
      v49 = (char *)(v34 + 2 * v48);
      do
      {
LABEL_34:
        v51 = *v50++;
        *(_WORD *)v49 = v51;
        v49 += 2;
      }
      while (v49 != v35);
      goto LABEL_35;
    }
  }
  else
  {
    v48 = 0;
  }
  v49 = (char *)(v34 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
  v50 = (unsigned __int8 *)(a5 + (v47 & 0xFFFFFFFFFFFFFFF8));
  v89 = (uint8x8_t *)(a5 + v48);
  v90 = (uint16x8_t *)(v34 + 2 * v48);
  v91 = v48 - (v47 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v92 = *v89++;
    result = vmovl_u8(v92);
    *v90++ = result;
    v91 += 8;
  }
  while (v91);
  if (v47 != (v47 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_34;
LABEL_35:
  v53 = (4 * a7);
  if ((_DWORD)v53)
  {
    memset_pattern16(v35, asc_18260FF50, 2 * (4 * a7));
    v54 = (unint64_t)&v35[2 * v53];
    v55 = (char *)(v54 + 2 * a10);
    v56 = a10 & 0xFFFFFFC0;
    if ((a10 & 0xFFFFFFC0) == 0)
      goto LABEL_42;
  }
  else
  {
    v54 = (unint64_t)v35;
    v55 = &v35[2 * a10];
    v56 = a10 & 0xFFFFFFC0;
    if ((a10 & 0xFFFFFFC0) == 0)
      goto LABEL_42;
  }
  v57 = v54 + 2 * v56;
  v58 = 0uLL;
  do
  {
    v106.val[0] = *(int8x16_t *)a9;
    v59 = *(int8x16_t *)(a9 + 16);
    v109.val[0] = *(int8x16_t *)(a9 + 32);
    v60 = *(uint16x8_t *)(a9 + 48);
    a9 += 64;
    result = v60;
    v109.val[1] = 0uLL;
    v112.val[0] = v59;
    v106.val[1] = 0uLL;
    v61 = (char *)v54;
    vst2q_s8(v61, v106);
    v61 += 32;
    v112.val[1] = 0uLL;
    vst2q_s8(v61, v112);
    v62 = (char *)(v54 + 64);
    vst2q_s8(v62, v109);
    v63 = (char *)(v54 + 96);
    vst2q_s8(v63, *(int8x16x2_t *)result.i8);
    v54 += 128;
  }
  while (v54 != v57);
  v54 = v57;
LABEL_42:
  if ((char *)v54 == v55)
    return result;
  v64 = (unint64_t)&a1[8 * (a7 & 0x3FFFFFFF) + 2 * v25 + 2 * a6 + 2 * a10 + v44 - v54 - 2];
  if (v64 < 0xE || (v54 < a9 + (v64 >> 1) + 1 ? (v65 = a9 >= (v64 & 0xFFFFFFFFFFFFFFFELL) + v54 + 2) : (v65 = 1), !v65))
  {
    v68 = (char *)v54;
    v69 = (unsigned __int8 *)a9;
    goto LABEL_52;
  }
  v66 = (v64 >> 1) + 1;
  if (v64 >= 0x3E)
  {
    v67 = v66 & 0xFFFFFFFFFFFFFFE0;
    v93 = (uint8x8_t *)(a9 + 16);
    v94 = (uint16x8_t *)(v54 + 32);
    v95 = v66 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v96 = *(uint8x16_t *)v93[-2].i8;
      v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
      result = vmovl_high_u8(v96);
      v98 = vmovl_u8(*v93);
      v99 = vmovl_high_u8(*(uint8x16_t *)v93->i8);
      v94[-2] = v97;
      v94[-1] = result;
      *v94 = v98;
      v94[1] = v99;
      v94 += 4;
      v93 += 4;
      v95 -= 32;
    }
    while (v95);
    if (v66 == v67)
      return result;
    if ((v66 & 0x18) == 0)
    {
      v69 = (unsigned __int8 *)(a9 + v67);
      v68 = (char *)(v54 + 2 * v67);
      do
      {
LABEL_52:
        v70 = *v69++;
        *(_WORD *)v68 = v70;
        v68 += 2;
      }
      while (v68 != v55);
      return result;
    }
  }
  else
  {
    v67 = 0;
  }
  v68 = (char *)(v54 + 2 * (v66 & 0xFFFFFFFFFFFFFFF8));
  v69 = (unsigned __int8 *)(a9 + (v66 & 0xFFFFFFFFFFFFFFF8));
  v100 = (uint8x8_t *)(a9 + v67);
  v101 = (uint16x8_t *)(v54 + 2 * v67);
  v102 = v67 - (v66 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v103 = *v100++;
    result = vmovl_u8(v103);
    *v101++ = result;
    v102 += 8;
  }
  while (v102);
  if (v66 != (v66 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_52;
  return result;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  __int16 v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t *v36;
  uint16x8_t *v37;
  unint64_t v38;
  uint8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint8x8_t *v42;
  uint16x8_t *v43;
  unint64_t v44;
  uint8x8_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  v5 = *((_QWORD *)a1 + 1);
  if (!v5 && (v5 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    v15 = (char *)MEMORY[0x186DAB068]();
    if (!v15)
      return;
    v16 = v15;
    v17 = *a2;
    v18 = *(char **)a3;
    v19 = *(unsigned int *)(a3 + 8);
    v20 = (4 * *a2);
    if ((_DWORD)v20)
    {
      memset(v15, 32, (4 * v17));
      if (!(_DWORD)v19)
        return;
    }
    else
    {
      v20 = 0;
      if (!(_DWORD)v19)
        return;
    }
    v21 = &v16[v20];
    if ((_DWORD)v19 == 1)
      *v21 = *v18;
    else
      memcpy(v21, v18, v19);
    return;
  }
  v6 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!v6)
    return;
  v7 = v6;
  v8 = *a2;
  v9 = *(_QWORD *)a3;
  v10 = *(unsigned int *)(a3 + 8);
  v11 = (4 * v8);
  if ((_DWORD)v11)
  {
    memset_pattern16(v6, asc_18260FF50, 2 * (4 * v8));
    v12 = (unint64_t)&v7[2 * v11];
    v13 = (char *)(v12 + 2 * v10);
    v14 = v10 & 0xFFFFFFC0;
    if ((v10 & 0xFFFFFFC0) == 0)
      goto LABEL_20;
LABEL_17:
    v22 = v12 + 2 * v14;
    v23 = 0uLL;
    do
    {
      v46.val[0] = *(int8x16_t *)v9;
      v24 = *(int8x16_t *)(v9 + 16);
      v47.val[0] = *(int8x16_t *)(v9 + 32);
      v25 = *(_OWORD *)(v9 + 48);
      v9 += 64;
      v26 = v25;
      v47.val[1] = 0uLL;
      v48.val[0] = v24;
      v46.val[1] = 0uLL;
      v27 = (char *)v12;
      vst2q_s8(v27, v46);
      v27 += 32;
      v48.val[1] = 0uLL;
      vst2q_s8(v27, v48);
      v28 = (char *)(v12 + 64);
      vst2q_s8(v28, v47);
      v29 = (char *)(v12 + 96);
      vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
      v12 += 128;
    }
    while (v12 != v22);
    v12 = v22;
    goto LABEL_20;
  }
  v11 = 0;
  v12 = (unint64_t)v6;
  v13 = &v6[2 * v10];
  v14 = v10 & 0xFFFFFFC0;
  if ((v10 & 0xFFFFFFC0) != 0)
    goto LABEL_17;
LABEL_20:
  if ((char *)v12 == v13)
    return;
  v30 = (unint64_t)&v7[2 * v11 + 2 * v10 - v12 - 2];
  if (v30 < 0xE || v12 < v9 + (v30 >> 1) + 1 && v9 < (v30 & 0xFFFFFFFFFFFFFFFELL) + v12 + 2)
  {
    v31 = (char *)v12;
    v32 = (unsigned __int8 *)v9;
    goto LABEL_25;
  }
  v34 = (v30 >> 1) + 1;
  if (v30 >= 0x3E)
  {
    v35 = v34 & 0xFFFFFFFFFFFFFFE0;
    v36 = (uint8x8_t *)(v9 + 16);
    v37 = (uint16x8_t *)(v12 + 32);
    v38 = v34 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v39 = *(uint8x16_t *)v36[-2].i8;
      v40 = vmovl_u8(*v36);
      v41 = vmovl_high_u8(*(uint8x16_t *)v36->i8);
      v37[-2] = vmovl_u8(*(uint8x8_t *)v39.i8);
      v37[-1] = vmovl_high_u8(v39);
      *v37 = v40;
      v37[1] = v41;
      v37 += 4;
      v36 += 4;
      v38 -= 32;
    }
    while (v38);
    if (v34 == v35)
      return;
    if ((v34 & 0x18) == 0)
    {
      v32 = (unsigned __int8 *)(v9 + v35);
      v31 = (char *)(v12 + 2 * v35);
      do
      {
LABEL_25:
        v33 = *v32++;
        *(_WORD *)v31 = v33;
        v31 += 2;
      }
      while (v31 != v13);
      return;
    }
  }
  else
  {
    v35 = 0;
  }
  v31 = (char *)(v12 + 2 * (v34 & 0xFFFFFFFFFFFFFFF8));
  v32 = (unsigned __int8 *)(v9 + (v34 & 0xFFFFFFFFFFFFFFF8));
  v42 = (uint8x8_t *)(v9 + v35);
  v43 = (uint16x8_t *)(v12 + 2 * v35);
  v44 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v45 = *v42++;
    *v43++ = vmovl_u8(v45);
    v44 += 8;
  }
  while (v44);
  if (v34 != (v34 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_25;
}

double WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double result;
  char *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  _BYTE *v31;
  size_t v32;
  int v33;
  _BYTE *v34;
  size_t v35;
  int v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  size_t v41;
  char *v42;
  size_t v43;
  char *v44;

  v13 = *((_QWORD *)a1 + 1);
  if (!v13 && (v13 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v13 + 16) & 4) != 0)
  {
    v28 = (_BYTE *)MEMORY[0x186DAB068]();
    if (!v28)
      return result;
    v29 = v28;
    v30 = *a2;
    v31 = *(_BYTE **)a3;
    v32 = *(unsigned int *)(a3 + 8);
    v33 = *a4;
    v34 = *(_BYTE **)a5;
    v35 = *(unsigned int *)(a5 + 8);
    v36 = *a6;
    v37 = *(char **)a7;
    v38 = *(unsigned int *)(a7 + 8);
    v39 = (4 * v30);
    if ((_DWORD)v39)
    {
      memset(v28, 32, (4 * v30));
      v29 += v39;
      if (!(_DWORD)v32)
        goto LABEL_14;
    }
    else if (!(_DWORD)v32)
    {
      goto LABEL_14;
    }
    if ((_DWORD)v32 != 1)
    {
      memcpy(v29, v31, v32);
      v40 = &v29[v32];
      v41 = (4 * v33);
      if ((_DWORD)v41)
      {
LABEL_15:
        memset(v40, 32, v41);
        v40 += v41;
        if (!(_DWORD)v35)
          goto LABEL_21;
        goto LABEL_19;
      }
LABEL_18:
      if (!(_DWORD)v35)
        goto LABEL_21;
LABEL_19:
      if ((_DWORD)v35 != 1)
      {
        memcpy(v40, v34, v35);
        v42 = &v40[v35];
        v43 = (4 * v36);
        if ((_DWORD)v43)
        {
LABEL_22:
          memset(v42, 32, v43);
          if (!(_DWORD)v38)
            return result;
          goto LABEL_26;
        }
LABEL_25:
        v43 = 0;
        if (!(_DWORD)v38)
          return result;
LABEL_26:
        v44 = &v42[v43];
        if ((_DWORD)v38 == 1)
          *v44 = *v37;
        else
          memcpy(v44, v37, v38);
        return result;
      }
      *v40 = *v34;
LABEL_21:
      v42 = &v40[v35];
      v43 = (4 * v36);
      if ((_DWORD)v43)
        goto LABEL_22;
      goto LABEL_25;
    }
    *v29 = *v31;
LABEL_14:
    v40 = &v29[v32];
    v41 = (4 * v33);
    if ((_DWORD)v41)
      goto LABEL_15;
    goto LABEL_18;
  }
  v14 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (v14)
  {
    v17 = v14;
    v18 = *a2;
    v20 = *(_QWORD *)a3;
    v19 = *(_QWORD *)(a3 + 8);
    v21 = *a4;
    v23 = *(_QWORD *)a5;
    v22 = *(_QWORD *)(a5 + 8);
    v24 = *a6;
    v26 = *(_QWORD *)a7;
    v25 = *(_QWORD *)(a7 + 8);
    v27 = (4 * v18);
    if ((_DWORD)v27)
      memset_pattern16(v14, asc_18260FF50, 2 * (4 * v18));
    else
      v27 = 0;
    *(_QWORD *)&result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v17[2 * v27], v20, v19, v21, v23, v22, v24, v15, v26, v25).u64[0];
  }
  return result;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int *a2, unint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int8x16_t *v23;
  size_t v24;
  char *v25;
  unint64_t v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  char *v34;
  int8x16_t *v35;
  char v36;
  char *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int16x8_t *v45;
  int8x8_t *v46;
  unint64_t v47;
  int16x8_t v48;

  v9 = *a4;
  v10 = *((_QWORD *)a1 + 1);
  if ((v10 || (v10 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v10 + 16) & 4) == 0 || v9 && (*(_BYTE *)(v9 + 16) & 4) == 0)
  {
    v11 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (v11)
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v11, *a2, *a3, a3[1], *a4, *a5, a5[1]);
    return;
  }
  v12 = (char *)MEMORY[0x186DAB068]();
  if (!v12)
    return;
  v13 = v12;
  v14 = *a2;
  v15 = (char *)*a3;
  v16 = *((unsigned int *)a3 + 2);
  v17 = *a4;
  v18 = (char *)*a5;
  v19 = *((unsigned int *)a5 + 2);
  v20 = (4 * v14);
  if ((_DWORD)v20)
  {
    memset(v12, 32, (4 * v14));
    v21 = &v13[v20];
    if (!(_DWORD)v16)
    {
LABEL_15:
      v22 = &v21[v16];
      if (v17)
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  else
  {
    v20 = 0;
    v21 = v12;
    if (!(_DWORD)v16)
      goto LABEL_15;
  }
  if ((_DWORD)v16 == 1)
  {
    *v21 = *v15;
    goto LABEL_15;
  }
  memcpy(v21, v15, v16);
  v22 = &v21[v16];
  if (v17)
  {
LABEL_16:
    v23 = *(int8x16_t **)(v17 + 8);
    v24 = *(unsigned int *)(v17 + 4);
    if ((*(_BYTE *)(v17 + 16) & 4) != 0)
    {
      if ((_DWORD)v24)
      {
        if ((_DWORD)v24 == 1)
          *v22 = v23->i8[0];
        else
          memcpy(v22, v23, v24);
      }
    }
    else
    {
      v25 = &v22[v24];
      if (v24 < 0x10)
      {
        v26 = (unint64_t)v22;
      }
      else
      {
        v26 = (unint64_t)&v22[v24 & 0xFFFFFFF0];
        v27 = (unsigned __int128 *)v22;
        do
        {
          v28 = (unsigned __int128)vld2q_s8(v23->i8);
          v23 += 2;
          *v27++ = v28;
        }
        while (v27 != (unsigned __int128 *)v26);
      }
      if ((char *)v26 != v25)
      {
        v30 = (size_t)&v13[v24 + v20 + v16];
        v31 = v30 - v26;
        if (v30 - v26 < 8
          || (v26 < (unint64_t)v23 + 2 * v31 ? (v32 = (unint64_t)v23 >= v30) : (v32 = 1), !v32))
        {
          v34 = (char *)v26;
          v35 = v23;
          goto LABEL_38;
        }
        if (v31 >= 0x20)
        {
          v33 = v31 & 0xFFFFFFFFFFFFFFE0;
          v38 = v23 + 2;
          v39 = (int8x16_t *)(v26 + 16);
          v40 = v31 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v42 = v38[-2];
            v41 = v38[-1];
            v44 = *v38;
            v43 = v38[1];
            v38 += 4;
            v39[-1] = vuzp1q_s8(v42, v41);
            *v39 = vuzp1q_s8(v44, v43);
            v39 += 2;
            v40 -= 32;
          }
          while (v40);
          if (v31 == v33)
            goto LABEL_41;
          if ((v31 & 0x18) == 0)
          {
            v35 = (int8x16_t *)((char *)v23 + 2 * v33);
            v34 = (char *)(v26 + v33);
            do
            {
LABEL_38:
              v36 = v35->i8[0];
              v35 = (int8x16_t *)((char *)v35 + 2);
              *v34++ = v36;
            }
            while (v34 != v25);
            goto LABEL_41;
          }
        }
        else
        {
          v33 = 0;
        }
        v34 = (char *)(v26 + (v31 & 0xFFFFFFFFFFFFFFF8));
        v35 = (int8x16_t *)((char *)v23 + 2 * (v31 & 0xFFFFFFFFFFFFFFF8));
        v45 = (int16x8_t *)((char *)v23 + 2 * v33);
        v46 = (int8x8_t *)(v26 + v33);
        v47 = v33 - (v31 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v48 = *v45++;
          *v46++ = vmovn_s16(v48);
          v47 += 8;
        }
        while (v47);
        if (v31 != (v31 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_38;
      }
    }
LABEL_41:
    v29 = *(unsigned int *)(v17 + 4);
    if (!(_DWORD)v19)
      return;
    goto LABEL_42;
  }
LABEL_22:
  v29 = 0;
  if (!(_DWORD)v19)
    return;
LABEL_42:
  v37 = &v22[v29];
  if ((_DWORD)v19 == 1)
    *v37 = *v18;
  else
    memcpy(v37, v18, v19);
}

uint16x8_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__b, int a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, unsigned int a7)
{
  uint64_t v14;
  uint16x8_t result;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  int8x16_t v21;
  uint16x8_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  char *v43;
  int8x16_t v44;
  uint16x8_t v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  __int16 v55;
  unint64_t v56;
  __int128 v57;
  int8x16_t v58;
  uint16x8_t v59;
  char *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unsigned __int8 *v68;
  __int16 v69;
  uint8x8_t *v70;
  uint16x8_t *v71;
  unint64_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint8x8_t *v77;
  uint16x8_t *v78;
  unint64_t v79;
  uint8x8_t v80;
  uint8x8_t *v81;
  uint16x8_t *v82;
  unint64_t v83;
  uint8x16_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint8x8_t *v88;
  uint16x8_t *v89;
  unint64_t v90;
  uint8x8_t v91;
  uint8x8_t *v92;
  uint16x8_t *v93;
  unint64_t v94;
  uint8x16_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint8x8_t *v99;
  uint16x8_t *v100;
  unint64_t v101;
  uint8x8_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;

  v14 = (4 * a2);
  if ((_DWORD)v14)
  {
    memset_pattern16(__b, asc_18260FF50, 2 * (4 * a2));
    v16 = &__b[2 * v14];
    v17 = &v16[2 * a4];
    v18 = a4 & 0xFFFFFFC0;
    if ((a4 & 0xFFFFFFC0) == 0)
      goto LABEL_8;
  }
  else
  {
    v16 = __b;
    v17 = &__b[2 * a4];
    v18 = a4 & 0xFFFFFFC0;
    if ((a4 & 0xFFFFFFC0) == 0)
      goto LABEL_8;
  }
  v19 = &v16[2 * v18];
  v20 = 0uLL;
  do
  {
    v103.val[0] = *(int8x16_t *)a3;
    v21 = *(int8x16_t *)(a3 + 16);
    v106.val[0] = *(int8x16_t *)(a3 + 32);
    v22 = *(uint16x8_t *)(a3 + 48);
    a3 += 64;
    result = v22;
    v106.val[1] = 0uLL;
    v109.val[0] = v21;
    v103.val[1] = 0uLL;
    v23 = v16;
    vst2q_s8(v23, v103);
    v23 += 32;
    v109.val[1] = 0uLL;
    vst2q_s8(v23, v109);
    v24 = v16 + 64;
    vst2q_s8(v24, v106);
    v25 = v16 + 96;
    vst2q_s8(v25, *(int8x16x2_t *)result.i8);
    v16 += 128;
  }
  while (v16 != v19);
  v16 = v19;
LABEL_8:
  v26 = 8 * (a2 & 0x3FFFFFFF);
  if (v16 == v17)
    goto LABEL_19;
  v27 = &__b[2 * a4 + v26] - v16 - 2;
  if (v27 < 0xE
    || ((unint64_t)v16 < a3 + (v27 >> 1) + 1
      ? (v28 = a3 >= (unint64_t)&v16[(v27 & 0xFFFFFFFFFFFFFFFELL) + 2])
      : (v28 = 1),
        !v28))
  {
    v31 = v16;
    v32 = (unsigned __int8 *)a3;
    goto LABEL_18;
  }
  v29 = (v27 >> 1) + 1;
  if (v27 >= 0x3E)
  {
    v30 = v29 & 0xFFFFFFFFFFFFFFE0;
    v70 = (uint8x8_t *)(a3 + 16);
    v71 = (uint16x8_t *)(v16 + 32);
    v72 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v73 = *(uint8x16_t *)v70[-2].i8;
      v74 = vmovl_u8(*(uint8x8_t *)v73.i8);
      result = vmovl_high_u8(v73);
      v75 = vmovl_u8(*v70);
      v76 = vmovl_high_u8(*(uint8x16_t *)v70->i8);
      v71[-2] = v74;
      v71[-1] = result;
      *v71 = v75;
      v71[1] = v76;
      v71 += 4;
      v70 += 4;
      v72 -= 32;
    }
    while (v72);
    if (v29 == v30)
      goto LABEL_19;
    if ((v29 & 0x18) == 0)
    {
      v32 = (unsigned __int8 *)(a3 + v30);
      v31 = &v16[2 * v30];
      do
      {
LABEL_18:
        v33 = *v32++;
        *(_WORD *)v31 = v33;
        v31 += 2;
      }
      while (v31 != v17);
      goto LABEL_19;
    }
  }
  else
  {
    v30 = 0;
  }
  v31 = &v16[2 * (v29 & 0xFFFFFFFFFFFFFFF8)];
  v32 = (unsigned __int8 *)(a3 + (v29 & 0xFFFFFFFFFFFFFFF8));
  v77 = (uint8x8_t *)(a3 + v30);
  v78 = (uint16x8_t *)&v16[2 * v30];
  v79 = v30 - (v29 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v80 = *v77++;
    result = vmovl_u8(v80);
    *v78++ = result;
    v79 += 8;
  }
  while (v79);
  if (v29 != (v29 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_18;
LABEL_19:
  if (!a5)
  {
    v36 = 0;
    v37 = (unint64_t)v17;
    v38 = &v17[2 * a7];
    v39 = a7 & 0xFFFFFFC0;
    if ((a7 & 0xFFFFFFC0) == 0)
      goto LABEL_48;
    goto LABEL_45;
  }
  v34 = *(char **)(a5 + 8);
  v35 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) != 0)
  {
    v40 = &v17[2 * v35];
    if (v35 < 0x40)
    {
      v41 = (unint64_t)v17;
      if (v17 == v40)
        goto LABEL_44;
    }
    else
    {
      v41 = (unint64_t)&v17[2 * (v35 & 0xFFFFFFC0)];
      v42 = 0uLL;
      v43 = v17;
      do
      {
        v104.val[0] = *(int8x16_t *)v34;
        v44 = *((int8x16_t *)v34 + 1);
        v107.val[0] = (int8x16_t)*((_OWORD *)v34 + 2);
        v45 = *((uint16x8_t *)v34 + 3);
        v34 += 64;
        result = v45;
        v107.val[1] = 0uLL;
        v110.val[0] = v44;
        v104.val[1] = 0uLL;
        v46 = v43;
        vst2q_s8(v46, v104);
        v46 += 32;
        v110.val[1] = 0uLL;
        vst2q_s8(v46, v110);
        v47 = v43 + 64;
        vst2q_s8(v47, v107);
        v48 = v43 + 96;
        vst2q_s8(v48, *(int8x16x2_t *)result.i8);
        v43 += 128;
      }
      while (v43 != (char *)v41);
      if ((char *)v41 == v40)
        goto LABEL_44;
    }
    v49 = (unint64_t)&__b[2 * v35 + 2 * a4 + v26 - v41 - 2];
    if (v49 < 0xE
      || (v41 < (unint64_t)&v34[(v49 >> 1) + 1]
        ? (v50 = (unint64_t)v34 >= (v49 & 0xFFFFFFFFFFFFFFFELL) + v41 + 2)
        : (v50 = 1),
          !v50))
    {
      v53 = (char *)v41;
      v54 = v34;
      goto LABEL_41;
    }
    v51 = (v49 >> 1) + 1;
    if (v49 >= 0x3E)
    {
      v52 = v51 & 0xFFFFFFFFFFFFFFE0;
      v92 = (uint8x8_t *)(v34 + 16);
      v93 = (uint16x8_t *)(v41 + 32);
      v94 = v51 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v95 = *(uint8x16_t *)v92[-2].i8;
        v96 = vmovl_u8(*(uint8x8_t *)v95.i8);
        result = vmovl_high_u8(v95);
        v97 = vmovl_u8(*v92);
        v98 = vmovl_high_u8(*(uint8x16_t *)v92->i8);
        v93[-2] = v96;
        v93[-1] = result;
        *v93 = v97;
        v93[1] = v98;
        v93 += 4;
        v92 += 4;
        v94 -= 32;
      }
      while (v94);
      if (v51 == v52)
        goto LABEL_44;
      if ((v51 & 0x18) == 0)
      {
        v54 = &v34[v52];
        v53 = (char *)(v41 + 2 * v52);
        goto LABEL_41;
      }
    }
    else
    {
      v52 = 0;
    }
    v53 = (char *)(v41 + 2 * (v51 & 0xFFFFFFFFFFFFFFF8));
    v54 = &v34[v51 & 0xFFFFFFFFFFFFFFF8];
    v99 = (uint8x8_t *)&v34[v52];
    v100 = (uint16x8_t *)(v41 + 2 * v52);
    v101 = v52 - (v51 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v102 = *v99++;
      result = vmovl_u8(v102);
      *v100++ = result;
      v101 += 8;
    }
    while (v101);
    if (v51 == (v51 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_44;
    do
    {
LABEL_41:
      v55 = *v54++;
      *(_WORD *)v53 = v55;
      v53 += 2;
    }
    while (v53 != v40);
    goto LABEL_44;
  }
  if ((_DWORD)v35)
  {
    if ((_DWORD)v35 == 1)
      *(_WORD *)v17 = *(_WORD *)v34;
    else
      memcpy(v17, v34, 2 * v35);
  }
LABEL_44:
  v36 = *(unsigned int *)(a5 + 4);
  v37 = (unint64_t)&v17[2 * v36];
  v38 = (char *)(v37 + 2 * a7);
  v39 = a7 & 0xFFFFFFC0;
  if ((a7 & 0xFFFFFFC0) == 0)
    goto LABEL_48;
LABEL_45:
  v56 = v37 + 2 * v39;
  v57 = 0uLL;
  do
  {
    v105.val[0] = *(int8x16_t *)a6;
    v58 = *(int8x16_t *)(a6 + 16);
    v108.val[0] = *(int8x16_t *)(a6 + 32);
    v59 = *(uint16x8_t *)(a6 + 48);
    a6 += 64;
    result = v59;
    v108.val[1] = 0uLL;
    v111.val[0] = v58;
    v105.val[1] = 0uLL;
    v60 = (char *)v37;
    vst2q_s8(v60, v105);
    v60 += 32;
    v111.val[1] = 0uLL;
    vst2q_s8(v60, v111);
    v61 = (char *)(v37 + 64);
    vst2q_s8(v61, v108);
    v62 = (char *)(v37 + 96);
    vst2q_s8(v62, *(int8x16x2_t *)result.i8);
    v37 += 128;
  }
  while (v37 != v56);
  v37 = v56;
LABEL_48:
  if ((char *)v37 == v38)
    return result;
  v63 = (unint64_t)&__b[2 * v36 + 2 * a4 + 2 * a7 + v26 - v37 - 2];
  if (v63 < 0xE || (v37 < a6 + (v63 >> 1) + 1 ? (v64 = a6 >= (v63 & 0xFFFFFFFFFFFFFFFELL) + v37 + 2) : (v64 = 1), !v64))
  {
    v67 = (char *)v37;
    v68 = (unsigned __int8 *)a6;
    goto LABEL_58;
  }
  v65 = (v63 >> 1) + 1;
  if (v63 >= 0x3E)
  {
    v66 = v65 & 0xFFFFFFFFFFFFFFE0;
    v81 = (uint8x8_t *)(a6 + 16);
    v82 = (uint16x8_t *)(v37 + 32);
    v83 = v65 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v84 = *(uint8x16_t *)v81[-2].i8;
      v85 = vmovl_u8(*(uint8x8_t *)v84.i8);
      result = vmovl_high_u8(v84);
      v86 = vmovl_u8(*v81);
      v87 = vmovl_high_u8(*(uint8x16_t *)v81->i8);
      v82[-2] = v85;
      v82[-1] = result;
      *v82 = v86;
      v82[1] = v87;
      v82 += 4;
      v81 += 4;
      v83 -= 32;
    }
    while (v83);
    if (v65 == v66)
      return result;
    if ((v65 & 0x18) == 0)
    {
      v68 = (unsigned __int8 *)(a6 + v66);
      v67 = (char *)(v37 + 2 * v66);
      do
      {
LABEL_58:
        v69 = *v68++;
        *(_WORD *)v67 = v69;
        v67 += 2;
      }
      while (v67 != v38);
      return result;
    }
  }
  else
  {
    v66 = 0;
  }
  v67 = (char *)(v37 + 2 * (v65 & 0xFFFFFFFFFFFFFFF8));
  v68 = (unsigned __int8 *)(a6 + (v65 & 0xFFFFFFFFFFFFFFF8));
  v88 = (uint8x8_t *)(a6 + v66);
  v89 = (uint16x8_t *)(v37 + 2 * v66);
  v90 = v66 - (v65 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v91 = *v88++;
    result = vmovl_u8(v91);
    *v89++ = result;
    v90 += 8;
  }
  while (v90);
  if (v65 != (v65 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_58;
  return result;
}

__int8 *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(WTF::StringBuilder *a1, __int8 *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int8 *result;
  __int8 *v8;
  uint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  __int8 *v12;
  uint64_t v13;
  size_t v14;
  __int8 *v15;
  __int8 *v16;
  unsigned __int128 v17;
  __int8 *v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  __int8 *v24;
  __int8 *v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  __int8 *v37;
  int8x16_t *v38;
  __int16 v39;
  __int8 *v40;
  int8x16_t *v41;
  char v42;
  uint8x8_t *v43;
  uint16x8_t *v44;
  unint64_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint8x8_t *v49;
  uint16x8_t *v50;
  unint64_t v51;
  uint8x8_t v52;
  int8x16_t *v53;
  int8x16_t *v54;
  unint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t *v60;
  int8x8_t *v61;
  unint64_t v62;
  int16x8_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;

  v5 = *a3;
  if (*a3)
  {
    v6 = *((_QWORD *)a1 + 1);
    if (v6)
      goto LABEL_6;
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1);
    if (v6)
      goto LABEL_6;
  }
  v6 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
LABEL_7:
    if (v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
      goto LABEL_9;
    result = (__int8 *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v12 = result;
    v13 = *a3;
    *result++ = *a2;
    if (!v13)
      return result;
    v10 = *(int8x16_t **)(v13 + 8);
    v14 = *(unsigned int *)(v13 + 4);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      if ((_DWORD)v14)
      {
        if ((_DWORD)v14 == 1)
        {
          *result = v10->i8[0];
          return result;
        }
        return (__int8 *)memcpy(result, v10, v14);
      }
      return result;
    }
    v15 = &result[v14];
    if (v14 >= 0x10)
    {
      v16 = &result[v14 & 0xFFFFFFF0];
      do
      {
        v17 = (unsigned __int128)vld2q_s8(v10->i8);
        v10 += 2;
        *(_OWORD *)result = v17;
        result += 16;
      }
      while (result != v16);
      result = v16;
    }
    if (result == v15)
      return result;
    v18 = &v12[v14];
    v19 = &v12[v14] - result;
    v20 = v19 + 1;
    if (v19 + 1 < 8
      || ((v21 = (unint64_t)(v18 + 1), result < &v10->i8[2 * v19 + 2])
        ? (v22 = (unint64_t)v10 >= v21)
        : (v22 = 1),
          !v22))
    {
      v40 = result;
      v41 = v10;
      goto LABEL_54;
    }
    if (v20 >= 0x20)
    {
      v23 = v20 & 0xFFFFFFFFFFFFFFE0;
      v53 = v10 + 2;
      v54 = (int8x16_t *)(result + 16);
      v55 = v20 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v57 = v53[-2];
        v56 = v53[-1];
        v59 = *v53;
        v58 = v53[1];
        v53 += 4;
        v54[-1] = vuzp1q_s8(v57, v56);
        *v54 = vuzp1q_s8(v59, v58);
        v54 += 2;
        v55 -= 32;
      }
      while (v55);
      if (v20 == v23)
        return result;
      if ((v20 & 0x18) == 0)
      {
        v41 = (int8x16_t *)((char *)v10 + 2 * v23);
        v40 = &result[v23];
        goto LABEL_54;
      }
    }
    else
    {
      v23 = 0;
    }
    v40 = &result[v20 & 0xFFFFFFFFFFFFFFF8];
    v41 = (int8x16_t *)((char *)v10 + 2 * (v20 & 0xFFFFFFFFFFFFFFF8));
    v60 = (int16x8_t *)((char *)v10 + 2 * v23);
    v61 = (int8x8_t *)&result[v23];
    v62 = v23 - (v20 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v63 = *v60++;
      *v61++ = vmovn_s16(v63);
      v62 += 8;
    }
    while (v62);
    if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_54:
      v42 = v41->i8[0];
      v41 = (int8x16_t *)((char *)v41 + 2);
      *v40++ = v42;
    }
    while (v40 != v15);
    return result;
  }
LABEL_6:
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    goto LABEL_7;
LABEL_9:
  result = (__int8 *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v8 = result;
    v9 = *a3;
    *(_WORD *)result = *a2;
    result += 2;
    if (v9)
    {
      v10 = *(int8x16_t **)(v9 + 8);
      v11 = *(unsigned int *)(v9 + 4);
      if ((*(_BYTE *)(v9 + 16) & 4) == 0)
      {
        if (!(_DWORD)v11)
          return result;
        if ((_DWORD)v11 == 1)
        {
          *(_WORD *)result = v10->i16[0];
          return result;
        }
        v14 = 2 * v11;
        return (__int8 *)memcpy(result, v10, v14);
      }
      v24 = &result[2 * v11];
      if (v11 >= 0x40)
      {
        v25 = &result[2 * (v11 & 0xFFFFFFC0)];
        v26 = 0uLL;
        do
        {
          v64.val[0] = *v10;
          v27 = v10[1];
          v65.val[0] = v10[2];
          v28 = v10[3];
          v10 += 4;
          v29 = v28;
          v65.val[1] = 0uLL;
          v66.val[0] = v27;
          v64.val[1] = 0uLL;
          v30 = result;
          vst2q_s8(v30, v64);
          v30 += 32;
          v66.val[1] = 0uLL;
          vst2q_s8(v30, v66);
          v31 = result + 64;
          vst2q_s8(v31, v65);
          v32 = result + 96;
          vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
          result += 128;
        }
        while (result != v25);
        result = v25;
      }
      if (result != v24)
      {
        v33 = &v8[2 * v11] - result;
        if (v33 < 0xE
          || (result < &v10->i8[(v33 >> 1) + 1]
            ? (v34 = v10 >= (int8x16_t *)&result[(v33 & 0xFFFFFFFFFFFFFFFELL) + 2])
            : (v34 = 1),
              !v34))
        {
          v37 = result;
          v38 = v10;
          goto LABEL_49;
        }
        v35 = (v33 >> 1) + 1;
        if (v33 >= 0x3E)
        {
          v36 = v35 & 0xFFFFFFFFFFFFFFE0;
          v43 = (uint8x8_t *)&v10[1];
          v44 = (uint16x8_t *)(result + 32);
          v45 = v35 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v46 = *(uint8x16_t *)v43[-2].i8;
            v47 = vmovl_u8(*v43);
            v48 = vmovl_high_u8(*(uint8x16_t *)v43->i8);
            v44[-2] = vmovl_u8(*(uint8x8_t *)v46.i8);
            v44[-1] = vmovl_high_u8(v46);
            *v44 = v47;
            v44[1] = v48;
            v44 += 4;
            v43 += 4;
            v45 -= 32;
          }
          while (v45);
          if (v35 == v36)
            return result;
          if ((v35 & 0x18) == 0)
          {
            v38 = (int8x16_t *)((char *)v10 + v36);
            v37 = &result[2 * v36];
            do
            {
LABEL_49:
              v39 = v38->u8[0];
              v38 = (int8x16_t *)((char *)v38 + 1);
              *(_WORD *)v37 = v39;
              v37 += 2;
            }
            while (v37 != v24);
            return result;
          }
        }
        else
        {
          v36 = 0;
        }
        v37 = &result[2 * (v35 & 0xFFFFFFFFFFFFFFF8)];
        v38 = (int8x16_t *)((char *)v10 + (v35 & 0xFFFFFFFFFFFFFFF8));
        v49 = (uint8x8_t *)&v10->i8[v36];
        v50 = (uint16x8_t *)&result[2 * v36];
        v51 = v36 - (v35 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v52 = *v49++;
          *v50++ = vmovl_u8(v52);
          v51 += 8;
        }
        while (v51);
        if (v35 != (v35 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_49;
      }
    }
  }
  return result;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, char *a2, int *a3, uint64_t a4, int *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  __int16 v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char v32;
  int v33;
  _BYTE *v34;
  size_t v35;
  int v36;
  uint64_t v37;
  _BYTE *v38;
  size_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  int8x16_t v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  _WORD *v54;
  unsigned __int8 *v55;
  __int16 v56;
  uint64_t v57;
  int8x16_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _WORD *v62;
  uint64_t v63;
  _WORD *v64;
  unint64_t v65;
  __int128 v66;
  char *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  char *v71;
  char *v72;
  char *v73;
  _BYTE *v74;
  size_t v75;
  int8x16_t *v76;
  size_t v77;
  _BYTE *v78;
  unint64_t v79;
  unsigned __int128 *v80;
  unsigned __int128 v81;
  uint64_t v82;
  unint64_t v83;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  _WORD *v87;
  int8x16_t *v88;
  __int16 v89;
  unint64_t v90;
  __int128 v91;
  int8x16_t v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  char *v96;
  char *v97;
  unint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  _WORD *v102;
  unsigned __int8 *v103;
  __int16 v104;
  size_t v105;
  unint64_t v106;
  BOOL v107;
  unint64_t v108;
  _BYTE *v109;
  int8x16_t *v110;
  char v111;
  uint8x8_t *v112;
  uint16x8_t *v113;
  unint64_t v114;
  uint8x16_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  uint8x8_t *v118;
  uint16x8_t *v119;
  unint64_t v120;
  uint8x8_t v121;
  uint8x8_t *v122;
  uint16x8_t *v123;
  unint64_t v124;
  uint8x16_t v125;
  uint16x8_t v126;
  uint16x8_t v127;
  uint8x8_t *v128;
  uint16x8_t *v129;
  unint64_t v130;
  uint8x8_t v131;
  _BYTE *v132;
  uint8x8_t *v133;
  uint16x8_t *v134;
  unint64_t v135;
  uint8x16_t v136;
  uint16x8_t v137;
  uint16x8_t v138;
  uint8x8_t *v139;
  uint16x8_t *v140;
  unint64_t v141;
  uint8x8_t v142;
  int8x16_t *v143;
  int8x16_t *v144;
  unint64_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t *v150;
  int8x8_t *v151;
  unint64_t v152;
  int16x8_t v153;
  int8x16x2_t v154;
  int8x16x2_t v155;
  int8x16x2_t v156;
  int8x16x2_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;
  int8x16x2_t v162;

  v13 = *a6;
  v14 = *((_QWORD *)a1 + 1);
  if ((!v14 && (v14 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v14 + 16) & 4) != 0)
    && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0))
  {
    v30 = (_BYTE *)MEMORY[0x186DAB068]();
    if (!v30)
      return;
    v31 = v30;
    v32 = *a2;
    v33 = *a3;
    v34 = *(_BYTE **)a4;
    v35 = *(unsigned int *)(a4 + 8);
    v36 = *a5;
    v37 = *a6;
    v38 = *(_BYTE **)a7;
    v39 = *(unsigned int *)(a7 + 8);
    *v30 = v32;
    v40 = v30 + 1;
    v41 = (4 * v33);
    if ((_DWORD)v41)
    {
      memset(v30 + 1, 32, (4 * v33));
      v40 += v41;
      if (!(_DWORD)v35)
        goto LABEL_46;
    }
    else
    {
      v41 = 0;
      if (!(_DWORD)v35)
        goto LABEL_46;
    }
    if ((_DWORD)v35 != 1)
    {
      memcpy(v40, v34, v35);
      v74 = &v40[v35];
      v75 = (4 * v36);
      if ((_DWORD)v75)
      {
LABEL_47:
        memset(v74, 32, v75);
        v74 += v75;
        if (v37)
          goto LABEL_48;
        goto LABEL_55;
      }
LABEL_54:
      v75 = 0;
      if (v37)
      {
LABEL_48:
        v76 = *(int8x16_t **)(v37 + 8);
        v77 = *(unsigned int *)(v37 + 4);
        if ((*(_BYTE *)(v37 + 16) & 4) != 0)
        {
          if ((_DWORD)v77)
          {
            if ((_DWORD)v77 == 1)
              *v74 = v76->i8[0];
            else
              memcpy(v74, v76, v77);
          }
        }
        else
        {
          v78 = &v74[v77];
          if (v77 < 0x10)
          {
            v79 = (unint64_t)v74;
          }
          else
          {
            v79 = (unint64_t)&v74[v77 & 0xFFFFFFF0];
            v80 = (unsigned __int128 *)v74;
            do
            {
              v81 = (unsigned __int128)vld2q_s8(v76->i8);
              v76 += 2;
              *v80++ = v81;
            }
            while (v80 != (unsigned __int128 *)v79);
          }
          if ((_BYTE *)v79 != v78)
          {
            v105 = (size_t)&v31[v77 + v41 + v75 + v35 - v79];
            v106 = v105 + 1;
            if (v105 + 1 < 8
              || (v79 < (unint64_t)v76->u64 + 2 * v105 + 2
                ? (v107 = v76 >= (int8x16_t *)&v31[v77 + 1 + v75 + v41 + v35])
                : (v107 = 1),
                  !v107))
            {
              v109 = (_BYTE *)v79;
              v110 = v76;
              goto LABEL_100;
            }
            if (v106 >= 0x20)
            {
              v108 = v106 & 0xFFFFFFFFFFFFFFE0;
              v143 = v76 + 2;
              v144 = (int8x16_t *)(v79 + 16);
              v145 = v106 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v147 = v143[-2];
                v146 = v143[-1];
                v149 = *v143;
                v148 = v143[1];
                v143 += 4;
                v144[-1] = vuzp1q_s8(v147, v146);
                *v144 = vuzp1q_s8(v149, v148);
                v144 += 2;
                v145 -= 32;
              }
              while (v145);
              if (v106 == v108)
                goto LABEL_119;
              if ((v106 & 0x18) == 0)
              {
                v110 = (int8x16_t *)((char *)v76 + 2 * v108);
                v109 = (_BYTE *)(v79 + v108);
                do
                {
LABEL_100:
                  v111 = v110->i8[0];
                  v110 = (int8x16_t *)((char *)v110 + 2);
                  *v109++ = v111;
                }
                while (v109 != v78);
                goto LABEL_119;
              }
            }
            else
            {
              v108 = 0;
            }
            v109 = (_BYTE *)(v79 + (v106 & 0xFFFFFFFFFFFFFFF8));
            v110 = (int8x16_t *)((char *)v76 + 2 * (v106 & 0xFFFFFFFFFFFFFFF8));
            v150 = (int16x8_t *)((char *)v76 + 2 * v108);
            v151 = (int8x8_t *)(v79 + v108);
            v152 = v108 - (v106 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v153 = *v150++;
              *v151++ = vmovn_s16(v153);
              v152 += 8;
            }
            while (v152);
            if (v106 != (v106 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_100;
          }
        }
LABEL_119:
        v82 = *(unsigned int *)(v37 + 4);
        if (!(_DWORD)v39)
          return;
        goto LABEL_120;
      }
LABEL_55:
      v82 = 0;
      if (!(_DWORD)v39)
        return;
LABEL_120:
      v132 = &v74[v82];
      if ((_DWORD)v39 == 1)
        *v132 = *v38;
      else
        memcpy(v132, v38, v39);
      return;
    }
    *v40 = *v34;
LABEL_46:
    v74 = &v40[v35];
    v75 = (4 * v36);
    if ((_DWORD)v75)
      goto LABEL_47;
    goto LABEL_54;
  }
  v15 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!v15)
    return;
  v16 = v15;
  v17 = *a2;
  v18 = *a3;
  v19 = *(_QWORD *)a4;
  v20 = *(unsigned int *)(a4 + 8);
  v21 = *a5;
  v22 = *a6;
  v23 = *(_QWORD *)a7;
  v24 = *(unsigned int *)(a7 + 8);
  *v15 = v17;
  v25 = v15 + 1;
  v26 = (4 * v18);
  if ((_DWORD)v26)
  {
    memset_pattern16(v15 + 1, asc_18260FF50, 2 * (4 * v18));
    v27 = (unint64_t)&v25[v26];
    v28 = (_WORD *)(v27 + 2 * v20);
    v29 = v20 & 0xFFFFFFC0;
    if ((v20 & 0xFFFFFFC0) == 0)
      goto LABEL_18;
  }
  else
  {
    v26 = 0;
    v27 = (unint64_t)(v15 + 1);
    v28 = &v25[v20];
    v29 = v20 & 0xFFFFFFC0;
    if ((v20 & 0xFFFFFFC0) == 0)
      goto LABEL_18;
  }
  v42 = v27 + 2 * v29;
  v43 = 0uLL;
  do
  {
    v154.val[0] = *(int8x16_t *)v19;
    v44 = *(int8x16_t *)(v19 + 16);
    v157.val[0] = *(int8x16_t *)(v19 + 32);
    v45 = *(_OWORD *)(v19 + 48);
    v19 += 64;
    v46 = v45;
    v157.val[1] = 0uLL;
    v160.val[0] = v44;
    v154.val[1] = 0uLL;
    v47 = (char *)v27;
    vst2q_s8(v47, v154);
    v47 += 32;
    v160.val[1] = 0uLL;
    vst2q_s8(v47, v160);
    v48 = (char *)(v27 + 64);
    vst2q_s8(v48, v157);
    v49 = (char *)(v27 + 96);
    vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
    v27 += 128;
  }
  while (v27 != v42);
  v27 = v42;
LABEL_18:
  if ((_WORD *)v27 == v28)
    goto LABEL_29;
  v50 = (unint64_t)&v16[v26 + v20] - v27;
  if (v50 < 0xE
    || (v27 < v19 + (v50 >> 1) + 1 ? (v51 = v19 >= (v50 & 0xFFFFFFFFFFFFFFFELL) + v27 + 2) : (v51 = 1), !v51))
  {
    v54 = (_WORD *)v27;
    v55 = (unsigned __int8 *)v19;
    goto LABEL_28;
  }
  v52 = (v50 >> 1) + 1;
  if (v50 >= 0x3E)
  {
    v53 = v52 & 0xFFFFFFFFFFFFFFE0;
    v112 = (uint8x8_t *)(v19 + 16);
    v113 = (uint16x8_t *)(v27 + 32);
    v114 = v52 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v115 = *(uint8x16_t *)v112[-2].i8;
      v116 = vmovl_u8(*v112);
      v117 = vmovl_high_u8(*(uint8x16_t *)v112->i8);
      v113[-2] = vmovl_u8(*(uint8x8_t *)v115.i8);
      v113[-1] = vmovl_high_u8(v115);
      *v113 = v116;
      v113[1] = v117;
      v113 += 4;
      v112 += 4;
      v114 -= 32;
    }
    while (v114);
    if (v52 == v53)
      goto LABEL_29;
    if ((v52 & 0x18) == 0)
    {
      v55 = (unsigned __int8 *)(v19 + v53);
      v54 = (_WORD *)(v27 + 2 * v53);
      do
      {
LABEL_28:
        v56 = *v55++;
        *v54++ = v56;
      }
      while (v54 != v28);
      goto LABEL_29;
    }
  }
  else
  {
    v53 = 0;
  }
  v54 = (_WORD *)(v27 + 2 * (v52 & 0xFFFFFFFFFFFFFFF8));
  v55 = (unsigned __int8 *)(v19 + (v52 & 0xFFFFFFFFFFFFFFF8));
  v118 = (uint8x8_t *)(v19 + v53);
  v119 = (uint16x8_t *)(v27 + 2 * v53);
  v120 = v53 - (v52 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v121 = *v118++;
    *v119++ = vmovl_u8(v121);
    v120 += 8;
  }
  while (v120);
  if (v52 != (v52 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_28;
LABEL_29:
  v57 = (4 * v21);
  if ((_DWORD)v57)
  {
    memset_pattern16(v28, asc_18260FF50, 2 * v57);
    v28 += v57;
    if (v22)
      goto LABEL_31;
LABEL_36:
    v60 = 0;
    v61 = (unint64_t)v28;
    v62 = &v28[v24];
    v63 = v24 & 0xFFFFFFC0;
    if ((v24 & 0xFFFFFFC0) != 0)
      goto LABEL_74;
    goto LABEL_77;
  }
  v57 = 0;
  if (!v22)
    goto LABEL_36;
LABEL_31:
  v58 = *(int8x16_t **)(v22 + 8);
  v59 = *(unsigned int *)(v22 + 4);
  if ((*(_BYTE *)(v22 + 16) & 4) != 0)
  {
    v64 = &v28[v59];
    if (v59 < 0x40)
    {
      v65 = (unint64_t)v28;
      if (v28 == v64)
        goto LABEL_73;
    }
    else
    {
      v65 = (unint64_t)&v28[v59 & 0xFFFFFFC0];
      v66 = 0uLL;
      v67 = (char *)v28;
      do
      {
        v155.val[0] = *v58;
        v68 = v58[1];
        v158.val[0] = v58[2];
        v69 = v58[3];
        v58 += 4;
        v70 = v69;
        v158.val[1] = 0uLL;
        v161.val[0] = v68;
        v155.val[1] = 0uLL;
        v71 = v67;
        vst2q_s8(v71, v155);
        v71 += 32;
        v161.val[1] = 0uLL;
        vst2q_s8(v71, v161);
        v72 = v67 + 64;
        vst2q_s8(v72, v158);
        v73 = v67 + 96;
        vst2q_s8(v73, *(int8x16x2_t *)(&v66 - 1));
        v67 += 128;
      }
      while (v67 != (char *)v65);
      if ((_WORD *)v65 == v64)
        goto LABEL_73;
    }
    v83 = (unint64_t)&v16[v26 + v59 + v57 + v20] - v65;
    if (v83 < 0xE
      || (v65 < (unint64_t)v58->u64 + (v83 >> 1) + 1
        ? (v84 = (unint64_t)v58 >= (v83 & 0xFFFFFFFFFFFFFFFELL) + v65 + 2)
        : (v84 = 1),
          !v84))
    {
      v87 = (_WORD *)v65;
      v88 = v58;
      goto LABEL_70;
    }
    v85 = (v83 >> 1) + 1;
    if (v83 >= 0x3E)
    {
      v86 = v85 & 0xFFFFFFFFFFFFFFE0;
      v133 = (uint8x8_t *)&v58[1];
      v134 = (uint16x8_t *)(v65 + 32);
      v135 = v85 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v136 = *(uint8x16_t *)v133[-2].i8;
        v137 = vmovl_u8(*v133);
        v138 = vmovl_high_u8(*(uint8x16_t *)v133->i8);
        v134[-2] = vmovl_u8(*(uint8x8_t *)v136.i8);
        v134[-1] = vmovl_high_u8(v136);
        *v134 = v137;
        v134[1] = v138;
        v134 += 4;
        v133 += 4;
        v135 -= 32;
      }
      while (v135);
      if (v85 == v86)
        goto LABEL_73;
      if ((v85 & 0x18) == 0)
      {
        v88 = (int8x16_t *)((char *)v58 + v86);
        v87 = (_WORD *)(v65 + 2 * v86);
        goto LABEL_70;
      }
    }
    else
    {
      v86 = 0;
    }
    v87 = (_WORD *)(v65 + 2 * (v85 & 0xFFFFFFFFFFFFFFF8));
    v88 = (int8x16_t *)((char *)v58 + (v85 & 0xFFFFFFFFFFFFFFF8));
    v139 = (uint8x8_t *)&v58->i8[v86];
    v140 = (uint16x8_t *)(v65 + 2 * v86);
    v141 = v86 - (v85 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v142 = *v139++;
      *v140++ = vmovl_u8(v142);
      v141 += 8;
    }
    while (v141);
    if (v85 == (v85 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_73;
    do
    {
LABEL_70:
      v89 = v88->u8[0];
      v88 = (int8x16_t *)((char *)v88 + 1);
      *v87++ = v89;
    }
    while (v87 != v64);
    goto LABEL_73;
  }
  if ((_DWORD)v59)
  {
    if ((_DWORD)v59 == 1)
      *v28 = v58->i16[0];
    else
      memcpy(v28, v58, 2 * v59);
  }
LABEL_73:
  v60 = *(unsigned int *)(v22 + 4);
  v61 = (unint64_t)&v28[v60];
  v62 = (_WORD *)(v61 + 2 * v24);
  v63 = v24 & 0xFFFFFFC0;
  if ((v24 & 0xFFFFFFC0) != 0)
  {
LABEL_74:
    v90 = v61 + 2 * v63;
    v91 = 0uLL;
    do
    {
      v156.val[0] = *(int8x16_t *)v23;
      v92 = *(int8x16_t *)(v23 + 16);
      v159.val[0] = *(int8x16_t *)(v23 + 32);
      v93 = *(_OWORD *)(v23 + 48);
      v23 += 64;
      v94 = v93;
      v159.val[1] = 0uLL;
      v162.val[0] = v92;
      v156.val[1] = 0uLL;
      v95 = (char *)v61;
      vst2q_s8(v95, v156);
      v95 += 32;
      v162.val[1] = 0uLL;
      vst2q_s8(v95, v162);
      v96 = (char *)(v61 + 64);
      vst2q_s8(v96, v159);
      v97 = (char *)(v61 + 96);
      vst2q_s8(v97, *(int8x16x2_t *)(&v91 - 1));
      v61 += 128;
    }
    while (v61 != v90);
    v61 = v90;
  }
LABEL_77:
  if ((_WORD *)v61 == v62)
    return;
  v98 = (unint64_t)&v16[v60 + v26 + v57 + v20 + v24] - v61;
  if (v98 < 0xE
    || (v61 < v23 + (v98 >> 1) + 1 ? (v99 = v23 >= (v98 & 0xFFFFFFFFFFFFFFFELL) + v61 + 2) : (v99 = 1), !v99))
  {
    v102 = (_WORD *)v61;
    v103 = (unsigned __int8 *)v23;
    goto LABEL_87;
  }
  v100 = (v98 >> 1) + 1;
  if (v98 >= 0x3E)
  {
    v101 = v100 & 0xFFFFFFFFFFFFFFE0;
    v122 = (uint8x8_t *)(v23 + 16);
    v123 = (uint16x8_t *)(v61 + 32);
    v124 = v100 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v125 = *(uint8x16_t *)v122[-2].i8;
      v126 = vmovl_u8(*v122);
      v127 = vmovl_high_u8(*(uint8x16_t *)v122->i8);
      v123[-2] = vmovl_u8(*(uint8x8_t *)v125.i8);
      v123[-1] = vmovl_high_u8(v125);
      *v123 = v126;
      v123[1] = v127;
      v123 += 4;
      v122 += 4;
      v124 -= 32;
    }
    while (v124);
    if (v100 == v101)
      return;
    if ((v100 & 0x18) == 0)
    {
      v103 = (unsigned __int8 *)(v23 + v101);
      v102 = (_WORD *)(v61 + 2 * v101);
      do
      {
LABEL_87:
        v104 = *v103++;
        *v102++ = v104;
      }
      while (v102 != v62);
      return;
    }
  }
  else
  {
    v101 = 0;
  }
  v102 = (_WORD *)(v61 + 2 * (v100 & 0xFFFFFFFFFFFFFFF8));
  v103 = (unsigned __int8 *)(v23 + (v100 & 0xFFFFFFFFFFFFFFF8));
  v128 = (uint8x8_t *)(v23 + v101);
  v129 = (uint16x8_t *)(v61 + 2 * v101);
  v130 = v101 - (v100 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v131 = *v128++;
    *v129++ = vmovl_u8(v131);
    v130 += 8;
  }
  while (v130);
  if (v100 != (v100 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_87;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int *a2, char *a3, char *a4, uint64_t *a5, unint64_t *a6, uint64_t *a7, unint64_t *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  __int16 v21;
  __int16 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  char v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  __int8 *v40;
  uint64_t v41;
  char *v42;
  char *v43;

  v15 = *a5;
  v16 = *a7;
  v17 = *((_QWORD *)a1 + 1);
  if ((v17 || (v17 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v17 + 16) & 4) == 0
    || v15 && (*(_BYTE *)(v15 + 16) & 4) == 0
    || v16 && (*(_BYTE *)(v16 + 16) & 4) == 0)
  {
    v18 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (v18)
    {
      v19 = v18;
      v20 = *a2;
      v21 = *a3;
      v22 = *a4;
      v23 = *a5;
      v25 = *a6;
      v24 = a6[1];
      v26 = *a7;
      v28 = *a8;
      v27 = a8[1];
      v29 = (4 * v20);
      if ((_DWORD)v29)
        memset_pattern16(v18, asc_18260FF50, 2 * (4 * v20));
      else
        v29 = 0;
      v42 = &v19[2 * v29];
      *(_WORD *)v42 = v21;
      *((_WORD *)v42 + 1) = v22;
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v42 + 4, v23, v25, v24, v26, v28, v27);
    }
  }
  else
  {
    v30 = (char *)MEMORY[0x186DAB068]();
    if (v30)
    {
      v31 = v30;
      v32 = *a2;
      v33 = *a3;
      v34 = *a4;
      v35 = *a5;
      v37 = (__int8 *)*a6;
      v36 = a6[1];
      v38 = *a7;
      v40 = (__int8 *)*a8;
      v39 = a8[1];
      v41 = (4 * *a2);
      if ((_DWORD)v41)
        memset(v30, 32, (4 * v32));
      else
        v41 = 0;
      v43 = &v31[v41];
      *v43 = v33;
      v43[1] = v34;
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((int8x16_t *)&v31[v41 + 2], v35, v37, v36, v38, v40, v39);
    }
  }
}

int8x16_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(int8x16_t *__dst, uint64_t a2, __int8 *__src, unsigned int a4, uint64_t a5, __int8 *a6, unsigned int a7)
{
  int8x16_t *v12;
  int8x16_t *v14;
  size_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  unsigned __int128 *v18;
  unsigned __int128 v19;
  uint64_t v20;
  int8x16_t *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  int8x16_t *v25;
  int8x16_t *v26;
  __int8 v27;
  uint64_t v28;
  __int8 *v29;
  int8x16_t *v30;
  size_t v31;
  __int8 *v32;
  unint64_t v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  uint64_t v36;
  int8x16_t *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  __int8 *v41;
  int8x16_t *v42;
  char v43;
  int8x16_t *v44;
  int8x16_t *v45;
  unint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t *v51;
  int8x8_t *v52;
  unint64_t v53;
  int16x8_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  unint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t *v62;
  int8x8_t *v63;
  unint64_t v64;
  int16x8_t v65;

  v12 = __dst;
  if (a2)
  {
    v14 = *(int8x16_t **)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v15)
      {
        if ((_DWORD)v15 == 1)
          __dst->i8[0] = v14->i8[0];
        else
          __dst = (int8x16_t *)memcpy(__dst, v14, v15);
      }
LABEL_26:
      v20 = *(unsigned int *)(a2 + 4);
      v21 = (int8x16_t *)((char *)v12 + v20);
      if (!a4)
        goto LABEL_29;
      goto LABEL_27;
    }
    v16 = (int8x16_t *)((char *)__dst + v15);
    if (v15 < 0x10)
    {
      v17 = __dst;
      if (__dst == v16)
        goto LABEL_26;
    }
    else
    {
      v17 = (int8x16_t *)((char *)__dst + (v15 & 0xFFFFFFF0));
      v18 = (unsigned __int128 *)__dst;
      do
      {
        v19 = (unsigned __int128)vld2q_s8(v14->i8);
        v14 += 2;
        *v18++ = v19;
      }
      while (v18 != (unsigned __int128 *)v17);
      if (v17 == v16)
        goto LABEL_26;
    }
    v22 = &__dst->i8[v15] - (__int8 *)v17;
    if (v22 < 8
      || (v17 < (int8x16_t *)((char *)v14 + 2 * v22) ? (v23 = v14 >= (int8x16_t *)&__dst->i8[v15]) : (v23 = 1), !v23))
    {
      v25 = v17;
      v26 = v14;
      goto LABEL_23;
    }
    if (v22 >= 0x20)
    {
      v24 = v22 & 0xFFFFFFFFFFFFFFE0;
      v44 = v14 + 2;
      v45 = v17 + 1;
      v46 = v22 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v48 = v44[-2];
        v47 = v44[-1];
        v50 = *v44;
        v49 = v44[1];
        v44 += 4;
        v45[-1] = vuzp1q_s8(v48, v47);
        *v45 = vuzp1q_s8(v50, v49);
        v45 += 2;
        v46 -= 32;
      }
      while (v46);
      if (v22 == v24)
        goto LABEL_26;
      if ((v22 & 0x18) == 0)
      {
        v26 = (int8x16_t *)((char *)v14 + 2 * v24);
        v25 = (int8x16_t *)((char *)v17 + v24);
        goto LABEL_23;
      }
    }
    else
    {
      v24 = 0;
    }
    v25 = (int8x16_t *)((char *)v17 + (v22 & 0xFFFFFFFFFFFFFFF8));
    v26 = (int8x16_t *)((char *)v14 + 2 * (v22 & 0xFFFFFFFFFFFFFFF8));
    v51 = (int16x8_t *)((char *)v14 + 2 * v24);
    v52 = (int8x8_t *)&v17->i8[v24];
    v53 = v24 - (v22 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v54 = *v51++;
      *v52++ = vmovn_s16(v54);
      v53 += 8;
    }
    while (v53);
    if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_26;
    do
    {
LABEL_23:
      v27 = v26->i8[0];
      v26 = (int8x16_t *)((char *)v26 + 2);
      v25->i8[0] = v27;
      v25 = (int8x16_t *)((char *)v25 + 1);
    }
    while (v25 != v16);
    goto LABEL_26;
  }
  v20 = 0;
  v21 = __dst;
  if (!a4)
  {
LABEL_29:
    v28 = a4;
    v29 = &v21->i8[a4];
    if (a5)
      goto LABEL_30;
    goto LABEL_37;
  }
LABEL_27:
  if (a4 == 1)
  {
    v21->i8[0] = *__src;
    goto LABEL_29;
  }
  __dst = (int8x16_t *)memcpy(v21, __src, a4);
  v28 = a4;
  v29 = &v21->i8[a4];
  if (a5)
  {
LABEL_30:
    v30 = *(int8x16_t **)(a5 + 8);
    v31 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v31)
      {
        if ((_DWORD)v31 == 1)
          *v29 = v30->i8[0];
        else
          __dst = (int8x16_t *)memcpy(v29, v30, v31);
      }
LABEL_55:
      v36 = *(unsigned int *)(a5 + 4);
      if (!a7)
        return __dst;
      goto LABEL_56;
    }
    v32 = &v29[v31];
    if (v31 < 0x10)
    {
      v33 = (unint64_t)v29;
      if (v29 == v32)
        goto LABEL_55;
    }
    else
    {
      v33 = (unint64_t)&v29[v31 & 0xFFFFFFF0];
      v34 = (unsigned __int128 *)v29;
      do
      {
        v35 = (unsigned __int128)vld2q_s8(v30->i8);
        v30 += 2;
        *v34++ = v35;
      }
      while (v34 != (unsigned __int128 *)v33);
      if ((__int8 *)v33 == v32)
        goto LABEL_55;
    }
    v37 = (int8x16_t *)((char *)v12 + v20 + v31 + v28);
    v38 = (unint64_t)v37 - v33;
    if ((unint64_t)v37 - v33 < 8
      || (v33 < (unint64_t)v30 + 2 * v38 ? (v39 = v30 >= v37) : (v39 = 1), !v39))
    {
      v41 = (__int8 *)v33;
      v42 = v30;
      goto LABEL_52;
    }
    if (v38 >= 0x20)
    {
      v40 = v38 & 0xFFFFFFFFFFFFFFE0;
      v55 = v30 + 2;
      v56 = (int8x16_t *)(v33 + 16);
      v57 = v38 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v59 = v55[-2];
        v58 = v55[-1];
        v61 = *v55;
        v60 = v55[1];
        v55 += 4;
        v56[-1] = vuzp1q_s8(v59, v58);
        *v56 = vuzp1q_s8(v61, v60);
        v56 += 2;
        v57 -= 32;
      }
      while (v57);
      if (v38 == v40)
        goto LABEL_55;
      if ((v38 & 0x18) == 0)
      {
        v42 = (int8x16_t *)((char *)v30 + 2 * v40);
        v41 = (__int8 *)(v33 + v40);
        goto LABEL_52;
      }
    }
    else
    {
      v40 = 0;
    }
    v41 = (__int8 *)(v33 + (v38 & 0xFFFFFFFFFFFFFFF8));
    v42 = (int8x16_t *)((char *)v30 + 2 * (v38 & 0xFFFFFFFFFFFFFFF8));
    v62 = (int16x8_t *)((char *)v30 + 2 * v40);
    v63 = (int8x8_t *)(v33 + v40);
    v64 = v40 - (v38 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v65 = *v62++;
      *v63++ = vmovn_s16(v65);
      v64 += 8;
    }
    while (v64);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_55;
    do
    {
LABEL_52:
      v43 = v42->i8[0];
      v42 = (int8x16_t *)((char *)v42 + 2);
      *v41++ = v43;
    }
    while (v41 != v32);
    goto LABEL_55;
  }
LABEL_37:
  v36 = 0;
  if (!a7)
    return __dst;
LABEL_56:
  __dst = (int8x16_t *)&v29[v36];
  if (a7 != 1)
    return (int8x16_t *)memcpy(__dst, a6, a7);
  __dst->i8[0] = *a6;
  return __dst;
}

uint16x8_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, unsigned int a7)
{
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  uint16x8_t v25;
  uint16x8_t result;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int16 v36;
  char *v37;
  __int128 v38;
  int8x16_t v39;
  uint16x8_t v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  __int128 v56;
  char *v57;
  int8x16_t v58;
  uint16x8_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int16 v71;
  unint64_t v72;
  __int128 v73;
  int8x16_t v74;
  uint16x8_t v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  unsigned __int8 *v84;
  __int16 v85;
  uint8x8_t *v86;
  uint16x8_t *v87;
  unint64_t v88;
  uint8x16_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint8x8_t *v93;
  uint16x8_t *v94;
  unint64_t v95;
  uint8x8_t v96;
  uint8x8_t *v97;
  uint16x8_t *v98;
  unint64_t v99;
  uint8x16_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint8x8_t *v104;
  uint16x8_t *v105;
  unint64_t v106;
  uint8x8_t v107;
  uint8x8_t *v108;
  uint16x8_t *v109;
  unint64_t v110;
  uint8x16_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint8x8_t *v115;
  uint16x8_t *v116;
  unint64_t v117;
  uint8x8_t v118;
  uint8x8_t *v119;
  uint16x8_t *v120;
  unint64_t v121;
  uint8x16_t v122;
  uint16x8_t v123;
  uint16x8_t v124;
  uint16x8_t v125;
  uint8x8_t *v126;
  uint16x8_t *v127;
  unint64_t v128;
  uint8x8_t v129;
  int8x16x2_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;
  int8x16x2_t v138;
  int8x16x2_t v139;
  int8x16x2_t v140;
  int8x16x2_t v141;

  if (!a2)
  {
    v16 = 0;
    v17 = __dst;
    v18 = &__dst[2 * a4];
    v19 = a4 & 0xFFFFFFC0;
    if ((a4 & 0xFFFFFFC0) == 0)
      goto LABEL_30;
    goto LABEL_27;
  }
  v14 = *(char **)(a2 + 8);
  v15 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    v20 = &__dst[2 * v15];
    if (v15 < 0x40)
    {
      v21 = __dst;
      if (__dst == v20)
        goto LABEL_26;
    }
    else
    {
      v21 = &__dst[2 * (v15 & 0xFFFFFFC0)];
      v22 = 0uLL;
      v23 = __dst;
      do
      {
        v130.val[0] = *(int8x16_t *)v14;
        v24 = *((int8x16_t *)v14 + 1);
        v134.val[0] = (int8x16_t)*((_OWORD *)v14 + 2);
        v25 = *((uint16x8_t *)v14 + 3);
        v14 += 64;
        result = v25;
        v134.val[1] = 0uLL;
        v138.val[0] = v24;
        v130.val[1] = 0uLL;
        v27 = v23;
        vst2q_s8(v27, v130);
        v27 += 32;
        v138.val[1] = 0uLL;
        vst2q_s8(v27, v138);
        v28 = v23 + 64;
        vst2q_s8(v28, v134);
        v29 = v23 + 96;
        vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
        v23 += 128;
      }
      while (v23 != v21);
      if (v21 == v20)
        goto LABEL_26;
    }
    v30 = &__dst[2 * v15] - v21 - 2;
    if (v30 < 0xE
      || (v21 < &v14[(v30 >> 1) + 1] ? (v31 = v14 >= &v21[(v30 & 0xFFFFFFFFFFFFFFFELL) + 2]) : (v31 = 1), !v31))
    {
      v34 = v21;
      v35 = v14;
      goto LABEL_23;
    }
    v32 = (v30 >> 1) + 1;
    if (v30 >= 0x3E)
    {
      v33 = v32 & 0xFFFFFFFFFFFFFFE0;
      v108 = (uint8x8_t *)(v14 + 16);
      v109 = (uint16x8_t *)(v21 + 32);
      v110 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v111 = *(uint8x16_t *)v108[-2].i8;
        v112 = vmovl_u8(*(uint8x8_t *)v111.i8);
        result = vmovl_high_u8(v111);
        v113 = vmovl_u8(*v108);
        v114 = vmovl_high_u8(*(uint8x16_t *)v108->i8);
        v109[-2] = v112;
        v109[-1] = result;
        *v109 = v113;
        v109[1] = v114;
        v109 += 4;
        v108 += 4;
        v110 -= 32;
      }
      while (v110);
      if (v32 == v33)
        goto LABEL_26;
      if ((v32 & 0x18) == 0)
      {
        v35 = &v14[v33];
        v34 = &v21[2 * v33];
        goto LABEL_23;
      }
    }
    else
    {
      v33 = 0;
    }
    v34 = &v21[2 * (v32 & 0xFFFFFFFFFFFFFFF8)];
    v35 = &v14[v32 & 0xFFFFFFFFFFFFFFF8];
    v115 = (uint8x8_t *)&v14[v33];
    v116 = (uint16x8_t *)&v21[2 * v33];
    v117 = v33 - (v32 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v118 = *v115++;
      result = vmovl_u8(v118);
      *v116++ = result;
      v117 += 8;
    }
    while (v117);
    if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_26;
    do
    {
LABEL_23:
      v36 = *v35++;
      *(_WORD *)v34 = v36;
      v34 += 2;
    }
    while (v34 != v20);
    goto LABEL_26;
  }
  if ((_DWORD)v15)
  {
    if ((_DWORD)v15 == 1)
      *(_WORD *)__dst = *(_WORD *)v14;
    else
      memcpy(__dst, v14, 2 * v15);
  }
LABEL_26:
  v16 = *(unsigned int *)(a2 + 4);
  v17 = &__dst[2 * v16];
  v18 = &v17[2 * a4];
  v19 = a4 & 0xFFFFFFC0;
  if ((a4 & 0xFFFFFFC0) == 0)
    goto LABEL_30;
LABEL_27:
  v37 = &v17[2 * v19];
  v38 = 0uLL;
  do
  {
    v131.val[0] = *(int8x16_t *)a3;
    v39 = *(int8x16_t *)(a3 + 16);
    v135.val[0] = *(int8x16_t *)(a3 + 32);
    v40 = *(uint16x8_t *)(a3 + 48);
    a3 += 64;
    result = v40;
    v135.val[1] = 0uLL;
    v139.val[0] = v39;
    v131.val[1] = 0uLL;
    v41 = v17;
    vst2q_s8(v41, v131);
    v41 += 32;
    v139.val[1] = 0uLL;
    vst2q_s8(v41, v139);
    v42 = v17 + 64;
    vst2q_s8(v42, v135);
    v43 = v17 + 96;
    vst2q_s8(v43, *(int8x16x2_t *)result.i8);
    v17 += 128;
  }
  while (v17 != v37);
  v17 = v37;
LABEL_30:
  if (v17 == v18)
    goto LABEL_36;
  v44 = &__dst[2 * v16 + 2 * a4] - v17 - 2;
  if (v44 < 0xE
    || (unint64_t)v17 < a3 + (v44 >> 1) + 1 && a3 < (unint64_t)&v17[(v44 & 0xFFFFFFFFFFFFFFFELL) + 2])
  {
    v45 = v17;
    v46 = (unsigned __int8 *)a3;
    goto LABEL_35;
  }
  v63 = (v44 >> 1) + 1;
  if (v44 >= 0x3E)
  {
    v64 = v63 & 0xFFFFFFFFFFFFFFE0;
    v86 = (uint8x8_t *)(a3 + 16);
    v87 = (uint16x8_t *)(v17 + 32);
    v88 = v63 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v89 = *(uint8x16_t *)v86[-2].i8;
      v90 = vmovl_u8(*(uint8x8_t *)v89.i8);
      result = vmovl_high_u8(v89);
      v91 = vmovl_u8(*v86);
      v92 = vmovl_high_u8(*(uint8x16_t *)v86->i8);
      v87[-2] = v90;
      v87[-1] = result;
      *v87 = v91;
      v87[1] = v92;
      v87 += 4;
      v86 += 4;
      v88 -= 32;
    }
    while (v88);
    if (v63 == v64)
      goto LABEL_36;
    if ((v63 & 0x18) == 0)
    {
      v46 = (unsigned __int8 *)(a3 + v64);
      v45 = &v17[2 * v64];
      do
      {
LABEL_35:
        v47 = *v46++;
        *(_WORD *)v45 = v47;
        v45 += 2;
      }
      while (v45 != v18);
      goto LABEL_36;
    }
  }
  else
  {
    v64 = 0;
  }
  v45 = &v17[2 * (v63 & 0xFFFFFFFFFFFFFFF8)];
  v46 = (unsigned __int8 *)(a3 + (v63 & 0xFFFFFFFFFFFFFFF8));
  v93 = (uint8x8_t *)(a3 + v64);
  v94 = (uint16x8_t *)&v17[2 * v64];
  v95 = v64 - (v63 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v96 = *v93++;
    result = vmovl_u8(v96);
    *v94++ = result;
    v95 += 8;
  }
  while (v95);
  if (v63 != (v63 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_35;
LABEL_36:
  if (!a5)
  {
    v50 = 0;
    v51 = (unint64_t)v18;
    v52 = &v18[2 * a7];
    v53 = a7 & 0xFFFFFFC0;
    if ((a7 & 0xFFFFFFC0) == 0)
      goto LABEL_67;
    goto LABEL_64;
  }
  v48 = *(char **)(a5 + 8);
  v49 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) != 0)
  {
    v54 = &v18[2 * v49];
    if (v49 < 0x40)
    {
      v55 = (unint64_t)v18;
      if (v18 == v54)
        goto LABEL_63;
    }
    else
    {
      v55 = (unint64_t)&v18[2 * (v49 & 0xFFFFFFC0)];
      v56 = 0uLL;
      v57 = v18;
      do
      {
        v132.val[0] = *(int8x16_t *)v48;
        v58 = *((int8x16_t *)v48 + 1);
        v136.val[0] = (int8x16_t)*((_OWORD *)v48 + 2);
        v59 = *((uint16x8_t *)v48 + 3);
        v48 += 64;
        result = v59;
        v136.val[1] = 0uLL;
        v140.val[0] = v58;
        v132.val[1] = 0uLL;
        v60 = v57;
        vst2q_s8(v60, v132);
        v60 += 32;
        v140.val[1] = 0uLL;
        vst2q_s8(v60, v140);
        v61 = v57 + 64;
        vst2q_s8(v61, v136);
        v62 = v57 + 96;
        vst2q_s8(v62, *(int8x16x2_t *)result.i8);
        v57 += 128;
      }
      while (v57 != (char *)v55);
      if ((char *)v55 == v54)
        goto LABEL_63;
    }
    v65 = (unint64_t)&__dst[2 * v16 + 2 * v49 + 2 * a4 - v55 - 2];
    if (v65 < 0xE
      || (v55 < (unint64_t)&v48[(v65 >> 1) + 1]
        ? (v66 = (unint64_t)v48 >= (v65 & 0xFFFFFFFFFFFFFFFELL) + v55 + 2)
        : (v66 = 1),
          !v66))
    {
      v69 = (char *)v55;
      v70 = v48;
      goto LABEL_60;
    }
    v67 = (v65 >> 1) + 1;
    if (v65 >= 0x3E)
    {
      v68 = v67 & 0xFFFFFFFFFFFFFFE0;
      v119 = (uint8x8_t *)(v48 + 16);
      v120 = (uint16x8_t *)(v55 + 32);
      v121 = v67 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v122 = *(uint8x16_t *)v119[-2].i8;
        v123 = vmovl_u8(*(uint8x8_t *)v122.i8);
        result = vmovl_high_u8(v122);
        v124 = vmovl_u8(*v119);
        v125 = vmovl_high_u8(*(uint8x16_t *)v119->i8);
        v120[-2] = v123;
        v120[-1] = result;
        *v120 = v124;
        v120[1] = v125;
        v120 += 4;
        v119 += 4;
        v121 -= 32;
      }
      while (v121);
      if (v67 == v68)
        goto LABEL_63;
      if ((v67 & 0x18) == 0)
      {
        v70 = &v48[v68];
        v69 = (char *)(v55 + 2 * v68);
        goto LABEL_60;
      }
    }
    else
    {
      v68 = 0;
    }
    v69 = (char *)(v55 + 2 * (v67 & 0xFFFFFFFFFFFFFFF8));
    v70 = &v48[v67 & 0xFFFFFFFFFFFFFFF8];
    v126 = (uint8x8_t *)&v48[v68];
    v127 = (uint16x8_t *)(v55 + 2 * v68);
    v128 = v68 - (v67 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v129 = *v126++;
      result = vmovl_u8(v129);
      *v127++ = result;
      v128 += 8;
    }
    while (v128);
    if (v67 == (v67 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_63;
    do
    {
LABEL_60:
      v71 = *v70++;
      *(_WORD *)v69 = v71;
      v69 += 2;
    }
    while (v69 != v54);
    goto LABEL_63;
  }
  if ((_DWORD)v49)
  {
    if ((_DWORD)v49 == 1)
      *(_WORD *)v18 = *(_WORD *)v48;
    else
      memcpy(v18, v48, 2 * v49);
  }
LABEL_63:
  v50 = *(unsigned int *)(a5 + 4);
  v51 = (unint64_t)&v18[2 * v50];
  v52 = (char *)(v51 + 2 * a7);
  v53 = a7 & 0xFFFFFFC0;
  if ((a7 & 0xFFFFFFC0) == 0)
    goto LABEL_67;
LABEL_64:
  v72 = v51 + 2 * v53;
  v73 = 0uLL;
  do
  {
    v133.val[0] = *(int8x16_t *)a6;
    v74 = *(int8x16_t *)(a6 + 16);
    v137.val[0] = *(int8x16_t *)(a6 + 32);
    v75 = *(uint16x8_t *)(a6 + 48);
    a6 += 64;
    result = v75;
    v137.val[1] = 0uLL;
    v141.val[0] = v74;
    v133.val[1] = 0uLL;
    v76 = (char *)v51;
    vst2q_s8(v76, v133);
    v76 += 32;
    v141.val[1] = 0uLL;
    vst2q_s8(v76, v141);
    v77 = (char *)(v51 + 64);
    vst2q_s8(v77, v137);
    v78 = (char *)(v51 + 96);
    vst2q_s8(v78, *(int8x16x2_t *)result.i8);
    v51 += 128;
  }
  while (v51 != v72);
  v51 = v72;
LABEL_67:
  if ((char *)v51 == v52)
    return result;
  v79 = (unint64_t)&__dst[2 * v16 + 2 * v50 + 2 * a4 + 2 * a7 - v51 - 2];
  if (v79 < 0xE || (v51 < a6 + (v79 >> 1) + 1 ? (v80 = a6 >= (v79 & 0xFFFFFFFFFFFFFFFELL) + v51 + 2) : (v80 = 1), !v80))
  {
    v83 = (char *)v51;
    v84 = (unsigned __int8 *)a6;
    goto LABEL_77;
  }
  v81 = (v79 >> 1) + 1;
  if (v79 >= 0x3E)
  {
    v82 = v81 & 0xFFFFFFFFFFFFFFE0;
    v97 = (uint8x8_t *)(a6 + 16);
    v98 = (uint16x8_t *)(v51 + 32);
    v99 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v100 = *(uint8x16_t *)v97[-2].i8;
      v101 = vmovl_u8(*(uint8x8_t *)v100.i8);
      result = vmovl_high_u8(v100);
      v102 = vmovl_u8(*v97);
      v103 = vmovl_high_u8(*(uint8x16_t *)v97->i8);
      v98[-2] = v101;
      v98[-1] = result;
      *v98 = v102;
      v98[1] = v103;
      v98 += 4;
      v97 += 4;
      v99 -= 32;
    }
    while (v99);
    if (v81 == v82)
      return result;
    if ((v81 & 0x18) == 0)
    {
      v84 = (unsigned __int8 *)(a6 + v82);
      v83 = (char *)(v51 + 2 * v82);
      do
      {
LABEL_77:
        v85 = *v84++;
        *(_WORD *)v83 = v85;
        v83 += 2;
      }
      while (v83 != v52);
      return result;
    }
  }
  else
  {
    v82 = 0;
  }
  v83 = (char *)(v51 + 2 * (v81 & 0xFFFFFFFFFFFFFFF8));
  v84 = (unsigned __int8 *)(a6 + (v81 & 0xFFFFFFFFFFFFFFF8));
  v104 = (uint8x8_t *)(a6 + v82);
  v105 = (uint16x8_t *)(v51 + 2 * v82);
  v106 = v82 - (v81 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v107 = *v104++;
    result = vmovl_u8(v107);
    *v105++ = result;
    v106 += 8;
  }
  while (v106);
  if (v81 != (v81 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_77;
  return result;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  int v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  __int8 *v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  int8x16_t v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  unsigned __int8 *v53;
  __int16 v54;
  uint64_t v55;
  unint64_t v56;
  uint8x8_t *v57;
  uint16x8_t *v58;
  unint64_t v59;
  uint8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint8x8_t *v63;
  uint16x8_t *v64;
  unint64_t v65;
  uint8x8_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;

  v13 = *a4;
  v14 = *a6;
  v15 = *((_QWORD *)a1 + 1);
  if ((!v15 && (v15 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v15 + 16) & 4) != 0)
    && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0)
    && (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0))
  {
    v31 = (_BYTE *)MEMORY[0x186DAB068]();
    if (!v31)
      return;
    v32 = v31;
    v33 = *a2;
    v34 = *(_BYTE **)a3;
    v35 = *(unsigned int *)(a3 + 8);
    v36 = *a4;
    v38 = *(__int8 **)a5;
    v37 = *(_QWORD *)(a5 + 8);
    v39 = *a6;
    v41 = *(__int8 **)a7;
    v40 = *(_QWORD *)(a7 + 8);
    v42 = (4 * v33);
    if ((_DWORD)v42)
    {
      memset(v31, 32, (4 * v33));
      v32 += v42;
      if (!(_DWORD)v35)
        goto LABEL_34;
    }
    else if (!(_DWORD)v35)
    {
LABEL_34:
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((int8x16_t *)&v32[v35], v36, v38, v37, v39, v41, v40);
      return;
    }
    if ((_DWORD)v35 == 1)
      *v32 = *v34;
    else
      memcpy(v32, v34, v35);
    goto LABEL_34;
  }
  v16 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (v16)
  {
    v17 = v16;
    v18 = *a2;
    v19 = *(_QWORD *)a3;
    v20 = *(unsigned int *)(a3 + 8);
    v21 = *a4;
    v22 = *(_QWORD *)a5;
    v23 = *(_QWORD *)(a5 + 8);
    v24 = *a6;
    v25 = *(_QWORD *)a7;
    v26 = *(_QWORD *)(a7 + 8);
    v27 = (4 * v18);
    if ((_DWORD)v27)
    {
      memset_pattern16(v16, asc_18260FF50, 2 * (4 * v18));
      v28 = (unint64_t)&v17[2 * v27];
      v29 = (char *)(v28 + 2 * v20);
      v30 = v20 & 0xFFFFFFC0;
      if ((v20 & 0xFFFFFFC0) == 0)
        goto LABEL_21;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)v16;
      v29 = &v16[2 * v20];
      v30 = v20 & 0xFFFFFFC0;
      if ((v20 & 0xFFFFFFC0) == 0)
        goto LABEL_21;
    }
    v43 = v28 + 2 * v30;
    v44 = 0uLL;
    do
    {
      v67.val[0] = *(int8x16_t *)v19;
      v45 = *(int8x16_t *)(v19 + 16);
      v68.val[0] = *(int8x16_t *)(v19 + 32);
      v46 = *(_OWORD *)(v19 + 48);
      v19 += 64;
      v47 = v46;
      v68.val[1] = 0uLL;
      v69.val[0] = v45;
      v67.val[1] = 0uLL;
      v48 = (char *)v28;
      vst2q_s8(v48, v67);
      v48 += 32;
      v69.val[1] = 0uLL;
      vst2q_s8(v48, v69);
      v49 = (char *)(v28 + 64);
      vst2q_s8(v49, v68);
      v50 = (char *)(v28 + 96);
      vst2q_s8(v50, *(int8x16x2_t *)(&v44 - 1));
      v28 += 128;
    }
    while (v28 != v43);
    v28 = v43;
LABEL_21:
    if ((char *)v28 == v29)
    {
LABEL_27:
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v29, v21, v22, v23, v24, v25, v26);
      return;
    }
    v51 = (unint64_t)&v17[2 * v27 + 2 * v20 - v28 - 2];
    if (v51 < 0xE || v28 < v19 + (v51 >> 1) + 1 && v19 < (v51 & 0xFFFFFFFFFFFFFFFELL) + v28 + 2)
    {
      v52 = (char *)v28;
      v53 = (unsigned __int8 *)v19;
      goto LABEL_26;
    }
    v55 = (v51 >> 1) + 1;
    if (v51 >= 0x3E)
    {
      v56 = v55 & 0xFFFFFFFFFFFFFFE0;
      v57 = (uint8x8_t *)(v19 + 16);
      v58 = (uint16x8_t *)(v28 + 32);
      v59 = v55 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v60 = *(uint8x16_t *)v57[-2].i8;
        v61 = vmovl_u8(*v57);
        v62 = vmovl_high_u8(*(uint8x16_t *)v57->i8);
        v58[-2] = vmovl_u8(*(uint8x8_t *)v60.i8);
        v58[-1] = vmovl_high_u8(v60);
        *v58 = v61;
        v58[1] = v62;
        v58 += 4;
        v57 += 4;
        v59 -= 32;
      }
      while (v59);
      if (v55 == v56)
        goto LABEL_27;
      if ((v55 & 0x18) == 0)
      {
        v53 = (unsigned __int8 *)(v19 + v56);
        v52 = (char *)(v28 + 2 * v56);
        do
        {
LABEL_26:
          v54 = *v53++;
          *(_WORD *)v52 = v54;
          v52 += 2;
        }
        while (v52 != v29);
        goto LABEL_27;
      }
    }
    else
    {
      v56 = 0;
    }
    v52 = (char *)(v28 + 2 * (v55 & 0xFFFFFFFFFFFFFFF8));
    v53 = (unsigned __int8 *)(v19 + (v55 & 0xFFFFFFFFFFFFFFF8));
    v63 = (uint8x8_t *)(v19 + v56);
    v64 = (uint16x8_t *)(v28 + 2 * v56);
    v65 = v56 - (v55 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v66 = *v63++;
      *v64++ = vmovl_u8(v66);
      v65 += 8;
    }
    while (v65);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_27;
    goto LABEL_26;
  }
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(WTF::StringBuilder *a1, unint64_t *a2, unsigned __int8 *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  _BYTE *result;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  _WORD *v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  _WORD *v35;
  unsigned __int8 *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint16x8_t *v48;
  unint64_t v49;
  uint8x8_t *v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t *v54;
  unint64_t v55;
  _BYTE *v56;
  uint8x8_t *v57;
  uint16x8_t *v58;
  unint64_t v59;
  uint8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint8x8_t *v63;
  uint16x8_t *v64;
  unint64_t v65;
  uint8x8_t v66;
  _BYTE v67[4];
  _BYTE v68[4];
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;

  v5 = 0;
  v6 = *a3;
  v7 = -1;
  do
  {
    ++v5;
    --v7;
    v8 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v8);
  v9 = *((_QWORD *)a1 + 1);
  if (!v9 && (v9 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (result)
    {
      v24 = result;
      v25 = a2[1];
      v26 = v25;
      v27 = *a3;
      if ((_DWORD)v25)
      {
        v28 = (_BYTE *)*a2;
        if ((_DWORD)v25 == 1)
          *result = *v28;
        else
          result = memcpy(result, v28, a2[1]);
      }
      v29 = 0;
      do
      {
        v30 = v27;
        v67[v29-- + 3] = (v27 % 0xAu) | 0x30;
        v27 /= 0xAu;
      }
      while (v30 > 9);
      if (v29 + 5 <= 4)
        return memcpy(&v24[v26], &v67[v29 + 4], -v29);
    }
    return result;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result)
    return result;
  v12 = *a2;
  v11 = a2[1];
  v13 = *a3;
  v14 = &result[2 * v11];
  if ((v11 & 0xFFFFFFC0) == 0)
  {
    v15 = (unint64_t)result;
    v11 = a2[1];
    if (result == (_BYTE *)v14)
      goto LABEL_32;
LABEL_22:
    v31 = (unint64_t)&result[2 * v11 - v15 - 2];
    if (v31 < 0xE
      || (v15 < v12 + (v31 >> 1) + 1 ? (v32 = v12 >= (v31 & 0xFFFFFFFFFFFFFFFELL) + v15 + 2) : (v32 = 1), !v32))
    {
      v35 = (_WORD *)v15;
      v36 = (unsigned __int8 *)v12;
      goto LABEL_31;
    }
    v33 = (v31 >> 1) + 1;
    if (v31 >= 0x3E)
    {
      v34 = v33 & 0xFFFFFFFFFFFFFFE0;
      v57 = (uint8x8_t *)(v12 + 16);
      v58 = (uint16x8_t *)(v15 + 32);
      v59 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v60 = *(uint8x16_t *)v57[-2].i8;
        v61 = vmovl_u8(*v57);
        v62 = vmovl_high_u8(*(uint8x16_t *)v57->i8);
        v58[-2] = vmovl_u8(*(uint8x8_t *)v60.i8);
        v58[-1] = vmovl_high_u8(v60);
        *v58 = v61;
        v58[1] = v62;
        v58 += 4;
        v57 += 4;
        v59 -= 32;
      }
      while (v59);
      if (v33 == v34)
        goto LABEL_32;
      if ((v33 & 0x18) == 0)
      {
        v36 = (unsigned __int8 *)(v12 + v34);
        v35 = (_WORD *)(v15 + 2 * v34);
        goto LABEL_31;
      }
    }
    else
    {
      v34 = 0;
    }
    v35 = (_WORD *)(v15 + 2 * (v33 & 0xFFFFFFFFFFFFFFF8));
    v36 = (unsigned __int8 *)(v12 + (v33 & 0xFFFFFFFFFFFFFFF8));
    v63 = (uint8x8_t *)(v12 + v34);
    v64 = (uint16x8_t *)(v15 + 2 * v34);
    v65 = v34 - (v33 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v66 = *v63++;
      *v64++ = vmovl_u8(v66);
      v65 += 8;
    }
    while (v65);
    if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_32;
    do
    {
LABEL_31:
      v37 = *v36++;
      *v35++ = v37;
    }
    while (v35 != v14);
    goto LABEL_32;
  }
  v15 = (unint64_t)&result[2 * (a2[1] & 0xFFFFFFC0)];
  v16 = 0uLL;
  v17 = result;
  do
  {
    v69.val[0] = *(int8x16_t *)v12;
    v18 = *(int8x16_t *)(v12 + 16);
    v70.val[0] = *(int8x16_t *)(v12 + 32);
    v19 = *(_OWORD *)(v12 + 48);
    v12 += 64;
    v20 = v19;
    v70.val[1] = 0uLL;
    v71.val[0] = v18;
    v69.val[1] = 0uLL;
    v21 = v17;
    vst2q_s8(v21, v69);
    v21 += 32;
    v71.val[1] = 0uLL;
    vst2q_s8(v21, v71);
    v22 = v17 + 64;
    vst2q_s8(v22, v70);
    v23 = v17 + 96;
    vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
    v17 += 128;
  }
  while (v17 != (char *)v15);
  v11 = v11;
  if ((_WORD *)v15 != v14)
    goto LABEL_22;
LABEL_32:
  v38 = 0;
  v39 = 4;
  v40 = 1;
  do
  {
    v41 = v39;
    v42 = v38;
    v43 = v40;
    v44 = v13;
    v68[--v39] = (v13 % 0xAu) | 0x30;
    ++v38;
    ++v40;
    v13 /= 0xAu;
  }
  while (v44 > 9);
  if (v41 <= 4)
  {
    v45 = v42 + 1;
    if ((unint64_t)(v42 + 1) < 8)
    {
      v46 = v39;
      goto LABEL_56;
    }
    if (v45 >= 0x20)
    {
      v47 = v45 & 0xFFFFFFFFFFFFFFE0;
      v48 = (uint16x8_t *)&result[2 * v11 + 32];
      v49 = v43 & 0xFFFFFFFFFFFFFFE0;
      v50 = (uint8x8_t *)&v68[-v42 + 19];
      do
      {
        v51 = *(uint8x16_t *)v50[-2].i8;
        v52 = vmovl_u8(*v50);
        v53 = vmovl_high_u8(*(uint8x16_t *)v50->i8);
        v48[-2] = vmovl_u8(*(uint8x8_t *)v51.i8);
        v48[-1] = vmovl_high_u8(v51);
        *v48 = v52;
        v48[1] = v53;
        v48 += 4;
        v50 += 4;
        v49 -= 32;
      }
      while (v49);
      if (v45 == v47)
        return result;
      if ((v45 & 0x18) == 0)
      {
        v14 += v47;
        v46 = v39 + v47;
        do
LABEL_56:
          *v14++ = v68[v46++];
        while (v46 != 4);
        return result;
      }
    }
    else
    {
      v47 = 0;
    }
    v46 = v39 + (v45 & 0xFFFFFFFFFFFFFFF8);
    v14 += v45 & 0xFFFFFFFFFFFFFFF8;
    v54 = (uint16x8_t *)&result[2 * v47 + 2 * v11];
    v55 = v47 - (v43 & 0xFFFFFFFFFFFFFFF8);
    v56 = &v68[v47];
    do
    {
      *v54++ = vmovl_u8(*(uint8x8_t *)&v56[v39]);
      v56 += 8;
      v55 += 8;
    }
    while (v55);
    if (v45 != (v45 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_56;
  }
  return result;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  char *v32;
  _BYTE v33[25];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  if ((*a3 & 0x8000000000000000) != 0)
  {
    v10 = -(uint64_t)v7;
    v11 = 1;
    do
    {
      ++v11;
      v12 = v10 >= 0xA;
      v10 /= 0xAuLL;
    }
    while (v12);
  }
  else
  {
    v8 = 0;
    do
    {
      ++v8;
      v9 = v7 > 9;
      v7 /= 0xAuLL;
    }
    while (v9);
  }
  v13 = *((_QWORD *)a1 + 1);
  if ((v13 || (v13 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    v14 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (v14)
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v14, *a2, a2[1], *a3, *a4, a4[1]);
    return;
  }
  v15 = (_BYTE *)MEMORY[0x186DAB068]();
  if (!v15)
    return;
  v16 = v15;
  v17 = a2[1];
  v18 = v17;
  v19 = *a3;
  v20 = (char *)*a4;
  v21 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v17)
  {
    v22 = (_BYTE *)*a2;
    if ((_DWORD)v17 != 1)
    {
      memcpy(v15, v22, a2[1]);
      v23 = &v16[v18];
      v24 = 0;
      if ((v19 & 0x8000000000000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
    *v15 = *v22;
  }
  v23 = &v15[v17];
  v24 = 0;
  if ((v19 & 0x8000000000000000) == 0)
  {
LABEL_17:
    v25 = v19;
    do
    {
      v33[v24-- + 24] = (v25 % 0xA) | 0x30;
      v9 = v25 > 9;
      v25 /= 0xAuLL;
    }
    while (v9);
    if (v24 + 26 <= 25)
    {
      v26 = &v33[v24 + 25];
      v27 = -v24;
LABEL_28:
      memcpy(v23, v26, v27);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
LABEL_22:
  v28 = -(uint64_t)v19;
  do
  {
    v33[v24-- + 24] = (v28 % 0xA) | 0x30;
    v9 = v28 > 9;
    v28 /= 0xAuLL;
  }
  while (v9);
  v29 = v24 + 24;
  v26 = &v33[v24 + 24];
  *v26 = 45;
  if (v24 + 26 <= 26)
  {
    if (v29 <= 24)
      v29 = 24;
    v27 = v29 - v24 - 23;
    goto LABEL_28;
  }
LABEL_29:
  if ((v19 & 0x8000000000000000) != 0)
  {
    v31 = -(uint64_t)v19;
    v30 = 1;
    do
    {
      ++v30;
      v12 = v31 >= 0xA;
      v31 /= 0xAuLL;
    }
    while (v12);
  }
  else
  {
    v30 = 0;
    do
    {
      ++v30;
      v9 = v19 > 9;
      v19 /= 0xAuLL;
    }
    while (v9);
  }
  if ((_DWORD)v21)
  {
    v32 = &v23[v30];
    if ((_DWORD)v21 == 1)
      *v32 = *v20;
    else
      memcpy(v32, v20, v21);
  }
}

uint16x8_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  _WORD *v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  int8x16_t v10;
  uint16x8_t v11;
  uint16x8_t result;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  _WORD *v21;
  unsigned __int8 *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  _WORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t *v44;
  uint16x8_t *v45;
  unint64_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint8x8_t *v51;
  uint16x8_t *v52;
  unint64_t v53;
  uint8x8_t v54;
  uint16x8_t *v55;
  unint64_t v56;
  uint8x8_t *v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t *v62;
  unint64_t v63;
  _BYTE *v64;
  uint16x8_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint8x8_t *v68;
  uint8x16_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint8x8_t *v77;
  uint8x8_t v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  _WORD *v82;
  unint64_t v83;
  __int128 v84;
  int8x16_t v85;
  uint16x8_t v86;
  char *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  _WORD *v94;
  unsigned __int8 *v95;
  __int16 v96;
  uint8x8_t *v97;
  uint16x8_t *v98;
  unint64_t v99;
  uint8x16_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint8x8_t *v104;
  uint16x8_t *v105;
  unint64_t v106;
  uint8x8_t v107;
  _BYTE v108[25];
  uint64_t v109;
  uint64_t vars0;
  int8x16x2_t v111;
  int8x16x2_t v112;
  int8x16x2_t v113;
  int8x16x2_t v114;
  int8x16x2_t v115;
  int8x16x2_t v116;

  v109 = *MEMORY[0x1E0C80C00];
  v6 = (_WORD *)(a1 + 2 * a3);
  if ((a3 & 0xFFFFFFC0) == 0)
  {
    v7 = a1;
    v16 = a3;
    if ((_WORD *)a1 == v6)
      goto LABEL_17;
LABEL_7:
    v17 = a1 + 2 * v16 - v7 - 2;
    if (v17 < 0xE || (v7 < a2 + (v17 >> 1) + 1 ? (v18 = a2 >= (v17 & 0xFFFFFFFFFFFFFFFELL) + v7 + 2) : (v18 = 1), !v18))
    {
      v21 = (_WORD *)v7;
      v22 = (unsigned __int8 *)a2;
      goto LABEL_16;
    }
    v19 = (v17 >> 1) + 1;
    if (v17 >= 0x3E)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFE0;
      v44 = (uint8x8_t *)(a2 + 16);
      v45 = (uint16x8_t *)(v7 + 32);
      v46 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v47 = *(uint8x16_t *)v44[-2].i8;
        v48 = vmovl_u8(*(uint8x8_t *)v47.i8);
        result = vmovl_high_u8(v47);
        v49 = vmovl_u8(*v44);
        v50 = vmovl_high_u8(*(uint8x16_t *)v44->i8);
        v45[-2] = v48;
        v45[-1] = result;
        *v45 = v49;
        v45[1] = v50;
        v45 += 4;
        v44 += 4;
        v46 -= 32;
      }
      while (v46);
      if (v19 == v20)
        goto LABEL_17;
      if ((v19 & 0x18) == 0)
      {
        v22 = (unsigned __int8 *)(a2 + v20);
        v21 = (_WORD *)(v7 + 2 * v20);
        goto LABEL_16;
      }
    }
    else
    {
      v20 = 0;
    }
    v21 = (_WORD *)(v7 + 2 * (v19 & 0xFFFFFFFFFFFFFFF8));
    v22 = (unsigned __int8 *)(a2 + (v19 & 0xFFFFFFFFFFFFFFF8));
    v51 = (uint8x8_t *)(a2 + v20);
    v52 = (uint16x8_t *)(v7 + 2 * v20);
    v53 = v20 - (v19 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v54 = *v51++;
      result = vmovl_u8(v54);
      *v52++ = result;
      v53 += 8;
    }
    while (v53);
    if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_17;
    do
    {
LABEL_16:
      v23 = *v22++;
      *v21++ = v23;
    }
    while (v21 != v6);
    goto LABEL_17;
  }
  v7 = a1 + 2 * (a3 & 0xFFFFFFC0);
  v8 = 0uLL;
  v9 = (char *)a1;
  do
  {
    v111.val[0] = *(int8x16_t *)a2;
    v10 = *(int8x16_t *)(a2 + 16);
    v113.val[0] = *(int8x16_t *)(a2 + 32);
    v11 = *(uint16x8_t *)(a2 + 48);
    a2 += 64;
    result = v11;
    v113.val[1] = 0uLL;
    v115.val[0] = v10;
    v111.val[1] = 0uLL;
    v13 = v9;
    vst2q_s8(v13, v111);
    v13 += 32;
    v115.val[1] = 0uLL;
    vst2q_s8(v13, v115);
    v14 = v9 + 64;
    vst2q_s8(v14, v113);
    v15 = v9 + 96;
    vst2q_s8(v15, *(int8x16x2_t *)(&v8 - 1));
    v9 += 128;
  }
  while (v9 != (char *)v7);
  v16 = a3;
  if ((_WORD *)v7 != v6)
    goto LABEL_7;
LABEL_17:
  if ((a4 & 0x8000000000000000) == 0)
  {
    v24 = 0;
    v25 = 25;
    v26 = 1;
    v27 = a4;
    do
    {
      v28 = v25;
      v29 = v24;
      v30 = v26;
      v108[--v25] = (v27 % 0xA) | 0x30;
      ++v24;
      ++v26;
      v31 = v27 > 9;
      v27 /= 0xAuLL;
    }
    while (v31);
    if (v28 > 25)
      goto LABEL_67;
    v32 = v29 + 1;
    if ((unint64_t)(v29 + 1) < 8)
    {
      v33 = v25;
      v34 = v6;
      goto LABEL_63;
    }
    if (v32 >= 0x20)
    {
      v43 = v32 & 0xFFFFFFFFFFFFFFE0;
      v55 = (uint16x8_t *)(a1 + 2 * v16 + 32);
      v56 = v30 & 0xFFFFFFFFFFFFFFE0;
      v57 = (uint8x8_t *)&v108[-v29 + 40];
      do
      {
        v58 = *(uint8x16_t *)v57[-2].i8;
        v59 = vmovl_u8(*(uint8x8_t *)v58.i8);
        result = vmovl_high_u8(v58);
        v60 = vmovl_u8(*v57);
        v61 = vmovl_high_u8(*(uint8x16_t *)v57->i8);
        v55[-2] = v59;
        v55[-1] = result;
        *v55 = v60;
        v55[1] = v61;
        v55 += 4;
        v57 += 4;
        v56 -= 32;
      }
      while (v56);
      if (v32 == v43)
        goto LABEL_67;
      if ((v32 & 0x18) == 0)
      {
        v34 = &v6[v43];
        v33 = v25 + v43;
        do
LABEL_63:
          *v34++ = v108[v33++];
        while (v33 != 25);
        goto LABEL_67;
      }
    }
    else
    {
      v43 = 0;
    }
    v33 = v25 + (v32 & 0xFFFFFFFFFFFFFFF8);
    v34 = &v6[v32 & 0xFFFFFFFFFFFFFFF8];
    v62 = (uint16x8_t *)(a1 + 2 * v43 + 2 * v16);
    v63 = v43 - (v30 & 0xFFFFFFFFFFFFFFF8);
    v64 = &v108[v43];
    do
    {
      result = vmovl_u8(*(uint8x8_t *)&v64[v25]);
      *v62++ = result;
      v64 += 8;
      v63 += 8;
    }
    while (v63);
    if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_67;
    goto LABEL_63;
  }
  v35 = 0;
  v36 = -(uint64_t)a4;
  do
  {
    v108[v35-- + 24] = (v36 % 0xA) | 0x30;
    v31 = v36 > 9;
    v36 /= 0xAuLL;
  }
  while (v31);
  v108[v35 + 24] = 45;
  if (v35 + 26 > 26)
    goto LABEL_67;
  v37 = v35 + 24;
  v38 = 24;
  if (v35 + 24 > 24)
    v38 = v35 + 24;
  v39 = v38 - v35 - 23;
  v40 = (_WORD *)(a1 + 2 * a3);
  if (v39 < 8)
    goto LABEL_66;
  v41 = -23 - v35;
  if (v39 < 0x20)
  {
    v42 = 0;
LABEL_55:
    v37 += v39 & 0xFFFFFFFFFFFFFFF8;
    v40 = &v6[v39 & 0xFFFFFFFFFFFFFFF8];
    v73 = (uint16x8_t *)(a1 + 2 * v42 + 2 * v16);
    v74 = v35 + 24;
    v31 = v35 + 24 <= 24;
    v75 = 24;
    if (!v31)
      v75 = v74;
    v76 = v42 - ((v75 + v41) & 0xFFFFFFFFFFFFFFF8);
    v77 = (uint8x8_t *)&v108[v42 + v74];
    do
    {
      v78 = *v77++;
      result = vmovl_u8(v78);
      *v73++ = result;
      v76 += 8;
    }
    while (v76);
    if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_67;
    do
    {
LABEL_66:
      *v40++ = v108[v37];
      v31 = v37++ < 24;
    }
    while (v31);
    goto LABEL_67;
  }
  v42 = v39 & 0xFFFFFFFFFFFFFFE0;
  v65 = (uint16x8_t *)(a1 + 2 * v16 + 32);
  v66 = v35 + 24;
  if (v35 + 24 <= 24)
    v66 = 24;
  v67 = (v66 + v41) & 0xFFFFFFFFFFFFFFE0;
  v68 = (uint8x8_t *)((char *)&vars0 + v35 + 7);
  do
  {
    v69 = *(uint8x16_t *)v68[-2].i8;
    v70 = vmovl_u8(*(uint8x8_t *)v69.i8);
    result = vmovl_high_u8(v69);
    v71 = vmovl_u8(*v68);
    v72 = vmovl_high_u8(*(uint8x16_t *)v68->i8);
    v65[-2] = v70;
    v65[-1] = result;
    *v65 = v71;
    v65[1] = v72;
    v65 += 4;
    v68 += 4;
    v67 -= 32;
  }
  while (v67);
  if (v39 != v42)
  {
    if ((v39 & 0x18) == 0)
    {
      v40 = &v6[v42];
      v37 += v42;
      goto LABEL_66;
    }
    goto LABEL_55;
  }
LABEL_67:
  if ((a4 & 0x8000000000000000) != 0)
  {
    v80 = -(uint64_t)a4;
    v79 = 1;
    do
    {
      ++v79;
      v18 = v80 >= 0xA;
      v80 /= 0xAuLL;
    }
    while (v18);
  }
  else
  {
    v79 = 0;
    do
    {
      ++v79;
      v31 = a4 > 9;
      a4 /= 0xAuLL;
    }
    while (v31);
  }
  v81 = (unint64_t)&v6[v79];
  v82 = (_WORD *)(v81 + 2 * a6);
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v83 = v81 + 2 * (a6 & 0xFFFFFFC0);
    v84 = 0uLL;
    do
    {
      v112.val[0] = *(int8x16_t *)a5;
      v85 = *(int8x16_t *)(a5 + 16);
      v114.val[0] = *(int8x16_t *)(a5 + 32);
      v86 = *(uint16x8_t *)(a5 + 48);
      a5 += 64;
      result = v86;
      v114.val[1] = 0uLL;
      v116.val[0] = v85;
      v112.val[1] = 0uLL;
      v87 = (char *)v81;
      vst2q_s8(v87, v112);
      v87 += 32;
      v116.val[1] = 0uLL;
      vst2q_s8(v87, v116);
      v88 = (char *)(v81 + 64);
      vst2q_s8(v88, v114);
      v89 = (char *)(v81 + 96);
      vst2q_s8(v89, *(int8x16x2_t *)result.i8);
      v81 += 128;
    }
    while (v81 != v83);
    v81 = v83;
  }
  if ((_WORD *)v81 != v82)
  {
    v90 = a1 + 2 * (v16 + v79 + a6) - v81 - 2;
    if (v90 < 0xE
      || (v81 < a5 + (v90 >> 1) + 1 ? (v91 = a5 >= (v90 & 0xFFFFFFFFFFFFFFFELL) + v81 + 2) : (v91 = 1), !v91))
    {
      v94 = (_WORD *)v81;
      v95 = (unsigned __int8 *)a5;
      goto LABEL_87;
    }
    v92 = (v90 >> 1) + 1;
    if (v90 >= 0x3E)
    {
      v93 = v92 & 0xFFFFFFFFFFFFFFE0;
      v97 = (uint8x8_t *)(a5 + 16);
      v98 = (uint16x8_t *)(v81 + 32);
      v99 = v92 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v100 = *(uint8x16_t *)v97[-2].i8;
        v101 = vmovl_u8(*(uint8x8_t *)v100.i8);
        result = vmovl_high_u8(v100);
        v102 = vmovl_u8(*v97);
        v103 = vmovl_high_u8(*(uint8x16_t *)v97->i8);
        v98[-2] = v101;
        v98[-1] = result;
        *v98 = v102;
        v98[1] = v103;
        v98 += 4;
        v97 += 4;
        v99 -= 32;
      }
      while (v99);
      if (v92 == v93)
        return result;
      if ((v92 & 0x18) == 0)
      {
        v95 = (unsigned __int8 *)(a5 + v93);
        v94 = (_WORD *)(v81 + 2 * v93);
        do
        {
LABEL_87:
          v96 = *v95++;
          *v94++ = v96;
        }
        while (v94 != v82);
        return result;
      }
    }
    else
    {
      v93 = 0;
    }
    v94 = (_WORD *)(v81 + 2 * (v92 & 0xFFFFFFFFFFFFFFF8));
    v95 = (unsigned __int8 *)(a5 + (v92 & 0xFFFFFFFFFFFFFFF8));
    v104 = (uint8x8_t *)(a5 + v93);
    v105 = (uint16x8_t *)(v81 + 2 * v93);
    v106 = v93 - (v92 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v107 = *v104++;
      result = vmovl_u8(v107);
      *v105++ = result;
      v106 += 8;
    }
    while (v106);
    if (v92 != (v92 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_87;
  }
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  size_t v29;
  _BYTE *v30;
  size_t v31;
  _BYTE *v32;
  _BYTE *v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  _WORD *v38;
  unsigned __int8 *v39;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  int8x16_t v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  _WORD *v51;
  unsigned __int8 *v52;
  __int16 v53;
  _WORD *v54;
  unint64_t v55;
  __int128 v56;
  int8x16_t v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  _WORD *v67;
  unsigned __int8 *v68;
  __int16 v69;
  uint64_t v70;
  unint64_t v71;
  uint8x8_t *v72;
  uint16x8_t *v73;
  unint64_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint8x8_t *v78;
  uint16x8_t *v79;
  unint64_t v80;
  uint8x8_t v81;
  uint8x8_t *v82;
  uint16x8_t *v83;
  unint64_t v84;
  uint8x16_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint8x8_t *v88;
  uint16x8_t *v89;
  unint64_t v90;
  uint8x8_t v91;
  uint8x8_t *v92;
  uint16x8_t *v93;
  unint64_t v94;
  uint8x16_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint8x8_t *v98;
  uint16x8_t *v99;
  unint64_t v100;
  uint8x8_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;

  v7 = *((_QWORD *)a1 + 1);
  if (!v7 && (v7 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v25 = result;
    v26 = a2[1];
    v27 = v26;
    v28 = *(_BYTE **)a3;
    v29 = *(unsigned int *)(a3 + 8);
    v30 = *(_BYTE **)a4;
    v31 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v26)
    {
      v32 = (_BYTE *)*a2;
      if ((_DWORD)v26 != 1)
      {
        result = memcpy(result, v32, a2[1]);
        v33 = &v25[v27];
        if (!(_DWORD)v29)
          goto LABEL_19;
LABEL_17:
        if ((_DWORD)v29 != 1)
        {
          result = memcpy(v33, v28, v29);
          if (!(_DWORD)v31)
            return result;
          goto LABEL_22;
        }
        *v33 = *v28;
LABEL_19:
        if (!(_DWORD)v31)
          return result;
LABEL_22:
        result = &v33[v29];
        if ((_DWORD)v31 != 1)
          return memcpy(result, v30, v31);
        *result = *v30;
        return result;
      }
      *result = *v32;
    }
    v33 = &result[v26];
    if (!(_DWORD)v29)
      goto LABEL_19;
    goto LABEL_17;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result)
    return result;
  v10 = *a2;
  v9 = a2[1];
  v11 = *(_QWORD *)a3;
  v12 = *(unsigned int *)(a3 + 8);
  v13 = *(_QWORD *)a4;
  v14 = *(unsigned int *)(a4 + 8);
  v15 = (unint64_t)&result[2 * v9];
  if ((v9 & 0xFFFFFFC0) == 0)
  {
    v16 = (unint64_t)result;
    v9 = a2[1];
    if (result == (_BYTE *)v15)
      goto LABEL_36;
LABEL_26:
    v34 = (unint64_t)&result[2 * v9 - v16 - 2];
    if (v34 < 0xE
      || (v16 < v10 + (v34 >> 1) + 1 ? (v35 = v10 >= (v34 & 0xFFFFFFFFFFFFFFFELL) + v16 + 2) : (v35 = 1), !v35))
    {
      v38 = (_WORD *)v16;
      v39 = (unsigned __int8 *)v10;
      goto LABEL_35;
    }
    v36 = (v34 >> 1) + 1;
    if (v34 >= 0x3E)
    {
      v37 = v36 & 0xFFFFFFFFFFFFFFE0;
      v72 = (uint8x8_t *)(v10 + 16);
      v73 = (uint16x8_t *)(v16 + 32);
      v74 = v36 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v75 = *(uint8x16_t *)v72[-2].i8;
        v76 = vmovl_u8(*v72);
        v77 = vmovl_high_u8(*(uint8x16_t *)v72->i8);
        v73[-2] = vmovl_u8(*(uint8x8_t *)v75.i8);
        v73[-1] = vmovl_high_u8(v75);
        *v73 = v76;
        v73[1] = v77;
        v73 += 4;
        v72 += 4;
        v74 -= 32;
      }
      while (v74);
      if (v36 == v37)
        goto LABEL_36;
      if ((v36 & 0x18) == 0)
      {
        v39 = (unsigned __int8 *)(v10 + v37);
        v38 = (_WORD *)(v16 + 2 * v37);
        goto LABEL_35;
      }
    }
    else
    {
      v37 = 0;
    }
    v38 = (_WORD *)(v16 + 2 * (v36 & 0xFFFFFFFFFFFFFFF8));
    v39 = (unsigned __int8 *)(v10 + (v36 & 0xFFFFFFFFFFFFFFF8));
    v78 = (uint8x8_t *)(v10 + v37);
    v79 = (uint16x8_t *)(v16 + 2 * v37);
    v80 = v37 - (v36 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v81 = *v78++;
      *v79++ = vmovl_u8(v81);
      v80 += 8;
    }
    while (v80);
    if (v36 == (v36 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_36;
    do
    {
LABEL_35:
      v40 = *v39++;
      *v38++ = v40;
    }
    while (v38 != (_WORD *)v15);
    goto LABEL_36;
  }
  v16 = (unint64_t)&result[2 * (a2[1] & 0xFFFFFFC0)];
  v17 = 0uLL;
  v18 = result;
  do
  {
    v102.val[0] = *(int8x16_t *)v10;
    v19 = *(int8x16_t *)(v10 + 16);
    v105.val[0] = *(int8x16_t *)(v10 + 32);
    v20 = *(_OWORD *)(v10 + 48);
    v10 += 64;
    v21 = v20;
    v105.val[1] = 0uLL;
    v108.val[0] = v19;
    v102.val[1] = 0uLL;
    v22 = v18;
    vst2q_s8(v22, v102);
    v22 += 32;
    v108.val[1] = 0uLL;
    vst2q_s8(v22, v108);
    v23 = v18 + 64;
    vst2q_s8(v23, v105);
    v24 = v18 + 96;
    vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
    v18 += 128;
  }
  while (v18 != (char *)v16);
  v9 = v9;
  if (v16 != v15)
    goto LABEL_26;
LABEL_36:
  v41 = v15 + 2 * v12;
  if ((v12 & 0xFFFFFFC0) != 0)
  {
    v42 = v15 + 2 * (v12 & 0xFFFFFFC0);
    v43 = 0uLL;
    do
    {
      v103.val[0] = *(int8x16_t *)v11;
      v44 = *(int8x16_t *)(v11 + 16);
      v106.val[0] = *(int8x16_t *)(v11 + 32);
      v45 = *(_OWORD *)(v11 + 48);
      v11 += 64;
      v46 = v45;
      v106.val[1] = 0uLL;
      v109.val[0] = v44;
      v103.val[1] = 0uLL;
      v47 = (char *)v15;
      vst2q_s8(v47, v103);
      v47 += 32;
      v109.val[1] = 0uLL;
      vst2q_s8(v47, v109);
      v48 = (char *)(v15 + 64);
      vst2q_s8(v48, v106);
      v49 = (char *)(v15 + 96);
      vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
      v15 += 128;
    }
    while (v15 != v42);
    v15 = v42;
  }
  if (v15 != v41)
  {
    v50 = (unint64_t)&result[2 * v9 + 2 * v12 - v15 - 2];
    if (v50 < 0xE || v15 < v11 + (v50 >> 1) + 1 && v11 < (v50 & 0xFFFFFFFFFFFFFFFELL) + v15 + 2)
    {
      v51 = (_WORD *)v15;
      v52 = (unsigned __int8 *)v11;
      goto LABEL_45;
    }
    v70 = (v50 >> 1) + 1;
    if (v50 >= 0x3E)
    {
      v71 = v70 & 0xFFFFFFFFFFFFFFE0;
      v92 = (uint8x8_t *)(v11 + 16);
      v93 = (uint16x8_t *)(v15 + 32);
      v94 = v70 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v95 = *(uint8x16_t *)v92[-2].i8;
        v96 = vmovl_u8(*v92);
        v97 = vmovl_high_u8(*(uint8x16_t *)v92->i8);
        v93[-2] = vmovl_u8(*(uint8x8_t *)v95.i8);
        v93[-1] = vmovl_high_u8(v95);
        *v93 = v96;
        v93[1] = v97;
        v93 += 4;
        v92 += 4;
        v94 -= 32;
      }
      while (v94);
      if (v70 == v71)
        goto LABEL_46;
      if ((v70 & 0x18) == 0)
      {
        v52 = (unsigned __int8 *)(v11 + v71);
        v51 = (_WORD *)(v15 + 2 * v71);
        do
        {
LABEL_45:
          v53 = *v52++;
          *v51++ = v53;
        }
        while (v51 != (_WORD *)v41);
        goto LABEL_46;
      }
    }
    else
    {
      v71 = 0;
    }
    v51 = (_WORD *)(v15 + 2 * (v70 & 0xFFFFFFFFFFFFFFF8));
    v52 = (unsigned __int8 *)(v11 + (v70 & 0xFFFFFFFFFFFFFFF8));
    v98 = (uint8x8_t *)(v11 + v71);
    v99 = (uint16x8_t *)(v15 + 2 * v71);
    v100 = v71 - (v70 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v101 = *v98++;
      *v99++ = vmovl_u8(v101);
      v100 += 8;
    }
    while (v100);
    if (v70 != (v70 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_45;
  }
LABEL_46:
  v54 = (_WORD *)(v41 + 2 * v14);
  if ((v14 & 0xFFFFFFC0) != 0)
  {
    v55 = v41 + 2 * (v14 & 0xFFFFFFC0);
    v56 = 0uLL;
    do
    {
      v104.val[0] = *(int8x16_t *)v13;
      v57 = *(int8x16_t *)(v13 + 16);
      v107.val[0] = *(int8x16_t *)(v13 + 32);
      v58 = *(_OWORD *)(v13 + 48);
      v13 += 64;
      v59 = v58;
      v107.val[1] = 0uLL;
      v110.val[0] = v57;
      v104.val[1] = 0uLL;
      v60 = (char *)v41;
      vst2q_s8(v60, v104);
      v60 += 32;
      v110.val[1] = 0uLL;
      vst2q_s8(v60, v110);
      v61 = (char *)(v41 + 64);
      vst2q_s8(v61, v107);
      v62 = (char *)(v41 + 96);
      vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
      v41 += 128;
    }
    while (v41 != v55);
    v41 = v55;
  }
  if ((_WORD *)v41 != v54)
  {
    v63 = (unint64_t)&result[2 * v9 + 2 * v12 + 2 * v14 - v41 - 2];
    if (v63 < 0xE
      || (v41 < v13 + (v63 >> 1) + 1 ? (v64 = v13 >= (v63 & 0xFFFFFFFFFFFFFFFELL) + v41 + 2) : (v64 = 1), !v64))
    {
      v67 = (_WORD *)v41;
      v68 = (unsigned __int8 *)v13;
      goto LABEL_60;
    }
    v65 = (v63 >> 1) + 1;
    if (v63 >= 0x3E)
    {
      v66 = v65 & 0xFFFFFFFFFFFFFFE0;
      v82 = (uint8x8_t *)(v13 + 16);
      v83 = (uint16x8_t *)(v41 + 32);
      v84 = v65 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v85 = *(uint8x16_t *)v82[-2].i8;
        v86 = vmovl_u8(*v82);
        v87 = vmovl_high_u8(*(uint8x16_t *)v82->i8);
        v83[-2] = vmovl_u8(*(uint8x8_t *)v85.i8);
        v83[-1] = vmovl_high_u8(v85);
        *v83 = v86;
        v83[1] = v87;
        v83 += 4;
        v82 += 4;
        v84 -= 32;
      }
      while (v84);
      if (v65 == v66)
        return result;
      if ((v65 & 0x18) == 0)
      {
        v68 = (unsigned __int8 *)(v13 + v66);
        v67 = (_WORD *)(v41 + 2 * v66);
        do
        {
LABEL_60:
          v69 = *v68++;
          *v67++ = v69;
        }
        while (v67 != v54);
        return result;
      }
    }
    else
    {
      v66 = 0;
    }
    v67 = (_WORD *)(v41 + 2 * (v65 & 0xFFFFFFFFFFFFFFF8));
    v68 = (unsigned __int8 *)(v13 + (v65 & 0xFFFFFFFFFFFFFFF8));
    v88 = (uint8x8_t *)(v13 + v66);
    v89 = (uint16x8_t *)(v41 + 2 * v66);
    v90 = v66 - (v65 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v91 = *v88++;
      *v89++ = vmovl_u8(v91);
      v90 += 8;
    }
    while (v90);
    if (v65 != (v65 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_60;
  }
  return result;
}

uint16x8_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(WTF::StringBuilder *a1, unsigned int *a2)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint16x8_t *result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint16x8_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint16x8_t *v35;
  unint64_t v36;
  uint8x8_t *v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint16x8_t *v43;
  uint16x8_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t *v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t *v55;
  uint8x8_t v56;
  _BYTE v57[13];
  uint64_t v58;
  uint64_t v59;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v6 = -v3;
    v7 = 1;
    do
    {
      ++v7;
      v8 = v6 >= 0xA;
      v6 /= 0xAu;
    }
    while (v8);
  }
  else
  {
    v4 = 0;
    do
    {
      ++v4;
      v5 = v3 > 9;
      v3 /= 0xAu;
    }
    while (v5);
  }
  v9 = *((_QWORD *)a1 + 1);
  if (!v9 && (v9 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    result = (uint16x8_t *)MEMORY[0x186DAB068]();
    if (result)
    {
      v21 = *a2;
      if ((*a2 & 0x80000000) != 0)
      {
        v23 = 0;
        v24 = -v21;
        do
        {
          v57[v23-- + 12] = (v24 % 0xA) | 0x30;
          v5 = v24 > 9;
          v24 /= 0xAu;
        }
        while (v5);
        v25 = v23 + 12;
        v26 = &v57[v23 + 12];
        *v26 = 45;
        if (v23 + 14 <= 14)
        {
          if (v25 <= 12)
            v25 = 12;
          return (uint16x8_t *)memcpy(result, v26, v25 - v23 - 11);
        }
      }
      else
      {
        v22 = 0;
        do
        {
          v57[v22-- + 12] = (v21 % 0xA) | 0x30;
          v5 = v21 > 9;
          v21 /= 0xAu;
        }
        while (v5);
        if (v22 + 14 <= 13)
          return (uint16x8_t *)memcpy(result, &v57[v22 + 13], -v22);
      }
    }
    return result;
  }
  result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result)
    return result;
  v11 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v27 = 0;
    v28 = -v11;
    do
    {
      v57[v27-- + 12] = (v28 % 0xA) | 0x30;
      v5 = v28 > 9;
      v28 /= 0xAu;
    }
    while (v5);
    v57[v27 + 12] = 45;
    if (v27 + 14 > 14)
      return result;
    v29 = v27 + 12;
    v30 = 12;
    if (v27 + 12 > 12)
      v30 = v27 + 12;
    v31 = v30 - v27 - 11;
    if (v31 >= 8)
    {
      v32 = -11 - v27;
      if (v31 >= 0x20)
      {
        v33 = v31 & 0xFFFFFFFFFFFFFFE0;
        v44 = result + 2;
        v45 = v27 + 12;
        if (v27 + 12 <= 12)
          v45 = 12;
        v46 = (v45 + v32) & 0xFFFFFFFFFFFFFFE0;
        v47 = (uint8x8_t *)((char *)&v59 + v27 + 7);
        do
        {
          v48 = *(uint8x16_t *)v47[-2].i8;
          v49 = vmovl_u8(*v47);
          v50 = vmovl_high_u8(*(uint8x16_t *)v47->i8);
          v44[-2] = vmovl_u8(*(uint8x8_t *)v48.i8);
          v44[-1] = vmovl_high_u8(v48);
          *v44 = v49;
          v44[1] = v50;
          v44 += 4;
          v47 += 4;
          v46 -= 32;
        }
        while (v46);
        if (v31 == v33)
          return result;
        if ((v31 & 0x18) == 0)
        {
          result = (uint16x8_t *)((char *)result + 2 * v33);
          v29 += v33;
          goto LABEL_63;
        }
      }
      else
      {
        v33 = 0;
      }
      v29 += v31 & 0xFFFFFFFFFFFFFFF8;
      v51 = (uint16x8_t *)((char *)result + 2 * v33);
      v52 = v27 + 12;
      v5 = v27 + 12 <= 12;
      v53 = 12;
      if (!v5)
        v53 = v52;
      v54 = v33 - ((v53 + v32) & 0xFFFFFFFFFFFFFFF8);
      v55 = (uint8x8_t *)&v57[v33 + v52];
      do
      {
        v56 = *v55++;
        *v51++ = vmovl_u8(v56);
        v54 += 8;
      }
      while (v54);
      result = (uint16x8_t *)((char *)result + 2 * (v31 & 0xFFFFFFFFFFFFFFF8));
      if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    do
    {
LABEL_63:
      result->i16[0] = v57[v29];
      result = (uint16x8_t *)((char *)result + 2);
      v5 = v29++ < 12;
    }
    while (v5);
    return result;
  }
  v12 = 0;
  v13 = 13;
  v14 = 1;
  do
  {
    v15 = v13;
    v16 = v12;
    v17 = v14;
    v57[--v13] = (v11 % 0xA) | 0x30;
    ++v12;
    ++v14;
    v5 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v5);
  if (v15 <= 13)
  {
    v18 = v16 + 1;
    if ((unint64_t)(v16 + 1) < 8)
    {
      v19 = v13;
      v20 = result;
      goto LABEL_60;
    }
    if (v18 >= 0x20)
    {
      v34 = v18 & 0xFFFFFFFFFFFFFFE0;
      v35 = result + 2;
      v36 = v17 & 0xFFFFFFFFFFFFFFE0;
      v37 = (uint8x8_t *)&v57[-v16 + 28];
      do
      {
        v38 = *(uint8x16_t *)v37[-2].i8;
        v39 = vmovl_u8(*v37);
        v40 = vmovl_high_u8(*(uint8x16_t *)v37->i8);
        v35[-2] = vmovl_u8(*(uint8x8_t *)v38.i8);
        v35[-1] = vmovl_high_u8(v38);
        *v35 = v39;
        v35[1] = v40;
        v35 += 4;
        v37 += 4;
        v36 -= 32;
      }
      while (v36);
      if (v18 == v34)
        return result;
      if ((v18 & 0x18) == 0)
      {
        v20 = (uint16x8_t *)((char *)result + 2 * v34);
        v19 = v13 + v34;
        do
        {
LABEL_60:
          v20->i16[0] = v57[v19];
          v20 = (uint16x8_t *)((char *)v20 + 2);
          ++v19;
        }
        while (v19 != 13);
        return result;
      }
    }
    else
    {
      v34 = 0;
    }
    v19 = v13 + (v18 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint16x8_t *)((char *)result + 2 * (v18 & 0xFFFFFFFFFFFFFFF8));
    v41 = v34 - (v17 & 0xFFFFFFFFFFFFFFF8);
    v42 = &v57[v34];
    v43 = (uint16x8_t *)((char *)result + 2 * v34);
    do
    {
      *v43++ = vmovl_u8(*(uint8x8_t *)&v42[v13]);
      v42 += 8;
      v41 += 8;
    }
    while (v41);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_60;
  }
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(WTF::StringBuilder *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *result;
  uint64_t v6;
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _BYTE *v11;
  unint64_t v12;
  unsigned __int128 *v13;
  unsigned __int128 v14;
  _BYTE *v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  int8x16_t *v30;
  __int16 v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  _BYTE *v35;
  int8x16_t *v36;
  char v37;
  uint8x8_t *v38;
  uint16x8_t *v39;
  unint64_t v40;
  uint8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint8x8_t *v44;
  uint16x8_t *v45;
  unint64_t v46;
  uint8x8_t v47;
  int8x16_t *v48;
  int8x16_t *v49;
  unint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t *v55;
  int8x8_t *v56;
  unint64_t v57;
  int16x8_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v3 = *a2;
  if (*a2)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (!v4)
    {
LABEL_5:
      v4 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_7;
    }
  }
  else
  {
    v4 = *((_QWORD *)a1 + 1);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 16) & 4) == 0)
    goto LABEL_9;
LABEL_7:
  if (!v3 || (*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v9 = *a2;
    if (!*a2)
      return result;
    v7 = *(int8x16_t **)(v9 + 8);
    v10 = *(unsigned int *)(v9 + 4);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if ((_DWORD)v10)
      {
        if ((_DWORD)v10 == 1)
        {
          *result = v7->i8[0];
          return result;
        }
        return memcpy(result, v7, v10);
      }
      return result;
    }
    v11 = &result[v10];
    if (v10 < 0x10)
    {
      v12 = (unint64_t)result;
    }
    else
    {
      v12 = (unint64_t)&result[v10 & 0xFFFFFFF0];
      v13 = (unsigned __int128 *)result;
      do
      {
        v14 = (unsigned __int128)vld2q_s8(v7->i8);
        v7 += 2;
        *v13++ = v14;
      }
      while (v13 != (unsigned __int128 *)v12);
    }
    if ((_BYTE *)v12 == v11)
      return result;
    v32 = (unint64_t)&result[v10 - v12];
    if (v32 < 8 || (v12 < (unint64_t)v7 + 2 * v32 ? (v33 = v7 >= (int8x16_t *)&result[v10]) : (v33 = 1), !v33))
    {
      v35 = (_BYTE *)v12;
      v36 = v7;
      goto LABEL_56;
    }
    if (v32 >= 0x20)
    {
      v34 = v32 & 0xFFFFFFFFFFFFFFE0;
      v48 = v7 + 2;
      v49 = (int8x16_t *)(v12 + 16);
      v50 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v52 = v48[-2];
        v51 = v48[-1];
        v54 = *v48;
        v53 = v48[1];
        v48 += 4;
        v49[-1] = vuzp1q_s8(v52, v51);
        *v49 = vuzp1q_s8(v54, v53);
        v49 += 2;
        v50 -= 32;
      }
      while (v50);
      if (v32 == v34)
        return result;
      if ((v32 & 0x18) == 0)
      {
        v36 = (int8x16_t *)((char *)v7 + 2 * v34);
        v35 = (_BYTE *)(v12 + v34);
        goto LABEL_56;
      }
    }
    else
    {
      v34 = 0;
    }
    v35 = (_BYTE *)(v12 + (v32 & 0xFFFFFFFFFFFFFFF8));
    v36 = (int8x16_t *)((char *)v7 + 2 * (v32 & 0xFFFFFFFFFFFFFFF8));
    v55 = (int16x8_t *)((char *)v7 + 2 * v34);
    v56 = (int8x8_t *)(v12 + v34);
    v57 = v34 - (v32 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v58 = *v55++;
      *v56++ = vmovn_s16(v58);
      v57 += 8;
    }
    while (v57);
    if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_56:
      v37 = v36->i8[0];
      v36 = (int8x16_t *)((char *)v36 + 2);
      *v35++ = v37;
    }
    while (v35 != v11);
    return result;
  }
LABEL_9:
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = *(int8x16_t **)(v6 + 8);
      v8 = *(unsigned int *)(v6 + 4);
      if ((*(_BYTE *)(v6 + 16) & 4) == 0)
      {
        if (!(_DWORD)v8)
          return result;
        if ((_DWORD)v8 == 1)
        {
          *(_WORD *)result = v7->i16[0];
          return result;
        }
        v10 = 2 * v8;
        return memcpy(result, v7, v10);
      }
      v15 = &result[2 * v8];
      if (v8 < 0x40)
      {
        v16 = (unint64_t)result;
        if (result == v15)
          return result;
      }
      else
      {
        v16 = (unint64_t)&result[2 * (v8 & 0xFFFFFFC0)];
        v17 = 0uLL;
        v18 = result;
        do
        {
          v59.val[0] = *v7;
          v19 = v7[1];
          v60.val[0] = v7[2];
          v20 = v7[3];
          v7 += 4;
          v21 = v20;
          v60.val[1] = 0uLL;
          v61.val[0] = v19;
          v59.val[1] = 0uLL;
          v22 = v18;
          vst2q_s8(v22, v59);
          v22 += 32;
          v61.val[1] = 0uLL;
          vst2q_s8(v22, v61);
          v23 = v18 + 64;
          vst2q_s8(v23, v60);
          v24 = v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 += 128;
        }
        while (v18 != (char *)v16);
        if ((_BYTE *)v16 == v15)
          return result;
      }
      v25 = (unint64_t)&result[2 * v8 - v16 - 2];
      if (v25 < 0xE
        || (v16 < (unint64_t)v7->u64 + (v25 >> 1) + 1
          ? (v26 = (unint64_t)v7 >= (v25 & 0xFFFFFFFFFFFFFFFELL) + v16 + 2)
          : (v26 = 1),
            !v26))
      {
        v29 = (_WORD *)v16;
        v30 = v7;
        goto LABEL_41;
      }
      v27 = (v25 >> 1) + 1;
      if (v25 >= 0x3E)
      {
        v28 = v27 & 0xFFFFFFFFFFFFFFE0;
        v38 = (uint8x8_t *)&v7[1];
        v39 = (uint16x8_t *)(v16 + 32);
        v40 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v41 = *(uint8x16_t *)v38[-2].i8;
          v42 = vmovl_u8(*v38);
          v43 = vmovl_high_u8(*(uint8x16_t *)v38->i8);
          v39[-2] = vmovl_u8(*(uint8x8_t *)v41.i8);
          v39[-1] = vmovl_high_u8(v41);
          *v39 = v42;
          v39[1] = v43;
          v39 += 4;
          v38 += 4;
          v40 -= 32;
        }
        while (v40);
        if (v27 == v28)
          return result;
        if ((v27 & 0x18) == 0)
        {
          v30 = (int8x16_t *)((char *)v7 + v28);
          v29 = (_WORD *)(v16 + 2 * v28);
          goto LABEL_41;
        }
      }
      else
      {
        v28 = 0;
      }
      v29 = (_WORD *)(v16 + 2 * (v27 & 0xFFFFFFFFFFFFFFF8));
      v30 = (int8x16_t *)((char *)v7 + (v27 & 0xFFFFFFFFFFFFFFF8));
      v44 = (uint8x8_t *)&v7->i8[v28];
      v45 = (uint16x8_t *)(v16 + 2 * v28);
      v46 = v28 - (v27 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v47 = *v44++;
        *v45++ = vmovl_u8(v47);
        v46 += 8;
      }
      while (v46);
      if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8))
        return result;
      do
      {
LABEL_41:
        v31 = v30->u8[0];
        v30 = (int8x16_t *)((char *)v30 + 1);
        *v29++ = v31;
      }
      while (v29 != (_WORD *)v15);
    }
  }
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, unint64_t *a2, char *a3)
{
  uint64_t v5;
  _BYTE *result;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  _WORD *v10;
  unint64_t v11;
  __int128 v12;
  char *v13;
  int8x16_t v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  unsigned __int8 *v30;
  __int16 v31;
  uint8x8_t *v32;
  uint16x8_t *v33;
  unint64_t v34;
  uint8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint8x8_t *v38;
  uint16x8_t *v39;
  unint64_t v40;
  uint8x8_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;

  v5 = *((_QWORD *)a1 + 1);
  if (!v5 && (v5 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v20 = result;
    v21 = a2[1];
    v22 = v21;
    v23 = *a3;
    if ((_DWORD)v21)
    {
      v24 = (_BYTE *)*a2;
      if ((_DWORD)v21 == 1)
      {
        *result = *v24;
        result[1] = v23;
        return result;
      }
      result = memcpy(result, v24, a2[1]);
    }
    v20[v22] = v23;
    return result;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *a3;
    v10 = &result[2 * v8];
    if ((v8 & 0xFFFFFFC0) != 0)
    {
      v11 = (unint64_t)&result[2 * (a2[1] & 0xFFFFFFC0)];
      v12 = 0uLL;
      v13 = result;
      do
      {
        v42.val[0] = *(int8x16_t *)v7;
        v14 = *(int8x16_t *)(v7 + 16);
        v43.val[0] = *(int8x16_t *)(v7 + 32);
        v15 = *(_OWORD *)(v7 + 48);
        v7 += 64;
        v16 = v15;
        v43.val[1] = 0uLL;
        v44.val[0] = v14;
        v42.val[1] = 0uLL;
        v17 = v13;
        vst2q_s8(v17, v42);
        v17 += 32;
        v44.val[1] = 0uLL;
        vst2q_s8(v17, v44);
        v18 = v13 + 64;
        vst2q_s8(v18, v43);
        v19 = v13 + 96;
        vst2q_s8(v19, *(int8x16x2_t *)(&v12 - 1));
        v13 += 128;
      }
      while (v13 != (char *)v11);
      if ((_WORD *)v11 == v10)
        goto LABEL_28;
    }
    else
    {
      v11 = (unint64_t)result;
      if (result == (_BYTE *)v10)
      {
LABEL_28:
        *v10 = v9;
        return result;
      }
    }
    v25 = (unint64_t)&result[2 * v8 - v11 - 2];
    if (v25 < 0xE
      || (v11 < v7 + (v25 >> 1) + 1 ? (v26 = v7 >= (v25 & 0xFFFFFFFFFFFFFFFELL) + v11 + 2) : (v26 = 1), !v26))
    {
      v29 = (_WORD *)v11;
      v30 = (unsigned __int8 *)v7;
      goto LABEL_27;
    }
    v27 = (v25 >> 1) + 1;
    if (v25 >= 0x3E)
    {
      v28 = v27 & 0xFFFFFFFFFFFFFFE0;
      v32 = (uint8x8_t *)(v7 + 16);
      v33 = (uint16x8_t *)(v11 + 32);
      v34 = v27 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v35 = *(uint8x16_t *)v32[-2].i8;
        v36 = vmovl_u8(*v32);
        v37 = vmovl_high_u8(*(uint8x16_t *)v32->i8);
        v33[-2] = vmovl_u8(*(uint8x8_t *)v35.i8);
        v33[-1] = vmovl_high_u8(v35);
        *v33 = v36;
        v33[1] = v37;
        v33 += 4;
        v32 += 4;
        v34 -= 32;
      }
      while (v34);
      if (v27 == v28)
        goto LABEL_28;
      if ((v27 & 0x18) == 0)
      {
        v30 = (unsigned __int8 *)(v7 + v28);
        v29 = (_WORD *)(v11 + 2 * v28);
        do
        {
LABEL_27:
          v31 = *v30++;
          *v29++ = v31;
        }
        while (v29 != v10);
        goto LABEL_28;
      }
    }
    else
    {
      v28 = 0;
    }
    v29 = (_WORD *)(v11 + 2 * (v27 & 0xFFFFFFFFFFFFFFF8));
    v30 = (unsigned __int8 *)(v7 + (v27 & 0xFFFFFFFFFFFFFFF8));
    v38 = (uint8x8_t *)(v7 + v28);
    v39 = (uint16x8_t *)(v11 + 2 * v28);
    v40 = v28 - (v27 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v41 = *v38++;
      *v39++ = vmovl_u8(v41);
      v40 += 8;
    }
    while (v40);
    if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_28;
    goto LABEL_27;
  }
  return result;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(_BYTE *result, uint64_t *a2)
{
  const char *v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  WTF::StringBuilder *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  WTF::StringBuilder *v26;
  int v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned int v30;
  _BYTE *v31;
  int v32;
  unsigned int v33;
  const char *v34;
  unint64_t v35;
  uint16x8_t *v36;
  unint64_t v37;
  uint8x8_t *v38;
  uint8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t *v42;
  unint64_t v43;
  char *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  const char *v48;
  uint64_t *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  const char **v61;

  v3 = *(const char **)(*(_QWORD *)result + 16);
  v4 = *a2;
  v5 = *((unsigned __int8 *)a2 + 8);
  if (v3[61] && (*((unsigned __int8 *)v3 + 60) | 2) == 7 || v3[63] && v3[62] == 1)
  {
    if (v5 == 3)
      goto LABEL_24;
  }
  else if (v3[65])
  {
    if (v3[64] == 3 && v5 == 3)
    {
LABEL_24:
      if (!*(_DWORD *)(v4 + 48))
      {
        switch(*(_BYTE *)v4)
        {
          case 0:
          case 1:
            v26 = (WTF::StringBuilder *)*((_QWORD *)v3 + 5);
            v48 = "packed_int";
            v27 = 10;
            goto LABEL_40;
          case 2:
            v34 = "packed_uint";
            goto LABEL_39;
          case 3:
          case 5:
            v26 = (WTF::StringBuilder *)*((_QWORD *)v3 + 5);
            v48 = "packed_float";
            v27 = 12;
            goto LABEL_40;
          case 4:
            v34 = "packed_half";
LABEL_39:
            v26 = (WTF::StringBuilder *)*((_QWORD *)v3 + 5);
            v48 = v34;
            v27 = 11;
LABEL_40:
            LODWORD(v49) = v27;
            LOBYTE(v61) = 3;
            return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(v26, (unint64_t *)&v48, (unsigned __int8 *)&v61);
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            goto LABEL_57;
          default:
            return result;
        }
      }
LABEL_56:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_57:
      __break(0xC471u);
      JUMPOUT(0x1824DCF48);
    }
  }
  WTF::StringBuilder::append();
  v47 = *a2;
  v48 = v3;
  v49 = &v47;
  v50 = v3;
  v51 = v3;
  v52 = v3;
  v53 = v3;
  v54 = v3;
  v55 = v3;
  v56 = v3;
  v57 = v3;
  v58 = v3;
  v59 = v3;
  v60 = v3;
  v7 = *(unsigned int *)(v47 + 48);
  if ((_DWORD)v7 == -1)
    goto LABEL_56;
  v61 = &v48;
  ((void (*)(const char ***))*(&off_1E0FD6CA0 + v7))(&v61);
  v8 = 0;
  v9 = (WTF::StringBuilder *)*((_QWORD *)v3 + 5);
  v10 = *((_BYTE *)a2 + 8);
  v11 = v10;
  do
  {
    ++v8;
    v12 = v11;
    v11 /= 0xAu;
  }
  while (v12 > 9);
  v13 = *((_QWORD *)v9 + 1);
  if ((v13 || (v13 = *(_QWORD *)v9) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v9);
    if (!result)
      return result;
    v14 = 0;
    *(_DWORD *)result = 2097196;
    v15 = 4;
    v16 = 1;
    v17 = v10;
    do
    {
      v18 = v15;
      v19 = v14;
      v20 = v16;
      v21 = v17;
      --v15;
      *((_BYTE *)&v48 + v15) = (v17 % 0xAu) | 0x30;
      ++v14;
      ++v16;
      v17 /= 0xAu;
    }
    while (v21 > 9);
    v22 = result + 4;
    if (v18 > 4)
      goto LABEL_53;
    v23 = v19 + 1;
    if ((unint64_t)(v19 + 1) < 8)
    {
      v24 = v15;
      v25 = result + 4;
      goto LABEL_52;
    }
    if (v23 >= 0x20)
    {
      v35 = v23 & 0xFFFFFFFFFFFFFFE0;
      v36 = (uint16x8_t *)(result + 36);
      v37 = v20 & 0xFFFFFFFFFFFFFFE0;
      v38 = (uint8x8_t *)((char *)&v48 - v19 + 19);
      do
      {
        v39 = *(uint8x16_t *)v38[-2].i8;
        v40 = vmovl_u8(*v38);
        v41 = vmovl_high_u8(*(uint8x16_t *)v38->i8);
        v36[-2] = vmovl_u8(*(uint8x8_t *)v39.i8);
        v36[-1] = vmovl_high_u8(v39);
        *v36 = v40;
        v36[1] = v41;
        v36 += 4;
        v38 += 4;
        v37 -= 32;
      }
      while (v37);
      if (v23 == v35)
        goto LABEL_53;
      if ((v23 & 0x18) == 0)
      {
        v25 = &v22[2 * v35];
        v24 = v15 + v35;
        do
LABEL_52:
          *v25++ = *((unsigned __int8 *)&v48 + v24++);
        while (v24 != 4);
LABEL_53:
        v45 = 0;
        do
        {
          ++v45;
          v46 = v10;
          v10 /= 0xAu;
        }
        while (v46 > 9);
        *(_WORD *)&v22[2 * v45] = 62;
        return result;
      }
    }
    else
    {
      v35 = 0;
    }
    v24 = v15 + (v23 & 0xFFFFFFFFFFFFFFF8);
    v25 = &v22[2 * (v23 & 0xFFFFFFFFFFFFFFF8)];
    v42 = (uint16x8_t *)&result[2 * v35 + 4];
    v43 = v35 - (v20 & 0xFFFFFFFFFFFFFFF8);
    v44 = (char *)&v48 + v35;
    do
    {
      *v42++ = vmovl_u8(*(uint8x8_t *)&v44[v15]);
      v44 += 8;
      v43 += 8;
    }
    while (v43);
    if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_53;
    goto LABEL_52;
  }
  result = (_BYTE *)MEMORY[0x186DAB068]();
  if (result)
  {
    v28 = 0;
    *(_WORD *)result = 8236;
    v29 = v10;
    do
    {
      v30 = v29;
      *((_BYTE *)&v48 + v28-- + 3) = (v29 % 0xAu) | 0x30;
      v29 /= 0xAu;
    }
    while (v30 > 9);
    v31 = result + 2;
    if (v28 + 5 <= 4)
      result = memcpy(result + 2, (char *)&v48 + v28 + 4, -v28);
    v32 = 0;
    do
    {
      ++v32;
      v33 = v10;
      v10 /= 0xAu;
    }
    while (v33 > 9);
    v31[v32] = 62;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringBuilder *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned int v10;
  int v11;
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned int v30;
  char *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 v36;
  unsigned int v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint16x8_t *v42;
  unint64_t v43;
  uint8x8_t *v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t *v48;
  unint64_t v49;
  char *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _WORD *v62;
  unint64_t v63;
  uint64_t v64;
  _WORD *v65;
  unint64_t v66;
  uint16x8_t *v67;
  unint64_t v68;
  uint8x8_t *v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t *v73;
  unint64_t v74;
  char *v75;
  int v76;
  unsigned int v77;
  _BOOL8 v78;
  uint64_t v79;
  _QWORD v80[13];
  _QWORD *v81;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  WTF::StringBuilder::append();
  v79 = *a2;
  v80[0] = v3;
  v80[1] = &v79;
  v80[2] = v3;
  v80[3] = v3;
  v80[4] = v3;
  v80[5] = v3;
  v80[6] = v3;
  v80[7] = v3;
  v80[8] = v3;
  v80[9] = v3;
  v80[10] = v3;
  v80[11] = v3;
  v80[12] = v3;
  v4 = *(unsigned int *)(v79 + 48);
  if ((_DWORD)v4 == -1)
  {
    v78 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v78);
  }
  v81 = v80;
  ((void (*)(_QWORD **))*(&off_1E0FD6CA0 + v4))(&v81);
  v5 = 0;
  v6 = *(WTF::StringBuilder **)(v3 + 40);
  v7 = *((_BYTE *)a2 + 8);
  v8 = *((_BYTE *)a2 + 9);
  v9 = v7;
  do
  {
    ++v5;
    v10 = v9;
    v9 /= 0xAu;
  }
  while (v10 > 9);
  v11 = 0;
  v12 = *((_BYTE *)a2 + 9);
  do
  {
    ++v11;
    v13 = v12;
    v12 /= 0xAu;
  }
  while (v13 > 9);
  v14 = *((_QWORD *)v6 + 1);
  if ((v14 || (v14 = *(_QWORD *)v6) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    result = (_DWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v6);
    if (!result)
      return result;
    v16 = 0;
    *result = 2097196;
    v17 = 4;
    v18 = 1;
    v19 = v7;
    do
    {
      v20 = v17;
      v21 = v16;
      v22 = v18;
      v23 = v19;
      --v17;
      *((_BYTE *)v80 + v17) = (v19 % 0xAu) | 0x30;
      ++v16;
      ++v18;
      v19 /= 0xAu;
    }
    while (v23 > 9);
    v24 = result + 1;
    if (v20 <= 4)
    {
      v25 = v21 + 1;
      if ((unint64_t)(v21 + 1) < 8)
      {
        v26 = v17;
        v27 = result + 1;
        goto LABEL_41;
      }
      if (v25 >= 0x20)
      {
        v41 = v25 & 0xFFFFFFFFFFFFFFE0;
        v42 = (uint16x8_t *)(result + 9);
        v43 = v22 & 0xFFFFFFFFFFFFFFE0;
        v44 = (uint8x8_t *)((char *)&v80[2] - v21 + 3);
        do
        {
          v45 = *(uint8x16_t *)v44[-2].i8;
          v46 = vmovl_u8(*v44);
          v47 = vmovl_high_u8(*(uint8x16_t *)v44->i8);
          v42[-2] = vmovl_u8(*(uint8x8_t *)v45.i8);
          v42[-1] = vmovl_high_u8(v45);
          *v42 = v46;
          v42[1] = v47;
          v42 += 4;
          v44 += 4;
          v43 -= 32;
        }
        while (v43);
        if (v25 == v41)
          goto LABEL_42;
        if ((v25 & 0x18) == 0)
        {
          v27 = (_WORD *)v24 + v41;
          v26 = v17 + v41;
          do
LABEL_41:
            *v27++ = *((unsigned __int8 *)v80 + v26++);
          while (v26 != 4);
          goto LABEL_42;
        }
      }
      else
      {
        v41 = 0;
      }
      v26 = v17 + (v25 & 0xFFFFFFFFFFFFFFF8);
      v27 = (_WORD *)v24 + (v25 & 0xFFFFFFFFFFFFFFF8);
      v48 = (uint16x8_t *)((char *)result + 2 * v41 + 4);
      v49 = v41 - (v22 & 0xFFFFFFFFFFFFFFF8);
      v50 = (char *)v80 + v41;
      do
      {
        *v48++ = vmovl_u8(*(uint8x8_t *)&v50[v17]);
        v50 += 8;
        v49 += 8;
      }
      while (v49);
      if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_41;
    }
LABEL_42:
    v51 = 0;
    do
    {
      ++v51;
      v52 = v7;
      v7 /= 0xAu;
    }
    while (v52 > 9);
    v53 = 0;
    v54 = (_DWORD *)((char *)v24 + 2 * v51);
    *v54 = 2097196;
    v55 = 4;
    v56 = 1;
    v57 = v8;
    do
    {
      v58 = v55;
      v59 = v53;
      v60 = v56;
      v61 = v57;
      --v55;
      *((_BYTE *)v80 + v55) = (v57 % 0xAu) | 0x30;
      ++v53;
      ++v56;
      v57 /= 0xAu;
    }
    while (v61 > 9);
    v62 = v54 + 1;
    if (v58 > 4)
      goto LABEL_61;
    v63 = v59 + 1;
    if ((unint64_t)(v59 + 1) < 8)
    {
      v64 = v55;
      v65 = v62;
      goto LABEL_60;
    }
    if (v63 >= 0x20)
    {
      v66 = v63 & 0xFFFFFFFFFFFFFFE0;
      v67 = (uint16x8_t *)((char *)result + 2 * v51 + 40);
      v68 = v60 & 0xFFFFFFFFFFFFFFE0;
      v69 = (uint8x8_t *)((char *)&v80[2] - v59 + 3);
      do
      {
        v70 = *(uint8x16_t *)v69[-2].i8;
        v71 = vmovl_u8(*v69);
        v72 = vmovl_high_u8(*(uint8x16_t *)v69->i8);
        v67[-2] = vmovl_u8(*(uint8x8_t *)v70.i8);
        v67[-1] = vmovl_high_u8(v70);
        *v67 = v71;
        v67[1] = v72;
        v67 += 4;
        v69 += 4;
        v68 -= 32;
      }
      while (v68);
      if (v63 == v66)
        goto LABEL_61;
      if ((v63 & 0x18) == 0)
      {
        v65 = &v62[v66];
        v64 = v55 + v66;
        do
LABEL_60:
          *v65++ = *((unsigned __int8 *)v80 + v64++);
        while (v64 != 4);
LABEL_61:
        v76 = 0;
        do
        {
          ++v76;
          v77 = v8;
          v8 /= 0xAu;
        }
        while (v77 > 9);
        v62[v76] = 62;
        return result;
      }
    }
    else
    {
      v66 = 0;
    }
    v64 = v55 + (v63 & 0xFFFFFFFFFFFFFFF8);
    v65 = &v62[v63 & 0xFFFFFFFFFFFFFFF8];
    v73 = (uint16x8_t *)((char *)result + 2 * v66 + 2 * v51 + 8);
    v74 = v66 - (v60 & 0xFFFFFFFFFFFFFFF8);
    v75 = (char *)v80 + v66;
    do
    {
      *v73++ = vmovl_u8(*(uint8x8_t *)&v75[v55]);
      v75 += 8;
      v74 += 8;
    }
    while (v74);
    if (v63 == (v63 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_61;
    goto LABEL_60;
  }
  result = (_DWORD *)MEMORY[0x186DAB068]();
  if (result)
  {
    v28 = 0;
    *(_WORD *)result = 8236;
    v29 = v7;
    do
    {
      v30 = v29;
      *((_BYTE *)v80 + v28-- + 3) = (v29 % 0xAu) | 0x30;
      v29 /= 0xAu;
    }
    while (v30 > 9);
    v31 = (char *)result + 2;
    if (v28 + 5 <= 4)
      result = memcpy((char *)result + 2, (char *)v80 + v28 + 4, -v28);
    v32 = 0;
    do
    {
      ++v32;
      v33 = v7;
      v7 /= 0xAu;
    }
    while (v33 > 9);
    v34 = 0;
    v35 = &v31[v32];
    *(_WORD *)v35 = 8236;
    v36 = v8;
    do
    {
      v37 = v36;
      *((_BYTE *)v80 + v34-- + 3) = (v36 % 0xAu) | 0x30;
      v36 /= 0xAu;
    }
    while (v37 > 9);
    v38 = v35 + 2;
    if (v34 + 5 <= 4)
      result = memcpy(v38, (char *)v80 + v34 + 4, -v34);
    v39 = 0;
    do
    {
      ++v39;
      v40 = v8;
      v8 /= 0xAu;
    }
    while (v40 > 9);
    *((_BYTE *)v38 + v39) = 62;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  WTF::StringBuilder::append();
  v4 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v4 + 12);
    if (v5 == 1)
    {
      if (*((_BYTE *)v4 + 8) == 3
        && (*(_BYTE *)(v3 + 61) && (*(unsigned __int8 *)(v3 + 60) | 2) == 7
         || *(_BYTE *)(v3 + 63) && *(_BYTE *)(v3 + 62) == 1
         || *(_BYTE *)(v3 + 65) && *(_BYTE *)(v3 + 64) == 3))
      {
        WTF::StringBuilder::append();
        v14 = (uint64_t *)*v4;
        v15 = v3;
        v16 = &v14;
        v17 = v3;
        v18 = v3;
        v19 = v3;
        v20 = v3;
        v21 = v3;
        v22 = v3;
        v23 = v3;
        v24 = v3;
        v25 = v3;
        v26 = v3;
        v27 = v3;
        v6 = *((unsigned int *)v14 + 12);
        if ((_DWORD)v6 != -1)
        {
          v28 = &v15;
          ((void (*)(uint64_t **))*(&off_1E0FD6CA0 + v6))(&v28);
          WTF::StringBuilder::append();
          goto LABEL_16;
        }
LABEL_25:
        v13 = std::__throw_bad_variant_access[abi:sn180100]();
        return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v13);
      }
      v5 = 1;
    }
  }
  else
  {
    v5 = MEMORY[0x30];
  }
  v14 = *a2;
  v15 = v3;
  v16 = &v14;
  v17 = v3;
  v18 = v3;
  v19 = v3;
  v20 = v3;
  v21 = v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v25 = v3;
  v26 = v3;
  v27 = v3;
  if (v5 == -1)
    goto LABEL_25;
  v28 = &v15;
  ((void (*)(uint64_t **, uint64_t *))*(&off_1E0FD6CA0 + v5))(&v28, v4);
LABEL_16:
  WTF::StringBuilder::append();
  v15 = v3;
  v16 = (uint64_t **)v3;
  v17 = v3;
  v7 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v7 == -1)
    goto LABEL_25;
  v28 = &v15;
  ((void (*)(uint64_t **, uint64_t **))off_1E0FD6D18[v7])(&v28, a2 + 1);
  result = *(_QWORD *)(v3 + 40);
  LOBYTE(v15) = 62;
  v9 = *(_QWORD *)(result + 8);
  if (!v9)
    return WTF::StringBuilder::append();
  v10 = *(unsigned int *)(result + 16);
  if (v10 >= *(_DWORD *)(v9 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v11 = *(_DWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 8);
  *(_DWORD *)(result + 16) = v10 + 1;
  if ((v11 & 4) != 0)
    *(_BYTE *)(v12 + v10) = 62;
  else
    *(_WORD *)(v12 + 2 * v10) = 62;
  return result;
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  _BYTE *result;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *(WTF::StringBuilder **)(v3 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(v4, &v6);
  if ((*(_BYTE *)(v3 + 61) && (*(unsigned __int8 *)(v3 + 60) | 2) == 7
     || *(_BYTE *)(v3 + 63) && *(_BYTE *)(v3 + 62) == 1
     || *(_BYTE *)(v3 + 65) && *(_BYTE *)(v3 + 64) == 3)
    && *(_BYTE *)(*(_QWORD *)a2 + 88) == 6)
  {
    return (_BYTE *)WTF::StringBuilder::append();
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v4 = *(WTF::StringBuilder **)(v3 + 40);
  v17 = *a2;
  LOBYTE(v30) = 60;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v4, &v17, (char *)&v30);
  v5 = (unsigned int *)a2[2];
  if (v5)
    v6 = v5 + 2;
  else
    v6 = 0;
  if (v5)
  {
    v7 = (uint64_t)&v5[2 * *v5 + 2];
    if (v6 == (unsigned int *)v7)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    if (!v6)
      goto LABEL_12;
  }
  v8 = *(unsigned int *)(*(_QWORD *)v6 + 48);
  v16 = *(_QWORD *)v6;
  v17 = v3;
  v18 = &v16;
  v19 = v3;
  v20 = v3;
  v21 = v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v25 = v3;
  v26 = v3;
  v27 = v3;
  v28 = v3;
  v29 = v3;
  if ((_DWORD)v8 == -1)
    goto LABEL_20;
  v30 = &v17;
  ((void (*)(uint64_t **))*(&off_1E0FD6CA0 + v8))(&v30);
  v9 = (uint64_t *)(v6 + 2);
  if (v6 + 2 != (unsigned int *)v7)
  {
    while (1)
    {
      WTF::StringBuilder::append();
      v16 = *v9;
      v17 = v3;
      v18 = &v16;
      v19 = v3;
      v20 = v3;
      v21 = v3;
      v22 = v3;
      v23 = v3;
      v24 = v3;
      v25 = v3;
      v26 = v3;
      v27 = v3;
      v28 = v3;
      v29 = v3;
      v10 = *(unsigned int *)(v16 + 48);
      if ((_DWORD)v10 == -1)
        break;
      v30 = &v17;
      ((void (*)(uint64_t **))*(&off_1E0FD6CA0 + v10))(&v30);
      if (++v9 == (uint64_t *)v7)
        goto LABEL_12;
    }
LABEL_20:
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
  }
LABEL_12:
  result = *(_QWORD *)(v3 + 40);
  LOBYTE(v17) = 62;
  v12 = *(_QWORD *)(result + 8);
  if (!v12)
    return WTF::StringBuilder::append();
  v13 = *(unsigned int *)(result + 16);
  if (v13 >= *(_DWORD *)(v12 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v14 = *(_DWORD *)(v12 + 16);
  v15 = *(_QWORD *)(v12 + 8);
  *(_DWORD *)(result + 16) = v13 + 1;
  if ((v14 & 4) != 0)
    *(_BYTE *)(v15 + v13) = 62;
  else
    *(_WORD *)(v15 + 2 * v13) = 62;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  const char *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  char *v9;
  WTF::StringBuilder *v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  WTF::StringBuilder *v14;
  _BOOL8 v16;
  uint64_t v17;
  const char *v18;
  uint64_t *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char **v31;
  int v32;

  v3 = *(const char **)(*(_QWORD *)a1 + 56);
  v4 = *((unsigned __int8 *)a2 + 8) - 1;
  if (v4 > 6)
  {
    v8 = 0;
    v9 = 0;
    v7 = 6;
    v6 = "sample";
  }
  else
  {
    v5 = (char)v4;
    v6 = off_1E0FD6E80[v5];
    v7 = dword_18260FFC0[(char)v4];
    v8 = *(_QWORD *)((char *)&unk_18260FFE0 + v5 * 8);
    v9 = off_1E0FD6EB8[v5];
  }
  v10 = (WTF::StringBuilder *)*((_QWORD *)v3 + 5);
  v18 = v9;
  v11 = v8 != 0;
  v12 = v8 - 1;
  if (!v11)
    v12 = 0;
  LODWORD(v19) = v12;
  LOBYTE(v31) = 60;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v10, (unint64_t *)&v18, (char *)&v31);
  v17 = *a2;
  v18 = v3;
  v19 = &v17;
  v20 = v3;
  v21 = v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v25 = v3;
  v26 = v3;
  v27 = v3;
  v28 = v3;
  v29 = v3;
  v30 = v3;
  v13 = *(unsigned int *)(v17 + 48);
  if ((_DWORD)v13 == -1)
  {
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_BYTE *)std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v16);
  }
  else
  {
    v31 = &v18;
    ((void (*)(const char ***))*(&off_1E0FD6CA0 + v13))(&v31);
    v14 = (WTF::StringBuilder *)*((_QWORD *)v3 + 5);
    v18 = ", access::";
    LODWORD(v19) = 10;
    v31 = (const char **)v6;
    v32 = v7;
    LOBYTE(v17) = 62;
    return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v14, (unint64_t *)&v18, (uint64_t)&v31, (char *)&v17);
  }
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  WTF::StringBuilder *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::StringBuilder *v23;
  int v24;
  _BOOL8 v26;
  uint64_t v27;
  const char *v28;
  uint64_t *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char **v41;
  int v42;

  v3 = *(const char **)(*(_QWORD *)a1 + 64);
  if ((*a2 - 1) > 3u)
  {
    v5 = 0;
    v6 = 0;
    v7 = (char)a2[2];
    if (v7 > 2)
      goto LABEL_3;
  }
  else
  {
    v4 = (char)(*a2 - 1);
    v5 = *(_QWORD *)((char *)&unk_182610018 + v4 * 8);
    v6 = off_1E0FD6EF0[v4];
    v7 = (char)a2[2];
    if (v7 > 2)
    {
LABEL_3:
      v8 = 0;
      v9 = 0;
      goto LABEL_6;
    }
  }
  v10 = v7;
  v8 = *(_QWORD *)((char *)&unk_182610038 + v10 * 8);
  v9 = off_1E0FD6F10[v10];
LABEL_6:
  v11 = (WTF::StringBuilder *)*((_QWORD *)v3 + 5);
  v28 = v6;
  v12 = v5 != 0;
  v13 = v5 - 1;
  if (!v12)
    v13 = 0;
  LODWORD(v29) = v13;
  LOBYTE(v41) = 60;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v11, (unint64_t *)&v28, (char *)&v41);
  v15 = a2[1];
  if (v15 <= 0x10)
  {
    v16 = (uint64_t *)*((_QWORD *)v3 + 6);
    v17 = 1 << v15;
    v18 = v16 + 22;
    v19 = v16 + 20;
    v20 = v16 + 21;
    if ((v17 & 0x2924) != 0)
      v20 = v19;
    if ((v17 & 0x14493) != 0)
      v21 = v18;
    else
      v21 = v20;
    v14 = *v21;
  }
  v27 = v14;
  v28 = v3;
  v29 = &v27;
  v30 = v3;
  v31 = v3;
  v32 = v3;
  v33 = v3;
  v34 = v3;
  v35 = v3;
  v36 = v3;
  v37 = v3;
  v38 = v3;
  v39 = v3;
  v40 = v3;
  v22 = *(unsigned int *)(v14 + 48);
  if ((_DWORD)v22 == -1)
  {
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_BYTE *)std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v26);
  }
  else
  {
    v41 = &v28;
    ((void (*)(const char ***))*(&off_1E0FD6CA0 + v22))(&v41);
    v23 = (WTF::StringBuilder *)*((_QWORD *)v3 + 5);
    v28 = ", access::";
    LODWORD(v29) = 10;
    v41 = (const char **)v9;
    v24 = v8 - 1;
    if (!v8)
      v24 = 0;
    v42 = v24;
    LOBYTE(v27) = 62;
    return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v23, (unint64_t *)&v28, (uint64_t)&v41, (char *)&v27);
  }
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  WTF::StringBuilder *v6;
  int v7;
  const char *v9;
  int v10;
  char *v11;
  int v12;

  v2 = *a2 - 1;
  if (v2 > 4)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v3 = (char)v2;
    v4 = *(_QWORD *)((char *)&unk_182610050 + v3 * 8);
    v5 = off_1E0FD6F28[v3];
  }
  v6 = *(WTF::StringBuilder **)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 40);
  v11 = v5;
  v7 = v4 - 1;
  if (!v4)
    v7 = 0;
  v12 = v7;
  v9 = "<float>";
  v10 = 7;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v6, (unint64_t *)&v11, (uint64_t)&v9);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, char *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  int v8;
  WTF::StringBuilder *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v4 = *a2;
  if (v4 >= 6 || ((0x3Du >> v4) & 1) == 0)
  {
    v16 = *((_QWORD *)a2 + 1);
    v17 = v3;
    v18 = &v16;
    v19 = v3;
    v20 = v3;
    v21 = v3;
    v22 = v3;
    v23 = v3;
    v24 = v3;
    v25 = v3;
    v26 = v3;
    v27 = v3;
    v28 = v3;
    v29 = v3;
    v5 = *(unsigned int *)(v16 + 48);
    if ((_DWORD)v5 != -1)
    {
      v30 = &v17;
      return ((uint64_t (*)(unint64_t **))*(&off_1E0FD6CA0 + v5))(&v30);
    }
    goto LABEL_16;
  }
  v7 = off_1E0FD6F50[v4];
  v8 = dword_182610078[v4];
  if (!a2[1])
    WTF::StringBuilder::append();
  v9 = *(WTF::StringBuilder **)(v3 + 40);
  v17 = (unint64_t)v7;
  LODWORD(v18) = v8;
  LOBYTE(v30) = 32;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v9, &v17, (char *)&v30);
  v16 = *((_QWORD *)a2 + 1);
  v17 = v3;
  v18 = &v16;
  v19 = v3;
  v20 = v3;
  v21 = v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v25 = v3;
  v26 = v3;
  v27 = v3;
  v28 = v3;
  v29 = v3;
  v10 = *(unsigned int *)(v16 + 48);
  if ((_DWORD)v10 == -1)
  {
LABEL_16:
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v15);
  }
  v30 = &v17;
  ((void (*)(unint64_t **))*(&off_1E0FD6CA0 + v10))(&v30);
  result = *(_QWORD *)(v3 + 40);
  LOBYTE(v17) = 38;
  v11 = *(_QWORD *)(result + 8);
  if (!v11)
    return WTF::StringBuilder::append();
  v12 = *(unsigned int *)(result + 16);
  if (v12 >= *(_DWORD *)(v11 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v13 = *(_DWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 8);
  *(_DWORD *)(result + 16) = v12 + 1;
  if ((v13 & 4) != 0)
    *(_BYTE *)(v14 + v12) = 38;
  else
    *(_WORD *)(v14 + 2 * v12) = 38;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  const char *v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  WTF::StringBuilder *v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;

  v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v5 = 1;
  v6 = 0;
  switch(*(_BYTE *)a2)
  {
    case 0:
    case 2:
      v5 = 0;
      v3 = "thread";
      goto LABEL_4;
    case 1:
      goto LABEL_9;
    case 3:
      v5 = 0;
      v3 = "device";
LABEL_4:
      v6 = 7;
      if (!*(_BYTE *)(a2 + 1))
        goto LABEL_23;
      goto LABEL_10;
    case 4:
      v5 = 0;
      v3 = "constant";
      v6 = 9;
      if (!*(_BYTE *)(a2 + 1))
        goto LABEL_23;
      goto LABEL_10;
    case 5:
      v5 = 0;
      v3 = "threadgroup";
      v6 = 12;
LABEL_9:
      if (*(_BYTE *)(a2 + 1))
        goto LABEL_10;
      goto LABEL_23;
    default:
      v6 = 0;
      if (*(_BYTE *)(a2 + 1))
      {
LABEL_10:
        if ((v5 & 1) != 0)
          goto LABEL_14;
      }
      else
      {
LABEL_23:
        WTF::StringBuilder::append();
        if ((v5 & 1) != 0)
          goto LABEL_14;
      }
      v7 = *(WTF::StringBuilder **)(v4 + 40);
      v8 = v6 - 1;
      if (!v6)
        v8 = 0;
      v17 = (unint64_t)v3;
      LODWORD(v18) = v8;
      LOBYTE(v30) = 32;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v7, &v17, (char *)&v30);
LABEL_14:
      v16 = *(_QWORD *)(a2 + 8);
      v17 = v4;
      v18 = &v16;
      v19 = v4;
      v20 = v4;
      v21 = v4;
      v22 = v4;
      v23 = v4;
      v24 = v4;
      v25 = v4;
      v26 = v4;
      v27 = v4;
      v28 = v4;
      v29 = v4;
      v9 = *(unsigned int *)(v16 + 48);
      if ((_DWORD)v9 == -1)
      {
        v15 = std::__throw_bad_variant_access[abi:sn180100]();
        return std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v15);
      }
      else
      {
        v30 = &v17;
        ((void (*)(unint64_t **))*(&off_1E0FD6CA0 + v9))(&v30);
        result = *(_QWORD *)(v4 + 40);
        LOBYTE(v17) = 42;
        v11 = *(_QWORD *)(result + 8);
        if (v11
          && (v12 = *(unsigned int *)(result + 16), v12 < *(_DWORD *)(v11 + 4))
          && !*(_QWORD *)result)
        {
          v13 = *(_DWORD *)(v11 + 16);
          v14 = *(_QWORD *)(v11 + 8);
          *(_DWORD *)(result + 16) = v12 + 1;
          if ((v13 & 4) != 0)
            *(_BYTE *)(v14 + v12) = 42;
          else
            *(_WORD *)(v14 + 2 * v12) = 42;
        }
        else
        {
          return WTF::StringBuilder::append();
        }
      }
      return result;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return WTF::StringBuilder::append();
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_1,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_2,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_3,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_4,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_5,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_6,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_7,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_8,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_9,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_10,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_11,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_12,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_13,WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

uint16x8_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(unsigned int)#1},WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(std::monostate)#1},WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(WGSL::AST::Expression *)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(uint64_t a1)
{
  WTF::StringBuilder *v1;
  unsigned int v3;

  v1 = *(WTF::StringBuilder **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40);
  v3 = 1;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(v1, &v3);
}

uint16x8_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(unsigned int)#1},WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(std::monostate)#1},WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(WGSL::AST::Expression *)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(uint64_t a1, unsigned int *a2)
{
  int v2;
  unsigned int v3;
  WTF::StringBuilder *v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint16x8_t *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint16x8_t *v21;
  unint64_t v22;
  uint8x8_t *v23;
  uint8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint16x8_t *v29;
  _BYTE v30[13];
  uint64_t v31;

  v2 = 0;
  v31 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(WTF::StringBuilder **)(**(_QWORD **)a1 + 40);
  v5 = -1;
  v6 = *a2;
  do
  {
    ++v2;
    --v5;
    v7 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v7);
  v8 = *((_QWORD *)v4 + 1);
  if ((v8 || (v8 = *(_QWORD *)v4) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v4);
    if (result)
    {
      v10 = 0;
      v11 = 13;
      v12 = 1;
      do
      {
        v13 = v11;
        v14 = v10;
        v15 = v12;
        v30[--v11] = (v3 % 0xA) | 0x30;
        ++v10;
        ++v12;
        v7 = v3 > 9;
        v3 /= 0xAu;
      }
      while (v7);
      if (v13 <= 13)
      {
        v16 = v14 + 1;
        if ((unint64_t)(v14 + 1) < 8)
        {
          v17 = v11;
          v18 = (char *)result;
          goto LABEL_28;
        }
        if (v16 >= 0x20)
        {
          v20 = v16 & 0xFFFFFFFFFFFFFFE0;
          v21 = result + 2;
          v22 = v15 & 0xFFFFFFFFFFFFFFE0;
          v23 = (uint8x8_t *)&v30[-v14 + 28];
          do
          {
            v24 = *(uint8x16_t *)v23[-2].i8;
            v25 = vmovl_u8(*v23);
            v26 = vmovl_high_u8(*(uint8x16_t *)v23->i8);
            v21[-2] = vmovl_u8(*(uint8x8_t *)v24.i8);
            v21[-1] = vmovl_high_u8(v24);
            *v21 = v25;
            v21[1] = v26;
            v21 += 4;
            v23 += 4;
            v22 -= 32;
          }
          while (v22);
          if (v16 == v20)
            return result;
          if ((v16 & 0x18) == 0)
          {
            v18 = &result->i8[2 * v20];
            v17 = v11 + v20;
            do
            {
LABEL_28:
              *(_WORD *)v18 = v30[v17];
              v18 += 2;
              ++v17;
            }
            while (v17 != 13);
            return result;
          }
        }
        else
        {
          v20 = 0;
        }
        v17 = v11 + (v16 & 0xFFFFFFFFFFFFFFF8);
        v18 = &result->i8[2 * (v16 & 0xFFFFFFFFFFFFFFF8)];
        v27 = v20 - (v15 & 0xFFFFFFFFFFFFFFF8);
        v28 = &v30[v20];
        v29 = (uint16x8_t *)((char *)result + 2 * v20);
        do
        {
          *v29++ = vmovl_u8(*(uint8x8_t *)&v28[v11]);
          v28 += 8;
          v27 += 8;
        }
        while (v27);
        if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_28;
      }
    }
  }
  else
  {
    result = (uint16x8_t *)MEMORY[0x186DAB068]();
    if (result)
    {
      v19 = 0;
      do
      {
        v30[v19-- + 12] = (v3 % 0xA) | 0x30;
        v7 = v3 > 9;
        v3 /= 0xAu;
      }
      while (v7);
      if (v19 + 14 <= 13)
        return (uint16x8_t *)memcpy(result, &v30[v19 + 13], -v19);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(unsigned int)#1},WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(std::monostate)#1},WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Type const*)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(WGSL::AST::Expression *)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 208))(*(_QWORD *)(*(_QWORD *)a1 + 16), *a2);
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, uint64_t *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *result;
  _BYTE *v8;
  uint64_t v9;
  __int16 v10;
  int8x16_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  int8x16_t *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  unsigned __int128 *v20;
  unsigned __int128 v21;
  _BYTE *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  _WORD *v36;
  int8x16_t *v37;
  __int16 v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  _BYTE *v42;
  int8x16_t *v43;
  char v44;
  uint8x8_t *v45;
  uint16x8_t *v46;
  unint64_t v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint8x8_t *v51;
  uint16x8_t *v52;
  unint64_t v53;
  uint8x8_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  unint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t *v62;
  int8x8_t *v63;
  unint64_t v64;
  int16x8_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;

  v5 = *a2;
  if (*a2)
  {
    v6 = *((_QWORD *)a1 + 1);
    if (!v6)
    {
LABEL_5:
      v6 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_7;
    }
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    goto LABEL_9;
LABEL_7:
  if (!v5 || (*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v13 = result;
    v14 = *a2;
    v15 = *a3;
    if (!v14)
    {
      *result = v15;
      return result;
    }
    v16 = *(int8x16_t **)(v14 + 8);
    v17 = *(unsigned int *)(v14 + 4);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        if ((_DWORD)v17 != 1)
        {
          result = memcpy(result, v16, v17);
          v13[*(unsigned int *)(v14 + 4)] = v15;
          return result;
        }
        *result = v16->i8[0];
      }
LABEL_33:
      result[*(unsigned int *)(v14 + 4)] = v15;
      return result;
    }
    v18 = &result[v17];
    if (v17 < 0x10)
    {
      v19 = (unint64_t)result;
    }
    else
    {
      v19 = (unint64_t)&result[v17 & 0xFFFFFFF0];
      v20 = (unsigned __int128 *)result;
      do
      {
        v21 = (unsigned __int128)vld2q_s8(v16->i8);
        v16 += 2;
        *v20++ = v21;
      }
      while (v20 != (unsigned __int128 *)v19);
    }
    if ((_BYTE *)v19 == v18)
      goto LABEL_33;
    v39 = (unint64_t)&result[v17 - v19];
    if (v39 < 8 || (v19 < (unint64_t)v16 + 2 * v39 ? (v40 = v16 >= (int8x16_t *)&result[v17]) : (v40 = 1), !v40))
    {
      v42 = (_BYTE *)v19;
      v43 = v16;
      goto LABEL_59;
    }
    if (v39 >= 0x20)
    {
      v41 = v39 & 0xFFFFFFFFFFFFFFE0;
      v55 = v16 + 2;
      v56 = (int8x16_t *)(v19 + 16);
      v57 = v39 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v59 = v55[-2];
        v58 = v55[-1];
        v61 = *v55;
        v60 = v55[1];
        v55 += 4;
        v56[-1] = vuzp1q_s8(v59, v58);
        *v56 = vuzp1q_s8(v61, v60);
        v56 += 2;
        v57 -= 32;
      }
      while (v57);
      if (v39 == v41)
        goto LABEL_33;
      if ((v39 & 0x18) == 0)
      {
        v43 = (int8x16_t *)((char *)v16 + 2 * v41);
        v42 = (_BYTE *)(v19 + v41);
        do
        {
LABEL_59:
          v44 = v43->i8[0];
          v43 = (int8x16_t *)((char *)v43 + 2);
          *v42++ = v44;
        }
        while (v42 != v18);
        goto LABEL_33;
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = (_BYTE *)(v19 + (v39 & 0xFFFFFFFFFFFFFFF8));
    v43 = (int8x16_t *)((char *)v16 + 2 * (v39 & 0xFFFFFFFFFFFFFFF8));
    v62 = (int16x8_t *)((char *)v16 + 2 * v41);
    v63 = (int8x8_t *)(v19 + v41);
    v64 = v41 - (v39 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v65 = *v62++;
      *v63++ = vmovn_s16(v65);
      v64 += 8;
    }
    while (v64);
    if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_33;
    goto LABEL_59;
  }
LABEL_9:
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v8 = result;
    v9 = *a2;
    v10 = *a3;
    if (!v9)
    {
      *(_WORD *)result = v10;
      return result;
    }
    v11 = *(int8x16_t **)(v9 + 8);
    v12 = *(unsigned int *)(v9 + 4);
    if ((*(_BYTE *)(v9 + 16) & 4) == 0)
    {
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 == 1)
        {
          *(_WORD *)result = v11->i16[0];
          *(_WORD *)&result[2 * *(unsigned int *)(v9 + 4)] = v10;
          return result;
        }
        result = memcpy(result, v11, 2 * v12);
      }
      goto LABEL_47;
    }
    v22 = &result[2 * v12];
    if (v12 < 0x40)
    {
      v23 = (unint64_t)result;
      if (result == v22)
      {
LABEL_47:
        *(_WORD *)&v8[2 * *(unsigned int *)(v9 + 4)] = v10;
        return result;
      }
    }
    else
    {
      v23 = (unint64_t)&result[2 * (v12 & 0xFFFFFFC0)];
      v24 = 0uLL;
      v25 = result;
      do
      {
        v66.val[0] = *v11;
        v26 = v11[1];
        v67.val[0] = v11[2];
        v27 = v11[3];
        v11 += 4;
        v28 = v27;
        v67.val[1] = 0uLL;
        v68.val[0] = v26;
        v66.val[1] = 0uLL;
        v29 = v25;
        vst2q_s8(v29, v66);
        v29 += 32;
        v68.val[1] = 0uLL;
        vst2q_s8(v29, v68);
        v30 = v25 + 64;
        vst2q_s8(v30, v67);
        v31 = v25 + 96;
        vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
        v25 += 128;
      }
      while (v25 != (char *)v23);
      if ((_BYTE *)v23 == v22)
        goto LABEL_47;
    }
    v32 = (unint64_t)&result[2 * v12 - v23 - 2];
    if (v32 < 0xE
      || (v23 < (unint64_t)v11->u64 + (v32 >> 1) + 1
        ? (v33 = (unint64_t)v11 >= (v32 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
        : (v33 = 1),
          !v33))
    {
      v36 = (_WORD *)v23;
      v37 = v11;
      goto LABEL_44;
    }
    v34 = (v32 >> 1) + 1;
    if (v32 >= 0x3E)
    {
      v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      v45 = (uint8x8_t *)&v11[1];
      v46 = (uint16x8_t *)(v23 + 32);
      v47 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v48 = *(uint8x16_t *)v45[-2].i8;
        v49 = vmovl_u8(*v45);
        v50 = vmovl_high_u8(*(uint8x16_t *)v45->i8);
        v46[-2] = vmovl_u8(*(uint8x8_t *)v48.i8);
        v46[-1] = vmovl_high_u8(v48);
        *v46 = v49;
        v46[1] = v50;
        v46 += 4;
        v45 += 4;
        v47 -= 32;
      }
      while (v47);
      if (v34 == v35)
        goto LABEL_47;
      if ((v34 & 0x18) == 0)
      {
        v37 = (int8x16_t *)((char *)v11 + v35);
        v36 = (_WORD *)(v23 + 2 * v35);
        do
        {
LABEL_44:
          v38 = v37->u8[0];
          v37 = (int8x16_t *)((char *)v37 + 1);
          *v36++ = v38;
        }
        while (v36 != (_WORD *)v22);
        goto LABEL_47;
      }
    }
    else
    {
      v35 = 0;
    }
    v36 = (_WORD *)(v23 + 2 * (v34 & 0xFFFFFFFFFFFFFFF8));
    v37 = (int8x16_t *)((char *)v11 + (v34 & 0xFFFFFFFFFFFFFFF8));
    v51 = (uint8x8_t *)&v11->i8[v35];
    v52 = (uint16x8_t *)(v23 + 2 * v35);
    v53 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v54 = *v51++;
      *v52++ = vmovl_u8(v54);
      v53 += 8;
    }
    while (v53);
    if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_47;
    goto LABEL_44;
  }
  return result;
}

uint16x8_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<long long,void>>(WTF::StringBuilder *a1, unint64_t *a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint16x8_t *result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint16x8_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint16x8_t *v35;
  unint64_t v36;
  uint8x8_t *v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint16x8_t *v43;
  uint16x8_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t *v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t *v55;
  uint8x8_t v56;
  _BYTE v57[25];
  uint64_t v58;
  uint64_t v59;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    v6 = -(uint64_t)v3;
    v7 = 1;
    do
    {
      ++v7;
      v8 = v6 >= 0xA;
      v6 /= 0xAuLL;
    }
    while (v8);
  }
  else
  {
    v4 = 0;
    do
    {
      ++v4;
      v5 = v3 > 9;
      v3 /= 0xAuLL;
    }
    while (v5);
  }
  v9 = *((_QWORD *)a1 + 1);
  if (!v9 && (v9 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    result = (uint16x8_t *)MEMORY[0x186DAB068]();
    if (result)
    {
      v21 = *a2;
      if ((*a2 & 0x8000000000000000) != 0)
      {
        v23 = 0;
        v24 = -(uint64_t)v21;
        do
        {
          v57[v23-- + 24] = (v24 % 0xA) | 0x30;
          v5 = v24 > 9;
          v24 /= 0xAuLL;
        }
        while (v5);
        v25 = v23 + 24;
        v26 = &v57[v23 + 24];
        *v26 = 45;
        if (v23 + 26 <= 26)
        {
          if (v25 <= 24)
            v25 = 24;
          return (uint16x8_t *)memcpy(result, v26, v25 - v23 - 23);
        }
      }
      else
      {
        v22 = 0;
        do
        {
          v57[v22-- + 24] = (v21 % 0xA) | 0x30;
          v5 = v21 > 9;
          v21 /= 0xAuLL;
        }
        while (v5);
        if (v22 + 26 <= 25)
          return (uint16x8_t *)memcpy(result, &v57[v22 + 25], -v22);
      }
    }
    return result;
  }
  result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result)
    return result;
  v11 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    v27 = 0;
    v28 = -(uint64_t)v11;
    do
    {
      v57[v27-- + 24] = (v28 % 0xA) | 0x30;
      v5 = v28 > 9;
      v28 /= 0xAuLL;
    }
    while (v5);
    v57[v27 + 24] = 45;
    if (v27 + 26 > 26)
      return result;
    v29 = v27 + 24;
    v30 = 24;
    if (v27 + 24 > 24)
      v30 = v27 + 24;
    v31 = v30 - v27 - 23;
    if (v31 >= 8)
    {
      v32 = -23 - v27;
      if (v31 >= 0x20)
      {
        v33 = v31 & 0xFFFFFFFFFFFFFFE0;
        v44 = result + 2;
        v45 = v27 + 24;
        if (v27 + 24 <= 24)
          v45 = 24;
        v46 = (v45 + v32) & 0xFFFFFFFFFFFFFFE0;
        v47 = (uint8x8_t *)((char *)&v59 + v27 + 7);
        do
        {
          v48 = *(uint8x16_t *)v47[-2].i8;
          v49 = vmovl_u8(*v47);
          v50 = vmovl_high_u8(*(uint8x16_t *)v47->i8);
          v44[-2] = vmovl_u8(*(uint8x8_t *)v48.i8);
          v44[-1] = vmovl_high_u8(v48);
          *v44 = v49;
          v44[1] = v50;
          v44 += 4;
          v47 += 4;
          v46 -= 32;
        }
        while (v46);
        if (v31 == v33)
          return result;
        if ((v31 & 0x18) == 0)
        {
          result = (uint16x8_t *)((char *)result + 2 * v33);
          v29 += v33;
          goto LABEL_63;
        }
      }
      else
      {
        v33 = 0;
      }
      v29 += v31 & 0xFFFFFFFFFFFFFFF8;
      v51 = (uint16x8_t *)((char *)result + 2 * v33);
      v52 = v27 + 24;
      v5 = v27 + 24 <= 24;
      v53 = 24;
      if (!v5)
        v53 = v52;
      v54 = v33 - ((v53 + v32) & 0xFFFFFFFFFFFFFFF8);
      v55 = (uint8x8_t *)&v57[v33 + v52];
      do
      {
        v56 = *v55++;
        *v51++ = vmovl_u8(v56);
        v54 += 8;
      }
      while (v54);
      result = (uint16x8_t *)((char *)result + 2 * (v31 & 0xFFFFFFFFFFFFFFF8));
      if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    do
    {
LABEL_63:
      result->i16[0] = v57[v29];
      result = (uint16x8_t *)((char *)result + 2);
      v5 = v29++ < 24;
    }
    while (v5);
    return result;
  }
  v12 = 0;
  v13 = 25;
  v14 = 1;
  do
  {
    v15 = v13;
    v16 = v12;
    v17 = v14;
    v57[--v13] = (v11 % 0xA) | 0x30;
    ++v12;
    ++v14;
    v5 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v5);
  if (v15 <= 25)
  {
    v18 = v16 + 1;
    if ((unint64_t)(v16 + 1) < 8)
    {
      v19 = v13;
      v20 = result;
      goto LABEL_60;
    }
    if (v18 >= 0x20)
    {
      v34 = v18 & 0xFFFFFFFFFFFFFFE0;
      v35 = result + 2;
      v36 = v17 & 0xFFFFFFFFFFFFFFE0;
      v37 = (uint8x8_t *)&v57[-v16 + 40];
      do
      {
        v38 = *(uint8x16_t *)v37[-2].i8;
        v39 = vmovl_u8(*v37);
        v40 = vmovl_high_u8(*(uint8x16_t *)v37->i8);
        v35[-2] = vmovl_u8(*(uint8x8_t *)v38.i8);
        v35[-1] = vmovl_high_u8(v38);
        *v35 = v39;
        v35[1] = v40;
        v35 += 4;
        v37 += 4;
        v36 -= 32;
      }
      while (v36);
      if (v18 == v34)
        return result;
      if ((v18 & 0x18) == 0)
      {
        v20 = (uint16x8_t *)((char *)result + 2 * v34);
        v19 = v13 + v34;
        do
        {
LABEL_60:
          v20->i16[0] = v57[v19];
          v20 = (uint16x8_t *)((char *)v20 + 2);
          ++v19;
        }
        while (v19 != 25);
        return result;
      }
    }
    else
    {
      v34 = 0;
    }
    v19 = v13 + (v18 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint16x8_t *)((char *)result + 2 * (v18 & 0xFFFFFFFFFFFFFFF8));
    v41 = v34 - (v17 & 0xFFFFFFFFFFFFFFF8);
    v42 = &v57[v34];
    v43 = (uint16x8_t *)((char *)result + 2 * v34);
    do
    {
      *v43++ = vmovl_u8(*(uint8x8_t *)&v42[v13]);
      v42 += 8;
      v41 += 8;
    }
    while (v41);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_60;
  }
  return result;
}

uint16x8_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, unsigned int *a2, char *a3)
{
  int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint16x8_t *result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint16x8_t *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint16x8_t *v29;
  unint64_t v30;
  uint8x8_t *v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint16x8_t *v37;
  int v38;
  _BYTE v39[13];
  uint64_t v40;

  v5 = 0;
  v40 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  do
  {
    ++v5;
    v7 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v7);
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (!result)
      return result;
    v10 = 0;
    v11 = *a2;
    v12 = 13;
    v13 = 1;
    v14 = *a3;
    v15 = *a2;
    do
    {
      v16 = v12;
      v17 = v10;
      v18 = v13;
      v39[--v12] = (v15 % 0xA) | 0x30;
      ++v10;
      ++v13;
      v7 = v15 > 9;
      v15 /= 0xAu;
    }
    while (v7);
    if (v16 > 13)
      goto LABEL_33;
    v19 = v17 + 1;
    if ((unint64_t)(v17 + 1) < 8)
    {
      v20 = v12;
      v21 = (char *)result;
      goto LABEL_32;
    }
    if (v19 >= 0x20)
    {
      v28 = v19 & 0xFFFFFFFFFFFFFFE0;
      v29 = result + 2;
      v30 = v18 & 0xFFFFFFFFFFFFFFE0;
      v31 = (uint8x8_t *)&v39[-v17 + 28];
      do
      {
        v32 = *(uint8x16_t *)v31[-2].i8;
        v33 = vmovl_u8(*v31);
        v34 = vmovl_high_u8(*(uint8x16_t *)v31->i8);
        v29[-2] = vmovl_u8(*(uint8x8_t *)v32.i8);
        v29[-1] = vmovl_high_u8(v32);
        *v29 = v33;
        v29[1] = v34;
        v29 += 4;
        v31 += 4;
        v30 -= 32;
      }
      while (v30);
      if (v19 == v28)
        goto LABEL_33;
      if ((v19 & 0x18) == 0)
      {
        v21 = &result->i8[2 * v28];
        v20 = v12 + v28;
        do
        {
LABEL_32:
          *(_WORD *)v21 = v39[v20];
          v21 += 2;
          ++v20;
        }
        while (v20 != 13);
LABEL_33:
        v38 = 0;
        do
        {
          ++v38;
          v7 = v11 > 9;
          v11 /= 0xAu;
        }
        while (v7);
        result->i16[v38] = v14;
        return result;
      }
    }
    else
    {
      v28 = 0;
    }
    v20 = v12 + (v19 & 0xFFFFFFFFFFFFFFF8);
    v21 = &result->i8[2 * (v19 & 0xFFFFFFFFFFFFFFF8)];
    v35 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
    v36 = &v39[v28];
    v37 = (uint16x8_t *)((char *)result + 2 * v28);
    do
    {
      *v37++ = vmovl_u8(*(uint8x8_t *)&v36[v12]);
      v36 += 8;
      v35 += 8;
    }
    while (v35);
    if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_33;
    goto LABEL_32;
  }
  result = (uint16x8_t *)MEMORY[0x186DAB068]();
  if (result)
  {
    v22 = result;
    v23 = 0;
    v24 = *a2;
    v25 = *a3;
    v26 = v24;
    do
    {
      v39[v23-- + 12] = (v26 % 0xA) | 0x30;
      v7 = v26 > 9;
      v26 /= 0xAu;
    }
    while (v7);
    if (v23 + 14 <= 13)
      result = (uint16x8_t *)memcpy(result, &v39[v23 + 13], -v23);
    v27 = 0;
    do
    {
      ++v27;
      v7 = v24 > 9;
      v24 /= 0xAu;
    }
    while (v7);
    v22->i8[v27] = v25;
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(WTF::StringBuilder *a1, unint64_t *a2)
{
  uint64_t v3;
  char *result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  __int128 v9;
  char *v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  __int16 v25;
  uint8x8_t *v26;
  uint16x8_t *v27;
  unint64_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint8x8_t *v32;
  uint16x8_t *v33;
  unint64_t v34;
  uint8x8_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 || (v3 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (!result)
      return result;
    v5 = *a2;
    v6 = a2[1];
    v7 = &result[2 * v6];
    if ((v6 & 0xFFFFFFC0) != 0)
    {
      v8 = (unint64_t)&result[2 * (a2[1] & 0xFFFFFFC0)];
      v9 = 0uLL;
      v10 = result;
      do
      {
        v36.val[0] = *(int8x16_t *)v5;
        v11 = *(int8x16_t *)(v5 + 16);
        v37.val[0] = *(int8x16_t *)(v5 + 32);
        v12 = *(_OWORD *)(v5 + 48);
        v5 += 64;
        v13 = v12;
        v37.val[1] = 0uLL;
        v38.val[0] = v11;
        v36.val[1] = 0uLL;
        v14 = v10;
        vst2q_s8(v14, v36);
        v14 += 32;
        v38.val[1] = 0uLL;
        vst2q_s8(v14, v38);
        v15 = v10 + 64;
        vst2q_s8(v15, v37);
        v16 = v10 + 96;
        vst2q_s8(v16, *(int8x16x2_t *)(&v9 - 1));
        v10 += 128;
      }
      while (v10 != (char *)v8);
      if ((char *)v8 == v7)
        return result;
    }
    else
    {
      v8 = (unint64_t)result;
      if (result == v7)
        return result;
    }
    v19 = (unint64_t)&result[2 * v6 - v8 - 2];
    if (v19 < 0xE || (v8 < v5 + (v19 >> 1) + 1 ? (v20 = v5 >= (v19 & 0xFFFFFFFFFFFFFFFELL) + v8 + 2) : (v20 = 1), !v20))
    {
      v23 = (char *)v8;
      v24 = (unsigned __int8 *)v5;
      goto LABEL_25;
    }
    v21 = (v19 >> 1) + 1;
    if (v19 >= 0x3E)
    {
      v22 = v21 & 0xFFFFFFFFFFFFFFE0;
      v26 = (uint8x8_t *)(v5 + 16);
      v27 = (uint16x8_t *)(v8 + 32);
      v28 = v21 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29 = *(uint8x16_t *)v26[-2].i8;
        v30 = vmovl_u8(*v26);
        v31 = vmovl_high_u8(*(uint8x16_t *)v26->i8);
        v27[-2] = vmovl_u8(*(uint8x8_t *)v29.i8);
        v27[-1] = vmovl_high_u8(v29);
        *v27 = v30;
        v27[1] = v31;
        v27 += 4;
        v26 += 4;
        v28 -= 32;
      }
      while (v28);
      if (v21 == v22)
        return result;
      if ((v21 & 0x18) == 0)
      {
        v24 = (unsigned __int8 *)(v5 + v22);
        v23 = (char *)(v8 + 2 * v22);
        goto LABEL_25;
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = (char *)(v8 + 2 * (v21 & 0xFFFFFFFFFFFFFFF8));
    v24 = (unsigned __int8 *)(v5 + (v21 & 0xFFFFFFFFFFFFFFF8));
    v32 = (uint8x8_t *)(v5 + v22);
    v33 = (uint16x8_t *)(v8 + 2 * v22);
    v34 = v22 - (v21 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v35 = *v32++;
      *v33++ = vmovl_u8(v35);
      v34 += 8;
    }
    while (v34);
    if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_25:
      v25 = *v24++;
      *(_WORD *)v23 = v25;
      v23 += 2;
    }
    while (v23 != v7);
    return result;
  }
  result = (char *)MEMORY[0x186DAB068]();
  if (result)
  {
    v17 = a2[1];
    if ((_DWORD)v17)
    {
      v18 = (char *)*a2;
      if ((_DWORD)v17 == 1)
        *result = *v18;
      else
        return (char *)memcpy(result, v18, a2[1]);
    }
  }
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *result;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  int8x16_t *v18;
  size_t v19;
  _BYTE *v20;
  unint64_t v21;
  unsigned __int128 *v22;
  unsigned __int128 v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  _WORD *v43;
  int8x16_t *v44;
  __int16 v45;
  unint64_t v46;
  __int128 v47;
  int8x16_t v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  _WORD *v55;
  unsigned __int8 *v56;
  __int16 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  unint64_t v62;
  _BYTE *v63;
  int8x16_t *v64;
  char v65;
  uint8x8_t *v66;
  uint16x8_t *v67;
  unint64_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint8x8_t *v72;
  uint16x8_t *v73;
  unint64_t v74;
  uint8x8_t v75;
  uint8x8_t *v76;
  uint16x8_t *v77;
  unint64_t v78;
  uint8x16_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint8x8_t *v82;
  uint16x8_t *v83;
  unint64_t v84;
  uint8x8_t v85;
  int8x16_t *v86;
  int8x16_t *v87;
  unint64_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int16x8_t *v93;
  int8x8_t *v94;
  unint64_t v95;
  int16x8_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 1);
  if ((!v6 && (v6 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v6 + 16) & 4) != 0) && (!v5 || (*(_BYTE *)(v5 + 16) & 4) != 0))
  {
    result = (_BYTE *)MEMORY[0x186DAB068]();
    if (!result)
      return result;
    v14 = result;
    v15 = *a2;
    v16 = *(_BYTE **)a3;
    v17 = *(unsigned int *)(a3 + 8);
    if (!v15)
    {
      v38 = 0;
      if (!(_DWORD)v17)
        return result;
LABEL_80:
      result = &v14[v38];
      if ((_DWORD)v17 != 1)
        return memcpy(result, v16, v17);
      *result = *v16;
      return result;
    }
    v18 = *(int8x16_t **)(v15 + 8);
    v19 = *(unsigned int *)(v15 + 4);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 == 1)
          *result = v18->i8[0];
        else
          result = memcpy(result, v18, v19);
      }
    }
    else
    {
      v20 = &result[v19];
      if (v19 < 0x10)
      {
        v21 = (unint64_t)result;
      }
      else
      {
        v21 = (unint64_t)&result[v19 & 0xFFFFFFF0];
        v22 = (unsigned __int128 *)result;
        do
        {
          v23 = (unsigned __int128)vld2q_s8(v18->i8);
          v18 += 2;
          *v22++ = v23;
        }
        while (v22 != (unsigned __int128 *)v21);
      }
      if ((_BYTE *)v21 != v20)
      {
        v60 = (unint64_t)&result[v19 - v21];
        if (v60 < 8
          || (v21 < (unint64_t)v18 + 2 * v60 ? (v61 = v18 >= (int8x16_t *)&result[v19]) : (v61 = 1), !v61))
        {
          v63 = (_BYTE *)v21;
          v64 = v18;
          goto LABEL_68;
        }
        if (v60 >= 0x20)
        {
          v62 = v60 & 0xFFFFFFFFFFFFFFE0;
          v86 = v18 + 2;
          v87 = (int8x16_t *)(v21 + 16);
          v88 = v60 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v90 = v86[-2];
            v89 = v86[-1];
            v92 = *v86;
            v91 = v86[1];
            v86 += 4;
            v87[-1] = vuzp1q_s8(v90, v89);
            *v87 = vuzp1q_s8(v92, v91);
            v87 += 2;
            v88 -= 32;
          }
          while (v88);
          if (v60 == v62)
            goto LABEL_79;
          if ((v60 & 0x18) == 0)
          {
            v64 = (int8x16_t *)((char *)v18 + 2 * v62);
            v63 = (_BYTE *)(v21 + v62);
            do
            {
LABEL_68:
              v65 = v64->i8[0];
              v64 = (int8x16_t *)((char *)v64 + 2);
              *v63++ = v65;
            }
            while (v63 != v20);
            goto LABEL_79;
          }
        }
        else
        {
          v62 = 0;
        }
        v63 = (_BYTE *)(v21 + (v60 & 0xFFFFFFFFFFFFFFF8));
        v64 = (int8x16_t *)((char *)v18 + 2 * (v60 & 0xFFFFFFFFFFFFFFF8));
        v93 = (int16x8_t *)((char *)v18 + 2 * v62);
        v94 = (int8x8_t *)(v21 + v62);
        v95 = v62 - (v60 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v96 = *v93++;
          *v94++ = vmovn_s16(v96);
          v95 += 8;
        }
        while (v95);
        if (v60 != (v60 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_68;
      }
    }
LABEL_79:
    v38 = *(unsigned int *)(v15 + 4);
    if (!(_DWORD)v17)
      return result;
    goto LABEL_80;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result)
    return result;
  v8 = result;
  v9 = *a2;
  v10 = *(_QWORD *)a3;
  v11 = *(unsigned int *)(a3 + 8);
  if (!v9)
  {
    v24 = 0;
    v25 = (unint64_t)result;
    v26 = &result[2 * v11];
    v27 = v11 & 0xFFFFFFC0;
    if ((v11 & 0xFFFFFFC0) != 0)
      goto LABEL_45;
    goto LABEL_48;
  }
  v12 = *(int8x16_t **)(v9 + 8);
  v13 = *(unsigned int *)(v9 + 4);
  if ((*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    v28 = &result[2 * v13];
    if (v13 < 0x40)
    {
      v29 = (unint64_t)result;
      if (result == v28)
        goto LABEL_44;
    }
    else
    {
      v29 = (unint64_t)&result[2 * (v13 & 0xFFFFFFC0)];
      v30 = 0uLL;
      v31 = result;
      do
      {
        v97.val[0] = *v12;
        v32 = v12[1];
        v99.val[0] = v12[2];
        v33 = v12[3];
        v12 += 4;
        v34 = v33;
        v99.val[1] = 0uLL;
        v101.val[0] = v32;
        v97.val[1] = 0uLL;
        v35 = v31;
        vst2q_s8(v35, v97);
        v35 += 32;
        v101.val[1] = 0uLL;
        vst2q_s8(v35, v101);
        v36 = v31 + 64;
        vst2q_s8(v36, v99);
        v37 = v31 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v30 - 1));
        v31 += 128;
      }
      while (v31 != (char *)v29);
      if ((_BYTE *)v29 == v28)
        goto LABEL_44;
    }
    v39 = (unint64_t)&result[2 * v13 - v29 - 2];
    if (v39 < 0xE
      || (v29 < (unint64_t)v12->u64 + (v39 >> 1) + 1
        ? (v40 = (unint64_t)v12 >= (v39 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
        : (v40 = 1),
          !v40))
    {
      v43 = (_WORD *)v29;
      v44 = v12;
      goto LABEL_41;
    }
    v41 = (v39 >> 1) + 1;
    if (v39 >= 0x3E)
    {
      v42 = v41 & 0xFFFFFFFFFFFFFFE0;
      v76 = (uint8x8_t *)&v12[1];
      v77 = (uint16x8_t *)(v29 + 32);
      v78 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v79 = *(uint8x16_t *)v76[-2].i8;
        v80 = vmovl_u8(*v76);
        v81 = vmovl_high_u8(*(uint8x16_t *)v76->i8);
        v77[-2] = vmovl_u8(*(uint8x8_t *)v79.i8);
        v77[-1] = vmovl_high_u8(v79);
        *v77 = v80;
        v77[1] = v81;
        v77 += 4;
        v76 += 4;
        v78 -= 32;
      }
      while (v78);
      if (v41 == v42)
        goto LABEL_44;
      if ((v41 & 0x18) == 0)
      {
        v44 = (int8x16_t *)((char *)v12 + v42);
        v43 = (_WORD *)(v29 + 2 * v42);
        goto LABEL_41;
      }
    }
    else
    {
      v42 = 0;
    }
    v43 = (_WORD *)(v29 + 2 * (v41 & 0xFFFFFFFFFFFFFFF8));
    v44 = (int8x16_t *)((char *)v12 + (v41 & 0xFFFFFFFFFFFFFFF8));
    v82 = (uint8x8_t *)&v12->i8[v42];
    v83 = (uint16x8_t *)(v29 + 2 * v42);
    v84 = v42 - (v41 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v85 = *v82++;
      *v83++ = vmovl_u8(v85);
      v84 += 8;
    }
    while (v84);
    if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_44;
    do
    {
LABEL_41:
      v45 = v44->u8[0];
      v44 = (int8x16_t *)((char *)v44 + 1);
      *v43++ = v45;
    }
    while (v43 != (_WORD *)v28);
    goto LABEL_44;
  }
  if ((_DWORD)v13)
  {
    if ((_DWORD)v13 == 1)
      *(_WORD *)result = v12->i16[0];
    else
      result = memcpy(result, v12, 2 * v13);
  }
LABEL_44:
  v24 = *(unsigned int *)(v9 + 4);
  v25 = (unint64_t)&v8[2 * v24];
  v26 = (_WORD *)(v25 + 2 * v11);
  v27 = v11 & 0xFFFFFFC0;
  if ((v11 & 0xFFFFFFC0) != 0)
  {
LABEL_45:
    v46 = v25 + 2 * v27;
    v47 = 0uLL;
    do
    {
      v98.val[0] = *(int8x16_t *)v10;
      v48 = *(int8x16_t *)(v10 + 16);
      v100.val[0] = *(int8x16_t *)(v10 + 32);
      v49 = *(_OWORD *)(v10 + 48);
      v10 += 64;
      v50 = v49;
      v100.val[1] = 0uLL;
      v102.val[0] = v48;
      v98.val[1] = 0uLL;
      v51 = (char *)v25;
      vst2q_s8(v51, v98);
      v51 += 32;
      v102.val[1] = 0uLL;
      vst2q_s8(v51, v102);
      v52 = (char *)(v25 + 64);
      vst2q_s8(v52, v100);
      v53 = (char *)(v25 + 96);
      vst2q_s8(v53, *(int8x16x2_t *)(&v47 - 1));
      v25 += 128;
    }
    while (v25 != v46);
    v25 = v46;
  }
LABEL_48:
  if ((_WORD *)v25 == v26)
    return result;
  v54 = (unint64_t)&v8[2 * v24 + 2 * v11 - v25 - 2];
  if (v54 < 0xE || v25 < v10 + (v54 >> 1) + 1 && v10 < (v54 & 0xFFFFFFFFFFFFFFFELL) + v25 + 2)
  {
    v55 = (_WORD *)v25;
    v56 = (unsigned __int8 *)v10;
    goto LABEL_53;
  }
  v58 = (v54 >> 1) + 1;
  if (v54 >= 0x3E)
  {
    v59 = v58 & 0xFFFFFFFFFFFFFFE0;
    v66 = (uint8x8_t *)(v10 + 16);
    v67 = (uint16x8_t *)(v25 + 32);
    v68 = v58 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v69 = *(uint8x16_t *)v66[-2].i8;
      v70 = vmovl_u8(*v66);
      v71 = vmovl_high_u8(*(uint8x16_t *)v66->i8);
      v67[-2] = vmovl_u8(*(uint8x8_t *)v69.i8);
      v67[-1] = vmovl_high_u8(v69);
      *v67 = v70;
      v67[1] = v71;
      v67 += 4;
      v66 += 4;
      v68 -= 32;
    }
    while (v68);
    if (v58 == v59)
      return result;
    if ((v58 & 0x18) == 0)
    {
      v56 = (unsigned __int8 *)(v10 + v59);
      v55 = (_WORD *)(v25 + 2 * v59);
      do
      {
LABEL_53:
        v57 = *v56++;
        *v55++ = v57;
      }
      while (v55 != v26);
      return result;
    }
  }
  else
  {
    v59 = 0;
  }
  v55 = (_WORD *)(v25 + 2 * (v58 & 0xFFFFFFFFFFFFFFF8));
  v56 = (unsigned __int8 *)(v10 + (v58 & 0xFFFFFFFFFFFFFFF8));
  v72 = (uint8x8_t *)(v10 + v59);
  v73 = (uint16x8_t *)(v25 + 2 * v59);
  v74 = v59 - (v58 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v75 = *v72++;
    *v73++ = vmovl_u8(v75);
    v74 += 8;
  }
  while (v74);
  if (v58 != (v58 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_53;
  return result;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, _BYTE *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  __int16 v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  __int128 v27;
  int8x16_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  _WORD *v38;
  unsigned __int8 *v39;
  __int16 v40;
  uint8x8_t *v41;
  uint16x8_t *v42;
  unint64_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint8x8_t *v47;
  uint16x8_t *v48;
  unint64_t v49;
  uint8x8_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;

  v7 = *((_QWORD *)a1 + 1);
  if (!v7 && (v7 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    v19 = (_BYTE *)MEMORY[0x186DAB068]();
    if (!v19)
      return;
    v20 = *a3;
    v21 = *(_BYTE **)a4;
    v22 = *(unsigned int *)(a4 + 8);
    *v19 = *a2;
    v23 = v19 + 1;
    v24 = (4 * v20);
    if ((_DWORD)v24)
    {
      memset(v19 + 1, 32, (4 * v20));
      if (!(_DWORD)v22)
        return;
    }
    else
    {
      v24 = 0;
      if (!(_DWORD)v22)
        return;
    }
    v25 = &v23[v24];
    if ((_DWORD)v22 == 1)
      *v25 = *v21;
    else
      memcpy(v25, v21, v22);
    return;
  }
  v8 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!v8)
    return;
  v9 = v8;
  v10 = (char)*a2;
  v11 = *a3;
  v12 = *(_QWORD *)a4;
  v13 = *(unsigned int *)(a4 + 8);
  *v8 = v10;
  v14 = v8 + 1;
  v15 = (4 * v11);
  if ((_DWORD)v15)
  {
    memset_pattern16(v8 + 1, asc_18260FF50, 2 * (4 * v11));
    v16 = (unint64_t)&v14[v15];
    v17 = (_WORD *)(v16 + 2 * v13);
    v18 = v13 & 0xFFFFFFC0;
    if ((v13 & 0xFFFFFFC0) == 0)
      goto LABEL_20;
LABEL_17:
    v26 = v16 + 2 * v18;
    v27 = 0uLL;
    do
    {
      v51.val[0] = *(int8x16_t *)v12;
      v28 = *(int8x16_t *)(v12 + 16);
      v52.val[0] = *(int8x16_t *)(v12 + 32);
      v29 = *(_OWORD *)(v12 + 48);
      v12 += 64;
      v30 = v29;
      v52.val[1] = 0uLL;
      v53.val[0] = v28;
      v51.val[1] = 0uLL;
      v31 = (char *)v16;
      vst2q_s8(v31, v51);
      v31 += 32;
      v53.val[1] = 0uLL;
      vst2q_s8(v31, v53);
      v32 = (char *)(v16 + 64);
      vst2q_s8(v32, v52);
      v33 = (char *)(v16 + 96);
      vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
      v16 += 128;
    }
    while (v16 != v26);
    v16 = v26;
    goto LABEL_20;
  }
  v15 = 0;
  v16 = (unint64_t)(v8 + 1);
  v17 = &v14[v13];
  v18 = v13 & 0xFFFFFFC0;
  if ((v13 & 0xFFFFFFC0) != 0)
    goto LABEL_17;
LABEL_20:
  if ((_WORD *)v16 == v17)
    return;
  v34 = (unint64_t)&v9[v15 + v13] - v16;
  if (v34 < 0xE
    || (v16 < v12 + (v34 >> 1) + 1 ? (v35 = v12 >= (v34 & 0xFFFFFFFFFFFFFFFELL) + v16 + 2) : (v35 = 1), !v35))
  {
    v38 = (_WORD *)v16;
    v39 = (unsigned __int8 *)v12;
    goto LABEL_30;
  }
  v36 = (v34 >> 1) + 1;
  if (v34 >= 0x3E)
  {
    v37 = v36 & 0xFFFFFFFFFFFFFFE0;
    v41 = (uint8x8_t *)(v12 + 16);
    v42 = (uint16x8_t *)(v16 + 32);
    v43 = v36 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v44 = *(uint8x16_t *)v41[-2].i8;
      v45 = vmovl_u8(*v41);
      v46 = vmovl_high_u8(*(uint8x16_t *)v41->i8);
      v42[-2] = vmovl_u8(*(uint8x8_t *)v44.i8);
      v42[-1] = vmovl_high_u8(v44);
      *v42 = v45;
      v42[1] = v46;
      v42 += 4;
      v41 += 4;
      v43 -= 32;
    }
    while (v43);
    if (v36 == v37)
      return;
    if ((v36 & 0x18) == 0)
    {
      v39 = (unsigned __int8 *)(v12 + v37);
      v38 = (_WORD *)(v16 + 2 * v37);
      do
      {
LABEL_30:
        v40 = *v39++;
        *v38++ = v40;
      }
      while (v38 != v17);
      return;
    }
  }
  else
  {
    v37 = 0;
  }
  v38 = (_WORD *)(v16 + 2 * (v36 & 0xFFFFFFFFFFFFFFF8));
  v39 = (unsigned __int8 *)(v12 + (v36 & 0xFFFFFFFFFFFFFFF8));
  v47 = (uint8x8_t *)(v12 + v37);
  v48 = (uint16x8_t *)(v16 + 2 * v37);
  v49 = v37 - (v36 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v50 = *v47++;
    *v48++ = vmovl_u8(v50);
    v49 += 8;
  }
  while (v49);
  if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_30;
}

uint16x8_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint16x8_t *result, _BYTE *a2)
{
  __int16 *v2;
  uint64_t v3;
  WTF::StringBuilder *v4;
  WTF::StringBuilder *v5;
  WTF::StringBuilder *v6;
  WTF::StringBuilder *v7;
  size_t v8;
  uint64_t *v14;
  size_t v15;
  size_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint16x8_t *v25;
  int8x16_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *i8;
  char *v31;
  uint16x8_t *v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t v36;
  __int16 *v37;
  char *v38;
  __int16 v39;
  uint8x8_t *v40;
  uint16x8_t *v41;
  unint64_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint8x8_t *v46;
  uint16x8_t *v47;
  unint64_t v48;
  uint8x8_t v49;
  char *v50;
  int v51;
  char __s[8];
  uint64_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)result->i64[0];
  v2 = *(__int16 **)(result->i64[0] + 8);
  switch(*a2)
  {
    case 0:
      if (*((_DWORD *)v2 + 4) != 5)
        goto LABEL_60;
      v4 = *(WTF::StringBuilder **)(v3 + 40);
      *(_QWORD *)__s = *(_QWORD *)v2;
      return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<long long,void>>(v4, (unint64_t *)__s);
    case 1:
      if (*((_DWORD *)v2 + 4) != 3)
        goto LABEL_60;
      v5 = *(WTF::StringBuilder **)(v3 + 40);
      *(_DWORD *)__s = *(_DWORD *)v2;
      return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(v5, (unsigned int *)__s);
    case 2:
      if (*((_DWORD *)v2 + 4) != 4)
        goto LABEL_60;
      v6 = *(WTF::StringBuilder **)(v3 + 40);
      *(_DWORD *)__s = *(_DWORD *)v2;
      LOBYTE(v50) = 117;
      return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>>(v6, (unsigned int *)__s, (char *)&v50);
    case 3:
      if (*((_DWORD *)v2 + 4) != 2)
        goto LABEL_60;
      WTF::numberToStringWithTrailingPoint();
      v7 = *(WTF::StringBuilder **)(v3 + 40);
      v8 = strlen(__s);
      v50 = __s;
      if (v8 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1824DFAA8);
      }
      goto LABEL_26;
    case 4:
      if (*((_DWORD *)v2 + 4) != 1)
        goto LABEL_60;
      _H0 = *v2;
      __asm { FCVT            D0, H0 }
      WTF::numberToStringWithTrailingPoint();
      v14 = *(uint64_t **)(v3 + 40);
      v15 = strlen(__s);
      if (v15 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1824DFDB0);
      }
      v16 = v15;
      v17 = *((_DWORD *)v14 + 4);
      _CF = __CFADD__(v17, v15 + 1);
      v18 = v17 + v15 + 1;
      if (_CF)
        v19 = 0xFFFFFFFFLL;
      else
        v19 = v18;
      v20 = v14[1];
      if ((v20 || (v20 = *v14) != 0) && (*(_BYTE *)(v20 + 16) & 4) == 0)
      {
        result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v14);
        if (!result)
          return result;
        v21 = &result->i16[v16];
        if ((v16 & 0xFFFFFFC0) != 0)
        {
          v22 = (unint64_t)result + 2 * (v16 & 0xFFFFFFC0);
          v23 = __s;
          v24 = 0uLL;
          v25 = result;
          do
          {
            v54.val[0] = *(int8x16_t *)v23;
            v26 = *((int8x16_t *)v23 + 1);
            v55.val[0] = (int8x16_t)*((_OWORD *)v23 + 2);
            v27 = *((_OWORD *)v23 + 3);
            v23 += 64;
            v28 = v27;
            v55.val[1] = 0uLL;
            v56.val[0] = v26;
            v54.val[1] = 0uLL;
            v29 = (char *)v25;
            vst2q_s8(v29, v54);
            v29 += 32;
            v56.val[1] = 0uLL;
            vst2q_s8(v29, v56);
            i8 = v25[4].i8;
            vst2q_s8(i8, v55);
            v31 = v25[6].i8;
            vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
            v25 += 8;
          }
          while (v25 != (uint16x8_t *)v22);
        }
        else
        {
          v23 = __s;
          v22 = (unint64_t)result;
        }
        if ((__int16 *)v22 == v21)
          goto LABEL_48;
        v33 = (unint64_t)result->u64 + 2 * v16 - v22 - 2;
        if (v33 < 0xE
          || (v22 < (unint64_t)&v23[(v33 >> 1) + 1]
            ? (_CF = (unint64_t)v23 >= (v33 & 0xFFFFFFFFFFFFFFFELL) + v22 + 2)
            : (_CF = 1),
              !_CF))
        {
          v37 = (__int16 *)v22;
          v38 = v23;
          goto LABEL_47;
        }
        v35 = (v33 >> 1) + 1;
        if (v33 >= 0x3E)
        {
          v36 = v35 & 0xFFFFFFFFFFFFFFE0;
          v40 = (uint8x8_t *)(v23 + 16);
          v41 = (uint16x8_t *)(v22 + 32);
          v42 = v35 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v43 = *(uint8x16_t *)v40[-2].i8;
            v44 = vmovl_u8(*v40);
            v45 = vmovl_high_u8(*(uint8x16_t *)v40->i8);
            v41[-2] = vmovl_u8(*(uint8x8_t *)v43.i8);
            v41[-1] = vmovl_high_u8(v43);
            *v41 = v44;
            v41[1] = v45;
            v41 += 4;
            v40 += 4;
            v42 -= 32;
          }
          while (v42);
          if (v35 == v36)
            goto LABEL_48;
          if ((v35 & 0x18) == 0)
          {
            v38 = &v23[v36];
            v37 = (__int16 *)(v22 + 2 * v36);
            do
            {
LABEL_47:
              v39 = *v38++;
              *v37++ = v39;
            }
            while (v37 != v21);
LABEL_48:
            *v21 = 104;
            return result;
          }
        }
        else
        {
          v36 = 0;
        }
        v37 = (__int16 *)(v22 + 2 * (v35 & 0xFFFFFFFFFFFFFFF8));
        v38 = &v23[v35 & 0xFFFFFFFFFFFFFFF8];
        v46 = (uint8x8_t *)&v23[v36];
        v47 = (uint16x8_t *)(v22 + 2 * v36);
        v48 = v36 - (v35 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v49 = *v46++;
          *v47++ = vmovl_u8(v49);
          v48 += 8;
        }
        while (v48);
        if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_48;
        goto LABEL_47;
      }
      result = (uint16x8_t *)MEMORY[0x186DAB068](v14, v19);
      if (result)
      {
        v32 = result;
        if ((_DWORD)v16)
        {
          if ((_DWORD)v16 == 1)
            result->i8[0] = __s[0];
          else
            result = (uint16x8_t *)memcpy(result, __s, v16);
        }
        v32->i8[v16] = 104;
      }
      return result;
    case 5:
      if (*((_DWORD *)v2 + 4))
        goto LABEL_60;
      WTF::numberToStringWithTrailingPoint();
      v7 = *(WTF::StringBuilder **)(v3 + 40);
      v8 = strlen(__s);
      v50 = __s;
      if (v8 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1824DFDD0);
      }
LABEL_26:
      v51 = v8;
      return (uint16x8_t *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v7, (unint64_t *)&v50);
    case 6:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
      goto LABEL_61;
    case 7:
      if (*((_DWORD *)v2 + 4) != 6)
      {
LABEL_60:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x1824DFDF8);
      }
      return (uint16x8_t *)WTF::StringBuilder::append();
    default:
      return result;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BOOL8 v27;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD v48[2];

  v2 = *a1;
  v3 = *(unsigned int ***)(*a1 + 32);
  if (*((_DWORD *)v3 + 4) != 8)
    goto LABEL_38;
  v4 = *(_QWORD **)(v2 + 40);
  v48[0] = **(_QWORD **)(v2 + 48);
  v32 = v4;
  v33 = v48;
  v34 = v4;
  v35 = v4;
  v36 = v4;
  v37 = v4;
  v38 = v4;
  v39 = v4;
  v40 = v4;
  v41 = v4;
  v42 = v4;
  v43 = v4;
  v44 = v4;
  v5 = *(unsigned int *)(v48[0] + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_38;
  v29[0] = &v32;
  ((void (*)(_QWORD *))*(&off_1E0FD6CA0 + v5))(v29);
  v6 = v4[5];
  LOBYTE(v32) = 40;
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 && (v8 = *(unsigned int *)(v6 + 16), v8 < *(_DWORD *)(v7 + 4)) && !*(_QWORD *)v6)
  {
    v23 = *(_DWORD *)(v7 + 16);
    v24 = *(_QWORD *)(v7 + 8);
    *(_DWORD *)(v6 + 16) = v8 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v8) = 40;
    else
      *(_WORD *)(v24 + 2 * v8) = 40;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v9 = *v3;
  v10 = (uint64_t)(*v3 + 2);
  if (*v3)
    v11 = (uint64_t)(*v3 + 2);
  else
    v11 = 0;
  if (v9)
  {
    v12 = v10 + 24 * *v9;
    if (v11 == v12)
      goto LABEL_27;
    goto LABEL_14;
  }
  v12 = 0;
  if (v11)
  {
LABEL_14:
    v13 = *a2;
    v14 = *(unsigned int *)(v11 + 16);
    LOBYTE(v29[0]) = 0;
    v30 = -1;
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD6BF0[v14])(&v32, v29, v11);
      v30 = v14;
    }
    v31 = v13;
    v32 = v4;
    v36 = v29;
    v37 = v4;
    v38 = &v31;
    v39 = v29;
    v40 = v4;
    v41 = &v31;
    v33 = v29;
    v34 = v4;
    v35 = v29;
    v42 = v29;
    v43 = v4;
    v44 = v29;
    v45 = v4;
    v46 = v29;
    v47 = v4;
    v15 = *(unsigned int *)(v13 + 48);
    if ((_DWORD)v15 != -1)
    {
      v48[0] = &v32;
      ((void (*)(_QWORD *, uint64_t))off_1E0FD6D30[v15])(v48, v13);
      if (v30 != -1)
        ((void (*)(_QWORD **, _QWORD *))off_1E0FD6B98[v30])(&v32, v29);
      v30 = -1;
      v16 = v11 + 24;
      if (v16 == v12)
        goto LABEL_27;
      while (1)
      {
        WTF::StringBuilder::append();
        v17 = *a2;
        LOBYTE(v29[0]) = 0;
        v30 = -1;
        v18 = *(unsigned int *)(v16 + 16);
        if ((_DWORD)v18 != -1)
        {
          ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD6BF0[v18])(&v32, v29, v16);
          v30 = v18;
        }
        v31 = v17;
        v32 = v4;
        v36 = v29;
        v37 = v4;
        v38 = &v31;
        v39 = v29;
        v40 = v4;
        v41 = &v31;
        v33 = v29;
        v34 = v4;
        v35 = v29;
        v42 = v29;
        v43 = v4;
        v44 = v29;
        v45 = v4;
        v46 = v29;
        v47 = v4;
        v19 = *(unsigned int *)(v17 + 48);
        if ((_DWORD)v19 == -1)
          break;
        v48[0] = &v32;
        ((void (*)(_QWORD *, uint64_t))off_1E0FD6D30[v19])(v48, v17);
        if (v30 != -1)
          ((void (*)(_QWORD **, _QWORD *))off_1E0FD6B98[v30])(&v32, v29);
        v30 = -1;
        v16 += 24;
        if (v16 == v12)
          goto LABEL_27;
      }
    }
LABEL_38:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v27);
  }
LABEL_27:
  result = v4[5];
  LOBYTE(v32) = 41;
  v21 = *(_QWORD *)(result + 8);
  if (!v21)
    return WTF::StringBuilder::append();
  v22 = *(unsigned int *)(result + 16);
  if (v22 >= *(_DWORD *)(v21 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v25 = *(_DWORD *)(v21 + 16);
  v26 = *(_QWORD *)(v21 + 8);
  *(_DWORD *)(result + 16) = v22 + 1;
  if ((v25 & 4) != 0)
    *(_BYTE *)(v26 + v22) = 41;
  else
    *(_WORD *)(v26 + 2 * v22) = 41;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  WTF::StringBuilder *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned int v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  _WORD *v37;
  unsigned __int8 v38;
  unsigned int v39;
  char *v40;
  int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unint64_t v47;
  uint16x8_t *v48;
  unint64_t v49;
  uint8x8_t *v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t *v54;
  unint64_t v55;
  char *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  _WORD *v68;
  unint64_t v69;
  uint64_t v70;
  _WORD *v71;
  unint64_t v72;
  uint16x8_t *v73;
  unint64_t v74;
  uint8x8_t *v75;
  uint8x16_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t *v79;
  unint64_t v80;
  char *v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *i;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _BOOL8 v97;
  _QWORD v98[2];
  int v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD v117[2];

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (*(_DWORD *)(v2 + 16) != 9)
    goto LABEL_94;
  v4 = *(_QWORD **)(*(_QWORD *)a1 + 88);
  WTF::StringBuilder::append();
  v117[0] = *a2;
  v101 = v4;
  v102 = v117;
  v103 = v4;
  v104 = v4;
  v105 = v4;
  v106 = v4;
  v107 = v4;
  v108 = v4;
  v109 = v4;
  v110 = v4;
  v111 = v4;
  v112 = v4;
  v113 = v4;
  v5 = *(unsigned int *)(v117[0] + 48);
  if ((_DWORD)v5 == -1)
  {
LABEL_94:
    v97 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v97);
  }
  v98[0] = &v101;
  ((void (*)(_QWORD *))*(&off_1E0FD6CA0 + v5))(v98);
  v6 = 0;
  v7 = (WTF::StringBuilder *)v4[5];
  v8 = *((_BYTE *)a2 + 8);
  v9 = *((_BYTE *)a2 + 9);
  v10 = v8;
  do
  {
    ++v6;
    v11 = v10;
    v10 /= 0xAu;
  }
  while (v11 > 9);
  v12 = 0;
  v13 = *((_BYTE *)a2 + 9);
  do
  {
    ++v12;
    v14 = v13;
    v13 /= 0xAu;
  }
  while (v14 > 9);
  v15 = *((_QWORD *)v7 + 1);
  if ((v15 || (v15 = *(_QWORD *)v7) != 0) && (*(_BYTE *)(v15 + 16) & 4) == 0)
  {
    v16 = (_DWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v7);
    if (v16)
    {
      v17 = 0;
      *v16 = 2097196;
      v18 = 4;
      v19 = 1;
      v20 = v8;
      do
      {
        v21 = v18;
        v22 = v17;
        v23 = v19;
        v24 = v20;
        --v18;
        *((_BYTE *)&v101 + v18) = (v20 % 0xAu) | 0x30;
        ++v17;
        ++v19;
        v20 /= 0xAu;
      }
      while (v24 > 9);
      v25 = v16 + 1;
      if (v21 <= 4)
      {
        v26 = v22 + 1;
        if ((unint64_t)(v22 + 1) < 8)
        {
          v27 = v18;
          v28 = v16 + 1;
          goto LABEL_47;
        }
        if (v26 >= 0x20)
        {
          v47 = v26 & 0xFFFFFFFFFFFFFFE0;
          v48 = (uint16x8_t *)(v16 + 9);
          v49 = v23 & 0xFFFFFFFFFFFFFFE0;
          v50 = (uint8x8_t *)((char *)&v101 - v22 + 19);
          do
          {
            v51 = *(uint8x16_t *)v50[-2].i8;
            v52 = vmovl_u8(*v50);
            v53 = vmovl_high_u8(*(uint8x16_t *)v50->i8);
            v48[-2] = vmovl_u8(*(uint8x8_t *)v51.i8);
            v48[-1] = vmovl_high_u8(v51);
            *v48 = v52;
            v48[1] = v53;
            v48 += 4;
            v50 += 4;
            v49 -= 32;
          }
          while (v49);
          if (v26 == v47)
            goto LABEL_48;
          if ((v26 & 0x18) == 0)
          {
            v28 = (_WORD *)v25 + v47;
            v27 = v18 + v47;
            do
LABEL_47:
              *v28++ = *((unsigned __int8 *)&v101 + v27++);
            while (v27 != 4);
            goto LABEL_48;
          }
        }
        else
        {
          v47 = 0;
        }
        v27 = v18 + (v26 & 0xFFFFFFFFFFFFFFF8);
        v28 = (_WORD *)v25 + (v26 & 0xFFFFFFFFFFFFFFF8);
        v54 = (uint16x8_t *)((char *)v16 + 2 * v47 + 4);
        v55 = v47 - (v23 & 0xFFFFFFFFFFFFFFF8);
        v56 = (char *)&v101 + v47;
        do
        {
          *v54++ = vmovl_u8(*(uint8x8_t *)&v56[v18]);
          v56 += 8;
          v55 += 8;
        }
        while (v55);
        if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_47;
      }
LABEL_48:
      v57 = 0;
      do
      {
        ++v57;
        v58 = v8;
        v8 /= 0xAu;
      }
      while (v58 > 9);
      v59 = 0;
      v60 = (_DWORD *)((char *)v25 + 2 * v57);
      *v60 = 2097196;
      v61 = 4;
      v62 = 1;
      v63 = v9;
      do
      {
        v64 = v61;
        v65 = v59;
        v66 = v62;
        v67 = v63;
        --v61;
        *((_BYTE *)&v101 + v61) = (v63 % 0xAu) | 0x30;
        ++v59;
        ++v62;
        v63 /= 0xAu;
      }
      while (v67 > 9);
      v68 = v60 + 1;
      if (v64 <= 4)
      {
        v69 = v65 + 1;
        if ((unint64_t)(v65 + 1) < 8)
        {
          v70 = v61;
          v71 = v68;
          goto LABEL_66;
        }
        if (v69 >= 0x20)
        {
          v72 = v69 & 0xFFFFFFFFFFFFFFE0;
          v73 = (uint16x8_t *)((char *)v16 + 2 * v57 + 40);
          v74 = v66 & 0xFFFFFFFFFFFFFFE0;
          v75 = (uint8x8_t *)((char *)&v101 - v65 + 19);
          do
          {
            v76 = *(uint8x16_t *)v75[-2].i8;
            v77 = vmovl_u8(*v75);
            v78 = vmovl_high_u8(*(uint8x16_t *)v75->i8);
            v73[-2] = vmovl_u8(*(uint8x8_t *)v76.i8);
            v73[-1] = vmovl_high_u8(v76);
            *v73 = v77;
            v73[1] = v78;
            v73 += 4;
            v75 += 4;
            v74 -= 32;
          }
          while (v74);
          if (v69 == v72)
            goto LABEL_67;
          if ((v69 & 0x18) == 0)
          {
            v71 = &v68[v72];
            v70 = v61 + v72;
            do
LABEL_66:
              *v71++ = *((unsigned __int8 *)&v101 + v70++);
            while (v70 != 4);
            goto LABEL_67;
          }
        }
        else
        {
          v72 = 0;
        }
        v70 = v61 + (v69 & 0xFFFFFFFFFFFFFFF8);
        v71 = &v68[v69 & 0xFFFFFFFFFFFFFFF8];
        v79 = (uint16x8_t *)((char *)v16 + 2 * v72 + 2 * v57 + 8);
        v80 = v72 - (v66 & 0xFFFFFFFFFFFFFFF8);
        v81 = (char *)&v101 + v72;
        do
        {
          *v79++ = vmovl_u8(*(uint8x8_t *)&v81[v61]);
          v81 += 8;
          v80 += 8;
        }
        while (v80);
        if (v69 != (v69 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_66;
      }
LABEL_67:
      v82 = 0;
      do
      {
        ++v82;
        v83 = v9;
        v9 /= 0xAu;
      }
      while (v83 > 9);
      *(_DWORD *)&v68[v82] = 2621502;
      v43 = *(unsigned int **)(v2 + 8);
      v44 = v43 + 2;
      if (v43)
        v45 = v43 + 2;
      else
        v45 = 0;
      if (!v43)
        goto LABEL_73;
LABEL_34:
      v46 = &v44[6 * *v43];
      if (v45 == v46)
        goto LABEL_87;
      goto LABEL_74;
    }
  }
  else
  {
    v29 = (_WORD *)MEMORY[0x186DAB068]();
    if (v29)
    {
      v30 = 0;
      *v29 = 8236;
      v31 = v8;
      do
      {
        v32 = v31;
        *((_BYTE *)&v101 + v30-- + 3) = (v31 % 0xAu) | 0x30;
        v31 /= 0xAu;
      }
      while (v32 > 9);
      v33 = v29 + 1;
      if (v30 + 5 <= 4)
        memcpy(v29 + 1, (char *)&v101 + v30 + 4, -v30);
      v34 = 0;
      do
      {
        ++v34;
        v35 = v8;
        v8 /= 0xAu;
      }
      while (v35 > 9);
      v36 = 0;
      v37 = (_WORD *)((char *)v33 + v34);
      *v37 = 8236;
      v38 = v9;
      do
      {
        v39 = v38;
        *((_BYTE *)&v101 + v36-- + 3) = (v38 % 0xAu) | 0x30;
        v38 /= 0xAu;
      }
      while (v39 > 9);
      v40 = (char *)(v37 + 1);
      if (v36 + 5 <= 4)
        memcpy(v40, (char *)&v101 + v36 + 4, -v36);
      v41 = 0;
      do
      {
        ++v41;
        v42 = v9;
        v9 /= 0xAu;
      }
      while (v42 > 9);
      *(_WORD *)&v40[v41] = 10302;
    }
  }
  v43 = *(unsigned int **)(v2 + 8);
  v44 = v43 + 2;
  if (v43)
    v45 = v43 + 2;
  else
    v45 = 0;
  if (v43)
    goto LABEL_34;
LABEL_73:
  v46 = 0;
  if (!v45)
    goto LABEL_87;
LABEL_74:
  v84 = *a2;
  v85 = v45[4];
  LOBYTE(v98[0]) = 0;
  v99 = -1;
  if ((_DWORD)v85 != -1)
  {
    ((void (*)(_QWORD **, _QWORD *, unsigned int *))off_1E0FD6BF0[v85])(&v101, v98, v45);
    v99 = v85;
  }
  v100 = v84;
  v101 = v4;
  v105 = v98;
  v106 = v4;
  v107 = &v100;
  v108 = v98;
  v109 = v4;
  v110 = &v100;
  v102 = v98;
  v103 = v4;
  v104 = v98;
  v111 = v98;
  v112 = v4;
  v113 = v98;
  v114 = v4;
  v115 = v98;
  v116 = v4;
  v86 = *(unsigned int *)(v84 + 48);
  if ((_DWORD)v86 == -1)
    goto LABEL_94;
  v117[0] = &v101;
  ((void (*)(_QWORD *, uint64_t))off_1E0FD6D30[v86])(v117, v84);
  if (v99 != -1)
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD6B98[v99])(&v101, v98);
  v99 = -1;
  for (i = v45 + 6; i != v46; i += 6)
  {
    WTF::StringBuilder::append();
    v88 = a2;
    v89 = *a2;
    LOBYTE(v98[0]) = 0;
    v99 = -1;
    v90 = i[4];
    if ((_DWORD)v90 != -1)
    {
      ((void (*)(_QWORD **, _QWORD *, unsigned int *))off_1E0FD6BF0[v90])(&v101, v98, i);
      v99 = v90;
    }
    v100 = v89;
    v101 = v4;
    v105 = v98;
    v106 = v4;
    v107 = &v100;
    v108 = v98;
    v109 = v4;
    v110 = &v100;
    v102 = v98;
    v103 = v4;
    v104 = v98;
    v111 = v98;
    v112 = v4;
    v113 = v98;
    v114 = v4;
    v115 = v98;
    v116 = v4;
    v91 = *(unsigned int *)(v89 + 48);
    if ((_DWORD)v91 == -1)
      goto LABEL_94;
    a2 = v88;
    v117[0] = &v101;
    ((void (*)(_QWORD *, uint64_t))off_1E0FD6D30[v91])(v117, v89);
    if (v99 != -1)
      ((void (*)(_QWORD **, _QWORD *))off_1E0FD6B98[v99])(&v101, v98);
    v99 = -1;
  }
LABEL_87:
  result = v4[5];
  LOBYTE(v101) = 41;
  v93 = *(_QWORD *)(result + 8);
  if (!v93)
    return WTF::StringBuilder::append();
  v94 = *(unsigned int *)(result + 16);
  if (v94 >= *(_DWORD *)(v93 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v95 = *(_DWORD *)(v93 + 16);
  v96 = *(_QWORD *)(v93 + 8);
  *(_DWORD *)(result + 16) = v94 + 1;
  if ((v95 & 4) != 0)
    *(_BYTE *)(v96 + v94) = 41;
  else
    *(_WORD *)(v96 + 2 * v94) = 41;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BOOL8 v27;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD v48[2];

  v2 = *a1;
  v3 = *(unsigned int ***)(*a1 + 56);
  if (*((_DWORD *)v3 + 4) != 7)
    goto LABEL_38;
  v4 = *(_QWORD **)(v2 + 64);
  v48[0] = **(_QWORD **)(v2 + 72);
  v32 = v4;
  v33 = v48;
  v34 = v4;
  v35 = v4;
  v36 = v4;
  v37 = v4;
  v38 = v4;
  v39 = v4;
  v40 = v4;
  v41 = v4;
  v42 = v4;
  v43 = v4;
  v44 = v4;
  v5 = *(unsigned int *)(v48[0] + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_38;
  v29[0] = &v32;
  ((void (*)(_QWORD *))*(&off_1E0FD6CA0 + v5))(v29);
  v6 = v4[5];
  LOBYTE(v32) = 123;
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 && (v8 = *(unsigned int *)(v6 + 16), v8 < *(_DWORD *)(v7 + 4)) && !*(_QWORD *)v6)
  {
    v23 = *(_DWORD *)(v7 + 16);
    v24 = *(_QWORD *)(v7 + 8);
    *(_DWORD *)(v6 + 16) = v8 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v8) = 123;
    else
      *(_WORD *)(v24 + 2 * v8) = 123;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v9 = *v3;
  v10 = (uint64_t)(*v3 + 2);
  if (*v3)
    v11 = (uint64_t)(*v3 + 2);
  else
    v11 = 0;
  if (v9)
  {
    v12 = v10 + 24 * *v9;
    if (v11 == v12)
      goto LABEL_27;
    goto LABEL_14;
  }
  v12 = 0;
  if (v11)
  {
LABEL_14:
    v13 = *a2;
    v14 = *(unsigned int *)(v11 + 16);
    LOBYTE(v29[0]) = 0;
    v30 = -1;
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD6BF0[v14])(&v32, v29, v11);
      v30 = v14;
    }
    v31 = v13;
    v32 = v4;
    v36 = v29;
    v37 = v4;
    v38 = &v31;
    v39 = v29;
    v40 = v4;
    v41 = &v31;
    v33 = v29;
    v34 = v4;
    v35 = v29;
    v42 = v29;
    v43 = v4;
    v44 = v29;
    v45 = v4;
    v46 = v29;
    v47 = v4;
    v15 = *(unsigned int *)(v13 + 48);
    if ((_DWORD)v15 != -1)
    {
      v48[0] = &v32;
      ((void (*)(_QWORD *, uint64_t))off_1E0FD6D30[v15])(v48, v13);
      if (v30 != -1)
        ((void (*)(_QWORD **, _QWORD *))off_1E0FD6B98[v30])(&v32, v29);
      v30 = -1;
      v16 = v11 + 24;
      if (v16 == v12)
        goto LABEL_27;
      while (1)
      {
        WTF::StringBuilder::append();
        v17 = *a2;
        LOBYTE(v29[0]) = 0;
        v30 = -1;
        v18 = *(unsigned int *)(v16 + 16);
        if ((_DWORD)v18 != -1)
        {
          ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD6BF0[v18])(&v32, v29, v16);
          v30 = v18;
        }
        v31 = v17;
        v32 = v4;
        v36 = v29;
        v37 = v4;
        v38 = &v31;
        v39 = v29;
        v40 = v4;
        v41 = &v31;
        v33 = v29;
        v34 = v4;
        v35 = v29;
        v42 = v29;
        v43 = v4;
        v44 = v29;
        v45 = v4;
        v46 = v29;
        v47 = v4;
        v19 = *(unsigned int *)(v17 + 48);
        if ((_DWORD)v19 == -1)
          break;
        v48[0] = &v32;
        ((void (*)(_QWORD *, uint64_t))off_1E0FD6D30[v19])(v48, v17);
        if (v30 != -1)
          ((void (*)(_QWORD **, _QWORD *))off_1E0FD6B98[v30])(&v32, v29);
        v30 = -1;
        v16 += 24;
        if (v16 == v12)
          goto LABEL_27;
      }
    }
LABEL_38:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v27);
  }
LABEL_27:
  result = v4[5];
  LOBYTE(v32) = 125;
  v21 = *(_QWORD *)(result + 8);
  if (!v21)
    return WTF::StringBuilder::append();
  v22 = *(unsigned int *)(result + 16);
  if (v22 >= *(_DWORD *)(v21 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v25 = *(_DWORD *)(v21 + 16);
  v26 = *(_QWORD *)(v21 + 8);
  *(_DWORD *)(result + 16) = v22 + 1;
  if ((v25 & 4) != 0)
    *(_BYTE *)(v26 + v22) = 125;
  else
    *(_WORD *)(v26 + 2 * v22) = 125;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF::StringBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int128 v8;
  _WORD *v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  int8x16_t *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  unsigned __int128 *v21;
  _WORD *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  unsigned __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  _WORD *v35;
  int8x16_t *v36;
  __int16 v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int8x16_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringBuilder *v46;
  uint64_t v47;
  _WORD *v48;
  size_t v49;
  char *v50;
  int8x16_t *v51;
  uint64_t v52;
  _WORD *v53;
  unint64_t v54;
  char *v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  unsigned __int128 v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  int8x16_t *v69;
  unint64_t v70;
  unsigned __int128 *v71;
  unsigned __int128 v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  int8x16_t *v80;
  __int16 v81;
  char *v82;
  uint64_t v83;
  unsigned int v84;
  WTF::StringImpl *v85;
  unsigned int v86;
  int v87;
  int j;
  uint64_t v89;
  WTF *v90;
  size_t v91;
  unint64_t v92;
  BOOL v93;
  unint64_t v94;
  _BYTE *v95;
  int8x16_t *v96;
  char v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  WTF::StringImpl *v101;
  unsigned int v102;
  int v103;
  int i;
  uint64_t v105;
  WTF *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint8x8_t *v110;
  uint16x8_t *v111;
  unint64_t v112;
  uint8x16_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint8x8_t *v116;
  uint16x8_t *v117;
  unint64_t v118;
  uint8x8_t v119;
  int8x16_t *v120;
  int8x16_t *v121;
  unint64_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int16x8_t *v127;
  int8x8_t *v128;
  unint64_t v129;
  int16x8_t v130;
  unint64_t v131;
  BOOL v132;
  unint64_t v133;
  _BYTE *v134;
  int8x16_t *v135;
  char v136;
  _BYTE *v137;
  uint8x8_t *v139;
  uint16x8_t *v140;
  unint64_t v141;
  uint8x16_t v142;
  uint16x8_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint8x8_t *v146;
  unsigned __int128 *v147;
  unint64_t v148;
  uint8x8_t v149;
  int8x16_t *v150;
  int8x16_t *v151;
  unint64_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int16x8_t *v157;
  _QWORD *v158;
  unint64_t v159;
  int16x8_t v160;
  _BOOL8 v161;
  uint64_t *v162;
  uint64_t *v163;
  unsigned __int128 v164;
  int8x16_t v165;
  _DWORD v166[4];
  int v167;
  uint64_t v168;
  _QWORD v169[16];
  _QWORD *v170;
  int8x16x2_t v171;
  int8x16x2_t v172;
  int8x16x2_t v173;
  int8x16x2_t v174;
  int8x16x2_t v175;
  int8x16x2_t v176;

  v163 = *(uint64_t **)(*(_QWORD *)a1 + 96);
  if (*((_DWORD *)v163 + 4) == 10)
  {
    v2 = a2;
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 104);
    v4 = *(WTF::StringBuilder **)(v3 + 40);
    v5 = *(_QWORD *)(*a2 + 48);
    if (v5)
    {
      v6 = *((_QWORD *)v4 + 1);
      if (!v6)
      {
LABEL_6:
        v6 = *(_QWORD *)v4;
        if (!*(_QWORD *)v4)
          goto LABEL_11;
      }
    }
    else
    {
      v6 = *((_QWORD *)v4 + 1);
      if (!v6)
        goto LABEL_6;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      v7 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v4);
      if (!v7)
        goto LABEL_49;
      v9 = (_WORD *)v7;
      if (!v5)
      {
        v10 = 0;
LABEL_48:
        v38 = &v9[v10];
        *(_DWORD *)v38 = 8060960;
        v38[2] = 32;
LABEL_49:
        v39 = *v2;
        v40 = *(unsigned int *)(*v2 + 84);
        if ((_DWORD)v40)
        {
LABEL_50:
          v41 = *(uint64_t **)(v39 + 72);
          v162 = &v41[v40];
          v42 = 0uLL;
          v43 = v2;
          while (1)
          {
            v44 = *v41;
            v45 = *(_QWORD *)(*v41 + 48);
            v46 = *(WTF::StringBuilder **)(v3 + 40);
            v47 = *((_QWORD *)v46 + 1);
            v164 = v8;
            v165 = v42;
            if ((v47 || (v47 = *(_QWORD *)v46) != 0) && (*(_BYTE *)(v47 + 16) & 4) == 0)
            {
              v48 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v46);
              if (v48)
              {
                *v48 = 46;
                v50 = (char *)(v48 + 1);
                if (v45)
                {
                  v51 = *(int8x16_t **)(v45 + 8);
                  v52 = *(unsigned int *)(v45 + 4);
                  if ((*(_BYTE *)(v45 + 16) & 4) != 0)
                    goto LABEL_65;
                  goto LABEL_58;
                }
                v74 = 0;
LABEL_97:
                v82 = &v50[2 * v74];
                *(_DWORD *)v82 = 3997728;
                *((_WORD *)v82 + 2) = 32;
              }
              goto LABEL_98;
            }
            if (v45)
              break;
            v64 = (_BYTE *)MEMORY[0x186DAB068]();
            if (!v64)
              goto LABEL_98;
            v65 = v64;
            v66 = 0;
            *v64 = 46;
LABEL_123:
            v98 = &v65[v66];
            v98[3] = 32;
            *(_WORD *)(v98 + 1) = 15648;
            v83 = v2[1];
            if (v83)
              goto LABEL_99;
LABEL_124:
            v99 = *v163;
            if (*v163)
            {
              v100 = *(_DWORD *)(v99 - 8);
              v101 = *(WTF::StringImpl **)(v44 + 80);
              v102 = *((_DWORD *)v101 + 4);
              if (v102 < 0x100)
                v103 = WTF::StringImpl::hashSlowCase(v101);
              else
                v103 = v102 >> 8;
              for (i = 0; ; v103 = i + v105)
              {
                v105 = v103 & v100;
                v106 = *(WTF **)(v99 + 32 * v105);
                if (v106 != (WTF *)-1)
                {
                  if (!v106)
                    goto LABEL_135;
                  if ((WTF::equal(v106, *(const WTF::StringImpl **)(v44 + 80), (const WTF::StringImpl *)v49) & 1) != 0)
                    break;
                }
                ++i;
              }
              v107 = v99 + 32 * v105;
              LOBYTE(v166[0]) = 0;
              v167 = -1;
              v108 = *(unsigned int *)(v107 + 24);
              if ((_DWORD)v108 == -1)
                goto LABEL_137;
              ((void (*)(_QWORD *, _DWORD *, uint64_t))off_1E0FD6BF0[v108])(v169, v166, v107 + 8);
            }
            else
            {
LABEL_135:
              LODWORD(v108) = 0;
              v166[0] = 0;
            }
            v167 = v108;
LABEL_137:
            v168 = v83;
            v169[0] = v3;
            v169[4] = v166;
            v169[5] = v3;
            v169[6] = &v168;
            v169[7] = v166;
            v169[8] = v3;
            v169[9] = &v168;
            v169[1] = v166;
            v169[2] = v3;
            v169[3] = v166;
            v169[10] = v166;
            v169[11] = v3;
            v169[12] = v166;
            v169[13] = v3;
            v169[14] = v166;
            v169[15] = v3;
            v109 = *(unsigned int *)(v83 + 48);
            if ((_DWORD)v109 == -1)
              goto LABEL_193;
            v170 = v169;
            ((void (*)(_QWORD **, uint64_t))off_1E0FD6D30[v109])(&v170, v83);
            v2 = v43;
            if (v167 != -1)
              ((void (*)(_QWORD *, _DWORD *))off_1E0FD6B98[v167])(v169, v166);
            v167 = -1;
            WTF::StringBuilder::append();
            ++v41;
            v8 = v164;
            v42 = v165;
            if (v41 == v162)
              return WTF::StringBuilder::append();
          }
          if ((*(_BYTE *)(v45 + 16) & 4) == 0)
          {
            v53 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v46);
            if (v53)
            {
              *v53 = 46;
              v50 = (char *)(v53 + 1);
              v51 = *(int8x16_t **)(v45 + 8);
              v52 = *(unsigned int *)(v45 + 4);
              if ((*(_BYTE *)(v45 + 16) & 4) != 0)
              {
LABEL_65:
                if (v52 < 0x40)
                {
                  v54 = (unint64_t)v50;
                  v63 = &v50[2 * v52];
                  if (v50 == v63)
                    goto LABEL_96;
                }
                else
                {
                  v54 = (unint64_t)&v50[2 * (v52 & 0xFFFFFFC0)];
                  v55 = v50;
                  v56 = v165;
                  do
                  {
                    v171.val[0] = *v51;
                    v57 = v51[1];
                    v173.val[0] = v51[2];
                    v58 = v51[3];
                    v51 += 4;
                    v59 = (unsigned __int128)v58;
                    v173.val[1] = v165;
                    v175.val[0] = v57;
                    v171.val[1] = v165;
                    v60 = v55;
                    vst2q_s8(v60, v171);
                    v60 += 32;
                    v175.val[1] = v165;
                    vst2q_s8(v60, v175);
                    v61 = v55 + 64;
                    vst2q_s8(v61, v173);
                    v62 = v55 + 96;
                    vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
                    v55 += 128;
                  }
                  while (v55 != (char *)v54);
                  v164 = v59;
                  v63 = &v50[2 * v52];
                  if ((char *)v54 == v63)
                    goto LABEL_96;
                }
                v75 = (unint64_t)&v50[2 * v52 - v54 - 2];
                if (v75 < 0xE
                  || (v54 < (unint64_t)v51->u64 + (v75 >> 1) + 1
                    ? (v76 = (unint64_t)v51 >= v54 + (v75 & 0xFFFFFFFFFFFFFFFELL) + 2)
                    : (v76 = 1),
                      !v76))
                {
                  v79 = (char *)v54;
                  v80 = v51;
                  goto LABEL_90;
                }
                v77 = (v75 >> 1) + 1;
                if (v75 < 0x3E)
                {
                  v78 = 0;
                  goto LABEL_144;
                }
                v78 = v77 & 0xFFFFFFFFFFFFFFE0;
                v110 = (uint8x8_t *)&v51[1];
                v111 = (uint16x8_t *)(v54 + 32);
                v112 = v77 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v113 = *(uint8x16_t *)v110[-2].i8;
                  v114 = vmovl_u8(*v110);
                  v115 = vmovl_high_u8(*(uint8x16_t *)v110->i8);
                  v111[-2] = vmovl_u8(*(uint8x8_t *)v113.i8);
                  v111[-1] = vmovl_high_u8(v113);
                  *v111 = v114;
                  v111[1] = v115;
                  v111 += 4;
                  v110 += 4;
                  v112 -= 32;
                }
                while (v112);
                if (v77 == v78)
                  goto LABEL_96;
                if ((v77 & 0x18) != 0)
                {
LABEL_144:
                  v79 = (char *)(v54 + 2 * (v77 & 0xFFFFFFFFFFFFFFF8));
                  v80 = (int8x16_t *)((char *)v51 + (v77 & 0xFFFFFFFFFFFFFFF8));
                  v116 = (uint8x8_t *)&v51->i8[v78];
                  v117 = (uint16x8_t *)(v54 + 2 * v78);
                  v118 = v78 - (v77 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v119 = *v116++;
                    *v117++ = vmovl_u8(v119);
                    v118 += 8;
                  }
                  while (v118);
                  if (v77 == (v77 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_96;
                }
                else
                {
                  v80 = (int8x16_t *)((char *)v51 + v78);
                  v79 = (char *)(v54 + 2 * v78);
                }
                do
                {
LABEL_90:
                  v81 = v80->u8[0];
                  v80 = (int8x16_t *)((char *)v80 + 1);
                  *(_WORD *)v79 = v81;
                  v79 += 2;
                }
                while (v79 != v63);
                goto LABEL_96;
              }
LABEL_58:
              if ((_DWORD)v52)
              {
                if ((_DWORD)v52 == 1)
                  *(_WORD *)v50 = v51->i16[0];
                else
                  memcpy(v50, v51, 2 * v52);
              }
LABEL_96:
              v74 = *(unsigned int *)(v45 + 4);
              goto LABEL_97;
            }
LABEL_98:
            v83 = v2[1];
            if (!v83)
              goto LABEL_124;
LABEL_99:
            v84 = *(_DWORD *)(v83 - 8);
            v85 = *(WTF::StringImpl **)(v44 + 80);
            v86 = *((_DWORD *)v85 + 4);
            if (v86 < 0x100)
              v87 = WTF::StringImpl::hashSlowCase(v85);
            else
              v87 = v86 >> 8;
            for (j = 0; ; v87 = j + v89)
            {
              v89 = v87 & v84;
              v90 = *(WTF **)(v83 + 16 * v89);
              if (v90 != (WTF *)-1)
              {
                if (!v90)
                {
                  v83 = 0;
                  goto LABEL_124;
                }
                if ((WTF::equal(v90, *(const WTF::StringImpl **)(v44 + 80), (const WTF::StringImpl *)v49) & 1) != 0)
                {
                  v83 = *(_QWORD *)(v83 + 16 * v89 + 8);
                  goto LABEL_124;
                }
              }
              ++j;
            }
          }
          v67 = (_BYTE *)MEMORY[0x186DAB068]();
          if (!v67)
            goto LABEL_98;
          v65 = v67;
          *v67 = 46;
          v68 = v67 + 1;
          v69 = *(int8x16_t **)(v45 + 8);
          v49 = *(unsigned int *)(v45 + 4);
          if ((*(_BYTE *)(v45 + 16) & 4) != 0)
          {
            if ((_DWORD)v49)
            {
              if ((_DWORD)v49 == 1)
                *v68 = v69->i8[0];
              else
                memcpy(v68, v69, v49);
            }
            goto LABEL_122;
          }
          if (v49 < 0x10)
          {
            v70 = (unint64_t)v68;
            v73 = &v68[v49];
            if (v68 == &v68[v49])
            {
LABEL_122:
              v66 = *(unsigned int *)(v45 + 4);
              goto LABEL_123;
            }
          }
          else
          {
            v70 = (unint64_t)&v68[v49 & 0xFFFFFFF0];
            v71 = (unsigned __int128 *)v68;
            do
            {
              v72 = (unsigned __int128)vld2q_s8(v69->i8);
              v69 += 2;
              *v71++ = v72;
            }
            while (v71 != (unsigned __int128 *)v70);
            v73 = &v68[v49];
            if ((_BYTE *)v70 == &v68[v49])
              goto LABEL_122;
          }
          v91 = (size_t)&v65[v49 - v70];
          v92 = v91 + 1;
          if (v91 + 1 < 8
            || (v70 < (unint64_t)v69->u64 + 2 * v91 + 2 ? (v93 = v69 >= (int8x16_t *)&v65[v49 + 1]) : (v93 = 1),
                !v93))
          {
            v95 = (_BYTE *)v70;
            v96 = v69;
            goto LABEL_119;
          }
          if (v92 >= 0x20)
          {
            v94 = v92 & 0xFFFFFFFFFFFFFFE0;
            v120 = v69 + 2;
            v121 = (int8x16_t *)(v70 + 16);
            v122 = v92 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v124 = v120[-2];
              v123 = v120[-1];
              v126 = *v120;
              v125 = v120[1];
              v120 += 4;
              v121[-1] = vuzp1q_s8(v124, v123);
              *v121 = vuzp1q_s8(v126, v125);
              v121 += 2;
              v122 -= 32;
            }
            while (v122);
            if (v92 == v94)
              goto LABEL_122;
            if ((v92 & 0x18) == 0)
            {
              v96 = (int8x16_t *)((char *)v69 + 2 * v94);
              v95 = (_BYTE *)(v70 + v94);
              do
              {
LABEL_119:
                v97 = v96->i8[0];
                v96 = (int8x16_t *)((char *)v96 + 2);
                *v95++ = v97;
              }
              while (v95 != v73);
              goto LABEL_122;
            }
          }
          else
          {
            v94 = 0;
          }
          v95 = (_BYTE *)(v70 + (v92 & 0xFFFFFFFFFFFFFFF8));
          v96 = (int8x16_t *)((char *)v69 + 2 * (v92 & 0xFFFFFFFFFFFFFFF8));
          v127 = (int16x8_t *)((char *)v69 + 2 * v94);
          v128 = (int8x8_t *)(v70 + v94);
          v129 = v94 - (v92 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v130 = *v127++;
            *v128++ = vmovn_s16(v130);
            v129 += 8;
          }
          while (v129);
          if (v92 == (v92 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_122;
          goto LABEL_119;
        }
        return WTF::StringBuilder::append();
      }
LABEL_14:
      v11 = *(int8x16_t **)(v5 + 8);
      v12 = *(unsigned int *)(v5 + 4);
      if ((*(_BYTE *)(v5 + 16) & 4) == 0)
      {
        if ((_DWORD)v12)
        {
          if ((_DWORD)v12 == 1)
            *v9 = v11->i16[0];
          else
            memcpy(v9, v11, 2 * v12);
        }
        goto LABEL_47;
      }
      v22 = &v9[v12];
      if (v12 < 0x40)
      {
        v23 = (unint64_t)v9;
        if (v9 == v22)
        {
LABEL_47:
          v10 = *(unsigned int *)(v5 + 4);
          goto LABEL_48;
        }
      }
      else
      {
        v23 = (unint64_t)&v9[v12 & 0xFFFFFFC0];
        v24 = 0uLL;
        v25 = (char *)v9;
        do
        {
          v172.val[0] = *v11;
          v26 = v11[1];
          v174.val[0] = v11[2];
          v27 = (unsigned __int128)v11[3];
          v11 += 4;
          v8 = v27;
          v174.val[1] = 0uLL;
          v176.val[0] = v26;
          v172.val[1] = 0uLL;
          v28 = v25;
          vst2q_s8(v28, v172);
          v28 += 32;
          v176.val[1] = 0uLL;
          vst2q_s8(v28, v176);
          v29 = v25 + 64;
          vst2q_s8(v29, v174);
          v30 = v25 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)&v8);
          v25 += 128;
        }
        while (v25 != (char *)v23);
        if ((_WORD *)v23 == v22)
          goto LABEL_47;
      }
      v31 = (unint64_t)&v9[v12 - 1] - v23;
      if (v31 < 0xE
        || (v23 < (unint64_t)v11->u64 + (v31 >> 1) + 1
          ? (v32 = (unint64_t)v11 >= (v31 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
          : (v32 = 1),
            !v32))
      {
        v35 = (_WORD *)v23;
        v36 = v11;
        goto LABEL_41;
      }
      v33 = (v31 >> 1) + 1;
      if (v31 >= 0x3E)
      {
        v34 = v33 & 0xFFFFFFFFFFFFFFE0;
        v139 = (uint8x8_t *)&v11[1];
        v140 = (uint16x8_t *)(v23 + 32);
        v141 = v33 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v142 = *(uint8x16_t *)v139[-2].i8;
          v143 = vmovl_u8(*(uint8x8_t *)v142.i8);
          v8 = (unsigned __int128)vmovl_high_u8(v142);
          v144 = vmovl_u8(*v139);
          v145 = vmovl_high_u8(*(uint8x16_t *)v139->i8);
          v140[-2] = v143;
          v140[-1] = (uint16x8_t)v8;
          *v140 = v144;
          v140[1] = v145;
          v140 += 4;
          v139 += 4;
          v141 -= 32;
        }
        while (v141);
        if (v33 == v34)
          goto LABEL_47;
        if ((v33 & 0x18) == 0)
        {
          v36 = (int8x16_t *)((char *)v11 + v34);
          v35 = (_WORD *)(v23 + 2 * v34);
          do
          {
LABEL_41:
            v37 = v36->u8[0];
            v36 = (int8x16_t *)((char *)v36 + 1);
            *v35++ = v37;
          }
          while (v35 != v22);
          goto LABEL_47;
        }
      }
      else
      {
        v34 = 0;
      }
      v35 = (_WORD *)(v23 + 2 * (v33 & 0xFFFFFFFFFFFFFFF8));
      v36 = (int8x16_t *)((char *)v11 + (v33 & 0xFFFFFFFFFFFFFFF8));
      v146 = (uint8x8_t *)&v11->i8[v34];
      v147 = (unsigned __int128 *)(v23 + 2 * v34);
      v148 = v34 - (v33 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v149 = *v146++;
        v8 = (unsigned __int128)vmovl_u8(v149);
        *v147++ = v8;
        v148 += 8;
      }
      while (v148);
      if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_47;
      goto LABEL_41;
    }
LABEL_11:
    if (!v5)
    {
      v13 = MEMORY[0x186DAB068]();
      if (!v13)
        goto LABEL_49;
      v14 = (_BYTE *)v13;
      v15 = 0;
LABEL_173:
      v137 = &v14[v15];
      v137[2] = 32;
      *(_WORD *)v137 = 31520;
      v39 = *v2;
      v40 = *(unsigned int *)(*v2 + 84);
      if ((_DWORD)v40)
        goto LABEL_50;
      return WTF::StringBuilder::append();
    }
    if ((*(_BYTE *)(v5 + 16) & 4) == 0)
    {
      v9 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v4);
      if (!v9)
        goto LABEL_49;
      goto LABEL_14;
    }
    v16 = (_BYTE *)MEMORY[0x186DAB068]();
    if (!v16)
      goto LABEL_49;
    v14 = v16;
    v17 = *(int8x16_t **)(v5 + 8);
    v18 = *(unsigned int *)(v5 + 4);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      if ((_DWORD)v18)
      {
        if ((_DWORD)v18 == 1)
          *v16 = v17->i8[0];
        else
          memcpy(v16, v17, v18);
      }
      goto LABEL_172;
    }
    v19 = &v16[v18];
    if (v18 < 0x10)
    {
      v20 = (unint64_t)v16;
    }
    else
    {
      v20 = (unint64_t)&v16[v18 & 0xFFFFFFF0];
      v21 = (unsigned __int128 *)v16;
      do
      {
        v8 = (unsigned __int128)vld2q_s8(v17->i8);
        v17 += 2;
        *v21++ = v8;
      }
      while (v21 != (unsigned __int128 *)v20);
    }
    if ((_BYTE *)v20 == v19)
    {
LABEL_172:
      v15 = *(unsigned int *)(v5 + 4);
      goto LABEL_173;
    }
    v131 = (unint64_t)&v16[v18 - v20];
    if (v131 < 8
      || (v20 < (unint64_t)v17 + 2 * v131 ? (v132 = v17 >= (int8x16_t *)&v16[v18]) : (v132 = 1), !v132))
    {
      v134 = (_BYTE *)v20;
      v135 = v17;
      goto LABEL_169;
    }
    if (v131 >= 0x20)
    {
      v133 = v131 & 0xFFFFFFFFFFFFFFE0;
      v150 = v17 + 2;
      v151 = (int8x16_t *)(v20 + 16);
      v152 = v131 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v154 = v150[-2];
        v153 = v150[-1];
        v156 = *v150;
        v155 = v150[1];
        v150 += 4;
        v8 = (unsigned __int128)vuzp1q_s8(v154, v153);
        v151[-1] = (int8x16_t)v8;
        *v151 = vuzp1q_s8(v156, v155);
        v151 += 2;
        v152 -= 32;
      }
      while (v152);
      if (v131 == v133)
        goto LABEL_172;
      if ((v131 & 0x18) == 0)
      {
        v135 = (int8x16_t *)((char *)v17 + 2 * v133);
        v134 = (_BYTE *)(v20 + v133);
        do
        {
LABEL_169:
          v136 = v135->i8[0];
          v135 = (int8x16_t *)((char *)v135 + 2);
          *v134++ = v136;
        }
        while (v134 != v19);
        goto LABEL_172;
      }
    }
    else
    {
      v133 = 0;
    }
    v134 = (_BYTE *)(v20 + (v131 & 0xFFFFFFFFFFFFFFF8));
    v135 = (int8x16_t *)((char *)v17 + 2 * (v131 & 0xFFFFFFFFFFFFFFF8));
    v157 = (int16x8_t *)((char *)v17 + 2 * v133);
    v158 = (_QWORD *)(v20 + v133);
    v159 = v133 - (v131 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v160 = *v157++;
      *((_QWORD *)&v8 + 1) = v160.i64[1];
      *(int8x8_t *)&v8 = vmovn_s16(v160);
      *v158++ = v8;
      v159 += 8;
    }
    while (v159);
    if (v131 == (v131 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_172;
    goto LABEL_169;
  }
LABEL_193:
  v161 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v161);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  WTF::StringBuilder *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int8x16_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  int8x16_t v21;
  WTF::StringBuilder *v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  int8x16_t *v29;
  uint64_t v30;
  _WORD *v31;
  unint64_t v32;
  char *v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  int8x16_t *v45;
  size_t v46;
  unint64_t v47;
  unsigned __int128 *v48;
  unsigned __int128 v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  int8x16_t *v57;
  __int16 v58;
  char *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unint64_t v62;
  size_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  _BYTE *v67;
  int8x16_t *v68;
  char v69;
  _BYTE *v70;
  char *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint8x8_t *v80;
  uint16x8_t *v81;
  unint64_t v82;
  uint8x16_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint8x8_t *v86;
  uint16x8_t *v87;
  unint64_t v88;
  uint8x8_t v89;
  int8x16_t *v90;
  int8x16_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int16x8_t *v97;
  int8x8_t *v98;
  unint64_t v99;
  int16x8_t v100;
  uint64_t result;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  char v111[16];
  int v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  _QWORD v130[2];
  int8x16x2_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;

  v2 = *(uint64_t **)(*(_QWORD *)a1 + 112);
  if (*((_DWORD *)v2 + 4) != 10)
    goto LABEL_138;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  v106 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(WTF::StringBuilder **)(v4 + 40);
  v114 = *(_QWORD *)a2;
  v111[0] = 60;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v5, &v114, v111);
  v6 = *(unsigned int **)(a2 + 16);
  if (v6)
    v7 = v6 + 2;
  else
    v7 = 0;
  if (!v6)
  {
    v8 = 0;
    if (!v7)
      goto LABEL_13;
LABEL_9:
    v9 = *(unsigned int *)(*(_QWORD *)v7 + 48);
    v130[0] = *(_QWORD *)v7;
    v114 = v4;
    v115 = (char *)v130;
    v116 = v4;
    v117 = (char *)v4;
    v118 = (char *)v4;
    v119 = v4;
    v120 = (uint64_t *)v4;
    v121 = (char *)v4;
    v122 = v4;
    v123 = (uint64_t *)v4;
    v124 = (char *)v4;
    v125 = v4;
    v126 = (char *)v4;
    if ((_DWORD)v9 != -1)
    {
      *(_QWORD *)v111 = &v114;
      ((void (*)(char *))*(&off_1E0FD6CA0 + v9))(v111);
      v10 = v7 + 2;
      if (v7 + 2 == (unsigned int *)v8)
        goto LABEL_13;
      while (1)
      {
        WTF::StringBuilder::append();
        v130[0] = *v10;
        v114 = v4;
        v115 = (char *)v130;
        v116 = v4;
        v117 = (char *)v4;
        v118 = (char *)v4;
        v119 = v4;
        v120 = (uint64_t *)v4;
        v121 = (char *)v4;
        v122 = v4;
        v123 = (uint64_t *)v4;
        v124 = (char *)v4;
        v125 = v4;
        v126 = (char *)v4;
        v11 = *(unsigned int *)(v130[0] + 48);
        if ((_DWORD)v11 == -1)
          break;
        *(_QWORD *)v111 = &v114;
        ((void (*)(char *))*(&off_1E0FD6CA0 + v11))(v111);
        if (++v10 == (_QWORD *)v8)
          goto LABEL_13;
      }
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
  }
  v8 = (uint64_t)&v6[2 * *v6 + 2];
  if (v7 != (unsigned int *)v8)
    goto LABEL_9;
LABEL_13:
  WTF::StringBuilder::append();
  v13 = (uint64_t *)*v2;
  if (!*v2)
  {
    v16 = 0;
    v15 = 0;
    goto LABEL_22;
  }
  v14 = *((unsigned int *)v13 - 1);
  v15 = &v13[4 * v14];
  if (!*((_DWORD *)v13 - 3))
  {
    v16 = &v13[4 * v14];
    v15 = v16;
    v18 = a2;
    if (!v13)
      goto LABEL_26;
    goto LABEL_23;
  }
  v16 = (uint64_t *)*v2;
  if (!(_DWORD)v14)
  {
LABEL_22:
    v18 = a2;
    if (!v13)
      goto LABEL_26;
    goto LABEL_23;
  }
  v17 = 32 * v14;
  v16 = (uint64_t *)*v2;
  do
  {
    if ((unint64_t)(*v16 + 1) > 1)
      goto LABEL_22;
    v16 += 4;
    v17 -= 32;
  }
  while (v17);
  v16 = v15;
  v18 = a2;
  if (!v13)
  {
LABEL_26:
    v19 = 0;
    if (v16)
      goto LABEL_27;
    goto LABEL_129;
  }
LABEL_23:
  v19 = &v13[4 * *((unsigned int *)v13 - 1)];
  if (v19 != v16)
  {
LABEL_27:
    v20 = 1;
    v21 = 0uLL;
    do
    {
      v107 = v12;
      v109 = v21;
      if ((v20 & 1) == 0)
        WTF::StringBuilder::append();
      v22 = *(WTF::StringBuilder **)(v4 + 40);
      v23 = *v16;
      if (*v16)
      {
        v24 = *((_QWORD *)v22 + 1);
        if (!v24)
          goto LABEL_35;
      }
      else
      {
        v24 = *((_QWORD *)v22 + 1);
        if (!v24)
        {
LABEL_35:
          v24 = *(_QWORD *)v22;
          if (!*(_QWORD *)v22)
            goto LABEL_43;
        }
      }
      if ((*(_BYTE *)(v24 + 16) & 4) == 0)
      {
        v25 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v22);
        v26 = v107;
        v27 = v109;
        if (v25)
        {
          *v25 = 46;
          v28 = (char *)(v25 + 1);
          if (v23)
          {
            v29 = *(int8x16_t **)(v23 + 8);
            v30 = *(unsigned int *)(v23 + 4);
            if ((*(_BYTE *)(v23 + 16) & 4) != 0)
              goto LABEL_47;
            goto LABEL_40;
          }
          v51 = 0;
LABEL_79:
          v59 = &v28[2 * v51];
          *(_DWORD *)v59 = 3997728;
          *((_WORD *)v59 + 2) = 32;
        }
        goto LABEL_80;
      }
LABEL_43:
      if (v23)
      {
        if ((*(_BYTE *)(v23 + 16) & 4) == 0)
        {
          v31 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v22);
          v26 = v107;
          v27 = v109;
          if (v31)
          {
            *v31 = 46;
            v28 = (char *)(v31 + 1);
            v29 = *(int8x16_t **)(v23 + 8);
            v30 = *(unsigned int *)(v23 + 4);
            if ((*(_BYTE *)(v23 + 16) & 4) != 0)
            {
LABEL_47:
              if (v30 < 0x40)
              {
                v32 = (unint64_t)v28;
                v39 = &v28[2 * v30];
                if (v28 == v39)
                  goto LABEL_78;
              }
              else
              {
                v32 = (unint64_t)&v28[2 * (v30 & 0xFFFFFFC0)];
                v33 = v28;
                do
                {
                  v131.val[0] = *v29;
                  v34 = v29[1];
                  v132.val[0] = v29[2];
                  v35 = v29[3];
                  v29 += 4;
                  v26 = v35;
                  v132.val[1] = v27;
                  v133.val[0] = v34;
                  v131.val[1] = v27;
                  v36 = v33;
                  vst2q_s8(v36, v131);
                  v36 += 32;
                  v133.val[1] = v27;
                  vst2q_s8(v36, v133);
                  v37 = v33 + 64;
                  vst2q_s8(v37, v132);
                  v38 = v33 + 96;
                  vst2q_s8(v38, *(int8x16x2_t *)v26.i8);
                  v33 += 128;
                }
                while (v33 != (char *)v32);
                v39 = &v28[2 * v30];
                if ((char *)v32 == v39)
                  goto LABEL_78;
              }
              v52 = (unint64_t)&v28[2 * v30 - v32 - 2];
              if (v52 < 0xE
                || (v32 < (unint64_t)v29->u64 + (v52 >> 1) + 1
                  ? (v53 = (unint64_t)v29 >= v32 + (v52 & 0xFFFFFFFFFFFFFFFELL) + 2)
                  : (v53 = 1),
                    !v53))
              {
                v56 = (char *)v32;
                v57 = v29;
                goto LABEL_72;
              }
              v54 = (v52 >> 1) + 1;
              if (v52 < 0x3E)
              {
                v55 = 0;
                goto LABEL_115;
              }
              v55 = v54 & 0xFFFFFFFFFFFFFFE0;
              v80 = (uint8x8_t *)&v29[1];
              v81 = (uint16x8_t *)(v32 + 32);
              v82 = v54 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v83 = *(uint8x16_t *)v80[-2].i8;
                v84 = vmovl_u8(*v80);
                v85 = vmovl_high_u8(*(uint8x16_t *)v80->i8);
                v81[-2] = vmovl_u8(*(uint8x8_t *)v83.i8);
                v81[-1] = vmovl_high_u8(v83);
                *v81 = v84;
                v81[1] = v85;
                v81 += 4;
                v80 += 4;
                v82 -= 32;
              }
              while (v82);
              if (v54 == v55)
                goto LABEL_78;
              if ((v54 & 0x18) != 0)
              {
LABEL_115:
                v56 = (char *)(v32 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
                v57 = (int8x16_t *)((char *)v29 + (v54 & 0xFFFFFFFFFFFFFFF8));
                v86 = (uint8x8_t *)&v29->i8[v55];
                v87 = (uint16x8_t *)(v32 + 2 * v55);
                v88 = v55 - (v54 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v89 = *v86++;
                  *v87++ = vmovl_u8(v89);
                  v88 += 8;
                }
                while (v88);
                if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_78;
              }
              else
              {
                v57 = (int8x16_t *)((char *)v29 + v55);
                v56 = (char *)(v32 + 2 * v55);
              }
              do
              {
LABEL_72:
                v58 = v57->u8[0];
                v57 = (int8x16_t *)((char *)v57 + 1);
                *(_WORD *)v56 = v58;
                v56 += 2;
              }
              while (v56 != v39);
              goto LABEL_78;
            }
LABEL_40:
            if ((_DWORD)v30)
            {
              if ((_DWORD)v30 == 1)
              {
                *(_WORD *)v28 = v29->i16[0];
              }
              else
              {
                memcpy(v28, v29, 2 * v30);
                v26 = v107;
                v27 = v109;
              }
            }
LABEL_78:
            v51 = *(unsigned int *)(v23 + 4);
            goto LABEL_79;
          }
LABEL_80:
          v60 = *v16;
          v108 = v26;
          v110 = v27;
          if (*v16)
            goto LABEL_81;
          goto LABEL_97;
        }
        v43 = (_BYTE *)MEMORY[0x186DAB068]();
        v26 = v107;
        v27 = v109;
        if (!v43)
          goto LABEL_80;
        v41 = v43;
        *v43 = 46;
        v44 = v43 + 1;
        v45 = *(int8x16_t **)(v23 + 8);
        v46 = *(unsigned int *)(v23 + 4);
        if ((*(_BYTE *)(v23 + 16) & 4) != 0)
        {
          if ((_DWORD)v46)
          {
            if ((_DWORD)v46 == 1)
            {
              *v44 = v45->i8[0];
            }
            else
            {
              memcpy(v44, v45, v46);
              v26 = v107;
              v27 = v109;
            }
          }
          goto LABEL_95;
        }
        if (v46 < 0x10)
        {
          v47 = (unint64_t)v44;
          v50 = &v44[v46];
          if (v44 != &v44[v46])
            goto LABEL_83;
        }
        else
        {
          v47 = (unint64_t)&v44[v46 & 0xFFFFFFF0];
          v48 = (unsigned __int128 *)v44;
          do
          {
            v49 = (unsigned __int128)vld2q_s8(v45->i8);
            v45 += 2;
            *v48++ = v49;
          }
          while (v48 != (unsigned __int128 *)v47);
          v50 = &v44[v46];
          if ((_BYTE *)v47 == &v44[v46])
            goto LABEL_95;
LABEL_83:
          v63 = (size_t)&v41[v46 - v47];
          v64 = v63 + 1;
          if (v63 + 1 < 8
            || (v47 < (unint64_t)v45->u64 + 2 * v63 + 2 ? (v65 = v45 >= (int8x16_t *)&v41[v46 + 1]) : (v65 = 1),
                !v65))
          {
            v67 = (_BYTE *)v47;
            v68 = v45;
            goto LABEL_92;
          }
          if (v64 >= 0x20)
          {
            v66 = v64 & 0xFFFFFFFFFFFFFFE0;
            v90 = v45 + 2;
            v91 = (int8x16_t *)(v47 + 16);
            v92 = v64 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v94 = v90[-2];
              v93 = v90[-1];
              v96 = *v90;
              v95 = v90[1];
              v90 += 4;
              v91[-1] = vuzp1q_s8(v94, v93);
              *v91 = vuzp1q_s8(v96, v95);
              v91 += 2;
              v92 -= 32;
            }
            while (v92);
            if (v64 != v66)
            {
              if ((v64 & 0x18) == 0)
              {
                v68 = (int8x16_t *)((char *)v45 + 2 * v66);
                v67 = (_BYTE *)(v47 + v66);
                goto LABEL_92;
              }
              goto LABEL_123;
            }
          }
          else
          {
            v66 = 0;
LABEL_123:
            v67 = (_BYTE *)(v47 + (v64 & 0xFFFFFFFFFFFFFFF8));
            v68 = (int8x16_t *)((char *)v45 + 2 * (v64 & 0xFFFFFFFFFFFFFFF8));
            v97 = (int16x8_t *)((char *)v45 + 2 * v66);
            v98 = (int8x8_t *)(v47 + v66);
            v99 = v66 - (v64 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v100 = *v97++;
              *v98++ = vmovn_s16(v100);
              v99 += 8;
            }
            while (v99);
            if (v64 != (v64 & 0xFFFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_92:
                v69 = v68->i8[0];
                v68 = (int8x16_t *)((char *)v68 + 2);
                *v67++ = v69;
              }
              while (v67 != v50);
            }
          }
        }
LABEL_95:
        v42 = *(unsigned int *)(v23 + 4);
        goto LABEL_96;
      }
      v40 = (_BYTE *)MEMORY[0x186DAB068]();
      v26 = v107;
      v27 = v109;
      if (!v40)
        goto LABEL_80;
      v41 = v40;
      v42 = 0;
      *v40 = 46;
LABEL_96:
      v70 = &v41[v42];
      v70[3] = 32;
      *(_WORD *)(v70 + 1) = 15648;
      v60 = *v16;
      v108 = v26;
      v110 = v27;
      if (*v16)
      {
LABEL_81:
        v61 = *(unsigned __int8 **)(v60 + 8);
        v62 = *(unsigned int *)(v60 + 4) | ((unint64_t)((*(_DWORD *)(v60 + 16) >> 2) & 1) << 32);
        goto LABEL_98;
      }
LABEL_97:
      v61 = 0;
      v62 = 0x100000000;
LABEL_98:
      v71 = WGSL::Types::PrimitiveStruct::keys[v106];
      if (!WTF::operator==(v61, v62, *(unsigned __int8 **)v71, *((_QWORD *)v71 + 1)))
      {
        v72 = (unsigned __int8 *)*((_QWORD *)v71 + 3);
        v73 = *((_QWORD *)v71 + 4);
        v71 += 24;
        if (!WTF::operator==(v61, v62, v72, v73))
        {
          __break(0xC471u);
          JUMPOUT(0x1824E1FCCLL);
        }
      }
      v74 = *((unsigned int *)v71 + 4);
      v75 = *(_DWORD **)(v18 + 16);
      if (*v75 <= v74)
      {
        __break(0xC471u);
        JUMPOUT(0x1824E1FECLL);
      }
      v76 = *(_QWORD *)&v75[2 * v74 + 2];
      v111[0] = 0;
      v112 = -1;
      v77 = *((unsigned int *)v16 + 6);
      if ((_DWORD)v77 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E0FD6BF0[v77])(&v114, v111, v16 + 1);
        v112 = v77;
      }
      v113 = v76;
      v114 = v4;
      v118 = v111;
      v119 = v4;
      v120 = &v113;
      v121 = v111;
      v122 = v4;
      v123 = &v113;
      v115 = v111;
      v116 = v4;
      v117 = v111;
      v124 = v111;
      v125 = v4;
      v126 = v111;
      v127 = v4;
      v128 = v111;
      v129 = v4;
      v78 = *(unsigned int *)(v76 + 48);
      if ((_DWORD)v78 == -1)
        goto LABEL_138;
      v130[0] = &v114;
      ((void (*)(_QWORD *, uint64_t))off_1E0FD6D30[v78])(v130, v76);
      if (v112 != -1)
        ((void (*)(uint64_t *, char *))off_1E0FD6B98[v112])(&v114, v111);
      v112 = -1;
      v79 = v16 + 4;
      v16 = v15;
      v12 = v108;
      v21 = v110;
      if (v79 != v15)
      {
        v16 = v79;
        while ((unint64_t)(*v16 + 1) <= 1)
        {
          v16 += 4;
          if (v16 == v15)
          {
            v16 = v15;
            break;
          }
        }
      }
      v20 = 0;
    }
    while (v16 != v19);
  }
LABEL_129:
  result = *(_QWORD *)(v4 + 40);
  LOBYTE(v114) = 125;
  v102 = *(_QWORD *)(result + 8);
  if (!v102)
    return WTF::StringBuilder::append();
  v103 = *(unsigned int *)(result + 16);
  if (v103 >= *(_DWORD *)(v102 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v104 = *(_DWORD *)(v102 + 16);
  v105 = *(_QWORD *)(v102 + 8);
  *(_DWORD *)(result + 16) = v103 + 1;
  if ((v104 & 4) != 0)
    *(_BYTE *)(v105 + v103) = 125;
  else
    *(_WORD *)(v105 + 2 * v103) = 125;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[16];
  int v9;
  uint64_t v10;
  _QWORD v11[16];
  _QWORD *v12;

  v2 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8[0] = 0;
  v9 = -1;
  v5 = *(unsigned int *)(v3 + 16);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *))off_1E0FD6BF0[v5])(v11, v8);
    v9 = v5;
  }
  v10 = v2;
  v11[0] = v4;
  v11[4] = v8;
  v11[5] = v4;
  v11[6] = &v10;
  v11[7] = v8;
  v11[8] = v4;
  v11[9] = &v10;
  v11[1] = v8;
  v11[2] = v4;
  v11[3] = v8;
  v11[10] = v8;
  v11[11] = v4;
  v11[12] = v8;
  v11[13] = v4;
  v11[14] = v8;
  v11[15] = v4;
  v6 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
  }
  v12 = v11;
  result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E0FD6D30[v6])(&v12, v2);
  if (v9 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD6B98[v9])(v11, v8);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_0,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_1,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_2,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_3,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_4,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_5,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_6,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_7,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_8,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_9,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_10,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_11,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_12,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_13,WGSL::Metal::FunctionDefinitionWriter::serializeConstant(WGSL::Type const*,WGSL::ConstantValue)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

_QWORD *WGSL::OverloadResolver::resolve@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  WTF *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  char v21;
  _DWORD *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  unsigned int *v30;
  uint64_t v31;
  WTF *v32;
  unsigned int *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  _DWORD *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  unsigned int *v79;
  _DWORD *v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  WTF *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  WTF *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  WTF *v94;
  WTF *v95;
  WTF *v97;
  WTF *v98;
  WTF *v99;
  WTF *v100;
  WTF *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  WTF *v105;
  __int128 v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD v113[2];

  v3 = *(unsigned int *)(this[1] + 12);
  if ((_DWORD)v3)
  {
    v4 = this;
    v5 = 10 * v3;
    v6 = (_DWORD *)WTF::fastMalloc((WTF *)(40 * v3 + 8));
    v8 = (WTF *)v6;
    *v6 = v3;
    v9 = v6 + 2;
    v10 = v6 + 2;
    if ((unint64_t)(40 * v3 - 40) < 0x28)
      goto LABEL_200;
    v11 = (v5 * 4 - 40) / 0x28uLL + 1;
    v10 = &v9[10 * (v11 & 0xFFFFFFFFFFFFFFELL)];
    v12 = v6 + 10;
    v13 = v11 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v12 - 32) = 0;
      v12[8] = 0;
      *v12 = 0;
      v12[40] = 0;
      v12 += 80;
      v13 -= 2;
    }
    while (v13);
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_200:
      do
      {
        *v10 = 0;
        v10[32] = 0;
        v10 += 40;
      }
      while (v10 != (_BYTE *)&v9[v5]);
    }
    v14 = (uint64_t *)v4[1];
    v15 = *((unsigned int *)v14 + 3);
    if ((_DWORD)v15)
    {
      for (i = 0; i < v15; ++i)
      {
        if (i >= v15)
          goto LABEL_183;
        v17 = *v14;
        v18 = *v14 + 88 * i;
        v19 = (unsigned int *)(v18 + 60);
        if (*(_DWORD *)(v18 + 60) != *(_DWORD *)(v4[2] + 12) || *(_DWORD *)(v4[3] + 12) > *(_DWORD *)(v18 + 12))
          goto LABEL_14;
        v30 = (unsigned int *)v4[4];
        if (v30)
        {
          v31 = *v30;
          if ((_DWORD)v31)
          {
            v32 = v7;
            bzero(v30 + 2, 8 * v31);
            v7 = v32;
          }
        }
        v33 = (unsigned int *)v4[5];
        if (!v33)
          goto LABEL_49;
        v34 = *v33;
        if (!(_DWORD)v34)
          goto LABEL_49;
        v35 = v33 + 1;
        if ((_DWORD)v34 == 1)
        {
          v36 = *v33;
        }
        else
        {
          v35 += 8 * (v34 & 0xFFFFFFFE);
          v36 = v34 & 1;
          v37 = v33 + 4;
          v38 = v34 & 0xFFFFFFFE;
          do
          {
            *(v37 - 12) = 0;
            *(v37 - 4) = 0;
            *(v37 - 8) = 0;
            *v37 = 0;
            v37 += 16;
            v38 -= 2;
          }
          while (v38);
          if ((v34 & 0xFFFFFFFE) == v34)
            goto LABEL_49;
        }
        v39 = v36 + 1;
        do
        {
          *v35 = 0;
          v35[4] = 0;
          --v39;
          v35 += 8;
        }
        while (v39 > 1);
LABEL_49:
        v40 = v4[3];
        if (*(_DWORD *)(v40 + 12))
        {
          v41 = 0;
          v42 = *(unsigned int *)(v18 + 12);
          while (1)
          {
            if (v41 == v42)
            {
              __break(0xC471u);
              JUMPOUT(0x1824E2C48);
            }
            v43 = *(_QWORD *)(*(_QWORD *)v18 + 8 * v41);
            v44 = *(_QWORD *)(*(_QWORD *)v40 + 8 * v41);
            if (BYTE4(v43))
              break;
LABEL_73:
            v47 = (_DWORD *)v4[4];
            if (*v47 <= v43)
            {
              __break(0xC471u);
              JUMPOUT(0x1824E2BECLL);
            }
            *(_QWORD *)&v47[2 * v43 + 2] = v44;
            ++v41;
            v40 = v4[3];
            if (v41 >= *(unsigned int *)(v40 + 12))
              goto LABEL_75;
          }
          if (v44)
          {
            v45 = v44;
            while (1)
            {
              v46 = *(_DWORD *)(v45 + 48);
              if (v46 != 10)
                break;
              v45 = *(_QWORD *)(v45 + 8);
              if (!v45)
                goto LABEL_14;
            }
            if (!v46)
            {
              switch(*(_BYTE *)v45)
              {
                case 0:
                  if (BYTE4(v43) < 2u)
                    break;
                  goto LABEL_73;
                case 1:
                  if ((v43 & 0x400000000) == 0)
                    break;
                  goto LABEL_73;
                case 2:
                  if ((v43 & 0x800000000) == 0)
                    break;
                  goto LABEL_73;
                case 3:
                  if ((v43 & 0x7000000000) == 0)
                    break;
                  goto LABEL_73;
                case 4:
                  if ((v43 & 0x4000000000) == 0)
                    break;
                  goto LABEL_73;
                case 5:
                  if ((v43 & 0x2000000000) == 0)
                    break;
                  goto LABEL_73;
                case 7:
                  if ((v43 & 0x100000000) != 0)
                    goto LABEL_73;
                  break;
                default:
                  break;
              }
            }
          }
LABEL_14:
          v20 = 0;
          v3 &= 0xFFFFFFFFFFFFFF00;
          v21 = 1;
          goto LABEL_15;
        }
LABEL_75:
        v97 = v7;
        v48 = *(unsigned int *)(v4[2] + 12);
        if (!(_DWORD)v48)
        {
          v73 = 0;
          v74 = 0;
          goto LABEL_138;
        }
        v101 = (WTF *)WTF::fastMalloc((WTF *)(4 * v48 + 4));
        *(_DWORD *)v101 = v48;
        v49 = *(unsigned int *)(v4[2] + 12);
        if (!(_DWORD)v49)
        {
          v74 = 0;
          v73 = v101;
          goto LABEL_138;
        }
        v100 = (WTF *)WTF::fastMalloc((WTF *)(8 * v49 + 8));
        *(_DWORD *)v100 = v49;
        v50 = v4[2];
        if (!*(_DWORD *)(v50 + 12))
          goto LABEL_137;
        v99 = v8;
        v51 = 0;
        v52 = 0;
        v103 = (_QWORD *)(v18 + 48);
        do
        {
          if (v52 >= *v19)
          {
            __break(0xC471u);
            JUMPOUT(0x1824E2C40);
          }
          if ((((uint64_t (*)(_QWORD *, uint64_t, _QWORD))WGSL::OverloadResolver::unify)(v4, *v103 + v51, *(_QWORD *)(*(_QWORD *)v50 + 8 * v52)) & 1) == 0)
          {
            v3 &= 0xFFFFFFFFFFFFFF00;
            v8 = v99;
            v74 = v100;
            v73 = v101;
            goto LABEL_142;
          }
          ++v52;
          v50 = v4[2];
          v54 = *(unsigned int *)(v50 + 12);
          v51 += 8;
        }
        while (v52 < v54);
        if (!(_DWORD)v54)
        {
          v8 = v99;
          goto LABEL_137;
        }
        v55 = 0;
        v98 = v2;
        do
        {
          if (v55 >= *v19)
          {
            __break(0xC471u);
            JUMPOUT(0x1824E2C50);
          }
          v56 = (uint64_t *)(*v103 + 8 * v55);
          v57 = *(_QWORD *)v50 + 8 * v55;
          v58 = v56;
          while (1)
          {
            while (1)
            {
              while (1)
              {
LABEL_88:
                v57 = *(_QWORD *)v57;
                v59 = *v58;
                if (!*v58)
                  goto LABEL_92;
                v60 = *(_DWORD *)(v59 + 24);
                if (v60 != 5)
                  break;
                if (*(_DWORD *)(v57 + 48) != 10)
                  goto LABEL_182;
LABEL_87:
                v58 = (uint64_t *)(v59 + 8);
                v57 += 8;
              }
              if (v60 == 6)
              {
                if (*(_DWORD *)(v57 + 48) != 11)
                  goto LABEL_182;
                goto LABEL_87;
              }
              if (v60 == 9)
              {
                v67 = *(unsigned __int8 **)v59;
                v68 = (_DWORD *)v4[4];
                if (*v68 <= *(_QWORD *)v59)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824E2C0CLL);
                }
                v64 = *v103 + 8 * v55;
                v69 = *(unsigned __int8 **)&v68[2 * v67 + 2];
                if (BYTE4(v67))
                {
                  v69 = (unsigned __int8 *)WGSL::satisfyOrPromote((uint64_t)v69, BYTE4(*(_QWORD *)v59), (_QWORD *)*v4);
                  if (!v69)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824E2C2CLL);
                  }
                }
                goto LABEL_127;
              }
LABEL_92:
              if (!v57 || *(_DWORD *)(v57 + 48) != 10)
                break;
              v57 += 8;
            }
            if (!v59)
              break;
            v61 = *(_DWORD *)(v59 + 24);
            switch(v61)
            {
              case 0:
                if (*(_DWORD *)(v57 + 48) != 1)
                  goto LABEL_182;
                v58 = (uint64_t *)(v59 + 8);
                break;
              case 1:
                if (*(_DWORD *)(v57 + 48) != 2)
                  goto LABEL_182;
                v58 = (uint64_t *)(v59 + 16);
                break;
              case 2:
                if (*(_DWORD *)(v57 + 48) != 7)
                  goto LABEL_182;
                v58 = (uint64_t *)(v59 + 8);
                break;
              case 7:
                v58 = (uint64_t *)v59;
                if (*(_DWORD *)(v57 + 48) != 3)
                  goto LABEL_182;
                goto LABEL_88;
              case 8:
                v58 = (uint64_t *)v59;
                if (*(_DWORD *)(v57 + 48) != 12)
                  goto LABEL_182;
                goto LABEL_88;
              default:
                goto LABEL_110;
            }
          }
          v61 = MEMORY[0x18];
LABEL_110:
          if (v61 == 3)
          {
            v62 = 0;
            goto LABEL_128;
          }
          if (!v59 || v61 != 4)
          {
            v64 = *v103 + 8 * v55;
            if (v61 == 10)
              goto LABEL_126;
LABEL_182:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_183:
            __break(0xC471u);
            JUMPOUT(0x1824E2C38);
          }
          v113[0] = v4;
          v63 = *(unsigned int *)(v59 + 4);
          if ((_DWORD)v63 == -1)
            goto LABEL_182;
          v64 = (uint64_t)v56;
          v104 = v113;
          v65 = ((uint64_t (*)(_QWORD **))off_1E0FD6FD8[v63])(&v104);
          v66 = (_QWORD *)*v4;
          if (((1 << v65) & 0x14493) != 0)
            v59 = (uint64_t)(v66 + 10);
          else
            v59 = (uint64_t)(((1 << v65) & 0x2924) != 0 ? v66 + 8 : v66 + 9);
LABEL_126:
          v69 = *(unsigned __int8 **)v59;
LABEL_127:
          v62 = WGSL::conversionRank((unsigned __int8 *)v57, v69);
          v56 = (uint64_t *)v64;
          v2 = v98;
LABEL_128:
          v8 = v99;
          if (v55 >= *(unsigned int *)v101)
          {
            __break(0xC471u);
            JUMPOUT(0x1824E2BACLL);
          }
          *((_DWORD *)v101 + v55 + 1) = v62;
          v70 = *v56;
          v104 = v4;
          v105 = (WTF *)v4;
          *(_QWORD *)&v106 = v4;
          *((_QWORD *)&v106 + 1) = v4;
          v107 = v4;
          v108 = v4;
          v109 = v4;
          v110 = v4;
          v111 = v4;
          v112 = v4;
          v71 = *(unsigned int *)(v70 + 24);
          if ((_DWORD)v71 == -1)
            goto LABEL_182;
          v113[0] = &v104;
          v72 = ((uint64_t (*)(_QWORD *))off_1E0FD6F80[v71])(v113);
          if (v55 >= *(unsigned int *)v100)
          {
            __break(0xC471u);
            JUMPOUT(0x1824E2BCCLL);
          }
          *((_QWORD *)v100 + ++v55) = v72;
          v50 = v4[2];
        }
        while (v55 < *(unsigned int *)(v50 + 12));
LABEL_137:
        v74 = v100;
        v73 = v101;
LABEL_138:
        v75 = *(_QWORD *)(v17 + 88 * i + 80);
        v104 = v4;
        v105 = (WTF *)v4;
        *(_QWORD *)&v106 = v4;
        *((_QWORD *)&v106 + 1) = v4;
        v107 = v4;
        v108 = v4;
        v109 = v4;
        v110 = v4;
        v111 = v4;
        v112 = v4;
        v76 = *(unsigned int *)(v75 + 24);
        if ((_DWORD)v76 == -1)
          goto LABEL_182;
        v113[0] = &v104;
        v77 = ((uint64_t (*)(_QWORD *))off_1E0FD6F80[v76])(v113);
        if (v77)
        {
          v21 = 0;
          v20 = 1;
          v102 = v77;
          v2 = v74;
          v7 = v73;
          v3 = v18;
          goto LABEL_15;
        }
        v3 &= 0xFFFFFFFFFFFFFF00;
        if (v74)
LABEL_142:
          WTF::fastFree(v74, v53);
        if (v73)
          WTF::fastFree(v73, v53);
        v20 = 0;
        v21 = 1;
        v7 = v97;
LABEL_15:
        if (i >= *(unsigned int *)v8)
        {
          __break(0xC471u);
          JUMPOUT(0x1824E2B8CLL);
        }
        v22 = &v9[10 * i];
        if (*((unsigned __int8 *)v22 + 32) != v20)
        {
          if (!*((_BYTE *)v22 + 32))
          {
            *(_QWORD *)v22 = v3;
            *((_QWORD *)v22 + 1) = v7;
            *((_QWORD *)v22 + 2) = v2;
            *((_QWORD *)v22 + 3) = v102;
            *((_BYTE *)v22 + 32) = 1;
            v2 = 0;
            v7 = 0;
            if ((v21 & 1) == 0)
              goto LABEL_31;
            goto LABEL_10;
          }
          v25 = (WTF *)*((_QWORD *)v22 + 2);
          *((_QWORD *)v22 + 2) = 0;
          if (v25)
          {
            v26 = v7;
            WTF::fastFree(v25, v7);
            v7 = v26;
          }
          v27 = (WTF *)*((_QWORD *)v22 + 1);
          *((_QWORD *)v22 + 1) = 0;
          if (v27)
          {
            v28 = v7;
            WTF::fastFree(v27, v7);
            v7 = v28;
          }
          *((_BYTE *)v22 + 32) = 0;
LABEL_30:
          if ((v21 & 1) == 0)
            goto LABEL_31;
          goto LABEL_10;
        }
        if (!*((_BYTE *)v22 + 32))
          goto LABEL_30;
        v23 = (WTF *)*((_QWORD *)v22 + 1);
        *(_QWORD *)v22 = v3;
        *((_QWORD *)v22 + 1) = v7;
        if (v23)
          WTF::fastFree(v23, v7);
        v24 = (WTF *)*((_QWORD *)v22 + 2);
        *((_QWORD *)v22 + 2) = v2;
        if (v24)
          WTF::fastFree(v24, v7);
        v2 = 0;
        v7 = 0;
        *((_QWORD *)v22 + 3) = v102;
        if ((v21 & 1) == 0)
        {
LABEL_31:
          if (v2)
          {
            v29 = v7;
            WTF::fastFree(v2, v7);
            v7 = v29;
          }
          if (v7)
          {
            WTF::fastFree(v7, v7);
            v2 = 0;
            v7 = 0;
          }
          else
          {
            v2 = 0;
          }
        }
LABEL_10:
        v14 = (uint64_t *)v4[1];
        v15 = *((unsigned int *)v14 + 3);
      }
    }
    LOBYTE(v104) = 0;
    LOBYTE(v107) = 0;
    if (!*(_DWORD *)v8)
      goto LABEL_166;
    v78 = &v9[10 * *(unsigned int *)v8];
    do
    {
      if (*((_BYTE *)v9 + 32))
      {
        if ((_BYTE)v107)
        {
          v79 = (unsigned int *)*((_QWORD *)v9 + 1);
          if (v79)
          {
            v82 = *v79;
            v80 = v79 + 1;
            v81 = v82;
            if (v82)
            {
              v83 = 0;
              v84 = 0;
              v85 = v105;
              v86 = 4 * v81;
              while (1)
              {
                if (4 * *(unsigned int *)v105 == v83)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824E2B6CLL);
                }
                v87 = v80[v83 / 4];
                v88 = *(_DWORD *)((char *)v105 + v83 + 4);
                if (v87 > v88)
                  break;
                v84 |= v87 < v88;
                v83 += 4;
                if (v86 == v83)
                {
                  if ((v84 & 1) != 0)
                  {
                    v89 = (WTF *)v106;
                    v105 = 0;
                    *(_QWORD *)&v106 = 0;
                    std::__optional_storage_base<WGSL::ViableOverload,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WGSL::ViableOverload,false> const&>((uint64_t)&v104, v9);
                    if (v89)
                      WTF::fastFree(v89, v90);
                    WTF::fastFree(v85, v90);
                  }
                  break;
                }
              }
            }
          }
        }
        else
        {
          std::__optional_storage_base<WGSL::ViableOverload,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WGSL::ViableOverload,false> const&>((uint64_t)&v104, v9);
        }
      }
      v9 += 10;
    }
    while (v9 != v78);
    if ((_BYTE)v107)
    {
      *(_OWORD *)a2 = v106;
      *(_BYTE *)(a2 + 16) = 1;
      if (v105)
        WTF::fastFree(v105, v7);
    }
    else
    {
LABEL_166:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
    }
    v91 = *(unsigned int *)v8;
    if ((_DWORD)v91)
    {
      v92 = 40 * v91;
      v93 = (char *)v8 + 24;
      do
      {
        if (v93[16])
        {
          v94 = *(WTF **)v93;
          *(_QWORD *)v93 = 0;
          if (v94)
            WTF::fastFree(v94, v7);
          v95 = (WTF *)*((_QWORD *)v93 - 1);
          *((_QWORD *)v93 - 1) = 0;
          if (v95)
            WTF::fastFree(v95, v7);
        }
        v93 += 40;
        v92 -= 40;
      }
      while (v92);
    }
    return (_QWORD *)WTF::fastFree(v8, v7);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t WGSL::OverloadResolver::materialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a1;
  v2 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1824E2CE0);
  }
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **))off_1E0FD6FD8[v2])(&v5);
}

uint64_t WGSL::OverloadResolver::unify(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;

  if (a3)
  {
    if (a3 == 1)
    {
      return a2 == a4;
    }
    else
    {
      v10 = std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::resolveOverloads(v10);
    }
  }
  else
  {
    v5 = *(unsigned int **)(a1 + 40);
    if (*v5 <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1824E34B8);
    }
    v6 = &v5[2 * a2];
    v9 = *(_QWORD *)(v6 + 1);
    v7 = v6 + 1;
    v8 = v9;
    if ((v9 & 0xFF00000000) != 0)
    {
      return v8 == a4;
    }
    else
    {
      *v7 = a4;
      result = 1;
      *((_BYTE *)v7 + 4) = 1;
    }
  }
  return result;
}

WTF *WGSL::resolveOverloads@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  WTF *v32;
  WTF *result;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;

  v6 = *((_DWORD *)a2 + 3);
  if (!v6)
  {
    v12 = 0;
    v34 = a1;
    v35 = a2;
    v36 = a3;
    v37 = a4;
    v38 = 0;
    goto LABEL_40;
  }
  v7 = *a2;
  v8 = 88 * v6 - 88;
  if (v8 < 0x58)
  {
    v9 = 0;
    v10 = 0;
    v11 = *a2;
LABEL_22:
    v20 = v7 + 88 * v6;
    do
    {
      if (v9 <= *(_DWORD *)(v11 + 12))
        v9 = *(_DWORD *)(v11 + 12);
      if (v10 <= *(_DWORD *)(v11 + 36))
        v10 = *(_DWORD *)(v11 + 36);
      v11 += 88;
    }
    while (v11 != v20);
    goto LABEL_28;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = v8 / 0x58 + 1;
  v11 = v7 + 88 * (v17 & 0x7FFFFFFFFFFFFFELL);
  v18 = (unsigned int *)(v7 + 100);
  v19 = v17 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    if (v13 <= *(v18 - 22))
      v13 = *(v18 - 22);
    if (v14 <= *v18)
      v14 = *v18;
    if (v15 <= *(v18 - 16))
      v15 = *(v18 - 16);
    if (v16 <= v18[6])
      v16 = v18[6];
    v18 += 44;
    v19 -= 2;
  }
  while (v19);
  if (v15 <= v16)
    v10 = v16;
  else
    v10 = v15;
  if (v13 <= v14)
    v9 = v14;
  else
    v9 = v13;
  if (v17 != (v17 & 0x7FFFFFFFFFFFFFELL))
    goto LABEL_22;
LABEL_28:
  v34 = a1;
  v35 = a2;
  v36 = a3;
  v37 = a4;
  if (v9)
  {
    v21 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9 + 8));
    *(_DWORD *)v21 = v9;
    v38 = v21;
    if (v10)
      goto LABEL_30;
LABEL_36:
    v12 = 0;
    goto LABEL_40;
  }
  v38 = 0;
  if (!v10)
    goto LABEL_36;
LABEL_30:
  v22 = (_DWORD *)WTF::fastMalloc((WTF *)((8 * v10) | 4));
  v12 = (WTF *)v22;
  *v22 = v10;
  v23 = v22 + 1;
  v24 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v24)
  {
    v27 = v22 + 1;
LABEL_38:
    v30 = &v23[2 * v10];
    do
    {
      *v27 = 0;
      v27[4] = 0;
      v27 += 8;
    }
    while (v27 != v30);
    goto LABEL_40;
  }
  v25 = v24 + 1;
  v26 = (v24 + 1) & 0x3FFFFFFFFFFFFFFELL;
  v27 = &v23[2 * v26];
  v28 = v22 + 4;
  v29 = v26;
  do
  {
    *(v28 - 12) = 0;
    *(v28 - 4) = 0;
    *(v28 - 8) = 0;
    *v28 = 0;
    v28 += 16;
    v29 -= 2;
  }
  while (v29);
  if (v25 != v26)
    goto LABEL_38;
LABEL_40:
  v39 = v12;
  WGSL::OverloadResolver::resolve(&v34, a5);
  v32 = v39;
  v39 = 0;
  if (v32)
    WTF::fastFree(v32, v31);
  result = v38;
  v38 = 0;
  if (result)
    return (WTF *)WTF::fastFree(result, v31);
  return result;
}

uint64_t std::__optional_storage_base<WGSL::ViableOverload,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WGSL::ViableOverload,false> const&>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  __int128 v16;
  WTF *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  __int128 v30;
  int v31;
  WTF *v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  WTF *v46;
  int v47;
  unsigned int *v48;
  unsigned int *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (!*(_BYTE *)(result + 32))
      return result;
    *(_QWORD *)result = *a2;
    v4 = (unsigned int *)a2[1];
    if (!v4)
    {
      v7 = 0;
      goto LABEL_30;
    }
    v5 = v4 + 1;
    v6 = *v4;
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v6 + 4));
    *v7 = v6;
    if (!(_DWORD)v6)
      goto LABEL_30;
    v8 = v7 + 1;
    v9 = (v6 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v9 < 7)
    {
      v10 = v4 + 1;
    }
    else
    {
      v10 = v4 + 1;
      if ((unint64_t)((char *)v7 - (char *)v4) >= 0x20)
      {
        v11 = 0;
        v12 = v9 + 1;
        v13 = v12 & 0x7FFFFFFFFFFFFFF8;
        v8 = (_DWORD *)((char *)v8 + v13 * 4);
        v10 = &v5[v13];
        v14 = v12 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v15 = &v7[v11];
          v16 = *(_OWORD *)&v4[v11 + 5];
          *(_OWORD *)(v15 + 1) = *(_OWORD *)&v4[v11 + 1];
          *(_OWORD *)(v15 + 5) = v16;
          v11 += 8;
          v14 -= 8;
        }
        while (v14);
        if (v12 == (v12 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_30:
          v32 = *(WTF **)(v3 + 8);
          *(_QWORD *)(v3 + 8) = v7;
          if (v32)
            WTF::fastFree(v32, a2);
          v33 = (unsigned int *)a2[2];
          if (!v33)
          {
            result = 0;
            goto LABEL_43;
          }
          v34 = v33 + 2;
          v35 = *v33;
          result = WTF::fastMalloc((WTF *)(8 * v35 + 8));
          *(_DWORD *)result = v35;
          if ((_DWORD)v35)
          {
            v36 = (_QWORD *)(result + 8);
            v37 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v37 < 7)
            {
              v38 = v33 + 2;
            }
            else
            {
              v38 = v33 + 2;
              if ((unint64_t)(result - (_QWORD)v33) >= 0x20)
              {
                v39 = 0;
                v40 = v37 + 1;
                v41 = 2 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
                v36 = (_QWORD *)((char *)v36 + v41 * 4);
                v38 = &v34[v41];
                v42 = v40 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v43 = result + v39 * 4;
                  v44 = *(_OWORD *)&v33[v39 + 6];
                  *(_OWORD *)(v43 + 8) = *(_OWORD *)&v33[v39 + 2];
                  *(_OWORD *)(v43 + 24) = v44;
                  v39 += 8;
                  v42 -= 4;
                }
                while (v42);
                if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_43;
              }
            }
            do
            {
              v45 = *(_QWORD *)v38;
              v38 += 2;
              *v36++ = v45;
            }
            while (v38 != &v34[2 * v35]);
          }
LABEL_43:
          v46 = *(WTF **)(v3 + 16);
          *(_QWORD *)(v3 + 16) = result;
          if (v46)
            result = WTF::fastFree(v46, a2);
          *(_QWORD *)(v3 + 24) = a2[3];
          return result;
        }
      }
    }
    do
    {
      v31 = *v10++;
      *v8++ = v31;
    }
    while (v10 != &v5[v6]);
    goto LABEL_30;
  }
  if (!*(_BYTE *)(result + 32))
  {
    *(_QWORD *)result = *a2;
    v18 = (unsigned int *)a2[1];
    if (!v18)
    {
      v21 = 0;
      goto LABEL_48;
    }
    v19 = v18 + 1;
    v20 = *v18;
    v21 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v20 + 4));
    *v21 = v20;
    if (!(_DWORD)v20)
      goto LABEL_48;
    v22 = v21 + 1;
    v23 = (v20 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v23 < 7)
    {
      v24 = v18 + 1;
    }
    else
    {
      v24 = v18 + 1;
      if ((unint64_t)((char *)v21 - (char *)v18) >= 0x20)
      {
        v25 = 0;
        v26 = v23 + 1;
        v27 = v26 & 0x7FFFFFFFFFFFFFF8;
        v22 = (_DWORD *)((char *)v22 + v27 * 4);
        v24 = &v19[v27];
        v28 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v29 = &v21[v25];
          v30 = *(_OWORD *)&v18[v25 + 5];
          *(_OWORD *)(v29 + 1) = *(_OWORD *)&v18[v25 + 1];
          *(_OWORD *)(v29 + 5) = v30;
          v25 += 8;
          v28 -= 8;
        }
        while (v28);
        if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_48:
          *(_QWORD *)(v3 + 8) = v21;
          v48 = (unsigned int *)a2[2];
          if (v48)
          {
            v49 = v48 + 2;
            v50 = *v48;
            result = WTF::fastMalloc((WTF *)(8 * v50 + 8));
            *(_DWORD *)result = v50;
            if ((_DWORD)v50)
            {
              v51 = (_QWORD *)(result + 8);
              v52 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
              if (v52 < 7)
              {
                v53 = v48 + 2;
              }
              else
              {
                v53 = v48 + 2;
                if ((unint64_t)(result - (_QWORD)v48) >= 0x20)
                {
                  v54 = 0;
                  v55 = v52 + 1;
                  v56 = 2 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
                  v51 = (_QWORD *)((char *)v51 + v56 * 4);
                  v53 = &v49[v56];
                  v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v58 = result + v54 * 4;
                    v59 = *(_OWORD *)&v48[v54 + 6];
                    *(_OWORD *)(v58 + 8) = *(_OWORD *)&v48[v54 + 2];
                    *(_OWORD *)(v58 + 24) = v59;
                    v54 += 8;
                    v57 -= 4;
                  }
                  while (v57);
                  if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_59;
                }
              }
              do
              {
                v60 = *(_QWORD *)v53;
                v53 += 2;
                *v51++ = v60;
              }
              while (v53 != &v49[2 * v50]);
            }
          }
          else
          {
            result = 0;
          }
LABEL_59:
          v61 = a2[3];
          *(_QWORD *)(v3 + 16) = result;
          *(_QWORD *)(v3 + 24) = v61;
          *(_BYTE *)(v3 + 32) = 1;
          return result;
        }
      }
    }
    do
    {
      v47 = *v24++;
      *v22++ = v47;
    }
    while (v24 != &v19[v20]);
    goto LABEL_48;
  }
  v17 = *(WTF **)(result + 16);
  *(_QWORD *)(v3 + 16) = 0;
  if (v17)
    WTF::fastFree(v17, a2);
  result = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  if (result)
    result = WTF::fastFree((WTF *)result, a2);
  *(_BYTE *)(v3 + 32) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _BOOL8 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD v29[2];
  uint64_t v30;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  v17 = v3;
  v18 = v3;
  v19 = v3;
  v20 = v3;
  v21 = v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v25 = v3;
  v26 = v3;
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5 != -1)
  {
    v29[0] = &v17;
    v6 = ((uint64_t (*)(_QWORD *))off_1E0FD6F80[v5])(v29);
    if (!v6)
      return 0;
    v29[0] = v3;
    v7 = *(unsigned int *)(a2 + 4);
    if ((_DWORD)v7 != -1)
    {
      v8 = v6;
      v17 = v29;
      v9 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E0FD6FD8[v7])(&v17, a2);
      v10 = *v3;
      v28 = v9;
      v27 = v8;
      v11 = (uint64_t *)((v9 << 8) | 1u);
      v17 = v11;
      v18 = (uint64_t *)v8;
      v12 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v10 + 16), (unsigned __int8 *)&v17);
      v13 = *(unsigned __int8 **)(v10 + 16);
      if (v13)
        v13 += 24 * *((unsigned int *)v13 - 1);
      if (v13 == v12 || (v14 = *((_QWORD *)v12 + 2)) == 0)
      {
        v14 = WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>(v10, &v27, (char *)&v28);
        v29[1] = v8;
        v30 = v14;
        v29[0] = v11;
        WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v10 + 16), (unsigned __int8 *)v29, &v30, (uint64_t)&v17);
      }
      return v14;
    }
  }
  v16 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _BOOL8 v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  _QWORD v33[2];
  uint64_t v34;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  v20 = v3;
  v21 = v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v25 = v3;
  v26 = v3;
  v27 = v3;
  v28 = v3;
  v29 = v3;
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5 != -1)
  {
    v33[0] = &v20;
    v6 = ((uint64_t (*)(_QWORD *))off_1E0FD6F80[v5])(v33);
    if (!v6)
      return 0;
    v33[0] = v3;
    v7 = *(unsigned int *)(a2 + 4);
    if ((_DWORD)v7 != -1)
    {
      v8 = v6;
      v20 = v33;
      v9 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E0FD6FD8[v7])(&v20, a2);
      v33[0] = v3;
      v10 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v10 != -1)
      {
        v11 = v9;
        v20 = v33;
        v12 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E0FD6FD8[v10])(&v20, a2 + 8);
        v13 = *v3;
        v32 = v11;
        v31 = v12;
        v30 = v8;
        v14 = (uint64_t *)((v12 << 16) | (v11 << 8) | 2u);
        v20 = v14;
        v21 = (uint64_t *)v8;
        v15 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v13 + 16), (unsigned __int8 *)&v20);
        v16 = *(unsigned __int8 **)(v13 + 16);
        if (v16)
          v16 += 24 * *((unsigned int *)v16 - 1);
        if (v16 == v15 || (v17 = *((_QWORD *)v15 + 2)) == 0)
        {
          v17 = WGSL::TypeStore::allocateType<WGSL::Types::Matrix,WGSL::Type const*&,unsigned char &,unsigned char &>(v13, &v30, (char *)&v32, (char *)&v31);
          v33[1] = v8;
          v34 = v17;
          v33[0] = v14;
          WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v13 + 16), (unsigned __int8 *)v33, &v34, (uint64_t)&v20);
        }
        return v17;
      }
    }
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v19);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BOOL8 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned __int8 v26;
  _QWORD v27[2];
  uint64_t v28;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(a2 + 8);
  v15 = (unint64_t)v3;
  v16 = (uint64_t)v3;
  v17 = v3;
  v18 = v3;
  v19 = v3;
  v20 = v3;
  v21 = v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v14);
  }
  else
  {
    v27[0] = &v15;
    v6 = ((uint64_t (*)(_QWORD *))off_1E0FD6F80[v5])(v27);
    if (!v6)
      return 0;
    v7 = v6;
    v8 = *v3;
    v26 = *(_BYTE *)a2;
    v25 = v6;
    v9 = ((unint64_t)v26 << 8) | 4;
    v15 = v9;
    v16 = v6;
    v10 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v8 + 16), (unsigned __int8 *)&v15);
    v11 = *(unsigned __int8 **)(v8 + 16);
    if (v11)
      v11 += 24 * *((unsigned int *)v11 - 1);
    if (v11 == v10 || (v12 = *((_QWORD *)v10 + 2)) == 0)
    {
      v12 = WGSL::TypeStore::allocateType<WGSL::Types::Texture,WGSL::Type const*&,WGSL::Types::Texture::Kind &>(v8, &v25, (char *)&v26);
      v27[1] = v7;
      v28 = v12;
      v27[0] = v9;
      WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v8 + 16), (unsigned __int8 *)v27, &v28, (uint64_t)&v15);
    }
    return v12;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BOOL8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _QWORD v19[2];
  _QWORD v20[3];
  uint64_t v21;

  v2 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v19[0] = v2;
  v3 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v3 == -1
    || (v20[0] = v19,
        v5 = ((uint64_t (*)(_QWORD *, unsigned __int8 *))off_1E0FD6FD8[v3])(v20, a2 + 4),
        v19[0] = v2,
        v6 = *((unsigned int *)a2 + 4),
        (_DWORD)v6 == -1))
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v15);
  }
  else
  {
    v7 = v5;
    v20[0] = v19;
    v8 = ((uint64_t (*)(_QWORD *, unsigned __int8 *))off_1E0FD6FD8[v6])(v20, a2 + 12);
    v9 = *v2;
    v18 = *a2;
    v17 = v7;
    v16 = v8;
    v10 = (v7 << 16) | ((unint64_t)v18 << 8) | ((unint64_t)v8 << 32) | 5;
    v20[0] = v10;
    v20[1] = 0;
    v11 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v9 + 16), (unsigned __int8 *)v20);
    v12 = *(unsigned __int8 **)(v9 + 16);
    if (v12)
      v12 += 24 * *((unsigned int *)v12 - 1);
    if (v12 == v11 || (v13 = *((_QWORD *)v11 + 2)) == 0)
    {
      v13 = WGSL::TypeStore::allocateType<WGSL::Types::TextureStorage,WGSL::Types::TextureStorage::Kind &,WGSL::TexelFormat &,WGSL::AccessMode &>(v9, &v18, (char *)&v17, (char *)&v16);
      v21 = v13;
      v19[0] = v10;
      v19[1] = 0;
      WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v9 + 16), (unsigned __int8 *)v19, &v21, (uint64_t)v20);
    }
    return v13;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD **)(*(_QWORD *)a1 + 40);
  v8 = v2;
  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v7);
  }
  else
  {
    v9 = &v8;
    result = ((uint64_t (*)(_QWORD **))off_1E0FD6FD8[v3])(&v9);
    if (result <= 0x10u)
    {
      v5 = *v2 + 72;
      if (((1 << result) & 0x2924) != 0)
        v5 = *v2 + 64;
      if (((1 << result) & 0x14493) != 0)
        v6 = *v2 + 80;
      else
        v6 = v5;
      return *(_QWORD *)v6;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _BOOL8 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  char v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  _QWORD v34[2];
  uint64_t v35;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 48);
  v4 = *(_QWORD *)(a2 + 8);
  v20 = v3;
  v21 = (uint64_t)v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v25 = v3;
  v26 = v3;
  v27 = v3;
  v28 = v3;
  v29 = v3;
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5 != -1)
  {
    v34[0] = &v20;
    v6 = ((uint64_t (*)(_QWORD *))off_1E0FD6F80[v5])(v34);
    if (!v6)
      return 0;
    v34[0] = v3;
    v7 = *(unsigned int *)(a2 + 4);
    if ((_DWORD)v7 != -1)
    {
      v8 = v6;
      v20 = v34;
      v9 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E0FD6FD8[v7])(&v20, a2);
      v34[0] = v3;
      v10 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v10 != -1)
      {
        v11 = v9;
        v20 = v34;
        v12 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E0FD6FD8[v10])(&v20, a2 + 16);
        v13 = *v3;
        v33 = v11;
        v32 = v8;
        v31 = v12;
        v30 = 0;
        v14 = (uint64_t *)((v12 << 16) | (v11 << 8) | 6u);
        v20 = v14;
        v21 = v8;
        v15 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v13 + 16), (unsigned __int8 *)&v20);
        v16 = *(unsigned __int8 **)(v13 + 16);
        if (v16)
          v16 += 24 * *((unsigned int *)v16 - 1);
        if (v16 == v15 || (v17 = *((_QWORD *)v15 + 2)) == 0)
        {
          v17 = WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(v13, &v33, (char *)&v31, &v32, &v30);
          v34[1] = v8;
          v35 = v17;
          v34[0] = v14;
          WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v13 + 16), (unsigned __int8 *)v34, &v35, (uint64_t)&v20);
        }
        return v17;
      }
    }
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v19);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _BOOL8 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  _QWORD v33[2];
  uint64_t v34;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 56);
  v4 = *(_QWORD *)(a2 + 8);
  v20 = v3;
  v21 = (uint64_t)v3;
  v22 = v3;
  v23 = v3;
  v24 = v3;
  v25 = v3;
  v26 = v3;
  v27 = v3;
  v28 = v3;
  v29 = v3;
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5 != -1)
  {
    v33[0] = &v20;
    v6 = ((uint64_t (*)(_QWORD *))off_1E0FD6F80[v5])(v33);
    if (!v6)
      return 0;
    v33[0] = v3;
    v7 = *(unsigned int *)(a2 + 4);
    if ((_DWORD)v7 != -1)
    {
      v8 = v6;
      v20 = v33;
      v9 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E0FD6FD8[v7])(&v20, a2);
      v33[0] = v3;
      v10 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v10 != -1)
      {
        v11 = v9;
        v20 = v33;
        v12 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E0FD6FD8[v10])(&v20, a2 + 16);
        v13 = *v3;
        v32 = v11;
        v31 = v8;
        v30 = v12;
        v14 = (uint64_t *)((v12 << 16) | (v11 << 8) | 7u);
        v20 = v14;
        v21 = v8;
        v15 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v13 + 16), (unsigned __int8 *)&v20);
        v16 = *(unsigned __int8 **)(v13 + 16);
        if (v16)
          v16 += 24 * *((unsigned int *)v16 - 1);
        if (v16 == v15 || (v17 = *((_QWORD *)v15 + 2)) == 0)
        {
          v17 = WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>(v13, &v32, (char *)&v30, &v31);
          v33[1] = v8;
          v34 = v17;
          v33[0] = v14;
          WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v13 + 16), (unsigned __int8 *)v33, &v34, (uint64_t)&v20);
        }
        return v17;
      }
    }
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v19);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BOOL8 v7;
  _QWORD v8[10];
  _QWORD *v9;

  v2 = *a2;
  v3 = *(uint64_t **)(*(_QWORD *)a1 + 64);
  v8[0] = v3;
  v8[1] = v3;
  v8[2] = v3;
  v8[3] = v3;
  v8[4] = v3;
  v8[5] = v3;
  v8[6] = v3;
  v8[7] = v3;
  v8[8] = v3;
  v8[9] = v3;
  v4 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v4 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v7);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **))off_1E0FD6F80[v4])(&v9);
    if (result)
      return WGSL::TypeStore::arrayType(*v3, result, v6, 0);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BOOL8 v7;
  _QWORD v8[10];
  _QWORD *v9;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v8[0] = v3;
  v8[1] = v3;
  v8[2] = v3;
  v8[3] = v3;
  v8[4] = v3;
  v8[5] = v3;
  v8[6] = v3;
  v8[7] = v3;
  v8[8] = v3;
  v8[9] = v3;
  v4 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v4 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(v7);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **))off_1E0FD6F80[v4])(&v9);
    if (result)
    {
      v6 = 192;
      if (*(_QWORD *)(*(_QWORD *)v3 + 64) == result)
        v6 = 184;
      return *(_QWORD *)(*(_QWORD *)v3 + v6);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t result;

  v2 = *a2;
  v3 = **a1;
  v4 = *(_DWORD **)(v3 + 32);
  if (*v4 <= *a2
    || (result = *(_QWORD *)&v4[2 * v2 + 2]) != 0
    && (result = WGSL::satisfyOrPromote(result, BYTE4(v2), *(_QWORD **)v3)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1824E4498);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_0,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_1,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_2,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_3,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_4,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_5,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_6,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_7,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_8,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_9,WGSL::OverloadResolver::materialize(std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>> const&)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::variant<WGSL::ValueVariable,unsigned int> const&)::$_0,WGSL::OverloadResolver::materialize(std::variant<WGSL::ValueVariable,unsigned int> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::ValueVariable,unsigned int> const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;

  v2 = *a2;
  v3 = *(_DWORD **)(**(_QWORD **)a1 + 40);
  if (*v3 <= v2)
  {
    result = 146;
    __break(0xC471u);
    goto LABEL_5;
  }
  result = *(_QWORD *)&v3[2 * v2 + 1];
  if ((result & 0xFF00000000) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::OverloadResolver::materialize(std::variant<WGSL::ValueVariable,unsigned int> const&)::$_0,WGSL::OverloadResolver::materialize(std::variant<WGSL::ValueVariable,unsigned int> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::ValueVariable,unsigned int> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

void WGSL::parse<WGSL::Lexer<unsigned char>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 v6;
  int v7;
  _DWORD *v8;
  void *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  __int128 v19;
  int *v20;
  __int128 v21;
  char v22;
  _QWORD v23[3];
  WTF *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  __int128 v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = 0;
  v36 = 0u;
  v35 = 0u;
  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4);
    *(_QWORD *)&v35 = v4;
    *((_QWORD *)&v35 + 1) = v5;
    if ((_DWORD)v5)
      v6 = *v4;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
    v35 = 0uLL;
  }
  v34[0] = v6;
  *(_QWORD *)&v36 = 1;
  DWORD2(v36) = 0;
  v23[0] = a1;
  v23[1] = a1 + 39;
  v23[2] = v34;
  WGSL::Lexer<unsigned char>::lex(v34, (uint64_t)&v24);
  v27 = 0;
  v28 = 0;
  if (!v26)
  {
    __break(0xC471u);
    return;
  }
  v29 = *(_DWORD *)v24;
  v30 = *(_OWORD *)((char *)v24 + 4);
  v7 = *(_DWORD *)v24;
  if (*(_DWORD *)v24 <= 8u)
  {
    if (((1 << v7) & 0x38) != 0)
    {
      v8 = (_DWORD *)*((_QWORD *)v24 + 3);
LABEL_15:
      v31 = v8;
      goto LABEL_16;
    }
    if (((1 << v7) & 0xC4) != 0)
    {
      v31 = (_DWORD *)*((_QWORD *)v24 + 3);
      goto LABEL_16;
    }
    if (v7 == 8)
    {
      v31 = 0;
      v8 = (_DWORD *)*((_QWORD *)v24 + 3);
      if (v8)
        *v8 += 2;
      goto LABEL_15;
    }
  }
LABEL_16:
  v32 = v30;
  v33 = DWORD2(v30);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseShader((uint64_t)&v20, (uint64_t)v23);
  if (v22)
  {
    v10 = v20;
    if (v20)
    {
      *v20 += 2;
      v19 = v21;
      v11 = WTF::fastMalloc((WTF *)0x18);
      *v10 += 2;
    }
    else
    {
      v19 = v21;
      v11 = WTF::fastMalloc((WTF *)0x18);
    }
    *(_QWORD *)v11 = v10;
    *(_OWORD *)(v11 + 8) = v19;
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = 0x100000001;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 1;
    if (v10)
    {
      v12 = *v10 - 2;
      if (*v10 == 2)
      {
        WTF::StringImpl::destroy();
        v13 = *v10 - 2;
        if (*v10 != 2)
        {
LABEL_22:
          *v10 = v13;
          if (v29 != 8)
            goto LABEL_33;
LABEL_26:
          v14 = v31;
          v31 = 0;
          if (v14)
          {
            if (*v14 == 2)
              WTF::StringImpl::destroy();
            else
              *v14 -= 2;
          }
          goto LABEL_33;
        }
      }
      else
      {
        *v10 = v12;
        v13 = v12 - 2;
        if (v13)
          goto LABEL_22;
      }
      WTF::StringImpl::destroy();
      if (v29 != 8)
        goto LABEL_33;
      goto LABEL_26;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  if (v29 == 8)
    goto LABEL_26;
LABEL_33:
  v15 = v24;
  if (v26)
  {
    v16 = 32 * v26;
    v17 = (_DWORD **)((char *)v24 + 24);
    do
    {
      if (*((_DWORD *)v17 - 6) == 8)
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          if (*v18 == 2)
            WTF::StringImpl::destroy();
          else
            *v18 -= 2;
        }
      }
      v17 += 4;
      v16 -= 32;
    }
    while (v16);
    v15 = v24;
  }
  if (v15)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree(v15, v9);
  }
}

void WGSL::parse<WGSL::Lexer<char16_t>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 v6;
  int v7;
  _DWORD *v8;
  void *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  __int128 v19;
  int *v20;
  __int128 v21;
  char v22;
  _QWORD v23[3];
  WTF *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  __int128 v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  unsigned __int16 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = 0;
  v36 = 0u;
  v35 = 0u;
  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned __int16 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4);
    *(_QWORD *)&v35 = v4;
    *((_QWORD *)&v35 + 1) = v5;
    if ((_DWORD)v5)
      v6 = *v4;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
    v35 = 0uLL;
  }
  v34 = v6;
  *(_QWORD *)&v36 = 1;
  DWORD2(v36) = 0;
  v23[0] = a1;
  v23[1] = a1 + 39;
  v23[2] = &v34;
  WGSL::Lexer<char16_t>::lex(&v34, (uint64_t)&v24);
  v27 = 0;
  v28 = 0;
  if (!v26)
  {
    __break(0xC471u);
    return;
  }
  v29 = *(_DWORD *)v24;
  v30 = *(_OWORD *)((char *)v24 + 4);
  v7 = *(_DWORD *)v24;
  if (*(_DWORD *)v24 <= 8u)
  {
    if (((1 << v7) & 0x38) != 0)
    {
      v8 = (_DWORD *)*((_QWORD *)v24 + 3);
LABEL_15:
      v31 = v8;
      goto LABEL_16;
    }
    if (((1 << v7) & 0xC4) != 0)
    {
      v31 = (_DWORD *)*((_QWORD *)v24 + 3);
      goto LABEL_16;
    }
    if (v7 == 8)
    {
      v31 = 0;
      v8 = (_DWORD *)*((_QWORD *)v24 + 3);
      if (v8)
        *v8 += 2;
      goto LABEL_15;
    }
  }
LABEL_16:
  v32 = v30;
  v33 = DWORD2(v30);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseShader((uint64_t)&v20, (uint64_t)v23);
  if (v22)
  {
    v10 = v20;
    if (v20)
    {
      *v20 += 2;
      v19 = v21;
      v11 = WTF::fastMalloc((WTF *)0x18);
      *v10 += 2;
    }
    else
    {
      v19 = v21;
      v11 = WTF::fastMalloc((WTF *)0x18);
    }
    *(_QWORD *)v11 = v10;
    *(_OWORD *)(v11 + 8) = v19;
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = 0x100000001;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 1;
    if (v10)
    {
      v12 = *v10 - 2;
      if (*v10 == 2)
      {
        WTF::StringImpl::destroy();
        v13 = *v10 - 2;
        if (*v10 != 2)
        {
LABEL_22:
          *v10 = v13;
          if (v29 != 8)
            goto LABEL_33;
LABEL_26:
          v14 = v31;
          v31 = 0;
          if (v14)
          {
            if (*v14 == 2)
              WTF::StringImpl::destroy();
            else
              *v14 -= 2;
          }
          goto LABEL_33;
        }
      }
      else
      {
        *v10 = v12;
        v13 = v12 - 2;
        if (v13)
          goto LABEL_22;
      }
      WTF::StringImpl::destroy();
      if (v29 != 8)
        goto LABEL_33;
      goto LABEL_26;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  if (v29 == 8)
    goto LABEL_26;
LABEL_33:
  v15 = v24;
  if (v26)
  {
    v16 = 32 * v26;
    v17 = (_DWORD **)((char *)v24 + 24);
    do
    {
      if (*((_DWORD *)v17 - 6) == 8)
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          if (*v18 == 2)
            WTF::StringImpl::destroy();
          else
            *v18 -= 2;
        }
      }
      v17 += 4;
      v16 -= 32;
    }
    while (v16);
    v15 = v24;
  }
  if (v15)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree(v15, v9);
  }
}

__n128 WGSL::Parser<WGSL::Lexer<unsigned char>>::parseShader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  _OWORD *v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v60;
  const char *v61;
  const char *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  _DWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  _DWORD *v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  _DWORD *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  _DWORD *v109;
  char **v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  _DWORD *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  _DWORD *v127;
  const char *v128;
  const char *v129;
  uint64_t v130;
  int v131;
  int v132;
  _BOOL4 v133;
  unint64_t v134;
  BOOL v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  _DWORD *v146;
  _DWORD *v147;
  _DWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  __n128 *v161;
  uint64_t (**v162)();
  const char *v163;
  uint64_t v164;
  int v165;
  void *v166;
  uint64_t v167;
  const char *v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  _DWORD *v175;
  uint64_t v176;
  const char *v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  _DWORD *v185;
  const char *v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  _DWORD *v199;
  uint64_t v200;
  const char *v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  _DWORD *v210;
  const char *v211;
  const char *v212;
  const char *v213;
  const char *v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  _DWORD *v224;
  const char *v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int v232;
  _DWORD *v233;
  unint64_t v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;
  _DWORD *v242;
  unint64_t v243;
  const char *v244;
  uint64_t v245;
  const char *v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  _DWORD *v255;
  unint64_t v256;
  unint64_t v257;
  _DWORD *v258;
  _QWORD *v259;
  const char *v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  _DWORD *v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  _DWORD *v278;
  _DWORD *v279;
  _DWORD *v280;
  WTF *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  const char *v287;
  uint64_t v288;
  __n128 *v289;
  uint64_t v290;
  WTF *v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  _DWORD *v300;
  _DWORD *v301;
  const char *v302;
  uint64_t v303;
  _QWORD *v304;
  unsigned int v305;
  void *v306;
  unsigned int v307;
  const char *v308;
  int v309;
  _DWORD *v310;
  unint64_t v311;
  _QWORD *v312;
  int v313;
  unsigned int v314;
  unsigned int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  unsigned int v320;
  _DWORD *v321;
  unint64_t v322;
  _DWORD *v323;
  int v324;
  uint64_t v325;
  void *v326;
  unint64_t v327;
  uint64_t v328;
  const char *v329;
  uint64_t v330;
  const char *v331;
  uint64_t v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  unsigned int v340;
  _DWORD *v341;
  _DWORD *v342;
  const char *v343;
  uint64_t v344;
  _QWORD *v345;
  unsigned int v346;
  unsigned int v347;
  _DWORD *v348;
  unint64_t v349;
  _QWORD *v350;
  int v351;
  _DWORD *v352;
  _DWORD *v353;
  unint64_t v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  _DWORD *v362;
  unint64_t v363;
  _DWORD *v364;
  const char *v365;
  unint64_t v366;
  const char *v367;
  unint64_t v368;
  unint64_t v369;
  WTF *v370;
  int v371;
  _DWORD *v372;
  const char *v373;
  const char *v374;
  unint64_t v375;
  unint64_t v376;
  int v377;
  unsigned int v378;
  unsigned int v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  unsigned int v384;
  _DWORD *v385;
  unsigned int v386;
  uint64_t v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int v393;
  unsigned int v394;
  _DWORD *v395;
  WTF *v396;
  uint64_t v397;
  const char *v398;
  int v399;
  uint64_t v400;
  unsigned int v401;
  unsigned int v402;
  _DWORD *v403;
  char *v404;
  int v405;
  unint64_t v406;
  _DWORD *v407;
  _QWORD *v408;
  _QWORD *v409;
  unsigned int v410;
  uint64_t v411;
  const char *v412;
  const char *v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _DWORD **v417;
  _DWORD *v418;
  WTF *v419;
  uint64_t v420;
  const char *v421;
  const char *v422;
  unint64_t v423;
  uint64_t v424;
  const char *v425;
  unsigned int v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  const char **v431;
  uint64_t v432;
  const char *v433;
  _DWORD *v434;
  const char *v435;
  _DWORD *v436;
  const char *v437;
  char *v438;
  unint64_t v439;
  int v440;
  unint64_t v441;
  unint64_t v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unsigned int v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  __n128 *v453;
  const char *v455;
  const char *v456;
  unint64_t v457;
  unsigned int v458;
  _DWORD *v459;
  _DWORD *v460;
  _BYTE v461[24];
  uint64_t v462;
  _DWORD v463[12];
  unsigned int v464;
  const char *v465;
  __n128 v466;
  unsigned int v467;
  const char *v468;
  __n128 v469;
  unsigned int v470;
  _DWORD *v471;
  _DWORD *v472;
  const char *v473;
  __n128 v474;
  unsigned int v475;
  WTF *v476;
  uint64_t v477;
  _BYTE v478[24];
  _DWORD *v479;
  unsigned int v480;
  const char *v481;
  __n128 v482;
  unsigned int v483;
  _DWORD *v484;
  _DWORD *v485;
  const char *v486;
  const char *v487;
  __n128 v488;
  unsigned int v489;
  __int128 v490;

  v452 = *(_QWORD *)(a2 + 88);
  v451 = *(unsigned int *)(a2 + 96);
  v3 = *(unsigned int *)(a2 + 36);
  *(_QWORD *)v461 = 0;
  *(_QWORD *)&v461[8] = 0;
  *(_QWORD *)&v461[16] = v463;
  result.n128_u64[0] = 16;
  v462 = 16;
  v5 = v3 - 1;
  if (v3 == 1)
    goto LABEL_70;
  v6 = 0;
  v7 = 0;
  while (2)
  {
    v8 = *(unsigned int *)(a2 + 36);
    if (v7 >= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1824E856CLL);
    }
    v9 = *(_QWORD *)(a2 + 24);
    v10 = (_DWORD *)(v9 + 32 * v7);
    switch(*v10)
    {
      case 8:
      case 0x22:
        v24 = v7 + 1;
        if (v7 + 1 >= v8)
        {
          __break(0xC471u);
          JUMPOUT(0x1824E8594);
        }
        v25 = (_DWORD *)(v9 + 32 * v24);
        if (*v25 != 55)
          goto LABEL_6;
        v26 = *(_QWORD *)v461;
        v27 = *(_QWORD *)&v461[8];
        if (*(_QWORD *)v461)
        {
          if (*(_QWORD *)&v461[8] + 1 != *(_QWORD *)v461)
            goto LABEL_60;
          v28 = v462;
          v29 = *(char **)&v461[16];
          v30 = v462 + ((unint64_t)v462 >> 2);
          if (v30 < 0x10)
            goto LABEL_45;
        }
        else
        {
          v28 = v462;
          if (!*(_QWORD *)&v461[8])
          {
            if ((_DWORD)v462)
              goto LABEL_60;
            v27 = 0;
            v29 = *(char **)&v461[16];
LABEL_45:
            *(_QWORD *)&v461[16] = v463;
            LODWORD(v462) = 16;
            v31 = v463;
            if (*(_QWORD *)v461 > v27)
              goto LABEL_46;
            goto LABEL_54;
          }
          if (*(_QWORD *)&v461[8] != v462 - 1)
            goto LABEL_60;
          v29 = *(char **)&v461[16];
          v30 = v462 + ((unint64_t)v462 >> 2);
          if (v30 < 0x10)
            goto LABEL_45;
        }
        if (v30 >= 0xFFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1824E85D4);
        }
        v32 = v30 + 1;
        v31 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * (v30 + 1)));
        LODWORD(v462) = v32;
        *(_QWORD *)&v461[16] = v31;
        v26 = *(_QWORD *)v461;
        v27 = *(_QWORD *)&v461[8];
        if (*(_QWORD *)v461 > *(_QWORD *)&v461[8])
        {
LABEL_46:
          memcpy(v31, v29, 16 * v27);
          memcpy((void *)(*(_QWORD *)&v461[16] + 16 * (*(_QWORD *)v461 - v28 + v462)), &v29[16 * *(_QWORD *)v461], 16 * v28 - 16 * *(_QWORD *)v461);
          *(_QWORD *)v461 = *(_QWORD *)v461 - v28 + v462;
          if (v463 == (_DWORD *)v29)
            goto LABEL_60;
          goto LABEL_55;
        }
LABEL_54:
        memcpy(&v31[4 * v26], &v29[16 * v26], 16 * v27 - 16 * v26);
        if (v463 == (_DWORD *)v29)
          goto LABEL_60;
LABEL_55:
        if (v29)
        {
          if (*(char **)&v461[16] == v29)
          {
            *(_QWORD *)&v461[16] = 0;
            LODWORD(v462) = 0;
          }
          WTF::fastFree((WTF *)v29, (void *)a2);
        }
LABEL_60:
        v33 = *(_QWORD *)&v461[8];
        v34 = *(_QWORD *)&v461[16] + 16 * *(_QWORD *)&v461[8];
        *(_QWORD *)v34 = v25;
        *(_DWORD *)(v34 + 8) = v6;
        if (v33 == v462 - 1)
          v35 = 0;
        else
          v35 = v33 + 1;
        *(_QWORD *)&v461[8] = v35;
        v7 = v24;
LABEL_6:
        if (++v7 < v5)
          continue;
        v36 = *(WTF **)&v461[16];
        if (v463 != *(_DWORD **)&v461[16] && *(_QWORD *)&v461[16] != 0)
        {
          *(_QWORD *)&v461[16] = 0;
          LODWORD(v462) = 0;
          WTF::fastFree(v36, (void *)a2);
        }
LABEL_70:
        v38 = (_OWORD *)(a2 + 60);
        v39 = (uint64_t *)(a2 + 80);
        v453 = (__n128 *)(a1 + 8);
        v449 = (uint64_t)&v478[8];
LABEL_72:
        while (2)
        {
          v40 = *(_DWORD *)(a2 + 56);
          if (v40 == 18)
          {
            v82 = *(_DWORD *)(a2 + 36);
            v83 = *(_DWORD *)(a2 + 40) + 1;
            while (1)
            {
              *(_DWORD *)(a2 + 40) = v83;
              if (v82 <= v83)
              {
                __break(0xC471u);
                JUMPOUT(0x1824E851CLL);
              }
              v85 = *(_QWORD *)(a2 + 24);
              v86 = v85 + 32 * v83;
              v87 = *(_DWORD *)v86;
              *(_DWORD *)(a2 + 56) = *(_DWORD *)v86;
              *v38 = *(_OWORD *)(v86 + 4);
              v88 = *(_DWORD *)v86;
              if (v88 > 8)
                goto LABEL_151;
              if (((1 << v88) & 0x38) != 0)
                break;
              if (((1 << v88) & 0xC4) != 0)
              {
                *v39 = *(_QWORD *)(v85 + 32 * v83 + 24);
              }
              else if (v88 == 8)
              {
                *v39 = 0;
                v89 = *(_DWORD **)(v85 + 32 * v83 + 24);
                if (v89)
                  *v89 += 2;
                goto LABEL_160;
              }
LABEL_151:
              v84 = *(_DWORD *)(a2 + 68);
              *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
              *(_DWORD *)(a2 + 96) = v84;
              ++v83;
              if (v87 != 82)
              {
                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseDiagnostic((uint64_t)v461, a2);
                if (v464)
                {
                  if (v464 != 1)
                    goto LABEL_916;
                  v90 = *(_QWORD *)v461;
                  if (*(_QWORD *)v461)
                    **(_DWORD **)v461 += 2;
                  v91 = 0;
                  result = *(__n128 *)&v461[8];
                  *v453 = *(__n128 *)&v461[8];
                  *(_QWORD *)a1 = v90;
                  *(_BYTE *)(a1 + 24) = 1;
                  v92 = v464;
                  if (v464 == -1)
                    goto LABEL_167;
                  goto LABEL_166;
                }
                if (*(_DWORD *)(a2 + 56) != 73)
                {
                  *(_DWORD *)v478 = *(_DWORD *)(a2 + 56);
                  v480 = 1;
                  WGSL::toString(73);
                  if (v480 != 1)
                    goto LABEL_916;
                  WGSL::toString(*(int *)v478);
                  v487 = "Expected a ";
                  v488.n128_u64[0] = 12;
                  v481 = ", but got a ";
                  v482.n128_u64[0] = 13;
                  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v487, (uint64_t *)&v460, (uint64_t)&v481, (uint64_t *)&v459, &v473);
                  if (!v473)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824E85BCLL);
                  }
                  v147 = v459;
                  v459 = 0;
                  if (v147)
                  {
                    if (*v147 != 2)
                    {
                      *v147 -= 2;
                      goto LABEL_283;
                    }
                    WTF::StringImpl::destroy();
                    v148 = v460;
                    v460 = 0;
                    if (v148)
                    {
LABEL_302:
                      if (*v148 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v148 -= 2;
                    }
                  }
                  else
                  {
LABEL_283:
                    v148 = v460;
                    v460 = 0;
                    if (v148)
                      goto LABEL_302;
                  }
                  v160 = v451 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v451) << 32);
                  *(_QWORD *)a1 = v473;
                  *(_QWORD *)(a1 + 8) = v452;
                  *(_QWORD *)(a1 + 16) = v160;
                  *(_BYTE *)(a1 + 24) = 1;
                  if (v480 == -1)
                  {
                    v91 = 0;
                    v92 = v464;
                    if (v464 != -1)
                      goto LABEL_166;
                  }
                  else
                  {
                    ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v480])(&v487, v478);
                    v91 = 0;
                    v92 = v464;
                    if (v464 != -1)
                      goto LABEL_166;
                  }
                  goto LABEL_167;
                }
                *(_OWORD *)&v478[4] = *v38;
                *(_DWORD *)v478 = 73;
                v480 = 0;
                v102 = *(_DWORD *)(a2 + 36);
                v103 = *(_DWORD *)(a2 + 40) + 1;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v103;
                  if (v102 <= v103)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824E854CLL);
                  }
                  v105 = *(_QWORD *)(a2 + 24);
                  v106 = v105 + 32 * v103;
                  v107 = *(_DWORD *)v106;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v106;
                  *v38 = *(_OWORD *)(v106 + 4);
                  v108 = *(_DWORD *)v106;
                  if (v108 <= 8)
                  {
                    if (((1 << v108) & 0x38) != 0)
                    {
                      v109 = *(_DWORD **)(v105 + 32 * v103 + 24);
                      goto LABEL_195;
                    }
                    if (((1 << v108) & 0xC4) != 0)
                    {
                      *v39 = *(_QWORD *)(v105 + 32 * v103 + 24);
                    }
                    else if (v108 == 8)
                    {
                      *v39 = 0;
                      v109 = *(_DWORD **)(v105 + 32 * v103 + 24);
                      if (v109)
                        *v109 += 2;
LABEL_195:
                      *v39 = (uint64_t)v109;
                    }
                  }
                  v104 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v104;
                  ++v103;
                  if (v107 == 82)
                    continue;
                  break;
                }
                v149 = *(_QWORD **)(a2 + 8);
                *(_QWORD *)v478 = v452;
                *(_DWORD *)&v478[8] = v451;
                *(_DWORD *)&v478[12] = v104 - v451;
                v150 = WGSL::AST::Builder::construct<WGSL::AST::DiagnosticDirective,WGSL::SourceSpan,WGSL::AST::Diagnostic,void>(v149, v478, (uint64_t)v461);
                v151 = *(_QWORD *)a2;
                v152 = *(unsigned int *)(*(_QWORD *)a2 + 92);
                if ((_DWORD)v152 == *(_DWORD *)(*(_QWORD *)a2 + 88))
                {
                  v450 = v150;
                  v153 = v152 + (v152 >> 2);
                  if (v153 >= 0x10)
                    v154 = v153 + 1;
                  else
                    v154 = 16;
                  if (v154 <= v152 + 1)
                    v155 = v152 + 1;
                  else
                    v155 = v154;
                  if (v155 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824E85C4);
                  }
                  v156 = *(void **)(v151 + 80);
                  v157 = (void *)WTF::fastMalloc((WTF *)(8 * v155));
                  *(_DWORD *)(v151 + 88) = v155;
                  *(_QWORD *)(v151 + 80) = v157;
                  memcpy(v157, v156, 8 * v152);
                  if (v156)
                  {
                    if (*(void **)(v151 + 80) == v156)
                    {
                      *(_QWORD *)(v151 + 80) = 0;
                      *(_DWORD *)(v151 + 88) = 0;
                    }
                    WTF::fastFree((WTF *)v156, v158);
                  }
                  v159 = *(unsigned int *)(v151 + 92);
                  *(_QWORD *)(*(_QWORD *)(v151 + 80) + 8 * v159) = v450;
                  *(_DWORD *)(v151 + 92) = v159 + 1;
                  v91 = 1;
                  v92 = v464;
                  if (v464 == -1)
                    goto LABEL_167;
LABEL_166:
                  ((void (*)(_BYTE *, _BYTE *))off_1E0FD7030[v92])(v478, v461);
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v151 + 80) + 8 * v152) = v150;
                  *(_DWORD *)(v151 + 92) = v152 + 1;
                  v91 = 1;
                  v92 = v464;
                  if (v464 != -1)
                    goto LABEL_166;
                }
LABEL_167:
                if ((v91 & 1) == 0)
                  return result;
                goto LABEL_72;
              }
            }
            v89 = *(_DWORD **)(v85 + 32 * v83 + 24);
LABEL_160:
            *v39 = (uint64_t)v89;
            goto LABEL_151;
          }
          if (v40 != 21)
          {
            if (v40 == 29)
            {
              v41 = *(_QWORD *)(a2 + 88);
              v42 = *(unsigned int *)(a2 + 96);
              v43 = *(_DWORD *)(a2 + 36);
              v44 = *(_DWORD *)(a2 + 40) + 1;
              while (1)
              {
                *(_DWORD *)(a2 + 40) = v44;
                if (v43 <= v44)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824E8514);
                }
                v46 = *(_QWORD *)(a2 + 24);
                v47 = v46 + 32 * v44;
                v48 = *(_DWORD *)v47;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v47;
                *v38 = *(_OWORD *)(v47 + 4);
                v49 = *(_DWORD *)v47;
                if (v49 > 8)
                  goto LABEL_77;
                if (((1 << v49) & 0x38) != 0)
                  break;
                if (((1 << v49) & 0xC4) != 0)
                {
                  *v39 = *(_QWORD *)(v46 + 32 * v44 + 24);
                }
                else if (v49 == 8)
                {
                  *v39 = 0;
                  v50 = *(_DWORD **)(v46 + 32 * v44 + 24);
                  if (v50)
                    *v50 += 2;
                  goto LABEL_86;
                }
LABEL_77:
                v45 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v45;
                ++v44;
                if (v48 != 82)
                {
                  while (1)
                  {
                    if (v48 != 8)
                    {
                      *(_DWORD *)v461 = v48;
                      v463[0] = 1;
                      WGSL::toString(8);
                      if (v463[0] != 1)
                        goto LABEL_916;
                      WGSL::toString(*(int *)v461);
                      v487 = "Expected a ";
                      v488.n128_u64[0] = 12;
                      v481 = ", but got a ";
                      v482.n128_u64[0] = 13;
                      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v487, (uint64_t *)&v468, (uint64_t)&v481, (uint64_t *)&v465, &v473);
                      if (!v473)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824E8554);
                      }
                      v61 = v465;
                      v465 = 0;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 != 2)
                        {
                          *(_DWORD *)v61 -= 2;
                          goto LABEL_109;
                        }
                        WTF::StringImpl::destroy();
                        v62 = v468;
                        v468 = 0;
                        if (v62)
                        {
LABEL_127:
                          if (*(_DWORD *)v62 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v62 -= 2;
                        }
                      }
                      else
                      {
LABEL_109:
                        v62 = v468;
                        v468 = 0;
                        if (v62)
                          goto LABEL_127;
                      }
                      v71 = v42 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v42) << 32);
                      *(_QWORD *)v478 = v473;
                      goto LABEL_131;
                    }
                    *(_DWORD *)v461 = 8;
                    *(_OWORD *)&v461[4] = *v38;
                    v52 = (_DWORD *)*v39;
                    if (*v39)
                      *v52 += 2;
                    v462 = (uint64_t)v52;
                    v463[0] = 0;
                    v53 = *(_DWORD *)(a2 + 36);
                    v54 = *(_DWORD *)(a2 + 40) + 1;
                    do
                    {
                      *(_DWORD *)(a2 + 40) = v54;
                      if (v53 <= v54)
                        goto LABEL_917;
                      v56 = *(_QWORD *)(a2 + 24);
                      v57 = v56 + 32 * v54;
                      v58 = *(_DWORD *)v57;
                      *(_DWORD *)(a2 + 56) = *(_DWORD *)v57;
                      *v38 = *(_OWORD *)(v57 + 4);
                      v59 = *(_DWORD *)v57;
                      if (v59 <= 8)
                      {
                        if (((1 << v59) & 0x38) != 0)
                        {
                          v60 = *(_DWORD **)(v56 + 32 * v54 + 24);
LABEL_103:
                          *v39 = (uint64_t)v60;
                          goto LABEL_94;
                        }
                        if (((1 << v59) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v56 + 32 * v54 + 24);
                          goto LABEL_94;
                        }
                        if (v59 == 8)
                        {
                          *v39 = 0;
                          v60 = *(_DWORD **)(v56 + 32 * v54 + 24);
                          if (v60)
                            *v60 += 2;
                          goto LABEL_103;
                        }
                      }
LABEL_94:
                      v55 = *(_DWORD *)(a2 + 68);
                      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                      *(_DWORD *)(a2 + 96) = v55;
                      ++v54;
                    }
                    while (v58 == 82);
                    if (WGSL::parseLanguageFeature(&v462))
                    {
                      if (*(_DWORD *)(a2 + 56) != 48)
                      {
                        v51 = 4;
                        goto LABEL_132;
                      }
                      v63 = *(_DWORD *)(a2 + 36);
                      v64 = *(_DWORD *)(a2 + 40) + 1;
                      while (1)
                      {
                        *(_DWORD *)(a2 + 40) = v64;
                        if (v63 <= v64)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1824E850CLL);
                        }
                        v66 = *(_QWORD *)(a2 + 24);
                        v67 = v66 + 32 * v64;
                        v68 = *(_DWORD *)v67;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v67;
                        *v38 = *(_OWORD *)(v67 + 4);
                        v69 = *(_DWORD *)v67;
                        if (v69 > 8)
                          goto LABEL_115;
                        if (((1 << v69) & 0x38) != 0)
                          break;
                        if (((1 << v69) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v66 + 32 * v64 + 24);
                        }
                        else if (v69 == 8)
                        {
                          *v39 = 0;
                          v70 = *(_DWORD **)(v66 + 32 * v64 + 24);
                          if (v70)
                            *v70 += 2;
                          goto LABEL_124;
                        }
LABEL_115:
                        v65 = *(_DWORD *)(a2 + 68);
                        result.n128_u64[0] = *(_QWORD *)(a2 + 60);
                        *(_QWORD *)(a2 + 88) = result.n128_u64[0];
                        *(_DWORD *)(a2 + 96) = v65;
                        ++v64;
                        if (v68 != 82)
                        {
                          v51 = 0;
                          goto LABEL_132;
                        }
                      }
                      v70 = *(_DWORD **)(v66 + 32 * v64 + 24);
LABEL_124:
                      *v39 = (uint64_t)v70;
                      goto LABEL_115;
                    }
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v71 = v42 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v42) << 32);
LABEL_131:
                    *(_QWORD *)&v478[8] = v41;
                    *(_QWORD *)&v478[16] = v71;
                    v51 = 1;
                    LOBYTE(v479) = 1;
LABEL_132:
                    if (v463[0] != -1)
                      ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v463[0]])(&v487, v461);
                    if (v51)
                    {
                      if (v51 != 4)
                      {
                        if ((_BYTE)v479)
                        {
                          v438 = *(char **)v478;
LABEL_914:
                          if (v438)
                            goto LABEL_905;
LABEL_915:
                          result = *(__n128 *)&v478[8];
                          *v453 = *(__n128 *)&v478[8];
                          *(_QWORD *)a1 = 0;
                          *(_BYTE *)(a1 + 24) = 1;
                          return result;
                        }
                        goto LABEL_72;
                      }
                      v93 = *(_DWORD *)(a2 + 56);
                      if (v93 == 73)
                      {
LABEL_171:
                        v94 = *(_DWORD *)(a2 + 36);
                        v95 = *(_DWORD *)(a2 + 40) + 1;
                        while (1)
                        {
                          *(_DWORD *)(a2 + 40) = v95;
                          if (v94 <= v95)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1824E853CLL);
                          }
                          v97 = *(_QWORD *)(a2 + 24);
                          v98 = v97 + 32 * v95;
                          v99 = *(_DWORD *)v98;
                          *(_DWORD *)(a2 + 56) = *(_DWORD *)v98;
                          *v38 = *(_OWORD *)(v98 + 4);
                          v100 = *(_DWORD *)v98;
                          if (v100 > 8)
                            goto LABEL_173;
                          if (((1 << v100) & 0x38) != 0)
                            break;
                          if (((1 << v100) & 0xC4) != 0)
                          {
                            *v39 = *(_QWORD *)(v97 + 32 * v95 + 24);
                          }
                          else if (v100 == 8)
                          {
                            *v39 = 0;
                            v101 = *(_DWORD **)(v97 + 32 * v95 + 24);
                            if (v101)
                              *v101 += 2;
                            goto LABEL_182;
                          }
LABEL_173:
                          v96 = *(_DWORD *)(a2 + 68);
                          result.n128_u64[0] = *(_QWORD *)(a2 + 60);
                          *(_QWORD *)(a2 + 88) = result.n128_u64[0];
                          *(_DWORD *)(a2 + 96) = v96;
                          ++v95;
                          if (v99 != 82)
                            goto LABEL_72;
                        }
                        v101 = *(_DWORD **)(v97 + 32 * v95 + 24);
LABEL_182:
                        *v39 = (uint64_t)v101;
                        goto LABEL_173;
                      }
                      WGSL::toString(73);
                      WGSL::toString(v93);
                      *(_QWORD *)v461 = "Expected a ";
                      *(_QWORD *)&v461[8] = 12;
                      v487 = ", but got a ";
                      v488.n128_u64[0] = 13;
                      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v455, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                      if (!v481)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824E8674);
                      }
                      v436 = (_DWORD *)v490;
                      *(_QWORD *)&v490 = 0;
                      if (v436)
                      {
                        if (*v436 != 2)
                        {
                          *v436 -= 2;
                          goto LABEL_897;
                        }
                        WTF::StringImpl::destroy();
                        v437 = v455;
                        v455 = 0;
                        if (v437)
                        {
LABEL_910:
                          if (*(_DWORD *)v437 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v437 -= 2;
                        }
                      }
                      else
                      {
LABEL_897:
                        v437 = v455;
                        v455 = 0;
                        if (v437)
                          goto LABEL_910;
                      }
                      v441 = v42 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v42) << 32);
                      v438 = (char *)v481;
                      *(_QWORD *)&v478[8] = v41;
                      *(_QWORD *)&v478[16] = v441;
                      LOBYTE(v479) = 1;
                      goto LABEL_914;
                    }
                    v48 = *(_DWORD *)(a2 + 56);
                    if (v48 == 73)
                      goto LABEL_171;
                  }
                }
              }
              v50 = *(_DWORD **)(v46 + 32 * v44 + 24);
LABEL_86:
              *v39 = (uint64_t)v50;
              goto LABEL_77;
            }
            v161 = (__n128 *)&v456;
            v162 = off_1E0FD7648;
LABEL_311:
            while (2)
            {
              if (v40 != 73)
              {
                if (v40 == 1)
                {
                  *(_BYTE *)a1 = 0;
                  *(_BYTE *)(a1 + 24) = 0;
                  return result;
                }
                v163 = *(const char **)(a2 + 88);
                v164 = *(unsigned int *)(a2 + 96);
                v165 = *(_DWORD *)(a2 + 56);
                if (v165 != 10)
                {
                  if (v165 == 14)
                  {
                    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseConstAssert((uint64_t)v461, a2);
                    v176 = v462;
                    if ((_DWORD)v462)
                    {
                      if ((_DWORD)v462 != 1)
                        goto LABEL_916;
                      v177 = *(const char **)v461;
                      if (*(_QWORD *)v461)
                        **(_DWORD **)v461 += 2;
                      *v161 = *(__n128 *)&v461[8];
                    }
                    else
                    {
                      v177 = *(const char **)v461;
                    }
                    v455 = v177;
                    v458 = v176;
                    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7218[v176])(v478, v461);
                    goto LABEL_870;
                  }
                  if (v165 == 13)
                  {
                    *(_QWORD *)v478 = 0;
                    *(_QWORD *)&v478[8] = 0;
                    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableWithAttributes((uint64_t)v461, a2, (uint64_t *)v478);
                    if (*(_QWORD *)v478)
                      WTF::fastFree(*(WTF **)v478, v166);
                    v167 = v462;
                    if ((_DWORD)v462)
                    {
                      if ((_DWORD)v462 != 1)
                        goto LABEL_916;
                      v168 = *(const char **)v461;
                      if (*(_QWORD *)v461)
                        **(_DWORD **)v461 += 2;
                      *v161 = *(__n128 *)&v461[8];
LABEL_410:
                      v455 = v168;
                      v458 = v167;
                      goto LABEL_487;
                    }
                    v191 = *(_DWORD *)(a2 + 56);
                    if (v191 == 73)
                    {
                      v192 = *(_DWORD *)(a2 + 36);
                      v193 = *(_DWORD *)(a2 + 40) + 1;
                      while (1)
                      {
                        *(_DWORD *)(a2 + 40) = v193;
                        if (v192 <= v193)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1824E8574);
                        }
                        v195 = *(_QWORD *)(a2 + 24);
                        v196 = v195 + 32 * v193;
                        v197 = *(_DWORD *)v196;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v196;
                        *v38 = *(_OWORD *)(v196 + 4);
                        v198 = *(_DWORD *)v196;
                        if (v198 > 8)
                          goto LABEL_368;
                        if (((1 << v198) & 0x38) != 0)
                          break;
                        if (((1 << v198) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v195 + 32 * v193 + 24);
                        }
                        else if (v198 == 8)
                        {
                          *v39 = 0;
                          v199 = *(_DWORD **)(v195 + 32 * v193 + 24);
                          if (v199)
                            *v199 += 2;
                          goto LABEL_377;
                        }
LABEL_368:
                        v194 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v194;
                        ++v193;
                        if (v197 != 82)
                        {
                          v168 = *(const char **)v461;
                          goto LABEL_410;
                        }
                      }
                      v199 = *(_DWORD **)(v195 + 32 * v193 + 24);
LABEL_377:
                      *v39 = (uint64_t)v199;
                      goto LABEL_368;
                    }
                    WGSL::toString(73);
                    WGSL::toString(v191);
                    *(_QWORD *)v478 = "Expected a ";
                    *(_QWORD *)&v478[8] = 12;
                    v487 = ", but got a ";
                    v488.n128_u64[0] = 13;
                    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v478, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v468, &v481);
                    if (!v481)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824E85FCLL);
                    }
                    v211 = v468;
                    v468 = 0;
                    if (v211)
                    {
                      if (*(_DWORD *)v211 != 2)
                      {
                        *(_DWORD *)v211 -= 2;
                        goto LABEL_401;
                      }
                      WTF::StringImpl::destroy();
                      v212 = v473;
                      v473 = 0;
                      if (v212)
                      {
LABEL_483:
                        if (*(_DWORD *)v212 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *(_DWORD *)v212 -= 2;
                      }
                    }
                    else
                    {
LABEL_401:
                      v212 = v473;
                      v473 = 0;
                      if (v212)
                        goto LABEL_483;
                    }
                    v256 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                    v455 = v481;
                    v456 = v163;
                    v457 = v256;
                    v458 = 1;
LABEL_487:
                    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7040[v167])(v478, v461);
                    v162 = off_1E0FD7648;
                    goto LABEL_870;
                  }
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(&v468, a2);
                  if (v470)
                  {
                    if (v470 != 1)
                      goto LABEL_916;
                    v186 = v468;
                    if (v468)
                      *(_DWORD *)v468 += 2;
                    result = v469;
                    *v161 = v469;
                    v455 = v186;
                    v458 = 1;
                    v187 = v470;
                    if (v470 != -1)
                      goto LABEL_869;
                    goto LABEL_870;
                  }
                  switch(*(_DWORD *)(a2 + 56))
                  {
                    case 0x17:
                      v225 = *(const char **)(a2 + 88);
                      v447 = *(unsigned int *)(a2 + 96);
                      v226 = *(_DWORD *)(a2 + 36);
                      v227 = *(_DWORD *)(a2 + 40) + 1;
                      while (1)
                      {
                        *(_DWORD *)(a2 + 40) = v227;
                        if (v226 <= v227)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1824E8584);
                        }
                        v229 = *(_QWORD *)(a2 + 24);
                        v230 = v229 + 32 * v227;
                        v231 = *(_DWORD *)v230;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v230;
                        *v38 = *(_OWORD *)(v230 + 4);
                        v232 = *(_DWORD *)v230;
                        if (v232 > 8)
                          goto LABEL_435;
                        if (((1 << v232) & 0x38) != 0)
                          break;
                        if (((1 << v232) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v229 + 32 * v227 + 24);
                        }
                        else if (v232 == 8)
                        {
                          *v39 = 0;
                          v233 = *(_DWORD **)(v229 + 32 * v227 + 24);
                          if (v233)
                            *v233 += 2;
                          goto LABEL_444;
                        }
LABEL_435:
                        v228 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v228;
                        ++v227;
                        if (v231 != 82)
                        {
                          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v478, a2);
                          if (v480)
                          {
                            if (v480 != 1)
                              goto LABEL_916;
                            v244 = *(const char **)v478;
                            if (*(_QWORD *)v478)
                              **(_DWORD **)v478 += 2;
                            v466 = *(__n128 *)&v478[8];
                            v465 = v244;
                            v467 = 1;
                            v245 = 1;
LABEL_861:
                            ((void (*)(_BYTE *, _BYTE *))off_1E0FD6FE8[v245])(v461, v478);
LABEL_862:
                            v424 = v467;
                            if (v467)
                            {
                              if (v467 != 1)
                                goto LABEL_916;
                              v425 = v465;
                              if (v465)
                                *(_DWORD *)v465 += 2;
                              *v161 = v466;
                            }
                            else
                            {
                              v425 = v465;
                            }
                            v455 = v425;
                            v458 = v424;
                            ((void (*)(_BYTE *, const char **))off_1E0FD7648[v424])(v461, &v465);
                            v187 = v470;
                            if (v470 != -1)
LABEL_869:
                              ((void (*)(_BYTE *, const char **))off_1E0FD7638[v187])(v461, &v468);
LABEL_870:
                            v426 = v458;
                            if (v458)
                            {
                              if (v458 != 1)
                                goto LABEL_916;
                              v427 = v455;
                              if (v455)
                                *(_DWORD *)v455 += 2;
                              result = *v161;
                              *v453 = *v161;
                              *(_QWORD *)a1 = v427;
                              *(_BYTE *)(a1 + 24) = 1;
                              v428 = v458;
                              if (v458 != -1)
LABEL_875:
                                ((void (*)(_BYTE *, const char **))off_1E0FD7648[v428])(v461, &v455);
                            }
                            else
                            {
                              v429 = *(_QWORD *)a2;
                              v430 = *(unsigned int *)(*(_QWORD *)a2 + 76);
                              if ((_DWORD)v430 == *(_DWORD *)(*(_QWORD *)a2 + 72))
                              {
                                v431 = (const char **)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v429 + 64, v430 + 1, (unint64_t)&v455);
                                v430 = *(unsigned int *)(v429 + 76);
                                v432 = *(_QWORD *)(v429 + 64);
                                v433 = *v431;
                              }
                              else
                              {
                                v432 = *(_QWORD *)(v429 + 64);
                                v433 = v455;
                              }
                              *(_QWORD *)(v432 + 8 * v430) = v433;
                              ++*(_DWORD *)(v429 + 76);
                              v428 = v458;
                              if (v458 != -1)
                                goto LABEL_875;
                            }
                            if (v426)
                              return result;
                            v40 = *(_DWORD *)(a2 + 56);
                            goto LABEL_311;
                          }
                          v443 = v225;
                          v261 = *(_DWORD *)(a2 + 56);
                          if (v261 != 67)
                          {
                            WGSL::toString(67);
                            WGSL::toString(v261);
                            *(_QWORD *)v461 = "Expected a ";
                            *(_QWORD *)&v461[8] = 12;
                            v487 = ", but got a ";
                            v488.n128_u64[0] = 13;
                            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                            if (!v481)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1824E861CLL);
                            }
                            v279 = (_DWORD *)v490;
                            *(_QWORD *)&v490 = 0;
                            if (v279)
                            {
                              if (*v279 == 2)
                                WTF::StringImpl::destroy();
                              else
                                *v279 -= 2;
                            }
                            v373 = v473;
                            v473 = 0;
                            if (v373)
                            {
                              if (*(_DWORD *)v373 == 2)
                                WTF::StringImpl::destroy();
                              else
                                *(_DWORD *)v373 -= 2;
                            }
                            v245 = 0;
                            v375 = v447 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v447) << 32);
                            v465 = v481;
                            v466.n128_u64[0] = (unint64_t)v443;
                            v466.n128_u64[1] = v375;
                            v467 = 1;
                            goto LABEL_861;
                          }
                          v262 = *(_DWORD *)(a2 + 36);
                          v263 = *(_DWORD *)(a2 + 40) + 1;
                          while (2)
                          {
                            *(_DWORD *)(a2 + 40) = v263;
                            if (v262 <= v263)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1824E85DCLL);
                            }
                            v265 = *(_QWORD *)(a2 + 24);
                            v266 = v265 + 32 * v263;
                            v267 = *(_DWORD *)v266;
                            *(_DWORD *)(a2 + 56) = *(_DWORD *)v266;
                            *v38 = *(_OWORD *)(v266 + 4);
                            v268 = *(_DWORD *)v266;
                            if (v268 <= 8)
                            {
                              if (((1 << v268) & 0x38) != 0)
                              {
                                v269 = *(_DWORD **)(v265 + 32 * v263 + 24);
                                goto LABEL_520;
                              }
                              if (((1 << v268) & 0xC4) != 0)
                              {
                                *v39 = *(_QWORD *)(v265 + 32 * v263 + 24);
                              }
                              else if (v268 == 8)
                              {
                                *v39 = 0;
                                v269 = *(_DWORD **)(v265 + 32 * v263 + 24);
                                if (v269)
                                  *v269 += 2;
LABEL_520:
                                *v39 = (uint64_t)v269;
                              }
                            }
                            v264 = *(_DWORD *)(a2 + 68);
                            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                            *(_DWORD *)(a2 + 96) = v264;
                            ++v263;
                            if (v267 == 82)
                              continue;
                            break;
                          }
                          v281 = 0;
                          v282 = 0;
                          v476 = 0;
                          v477 = 0;
                          while (2)
                          {
                            if (*(_DWORD *)(a2 + 56) == 68)
                            {
                              v465 = (const char *)v449;
                              v467 = 1;
                              v162 = off_1E0FD7648;
                            }
                            else
                            {
                              v283 = *(_QWORD *)(a2 + 88);
                              v284 = *(unsigned int *)(a2 + 96);
                              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(&v487, a2);
                              if (v489)
                              {
                                if (v489 != 1)
                                  goto LABEL_916;
                                v285 = v487;
                                if (v487)
                                  *(_DWORD *)v487 += 2;
                                v474 = v488;
                                v473 = v285;
                                v475 = 1;
                                v286 = 1;
                                goto LABEL_596;
                              }
                              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v461, a2);
                              if (v463[0])
                              {
                                if (v463[0] != 1)
                                  goto LABEL_916;
                                v287 = *(const char **)v461;
                                if (*(_QWORD *)v461)
                                  **(_DWORD **)v461 += 2;
                                v474 = *(__n128 *)&v461[8];
                                v473 = v287;
                                v475 = 1;
                                v288 = 1;
                                goto LABEL_595;
                              }
                              v446 = v284;
                              v289 = v161;
                              v290 = v282;
                              v291 = v281;
                              v292 = *(_DWORD *)(a2 + 56);
                              if (v292 != 47)
                              {
                                WGSL::toString(47);
                                WGSL::toString(v292);
                                v481 = "Expected a ";
                                v482.n128_u64[0] = 12;
                                *(_QWORD *)&v490 = ", but got a ";
                                *((_QWORD *)&v490 + 1) = 13;
                                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v481, (uint64_t *)&v485, (uint64_t)&v490, (uint64_t *)&v484, &v486);
                                if (!v486)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1824E862CLL);
                                }
                                v301 = v484;
                                v484 = 0;
                                v281 = v291;
                                v282 = v290;
                                v161 = v289;
                                if (v301)
                                {
                                  if (*v301 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *v301 -= 2;
                                }
                                v310 = v485;
                                v485 = 0;
                                if (v310)
                                {
                                  if (*v310 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *v310 -= 2;
                                }
                                v288 = 0;
                                v311 = v446 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v446) << 32);
                                v473 = v486;
                                v474.n128_u64[0] = v283;
                                v474.n128_u64[1] = v311;
                                v475 = 1;
                                goto LABEL_595;
                              }
                              v293 = *(_DWORD *)(a2 + 36);
                              v294 = *(_DWORD *)(a2 + 40) + 1;
                              v281 = v291;
                              v282 = v290;
                              v161 = v289;
                              while (2)
                              {
                                *(_DWORD *)(a2 + 40) = v294;
                                if (v293 <= v294)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1824E85ECLL);
                                }
                                v296 = *(_QWORD *)(a2 + 24);
                                v297 = v296 + 32 * v294;
                                v298 = *(_DWORD *)v297;
                                *(_DWORD *)(a2 + 56) = *(_DWORD *)v297;
                                *v38 = *(_OWORD *)(v297 + 4);
                                v299 = *(_DWORD *)v297;
                                if (v299 <= 8)
                                {
                                  if (((1 << v299) & 0x38) != 0)
                                  {
                                    v300 = *(_DWORD **)(v296 + 32 * v294 + 24);
                                    goto LABEL_569;
                                  }
                                  if (((1 << v299) & 0xC4) != 0)
                                  {
                                    *v39 = *(_QWORD *)(v296 + 32 * v294 + 24);
                                  }
                                  else if (v299 == 8)
                                  {
                                    *v39 = 0;
                                    v300 = *(_DWORD **)(v296 + 32 * v294 + 24);
                                    if (v300)
                                      *v300 += 2;
LABEL_569:
                                    *v39 = (uint64_t)v300;
                                  }
                                }
                                v295 = *(_DWORD *)(a2 + 68);
                                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                                *(_DWORD *)(a2 + 96) = v295;
                                ++v294;
                                if (v298 == 82)
                                  continue;
                                break;
                              }
                              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeName((uint64_t)&v481, a2);
                              if (v483)
                              {
                                if (v483 != 1)
                                  goto LABEL_916;
                                v302 = v481;
                                if (v481)
                                  *(_DWORD *)v481 += 2;
                                v474 = v482;
                                v473 = v302;
                                v475 = 1;
                                v303 = 1;
LABEL_582:
                                ((void (*)(__int128 *, const char **))off_1E0FD71D8[v303])(&v490, &v481);
                                v288 = v463[0];
                                if (v463[0] == -1)
                                  goto LABEL_583;
LABEL_595:
                                ((void (*)(const char **, _BYTE *))off_1E0FD6FE8[v288])(&v481, v461);
                                v286 = v489;
                                if (v489 != -1)
                                  goto LABEL_596;
LABEL_584:
                                v307 = v475;
                                if (v475)
                                  goto LABEL_585;
LABEL_597:
                                if ((_DWORD)v282 == (_DWORD)v477)
                                {
                                  v312 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v476, v282 + 1, (unint64_t)&v473);
                                  v313 = HIDWORD(v477);
                                  v281 = v476;
                                  *((_QWORD *)v476 + HIDWORD(v477)) = *v312;
                                }
                                else
                                {
                                  *((_QWORD *)v281 + v282) = v473;
                                  v313 = HIDWORD(v477);
                                }
                                v282 = (v313 + 1);
                                HIDWORD(v477) = v282;
                                if (v282 < 0x100)
                                {
                                  if (*(_DWORD *)(a2 + 56) != 48)
                                  {
                                    v309 = 7;
                                    goto LABEL_616;
                                  }
                                  v314 = *(_DWORD *)(a2 + 36);
                                  v315 = *(_DWORD *)(a2 + 40) + 1;
                                  while (1)
                                  {
                                    *(_DWORD *)(a2 + 40) = v315;
                                    if (v314 <= v315)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x1824E85A4);
                                    }
                                    v317 = *(_QWORD *)(a2 + 24);
                                    v318 = v317 + 32 * v315;
                                    v319 = *(_DWORD *)v318;
                                    *(_DWORD *)(a2 + 56) = *(_DWORD *)v318;
                                    *v38 = *(_OWORD *)(v318 + 4);
                                    v320 = *(_DWORD *)v318;
                                    if (v320 > 8)
                                      goto LABEL_604;
                                    if (((1 << v320) & 0x38) != 0)
                                      break;
                                    if (((1 << v320) & 0xC4) != 0)
                                    {
                                      *v39 = *(_QWORD *)(v317 + 32 * v315 + 24);
                                    }
                                    else if (v320 == 8)
                                    {
                                      *v39 = 0;
                                      v321 = *(_DWORD **)(v317 + 32 * v315 + 24);
                                      if (v321)
                                        *v321 += 2;
                                      goto LABEL_613;
                                    }
LABEL_604:
                                    v316 = *(_DWORD *)(a2 + 68);
                                    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                                    *(_DWORD *)(a2 + 96) = v316;
                                    ++v315;
                                    if (v319 != 82)
                                    {
                                      v309 = 0;
                                      goto LABEL_616;
                                    }
                                  }
                                  v321 = *(_DWORD **)(v317 + 32 * v315 + 24);
LABEL_613:
                                  *v39 = (uint64_t)v321;
                                  goto LABEL_604;
                                }
                                WTF::String::number((WTF::String *)0xFF);
                                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"function cannot have more than ", 32, (uint64_t *)&v472, (int8x16_t *)" parameters", 12, v461);
                                v322 = v447 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v447) << 32);
                                v449 = *(_QWORD *)v461;
                                v466.n128_u64[0] = (unint64_t)v443;
                                v466.n128_u64[1] = v322;
                                *(_QWORD *)v461 = 0;
                                v323 = v472;
                                v472 = 0;
                                if (v323)
                                {
                                  if (*v323 != 2)
                                  {
                                    *v323 -= 2;
                                    goto LABEL_621;
                                  }
                                  WTF::StringImpl::destroy();
                                  v309 = 1;
                                }
                                else
                                {
LABEL_621:
                                  v309 = 1;
                                }
                              }
                              else
                              {
                                v304 = *(_QWORD **)(a2 + 8);
                                v305 = *(_DWORD *)(a2 + 96) - v446;
                                *(_QWORD *)&v490 = v283;
                                *((_QWORD *)&v490 + 1) = __PAIR64__(v305, v446);
                                LOBYTE(v486) = 0;
                                v473 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>(v304, &v490, (uint64_t)v461, (uint64_t *)&v481, (uint64_t *)&v487, (char *)&v486);
                                v475 = 0;
                                v303 = v483;
                                if (v483 != -1)
                                  goto LABEL_582;
                                v288 = v463[0];
                                if (v463[0] != -1)
                                  goto LABEL_595;
LABEL_583:
                                v286 = v489;
                                if (v489 == -1)
                                  goto LABEL_584;
LABEL_596:
                                ((void (*)(_BYTE *, const char **))off_1E0FD7638[v286])(v461, &v487);
                                v307 = v475;
                                if (!v475)
                                  goto LABEL_597;
LABEL_585:
                                if (v307 != 1)
                                  goto LABEL_916;
                                v308 = v473;
                                if (v473)
                                  *(_DWORD *)v473 += 2;
                                v449 = (uint64_t)v308;
                                v466 = v474;
                                v309 = 1;
                              }
LABEL_616:
                              if (v475 != -1)
                                ((void (*)(_BYTE *, const char **))off_1E0FD7448[v475])(v461, &v473);
                              if (!v309)
                                continue;
                              v162 = off_1E0FD7648;
                              if (v309 != 7)
                              {
                                v465 = (const char *)v449;
LABEL_857:
                                v467 = 1;
                                goto LABEL_858;
                              }
                              v370 = v281;
                              v465 = (const char *)v449;
                              v467 = 1;
                              v371 = *(_DWORD *)(a2 + 56);
                              if (v371 != 68)
                              {
                                WGSL::toString(68);
                                WGSL::toString(v371);
                                *(_QWORD *)v461 = "Expected a ";
                                *(_QWORD *)&v461[8] = 12;
                                v487 = ", but got a ";
                                v488.n128_u64[0] = 13;
                                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                                if (!v481)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1824E8644);
                                }
                                v372 = (_DWORD *)v490;
                                *(_QWORD *)&v490 = 0;
                                v281 = v370;
                                if (v372)
                                {
                                  if (*v372 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *v372 -= 2;
                                }
                                v422 = v473;
                                v473 = 0;
                                if (v422)
                                {
                                  if (*(_DWORD *)v422 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *(_DWORD *)v422 -= 2;
                                }
                                v423 = v447 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v447) << 32);
                                v465 = v481;
                                v466.n128_u64[0] = (unint64_t)v443;
                                v466.n128_u64[1] = v423;
                                goto LABEL_857;
                              }
                            }
                            break;
                          }
                          v386 = *(_DWORD *)(a2 + 36);
                          LODWORD(v387) = *(_DWORD *)(a2 + 40);
                          v388 = v387 + 2;
                          while (2)
                          {
                            v387 = (v387 + 1);
                            *(_DWORD *)(a2 + 40) = v387;
                            if (v386 <= v387)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1824E8654);
                            }
                            v390 = v388;
                            v391 = *(_QWORD *)(a2 + 24);
                            v392 = v391 + 32 * v387;
                            v393 = *(_DWORD *)v392;
                            *(_DWORD *)(a2 + 56) = *(_DWORD *)v392;
                            *v38 = *(_OWORD *)(v392 + 4);
                            v394 = *(_DWORD *)v392;
                            if (v394 <= 8)
                            {
                              if (((1 << v394) & 0x38) != 0)
                              {
                                v395 = *(_DWORD **)(v391 + 32 * v387 + 24);
                                goto LABEL_779;
                              }
                              if (((1 << v394) & 0xC4) != 0)
                              {
                                *v39 = *(_QWORD *)(v391 + 32 * v387 + 24);
                              }
                              else if (v394 == 8)
                              {
                                *v39 = 0;
                                v395 = *(_DWORD **)(v391 + 32 * v387 + 24);
                                if (v395)
                                  *v395 += 2;
LABEL_779:
                                *v39 = (uint64_t)v395;
                              }
                            }
                            v389 = *(_DWORD *)(a2 + 68);
                            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                            *(_DWORD *)(a2 + 96) = v389;
                            v388 = v390 + 1;
                            if (v393 == 82)
                              continue;
                            break;
                          }
                          v396 = 0;
                          v481 = 0;
                          v482.n128_u64[0] = 0;
                          v473 = 0;
                          if (v393 != 39)
                            goto LABEL_781;
                          while (2)
                          {
                            *(_DWORD *)(a2 + 40) = v390;
                            if (v386 <= v390)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1824E865CLL);
                            }
                            v400 = v391 + 32 * v390;
                            v401 = *(_DWORD *)v400;
                            *(_DWORD *)(a2 + 56) = *(_DWORD *)v400;
                            *v38 = *(_OWORD *)(v400 + 4);
                            v402 = *(_DWORD *)v400;
                            if (v402 <= 8)
                            {
                              if (((1 << v402) & 0x38) != 0)
                              {
                                v403 = *(_DWORD **)(v391 + 32 * v390 + 24);
                                goto LABEL_796;
                              }
                              if (((1 << v402) & 0xC4) != 0)
                              {
                                *v39 = *(_QWORD *)(v391 + 32 * v390 + 24);
                              }
                              else if (v402 == 8)
                              {
                                *v39 = 0;
                                v403 = *(_DWORD **)(v391 + 32 * v390 + 24);
                                if (v403)
                                  *v403 += 2;
LABEL_796:
                                *v39 = (uint64_t)v403;
                              }
                            }
                            v399 = *(_DWORD *)(a2 + 68);
                            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                            *(_DWORD *)(a2 + 96) = v399;
                            ++v390;
                            if (v401 != 82)
                            {
                              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(v461, a2);
                              if ((_DWORD)v462)
                              {
                                if ((_DWORD)v462 == 1)
                                {
                                  v404 = *(char **)v461;
                                  if (*(_QWORD *)v461)
                                  {
                                    v405 = **(_DWORD **)v461;
                                    **(_DWORD **)v461 += 2;
                                    v466 = *(__n128 *)&v461[8];
                                    v465 = v404;
                                    v467 = 1;
                                    if (v405)
                                      *(_DWORD *)v404 = v405;
                                    else
                                      WTF::StringImpl::destroy();
                                    v281 = v476;
                                  }
                                  else
                                  {
                                    v466 = *(__n128 *)&v461[8];
                                    v465 = 0;
                                    v467 = 1;
                                    v281 = v476;
                                  }
                                  goto LABEL_858;
                                }
LABEL_916:
                                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_917:
                                __break(0xC471u);
                                JUMPOUT(0x1824E84FCLL);
                              }
                              v396 = *(WTF **)v461;
                              v481 = *(const char **)v461;
                              v482.n128_u64[0] = *(_QWORD *)&v461[8];
                              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeName((uint64_t)&v487, a2);
                              v411 = v489;
                              if (v489)
                              {
                                if (v489 != 1)
                                  goto LABEL_916;
                                v412 = v487;
                                if (v487)
                                  *(_DWORD *)v487 += 2;
                                v466 = v488;
                                v465 = v412;
                                v467 = 1;
                              }
                              else
                              {
                                v473 = v487;
                              }
                              ((void (*)(__int128 *, const char **))off_1E0FD71D8[v411])(&v490, &v487);
                              if ((_DWORD)v411)
                              {
LABEL_848:
                                if (v396)
                                {
                                  v481 = 0;
                                  v482.n128_u32[0] = 0;
                                  WTF::fastFree(v396, v306);
                                }
                                v281 = v476;
LABEL_858:
                                if (v281)
                                {
                                  v476 = 0;
                                  LODWORD(v477) = 0;
                                  WTF::fastFree(v281, v306);
                                }
                                v245 = v480;
                                if (v480 != -1)
                                  goto LABEL_861;
                                goto LABEL_862;
                              }
LABEL_781:
                              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseCompoundStatement((uint64_t)v461, a2);
                              v397 = v462;
                              if ((_DWORD)v462)
                              {
                                if ((_DWORD)v462 != 1)
                                  goto LABEL_916;
                                v398 = *(const char **)v461;
                                if (*(_QWORD *)v461)
                                  **(_DWORD **)v461 += 2;
                                v466 = *(__n128 *)&v461[8];
                                v465 = v398;
                                v467 = 1;
                              }
                              else
                              {
                                v409 = *(_QWORD **)(a2 + 8);
                                v410 = *(_DWORD *)(a2 + 96) - v447;
                                v487 = v443;
                                v488.n128_u64[0] = __PAIR64__(v410, v447);
                                v465 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::Function,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::Parameter,0ul>,WGSL::AST::Expression *,std::reference_wrapper<WGSL::AST::CompoundStatement>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(v409, (__int128 *)&v487, (uint64_t)v478, (uint64_t *)&v476, (uint64_t *)&v473, v461, (uint64_t *)&v468, (uint64_t *)&v481);
                                v467 = 0;
                                v396 = (WTF *)v481;
                              }
                              ((void (*)(const char **, _BYTE *))off_1E0FD7628[v397])(&v487, v461);
                              goto LABEL_848;
                            }
                            continue;
                          }
                        }
                      }
                      v233 = *(_DWORD **)(v229 + 32 * v227 + 24);
LABEL_444:
                      *v39 = (uint64_t)v233;
                      goto LABEL_435;
                    case 0x1C:
                    case 0x22:
                      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableWithAttributes((uint64_t)v461, a2, (uint64_t *)&v468);
                      v200 = v462;
                      if ((_DWORD)v462)
                      {
                        if ((_DWORD)v462 != 1)
                          goto LABEL_916;
                        v201 = *(const char **)v461;
                        if (*(_QWORD *)v461)
                          **(_DWORD **)v461 += 2;
                        *v161 = *(__n128 *)&v461[8];
                        goto LABEL_535;
                      }
                      v247 = *(_DWORD *)(a2 + 56);
                      if (v247 != 73)
                      {
                        WGSL::toString(73);
                        WGSL::toString(v247);
                        *(_QWORD *)v478 = "Expected a ";
                        *(_QWORD *)&v478[8] = 12;
                        v487 = ", but got a ";
                        v488.n128_u64[0] = 13;
                        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v478, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v465, &v481);
                        if (!v481)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1824E8614);
                        }
                        v260 = v465;
                        v465 = 0;
                        if (v260)
                        {
                          if (*(_DWORD *)v260 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v260 -= 2;
                        }
                        v367 = v473;
                        v473 = 0;
                        if (v367)
                        {
                          if (*(_DWORD *)v367 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v367 -= 2;
                        }
                        v368 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                        v455 = v481;
                        v456 = v163;
                        v457 = v368;
                        v458 = 1;
LABEL_730:
                        ((void (*)(_BYTE *, _BYTE *))off_1E0FD7040[v200])(v478, v461);
                        v162 = off_1E0FD7648;
                        v187 = v470;
                        if (v470 != -1)
                          goto LABEL_869;
                        goto LABEL_870;
                      }
                      v248 = *(_DWORD *)(a2 + 36);
                      v249 = *(_DWORD *)(a2 + 40) + 1;
                      while (1)
                      {
                        *(_DWORD *)(a2 + 40) = v249;
                        if (v248 <= v249)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1824E85ACLL);
                        }
                        v251 = *(_QWORD *)(a2 + 24);
                        v252 = v251 + 32 * v249;
                        v253 = *(_DWORD *)v252;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v252;
                        *v38 = *(_OWORD *)(v252 + 4);
                        v254 = *(_DWORD *)v252;
                        if (v254 > 8)
                          goto LABEL_472;
                        if (((1 << v254) & 0x38) != 0)
                          break;
                        if (((1 << v254) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v251 + 32 * v249 + 24);
                        }
                        else if (v254 == 8)
                        {
                          *v39 = 0;
                          v255 = *(_DWORD **)(v251 + 32 * v249 + 24);
                          if (v255)
                            *v255 += 2;
                          goto LABEL_481;
                        }
LABEL_472:
                        v250 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v250;
                        ++v249;
                        if (v253 != 82)
                        {
                          v201 = *(const char **)v461;
LABEL_535:
                          v455 = v201;
                          v458 = v200;
                          goto LABEL_730;
                        }
                      }
                      v255 = *(_DWORD **)(v251 + 32 * v249 + 24);
LABEL_481:
                      *v39 = (uint64_t)v255;
                      goto LABEL_472;
                    case 0x1F:
                      v234 = *(_QWORD *)(a2 + 88);
                      v445 = *(unsigned int *)(a2 + 96);
                      v235 = *(_DWORD *)(a2 + 36);
                      v236 = *(_DWORD *)(a2 + 40) + 1;
                      break;
                    default:
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v243 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                      v456 = v163;
                      v457 = v243;
                      v458 = 1;
                      v187 = v470;
                      if (v470 == -1)
                        goto LABEL_870;
                      goto LABEL_869;
                  }
                  while (2)
                  {
                    *(_DWORD *)(a2 + 40) = v236;
                    if (v235 <= v236)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824E858CLL);
                    }
                    v238 = *(_QWORD *)(a2 + 24);
                    v239 = v238 + 32 * v236;
                    v240 = *(_DWORD *)v239;
                    *(_DWORD *)(a2 + 56) = *(_DWORD *)v239;
                    *v38 = *(_OWORD *)(v239 + 4);
                    v241 = *(_DWORD *)v239;
                    if (v241 <= 8)
                    {
                      if (((1 << v241) & 0x38) != 0)
                      {
                        v242 = *(_DWORD **)(v238 + 32 * v236 + 24);
                        goto LABEL_456;
                      }
                      if (((1 << v241) & 0xC4) != 0)
                      {
                        *v39 = *(_QWORD *)(v238 + 32 * v236 + 24);
                      }
                      else if (v241 == 8)
                      {
                        *v39 = 0;
                        v242 = *(_DWORD **)(v238 + 32 * v236 + 24);
                        if (v242)
                          *v242 += 2;
LABEL_456:
                        *v39 = (uint64_t)v242;
                      }
                    }
                    v237 = *(_DWORD *)(a2 + 68);
                    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                    *(_DWORD *)(a2 + 96) = v237;
                    ++v236;
                    if (v240 != 82)
                    {
                      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v478, a2);
                      if (v480)
                      {
                        if (v480 != 1)
                          goto LABEL_916;
                        v246 = *(const char **)v478;
                        if (*(_QWORD *)v478)
                          **(_DWORD **)v478 += 2;
                        v466 = *(__n128 *)&v478[8];
                        v465 = v246;
                        v467 = 1;
                        goto LABEL_836;
                      }
                      v270 = *(_DWORD *)(a2 + 56);
                      if (v270 != 43)
                      {
                        WGSL::toString(43);
                        WGSL::toString(v270);
                        *(_QWORD *)v461 = "Expected a ";
                        *(_QWORD *)&v461[8] = 12;
                        v487 = ", but got a ";
                        v488.n128_u64[0] = 13;
                        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                        if (!v481)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1824E8624);
                        }
                        v280 = (_DWORD *)v490;
                        *(_QWORD *)&v490 = 0;
                        if (v280)
                        {
                          if (*v280 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *v280 -= 2;
                        }
                        v374 = v473;
                        v473 = 0;
                        if (v374)
                        {
                          if (*(_DWORD *)v374 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v374 -= 2;
                        }
                        v376 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                        v465 = v481;
                        v466.n128_u64[0] = v234;
                        v466.n128_u64[1] = v376;
                        v467 = 1;
                        goto LABEL_836;
                      }
                      v271 = *(_DWORD *)(a2 + 36);
                      v272 = *(_DWORD *)(a2 + 40) + 1;
                      while (2)
                      {
                        *(_DWORD *)(a2 + 40) = v272;
                        if (v271 <= v272)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1824E85E4);
                        }
                        v274 = *(_QWORD *)(a2 + 24);
                        v275 = v274 + 32 * v272;
                        v276 = *(_DWORD *)v275;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v275;
                        *v38 = *(_OWORD *)(v275 + 4);
                        v277 = *(_DWORD *)v275;
                        if (v277 <= 8)
                        {
                          if (((1 << v277) & 0x38) != 0)
                          {
                            v278 = *(_DWORD **)(v274 + 32 * v272 + 24);
                            goto LABEL_533;
                          }
                          if (((1 << v277) & 0xC4) != 0)
                          {
                            *v39 = *(_QWORD *)(v274 + 32 * v272 + 24);
                          }
                          else if (v277 == 8)
                          {
                            *v39 = 0;
                            v278 = *(_DWORD **)(v274 + 32 * v272 + 24);
                            if (v278)
                              *v278 += 2;
LABEL_533:
                            *v39 = (uint64_t)v278;
                          }
                        }
                        v273 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v273;
                        ++v272;
                        if (v276 == 82)
                          continue;
                        break;
                      }
                      v442 = v234;
                      v444 = 0;
                      v448 = 0;
                      v476 = 0;
                      v477 = 0;
                      v472 = 0;
                      v449 = v467;
                      while (2)
                      {
                        if (*(_DWORD *)(a2 + 56) == 44)
                        {
                          v369 = v442;
                          goto LABEL_753;
                        }
                        v327 = *(_QWORD *)(a2 + 88);
                        v328 = *(unsigned int *)(a2 + 96);
                        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(&v487, a2);
                        if (v489)
                        {
                          if (v489 != 1)
                            goto LABEL_916;
                          v329 = v487;
                          if (v487)
                            *(_DWORD *)v487 += 2;
                          v474 = v488;
                          v473 = v329;
                          v475 = 1;
                          v330 = 1;
                          goto LABEL_676;
                        }
                        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v461, a2);
                        if (v463[0])
                        {
                          if (v463[0] != 1)
                            goto LABEL_916;
                          v331 = *(const char **)v461;
                          if (*(_QWORD *)v461)
                            **(_DWORD **)v461 += 2;
                          v474 = *(__n128 *)&v461[8];
                          v473 = v331;
                          v475 = 1;
                          v332 = 1;
                          goto LABEL_675;
                        }
                        v333 = *(_DWORD *)(a2 + 56);
                        if (v333 != 47)
                        {
                          WGSL::toString(47);
                          WGSL::toString(v333);
                          v481 = "Expected a ";
                          v482.n128_u64[0] = 12;
                          *(_QWORD *)&v490 = ", but got a ";
                          *((_QWORD *)&v490 + 1) = 13;
                          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v481, (uint64_t *)&v485, (uint64_t)&v490, (uint64_t *)&v484, &v486);
                          if (!v486)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1824E8634);
                          }
                          v342 = v484;
                          v484 = 0;
                          if (v342)
                          {
                            if (*v342 == 2)
                              WTF::StringImpl::destroy();
                            else
                              *v342 -= 2;
                          }
                          v348 = v485;
                          v485 = 0;
                          if (v348)
                          {
                            if (*v348 == 2)
                              WTF::StringImpl::destroy();
                            else
                              *v348 -= 2;
                          }
                          v332 = 0;
                          v349 = v328 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v328) << 32);
                          v473 = v486;
                          v474.n128_u64[0] = v327;
                          v474.n128_u64[1] = v349;
                          v475 = 1;
                          goto LABEL_675;
                        }
                        v334 = *(_DWORD *)(a2 + 36);
                        v335 = *(_DWORD *)(a2 + 40) + 1;
LABEL_642:
                        *(_DWORD *)(a2 + 40) = v335;
                        if (v334 <= v335)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1824E85F4);
                        }
                        v337 = *(_QWORD *)(a2 + 24);
                        v338 = v337 + 32 * v335;
                        v339 = *(_DWORD *)v338;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v338;
                        *v38 = *(_OWORD *)(v338 + 4);
                        v340 = *(_DWORD *)v338;
                        if (v340 <= 8)
                        {
                          if (((1 << v340) & 0x38) != 0)
                          {
                            v341 = *(_DWORD **)(v337 + 32 * v335 + 24);
                            goto LABEL_650;
                          }
                          if (((1 << v340) & 0xC4) != 0)
                          {
                            *v39 = *(_QWORD *)(v337 + 32 * v335 + 24);
                          }
                          else if (v340 == 8)
                          {
                            *v39 = 0;
                            v341 = *(_DWORD **)(v337 + 32 * v335 + 24);
                            if (v341)
                              *v341 += 2;
LABEL_650:
                            *v39 = (uint64_t)v341;
                          }
                        }
                        v336 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v336;
                        ++v335;
                        if (v339 != 82)
                        {
                          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeName((uint64_t)&v481, a2);
                          if (v483)
                          {
                            if (v483 != 1)
                              goto LABEL_916;
                            v343 = v481;
                            if (v481)
                              *(_DWORD *)v481 += 2;
                            v474 = v482;
                            v473 = v343;
                            v475 = 1;
                            v344 = 1;
LABEL_663:
                            ((void (*)(__int128 *, const char **))off_1E0FD71D8[v344])(&v490, &v481);
                            v332 = v463[0];
                            if (v463[0] == -1)
                              goto LABEL_664;
LABEL_675:
                            ((void (*)(const char **, _BYTE *))off_1E0FD6FE8[v332])(&v481, v461);
                            v330 = v489;
                            if (v489 != -1)
                              goto LABEL_676;
LABEL_665:
                            v347 = v475;
                            if (v475)
                              goto LABEL_666;
                          }
                          else
                          {
                            v345 = *(_QWORD **)(a2 + 8);
                            v346 = *(_DWORD *)(a2 + 96) - v328;
                            *(_QWORD *)&v490 = v327;
                            *((_QWORD *)&v490 + 1) = __PAIR64__(v346, v328);
                            v473 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::StructureMember,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(v345, &v490, (uint64_t)v461, (uint64_t *)&v481, (uint64_t *)&v487);
                            v475 = 0;
                            v344 = v483;
                            if (v483 != -1)
                              goto LABEL_663;
                            v332 = v463[0];
                            if (v463[0] != -1)
                              goto LABEL_675;
LABEL_664:
                            v330 = v489;
                            if (v489 == -1)
                              goto LABEL_665;
LABEL_676:
                            ((void (*)(_BYTE *, const char **))off_1E0FD7638[v330])(v461, &v487);
                            v347 = v475;
                            if (v475)
                            {
LABEL_666:
                              if (v347 != 1)
                                goto LABEL_916;
                              v162 = (uint64_t (**)())v473;
                              if (v473)
                                *(_DWORD *)v473 += 2;
                              v466 = v474;
                              v449 = 1;
                              v324 = 1;
                              v325 = 1;
                              goto LABEL_625;
                            }
                          }
                          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)v461, (uint64_t *)&v472, (const WTF::StringImpl **)v473 + 6);
                          if (v461[16])
                          {
                            if (v448 == (_DWORD)v477)
                            {
                              v350 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v476, v448 + 1, (unint64_t)&v473);
                              v351 = HIDWORD(v477);
                              v444 = (uint64_t)v476;
                              *((_QWORD *)v476 + HIDWORD(v477)) = *v350;
                            }
                            else
                            {
                              *(_QWORD *)(v444 + 8 * v448) = v473;
                              v351 = HIDWORD(v477);
                            }
                            HIDWORD(v477) = v351 + 1;
                            v448 = v351 + 1;
                            if ((v351 + 1) < 0x400)
                            {
                              if (*(_DWORD *)(a2 + 56) != 48)
                              {
                                v324 = 7;
                                v325 = v475;
                                if (v475 == -1)
                                  goto LABEL_626;
                                goto LABEL_625;
                              }
                              v355 = *(_DWORD *)(a2 + 36);
                              v356 = *(_DWORD *)(a2 + 40) + 1;
                              while (2)
                              {
                                *(_DWORD *)(a2 + 40) = v356;
                                if (v355 <= v356)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1824E85B4);
                                }
                                v358 = *(_QWORD *)(a2 + 24);
                                v359 = v358 + 32 * v356;
                                v360 = *(_DWORD *)v359;
                                *(_DWORD *)(a2 + 56) = *(_DWORD *)v359;
                                *v38 = *(_OWORD *)(v359 + 4);
                                v361 = *(_DWORD *)v359;
                                if (v361 <= 8)
                                {
                                  if (((1 << v361) & 0x38) != 0)
                                  {
                                    v362 = *(_DWORD **)(v358 + 32 * v356 + 24);
                                    goto LABEL_702;
                                  }
                                  if (((1 << v361) & 0xC4) != 0)
                                  {
                                    *v39 = *(_QWORD *)(v358 + 32 * v356 + 24);
                                  }
                                  else if (v361 == 8)
                                  {
                                    *v39 = 0;
                                    v362 = *(_DWORD **)(v358 + 32 * v356 + 24);
                                    if (v362)
                                      *v362 += 2;
LABEL_702:
                                    *v39 = (uint64_t)v362;
                                  }
                                }
                                v357 = *(_DWORD *)(a2 + 68);
                                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                                *(_DWORD *)(a2 + 96) = v357;
                                ++v356;
                                if (v360 != 82)
                                {
                                  v324 = 0;
                                  v325 = v475;
                                  if (v475 == -1)
                                    goto LABEL_626;
LABEL_625:
                                  ((void (*)(_BYTE *, const char **))off_1E0FD73F0[v325])(v461, &v473);
                                  goto LABEL_626;
                                }
                                continue;
                              }
                            }
                            WTF::String::number((WTF::String *)0x3FF);
                            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"struct cannot have more than ", 30, (uint64_t *)&v471, (int8x16_t *)" members", 9, &v487);
                            v363 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                            v162 = (uint64_t (**)())v487;
                            v466.n128_u64[0] = v442;
                            v466.n128_u64[1] = v363;
                            v487 = 0;
                            v364 = v471;
                            v471 = 0;
                            if (v364)
                            {
                              if (*v364 != 2)
                              {
                                *v364 -= 2;
                                goto LABEL_712;
                              }
LABEL_711:
                              WTF::StringImpl::destroy();
                            }
                          }
                          else
                          {
                            v352 = (_DWORD *)*((_QWORD *)v473 + 6);
                            if (v352)
                              *v352 += 2;
                            v353 = v479;
                            if (v479)
                              *v479 += 2;
                            WTF::tryMakeString<WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral,WGSL::AST::Identifier,char>((uint64_t)&v487, (int8x16_t *)"duplicate member '", 19, (uint64_t)v352, (int8x16_t *)"' in struct '", 14, (uint64_t)v353, 39);
                            v162 = (uint64_t (**)())v487;
                            if (!v487)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1824E863CLL);
                            }
                            v354 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                            v466.n128_u64[0] = v442;
                            v466.n128_u64[1] = v354;
                            if (v353)
                            {
                              if (*v353 == 2)
                                WTF::StringImpl::destroy();
                              else
                                *v353 -= 2;
                            }
                            if (v352)
                            {
                              if (*v352 != 2)
                              {
                                *v352 -= 2;
                                goto LABEL_712;
                              }
                              goto LABEL_711;
                            }
                          }
LABEL_712:
                          v449 = 1;
                          v324 = 1;
                          v325 = v475;
                          if (v475 != -1)
                            goto LABEL_625;
LABEL_626:
                          if (v324)
                          {
                            v369 = v442;
                            if (v324 != 7)
                            {
                              v465 = (const char *)v162;
                              v467 = v449;
LABEL_805:
                              v162 = off_1E0FD7648;
                              goto LABEL_824;
                            }
LABEL_753:
                            v465 = (const char *)v162;
                            v467 = v449;
                            if (!v448)
                            {
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v406 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                              v466.n128_u64[0] = v369;
                              v466.n128_u64[1] = v406;
                              v467 = 1;
                              goto LABEL_805;
                            }
                            v377 = *(_DWORD *)(a2 + 56);
                            if (v377 != 44)
                            {
                              WGSL::toString(44);
                              WGSL::toString(v377);
                              *(_QWORD *)v461 = "Expected a ";
                              *(_QWORD *)&v461[8] = 12;
                              v487 = ", but got a ";
                              v488.n128_u64[0] = 13;
                              WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                              if (!v481)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1824E8664);
                              }
                              v407 = (_DWORD *)v490;
                              *(_QWORD *)&v490 = 0;
                              v162 = off_1E0FD7648;
                              if (v407)
                              {
                                if (*v407 == 2)
                                  WTF::StringImpl::destroy();
                                else
                                  *v407 -= 2;
                              }
                              v413 = v473;
                              v473 = 0;
                              if (v413)
                              {
                                if (*(_DWORD *)v413 == 2)
                                  WTF::StringImpl::destroy();
                                else
                                  *(_DWORD *)v413 -= 2;
                              }
                              v414 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                              v465 = v481;
                              v466.n128_u64[0] = v369;
                              v466.n128_u64[1] = v414;
                              v467 = 1;
LABEL_824:
                              v415 = (uint64_t)v472;
                              if (v472)
                              {
                                v416 = *(v472 - 1);
                                if ((_DWORD)v416)
                                {
                                  v417 = (_DWORD **)v472;
                                  do
                                  {
                                    v418 = *v417;
                                    if (*v417 != (_DWORD *)-1)
                                    {
                                      *v417 = 0;
                                      if (v418)
                                      {
                                        if (*v418 == 2)
                                          WTF::StringImpl::destroy();
                                        else
                                          *v418 -= 2;
                                      }
                                    }
                                    ++v417;
                                    --v416;
                                  }
                                  while (v416);
                                }
                                WTF::fastFree((WTF *)(v415 - 16), v326);
                              }
                              v419 = v476;
                              if (v476)
                              {
                                v476 = 0;
                                LODWORD(v477) = 0;
                                WTF::fastFree(v419, v326);
                              }
LABEL_836:
                              if (v480 != -1)
                                ((void (*)(_BYTE *, _BYTE *))off_1E0FD6FE8[v480])(v461, v478);
                              v420 = v467;
                              if (v467)
                              {
                                if (v467 != 1)
                                  goto LABEL_916;
                                v421 = v465;
                                if (v465)
                                  *(_DWORD *)v465 += 2;
                                *v161 = v466;
                              }
                              else
                              {
                                v421 = v465;
                              }
                              v455 = v421;
                              v458 = v420;
                              ((void (*)(_BYTE *, const char **))off_1E0FD7400[v420])(v461, &v465);
                              v187 = v470;
                              if (v470 != -1)
                                goto LABEL_869;
                              goto LABEL_870;
                            }
                            v378 = *(_DWORD *)(a2 + 36);
                            v379 = *(_DWORD *)(a2 + 40) + 1;
                            v162 = off_1E0FD7648;
                            while (2)
                            {
                              *(_DWORD *)(a2 + 40) = v379;
                              if (v378 <= v379)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1824E864CLL);
                              }
                              v381 = *(_QWORD *)(a2 + 24);
                              v382 = v381 + 32 * v379;
                              v383 = *(_DWORD *)v382;
                              *(_DWORD *)(a2 + 56) = *(_DWORD *)v382;
                              *v38 = *(_OWORD *)(v382 + 4);
                              v384 = *(_DWORD *)v382;
                              if (v384 <= 8)
                              {
                                if (((1 << v384) & 0x38) != 0)
                                {
                                  v385 = *(_DWORD **)(v381 + 32 * v379 + 24);
                                  goto LABEL_766;
                                }
                                if (((1 << v384) & 0xC4) != 0)
                                {
                                  *v39 = *(_QWORD *)(v381 + 32 * v379 + 24);
                                }
                                else if (v384 == 8)
                                {
                                  *v39 = 0;
                                  v385 = *(_DWORD **)(v381 + 32 * v379 + 24);
                                  if (v385)
                                    *v385 += 2;
LABEL_766:
                                  *v39 = (uint64_t)v385;
                                }
                              }
                              v380 = *(_DWORD *)(a2 + 68);
                              *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                              *(_DWORD *)(a2 + 96) = v380;
                              ++v379;
                              if (v383 != 82)
                              {
                                v408 = *(_QWORD **)(a2 + 8);
                                *(_QWORD *)v461 = v369;
                                *(_DWORD *)&v461[8] = v445;
                                *(_DWORD *)&v461[12] = v380 - v445;
                                LOBYTE(v487) = 0;
                                v465 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(v408, v461, (uint64_t)v478, (uint64_t *)&v476, (uint64_t *)&v468, (char *)&v487);
                                v467 = 0;
                                goto LABEL_824;
                              }
                              continue;
                            }
                          }
                          continue;
                        }
                        goto LABEL_642;
                      }
                    }
                    continue;
                  }
                }
                v178 = *(_DWORD *)(a2 + 36);
                v179 = *(_DWORD *)(a2 + 40) + 1;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v179;
                  if (v178 <= v179)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824E8564);
                  }
                  v181 = *(_QWORD *)(a2 + 24);
                  v182 = v181 + 32 * v179;
                  v183 = *(_DWORD *)v182;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v182;
                  *v38 = *(_OWORD *)(v182 + 4);
                  v184 = *(_DWORD *)v182;
                  if (v184 <= 8)
                  {
                    if (((1 << v184) & 0x38) != 0)
                    {
                      v185 = *(_DWORD **)(v181 + 32 * v179 + 24);
                      goto LABEL_351;
                    }
                    if (((1 << v184) & 0xC4) != 0)
                    {
                      *v39 = *(_QWORD *)(v181 + 32 * v179 + 24);
                    }
                    else if (v184 == 8)
                    {
                      *v39 = 0;
                      v185 = *(_DWORD **)(v181 + 32 * v179 + 24);
                      if (v185)
                        *v185 += 2;
LABEL_351:
                      *v39 = (uint64_t)v185;
                    }
                  }
                  v180 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v180;
                  ++v179;
                  if (v183 == 82)
                    continue;
                  break;
                }
                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v461, a2);
                if (v463[0])
                {
                  if (v463[0] != 1)
                    goto LABEL_916;
                  v188 = *(const char **)v461;
                  if (*(_QWORD *)v461)
                    **(_DWORD **)v461 += 2;
                  v488 = *(__n128 *)&v461[8];
                  v487 = v188;
                  v489 = 1;
                  v189 = 1;
                  v190 = 1;
                  goto LABEL_493;
                }
                v202 = *(_DWORD *)(a2 + 56);
                if (v202 == 49)
                {
                  v203 = *(_DWORD *)(a2 + 36);
                  v204 = *(_DWORD *)(a2 + 40) + 1;
                  while (1)
                  {
                    *(_DWORD *)(a2 + 40) = v204;
                    if (v203 <= v204)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824E857CLL);
                    }
                    v206 = *(_QWORD *)(a2 + 24);
                    v207 = v206 + 32 * v204;
                    v208 = *(_DWORD *)v207;
                    *(_DWORD *)(a2 + 56) = *(_DWORD *)v207;
                    *v38 = *(_OWORD *)(v207 + 4);
                    v209 = *(_DWORD *)v207;
                    if (v209 > 8)
                      goto LABEL_387;
                    if (((1 << v209) & 0x38) != 0)
                      break;
                    if (((1 << v209) & 0xC4) != 0)
                    {
                      *v39 = *(_QWORD *)(v206 + 32 * v204 + 24);
                    }
                    else if (v209 == 8)
                    {
                      *v39 = 0;
                      v210 = *(_DWORD **)(v206 + 32 * v204 + 24);
                      if (v210)
                        *v210 += 2;
                      goto LABEL_396;
                    }
LABEL_387:
                    v205 = *(_DWORD *)(a2 + 68);
                    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                    *(_DWORD *)(a2 + 96) = v205;
                    ++v204;
                    if (v208 != 82)
                    {
                      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeName((uint64_t)v478, a2);
                      if ((_DWORD)v479)
                      {
                        if ((_DWORD)v479 != 1)
                          goto LABEL_916;
                        v188 = *(const char **)v478;
                        if (*(_QWORD *)v478)
                          **(_DWORD **)v478 += 2;
                        v488 = *(__n128 *)&v478[8];
                        v487 = v188;
                        v489 = 1;
                        v189 = 1;
                        v215 = v479;
                        if ((_DWORD)v479 != -1)
                          goto LABEL_416;
                        goto LABEL_417;
                      }
                      v216 = *(_DWORD *)(a2 + 56);
                      if (v216 == 73)
                      {
                        v217 = *(_DWORD *)(a2 + 36);
                        v218 = *(_DWORD *)(a2 + 40) + 1;
                        while (1)
                        {
                          *(_DWORD *)(a2 + 40) = v218;
                          if (v217 <= v218)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1824E859CLL);
                          }
                          v220 = *(_QWORD *)(a2 + 24);
                          v221 = v220 + 32 * v218;
                          v222 = *(_DWORD *)v221;
                          *(_DWORD *)(a2 + 56) = *(_DWORD *)v221;
                          *v38 = *(_OWORD *)(v221 + 4);
                          v223 = *(_DWORD *)v221;
                          if (v223 > 8)
                            goto LABEL_423;
                          if (((1 << v223) & 0x38) != 0)
                            break;
                          if (((1 << v223) & 0xC4) != 0)
                          {
                            *v39 = *(_QWORD *)(v220 + 32 * v218 + 24);
                          }
                          else if (v223 == 8)
                          {
                            *v39 = 0;
                            v224 = *(_DWORD **)(v220 + 32 * v218 + 24);
                            if (v224)
                              *v224 += 2;
                            goto LABEL_432;
                          }
LABEL_423:
                          v219 = *(_DWORD *)(a2 + 68);
                          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                          *(_DWORD *)(a2 + 96) = v219;
                          ++v218;
                          if (v222 != 82)
                          {
                            v259 = *(_QWORD **)(a2 + 8);
                            v481 = v163;
                            v482.n128_u32[0] = v164;
                            v482.n128_u32[1] = v219 - v164;
                            v188 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::TypeAlias,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,void>(v259, &v481, (uint64_t)v461, (uint64_t *)v478);
                            v189 = 0;
                            v487 = v188;
                            v489 = 0;
                            v215 = v479;
                            if ((_DWORD)v479 == -1)
                              goto LABEL_417;
LABEL_416:
                            ((void (*)(const char **, _BYTE *))off_1E0FD71D8[v215])(&v481, v478);
                            goto LABEL_417;
                          }
                        }
                        v224 = *(_DWORD **)(v220 + 32 * v218 + 24);
LABEL_432:
                        *v39 = (uint64_t)v224;
                        goto LABEL_423;
                      }
                      WGSL::toString(73);
                      WGSL::toString(v216);
                      v481 = "Expected a ";
                      v482.n128_u64[0] = 12;
                      v473 = ", but got a ";
                      v474.n128_u64[0] = 13;
                      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v481, (uint64_t *)&v465, (uint64_t)&v473, (uint64_t *)&v490, &v468);
                      if (!v468)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824E860CLL);
                      }
                      v258 = (_DWORD *)v490;
                      *(_QWORD *)&v490 = 0;
                      if (v258)
                      {
                        if (*v258 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *v258 -= 2;
                      }
                      v365 = v465;
                      v465 = 0;
                      if (v365)
                      {
                        if (*(_DWORD *)v365 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *(_DWORD *)v365 -= 2;
                      }
                      v188 = v468;
                      v366 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                      v487 = v468;
                      v488.n128_u64[0] = (unint64_t)v163;
                      v488.n128_u64[1] = v366;
                      v489 = 1;
                      v189 = 1;
                      v215 = v479;
                      if ((_DWORD)v479 != -1)
                        goto LABEL_416;
LABEL_417:
                      v190 = v463[0];
                      if (v463[0] == -1)
                      {
                        if (!v189)
                          goto LABEL_497;
                      }
                      else
                      {
LABEL_493:
                        ((void (*)(_BYTE *, _BYTE *))off_1E0FD6FE8[v190])(v478, v461);
                        if (!v189)
                        {
LABEL_497:
                          v455 = v188;
                          v458 = v189;
                          ((void (*)(_BYTE *, const char **))off_1E0FD7648[v189])(v461, &v487);
                          goto LABEL_870;
                        }
                      }
                      if (v188)
                        *(_DWORD *)v188 += 2;
                      *v161 = v488;
                      goto LABEL_497;
                    }
                  }
                  v210 = *(_DWORD **)(v206 + 32 * v204 + 24);
LABEL_396:
                  *v39 = (uint64_t)v210;
                  goto LABEL_387;
                }
                WGSL::toString(49);
                WGSL::toString(v202);
                *(_QWORD *)v478 = "Expected a ";
                *(_QWORD *)&v478[8] = 12;
                v481 = ", but got a ";
                v482.n128_u64[0] = 13;
                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v478, (uint64_t *)&v468, (uint64_t)&v481, (uint64_t *)&v465, &v473);
                if (!v473)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824E8604);
                }
                v213 = v465;
                v465 = 0;
                if (v213)
                {
                  if (*(_DWORD *)v213 != 2)
                  {
                    *(_DWORD *)v213 -= 2;
                    goto LABEL_407;
                  }
                  WTF::StringImpl::destroy();
                  v214 = v468;
                  v468 = 0;
                  if (v214)
                  {
LABEL_489:
                    if (*(_DWORD *)v214 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *(_DWORD *)v214 -= 2;
                  }
                }
                else
                {
LABEL_407:
                  v214 = v468;
                  v468 = 0;
                  if (v214)
                    goto LABEL_489;
                }
                v190 = 0;
                v188 = v473;
                v257 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                v487 = v473;
                v488.n128_u64[0] = (unint64_t)v163;
                v488.n128_u64[1] = v257;
                v489 = 1;
                v189 = 1;
                goto LABEL_493;
              }
              v169 = *(_DWORD *)(a2 + 36);
              v170 = *(_DWORD *)(a2 + 40) + 1;
LABEL_326:
              *(_DWORD *)(a2 + 40) = v170;
              if (v169 <= v170)
              {
                __break(0xC471u);
                JUMPOUT(0x1824E8544);
              }
              v172 = *(_QWORD *)(a2 + 24);
              v173 = v172 + 32 * v170;
              v40 = *(_DWORD *)v173;
              *(_DWORD *)(a2 + 56) = *(_DWORD *)v173;
              *v38 = *(_OWORD *)(v173 + 4);
              v174 = *(_DWORD *)v173;
              if (v174 <= 8)
              {
                if (((1 << v174) & 0x38) != 0)
                {
                  v175 = *(_DWORD **)(v172 + 32 * v170 + 24);
                  goto LABEL_334;
                }
                if (((1 << v174) & 0xC4) != 0)
                {
                  *v39 = *(_QWORD *)(v172 + 32 * v170 + 24);
                }
                else if (v174 == 8)
                {
                  *v39 = 0;
                  v175 = *(_DWORD **)(v172 + 32 * v170 + 24);
                  if (v175)
                    *v175 += 2;
LABEL_334:
                  *v39 = (uint64_t)v175;
                }
              }
              v171 = *(_DWORD *)(a2 + 68);
              result.n128_u64[0] = *(_QWORD *)(a2 + 60);
              *(_QWORD *)(a2 + 88) = result.n128_u64[0];
              *(_DWORD *)(a2 + 96) = v171;
              ++v170;
              if (v40 != 82)
                continue;
              goto LABEL_326;
            }
          }
          v72 = *(_QWORD *)(a2 + 88);
          v73 = *(unsigned int *)(a2 + 96);
          v74 = *(_DWORD *)(a2 + 36);
          v75 = *(_DWORD *)(a2 + 40) + 1;
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v75;
            if (v74 <= v75)
            {
              __break(0xC471u);
              JUMPOUT(0x1824E8524);
            }
            v77 = *(_QWORD *)(a2 + 24);
            v78 = v77 + 32 * v75;
            v79 = *(_DWORD *)v78;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v78;
            *v38 = *(_OWORD *)(v78 + 4);
            v80 = *(_DWORD *)v78;
            if (v80 <= 8)
            {
              if (((1 << v80) & 0x38) != 0)
              {
                v81 = *(_DWORD **)(v77 + 32 * v75 + 24);
                goto LABEL_148;
              }
              if (((1 << v80) & 0xC4) != 0)
              {
                *v39 = *(_QWORD *)(v77 + 32 * v75 + 24);
              }
              else if (v80 == 8)
              {
                *v39 = 0;
                v81 = *(_DWORD **)(v77 + 32 * v75 + 24);
                if (v81)
                  *v81 += 2;
LABEL_148:
                *v39 = (uint64_t)v81;
              }
            }
            v76 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v76;
            ++v75;
            if (v79 == 82)
              continue;
            break;
          }
          while (2)
          {
            if (v79 != 8)
            {
              *(_DWORD *)v461 = v79;
              v463[0] = 1;
              WGSL::toString(8);
              if (v463[0] != 1)
                goto LABEL_916;
              WGSL::toString(*(int *)v461);
              v487 = "Expected a ";
              v488.n128_u64[0] = 12;
              v481 = ", but got a ";
              v482.n128_u64[0] = 13;
              WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v487, (uint64_t *)&v468, (uint64_t)&v481, (uint64_t *)&v465, &v473);
              if (!v473)
              {
                __break(0xC471u);
                JUMPOUT(0x1824E855CLL);
              }
              v128 = v465;
              v465 = 0;
              if (v128)
              {
                if (*(_DWORD *)v128 == 2)
                {
                  WTF::StringImpl::destroy();
                  v129 = v468;
                  v468 = 0;
                  if (!v129)
                  {
LABEL_244:
                    v134 = v73 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v73) << 32);
                    *(_QWORD *)v478 = v473;
                    goto LABEL_256;
                  }
LABEL_241:
                  if (*(_DWORD *)v129 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *(_DWORD *)v129 -= 2;
                  goto LABEL_244;
                }
                *(_DWORD *)v128 -= 2;
              }
              v129 = v468;
              v468 = 0;
              if (!v129)
                goto LABEL_244;
              goto LABEL_241;
            }
            *(_DWORD *)v461 = 8;
            *(_OWORD *)&v461[4] = *v38;
            v118 = *v39;
            if (*v39)
              *(_DWORD *)v118 += 2;
            v462 = v118;
            v463[0] = 0;
            v119 = *(_DWORD *)(a2 + 36);
            LODWORD(v120) = *(_DWORD *)(a2 + 40);
            v121 = v120 + 2;
            while (2)
            {
              v120 = (v120 + 1);
              *(_DWORD *)(a2 + 40) = v120;
              if (v119 <= v120)
              {
                __break(0xC471u);
                JUMPOUT(0x1824E8504);
              }
              v113 = v121;
              v123 = *(_QWORD *)(a2 + 24);
              v124 = v123 + 32 * v120;
              v125 = *(_DWORD *)v124;
              *(_DWORD *)(a2 + 56) = *(_DWORD *)v124;
              *v38 = *(_OWORD *)(v124 + 4);
              v126 = *(_DWORD *)v124;
              if (v126 <= 8)
              {
                if (((1 << v126) & 0x38) != 0)
                {
                  v127 = *(_DWORD **)(v123 + 32 * v120 + 24);
                  goto LABEL_225;
                }
                if (((1 << v126) & 0xC4) != 0)
                {
                  *v39 = *(_QWORD *)(v123 + 32 * v120 + 24);
                }
                else if (v126 == 8)
                {
                  *v39 = 0;
                  v127 = *(_DWORD **)(v123 + 32 * v120 + 24);
                  if (v127)
                    *v127 += 2;
LABEL_225:
                  *v39 = (uint64_t)v127;
                }
              }
              v122 = *(_DWORD *)(a2 + 68);
              result.n128_u64[0] = *(_QWORD *)(a2 + 60);
              *(_QWORD *)(a2 + 88) = result.n128_u64[0];
              *(_DWORD *)(a2 + 96) = v122;
              v121 = v113 + 1;
              if (v125 == 82)
                continue;
              break;
            }
            if (!v118)
              goto LABEL_255;
            v130 = *(_QWORD *)(v118 + 8);
            v131 = *(_DWORD *)(v118 + 4);
            if ((char *)v130 == "f16" || v131 != 3)
            {
              v136 = (char *)v130 == "f16" && v131 == 3;
              if (v136)
              {
                v110 = &(&WGSL::parseExtension(WTF::String const&)::__entries)[3 * !v136];
                goto LABEL_197;
              }
            }
            else
            {
              if ((*(_BYTE *)(v118 + 16) & 4) == 0)
              {
                if (*(_WORD *)v130 != 102)
                  goto LABEL_255;
                v132 = *(_DWORD *)(v130 + 2);
                v12 = v132 == 3538993;
                v133 = v132 != 3538993;
                if (!v12)
                  goto LABEL_255;
LABEL_196:
                v110 = &(&WGSL::parseExtension(WTF::String const&)::__entries)[3 * v133];
LABEL_197:
                *(_BYTE *)(*(_QWORD *)a2 + 31) |= *((_BYTE *)v110 + 16);
                if (v125 != 48)
                {
                  v111 = 4;
                  goto LABEL_257;
                }
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v113;
                  if (v119 <= v113)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824E852CLL);
                  }
                  v114 = v123 + 32 * v113;
                  v115 = *(_DWORD *)v114;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v114;
                  *v38 = *(_OWORD *)(v114 + 4);
                  v116 = *(_DWORD *)v114;
                  if (v116 <= 8)
                  {
                    if (((1 << v116) & 0x38) != 0)
                    {
                      v117 = *(_DWORD **)(v123 + 32 * v113 + 24);
                      goto LABEL_209;
                    }
                    if (((1 << v116) & 0xC4) != 0)
                    {
                      *v39 = *(_QWORD *)(v123 + 32 * v113 + 24);
                    }
                    else if (v116 == 8)
                    {
                      *v39 = 0;
                      v117 = *(_DWORD **)(v123 + 32 * v113 + 24);
                      if (v117)
                        *v117 += 2;
LABEL_209:
                      *v39 = (uint64_t)v117;
                    }
                  }
                  v112 = *(_DWORD *)(a2 + 68);
                  result.n128_u64[0] = *(_QWORD *)(a2 + 60);
                  *(_QWORD *)(a2 + 88) = result.n128_u64[0];
                  *(_DWORD *)(a2 + 96) = v112;
                  ++v113;
                  if (v115 != 82)
                  {
                    v111 = 0;
                    goto LABEL_257;
                  }
                  continue;
                }
              }
              if (*(_BYTE *)v130 == 102)
              {
                v137 = *(unsigned __int16 *)(v130 + 1);
                v12 = v137 == 13873;
                v133 = v137 != 13873;
                if (v12)
                  goto LABEL_196;
              }
            }
LABEL_255:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v134 = v73 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v73) << 32);
LABEL_256:
            *(_QWORD *)&v478[8] = v72;
            *(_QWORD *)&v478[16] = v134;
            v111 = 1;
            LOBYTE(v479) = 1;
LABEL_257:
            if (v463[0] != -1)
              ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v463[0]])(&v487, v461);
            if (!v111)
            {
              v79 = *(_DWORD *)(a2 + 56);
              if (v79 != 73)
                continue;
LABEL_264:
              v139 = *(_DWORD *)(a2 + 36);
              v140 = *(_DWORD *)(a2 + 40) + 1;
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v140;
                if (v139 <= v140)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824E8534);
                }
                v142 = *(_QWORD *)(a2 + 24);
                v143 = v142 + 32 * v140;
                v144 = *(_DWORD *)v143;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v143;
                *v38 = *(_OWORD *)(v143 + 4);
                v145 = *(_DWORD *)v143;
                if (v145 <= 8)
                {
                  if (((1 << v145) & 0x38) != 0)
                  {
                    v146 = *(_DWORD **)(v142 + 32 * v140 + 24);
                    goto LABEL_275;
                  }
                  if (((1 << v145) & 0xC4) != 0)
                  {
                    *v39 = *(_QWORD *)(v142 + 32 * v140 + 24);
                  }
                  else if (v145 == 8)
                  {
                    *v39 = 0;
                    v146 = *(_DWORD **)(v142 + 32 * v140 + 24);
                    if (v146)
                      *v146 += 2;
LABEL_275:
                    *v39 = (uint64_t)v146;
                  }
                }
                v141 = *(_DWORD *)(a2 + 68);
                result.n128_u64[0] = *(_QWORD *)(a2 + 60);
                *(_QWORD *)(a2 + 88) = result.n128_u64[0];
                *(_DWORD *)(a2 + 96) = v141;
                ++v140;
                if (v144 != 82)
                  goto LABEL_72;
                continue;
              }
            }
            break;
          }
          if (v111 != 4)
          {
            if ((_BYTE)v479)
            {
              v438 = *(char **)v478;
              goto LABEL_904;
            }
            continue;
          }
          break;
        }
        v138 = *(_DWORD *)(a2 + 56);
        if (v138 == 73)
          goto LABEL_264;
        WGSL::toString(73);
        WGSL::toString(v138);
        *(_QWORD *)v461 = "Expected a ";
        *(_QWORD *)&v461[8] = 12;
        v487 = ", but got a ";
        v488.n128_u64[0] = 13;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v455, (uint64_t)&v487, (uint64_t *)&v490, &v481);
        if (!v481)
        {
          __break(0xC471u);
          JUMPOUT(0x1824E866CLL);
        }
        v434 = (_DWORD *)v490;
        *(_QWORD *)&v490 = 0;
        if (v434)
        {
          if (*v434 != 2)
          {
            *v434 -= 2;
            goto LABEL_891;
          }
          WTF::StringImpl::destroy();
          v435 = v455;
          v455 = 0;
          if (v435)
          {
LABEL_900:
            if (*(_DWORD *)v435 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v435 -= 2;
          }
        }
        else
        {
LABEL_891:
          v435 = v455;
          v455 = 0;
          if (v435)
            goto LABEL_900;
        }
        v439 = v73 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v73) << 32);
        v438 = (char *)v481;
        *(_QWORD *)&v478[8] = v72;
        *(_QWORD *)&v478[16] = v439;
        LOBYTE(v479) = 1;
LABEL_904:
        if (!v438)
          goto LABEL_915;
LABEL_905:
        v440 = *(_DWORD *)v438;
        *(_DWORD *)v438 += 2;
        result = *(__n128 *)&v478[8];
        *v453 = *(__n128 *)&v478[8];
        *(_QWORD *)a1 = v438;
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)v478 = 0;
        if (v440)
          *(_DWORD *)v438 = v440;
        else
          WTF::StringImpl::destroy();
        return result;
      case 0x25:
      case 0x41:
        v23 = *(_QWORD *)&v461[8];
        if (*(_QWORD *)v461 != *(_QWORD *)&v461[8])
        {
          while (1)
          {
            if (v23)
            {
              --v23;
              if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * v23 + 8) != v6)
                goto LABEL_6;
            }
            else
            {
              v23 = v462 - 1;
              if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * v23 + 8) != v6)
                goto LABEL_6;
            }
            *(_QWORD *)&v461[8] = v23;
            if (*(_QWORD *)v461 == v23)
              goto LABEL_6;
          }
        }
        goto LABEL_6;
      case 0x2B:
      case 0x2F:
      case 0x31:
      case 0x49:
        *(_QWORD *)v461 = 0;
        *(_QWORD *)&v461[8] = 0;
        v11 = *(WTF **)&v461[16];
        v12 = v463 == *(_DWORD **)&v461[16] || *(_QWORD *)&v461[16] == 0;
        if (!v12)
        {
          *(_QWORD *)&v461[16] = 0;
          LODWORD(v462) = 0;
          WTF::fastFree(v11, (void *)a2);
        }
        v6 = 0;
        goto LABEL_6;
      case 0x2D:
      case 0x43:
        ++v6;
        goto LABEL_6;
      case 0x2E:
      case 0x44:
        for (i = *(_QWORD *)&v461[8]; *(_QWORD *)v461 != i; *(_QWORD *)&v461[8] = i)
        {
          if (i)
          {
            --i;
            if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * i + 8) != v6)
              break;
          }
          else
          {
            i = v462 - 1;
            if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * i + 8) != v6)
              break;
          }
        }
        if (v6)
          --v6;
        else
          v6 = 0;
        goto LABEL_6;
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
        v13 = *(_QWORD *)&v461[8];
        if (*(_QWORD *)v461 != *(_QWORD *)&v461[8])
        {
          v14 = v462;
          if (*(_QWORD *)&v461[8])
            v14 = *(_QWORD *)&v461[8];
          v15 = v14 - 1;
          v16 = *(_QWORD *)&v461[16];
          if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * v15 + 8) == v6)
          {
            if (v8 <= v7)
            {
              __break(0xC471u);
              JUMPOUT(0x1824E85CCLL);
            }
            v17 = (_DWORD *)(v9 + 32 * v7);
            v18 = *v17 - 52;
            if (v18 <= 2)
            {
              v19 = dword_1826100D0[v18];
              *v17 = 51;
              v17[8] = v19;
              v20 = v462;
              if (v13)
                v20 = v13;
              v15 = v20 - 1;
            }
            v21 = *(_DWORD **)(v16 + 16 * v15);
            *(_QWORD *)&v461[8] = v15;
            *v21 = 83;
            *v10 = 84;
          }
        }
        goto LABEL_6;
      default:
        goto LABEL_6;
    }
  }
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(uint64_t result)
{
  unsigned int v1;
  unsigned int i;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;

  v1 = *(_DWORD *)(result + 36);
  for (i = *(_DWORD *)(result + 40) + 1; ; ++i)
  {
    *(_DWORD *)(result + 40) = i;
    if (v1 <= i)
      break;
    v4 = *(_QWORD *)(result + 24);
    v5 = v4 + 32 * i;
    v6 = *(_DWORD *)v5;
    *(_DWORD *)(result + 56) = *(_DWORD *)v5;
    *(_OWORD *)(result + 60) = *(_OWORD *)(v5 + 4);
    v7 = *(_DWORD *)v5;
    if (v7 <= 8)
    {
      if (((1 << v7) & 0x38) != 0)
      {
        v8 = *(_DWORD **)(v4 + 32 * i + 24);
LABEL_12:
        *(_QWORD *)(result + 80) = v8;
        goto LABEL_3;
      }
      if (((1 << v7) & 0xC4) != 0)
      {
        *(_QWORD *)(result + 80) = *(_QWORD *)(v4 + 32 * i + 24);
      }
      else if (v7 == 8)
      {
        *(_QWORD *)(result + 80) = 0;
        v8 = *(_DWORD **)(v4 + 32 * i + 24);
        if (v8)
          *v8 += 2;
        goto LABEL_12;
      }
    }
LABEL_3:
    v3 = *(_DWORD *)(result + 68);
    *(_QWORD *)(result + 88) = *(_QWORD *)(result + 60);
    *(_DWORD *)(result + 96) = v3;
    if (v6 != 82)
      return result;
  }
  __break(0xC471u);
  return result;
}

void WGSL::Parser<WGSL::Lexer<unsigned char>>::parseDiagnostic(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  const char *v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  const char *v34;
  int v35;
  char *v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _DWORD *v46;
  _DWORD *v47;
  __int128 v48;
  uint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  const char *v52;
  _BYTE v53[24];
  uint64_t v54;
  char v55;
  char v56;
  _DWORD *v57;
  _DWORD *v58;
  const char *v59;
  __int128 v60;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  const char *v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  _DWORD *v70;
  _DWORD *v71;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 56);
  if (v6 != 67)
  {
    WGSL::toString(67);
    WGSL::toString(v6);
    v52 = "Expected a ";
    *(_QWORD *)v53 = 12;
    v66 = ", but got a ";
    *(_QWORD *)&v67 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v52, (uint64_t *)&v71, (uint64_t)&v66, (uint64_t *)&v70, &v59);
    if (!v59)
    {
      __break(0xC471u);
      JUMPOUT(0x1824E8F68);
    }
    v16 = v70;
    v70 = 0;
    if (v16)
    {
      if (*v16 == 2)
      {
        WTF::StringImpl::destroy();
        v17 = v71;
        v71 = 0;
        if (!v17)
        {
LABEL_43:
          v30 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v59;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v30;
          *(_DWORD *)(a1 + 80) = 1;
          return;
        }
LABEL_40:
        if (*v17 == 2)
          WTF::StringImpl::destroy();
        else
          *v17 -= 2;
        goto LABEL_43;
      }
      *v16 -= 2;
    }
    v17 = v71;
    v71 = 0;
    if (!v17)
      goto LABEL_43;
    goto LABEL_40;
  }
  v7 = (_OWORD *)(a2 + 60);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v8 <= v9)
      goto LABEL_111;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v7 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v66, a2);
  if (v69)
  {
    if (v69 != 1)
      goto LABEL_106;
    v18 = v66;
    if (v66)
      *(_DWORD *)v66 += 2;
    *(_OWORD *)(a1 + 8) = v67;
    *(_QWORD *)a1 = v18;
LABEL_67:
    *(_DWORD *)(a1 + 80) = 1;
    goto LABEL_68;
  }
  v19 = WGSL::parseSeverityControl(&v68);
  if (!v19)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
LABEL_66:
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v31;
    goto LABEL_67;
  }
  v20 = *(_DWORD *)(a2 + 56);
  if (v20 != 48)
  {
    WGSL::toString(48);
    WGSL::toString(v20);
    v52 = "Expected a ";
    *(_QWORD *)v53 = 12;
    v59 = ", but got a ";
    *(_QWORD *)&v60 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v52, (uint64_t *)&v64, (uint64_t)&v59, (uint64_t *)&v63, &v65);
    if (!v65)
      goto LABEL_111;
    v32 = v63;
    v63 = 0;
    if (v32)
    {
      if (*v32 == 2)
        WTF::StringImpl::destroy();
      else
        *v32 -= 2;
    }
    v38 = v64;
    v64 = 0;
    if (v38)
    {
      if (*v38 == 2)
        WTF::StringImpl::destroy();
      else
        *v38 -= 2;
    }
    v31 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)a1 = v65;
    goto LABEL_66;
  }
  v21 = v19;
  v22 = *(_DWORD *)(a2 + 36);
  v23 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v23;
    if (v22 <= v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1824E8F60);
    }
    v25 = *(_QWORD *)(a2 + 24);
    v26 = v25 + 32 * v23;
    v27 = *(_DWORD *)v26;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v26;
    *v7 = *(_OWORD *)(v26 + 4);
    v28 = *(_DWORD *)v26;
    if (v28 <= 8)
    {
      if (((1 << v28) & 0x38) != 0)
      {
        v29 = *(_DWORD **)(v25 + 32 * v23 + 24);
LABEL_38:
        *(_QWORD *)(a2 + 80) = v29;
        goto LABEL_29;
      }
      if (((1 << v28) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v25 + 32 * v23 + 24);
        goto LABEL_29;
      }
      if (v28 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v29 = *(_DWORD **)(v25 + 32 * v23 + 24);
        if (v29)
          *v29 += 2;
        goto LABEL_38;
      }
    }
LABEL_29:
    v24 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v24;
    ++v23;
  }
  while (v27 == 82);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v59, a2);
  v33 = v62;
  if (v62)
  {
    if (v62 == 1)
    {
      v34 = v59;
      if (v59)
        *(_DWORD *)v59 += 2;
      *(_OWORD *)(a1 + 8) = v60;
      *(_QWORD *)a1 = v34;
      goto LABEL_103;
    }
    goto LABEL_106;
  }
  v35 = *(_DWORD *)(a2 + 56);
  if (v35 == 69)
  {
    WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v52, a2);
    if ((_DWORD)v54)
    {
      if ((_DWORD)v54 == 1)
      {
        v36 = (char *)v52;
        if (v52)
        {
          v37 = *(_DWORD *)v52;
          *(_DWORD *)v52 += 2;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
          *(_QWORD *)a1 = v36;
          *(_DWORD *)(a1 + 80) = 1;
          if (v37)
            *(_DWORD *)v36 = v37;
          else
            WTF::StringImpl::destroy();
          goto LABEL_104;
        }
        *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
        *(_QWORD *)a1 = 0;
LABEL_103:
        *(_DWORD *)(a1 + 80) = 1;
        goto LABEL_104;
      }
LABEL_106:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_111:
      __break(0xC471u);
      JUMPOUT(0x1824E8F58);
    }
    if (*(_QWORD *)&v53[16])
    {
      if (**(_DWORD **)&v53[16] == 2)
        WTF::StringImpl::destroy();
      else
        **(_DWORD **)&v53[16] -= 2;
    }
    v35 = *(_DWORD *)(a2 + 56);
  }
  if (v35 == 48)
  {
    WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
    v35 = *(_DWORD *)(a2 + 56);
  }
  if (v35 != 68)
  {
    WGSL::toString(68);
    WGSL::toString(v35);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v52, (uint64_t *)&v58, (uint64_t *)&v57);
    v47 = v57;
    v57 = 0;
    if (v47)
    {
      if (*v47 == 2)
        WTF::StringImpl::destroy();
      else
        *v47 -= 2;
    }
    v50 = v58;
    v58 = 0;
    if (v50)
    {
      if (*v50 == 2)
        WTF::StringImpl::destroy();
      else
        *v50 -= 2;
    }
    v51 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)a1 = v52;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v51;
    goto LABEL_103;
  }
  v39 = *(_DWORD *)(a2 + 36);
  v40 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v40;
    if (v39 <= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x1824E8F70);
    }
    v42 = *(_QWORD *)(a2 + 24);
    v43 = v42 + 32 * v40;
    v44 = *(_DWORD *)v43;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v43;
    *v7 = *(_OWORD *)(v43 + 4);
    v45 = *(_DWORD *)v43;
    if (v45 <= 8)
    {
      if (((1 << v45) & 0x38) != 0)
      {
        v46 = *(_DWORD **)(v42 + 32 * v40 + 24);
        goto LABEL_91;
      }
      if (((1 << v45) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v42 + 32 * v40 + 24);
      }
      else if (v45 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v46 = *(_DWORD **)(v42 + 32 * v40 + 24);
        if (v46)
          *v46 += 2;
LABEL_91:
        *(_QWORD *)(a2 + 80) = v46;
      }
    }
    v41 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v41;
    ++v40;
    if (v44 == 82)
      continue;
    break;
  }
  LOBYTE(v52) = *v21;
  v48 = v60;
  *(_OWORD *)&v53[8] = v60;
  *(_QWORD *)v53 = &off_1E0FD2F10;
  v49 = v61;
  v61 = 0;
  v55 = 0;
  v56 = 0;
  *(_BYTE *)a1 = (_BYTE)v52;
  *(_OWORD *)(a1 + 16) = v48;
  *(_QWORD *)(a1 + 8) = &off_1E0FD2F10;
  v54 = 0;
  *(_QWORD *)(a1 + 32) = v49;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  WGSL::AST::Diagnostic::~Diagnostic((WGSL::AST::Diagnostic *)&v52);
  if ((_DWORD)v33 == -1)
    goto LABEL_68;
LABEL_104:
  ((void (*)(const char **, const char **))off_1E0FD6FE8[v33])(&v52, &v59);
LABEL_68:
  if (v69 != -1)
    ((void (*)(const char **, const char **))off_1E0FD6FE8[v69])(&v52, &v66);
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  unsigned int i;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;

  v3 = *(_DWORD *)(a2 + 56);
  if (v3 == a3)
  {
    *(_DWORD *)result = a3;
    *(_OWORD *)(result + 4) = *(_OWORD *)(a2 + 60);
    *(_DWORD *)(result + 32) = 0;
    v4 = *(_DWORD *)(a2 + 36);
    for (i = *(_DWORD *)(a2 + 40) + 1; ; ++i)
    {
      *(_DWORD *)(a2 + 40) = i;
      if (v4 <= i)
      {
        __break(0xC471u);
        return result;
      }
      v7 = *(_QWORD *)(a2 + 24);
      v8 = v7 + 32 * i;
      v9 = *(_DWORD *)v8;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v8;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v8 + 4);
      v10 = *(_DWORD *)v8;
      if (v10 <= 8)
      {
        if (((1 << v10) & 0x38) != 0)
        {
          v11 = *(_DWORD **)(v7 + 32 * i + 24);
LABEL_13:
          *(_QWORD *)(a2 + 80) = v11;
          goto LABEL_4;
        }
        if (((1 << v10) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v7 + 32 * i + 24);
        }
        else if (v10 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v11 = *(_DWORD **)(v7 + 32 * i + 24);
          if (v11)
            *v11 += 2;
          goto LABEL_13;
        }
      }
LABEL_4:
      v6 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v6;
      if (v9 != 82)
        return result;
    }
  }
  *(_DWORD *)result = v3;
  *(_DWORD *)(result + 32) = 1;
  return result;
}

unint64_t *WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t *result;
  _QWORD v5[2];
  unint64_t v6[2];

  v6[0] = (unint64_t)"Expected a ";
  v6[1] = 12;
  v5[0] = ", but got a ";
  v5[1] = 13;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(v6, a2, (uint64_t)v5, a3, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::DiagnosticDirective,WGSL::SourceSpan,WGSL::AST::Diagnostic,void>(_QWORD *this, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x67uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD7018;
  *(_BYTE *)(v6 + 24) = *(_BYTE *)a3;
  *(_QWORD *)(v6 + 32) = &off_1E0FD2EE8;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v6 + 32) = &off_1E0FD2F10;
  v7 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 96) = 0;
  if (*(_BYTE *)(a3 + 72))
  {
    *(_QWORD *)(v6 + 64) = &off_1E0FD2EE8;
    *(_OWORD *)(v6 + 72) = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(v6 + 64) = &off_1E0FD2F10;
    v8 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(v6 + 88) = v8;
    *(_BYTE *)(v6 + 96) = 1;
  }
  *v5 += 104;
  v9 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v9 != *((_DWORD *)v5 + 10))
  {
    v16 = (_QWORD *)(v5[4] + 8 * v9);
LABEL_19:
    *v16 = v6;
    *((_DWORD *)v5 + 11) = v9 + 1;
    return (_QWORD *)v6;
  }
  v10 = v9 + (v9 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (void *)v5[4];
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)v5 + 10) = v12;
    v5[4] = v14;
    memcpy(v14, v13, 8 * v9);
    if (v13)
    {
      if ((void *)v5[4] == v13)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v13, v15);
    }
    v9 = *((unsigned int *)v5 + 11);
    v16 = (_QWORD *)(v5[4] + 8 * v9);
    goto LABEL_19;
  }
  __break(0xC471u);
  return this;
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _DWORD *v26;
  int v27;
  _QWORD v28[2];
  unint64_t v29[2];

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 56);
  if (v6 != 8)
  {
    v24 = *(_DWORD *)(a2 + 56);
    v27 = 1;
    WGSL::toString(8);
    WGSL::toString(v6);
    v29[0] = (unint64_t)"Expected a ";
    v29[1] = 12;
    v28[0] = ", but got a ";
    v28[1] = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(v29, (uint64_t *)&v22, (uint64_t)v28, (uint64_t *)&v21, &v23);
    if (!v23)
    {
      __break(0xC471u);
LABEL_31:
      JUMPOUT(0x1824E94A8);
    }
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*v16 == 2)
      {
        WTF::StringImpl::destroy();
        v17 = v22;
        v22 = 0;
        if (!v17)
        {
LABEL_27:
          v19 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v23;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v19;
          v18 = 1;
          *(_DWORD *)(a1 + 32) = 1;
          return ((uint64_t (*)(unint64_t *, int *))off_1E0FD6FF8[v18])(v29, &v24);
        }
LABEL_24:
        if (*v17 == 2)
          WTF::StringImpl::destroy();
        else
          *v17 -= 2;
        goto LABEL_27;
      }
      *v16 -= 2;
    }
    v17 = v22;
    v22 = 0;
    if (!v17)
      goto LABEL_27;
    goto LABEL_24;
  }
  v24 = 8;
  v25 = *(_OWORD *)(a2 + 60);
  v7 = *(_DWORD **)(a2 + 80);
  if (v7)
    *v7 += 2;
  v26 = v7;
  v27 = 0;
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v8 <= v9)
    {
      __break(0xC471u);
      goto LABEL_31;
    }
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 > 8)
      goto LABEL_6;
    if (((1 << v14) & 0x38) != 0)
    {
      v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_15:
      *(_QWORD *)(a2 + 80) = v15;
      goto LABEL_6;
    }
    if (((1 << v14) & 0xC4) != 0)
    {
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
      goto LABEL_6;
    }
    if (v14 == 8)
    {
      *(_QWORD *)(a2 + 80) = 0;
      v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
      if (v15)
        *v15 += 2;
      goto LABEL_15;
    }
LABEL_6:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  v18 = 0;
  v26 = 0;
  *(_QWORD *)a1 = &off_1E0FD2F10;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5 | ((unint64_t)(v10 - v5) << 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = 0;
  return ((uint64_t (*)(unint64_t *, int *))off_1E0FD6FF8[v18])(v29, &v24);
}

void WGSL::AST::Diagnostic::~Diagnostic(WGSL::AST::Diagnostic *this)
{
  _DWORD *v2;
  _DWORD *v3;

  if (!*((_BYTE *)this + 72)
    || (*((_QWORD *)this + 5) = &off_1E0FD2F10, v2 = (_DWORD *)*((_QWORD *)this + 8), *((_QWORD *)this + 8) = 0, !v2))
  {
LABEL_5:
    *((_QWORD *)this + 1) = &off_1E0FD2F10;
    v3 = (_DWORD *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v3)
      return;
    goto LABEL_6;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy();
  *((_QWORD *)this + 1) = &off_1E0FD2F10;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v3)
    return;
LABEL_6:
  if (*v3 == 2)
    WTF::StringImpl::destroy();
  else
    *v3 -= 2;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL3AST10IdentifierENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  _DWORD *result;

  *a2 = &off_1E0FD2F10;
  result = (_DWORD *)a2[3];
  a2[3] = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL3AST10IdentifierENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

unint64_t *WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  __int8 *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;

  v6 = result[1];
  v7 = v6 != 0;
  v8 = v6 - 1;
  if (v7)
    v9 = v8;
  else
    v9 = 0;
  if (v9 >> 31
    || ((v10 = *(_QWORD *)(a3 + 8), v7 = v10 != 0, v11 = v10 - 1, v7) ? (v12 = v11) : (v12 = 0), v12 >> 31))
  {
    __break(0xC471u);
    JUMPOUT(0x1824E9694);
  }
  v13 = *a2;
  v14 = *a4;
  if (*a2)
  {
    v15 = *(_DWORD *)(v13 + 4);
    if (v14)
      goto LABEL_11;
  }
  else
  {
    v15 = 0;
    if (v14)
    {
LABEL_11:
      v16 = *(_DWORD *)(v14 + 4);
      if (((v16 | v12) & 0x80000000) != 0)
        goto LABEL_23;
      goto LABEL_15;
    }
  }
  v16 = 0;
  if ((v12 & 0x80000000) != 0)
  {
LABEL_23:
    *a5 = 0;
    return result;
  }
LABEL_15:
  v17 = __OFADD__((_DWORD)v12, v16);
  v18 = v12 + v16;
  v19 = v17;
  if (v15 < 0)
    goto LABEL_23;
  if ((v19 & 1) != 0)
    goto LABEL_23;
  v17 = __OFADD__(v15, v18);
  v20 = v15 + v18;
  if (v17)
    goto LABEL_23;
  v17 = __OFADD__((_DWORD)v9, v20);
  v21 = (v9 + v20);
  if (v17)
    goto LABEL_23;
  v22 = *result;
  v23 = *(__int8 **)a3;
  if (v13)
  {
    v24 = *(_DWORD *)(v13 + 16);
    v25 = (v24 >> 2) & 1;
    if (!v14 || (v24 & 4) == 0)
      goto LABEL_30;
  }
  else if (!v14)
  {
    v25 = 1;
    v26 = v21;
    v27 = v22;
    return (unint64_t *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v26, v25, v27, v9, v13, v23, v12, v14, a5);
  }
  v25 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
LABEL_30:
  v26 = v21;
  v27 = v22;
  return (unint64_t *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v26, v25, v27, v9, v13, v23, v12, v14, a5);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, __int8 *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  int8x16_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unsigned __int8 *v33;
  __int16 v34;
  uint8x8_t *v35;
  uint16x8_t *v36;
  unint64_t v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint8x8_t *v41;
  uint16x8_t *v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  v15 = result;
  if (!a2)
  {
    if (!(_DWORD)result)
      goto LABEL_9;
    if (result > 0x7FFFFFEF)
      goto LABEL_8;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    v17 = v45;
    if (!v45)
      goto LABEL_27;
    v18 = v45 + 20;
    *(_DWORD *)v45 = 2;
    *(_DWORD *)(v45 + 4) = v15;
    *(_QWORD *)(v45 + 8) = v45 + 20;
    *(_DWORD *)(v45 + 16) = 0;
    v19 = (char *)(v45 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v20 = v18 + 2 * (a4 & 0xFFFFFFC0);
      v21 = 0uLL;
      do
      {
        v46.val[0] = *(int8x16_t *)a3;
        v22 = *(int8x16_t *)(a3 + 16);
        v47.val[0] = *(int8x16_t *)(a3 + 32);
        v23 = *(_OWORD *)(a3 + 48);
        a3 += 64;
        v24 = v23;
        v47.val[1] = 0uLL;
        v48.val[0] = v22;
        v46.val[1] = 0uLL;
        v25 = (char *)v18;
        vst2q_s8(v25, v46);
        v25 += 32;
        v48.val[1] = 0uLL;
        vst2q_s8(v25, v48);
        v26 = (char *)(v18 + 64);
        vst2q_s8(v26, v47);
        v27 = (char *)(v18 + 96);
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      v18 = v20;
    }
    if ((char *)v18 == v19)
    {
LABEL_26:
      result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v19, a5, (unint64_t)a6, a7, a8);
      goto LABEL_27;
    }
    v28 = v45 + 2 * a4 - v18 + 18;
    if (v28 < 0xE
      || (v18 < a3 + (v28 >> 1) + 1 ? (v29 = a3 >= (v28 & 0xFFFFFFFFFFFFFFFELL) + v18 + 2) : (v29 = 1), !v29))
    {
      v32 = (char *)v18;
      v33 = (unsigned __int8 *)a3;
      goto LABEL_25;
    }
    v30 = (v28 >> 1) + 1;
    if (v28 >= 0x3E)
    {
      v31 = v30 & 0xFFFFFFFFFFFFFFE0;
      v35 = (uint8x8_t *)(a3 + 16);
      v36 = (uint16x8_t *)(v18 + 32);
      v37 = v30 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = *(uint8x16_t *)v35[-2].i8;
        v39 = vmovl_u8(*v35);
        v40 = vmovl_high_u8(*(uint8x16_t *)v35->i8);
        v36[-2] = vmovl_u8(*(uint8x8_t *)v38.i8);
        v36[-1] = vmovl_high_u8(v38);
        *v36 = v39;
        v36[1] = v40;
        v36 += 4;
        v35 += 4;
        v37 -= 32;
      }
      while (v37);
      if (v30 == v31)
        goto LABEL_26;
      if ((v30 & 0x18) == 0)
      {
        v33 = (unsigned __int8 *)(a3 + v31);
        v32 = (char *)(v18 + 2 * v31);
        do
        {
LABEL_25:
          v34 = *v33++;
          *(_WORD *)v32 = v34;
          v32 += 2;
        }
        while (v32 != v19);
        goto LABEL_26;
      }
    }
    else
    {
      v31 = 0;
    }
    v32 = (char *)(v18 + 2 * (v30 & 0xFFFFFFFFFFFFFFF8));
    v33 = (unsigned __int8 *)(a3 + (v30 & 0xFFFFFFFFFFFFFFF8));
    v41 = (uint8x8_t *)(a3 + v31);
    v42 = (uint16x8_t *)(v18 + 2 * v31);
    v43 = v31 - (v30 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v44 = *v41++;
      *v42++ = vmovl_u8(v44);
      v43 += 8;
    }
    while (v43);
    if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_26;
    goto LABEL_25;
  }
  if (!(_DWORD)result)
  {
LABEL_9:
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_27;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_8:
    v17 = 0;
    goto LABEL_27;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v17 = v45;
  if (v45)
  {
    *(_DWORD *)v45 = 2;
    *(_DWORD *)(v45 + 4) = v15;
    *(_QWORD *)(v45 + 8) = v45 + 20;
    *(_DWORD *)(v45 + 16) = 4;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((int8x16_t *)(v45 + 20), (__int8 *)a3, a4, a5, a6, a7, a8);
  }
LABEL_27:
  *a9 = v17;
  return result;
}

int8x16_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(int8x16_t *__dst, __int8 *a2, unsigned int a3, uint64_t a4, __int8 *__src, unsigned int a6, uint64_t a7)
{
  int8x16_t *v12;
  uint64_t v13;
  __int8 *v14;
  int8x16_t *v15;
  size_t v16;
  __int8 *v17;
  unint64_t v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  uint64_t v21;
  __int8 *v22;
  int8x16_t *v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  __int8 *v27;
  int8x16_t *v28;
  char v29;
  int8x16_t *v30;
  size_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  unsigned __int128 v34;
  unint64_t v35;
  int8x16_t *v36;
  BOOL v37;
  unint64_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  __int8 v41;
  int8x16_t *v42;
  int8x16_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t *v49;
  int8x8_t *v50;
  unint64_t v51;
  int16x8_t v52;
  int8x16_t *v53;
  int8x16_t *v54;
  unint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t *v60;
  int8x8_t *v61;
  unint64_t v62;
  int16x8_t v63;

  v12 = __dst;
  if (!a3)
  {
LABEL_4:
    v13 = a3;
    v14 = &__dst->i8[a3];
    if (a4)
      goto LABEL_5;
    goto LABEL_12;
  }
  if (a3 == 1)
  {
    __dst->i8[0] = *a2;
    goto LABEL_4;
  }
  __dst = (int8x16_t *)memcpy(__dst, a2, a3);
  v13 = a3;
  v14 = &v12->i8[a3];
  if (a4)
  {
LABEL_5:
    v15 = *(int8x16_t **)(a4 + 8);
    v16 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v16)
      {
        if ((_DWORD)v16 == 1)
          *v14 = v15->i8[0];
        else
          __dst = (int8x16_t *)memcpy(v14, v15, v16);
      }
LABEL_30:
      v21 = *(unsigned int *)(a4 + 4);
      v22 = &v14[v21];
      if (!a6)
        goto LABEL_33;
      goto LABEL_31;
    }
    v17 = &v14[v16];
    if (v16 < 0x10)
    {
      v18 = (unint64_t)v14;
      if (v14 == v17)
        goto LABEL_30;
    }
    else
    {
      v18 = (unint64_t)&v14[v16 & 0xFFFFFFF0];
      v19 = (unsigned __int128 *)v14;
      do
      {
        v20 = (unsigned __int128)vld2q_s8(v15->i8);
        v15 += 2;
        *v19++ = v20;
      }
      while (v19 != (unsigned __int128 *)v18);
      if ((__int8 *)v18 == v17)
        goto LABEL_30;
    }
    v23 = (int8x16_t *)((char *)v12 + v16 + v13);
    v24 = (unint64_t)v23 - v18;
    if ((unint64_t)v23 - v18 < 8
      || (v18 < (unint64_t)v15 + 2 * v24 ? (v25 = v15 >= v23) : (v25 = 1), !v25))
    {
      v27 = (__int8 *)v18;
      v28 = v15;
      goto LABEL_27;
    }
    if (v24 >= 0x20)
    {
      v26 = v24 & 0xFFFFFFFFFFFFFFE0;
      v42 = v15 + 2;
      v43 = (int8x16_t *)(v18 + 16);
      v44 = v24 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v46 = v42[-2];
        v45 = v42[-1];
        v48 = *v42;
        v47 = v42[1];
        v42 += 4;
        v43[-1] = vuzp1q_s8(v46, v45);
        *v43 = vuzp1q_s8(v48, v47);
        v43 += 2;
        v44 -= 32;
      }
      while (v44);
      if (v24 == v26)
        goto LABEL_30;
      if ((v24 & 0x18) == 0)
      {
        v28 = (int8x16_t *)((char *)v15 + 2 * v26);
        v27 = (__int8 *)(v18 + v26);
        goto LABEL_27;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = (__int8 *)(v18 + (v24 & 0xFFFFFFFFFFFFFFF8));
    v28 = (int8x16_t *)((char *)v15 + 2 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v49 = (int16x8_t *)((char *)v15 + 2 * v26);
    v50 = (int8x8_t *)(v18 + v26);
    v51 = v26 - (v24 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v52 = *v49++;
      *v50++ = vmovn_s16(v52);
      v51 += 8;
    }
    while (v51);
    if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
    do
    {
LABEL_27:
      v29 = v28->i8[0];
      v28 = (int8x16_t *)((char *)v28 + 2);
      *v27++ = v29;
    }
    while (v27 != v17);
    goto LABEL_30;
  }
LABEL_12:
  v21 = 0;
  v22 = v14;
  if (!a6)
  {
LABEL_33:
    if (!a7)
      return __dst;
    goto LABEL_36;
  }
LABEL_31:
  if (a6 == 1)
  {
    *v22 = *__src;
    goto LABEL_33;
  }
  __dst = (int8x16_t *)memcpy(v22, __src, a6);
  if (!a7)
    return __dst;
LABEL_36:
  __dst = (int8x16_t *)&v22[a6];
  v30 = *(int8x16_t **)(a7 + 8);
  v31 = *(unsigned int *)(a7 + 4);
  if ((*(_BYTE *)(a7 + 16) & 4) != 0)
  {
    if ((_DWORD)v31)
    {
      if ((_DWORD)v31 == 1)
        __dst->i8[0] = v30->i8[0];
      else
        return (int8x16_t *)memcpy(__dst, v30, v31);
    }
  }
  else
  {
    v32 = (int8x16_t *)((char *)__dst + v31);
    if (v31 >= 0x10)
    {
      v33 = (int8x16_t *)((char *)__dst + (v31 & 0xFFFFFFF0));
      do
      {
        v34 = (unsigned __int128)vld2q_s8(v30->i8);
        v30 += 2;
        *__dst++ = (int8x16_t)v34;
      }
      while (__dst != v33);
      __dst = v33;
    }
    if (__dst != v32)
    {
      v35 = &v12->i8[v21 + v31 + v13 + a6] - (__int8 *)__dst;
      if (v35 < 8
        || ((v36 = (int8x16_t *)((char *)v12 + v21 + v31 + a6 + v13),
             __dst < (int8x16_t *)((char *)v30 + 2 * ((char *)v36 - (char *)__dst)))
          ? (v37 = v30 >= v36)
          : (v37 = 1),
            !v37))
      {
        v39 = __dst;
        v40 = v30;
        goto LABEL_54;
      }
      if (v35 >= 0x20)
      {
        v38 = v35 & 0xFFFFFFFFFFFFFFE0;
        v53 = v30 + 2;
        v54 = __dst + 1;
        v55 = v35 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v57 = v53[-2];
          v56 = v53[-1];
          v59 = *v53;
          v58 = v53[1];
          v53 += 4;
          v54[-1] = vuzp1q_s8(v57, v56);
          *v54 = vuzp1q_s8(v59, v58);
          v54 += 2;
          v55 -= 32;
        }
        while (v55);
        if (v35 == v38)
          return __dst;
        if ((v35 & 0x18) == 0)
        {
          v40 = (int8x16_t *)((char *)v30 + 2 * v38);
          v39 = (int8x16_t *)((char *)__dst + v38);
          do
          {
LABEL_54:
            v41 = v40->i8[0];
            v40 = (int8x16_t *)((char *)v40 + 2);
            v39->i8[0] = v41;
            v39 = (int8x16_t *)((char *)v39 + 1);
          }
          while (v39 != v32);
          return __dst;
        }
      }
      else
      {
        v38 = 0;
      }
      v39 = (int8x16_t *)((char *)__dst + (v35 & 0xFFFFFFFFFFFFFFF8));
      v40 = (int8x16_t *)((char *)v30 + 2 * (v35 & 0xFFFFFFFFFFFFFFF8));
      v60 = (int16x8_t *)((char *)v30 + 2 * v38);
      v61 = (int8x8_t *)&__dst->i8[v38];
      v62 = v38 - (v35 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v63 = *v60++;
        *v61++ = vmovn_s16(v63);
        v62 += 8;
      }
      while (v62);
      if (v35 != (v35 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_54;
    }
  }
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *result;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int8x16_t *v31;
  __int16 v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unsigned __int8 *v43;
  __int16 v44;
  int8x16_t *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  int8x16_t *v63;
  __int16 v64;
  uint8x8_t *v65;
  uint16x8_t *v66;
  unint64_t v67;
  uint8x16_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint8x8_t *v71;
  uint16x8_t *v72;
  unint64_t v73;
  uint8x8_t v74;
  uint8x8_t *v75;
  uint16x8_t *v76;
  unint64_t v77;
  uint8x16_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint8x8_t *v81;
  uint16x8_t *v82;
  unint64_t v83;
  uint8x8_t v84;
  uint8x8_t *v85;
  uint16x8_t *v86;
  unint64_t v87;
  uint8x16_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint8x8_t *v91;
  uint16x8_t *v92;
  unint64_t v93;
  uint8x8_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;

  if (!a2)
  {
    v12 = 0;
    v13 = __dst;
    result = &__dst[2 * a4];
    v15 = a4 & 0xFFFFFFC0;
    if ((a4 & 0xFFFFFFC0) == 0)
      goto LABEL_30;
    goto LABEL_27;
  }
  v10 = *(int8x16_t **)(a2 + 8);
  v11 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    v16 = &__dst[2 * v11];
    if (v11 < 0x40)
    {
      v17 = __dst;
      if (__dst == v16)
        goto LABEL_26;
    }
    else
    {
      v17 = &__dst[2 * (v11 & 0xFFFFFFC0)];
      v18 = 0uLL;
      v19 = __dst;
      do
      {
        v95.val[0] = *v10;
        v20 = v10[1];
        v98.val[0] = v10[2];
        v21 = v10[3];
        v10 += 4;
        v22 = v21;
        v98.val[1] = 0uLL;
        v101.val[0] = v20;
        v95.val[1] = 0uLL;
        v23 = v19;
        vst2q_s8(v23, v95);
        v23 += 32;
        v101.val[1] = 0uLL;
        vst2q_s8(v23, v101);
        v24 = v19 + 64;
        vst2q_s8(v24, v98);
        v25 = v19 + 96;
        vst2q_s8(v25, *(int8x16x2_t *)(&v18 - 1));
        v19 += 128;
      }
      while (v19 != v17);
      if (v17 == v16)
        goto LABEL_26;
    }
    v26 = &__dst[2 * v11] - v17 - 2;
    if (v26 < 0xE
      || (v17 < &v10->i8[(v26 >> 1) + 1]
        ? (v27 = v10 >= (int8x16_t *)&v17[(v26 & 0xFFFFFFFFFFFFFFFELL) + 2])
        : (v27 = 1),
          !v27))
    {
      v30 = v17;
      v31 = v10;
      goto LABEL_23;
    }
    v28 = (v26 >> 1) + 1;
    if (v26 >= 0x3E)
    {
      v29 = v28 & 0xFFFFFFFFFFFFFFE0;
      v75 = (uint8x8_t *)&v10[1];
      v76 = (uint16x8_t *)(v17 + 32);
      v77 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v78 = *(uint8x16_t *)v75[-2].i8;
        v79 = vmovl_u8(*v75);
        v80 = vmovl_high_u8(*(uint8x16_t *)v75->i8);
        v76[-2] = vmovl_u8(*(uint8x8_t *)v78.i8);
        v76[-1] = vmovl_high_u8(v78);
        *v76 = v79;
        v76[1] = v80;
        v76 += 4;
        v75 += 4;
        v77 -= 32;
      }
      while (v77);
      if (v28 == v29)
        goto LABEL_26;
      if ((v28 & 0x18) == 0)
      {
        v31 = (int8x16_t *)((char *)v10 + v29);
        v30 = &v17[2 * v29];
        goto LABEL_23;
      }
    }
    else
    {
      v29 = 0;
    }
    v30 = &v17[2 * (v28 & 0xFFFFFFFFFFFFFFF8)];
    v31 = (int8x16_t *)((char *)v10 + (v28 & 0xFFFFFFFFFFFFFFF8));
    v81 = (uint8x8_t *)&v10->i8[v29];
    v82 = (uint16x8_t *)&v17[2 * v29];
    v83 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v84 = *v81++;
      *v82++ = vmovl_u8(v84);
      v83 += 8;
    }
    while (v83);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_26;
    do
    {
LABEL_23:
      v32 = v31->u8[0];
      v31 = (int8x16_t *)((char *)v31 + 1);
      *(_WORD *)v30 = v32;
      v30 += 2;
    }
    while (v30 != v16);
    goto LABEL_26;
  }
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 1)
      *(_WORD *)__dst = v10->i16[0];
    else
      memcpy(__dst, v10, 2 * v11);
  }
LABEL_26:
  v12 = *(unsigned int *)(a2 + 4);
  v13 = &__dst[2 * v12];
  result = &v13[2 * a4];
  v15 = a4 & 0xFFFFFFC0;
  if ((a4 & 0xFFFFFFC0) == 0)
    goto LABEL_30;
LABEL_27:
  v33 = &v13[2 * v15];
  v34 = 0uLL;
  do
  {
    v96.val[0] = *(int8x16_t *)a3;
    v35 = *(int8x16_t *)(a3 + 16);
    v99.val[0] = *(int8x16_t *)(a3 + 32);
    v36 = *(_OWORD *)(a3 + 48);
    a3 += 64;
    v37 = v36;
    v99.val[1] = 0uLL;
    v102.val[0] = v35;
    v96.val[1] = 0uLL;
    v38 = v13;
    vst2q_s8(v38, v96);
    v38 += 32;
    v102.val[1] = 0uLL;
    vst2q_s8(v38, v102);
    v39 = v13 + 64;
    vst2q_s8(v39, v99);
    v40 = v13 + 96;
    vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
    v13 += 128;
  }
  while (v13 != v33);
  v13 = v33;
LABEL_30:
  if (v13 == result)
    goto LABEL_36;
  v41 = &__dst[2 * v12 + 2 * a4] - v13 - 2;
  if (v41 < 0xE
    || (unint64_t)v13 < a3 + (v41 >> 1) + 1 && a3 < (unint64_t)&v13[(v41 & 0xFFFFFFFFFFFFFFFELL) + 2])
  {
    v42 = v13;
    v43 = (unsigned __int8 *)a3;
    goto LABEL_35;
  }
  v60 = (v41 >> 1) + 1;
  if (v41 >= 0x3E)
  {
    v61 = v60 & 0xFFFFFFFFFFFFFFE0;
    v65 = (uint8x8_t *)(a3 + 16);
    v66 = (uint16x8_t *)(v13 + 32);
    v67 = v60 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v68 = *(uint8x16_t *)v65[-2].i8;
      v69 = vmovl_u8(*v65);
      v70 = vmovl_high_u8(*(uint8x16_t *)v65->i8);
      v66[-2] = vmovl_u8(*(uint8x8_t *)v68.i8);
      v66[-1] = vmovl_high_u8(v68);
      *v66 = v69;
      v66[1] = v70;
      v66 += 4;
      v65 += 4;
      v67 -= 32;
    }
    while (v67);
    if (v60 == v61)
      goto LABEL_36;
    if ((v60 & 0x18) == 0)
    {
      v43 = (unsigned __int8 *)(a3 + v61);
      v42 = &v13[2 * v61];
      do
      {
LABEL_35:
        v44 = *v43++;
        *(_WORD *)v42 = v44;
        v42 += 2;
      }
      while (v42 != result);
      goto LABEL_36;
    }
  }
  else
  {
    v61 = 0;
  }
  v42 = &v13[2 * (v60 & 0xFFFFFFFFFFFFFFF8)];
  v43 = (unsigned __int8 *)(a3 + (v60 & 0xFFFFFFFFFFFFFFF8));
  v71 = (uint8x8_t *)(a3 + v61);
  v72 = (uint16x8_t *)&v13[2 * v61];
  v73 = v61 - (v60 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v74 = *v71++;
    *v72++ = vmovl_u8(v74);
    v73 += 8;
  }
  while (v73);
  if (v60 != (v60 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_35;
LABEL_36:
  if (!a5)
    return result;
  v45 = *(int8x16_t **)(a5 + 8);
  v46 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) == 0)
  {
    if ((_DWORD)v46)
    {
      if ((_DWORD)v46 == 1)
        *(_WORD *)result = v45->i16[0];
      else
        return (char *)memcpy(result, v45, 2 * v46);
    }
    return result;
  }
  v47 = &result[2 * v46];
  if (v46 >= 0x40)
  {
    v48 = &result[2 * (v46 & 0xFFFFFFC0)];
    v49 = 0uLL;
    do
    {
      v97.val[0] = *v45;
      v50 = v45[1];
      v100.val[0] = v45[2];
      v51 = v45[3];
      v45 += 4;
      v52 = v51;
      v100.val[1] = 0uLL;
      v103.val[0] = v50;
      v97.val[1] = 0uLL;
      v53 = result;
      vst2q_s8(v53, v97);
      v53 += 32;
      v103.val[1] = 0uLL;
      vst2q_s8(v53, v103);
      v54 = result + 64;
      vst2q_s8(v54, v100);
      v55 = result + 96;
      vst2q_s8(v55, *(int8x16x2_t *)(&v49 - 1));
      result += 128;
    }
    while (result != v48);
    result = v48;
  }
  if (result != v47)
  {
    v56 = &__dst[2 * v12 + 2 * v46 + 2 * a4] - result - 2;
    if (v56 < 0xE
      || (result < &v45->i8[(v56 >> 1) + 1]
        ? (v57 = v45 >= (int8x16_t *)&result[(v56 & 0xFFFFFFFFFFFFFFFELL) + 2])
        : (v57 = 1),
          !v57))
    {
      v62 = result;
      v63 = v45;
      goto LABEL_57;
    }
    v58 = (v56 >> 1) + 1;
    if (v56 >= 0x3E)
    {
      v59 = v58 & 0xFFFFFFFFFFFFFFE0;
      v85 = (uint8x8_t *)&v45[1];
      v86 = (uint16x8_t *)(result + 32);
      v87 = v58 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v88 = *(uint8x16_t *)v85[-2].i8;
        v89 = vmovl_u8(*v85);
        v90 = vmovl_high_u8(*(uint8x16_t *)v85->i8);
        v86[-2] = vmovl_u8(*(uint8x8_t *)v88.i8);
        v86[-1] = vmovl_high_u8(v88);
        *v86 = v89;
        v86[1] = v90;
        v86 += 4;
        v85 += 4;
        v87 -= 32;
      }
      while (v87);
      if (v58 == v59)
        return result;
      if ((v58 & 0x18) == 0)
      {
        v63 = (int8x16_t *)((char *)v45 + v59);
        v62 = &result[2 * v59];
        goto LABEL_57;
      }
    }
    else
    {
      v59 = 0;
    }
    v62 = &result[2 * (v58 & 0xFFFFFFFFFFFFFFF8)];
    v63 = (int8x16_t *)((char *)v45 + (v58 & 0xFFFFFFFFFFFFFFF8));
    v91 = (uint8x8_t *)&v45->i8[v59];
    v92 = (uint16x8_t *)&result[2 * v59];
    v93 = v59 - (v58 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v94 = *v91++;
      *v92++ = vmovl_u8(v94);
      v93 += 8;
    }
    while (v93);
    if (v58 == (v58 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_57:
      v64 = v63->u8[0];
      v63 = (int8x16_t *)((char *)v63 + 1);
      *(_WORD *)v62 = v64;
      v62 += 2;
    }
    while (v62 != v47);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5TokenENS8_9TokenTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  if (*(_DWORD *)a2 == 8)
  {
    v2 = *(_DWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v2)
    {
      if (*v2 == 2)
        WTF::StringImpl::destroy();
      else
        *v2 -= 2;
    }
  }
}

void WGSL::AST::DiagnosticDirective::~DiagnosticDirective(WGSL::AST::DiagnosticDirective *this)
{
  _DWORD *v2;
  _DWORD *v3;

  if (!*((_BYTE *)this + 96)
    || (*((_QWORD *)this + 8) = &off_1E0FD2F10, v2 = (_DWORD *)*((_QWORD *)this + 11), *((_QWORD *)this + 11) = 0, !v2))
  {
LABEL_5:
    *((_QWORD *)this + 4) = &off_1E0FD2F10;
    v3 = (_DWORD *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (!v3)
      return;
    goto LABEL_6;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy();
  *((_QWORD *)this + 4) = &off_1E0FD2F10;
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v3)
    return;
LABEL_6:
  if (*v3 == 2)
    WTF::StringImpl::destroy();
  else
    *v3 -= 2;
}

{
  _DWORD *v2;
  _DWORD *v3;

  if (*((_BYTE *)this + 96))
  {
    *((_QWORD *)this + 8) = &off_1E0FD2F10;
    v2 = (_DWORD *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v2)
    {
      if (*v2 == 2)
      {
        WTF::StringImpl::destroy();
        *((_QWORD *)this + 4) = &off_1E0FD2F10;
        v3 = (_DWORD *)*((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = 0;
        if (!v3)
          goto LABEL_11;
LABEL_6:
        if (*v3 == 2)
          WTF::StringImpl::destroy();
        else
          *v3 -= 2;
LABEL_11:
        JUMPOUT(0x186DAB2A8);
      }
      *v2 -= 2;
    }
  }
  *((_QWORD *)this + 4) = &off_1E0FD2F10;
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v3)
    goto LABEL_11;
  goto LABEL_6;
}

uint64_t WGSL::AST::DiagnosticDirective::kind(WGSL::AST::DiagnosticDirective *this)
{
  return 17;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL3AST10DiagnosticENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *result;

  if (!*(_BYTE *)(a2 + 72)
    || (*(_QWORD *)(a2 + 40) = &off_1E0FD2F10, v3 = *(_DWORD **)(a2 + 64), *(_QWORD *)(a2 + 64) = 0, !v3))
  {
LABEL_5:
    *(_QWORD *)(a2 + 8) = &off_1E0FD2F10;
    result = *(_DWORD **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    if (!result)
      return result;
    goto LABEL_6;
  }
  if (*v3 != 2)
  {
    *v3 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy();
  *(_QWORD *)(a2 + 8) = &off_1E0FD2F10;
  result = *(_DWORD **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (!result)
    return result;
LABEL_6:
  if (*result == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *result -= 2;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL3AST10DiagnosticENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_DWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseConstAssert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *result;
  uint64_t v18;
  const char *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  unint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  const char *v37;
  __int128 v38;
  unsigned int v39;
  _DWORD *v40;
  _DWORD *v41;
  _QWORD v42[2];
  __int128 v43;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 56);
  if (v6 != 14)
  {
    WGSL::toString(14);
    WGSL::toString(v6);
    v37 = "Expected a ";
    *(_QWORD *)&v38 = 12;
    *(_QWORD *)&v43 = ", but got a ";
    *((_QWORD *)&v43 + 1) = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v37, (uint64_t *)&v41, (uint64_t)&v43, (uint64_t *)&v40, v42);
    if (!v42[0])
    {
      __break(0xC471u);
      JUMPOUT(0x1824EA818);
    }
    v16 = v40;
    v40 = 0;
    if (v16)
    {
      if (*v16 == 2)
      {
        WTF::StringImpl::destroy();
        result = v41;
        v41 = 0;
        if (!result)
        {
LABEL_42:
          v29 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v42[0];
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v29;
          *(_DWORD *)(a1 + 24) = 1;
          return result;
        }
LABEL_39:
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
        goto LABEL_42;
      }
      *v16 -= 2;
    }
    result = v41;
    v41 = 0;
    if (!result)
      goto LABEL_42;
    goto LABEL_39;
  }
  v7 = (_OWORD *)(a2 + 60);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v8 <= v9)
      goto LABEL_59;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v7 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v37, a2);
  v18 = v39;
  if (v39)
  {
    if (v39 == 1)
    {
      v19 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_OWORD *)(a1 + 8) = v38;
      *(_QWORD *)a1 = v19;
LABEL_56:
      *(_DWORD *)(a1 + 24) = 1;
      return (_DWORD *)((uint64_t (*)(__int128 *, const char **))off_1E0FD71D8[v18])(&v43, &v37);
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_59:
    __break(0xC471u);
LABEL_63:
    JUMPOUT(0x1824EA808);
  }
  v20 = *(_DWORD *)(a2 + 56);
  if (v20 != 73)
  {
    WGSL::toString(73);
    WGSL::toString(v20);
    *(_QWORD *)&v43 = "Expected a ";
    *((_QWORD *)&v43 + 1) = 12;
    v42[0] = ", but got a ";
    v42[1] = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v43, (uint64_t *)&v35, (uint64_t)v42, (uint64_t *)&v34, &v36);
    if (!v36)
    {
      __break(0xC471u);
      goto LABEL_63;
    }
    v30 = v34;
    v34 = 0;
    if (v30)
    {
      if (*v30 == 2)
      {
        WTF::StringImpl::destroy();
        v31 = v35;
        v35 = 0;
        if (!v31)
        {
LABEL_55:
          v33 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v36;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v33;
          goto LABEL_56;
        }
LABEL_52:
        if (*v31 == 2)
          WTF::StringImpl::destroy();
        else
          *v31 -= 2;
        goto LABEL_55;
      }
      *v30 -= 2;
    }
    v31 = v35;
    v35 = 0;
    if (!v31)
      goto LABEL_55;
    goto LABEL_52;
  }
  v21 = *(_DWORD *)(a2 + 36);
  v22 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v22;
    if (v21 <= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EA810);
    }
    v24 = *(_QWORD *)(a2 + 24);
    v25 = v24 + 32 * v22;
    v26 = *(_DWORD *)v25;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v25;
    *v7 = *(_OWORD *)(v25 + 4);
    v27 = *(_DWORD *)v25;
    if (v27 <= 8)
    {
      if (((1 << v27) & 0x38) != 0)
      {
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
LABEL_37:
        *(_QWORD *)(a2 + 80) = v28;
        goto LABEL_28;
      }
      if (((1 << v27) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v24 + 32 * v22 + 24);
        goto LABEL_28;
      }
      if (v27 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
        if (v28)
          *v28 += 2;
        goto LABEL_37;
      }
    }
LABEL_28:
    v23 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v23;
    ++v22;
  }
  while (v26 == 82);
  v32 = *(_QWORD **)(a2 + 8);
  *(_QWORD *)&v43 = v4;
  DWORD2(v43) = v5;
  HIDWORD(v43) = v23 - v5;
  result = WGSL::AST::Builder::construct<WGSL::AST::ConstAssert,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v32, &v43, &v37);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 24) = 0;
  if ((_DWORD)v18 != -1)
    return (_DWORD *)((uint64_t (*)(__int128 *, const char **))off_1E0FD71D8[v18])(&v43, &v37);
  return result;
}

_QWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(_QWORD *result, uint64_t a2)
{
  WTF **v3;
  WTF *v4;
  unsigned int v5;
  _OWORD *v6;
  void *v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  WTF *v13;
  __int128 v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  char v18;

  v3 = (WTF **)result;
  v4 = 0;
  v5 = 0;
  v16 = 0;
  v17 = 0;
  v6 = result + 1;
  do
  {
    if (*(_DWORD *)(a2 + 56) != 40)
    {
      *v3 = v4;
      *((_DWORD *)v3 + 2) = v17;
      *((_DWORD *)v3 + 3) = v5;
      *((_DWORD *)v3 + 6) = 0;
      return result;
    }
    result = WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttribute((uint64_t)&v13, a2);
    v8 = v15;
    if (v15)
    {
      if (v15 != 1)
      {
        v12 = std::__throw_bad_variant_access[abi:sn180100]();
        return (_QWORD *)WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableWithAttributes(v12);
      }
      v9 = v13;
      if (v13)
        *(_DWORD *)v13 += 2;
      *v6 = v14;
      *v3 = v9;
      *((_DWORD *)v3 + 6) = 1;
      v10 = v15;
      if (v15 != -1)
        goto LABEL_14;
    }
    else
    {
      if (v5 != (_DWORD)v17)
      {
        *((_QWORD *)v4 + v5++) = v13;
        HIDWORD(v17) = v5;
        v10 = v15;
        if (v15 == -1)
          continue;
LABEL_14:
        result = (_QWORD *)((uint64_t (*)(char *, WTF **))off_1E0FD73E0[v10])(&v18, &v13);
        continue;
      }
      result = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v16, v5 + 1, (unint64_t)&v13);
      v11 = HIDWORD(v17);
      v4 = v16;
      *((_QWORD *)v16 + HIDWORD(v17)) = *result;
      v5 = v11 + 1;
      HIDWORD(v17) = v11 + 1;
      v10 = v15;
      if (v15 != -1)
        goto LABEL_14;
    }
  }
  while (!v8);
  result = v16;
  if (v16)
    return (_QWORD *)WTF::fastFree(v16, v7);
  return result;
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableWithAttributes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  const char *v41;
  _DWORD *v42;
  unsigned __int8 **v43;
  unint64_t v44;
  const char *v45;
  const char *v46;
  _DWORD *v47;
  unint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  const char *v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  char v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _DWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _DWORD *v82;
  _DWORD *v83;
  _BYTE *v84;
  int v85;
  unint64_t v86;
  _DWORD *v87;
  char *v88;
  int v89;
  const char *v90;
  _DWORD *v91;
  char *v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _DWORD *v102;
  const char *v103;
  _DWORD *v104;
  char *v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  _DWORD *v114;
  BOOL v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  unint64_t v120;
  _DWORD *v121;
  unint64_t v122;
  uint64_t v124;
  char v125;
  _DWORD *v126;
  _DWORD *v127;
  const char *v128;
  __int128 v129;
  int v130;
  const char *v131;
  char v132;
  int v133;
  __int128 v134;
  int v135;
  const char *v136;
  __int128 v137;
  int v138;
  const char *v139;
  __int128 v140;
  int v141;
  _DWORD *v142;
  _DWORD *v143;
  const char *v144;
  _BYTE v145[24];
  _DWORD *v146;
  unsigned int v147;
  uint64_t v148[2];
  uint64_t v149[4];

  v5 = *(const char **)(a2 + 88);
  v6 = *(unsigned int *)(a2 + 96);
  v7 = *(unsigned int *)(a2 + 56);
  *(_OWORD *)v145 = *(_OWORD *)(a2 + 60);
  if (v7 > 0x22)
    goto LABEL_24;
  if (((1 << v7) & 0x414002000) == 0)
  {
    if (v7 == 8)
    {
      v19 = *(int **)(a2 + 80);
      if (v19)
      {
        v20 = *v19;
        *v19 += 2;
        v133 = 8;
        v135 = 1;
        if (v20)
          *v19 = v20;
        else
          WTF::StringImpl::destroy();
LABEL_71:
        memset(v145, 0, 20);
        v145[20] = 1;
        WTF::StringBuilder::append();
        WGSL::toString(13);
        v136 = v128;
        v139 = ", ";
        LODWORD(v140) = 2;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)v145, (uint64_t *)&v136, (uint64_t)&v139);
        v45 = v128;
        v128 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v45 -= 2;
        }
        WGSL::TemplateTypes<(WGSL::TokenType)28,(WGSL::TokenType)26,(WGSL::TokenType)34>::appendNameTo((uint64_t)v145);
        WGSL::toString(v7);
        v139 = "], but got a ";
        LODWORD(v140) = 13;
        v136 = v128;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>((WTF::StringBuilder *)v145, (unint64_t *)&v139, (uint64_t *)&v136);
        v46 = v128;
        v128 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
          {
            WTF::StringImpl::destroy();
            v47 = *(_DWORD **)v145;
            if (!*(_QWORD *)v145)
              goto LABEL_81;
            goto LABEL_82;
          }
          *(_DWORD *)v46 -= 2;
        }
        v47 = *(_DWORD **)v145;
        if (!*(_QWORD *)v145)
        {
LABEL_81:
          WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v145);
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)v145);
          v47 = *(_DWORD **)v145;
          if (!*(_QWORD *)v145)
            goto LABEL_83;
        }
LABEL_82:
        *v47 += 2;
LABEL_83:
        v48 = v6 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v6) << 32);
        *(_QWORD *)a1 = v47;
        *(_QWORD *)(a1 + 8) = v5;
        *(_QWORD *)(a1 + 16) = v48;
        *(_DWORD *)(a1 + 24) = 1;
        v49 = *(_DWORD **)&v145[8];
        *(_QWORD *)&v145[8] = 0;
        if (v49)
        {
          if (*v49 == 2)
          {
            WTF::StringImpl::destroy();
            v50 = *(_DWORD **)v145;
            *(_QWORD *)v145 = 0;
            if (!v50)
            {
LABEL_91:
              v51 = 1;
              return ((uint64_t (*)(_BYTE *, int *))off_1E0FD6FF8[v51])(v145, &v133);
            }
LABEL_89:
            if (*v50 == 2)
            {
              WTF::StringImpl::destroy();
              v51 = 1;
              return ((uint64_t (*)(_BYTE *, int *))off_1E0FD6FF8[v51])(v145, &v133);
            }
            *v50 -= 2;
            goto LABEL_91;
          }
          *v49 -= 2;
        }
        v50 = *(_DWORD **)v145;
        *(_QWORD *)v145 = 0;
        if (!v50)
          goto LABEL_91;
        goto LABEL_89;
      }
    }
LABEL_24:
    v133 = v7;
    v135 = 1;
    goto LABEL_71;
  }
  v9 = (_OWORD *)(a2 + 60);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v11;
    if (v10 <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBBECLL);
    }
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v13 + 32 * v11;
    v15 = *(_DWORD *)v14;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
    *v9 = *(_OWORD *)(v14 + 4);
    v16 = *(_DWORD *)v14;
    if (v16 <= 8)
    {
      if (((1 << v16) & 0x38) != 0)
      {
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_14:
        *(_QWORD *)(a2 + 80) = v17;
        goto LABEL_5;
      }
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
        goto LABEL_5;
      }
      if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_14;
      }
    }
LABEL_5:
    v12 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v12;
    ++v11;
  }
  while (v15 == 82);
  v133 = v7;
  v134 = *(_OWORD *)v145;
  v135 = 0;
  switch((_DWORD)v7)
  {
    case 0xD:
      v18 = 0;
      v125 = 1;
      v132 = 0;
      v131 = 0;
      if (*(_DWORD *)(a2 + 56) == 83)
        goto LABEL_26;
      goto LABEL_54;
    case 0x1C:
      v125 = 0;
      v18 = 2;
      v132 = 2;
      v131 = 0;
      if (*(_DWORD *)(a2 + 56) == 83)
        goto LABEL_26;
      goto LABEL_54;
    case 0x1A:
      v125 = 1;
      v18 = 1;
      v132 = 1;
      v131 = 0;
      if (*(_DWORD *)(a2 + 56) == 83)
        goto LABEL_26;
LABEL_54:
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v145, a2);
      v38 = v147;
      if (!v147)
        goto LABEL_196;
LABEL_55:
      if (v38 == 1)
      {
        v39 = *(_QWORD *)v145;
        if (*(_QWORD *)v145)
          **(_DWORD **)v145 += 2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v145[8];
        *(_QWORD *)a1 = v39;
        v40 = 1;
        *(_DWORD *)(a1 + 24) = 1;
        goto LABEL_261;
      }
LABEL_268:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_283;
  }
  v125 = 0;
  v18 = 3;
  v132 = 3;
  v131 = 0;
  if (*(_DWORD *)(a2 + 56) != 83)
    goto LABEL_54;
LABEL_26:
  v21 = *(_QWORD *)(a2 + 88);
  v22 = *(unsigned int *)(a2 + 96);
  v23 = *(_DWORD *)(a2 + 36);
  v24 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v24;
    if (v23 <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBBF4);
    }
    v26 = *(_QWORD *)(a2 + 24);
    v27 = v26 + 32 * v24;
    v28 = *(_DWORD *)v27;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v27;
    *v9 = *(_OWORD *)(v27 + 4);
    v29 = *(_DWORD *)v27;
    if (v29 <= 8)
    {
      if (((1 << v29) & 0x38) != 0)
      {
        v30 = *(_DWORD **)(v26 + 32 * v24 + 24);
        goto LABEL_37;
      }
      if (((1 << v29) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v26 + 32 * v24 + 24);
      }
      else if (v29 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v30 = *(_DWORD **)(v26 + 32 * v24 + 24);
        if (v30)
          *v30 += 2;
LABEL_37:
        *(_QWORD *)(a2 + 80) = v30;
      }
    }
    v25 = *(unsigned int *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v25;
    ++v24;
    if (v28 == 82)
      continue;
    break;
  }
  v31 = *(_QWORD *)(a2 + 88);
  v124 = v22;
  if (v28 != 8)
  {
    *(_DWORD *)v145 = v28;
    v147 = 1;
    WGSL::toString(8);
    WGSL::toString(*(int *)v145);
    v139 = "Expected a ";
    *(_QWORD *)&v140 = 12;
    v136 = ", but got a ";
    *(_QWORD *)&v137 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v139, v148, (uint64_t)&v136, (uint64_t *)&v144, v149);
    if (!v149[0])
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBC2CLL);
    }
    v41 = v144;
    v144 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy();
        v42 = (_DWORD *)v148[0];
        v148[0] = 0;
        if (!v42)
        {
LABEL_97:
          v44 = v25 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v25) << 32);
          v139 = (const char *)v149[0];
LABEL_98:
          *(_QWORD *)&v140 = v31;
          *((_QWORD *)&v140 + 1) = v44;
          v52 = 1;
          v141 = 1;
          v53 = v147;
          if (v147 == -1)
            goto LABEL_100;
          goto LABEL_99;
        }
LABEL_94:
        if (*v42 == 2)
          WTF::StringImpl::destroy();
        else
          *v42 -= 2;
        goto LABEL_97;
      }
      *(_DWORD *)v41 -= 2;
    }
    v42 = (_DWORD *)v148[0];
    v148[0] = 0;
    if (!v42)
      goto LABEL_97;
    goto LABEL_94;
  }
  *(_DWORD *)v145 = 8;
  *(_OWORD *)&v145[4] = *v9;
  v32 = *(_DWORD **)(a2 + 80);
  if (v32)
    *v32 += 2;
  v146 = v32;
  v147 = 0;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v24;
    if (v23 <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBBFCLL);
    }
    v34 = v26 + 32 * v24;
    v35 = *(_DWORD *)v34;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v34;
    *v9 = *(_OWORD *)(v34 + 4);
    v36 = *(_DWORD *)v34;
    if (v36 <= 8)
    {
      if (((1 << v36) & 0x38) != 0)
      {
        v37 = *(_DWORD **)(v26 + 32 * v24 + 24);
        goto LABEL_52;
      }
      if (((1 << v36) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v26 + 32 * v24 + 24);
      }
      else if (v36 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v37 = *(_DWORD **)(v26 + 32 * v24 + 24);
        if (v37)
          *v37 += 2;
LABEL_52:
        *(_QWORD *)(a2 + 80) = v37;
      }
    }
    v33 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v33;
    ++v24;
    if (v35 == 82)
      continue;
    break;
  }
  v43 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::AddressSpace> [6]>::tryGet<WTF::String>((unsigned __int8 ***)WGSL::parseAddressSpace(WTF::String const&)::__map, (uint64_t *)&v146);
  if (!v43 || *(_BYTE *)v43 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v44 = v25 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v25) << 32);
    goto LABEL_98;
  }
  v52 = 0;
  LOBYTE(v139) = *(_BYTE *)v43;
  v141 = 0;
  v53 = v147;
  if (v147 != -1)
  {
LABEL_99:
    ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v53])(&v136, v145);
    v52 = v141;
  }
LABEL_100:
  if (v52)
  {
    if (v52 != 1)
      goto LABEL_268;
    v54 = v139;
    if (v139)
      *(_DWORD *)v139 += 2;
    v129 = v140;
    v128 = v54;
    v55 = 1;
    v130 = 1;
    goto LABEL_189;
  }
  v56 = *(_DWORD *)(a2 + 56);
  if (v56 != 48)
  {
    if (v139 >= 5u)
      v65 = 1;
    else
      v65 = 0x10001uLL >> (8 * v139);
    LOBYTE(v143) = v65;
    if (v56 != 84)
      goto LABEL_177;
LABEL_123:
    v66 = *(_DWORD *)(a2 + 36);
    v67 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v67;
      if (v66 <= v67)
      {
        __break(0xC471u);
        JUMPOUT(0x1824EBC14);
      }
      v69 = *(_QWORD *)(a2 + 24);
      v70 = v69 + 32 * v67;
      v71 = *(_DWORD *)v70;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v70;
      *v9 = *(_OWORD *)(v70 + 4);
      v72 = *(_DWORD *)v70;
      if (v72 > 8)
        goto LABEL_125;
      if (((1 << v72) & 0x38) != 0)
        break;
      if (((1 << v72) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v69 + 32 * v67 + 24);
      }
      else if (v72 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v73 = *(_DWORD **)(v69 + 32 * v67 + 24);
        if (v73)
          *v73 += 2;
        goto LABEL_134;
      }
LABEL_125:
      v68 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v68;
      ++v67;
      if (v71 != 82)
      {
        v74 = *(_QWORD **)(a2 + 8);
        *(_QWORD *)v145 = v21;
        *(_DWORD *)&v145[8] = v124;
        *(_DWORD *)&v145[12] = v68 - v124;
        v128 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::VariableQualifier,WGSL::SourceSpan,WGSL::AddressSpace &,WGSL::AccessMode &,void>(v74, v145, (char *)&v139, (char *)&v143);
        v130 = 0;
        goto LABEL_188;
      }
    }
    v73 = *(_DWORD **)(v69 + 32 * v67 + 24);
LABEL_134:
    *(_QWORD *)(a2 + 80) = v73;
    goto LABEL_125;
  }
  if (v139 != 3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v75 = v124 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v124) << 32);
LABEL_187:
    *(_QWORD *)&v129 = v21;
    *((_QWORD *)&v129 + 1) = v75;
    v130 = 1;
    goto LABEL_188;
  }
  v57 = *(_DWORD *)(a2 + 36);
  v58 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v58;
    if (v57 <= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBC1CLL);
    }
    v60 = *(_QWORD *)(a2 + 24);
    v61 = v60 + 32 * v58;
    v62 = *(_DWORD *)v61;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v61;
    *v9 = *(_OWORD *)(v61 + 4);
    v63 = *(_DWORD *)v61;
    if (v63 <= 8)
    {
      if (((1 << v63) & 0x38) != 0)
      {
        v64 = *(_DWORD **)(v60 + 32 * v58 + 24);
        goto LABEL_118;
      }
      if (((1 << v63) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v60 + 32 * v58 + 24);
      }
      else if (v63 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v64 = *(_DWORD **)(v60 + 32 * v58 + 24);
        if (v64)
          *v64 += 2;
LABEL_118:
        *(_QWORD *)(a2 + 80) = v64;
      }
    }
    v59 = *(unsigned int *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v59;
    ++v58;
    if (v62 == 82)
      continue;
    break;
  }
  v76 = *(_QWORD *)(a2 + 88);
  if (v62 != 8)
  {
    *(_DWORD *)v145 = v62;
    v147 = 1;
    WGSL::toString(8);
    if (v147 != 1)
      goto LABEL_268;
    WGSL::toString(*(int *)v145);
    v149[0] = (uint64_t)"Expected a ";
    v149[1] = 12;
    v148[0] = (uint64_t)", but got a ";
    v148[1] = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v149, (uint64_t *)&v143, (uint64_t)v148, (uint64_t *)&v142, &v144);
    if (!v144)
      goto LABEL_283;
    v83 = v142;
    v142 = 0;
    if (v83)
    {
      if (*v83 == 2)
        WTF::StringImpl::destroy();
      else
        *v83 -= 2;
    }
    v87 = v143;
    v143 = 0;
    if (v87)
    {
      if (*v87 == 2)
        WTF::StringImpl::destroy();
      else
        *v87 -= 2;
    }
    v86 = v59 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v59) << 32);
    v136 = v144;
    goto LABEL_168;
  }
  *(_DWORD *)v145 = 8;
  *(_OWORD *)&v145[4] = *v9;
  v77 = *(_DWORD **)(a2 + 80);
  if (v77)
    *v77 += 2;
  v146 = v77;
  v147 = 0;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v58;
    if (v57 <= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBC24);
    }
    v79 = v60 + 32 * v58;
    v80 = *(_DWORD *)v79;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v79;
    *v9 = *(_OWORD *)(v79 + 4);
    v81 = *(_DWORD *)v79;
    if (v81 <= 8)
    {
      if (((1 << v81) & 0x38) != 0)
      {
        v82 = *(_DWORD **)(v60 + 32 * v58 + 24);
        goto LABEL_153;
      }
      if (((1 << v81) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v60 + 32 * v58 + 24);
      }
      else if (v81 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v82 = *(_DWORD **)(v60 + 32 * v58 + 24);
        if (v82)
          *v82 += 2;
LABEL_153:
        *(_QWORD *)(a2 + 80) = v82;
      }
    }
    v78 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v78;
    ++v58;
    if (v80 == 82)
      continue;
    break;
  }
  v84 = WGSL::parseAccessMode((uint64_t *)&v146);
  if (v84)
  {
    v85 = 0;
    LOBYTE(v136) = *v84;
    v138 = 0;
    goto LABEL_169;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v86 = v59 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v59) << 32);
LABEL_168:
  *(_QWORD *)&v137 = v76;
  *((_QWORD *)&v137 + 1) = v86;
  v85 = 1;
  v138 = 1;
LABEL_169:
  if (v147 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD6FF8[v147])(v149, v145);
    v85 = v138;
  }
  if (!v85)
  {
    LOBYTE(v143) = (_BYTE)v136;
    v56 = *(_DWORD *)(a2 + 56);
    if (v56 != 84)
    {
LABEL_177:
      WGSL::toString(84);
      WGSL::toString(v56);
      *(_QWORD *)v145 = "Expected a ";
      *(_QWORD *)&v145[8] = 12;
      v136 = ", but got a ";
      *(_QWORD *)&v137 = 13;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v145, v148, (uint64_t)&v136, (uint64_t *)&v144, v149);
      if (!v149[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1824EBC34);
      }
      v90 = v144;
      v144 = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v90 -= 2;
      }
      v91 = (_DWORD *)v148[0];
      v148[0] = 0;
      if (v91)
      {
        if (*v91 == 2)
          WTF::StringImpl::destroy();
        else
          *v91 -= 2;
      }
      v75 = v124 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v124) << 32);
      v128 = (const char *)v149[0];
      goto LABEL_187;
    }
    goto LABEL_123;
  }
  if (v85 != 1)
    goto LABEL_268;
  v88 = (char *)v136;
  if (v136)
  {
    v89 = *(_DWORD *)v136;
    *(_DWORD *)v136 += 2;
    v129 = v137;
    v128 = v88;
    v130 = 1;
    v136 = 0;
    if (v89)
      *(_DWORD *)v88 = v89;
    else
      WTF::StringImpl::destroy();
  }
  else
  {
    v129 = v137;
    v128 = 0;
    v130 = 1;
  }
LABEL_188:
  v55 = v141;
  if (v141 != -1)
LABEL_189:
    ((void (*)(_BYTE *, const char **))off_1E0FD7438[v55])(v145, &v139);
  if (v130)
  {
    if (v130 == 1)
    {
      v92 = (char *)v128;
      if (v128)
      {
        v93 = *(_DWORD *)v128;
        *(_DWORD *)v128 += 2;
        *(_OWORD *)(a1 + 8) = v129;
        *(_QWORD *)a1 = v92;
        *(_DWORD *)(a1 + 24) = 1;
        v128 = 0;
        if (v93)
          *(_DWORD *)v92 = v93;
        else
          WTF::StringImpl::destroy();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = v129;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 24) = 1;
      }
      goto LABEL_262;
    }
    goto LABEL_268;
  }
  v131 = v128;
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v145, a2);
  v38 = v147;
  if (v147)
    goto LABEL_55;
LABEL_196:
  v128 = 0;
  v94 = *(_DWORD *)(a2 + 56);
  if (v94 != 47)
  {
    v103 = 0;
    v149[0] = 0;
    if ((v125 & 1) == 0)
      goto LABEL_221;
    goto LABEL_210;
  }
  v95 = *(_DWORD *)(a2 + 36);
  v96 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v96;
    if (v95 <= v96)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBC04);
    }
    v98 = *(_QWORD *)(a2 + 24);
    v99 = v98 + 32 * v96;
    v100 = *(_DWORD *)v99;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v99;
    *v9 = *(_OWORD *)(v99 + 4);
    v101 = *(_DWORD *)v99;
    if (v101 <= 8)
    {
      if (((1 << v101) & 0x38) != 0)
      {
        v102 = *(_DWORD **)(v98 + 32 * v96 + 24);
        goto LABEL_208;
      }
      if (((1 << v101) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v98 + 32 * v96 + 24);
      }
      else if (v101 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v102 = *(_DWORD **)(v98 + 32 * v96 + 24);
        if (v102)
          *v102 += 2;
LABEL_208:
        *(_QWORD *)(a2 + 80) = v102;
      }
    }
    v97 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v97;
    ++v96;
    if (v100 == 82)
      continue;
    break;
  }
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeName((uint64_t)&v139, a2);
  if (v141)
  {
    if (v141 == 1)
    {
      v105 = (char *)v139;
      if (v139)
      {
        v106 = *(_DWORD *)v139;
        *(_DWORD *)v139 += 2;
        *(_OWORD *)(a1 + 8) = v140;
        *(_QWORD *)a1 = v105;
        *(_DWORD *)(a1 + 24) = 1;
        v139 = 0;
        if (!v106)
          goto LABEL_238;
        goto LABEL_219;
      }
      goto LABEL_266;
    }
    goto LABEL_268;
  }
  v103 = v139;
  v128 = v139;
  v94 = *(_DWORD *)(a2 + 56);
  v149[0] = 0;
  if ((v125 & 1) == 0)
  {
LABEL_221:
    if (v94 == 49)
      goto LABEL_222;
    v115 = 0;
    if (v103)
    {
LABEL_248:
      v118 = *(_QWORD **)(a2 + 8);
      v119 = *(_DWORD *)(a2 + 96) - v6;
      v139 = v5;
      *(_QWORD *)&v140 = __PAIR64__(v119, v6);
      *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::Variable,WGSL::SourceSpan,WGSL::AST::VariableFlavor &,WGSL::AST::Identifier,WGSL::AST::VariableQualifier *,WGSL::AST::Expression *,WGSL::AST::Expression *,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(v118, &v139, &v132, (uint64_t)v145, (uint64_t *)&v131, (uint64_t *)&v128, v149, a3);
      *(_DWORD *)(a1 + 24) = 0;
      v40 = v147;
      if (v147 != -1)
        goto LABEL_261;
      goto LABEL_262;
    }
LABEL_243:
    if (v115)
      goto LABEL_248;
    if (v18 == 3)
    {
      v116 = "var";
      v117 = 4;
LABEL_251:
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v139, v116, v117, " declaration requires a type or initializer", 44);
      if (!v139)
      {
        __break(0xC471u);
        JUMPOUT(0x1824EBC44);
      }
      v120 = v6 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v6) << 32);
      *(_QWORD *)a1 = v139;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v120;
      goto LABEL_259;
    }
    if (v18 != 1)
    {
      if (!v18)
      {
        __break(0xC471u);
        JUMPOUT(0x1824EBBE4);
      }
      v116 = "override";
      v117 = 9;
      goto LABEL_251;
    }
LABEL_283:
    __break(0xC471u);
    JUMPOUT(0x1824EBBC4);
  }
LABEL_210:
  if (v94 != 49)
  {
    WGSL::toString(49);
    WGSL::toString(v94);
    v139 = "Expected a ";
    *(_QWORD *)&v140 = 12;
    v136 = ", but got a ";
    *(_QWORD *)&v137 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v139, (uint64_t *)&v127, (uint64_t)&v136, (uint64_t *)&v126, v148);
    if (!v148[0])
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBC3CLL);
    }
    v104 = v126;
    v126 = 0;
    if (v104)
    {
      if (*v104 == 2)
        WTF::StringImpl::destroy();
      else
        *v104 -= 2;
    }
    v121 = v127;
    v127 = 0;
    if (v121)
    {
      if (*v121 == 2)
        WTF::StringImpl::destroy();
      else
        *v121 -= 2;
    }
    v122 = v6 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v6) << 32);
    *(_QWORD *)a1 = v148[0];
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v122;
    goto LABEL_259;
  }
LABEL_222:
  v107 = *(_DWORD *)(a2 + 36);
  v108 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v108;
    if (v107 <= v108)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EBC0CLL);
    }
    v110 = *(_QWORD *)(a2 + 24);
    v111 = v110 + 32 * v108;
    v112 = *(_DWORD *)v111;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v111;
    *v9 = *(_OWORD *)(v111 + 4);
    v113 = *(_DWORD *)v111;
    if (v113 <= 8)
    {
      if (((1 << v113) & 0x38) != 0)
      {
        v114 = *(_DWORD **)(v110 + 32 * v108 + 24);
        goto LABEL_233;
      }
      if (((1 << v113) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v110 + 32 * v108 + 24);
      }
      else if (v113 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v114 = *(_DWORD **)(v110 + 32 * v108 + 24);
        if (v114)
          *v114 += 2;
LABEL_233:
        *(_QWORD *)(a2 + 80) = v114;
      }
    }
    v109 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v109;
    ++v108;
    if (v112 == 82)
      continue;
    break;
  }
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v139, a2);
  if (!v141)
  {
    v149[0] = (uint64_t)v139;
    v115 = v139 != 0;
    if (v103)
      goto LABEL_248;
    goto LABEL_243;
  }
  if (v141 != 1)
    goto LABEL_268;
  v105 = (char *)v139;
  if (v139)
  {
    v106 = *(_DWORD *)v139;
    *(_DWORD *)v139 += 2;
    *(_OWORD *)(a1 + 8) = v140;
    *(_QWORD *)a1 = v105;
    *(_DWORD *)(a1 + 24) = 1;
    if (!v106)
    {
LABEL_238:
      WTF::StringImpl::destroy();
      goto LABEL_260;
    }
LABEL_219:
    *(_DWORD *)v105 = v106;
    goto LABEL_260;
  }
LABEL_266:
  *(_OWORD *)(a1 + 8) = v140;
  *(_QWORD *)a1 = 0;
LABEL_259:
  *(_DWORD *)(a1 + 24) = 1;
LABEL_260:
  v40 = 0;
LABEL_261:
  ((void (*)(const char **, _BYTE *))off_1E0FD6FE8[v40])(&v139, v145);
LABEL_262:
  v51 = 0;
  return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD6FF8[v51])(v145, &v133);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST8VariableEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_DWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeName(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  _DWORD *result;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 v12;
  _DWORD *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  char v18;

  v4 = *(const char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v6 + 1;
  if ((v6 + 1) >= 0x10)
  {
    WTF::String::number((WTF::String *)0xF);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"composite type may not be nested more than ", 44, (uint64_t *)&v17, (int8x16_t *)" levels", 8, &v13);
    v11 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v11;
    *(_DWORD *)(a1 + 24) = 1;
    v13 = 0;
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*result == 2)
        result = (_DWORD *)WTF::StringImpl::destroy();
      else
        *result -= 2;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)(a2 + 56) != 8)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_13;
  }
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v13, a2);
  if (!v16)
  {
    if (MEMORY[0x186DAB1B8](v15, "array", 5))
    {
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseArrayType(a1, a2);
      v8 = 0;
LABEL_12:
      result = (_DWORD *)((uint64_t (*)(char *, _DWORD **))off_1E0FD6FE8[v8])(&v18, &v13);
      goto LABEL_13;
    }
    result = WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeNameAfterIdentifier(a1, a2, (uint64_t)&v13, v4, v5);
    v8 = v16;
    if (v16 != -1)
      goto LABEL_12;
LABEL_13:
    *(_DWORD *)(a2 + 48) = v6;
    return result;
  }
  if (v16 == 1)
  {
    v7 = v13;
    if (v13)
      *v13 += 2;
    *(_OWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v7;
    v8 = 1;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_12;
  }
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_DWORD *)WGSL::AST::Builder::construct<WGSL::AST::TypeAlias,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,void>((WGSL::AST::Builder *)v12);
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::TypeAlias,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x3FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  v9 = *a4;
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)v8 = &off_1E0FD71B8;
  *(_QWORD *)(v8 + 24) = &off_1E0FD2EE8;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v8 + 24) = &off_1E0FD2F10;
  v10 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 56) = v9;
  *v7 += 64;
  v11 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v11 != *((_DWORD *)v7 + 10))
  {
    v18 = (_QWORD *)(v7[4] + 8 * v11);
LABEL_17:
    *v18 = v8;
    *((_DWORD *)v7 + 11) = v11 + 1;
    return (_QWORD *)v8;
  }
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (void *)v7[4];
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)v7 + 10) = v14;
    v7[4] = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if ((void *)v7[4] == v15)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *((unsigned int *)v7 + 11);
    v18 = (_QWORD *)(v7[4] + 8 * v11);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseArrayType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _OWORD *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  void *result;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _BYTE v47[24];
  int v48;
  int v49;
  const char *v50;
  __int128 v51;
  unsigned int v52;
  _DWORD *v53;
  __int128 v54;
  int v55;
  const char *v56;
  _DWORD *v57;
  _QWORD v58[2];

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v56 = 0;
  v57 = 0;
  v6 = v5;
  if (*(_DWORD *)(a2 + 56) != 83)
  {
LABEL_78:
    v43 = *(_QWORD **)(a2 + 8);
    *(_QWORD *)v47 = v4;
    *(_DWORD *)&v47[8] = v5;
    *(_DWORD *)&v47[12] = v6 - v5;
    result = WGSL::AST::Builder::construct<WGSL::AST::ArrayTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression *&,WGSL::AST::Expression *&,void>(v43, v47, (uint64_t *)&v57, (uint64_t *)&v56);
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 24) = 0;
    return result;
  }
  v7 = *(_DWORD *)(a2 + 36);
  v8 = (_OWORD *)(a2 + 60);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v7 <= v9)
      goto LABEL_80;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v8 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  result = WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeName((uint64_t)&v53, a2);
  if (v55)
  {
    if (v55 == 1)
    {
      v17 = v53;
      if (v53)
        *v53 += 2;
      *(_OWORD *)(a1 + 8) = v54;
      *(_QWORD *)a1 = v17;
      v18 = 1;
      *(_DWORD *)(a1 + 24) = 1;
      goto LABEL_74;
    }
    goto LABEL_79;
  }
  v57 = v53;
  v19 = *(_DWORD *)(a2 + 56);
  if (v19 != 48)
    goto LABEL_48;
  v20 = *(_DWORD *)(a2 + 36);
  v21 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v21;
    if (v20 <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EC4ECLL);
    }
    v23 = *(_QWORD *)(a2 + 24);
    v24 = v23 + 32 * v21;
    v25 = *(_DWORD *)v24;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v24;
    *v8 = *(_OWORD *)(v24 + 4);
    v26 = *(_DWORD *)v24;
    if (v26 <= 8)
    {
      if (((1 << v26) & 0x38) != 0)
      {
        v27 = *(_DWORD **)(v23 + 32 * v21 + 24);
        goto LABEL_31;
      }
      if (((1 << v26) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v23 + 32 * v21 + 24);
      }
      else if (v26 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v27 = *(_DWORD **)(v23 + 32 * v21 + 24);
        if (v27)
          *v27 += 2;
LABEL_31:
        *(_QWORD *)(a2 + 80) = v27;
      }
    }
    v22 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v22;
    ++v21;
    if (v25 == 82)
      continue;
    break;
  }
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression(v47, a2);
  if (!v48)
  {
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAdditiveExpressionPostUnary((uint64_t)&v50, a2, v47);
    v29 = v52;
    if (v52)
    {
      if (v52 != 1)
        goto LABEL_79;
      v31 = v50;
      if (v50)
        *(_DWORD *)v50 += 2;
      *(_OWORD *)(a1 + 8) = v51;
      *(_QWORD *)a1 = v31;
      *(_DWORD *)(a1 + 24) = 1;
    }
    else
    {
      v56 = v50;
    }
    result = (void *)((uint64_t (*)(_QWORD *, const char **))off_1E0FD71D8[v29])(v58, &v50);
    v30 = v48;
    if (v48 != -1)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (v48 != 1)
  {
LABEL_79:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
    __break(0xC471u);
LABEL_84:
    JUMPOUT(0x1824EC4E4);
  }
  v28 = *(_QWORD *)v47;
  if (*(_QWORD *)v47)
    **(_DWORD **)v47 += 2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v47[8];
  *(_QWORD *)a1 = v28;
  LODWORD(v29) = 1;
  *(_DWORD *)(a1 + 24) = 1;
  v30 = 1;
LABEL_44:
  result = (void *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD71D8[v30])(&v50, v47);
LABEL_45:
  if ((_DWORD)v29)
  {
    v18 = 1;
    goto LABEL_74;
  }
  v19 = *(_DWORD *)(a2 + 56);
LABEL_48:
  if (v19 == 84)
  {
    *(_DWORD *)v47 = 84;
    *(_OWORD *)&v47[4] = *v8;
    v49 = 0;
    v32 = *(_DWORD *)(a2 + 36);
    v33 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v33;
      if (v32 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x1824EC4F4);
      }
      v35 = *(_QWORD *)(a2 + 24);
      v36 = v35 + 32 * v33;
      v37 = *(_DWORD *)v36;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v36;
      *v8 = *(_OWORD *)(v36 + 4);
      v38 = *(_DWORD *)v36;
      if (v38 > 8)
        goto LABEL_51;
      if (((1 << v38) & 0x38) != 0)
        break;
      if (((1 << v38) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v35 + 32 * v33 + 24);
      }
      else if (v38 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v39 = *(_DWORD **)(v35 + 32 * v33 + 24);
        if (v39)
          *v39 += 2;
        goto LABEL_60;
      }
LABEL_51:
      v34 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v34;
      ++v33;
      if (v37 != 82)
      {
        v18 = 0;
        goto LABEL_73;
      }
    }
    v39 = *(_DWORD **)(v35 + 32 * v33 + 24);
LABEL_60:
    *(_QWORD *)(a2 + 80) = v39;
    goto LABEL_51;
  }
  *(_DWORD *)v47 = v19;
  v49 = 1;
  WGSL::toString(84);
  WGSL::toString(v19);
  v50 = "Expected a ";
  *(_QWORD *)&v51 = 12;
  v58[0] = ", but got a ";
  v58[1] = 13;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v50, (uint64_t *)&v45, (uint64_t)v58, (uint64_t *)&v44, &v46);
  if (!v46)
  {
    __break(0xC471u);
    goto LABEL_84;
  }
  v40 = v44;
  v44 = 0;
  if (!v40)
    goto LABEL_65;
  if (*v40 == 2)
  {
    WTF::StringImpl::destroy();
    v41 = v45;
    v45 = 0;
    if (!v41)
      goto LABEL_72;
    goto LABEL_69;
  }
  *v40 -= 2;
LABEL_65:
  v41 = v45;
  v45 = 0;
  if (v41)
  {
LABEL_69:
    if (*v41 == 2)
      WTF::StringImpl::destroy();
    else
      *v41 -= 2;
  }
LABEL_72:
  v42 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
  *(_QWORD *)a1 = v46;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v42;
  v18 = 1;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_73:
  result = (void *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD6FF8[v18])(&v50, v47);
LABEL_74:
  if (v55 != -1)
    result = (void *)((uint64_t (*)(_BYTE *, _DWORD **))off_1E0FD71D8[v55])(v47, &v53);
  if (!v18)
  {
    v6 = *(_DWORD *)(a2 + 96);
    goto LABEL_78;
  }
  return result;
}

_QWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeNameAfterIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, unsigned int a5)
{
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *result;
  WTF *v19;
  unsigned int v20;
  void *v21;
  const char *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  _QWORD *v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  const char *v53;
  __int128 v54;
  unsigned int v55;
  WTF *v56;
  uint64_t v57;
  _QWORD v58[2];

  if (*(_DWORD *)(a2 + 56) != 83)
  {
    v16 = *(_QWORD **)(a2 + 8);
    v17 = *(_DWORD *)(a2 + 96) - a5;
    v53 = a4;
    *(_QWORD *)&v54 = __PAIR64__(v17, a5);
    result = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v16, &v53, a3);
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 24) = 0;
    return result;
  }
  v7 = (_OWORD *)(a2 + 60);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v8 <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1824ECA30);
    }
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v7 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  v19 = 0;
  v20 = 0;
  v56 = 0;
  v57 = 0;
  v46 = a5;
  while (1)
  {
    result = (_QWORD *)WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeName(&v53, a2);
    if (!v55)
    {
      if (v20 == (_DWORD)v57)
      {
        result = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, v20 + 1, (unint64_t)&v53);
        v25 = HIDWORD(v57);
        v19 = v56;
        *((_QWORD *)v56 + HIDWORD(v57)) = *result;
        v20 = v25 + 1;
        HIDWORD(v57) = v25 + 1;
        if (*(_DWORD *)(a2 + 56) != 48)
          goto LABEL_27;
      }
      else
      {
        *((_QWORD *)v19 + v20) = v53;
        v20 = ++HIDWORD(v57);
        if (*(_DWORD *)(a2 + 56) != 48)
        {
LABEL_27:
          v23 = 4;
          v24 = v55;
          if (v55 == -1)
            goto LABEL_22;
          goto LABEL_21;
        }
      }
      v26 = *(_DWORD *)(a2 + 36);
      v27 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v27;
        if (v26 <= v27)
          goto LABEL_75;
        v29 = *(_QWORD *)(a2 + 24);
        v30 = v29 + 32 * v27;
        v31 = *(_DWORD *)v30;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v30;
        *v7 = *(_OWORD *)(v30 + 4);
        v32 = *(_DWORD *)v30;
        if (v32 > 8)
          goto LABEL_32;
        if (((1 << v32) & 0x38) != 0)
          break;
        if (((1 << v32) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v29 + 32 * v27 + 24);
        }
        else if (v32 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v33 = *(_DWORD **)(v29 + 32 * v27 + 24);
          if (v33)
            *v33 += 2;
          goto LABEL_41;
        }
LABEL_32:
        v28 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v28;
        ++v27;
        if (v31 != 82)
        {
          v23 = 0;
          v24 = v55;
          if (v55 == -1)
            goto LABEL_22;
LABEL_21:
          result = (_QWORD *)((uint64_t (*)(_QWORD *, const char **))off_1E0FD71D8[v24])(v58, &v53);
          goto LABEL_22;
        }
      }
      v33 = *(_DWORD **)(v29 + 32 * v27 + 24);
LABEL_41:
      *(_QWORD *)(a2 + 80) = v33;
      goto LABEL_32;
    }
    if (v55 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_75:
      __break(0xC471u);
      goto LABEL_79;
    }
    v22 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    *(_OWORD *)(a1 + 8) = v54;
    *(_QWORD *)a1 = v22;
    v23 = 1;
    *(_DWORD *)(a1 + 24) = 1;
    v24 = v55;
    if (v55 != -1)
      goto LABEL_21;
LABEL_22:
    if (v23)
      break;
    if (*(_DWORD *)(a2 + 56) == 84)
      goto LABEL_46;
  }
  if (v23 != 4)
    goto LABEL_59;
  v34 = *(_DWORD *)(a2 + 56);
  if (v34 != 84)
  {
    WGSL::toString(84);
    WGSL::toString(v34);
    v53 = "Expected a ";
    *(_QWORD *)&v54 = 12;
    v58[0] = ", but got a ";
    v58[1] = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v53, (uint64_t *)&v51, (uint64_t)v58, (uint64_t *)&v50, &v52);
    if (v52)
    {
      v44 = v50;
      v50 = 0;
      if (v44)
      {
        if (*v44 == 2)
        {
          WTF::StringImpl::destroy();
          result = v51;
          v51 = 0;
          if (!result)
            goto LABEL_72;
LABEL_69:
          if (*(_DWORD *)result == 2)
            result = (_QWORD *)WTF::StringImpl::destroy();
          else
            *(_DWORD *)result -= 2;
LABEL_72:
          v45 = v46 | ((unint64_t)(*(_DWORD *)(a2 + 96) - a5) << 32);
          *(_QWORD *)a1 = v52;
          *(_QWORD *)(a1 + 8) = a4;
          *(_QWORD *)(a1 + 16) = v45;
          *(_DWORD *)(a1 + 24) = 1;
          if (v19)
            goto LABEL_60;
          return result;
        }
        *v44 -= 2;
      }
      result = v51;
      v51 = 0;
      if (!result)
        goto LABEL_72;
      goto LABEL_69;
    }
    __break(0xC471u);
LABEL_79:
    JUMPOUT(0x1824ECA28);
  }
LABEL_46:
  v35 = *(_DWORD *)(a2 + 36);
  v36 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v36;
    if (v35 <= v36)
    {
      __break(0xC471u);
      JUMPOUT(0x1824ECA38);
    }
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v38 + 32 * v36;
    v40 = *(_DWORD *)v39;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v39;
    *v7 = *(_OWORD *)(v39 + 4);
    v41 = *(_DWORD *)v39;
    if (v41 <= 8)
    {
      if (((1 << v41) & 0x38) != 0)
      {
        v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
LABEL_57:
        *(_QWORD *)(a2 + 80) = v42;
        goto LABEL_48;
      }
      if (((1 << v41) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v38 + 32 * v36 + 24);
        goto LABEL_48;
      }
      if (v41 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
        if (v42)
          *v42 += 2;
        goto LABEL_57;
      }
    }
LABEL_48:
    v37 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v37;
    ++v36;
  }
  while (v40 == 82);
  v43 = *(_QWORD **)(a2 + 8);
  v53 = a4;
  LODWORD(v54) = a5;
  DWORD1(v54) = v37 - a5;
  result = WGSL::AST::Builder::construct<WGSL::AST::ElaboratedTypeExpression,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(v43, &v53, a3, (uint64_t *)&v56);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 24) = 0;
  v19 = v56;
LABEL_59:
  if (v19)
  {
LABEL_60:
    v56 = 0;
    LODWORD(v57) = 0;
    return (_QWORD *)WTF::fastFree(v19, v21);
  }
  return result;
}

void WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  _DWORD *v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _DWORD *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _DWORD *v82;
  unsigned int v83;
  _OWORD *v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  _DWORD *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  _DWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  _DWORD *v120;
  uint64_t v121;
  const char *v122;
  _DWORD *v123;
  const char *v124;
  int v125;
  _QWORD *v126;
  unsigned int v127;
  _DWORD *v128;
  unint64_t v129;
  _QWORD *v130;
  unsigned int v131;
  _QWORD *v132;
  __int128 v133;
  int v134;
  __int128 v135;
  const char *v136;
  __int128 v137;
  int v138;
  const char *v139;
  __int128 v140;
  unsigned int v141;
  _BYTE v142[24];
  uint64_t v143;
  unsigned int v144;
  _DWORD *v145;
  _DWORD *v146;

  v4 = *(const char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v6 + 1;
  if ((v6 + 1) >= 0x81)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_44;
  }
  v8 = *(_DWORD *)(a2 + 56);
  v9 = v8 - 36;
  if ((v8 - 36) > 0x2A || ((1 << (v8 - 36)) & 0x50000800021) == 0)
  {
    switch(v8)
    {
      case 2:
        *(_DWORD *)v142 = 2;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v12 = *(_DWORD *)(a2 + 36);
        v13 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v13;
          if (v12 <= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA24);
          }
          v15 = *(_QWORD *)(a2 + 24);
          v16 = v15 + 32 * v13;
          v17 = *(_DWORD *)v16;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v16;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v16 + 4);
          v18 = *(_DWORD *)v16;
          if (v18 > 8)
            goto LABEL_12;
          if (((1 << v18) & 0x38) != 0)
            break;
          if (((1 << v18) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v15 + 32 * v13 + 24);
          }
          else if (v18 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v19 = *(_DWORD **)(v15 + 32 * v13 + 24);
            if (v19)
              *v19 += 2;
            goto LABEL_21;
          }
LABEL_12:
          v14 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v14;
          ++v13;
          if (v17 != 82)
          {
            v103 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v14 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::AbstractFloatLiteral,WGSL::SourceSpan,double &,void>(v103, &v139, &v143);
            goto LABEL_162;
          }
        }
        v19 = *(_DWORD **)(v15 + 32 * v13 + 24);
LABEL_21:
        *(_QWORD *)(a2 + 80) = v19;
        goto LABEL_12;
      case 3:
        *(_DWORD *)v142 = 3;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v48 = *(_DWORD *)(a2 + 36);
        v49 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v49;
          if (v48 <= v49)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA3CLL);
          }
          v51 = *(_QWORD *)(a2 + 24);
          v52 = v51 + 32 * v49;
          v53 = *(_DWORD *)v52;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v52;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v52 + 4);
          v54 = *(_DWORD *)v52;
          if (v54 > 8)
            goto LABEL_71;
          if (((1 << v54) & 0x38) != 0)
            break;
          if (((1 << v54) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v51 + 32 * v49 + 24);
          }
          else if (v54 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v55 = *(_DWORD **)(v51 + 32 * v49 + 24);
            if (v55)
              *v55 += 2;
            goto LABEL_80;
          }
LABEL_71:
          v50 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v50;
          ++v49;
          if (v53 != 82)
          {
            v104 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v50 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::AbstractIntegerLiteral,WGSL::SourceSpan,long long &,void>(v104, &v139, &v143);
            goto LABEL_162;
          }
        }
        v55 = *(_DWORD **)(v51 + 32 * v49 + 24);
LABEL_80:
        *(_QWORD *)(a2 + 80) = v55;
        goto LABEL_71;
      case 4:
        *(_DWORD *)v142 = 4;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v32 = *(_DWORD *)(a2 + 36);
        v33 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v33;
          if (v32 <= v33)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA2CLL);
          }
          v35 = *(_QWORD *)(a2 + 24);
          v36 = v35 + 32 * v33;
          v37 = *(_DWORD *)v36;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v36;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v36 + 4);
          v38 = *(_DWORD *)v36;
          if (v38 > 8)
            goto LABEL_47;
          if (((1 << v38) & 0x38) != 0)
            break;
          if (((1 << v38) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v35 + 32 * v33 + 24);
          }
          else if (v38 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v39 = *(_DWORD **)(v35 + 32 * v33 + 24);
            if (v39)
              *v39 += 2;
            goto LABEL_56;
          }
LABEL_47:
          v34 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v34;
          ++v33;
          if (v37 != 82)
          {
            v100 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v34 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::Signed32Literal,WGSL::SourceSpan,long long &,void>(v100, &v139, &v143);
            goto LABEL_162;
          }
        }
        v39 = *(_DWORD **)(v35 + 32 * v33 + 24);
LABEL_56:
        *(_QWORD *)(a2 + 80) = v39;
        goto LABEL_47;
      case 5:
        *(_DWORD *)v142 = 5;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v67 = *(_DWORD *)(a2 + 36);
        v68 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v68;
          if (v67 <= v68)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA4CLL);
          }
          v70 = *(_QWORD *)(a2 + 24);
          v71 = v70 + 32 * v68;
          v72 = *(_DWORD *)v71;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v71;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v71 + 4);
          v73 = *(_DWORD *)v71;
          if (v73 > 8)
            goto LABEL_102;
          if (((1 << v73) & 0x38) != 0)
            break;
          if (((1 << v73) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v70 + 32 * v68 + 24);
          }
          else if (v73 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v74 = *(_DWORD **)(v70 + 32 * v68 + 24);
            if (v74)
              *v74 += 2;
            goto LABEL_111;
          }
LABEL_102:
          v69 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v69;
          ++v68;
          if (v72 != 82)
          {
            v106 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v69 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,long long &,void>(v106, &v139, &v143);
            goto LABEL_162;
          }
        }
        v74 = *(_DWORD **)(v70 + 32 * v68 + 24);
LABEL_111:
        *(_QWORD *)(a2 + 80) = v74;
        goto LABEL_102;
      case 6:
        *(_DWORD *)v142 = 6;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v75 = *(_DWORD *)(a2 + 36);
        v76 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v76;
          if (v75 <= v76)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA54);
          }
          v78 = *(_QWORD *)(a2 + 24);
          v79 = v78 + 32 * v76;
          v80 = *(_DWORD *)v79;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v79;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v79 + 4);
          v81 = *(_DWORD *)v79;
          if (v81 > 8)
            goto LABEL_114;
          if (((1 << v81) & 0x38) != 0)
            break;
          if (((1 << v81) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v78 + 32 * v76 + 24);
          }
          else if (v81 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v82 = *(_DWORD **)(v78 + 32 * v76 + 24);
            if (v82)
              *v82 += 2;
            goto LABEL_123;
          }
LABEL_114:
          v77 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v77;
          ++v76;
          if (v80 != 82)
          {
            v107 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v77 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::Float32Literal,WGSL::SourceSpan,double &,void>(v107, &v139, (double *)&v143);
            goto LABEL_162;
          }
        }
        v82 = *(_DWORD **)(v78 + 32 * v76 + 24);
LABEL_123:
        *(_QWORD *)(a2 + 80) = v82;
        goto LABEL_114;
      case 7:
        *(_DWORD *)v142 = 7;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v40 = *(_DWORD *)(a2 + 36);
        v41 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v41;
          if (v40 <= v41)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA34);
          }
          v43 = *(_QWORD *)(a2 + 24);
          v44 = v43 + 32 * v41;
          v45 = *(_DWORD *)v44;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v44;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v44 + 4);
          v46 = *(_DWORD *)v44;
          if (v46 > 8)
            goto LABEL_59;
          if (((1 << v46) & 0x38) != 0)
            break;
          if (((1 << v46) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v43 + 32 * v41 + 24);
          }
          else if (v46 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v47 = *(_DWORD **)(v43 + 32 * v41 + 24);
            if (v47)
              *v47 += 2;
            goto LABEL_68;
          }
LABEL_59:
          v42 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v42;
          ++v41;
          if (v45 != 82)
          {
            v102 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v42 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::Float16Literal,WGSL::SourceSpan,double &,void>(v102, &v139, &v143);
            goto LABEL_162;
          }
        }
        v47 = *(_DWORD **)(v43 + 32 * v41 + 24);
LABEL_68:
        *(_QWORD *)(a2 + 80) = v47;
        goto LABEL_59;
      case 8:
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v142, a2);
        if (v144)
        {
          if (v144 != 1)
            goto LABEL_216;
          v56 = *(_QWORD **)v142;
          if (*(_QWORD *)v142)
            **(_DWORD **)v142 += 2;
          v133 = *(_OWORD *)&v142[8];
          v132 = v56;
          v134 = 1;
          v57 = v144;
          if (v144 == -1)
            goto LABEL_163;
LABEL_206:
          ((void (*)(const char **, _BYTE *))off_1E0FD6FE8[v57])(&v139, v142);
          goto LABEL_163;
        }
        if (MEMORY[0x186DAB1B8](v143, "array", 5))
        {
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseArrayType((uint64_t)&v139, a2);
        }
        else
        {
          if ((*(_DWORD *)(a2 + 56) | 0x10) != 0x53)
          {
            v130 = *(_QWORD **)(a2 + 8);
            v131 = *(_DWORD *)(a2 + 96) - v5;
            v139 = v4;
            *(_QWORD *)&v140 = __PAIR64__(v131, v5);
            v132 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v130, &v139, (uint64_t)v142);
            v134 = 0;
            v57 = v144;
            if (v144 == -1)
              goto LABEL_163;
            goto LABEL_206;
          }
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeNameAfterIdentifier((uint64_t)&v139, a2, (uint64_t)v142, v4, v5);
        }
        v121 = v141;
        if (v141)
        {
          if (v141 != 1)
            goto LABEL_216;
          v122 = v139;
          if (v139)
            *(_DWORD *)v139 += 2;
          v133 = v140;
          v132 = v122;
          v134 = 1;
          goto LABEL_205;
        }
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseArgumentExpressionList(&v136, a2);
        if (v138)
        {
          if (v138 != 1)
            goto LABEL_216;
          v124 = v136;
          if (v136)
            *(_DWORD *)v136 += 2;
          v133 = v137;
          v132 = v124;
          v125 = 1;
          v134 = 1;
        }
        else
        {
          v126 = *(_QWORD **)(a2 + 8);
          v127 = *(_DWORD *)(a2 + 96) - v5;
          *(_QWORD *)&v135 = v4;
          *((_QWORD *)&v135 + 1) = __PAIR64__(v127, v5);
          v132 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(v126, &v135, (uint64_t *)&v139, (uint64_t *)&v136);
          v134 = 0;
          v125 = v138;
          if (v138 == -1)
            goto LABEL_205;
        }
        ((void (*)(__int128 *, const char **))off_1E0FD70A8[v125])(&v135, &v136);
LABEL_205:
        ((void (*)(const char **, const char **))off_1E0FD71D8[v121])(&v136, &v139);
        v57 = v144;
        if (v144 == -1)
          goto LABEL_163;
        goto LABEL_206;
      case 22:
        v58 = *(_DWORD *)(a2 + 36);
        v59 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v59;
          if (v58 <= v59)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA44);
          }
          v61 = *(_QWORD *)(a2 + 24);
          v62 = v61 + 32 * v59;
          v63 = *(_DWORD *)v62;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v62;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v62 + 4);
          v64 = *(_DWORD *)v62;
          if (v64 > 8)
            goto LABEL_89;
          if (((1 << v64) & 0x38) != 0)
            break;
          if (((1 << v64) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v61 + 32 * v59 + 24);
          }
          else if (v64 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v65 = *(_DWORD **)(v61 + 32 * v59 + 24);
            if (v65)
              *v65 += 2;
            goto LABEL_98;
          }
LABEL_89:
          v60 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v60;
          ++v59;
          if (v63 != 82)
          {
            v105 = *(_QWORD **)(a2 + 8);
            *(_QWORD *)v142 = v4;
            *(_DWORD *)&v142[8] = v5;
            *(_DWORD *)&v142[12] = v60 - v5;
            LOBYTE(v139) = 0;
LABEL_161:
            v101 = WGSL::AST::Builder::construct<WGSL::AST::BoolLiteral,WGSL::SourceSpan,BOOL,void>(v105, v142, (char *)&v139);
LABEL_162:
            v132 = v101;
            v134 = 0;
LABEL_163:
            if (!v134)
            {
              WGSL::Parser<WGSL::Lexer<unsigned char>>::parsePostfixExpression(a1, a2, v132, (unint64_t)v4, v5);
              v111 = 0;
LABEL_169:
              ((void (*)(_BYTE *, _QWORD **))off_1E0FD71D8[v111])(v142, &v132);
              goto LABEL_44;
            }
            if (v134 == 1)
            {
              v110 = v132;
              if (v132)
                *(_DWORD *)v132 += 2;
              *(_OWORD *)(a1 + 8) = v133;
              *(_QWORD *)a1 = v110;
              v111 = 1;
              *(_DWORD *)(a1 + 24) = 1;
              goto LABEL_169;
            }
LABEL_216:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_217:
            __break(0xC471u);
            JUMPOUT(0x1824EDA14);
          }
        }
        v65 = *(_DWORD **)(v61 + 32 * v59 + 24);
LABEL_98:
        *(_QWORD *)(a2 + 80) = v65;
        goto LABEL_89;
      case 33:
        v92 = *(_DWORD *)(a2 + 36);
        v93 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v93;
          if (v92 <= v93)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA64);
          }
          v95 = *(_QWORD *)(a2 + 24);
          v96 = v95 + 32 * v93;
          v97 = *(_DWORD *)v96;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v96;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v96 + 4);
          v98 = *(_DWORD *)v96;
          if (v98 > 8)
            goto LABEL_138;
          if (((1 << v98) & 0x38) != 0)
            break;
          if (((1 << v98) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v95 + 32 * v93 + 24);
          }
          else if (v98 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v99 = *(_DWORD **)(v95 + 32 * v93 + 24);
            if (v99)
              *v99 += 2;
            goto LABEL_147;
          }
LABEL_138:
          v94 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v94;
          ++v93;
          if (v97 != 82)
          {
            v105 = *(_QWORD **)(a2 + 8);
            *(_QWORD *)v142 = v4;
            *(_DWORD *)&v142[8] = v5;
            *(_DWORD *)&v142[12] = v94 - v5;
            LOBYTE(v139) = 1;
            goto LABEL_161;
          }
        }
        v99 = *(_DWORD **)(v95 + 32 * v93 + 24);
LABEL_147:
        *(_QWORD *)(a2 + 80) = v99;
        goto LABEL_138;
      case 67:
        v83 = *(_DWORD *)(a2 + 36);
        v84 = (_OWORD *)(a2 + 60);
        v85 = *(_DWORD *)(a2 + 40) + 1;
        break;
      default:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v66 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
        *(_QWORD *)&v133 = v4;
        *((_QWORD *)&v133 + 1) = v66;
        v134 = 1;
        goto LABEL_163;
    }
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v85;
      if (v83 <= v85)
      {
        __break(0xC471u);
        JUMPOUT(0x1824EDA5CLL);
      }
      v87 = *(_QWORD *)(a2 + 24);
      v88 = v87 + 32 * v85;
      v89 = *(_DWORD *)v88;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v88;
      *v84 = *(_OWORD *)(v88 + 4);
      v90 = *(_DWORD *)v88;
      if (v90 > 8)
        goto LABEL_126;
      if (((1 << v90) & 0x38) != 0)
        break;
      if (((1 << v90) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v87 + 32 * v85 + 24);
      }
      else if (v90 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v91 = *(_DWORD **)(v87 + 32 * v85 + 24);
        if (v91)
          *v91 += 2;
        goto LABEL_135;
      }
LABEL_126:
      v86 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v86;
      ++v85;
      if (v89 != 82)
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression(v142, a2);
        v108 = v143;
        if ((_DWORD)v143)
        {
          if ((_DWORD)v143 != 1)
            goto LABEL_216;
          v109 = *(_QWORD **)v142;
          if (*(_QWORD *)v142)
            **(_DWORD **)v142 += 2;
          v133 = *(_OWORD *)&v142[8];
LABEL_197:
          v132 = v109;
          v134 = v108;
LABEL_213:
          ((void (*)(const char **, _BYTE *))off_1E0FD71D8[v108])(&v139, v142);
          goto LABEL_163;
        }
        v112 = *(_DWORD *)(a2 + 56);
        if (v112 != 68)
        {
          WGSL::toString(68);
          WGSL::toString(v112);
          v139 = "Expected a ";
          *(_QWORD *)&v140 = 12;
          v136 = ", but got a ";
          *(_QWORD *)&v137 = 13;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v139, (uint64_t *)&v146, (uint64_t)&v136, (uint64_t *)&v145, &v135);
          if (!(_QWORD)v135)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA74);
          }
          v123 = v145;
          v145 = 0;
          if (v123)
          {
            if (*v123 == 2)
              WTF::StringImpl::destroy();
            else
              *v123 -= 2;
          }
          v128 = v146;
          v146 = 0;
          if (v128)
          {
            if (*v128 == 2)
              WTF::StringImpl::destroy();
            else
              *v128 -= 2;
          }
          v129 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          v132 = (_QWORD *)v135;
          *(_QWORD *)&v133 = v4;
          *((_QWORD *)&v133 + 1) = v129;
          v134 = 1;
          goto LABEL_213;
        }
        v113 = *(_DWORD *)(a2 + 36);
        v114 = *(_DWORD *)(a2 + 40) + 1;
        while (2)
        {
          *(_DWORD *)(a2 + 40) = v114;
          if (v113 <= v114)
          {
            __break(0xC471u);
            JUMPOUT(0x1824EDA6CLL);
          }
          v116 = *(_QWORD *)(a2 + 24);
          v117 = v116 + 32 * v114;
          v118 = *(_DWORD *)v117;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v117;
          *v84 = *(_OWORD *)(v117 + 4);
          v119 = *(_DWORD *)v117;
          if (v119 <= 8)
          {
            if (((1 << v119) & 0x38) != 0)
            {
              v120 = *(_DWORD **)(v116 + 32 * v114 + 24);
              goto LABEL_184;
            }
            if (((1 << v119) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v116 + 32 * v114 + 24);
            }
            else if (v119 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v120 = *(_DWORD **)(v116 + 32 * v114 + 24);
              if (v120)
                *v120 += 2;
LABEL_184:
              *(_QWORD *)(a2 + 80) = v120;
            }
          }
          v115 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v115;
          ++v114;
          if (v118 != 82)
          {
            v109 = *(_QWORD **)v142;
            goto LABEL_197;
          }
          continue;
        }
      }
    }
    v91 = *(_DWORD **)(v87 + 32 * v85 + 24);
LABEL_135:
    *(_QWORD *)(a2 + 80) = v91;
    goto LABEL_126;
  }
  v11 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_25;
    case 5:
      v11 = 4;
      goto LABEL_25;
    case 23:
      v11 = 3;
      goto LABEL_25;
    case 40:
      v11 = 2;
      goto LABEL_25;
    case 42:
      v11 = 1;
LABEL_25:
      LOBYTE(v136) = v11;
      v20 = *(_DWORD *)(a2 + 36);
      v21 = *(_DWORD *)(a2 + 40) + 1;
      break;
    default:
      goto LABEL_217;
  }
  do
  {
    *(_DWORD *)(a2 + 40) = v21;
    if (v20 <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EDA1CLL);
    }
    v23 = *(_QWORD *)(a2 + 24);
    v24 = v23 + 32 * v21;
    v25 = *(_DWORD *)v24;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v24;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v24 + 4);
    v26 = *(_DWORD *)v24;
    if (v26 <= 8)
    {
      if (((1 << v26) & 0x38) != 0)
      {
        v27 = *(_DWORD **)(v23 + 32 * v21 + 24);
LABEL_36:
        *(_QWORD *)(a2 + 80) = v27;
        goto LABEL_27;
      }
      if (((1 << v26) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v23 + 32 * v21 + 24);
        goto LABEL_27;
      }
      if (v26 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v27 = *(_DWORD **)(v23 + 32 * v21 + 24);
        if (v27)
          *v27 += 2;
        goto LABEL_36;
      }
    }
LABEL_27:
    v22 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v22;
    ++v21;
  }
  while (v25 == 82);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression(v142, a2);
  if (!(_DWORD)v143)
  {
    v30 = *(_QWORD **)(a2 + 8);
    v31 = *(_DWORD *)(a2 + 96) - v5;
    v139 = v4;
    *(_QWORD *)&v140 = __PAIR64__(v31, v5);
    *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::UnaryOperation &,void>(v30, &v139, v142, (char *)&v136);
    *(_DWORD *)(a1 + 24) = 0;
    v29 = v143;
    if ((_DWORD)v143 != -1)
      goto LABEL_43;
    goto LABEL_44;
  }
  if ((_DWORD)v143 != 1)
    goto LABEL_216;
  v28 = *(_QWORD *)v142;
  if (*(_QWORD *)v142)
    **(_DWORD **)v142 += 2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v142[8];
  *(_QWORD *)a1 = v28;
  v29 = 1;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_43:
  ((void (*)(const char **, _BYTE *))off_1E0FD71D8[v29])(&v139, v142);
LABEL_44:
  *(_DWORD *)(a2 + 44) = v6;
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAdditiveExpressionPostUnary(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _OWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  _DWORD *v31;
  __int128 v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;
  unsigned int v36;
  char v37;
  _DWORD *v38;
  __int128 v39;
  unsigned int v40;

  v6 = *(_QWORD *)(a2 + 88);
  v29 = *(_DWORD *)(a2 + 96);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseMultiplicativeExpressionPostUnary(&v38, a2, a3);
  v7 = v40;
  if (!v40)
  {
    *a3 = v38;
    v9 = (_OWORD *)(a1 + 8);
    v28 = v7;
LABEL_10:
    v12 = *(_DWORD *)(a2 + 56);
    if ((v12 - 59) > 0x11 || ((1 << (v12 - 59)) & 0x28809) == 0)
    {
      *(_QWORD *)a1 = *a3;
      *(_DWORD *)(a1 + 24) = 0;
LABEL_41:
      v7 = v28;
      return ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v7])(&v34, &v38);
    }
    result = WGSL::toBinaryOperation(v12);
    v37 = result;
    v15 = *(_DWORD *)(a2 + 36);
    v16 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v16;
      if (v15 <= v16)
        goto LABEL_44;
      v18 = *(_QWORD *)(a2 + 24);
      v19 = v18 + 32 * v16;
      v20 = *(_DWORD *)v19;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v19;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v19 + 4);
      v21 = *(_DWORD *)v19;
      if (v21 > 8)
        goto LABEL_16;
      if (((1 << v21) & 0x38) != 0)
        break;
      if (((1 << v21) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v18 + 32 * v16 + 24);
      }
      else if (v21 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v22 = *(_DWORD **)(v18 + 32 * v16 + 24);
        if (v22)
          *v22 += 2;
        goto LABEL_25;
      }
LABEL_16:
      v17 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v17;
      ++v16;
      if (v20 != 82)
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression(&v34, a2);
        if (v36)
        {
          if (v36 != 1)
            goto LABEL_43;
          v23 = v34;
          if (v34)
            *v34 += 2;
          *v9 = v35;
          *(_QWORD *)a1 = v23;
          v10 = 1;
          *(_DWORD *)(a1 + 24) = 1;
          v11 = 1;
LABEL_8:
          ((void (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v11])(&v31, &v34);
        }
        else
        {
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseMultiplicativeExpressionPostUnary(&v31, a2, &v34);
          v10 = v33;
          if (v33)
          {
            if (v33 != 1)
              goto LABEL_43;
            v24 = v31;
            if (v31)
              *v31 += 2;
            *v9 = v32;
            *(_QWORD *)a1 = v24;
            *(_DWORD *)(a1 + 24) = 1;
            v25 = 1;
          }
          else
          {
            v26 = *(_QWORD **)(a2 + 8);
            v27 = *(_DWORD *)(a2 + 96) - v29;
            *(_QWORD *)&v30 = v6;
            *((_QWORD *)&v30 + 1) = __PAIR64__(v27, v29);
            *a3 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v26, &v30, a3, &v31, &v37);
            v25 = v33;
            if (v33 == -1)
            {
              v11 = v36;
              if (v36 != -1)
                goto LABEL_8;
              goto LABEL_9;
            }
          }
          ((void (*)(__int128 *, _DWORD **))off_1E0FD71D8[v25])(&v30, &v31);
          v11 = v36;
          if (v36 != -1)
            goto LABEL_8;
        }
LABEL_9:
        if (v10)
          goto LABEL_41;
        goto LABEL_10;
      }
    }
    v22 = *(_DWORD **)(v18 + 32 * v16 + 24);
LABEL_25:
    *(_QWORD *)(a2 + 80) = v22;
    goto LABEL_16;
  }
  if (v40 == 1)
  {
    v8 = v38;
    if (v38)
      *v38 += 2;
    *(_OWORD *)(a1 + 8) = v39;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 24) = 1;
    return ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v7])(&v34, &v38);
  }
LABEL_43:
  result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_44:
  __break(0xC471u);
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ArrayTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression *&,WGSL::AST::Expression *&,void>(_QWORD *this, _OWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x4FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  v9 = *a3;
  v10 = *a4;
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E0FD43C0;
  *(_QWORD *)(v8 + 64) = v9;
  *(_QWORD *)(v8 + 72) = v10;
  *v7 += 80;
  v11 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v11 != *((_DWORD *)v7 + 10))
  {
    v18 = (_QWORD *)(v7[4] + 8 * v11);
LABEL_17:
    *v18 = v8;
    *((_DWORD *)v7 + 11) = v11 + 1;
    return (_QWORD *)v8;
  }
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (void *)v7[4];
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)v7 + 10) = v14;
    v7[4] = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if ((void *)v7[4] == v15)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *((unsigned int *)v7 + 11);
    v18 = (_QWORD *)(v7[4] + 8 * v11);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::UnaryOperation &,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, char *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x4FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  v9 = *a4;
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E0FD3140;
  *(_QWORD *)(v8 + 64) = *a3;
  *(_BYTE *)(v8 + 72) = v9;
  *v7 += 80;
  v10 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v10 != *((_DWORD *)v7 + 10))
  {
    v17 = (_QWORD *)(v7[4] + 8 * v10);
LABEL_17:
    *v17 = v8;
    *((_DWORD *)v7 + 11) = v10 + 1;
    return (_QWORD *)v8;
  }
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (void *)v7[4];
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v7 + 10) = v13;
    v7[4] = v15;
    memcpy(v15, v14, 8 * v10);
    if (v14)
    {
      if ((void *)v7[4] == v14)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
    v10 = *((unsigned int *)v7 + 11);
    v17 = (_QWORD *)(v7[4] + 8 * v10);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

__n128 WGSL::Parser<WGSL::Lexer<unsigned char>>::parsePostfixExpression(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unsigned int a5)
{
  unsigned int v6;
  _QWORD *v7;
  _OWORD *v10;
  unint64_t v11;
  __n128 result;
  char v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  unsigned int v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  unint64_t v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  _BYTE v53[24];
  int v54;
  _DWORD *v55;
  __n128 v56;
  unsigned int v57;
  _QWORD *v58;
  _QWORD v59[2];
  unint64_t v60[3];

  v6 = a4;
  v7 = a3;
  v47 = *(unsigned int *)(a2 + 96);
  v48 = *(_QWORD *)(a2 + 88);
  v10 = (_OWORD *)(a2 + 60);
  v58 = a3;
  v11 = HIDWORD(a4);
  v49 = (__n128 *)(a1 + 8);
  while (2)
  {
    while (1)
    {
      v15 = *(_DWORD *)(a2 + 56);
      if (v15 == 69)
        break;
      if (v15 != 45)
      {
        *(_QWORD *)a1 = v7;
        *(_DWORD *)(a1 + 24) = 0;
        return result;
      }
      v16 = *(_DWORD *)(a2 + 36);
      v17 = *(_DWORD *)(a2 + 40) + 1;
      do
      {
        *(_DWORD *)(a2 + 40) = v17;
        if (v16 <= v17)
          goto LABEL_80;
        v19 = *(_QWORD *)(a2 + 24);
        v20 = v19 + 32 * v17;
        v21 = *(_DWORD *)v20;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v20;
        *v10 = *(_OWORD *)(v20 + 4);
        v22 = *(_DWORD *)v20;
        if (v22 <= 8)
        {
          if (((1 << v22) & 0x38) != 0)
          {
            v23 = *(_DWORD **)(v19 + 32 * v17 + 24);
LABEL_18:
            *(_QWORD *)(a2 + 80) = v23;
            goto LABEL_9;
          }
          if (((1 << v22) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v19 + 32 * v17 + 24);
            goto LABEL_9;
          }
          if (v22 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v23 = *(_DWORD **)(v19 + 32 * v17 + 24);
            if (v23)
              *v23 += 2;
            goto LABEL_18;
          }
        }
LABEL_9:
        v18 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v18;
        ++v17;
      }
      while (v21 == 82);
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression(&v55, a2);
      if (v57)
      {
        if (v57 == 1)
        {
          v33 = v55;
          if (v55)
            *v55 += 2;
          v13 = 0;
          result = v56;
          *v49 = v56;
          *(_QWORD *)a1 = v33;
          *(_DWORD *)(a1 + 24) = 1;
          v14 = v57;
          if (v57 == -1)
            goto LABEL_4;
          goto LABEL_3;
        }
LABEL_76:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
        __break(0xC471u);
        JUMPOUT(0x1824EE750);
      }
      if (*(_DWORD *)(a2 + 56) != 46)
      {
        *(_DWORD *)v53 = *(_DWORD *)(a2 + 56);
        v54 = 1;
        WGSL::toString(46);
        if (v54 != 1)
          goto LABEL_76;
        WGSL::toString(*(int *)v53);
        v60[0] = (unint64_t)"Expected a ";
        v60[1] = 12;
        v59[0] = ", but got a ";
        v59[1] = 13;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(v60, (uint64_t *)&v51, (uint64_t)v59, (uint64_t *)&v50, &v52);
        if (!v52)
          goto LABEL_80;
        v42 = v50;
        v50 = 0;
        if (v42)
        {
          if (*v42 != 2)
          {
            *v42 -= 2;
            goto LABEL_58;
          }
          WTF::StringImpl::destroy();
          v43 = v51;
          v51 = 0;
          if (v43)
          {
LABEL_61:
            if (*v43 == 2)
              WTF::StringImpl::destroy();
            else
              *v43 -= 2;
          }
        }
        else
        {
LABEL_58:
          v43 = v51;
          v51 = 0;
          if (v43)
            goto LABEL_61;
        }
        v44 = v47 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v47) << 32);
        *(_QWORD *)a1 = v52;
        *(_QWORD *)(a1 + 8) = v48;
        *(_QWORD *)(a1 + 16) = v44;
        *(_DWORD *)(a1 + 24) = 1;
        if (v54 != -1)
          ((void (*)(unint64_t *, _BYTE *))off_1E0FD6FF8[v54])(v60, v53);
        v13 = 0;
        v14 = v57;
        if (v57 == -1)
          goto LABEL_4;
LABEL_3:
        ((void (*)(_BYTE *, _DWORD **))off_1E0FD71D8[v14])(v53, &v55);
        goto LABEL_4;
      }
      *(_OWORD *)&v53[4] = *v10;
      *(_DWORD *)v53 = 46;
      v54 = 0;
      v34 = *(_DWORD *)(a2 + 36);
      v35 = *(_DWORD *)(a2 + 40) + 1;
      while (2)
      {
        *(_DWORD *)(a2 + 40) = v35;
        if (v34 <= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x1824EE760);
        }
        v37 = *(_QWORD *)(a2 + 24);
        v38 = v37 + 32 * v35;
        v39 = *(_DWORD *)v38;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v38;
        *v10 = *(_OWORD *)(v38 + 4);
        v40 = *(_DWORD *)v38;
        if (v40 <= 8)
        {
          if (((1 << v40) & 0x38) != 0)
          {
            v41 = *(_DWORD **)(v37 + 32 * v35 + 24);
            goto LABEL_52;
          }
          if (((1 << v40) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v37 + 32 * v35 + 24);
          }
          else if (v40 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v41 = *(_DWORD **)(v37 + 32 * v35 + 24);
            if (v41)
              *v41 += 2;
LABEL_52:
            *(_QWORD *)(a2 + 80) = v41;
          }
        }
        v36 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v36;
        ++v35;
        if (v39 == 82)
          continue;
        break;
      }
      *(_DWORD *)v53 = v6;
      *(_DWORD *)&v53[4] = v11;
      *(_DWORD *)&v53[8] = a5;
      *(_DWORD *)&v53[12] = v36 - a5;
      v7 = WGSL::AST::Builder::construct<WGSL::AST::IndexAccessExpression,WGSL::SourceSpan &,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,void>(*(_QWORD **)(a2 + 8), v53, &v58, &v55);
      v58 = v7;
      v13 = 1;
      v14 = v57;
      if (v57 != -1)
        goto LABEL_3;
LABEL_4:
      if ((v13 & 1) == 0)
        return result;
    }
    v24 = *(_DWORD *)(a2 + 36);
    v25 = *(_DWORD *)(a2 + 40) + 1;
    do
    {
      *(_DWORD *)(a2 + 40) = v25;
      if (v24 <= v25)
      {
        __break(0xC471u);
        JUMPOUT(0x1824EE758);
      }
      v27 = *(_QWORD *)(a2 + 24);
      v28 = v27 + 32 * v25;
      v29 = *(_DWORD *)v28;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v28;
      *v10 = *(_OWORD *)(v28 + 4);
      v30 = *(_DWORD *)v28;
      if (v30 <= 8)
      {
        if (((1 << v30) & 0x38) != 0)
        {
          v31 = *(_DWORD **)(v27 + 32 * v25 + 24);
LABEL_30:
          *(_QWORD *)(a2 + 80) = v31;
          goto LABEL_21;
        }
        if (((1 << v30) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v27 + 32 * v25 + 24);
          goto LABEL_21;
        }
        if (v30 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v31 = *(_DWORD **)(v27 + 32 * v25 + 24);
          if (v31)
            *v31 += 2;
          goto LABEL_30;
        }
      }
LABEL_21:
      v26 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v26;
      ++v25;
    }
    while (v29 == 82);
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v53, a2);
    if (!v54)
    {
      v32 = *(_DWORD *)(a2 + 96) - a5;
      v55 = (_DWORD *)__PAIR64__(v11, v6);
      v56.n128_u64[0] = __PAIR64__(v32, a5);
      v7 = WGSL::AST::Builder::construct<WGSL::AST::FieldAccessExpression,WGSL::SourceSpan &,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::Identifier,void>(*(_QWORD **)(a2 + 8), &v55, &v58, (uint64_t)v53);
      v58 = v7;
      if (v54 != -1)
        ((void (*)(_DWORD **, _BYTE *))off_1E0FD6FE8[v54])(&v55, v53);
      continue;
    }
    break;
  }
  if (v54 != 1)
    goto LABEL_76;
  v45 = *(_DWORD **)v53;
  if (*(_QWORD *)v53)
  {
    v46 = **(_DWORD **)v53;
    **(_DWORD **)v53 += 2;
    result = *(__n128 *)&v53[8];
    *v49 = *(__n128 *)&v53[8];
    *(_QWORD *)a1 = v45;
    *(_DWORD *)(a1 + 24) = 1;
    *(_QWORD *)v53 = 0;
    if (v46)
      *v45 = v46;
    else
      WTF::StringImpl::destroy();
  }
  else
  {
    result = *(__n128 *)&v53[8];
    *v49 = *(__n128 *)&v53[8];
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 24) = 1;
  }
  return result;
}

void WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  int *v19;
  _QWORD *v20;
  unsigned int v21;
  int *v22;
  uint64_t v23;
  int v24;
  int *v25;
  int v26;
  int *v27;
  int *v28;
  __int128 v29;
  int v30;
  _QWORD *v31;
  __int128 v32;
  int v33;
  int *v34;
  __int128 v35;
  unsigned int v36;
  char v37;

  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression((uint64_t)&v31, a2);
  if (!v33)
  {
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 - 36) <= 0x2C && ((1 << (v5 - 36)) & 0x100010000001) != 0)
    {
      v7 = *(_DWORD *)(a2 + 96);
      v27 = *(int **)(a2 + 88);
      v37 = WGSL::toBinaryOperation(v5);
      v8 = *(_DWORD *)(a2 + 56);
LABEL_14:
      if (*(_DWORD *)(a2 + 56) == v8)
      {
        v10 = *(_DWORD *)(a2 + 36);
        v11 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v11;
          if (v10 <= v11)
            goto LABEL_63;
          v13 = *(_QWORD *)(a2 + 24);
          v14 = v13 + 32 * v11;
          v15 = *(_DWORD *)v14;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v14 + 4);
          v16 = *(_DWORD *)v14;
          if (v16 > 8)
            goto LABEL_17;
          if (((1 << v16) & 0x38) != 0)
            break;
          if (((1 << v16) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
          }
          else if (v16 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
            if (v17)
              *v17 += 2;
            goto LABEL_26;
          }
LABEL_17:
          v12 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v12;
          ++v11;
          if (v15 != 82)
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression((uint64_t)&v34, a2);
            v18 = v36;
            if (v36)
            {
              if (v36 != 1)
                goto LABEL_62;
              v19 = v34;
              if (v34)
                *v34 += 2;
              *(_OWORD *)(a1 + 8) = v35;
              *(_QWORD *)a1 = v19;
              *(_DWORD *)(a1 + 24) = 1;
              v9 = 1;
LABEL_12:
              ((void (*)(int **, int **))off_1E0FD71D8[v9])(&v28, &v34);
            }
            else
            {
              v20 = *(_QWORD **)(a2 + 8);
              v21 = *(_DWORD *)(a2 + 96) - v7;
              v28 = v27;
              *(_QWORD *)&v29 = __PAIR64__(v21, v7);
              v31 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v20, &v28, &v31, &v34, &v37);
              v9 = v36;
              if (v36 != -1)
                goto LABEL_12;
            }
            if (v18)
              goto LABEL_57;
            goto LABEL_14;
          }
        }
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_26:
        *(_QWORD *)(a2 + 80) = v17;
        goto LABEL_17;
      }
      *(_QWORD *)a1 = v31;
      *(_DWORD *)(a1 + 24) = 0;
LABEL_57:
      if (v33 != -1)
        ((void (*)(int **, _QWORD **))off_1E0FD71D8[v33])(&v34, &v31);
      return;
    }
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseRelationalExpressionPostUnary((uint64_t)&v34, a2, &v31);
    if (v36)
    {
      if (v36 != 1)
        goto LABEL_62;
      v22 = v34;
      if (v34)
        *v34 += 2;
      *(_OWORD *)(a1 + 8) = v35;
      *(_QWORD *)a1 = v22;
LABEL_39:
      *(_DWORD *)(a1 + 24) = 1;
      v23 = v36;
      if (v36 == -1)
        goto LABEL_57;
      goto LABEL_56;
    }
    v24 = *(_DWORD *)(a2 + 56);
    if (v24 == 37)
    {
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseShortCircuitExpression((uint64_t)&v28, a2, (uint64_t *)&v34, 37, 16);
      if (v30)
      {
        if (v30 != 1)
          goto LABEL_62;
        v25 = v28;
        if (v28)
        {
LABEL_46:
          v26 = *v25;
          *v25 += 2;
          *(_OWORD *)(a1 + 8) = v29;
          *(_QWORD *)a1 = v25;
          *(_DWORD *)(a1 + 24) = 1;
          if (v26)
          {
            *v25 = v26;
            v23 = v36;
            if (v36 == -1)
              goto LABEL_57;
          }
          else
          {
            WTF::StringImpl::destroy();
            v23 = v36;
            if (v36 == -1)
              goto LABEL_57;
          }
LABEL_56:
          ((void (*)(int **, int **))off_1E0FD71D8[v23])(&v28, &v34);
          goto LABEL_57;
        }
LABEL_52:
        *(_OWORD *)(a1 + 8) = v29;
        *(_QWORD *)a1 = 0;
        goto LABEL_39;
      }
    }
    else
    {
      if (v24 != 65)
      {
        *(_QWORD *)a1 = v34;
        *(_DWORD *)(a1 + 24) = 0;
        v23 = v36;
        if (v36 == -1)
          goto LABEL_57;
        goto LABEL_56;
      }
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseShortCircuitExpression((uint64_t)&v28, a2, (uint64_t *)&v34, 65, 17);
      if (v30)
      {
        if (v30 != 1)
          goto LABEL_62;
        v25 = v28;
        if (v28)
          goto LABEL_46;
        goto LABEL_52;
      }
    }
    v34 = v28;
    *(_QWORD *)a1 = v28;
    *(_DWORD *)(a1 + 24) = 0;
    v23 = v36;
    if (v36 == -1)
      goto LABEL_57;
    goto LABEL_56;
  }
  if (v33 == 1)
  {
    v4 = v31;
    if (v31)
      *(_DWORD *)v31 += 2;
    *(_OWORD *)(a1 + 8) = v32;
    *(_QWORD *)a1 = v4;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_57;
  }
LABEL_62:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
  __break(0xC471u);
}

_DWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseArgumentExpressionList(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF *v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int i;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  _BYTE v48[20];
  int v49;
  const char *v50;
  __int128 v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _QWORD v57[2];
  unint64_t v58[3];

  v3 = result;
  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 56);
  if (v6 != 67)
  {
    WGSL::toString(67);
    WGSL::toString(v6);
    *(_QWORD *)v48 = "Expected a ";
    *(_QWORD *)&v48[8] = 12;
    v50 = ", but got a ";
    *(_QWORD *)&v51 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v48, (uint64_t *)&v56, (uint64_t)&v50, (uint64_t *)&v55, v58);
    if (!v58[0])
    {
      __break(0xC471u);
      goto LABEL_90;
    }
    v16 = v55;
    v55 = 0;
    if (v16)
    {
      if (*v16 == 2)
      {
        WTF::StringImpl::destroy();
        result = v56;
        v56 = 0;
        if (!result)
        {
LABEL_82:
          v43 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)v3 = v58[0];
          *((_QWORD *)v3 + 1) = v4;
          *((_QWORD *)v3 + 2) = v43;
          v3[6] = 1;
          return result;
        }
LABEL_79:
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
        goto LABEL_82;
      }
      *v16 -= 2;
    }
    result = v56;
    v56 = 0;
    if (!result)
      goto LABEL_82;
    goto LABEL_79;
  }
  v7 = (_OWORD *)(a2 + 60);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v8 <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1824EF16CLL);
    }
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v7 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  v44 = v5;
  v17 = 0;
  v18 = 0;
  v53 = 0;
  v54 = 0;
  do
  {
    if (*(_DWORD *)(a2 + 56) == 68)
    {
      v35 = *(_DWORD *)(a2 + 36);
      for (i = *(_DWORD *)(a2 + 40) + 1; ; ++i)
      {
        *(_DWORD *)(a2 + 40) = i;
        if (v35 <= i)
        {
          __break(0xC471u);
          JUMPOUT(0x1824EF174);
        }
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v38 + 32 * i;
        v40 = *(_DWORD *)v39;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v39;
        *v7 = *(_OWORD *)(v39 + 4);
        v41 = *(_DWORD *)v39;
        if (v41 > 8)
          goto LABEL_65;
        if (((1 << v41) & 0x38) != 0)
          break;
        if (((1 << v41) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v38 + 32 * i + 24);
        }
        else if (v41 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v42 = *(_DWORD **)(v38 + 32 * i + 24);
          if (v42)
            *v42 += 2;
          goto LABEL_74;
        }
LABEL_65:
        v37 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v37;
        if (v40 != 82)
        {
          *(_QWORD *)v3 = v53;
          v3[2] = v54;
          v3[3] = v18;
          v3[6] = 0;
          return result;
        }
      }
      v42 = *(_DWORD **)(v38 + 32 * i + 24);
LABEL_74:
      *(_QWORD *)(a2 + 80) = v42;
      goto LABEL_65;
    }
    result = (_DWORD *)WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression(&v50, a2);
    if (!v52)
    {
      if (v18 == (_DWORD)v54)
      {
        result = (_DWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, v18 + 1, (unint64_t)&v50);
        v23 = HIDWORD(v54);
        v17 = v53;
        *((_QWORD *)v53 + HIDWORD(v54)) = *(_QWORD *)result;
        v18 = v23 + 1;
        HIDWORD(v54) = v23 + 1;
        v24 = *(_DWORD *)(a2 + 56);
        if (v24 == 68)
          goto LABEL_21;
      }
      else
      {
        *((_QWORD *)v17 + v18) = v50;
        v18 = ++HIDWORD(v54);
        v24 = *(_DWORD *)(a2 + 56);
        if (v24 == 68)
        {
LABEL_21:
          v19 = 1;
          v20 = v52;
          if (v52 == -1)
            continue;
LABEL_22:
          result = (_DWORD *)((uint64_t (*)(_BYTE *, const char **))off_1E0FD71D8[v20])(v48, &v50);
          continue;
        }
      }
      if (v24 == 48)
      {
        *(_OWORD *)&v48[4] = *v7;
        *(_DWORD *)v48 = 48;
        v49 = 0;
        v25 = *(_DWORD *)(a2 + 36);
        v26 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v26;
          if (v25 <= v26)
            goto LABEL_85;
          v28 = *(_QWORD *)(a2 + 24);
          v29 = v28 + 32 * v26;
          v30 = *(_DWORD *)v29;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v29;
          *v7 = *(_OWORD *)(v29 + 4);
          v31 = *(_DWORD *)v29;
          if (v31 <= 8)
          {
            if (((1 << v31) & 0x38) != 0)
            {
              v32 = *(_DWORD **)(v28 + 32 * v26 + 24);
LABEL_47:
              *(_QWORD *)(a2 + 80) = v32;
              goto LABEL_38;
            }
            if (((1 << v31) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v28 + 32 * v26 + 24);
            }
            else if (v31 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v32 = *(_DWORD **)(v28 + 32 * v26 + 24);
              if (v32)
                *v32 += 2;
              goto LABEL_47;
            }
          }
LABEL_38:
          v27 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v27;
          ++v26;
          if (v30 != 82)
            goto LABEL_21;
        }
      }
      *(_DWORD *)v48 = v24;
      v49 = 1;
      WGSL::toString(48);
      if (v49 != 1)
      {
LABEL_84:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_85:
        __break(0xC471u);
LABEL_90:
        JUMPOUT(0x1824EF164);
      }
      WGSL::toString(*(int *)v48);
      v58[0] = (unint64_t)"Expected a ";
      v58[1] = 12;
      v57[0] = ", but got a ";
      v57[1] = 13;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(v58, (uint64_t *)&v46, (uint64_t)v57, (uint64_t *)&v45, &v47);
      if (!v47)
      {
        __break(0xC471u);
        JUMPOUT(0x1824EF17CLL);
      }
      v33 = v45;
      v45 = 0;
      if (v33)
      {
        if (*v33 == 2)
        {
          WTF::StringImpl::destroy();
          result = v46;
          v46 = 0;
          if (!result)
            goto LABEL_59;
LABEL_56:
          if (*result == 2)
            result = (_DWORD *)WTF::StringImpl::destroy();
          else
            *result -= 2;
LABEL_59:
          v34 = v44 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v44) << 32);
          *(_QWORD *)v3 = v47;
          *((_QWORD *)v3 + 1) = v4;
          *((_QWORD *)v3 + 2) = v34;
          v3[6] = 1;
          if (v49 != -1)
            result = (_DWORD *)((uint64_t (*)(unint64_t *, _BYTE *))off_1E0FD6FF8[v49])(v58, v48);
          v19 = 0;
          v20 = v52;
          if (v52 != -1)
            goto LABEL_22;
          continue;
        }
        *v33 -= 2;
      }
      result = v46;
      v46 = 0;
      if (!result)
        goto LABEL_59;
      goto LABEL_56;
    }
    if (v52 != 1)
      goto LABEL_84;
    v22 = v50;
    if (v50)
      *(_DWORD *)v50 += 2;
    v19 = 0;
    *(_OWORD *)(v3 + 2) = v51;
    *(_QWORD *)v3 = v22;
    v3[6] = 1;
    v20 = v52;
    if (v52 != -1)
      goto LABEL_22;
  }
  while ((v19 & 1) != 0);
  if (v17)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    return (_DWORD *)WTF::fastFree(v17, v21);
  }
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(_QWORD *this, _OWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x5FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E0FD2F38;
  v9 = *a3;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 64) = v9;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(v8 + 72) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v8 + 80) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v8 + 84) = v10;
  *(_WORD *)(v8 + 88) = 1792;
  *v7 += 96;
  v11 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v11 != *((_DWORD *)v7 + 10))
  {
    v18 = (_QWORD *)(v7[4] + 8 * v11);
LABEL_17:
    *v18 = v8;
    *((_DWORD *)v7 + 11) = v11 + 1;
    return (_QWORD *)v8;
  }
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (void *)v7[4];
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)v7 + 10) = v14;
    v7[4] = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if ((void *)v7[4] == v15)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *((unsigned int *)v7 + 11);
    v18 = (_QWORD *)(v7[4] + 8 * v11);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::BoolLiteral,WGSL::SourceSpan,BOOL,void>(_QWORD *this, _OWORD *a2, char *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD70C8;
  *(_BYTE *)(v6 + 64) = v7;
  *v5 += 72;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::AbstractIntegerLiteral,WGSL::SourceSpan,long long &,void>(_QWORD *this, _OWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD44C0;
  *(_QWORD *)(v6 + 64) = v7;
  *v5 += 72;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Signed32Literal,WGSL::SourceSpan,long long &,void>(_QWORD *this, _OWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD70F0;
  *(_DWORD *)(v6 + 64) = v7;
  *v5 += 72;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,long long &,void>(_QWORD *this, _OWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD2F60;
  *(_DWORD *)(v6 + 64) = v7;
  *v5 += 72;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::AbstractFloatLiteral,WGSL::SourceSpan,double &,void>(_QWORD *this, _OWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD7118;
  *(_QWORD *)(v6 + 64) = v7;
  *v5 += 72;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Float32Literal,WGSL::SourceSpan,double &,void>(_QWORD *this, _OWORD *a2, double *a3)
{
  _QWORD *v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD7140;
  *(float *)(v6 + 64) = v7;
  *v5 += 72;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Float16Literal,WGSL::SourceSpan,double &,void>(_QWORD *this, _OWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  _D0 = *a3;
  __asm { FCVT            H0, D0 }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD7168;
  *(_WORD *)(v6 + 64) = _D0;
  *v5 += 72;
  v12 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v12 != *((_DWORD *)v5 + 10))
  {
    v19 = (_QWORD *)(v5[4] + 8 * v12);
LABEL_17:
    *v19 = v6;
    *((_DWORD *)v5 + 11) = v12 + 1;
    return (_QWORD *)v6;
  }
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (void *)v5[4];
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)v5 + 10) = v15;
    v5[4] = v17;
    memcpy(v17, v16, 8 * v12);
    if (v16)
    {
      if ((void *)v5[4] == v16)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
    v12 = *((unsigned int *)v5 + 11);
    v19 = (_QWORD *)(v5[4] + 8 * v12);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::parseRelationalExpressionPostUnary(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  _DWORD *v27;
  __int128 v28;
  int v29;
  char v30;
  _DWORD *v31;
  __int128 v32;
  int v33;
  _DWORD *v34;
  __int128 v35;
  unsigned int v36;
  _DWORD *v37;
  __int128 v38;
  int v39;
  char v40;

  v6 = *(_DWORD **)(a2 + 88);
  v7 = *(_DWORD *)(a2 + 96);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseShiftExpressionPostUnary(&v31, a2, a3);
  if (!v33)
  {
    v10 = v31;
    *a3 = v31;
    v11 = *(_DWORD *)(a2 + 56);
    if (v11 > 0x38 || ((1 << v11) & 0x19C040000000000) == 0)
    {
LABEL_41:
      v9 = 0;
      *(_QWORD *)a1 = v10;
      *(_DWORD *)(a1 + 24) = 0;
      return ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v9])(&v37, &v31);
    }
    result = WGSL::toBinaryOperation(*(_DWORD *)(a2 + 56));
    v30 = result;
    v14 = *(_DWORD *)(a2 + 36);
    v15 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v15;
      if (v14 <= v15)
        goto LABEL_47;
      v17 = *(_QWORD *)(a2 + 24);
      v18 = v17 + 32 * v15;
      v19 = *(_DWORD *)v18;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v18;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v18 + 4);
      v20 = *(_DWORD *)v18;
      if (v20 > 8)
        goto LABEL_12;
      if (((1 << v20) & 0x38) != 0)
        break;
      if (((1 << v20) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v17 + 32 * v15 + 24);
      }
      else if (v20 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v21 = *(_DWORD **)(v17 + 32 * v15 + 24);
        if (v21)
          *v21 += 2;
        goto LABEL_21;
      }
LABEL_12:
      v16 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v16;
      ++v15;
      if (v19 != 82)
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression((uint64_t)&v37, a2);
        if (v39)
        {
          if (v39 != 1)
            goto LABEL_46;
          v22 = v37;
          if (v37)
            *v37 += 2;
          v28 = v38;
          v27 = v22;
          LODWORD(v23) = 1;
          v29 = 1;
          v24 = 1;
          goto LABEL_34;
        }
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseShiftExpressionPostUnary(&v34, a2, &v37);
        v23 = v36;
        if (v36)
        {
          if (v36 != 1)
            goto LABEL_46;
          v22 = v34;
          if (v34)
            *v34 += 2;
          v28 = v35;
          v27 = v22;
          v29 = 1;
        }
        else
        {
          v22 = v34;
          v27 = v34;
          v29 = 0;
        }
        ((void (*)(char *, _DWORD **))off_1E0FD71D8[v23])(&v40, &v34);
        v24 = v39;
        if (v39 != -1)
LABEL_34:
          ((void (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v24])(&v34, &v37);
        if (!(_DWORD)v23)
        {
          v25 = *(_QWORD **)(a2 + 8);
          v26 = *(_DWORD *)(a2 + 96) - v7;
          v37 = v6;
          *(_QWORD *)&v38 = __PAIR64__(v26, v7);
          v10 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v25, &v37, a3, &v27, &v30);
          *a3 = v10;
          goto LABEL_41;
        }
        if ((_DWORD)v23 != 1)
          goto LABEL_46;
        if (!v22)
        {
          *(_OWORD *)(a1 + 8) = v28;
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 24) = 1;
          v9 = 0;
          return ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v9])(&v37, &v31);
        }
        *v22 += 2;
        *(_OWORD *)(a1 + 8) = v28;
        *(_QWORD *)a1 = v22;
        *(_DWORD *)(a1 + 24) = 1;
        v27 = 0;
        if (*v22 != 2)
        {
          *v22 -= 2;
          v9 = 0;
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD71D8[v9])(&v37, &v31);
        }
        result = WTF::StringImpl::destroy();
        v9 = v33;
        if (v33 != -1)
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD71D8[v9])(&v37, &v31);
        return result;
      }
    }
    v21 = *(_DWORD **)(v17 + 32 * v15 + 24);
LABEL_21:
    *(_QWORD *)(a2 + 80) = v21;
    goto LABEL_12;
  }
  if (v33 == 1)
  {
    v8 = v31;
    if (v31)
      *v31 += 2;
    *(_OWORD *)(a1 + 8) = v32;
    *(_QWORD *)a1 = v8;
    v9 = 1;
    *(_DWORD *)(a1 + 24) = 1;
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD71D8[v9])(&v37, &v31);
  }
LABEL_46:
  result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_47:
  __break(0xC471u);
  return result;
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::parseShortCircuitExpression(uint64_t result, uint64_t a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  _DWORD *v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _OWORD *v30;
  _DWORD *v31;
  __int128 v32;
  unsigned int v33;
  char v34;
  _DWORD *v35;
  __int128 v36;
  unsigned int v37;
  _DWORD *v38;
  __int128 v39;
  unsigned int v40;
  _BYTE v41[9];

  v8 = result;
  v34 = a5;
  v28 = *(_DWORD *)(a2 + 92);
  v29 = *(_DWORD *)(a2 + 88);
  v9 = (_OWORD *)(a2 + 60);
  v27 = *(_DWORD *)(a2 + 96);
  v30 = (_OWORD *)(result + 8);
  while (*(_DWORD *)(a2 + 56) == a4)
  {
    v11 = *(_DWORD *)(a2 + 36);
    v12 = *(_DWORD *)(a2 + 40) + 1;
    do
    {
      *(_DWORD *)(a2 + 40) = v12;
      if (v11 <= v12)
        goto LABEL_40;
      v14 = *(_QWORD *)(a2 + 24);
      v15 = v14 + 32 * v12;
      v16 = *(_DWORD *)v15;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v15;
      *v9 = *(_OWORD *)(v15 + 4);
      v17 = *(_DWORD *)v15;
      if (v17 <= 8)
      {
        if (((1 << v17) & 0x38) != 0)
        {
          v18 = *(_DWORD **)(v14 + 32 * v12 + 24);
LABEL_17:
          *(_QWORD *)(a2 + 80) = v18;
          goto LABEL_8;
        }
        if (((1 << v17) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v14 + 32 * v12 + 24);
          goto LABEL_8;
        }
        if (v17 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v18 = *(_DWORD **)(v14 + 32 * v12 + 24);
          if (v18)
            *v18 += 2;
          goto LABEL_17;
        }
      }
LABEL_8:
      v13 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v13;
      ++v12;
    }
    while (v16 == 82);
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression((uint64_t)&v38, a2);
    if (!v40)
    {
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseRelationalExpressionPostUnary((uint64_t)&v35, a2, &v38);
      v21 = v37;
      if (v37)
      {
        if (v37 != 1)
        {
LABEL_39:
          result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_40:
          __break(0xC471u);
          return result;
        }
        v22 = v35;
        if (v35)
          *v35 += 2;
        v32 = v36;
      }
      else
      {
        v22 = v35;
      }
      v31 = v22;
      v33 = v21;
      ((void (*)(_BYTE *, _DWORD **))off_1E0FD71D8[v21])(v41, &v35);
      v20 = v40;
      if (v40 != -1)
        goto LABEL_30;
      goto LABEL_31;
    }
    if (v40 != 1)
      goto LABEL_39;
    v19 = v38;
    if (v38)
      *v38 += 2;
    v32 = v39;
    v31 = v19;
    v33 = 1;
    v20 = 1;
LABEL_30:
    ((void (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v20])(&v35, &v38);
LABEL_31:
    v23 = v33;
    if (!v33)
    {
      v25 = *(_QWORD **)(a2 + 8);
      v26 = *(_DWORD *)(a2 + 96) - v27;
      v38 = (_DWORD *)__PAIR64__(v28, v29);
      *(_QWORD *)&v39 = __PAIR64__(v26, v27);
      result = (uint64_t)WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v25, &v38, a3, &v31, &v34);
      *a3 = result;
      v10 = v33;
      if (v33 != -1)
        goto LABEL_3;
      goto LABEL_4;
    }
    if (v33 != 1)
      goto LABEL_39;
    v24 = v31;
    if (v31)
      *v31 += 2;
    *v30 = v32;
    *(_QWORD *)v8 = v24;
    *(_DWORD *)(v8 + 24) = 1;
    v10 = 1;
LABEL_3:
    result = ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v10])(&v38, &v31);
LABEL_4:
    if (v23)
      return result;
  }
  *(_QWORD *)v8 = *a3;
  *(_DWORD *)(v8 + 24) = 0;
  return result;
}

uint64_t WGSL::toBinaryOperation(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 36;
  if ((a1 - 36) < 0x2E && ((0x33D47EFFC047uLL >> v1) & 1) != 0)
    return byte_1826100A0[v1];
  result = 283;
  __break(0xC471u);
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, _QWORD *a4, char *a5)
{
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;

  v9 = this;
  v10 = *this;
  if (this[1] - *this <= 0x57uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v10 = *v9;
  }
  v11 = *a5;
  *(_OWORD *)(v10 + 8) = *a2;
  *(_QWORD *)(v10 + 24) = 0;
  *(_BYTE *)(v10 + 32) = 0;
  *(_BYTE *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_1E0FD3038;
  *(_QWORD *)(v10 + 64) = *a3;
  *(_QWORD *)(v10 + 72) = *a4;
  *(_BYTE *)(v10 + 80) = v11;
  *v9 += 88;
  v12 = *((unsigned int *)v9 + 11);
  if ((_DWORD)v12 != *((_DWORD *)v9 + 10))
  {
    v19 = (_QWORD *)(v9[4] + 8 * v12);
LABEL_17:
    *v19 = v10;
    *((_DWORD *)v9 + 11) = v12 + 1;
    return (_QWORD *)v10;
  }
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (void *)v9[4];
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)v9 + 10) = v15;
    v9[4] = v17;
    memcpy(v17, v16, 8 * v12);
    if (v16)
    {
      if ((void *)v9[4] == v16)
      {
        v9[4] = 0;
        *((_DWORD *)v9 + 10) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
    v12 = *((unsigned int *)v9 + 11);
    v19 = (_QWORD *)(v9[4] + 8 * v12);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseShiftExpressionPostUnary(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  _QWORD *v27;
  unsigned int v28;
  char v29;
  _DWORD *v30;
  int v31;
  unsigned int v32;
  char v33;
  __int128 v34;
  _DWORD *v35;
  __int128 v36;
  int v37;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 56);
  if ((v6 - 59) <= 0x11 && ((1 << (v6 - 59)) & 0x28809) != 0)
    return (_QWORD *)WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAdditiveExpressionPostUnary((uint64_t)result, a2, a3);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_DWORD *)(a2 + 96);
  if (v6 != 57)
  {
    if (v6 != 53)
    {
      *result = *a3;
      *((_DWORD *)result + 6) = 0;
      return result;
    }
    v10 = *(_DWORD *)(a2 + 36);
    v11 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v11;
      if (v10 <= v11)
        goto LABEL_45;
      v13 = *(_QWORD *)(a2 + 24);
      v14 = v13 + 32 * v11;
      v15 = *(_DWORD *)v14;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v14 + 4);
      v16 = *(_DWORD *)v14;
      if (v16 > 8)
        goto LABEL_10;
      if (((1 << v16) & 0x38) != 0)
        break;
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
      }
      else if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_19;
      }
LABEL_10:
      v12 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v12;
      ++v11;
      if (v15 != 82)
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression((uint64_t)&v35, a2);
        v26 = v37;
        if (!v37)
        {
          v27 = *(_QWORD **)(a2 + 8);
          v28 = *(_DWORD *)(a2 + 96) - v9;
          *(_QWORD *)&v34 = v8;
          *((_QWORD *)&v34 + 1) = __PAIR64__(v28, v9);
          v29 = 9;
          goto LABEL_41;
        }
LABEL_36:
        if (v26 == 1)
        {
          v30 = v35;
          if (v35)
            *v35 += 2;
          *(_OWORD *)(v5 + 1) = v36;
          *v5 = v30;
          v31 = 1;
          *((_DWORD *)v5 + 6) = 1;
          return (_QWORD *)((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v31])(&v34, &v35);
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_45:
        __break(0xC471u);
LABEL_47:
        JUMPOUT(0x1824F05CCLL);
      }
    }
    v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_19:
    *(_QWORD *)(a2 + 80) = v17;
    goto LABEL_10;
  }
  v18 = *(_DWORD *)(a2 + 36);
  v19 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v19;
    if (v18 <= v19)
    {
      __break(0xC471u);
      goto LABEL_47;
    }
    v21 = *(_QWORD *)(a2 + 24);
    v22 = v21 + 32 * v19;
    v23 = *(_DWORD *)v22;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v22;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v22 + 4);
    v24 = *(_DWORD *)v22;
    if (v24 <= 8)
    {
      if (((1 << v24) & 0x38) != 0)
      {
        v25 = *(_DWORD **)(v21 + 32 * v19 + 24);
LABEL_31:
        *(_QWORD *)(a2 + 80) = v25;
        goto LABEL_22;
      }
      if (((1 << v24) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v21 + 32 * v19 + 24);
        goto LABEL_22;
      }
      if (v24 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v25 = *(_DWORD **)(v21 + 32 * v19 + 24);
        if (v25)
          *v25 += 2;
        goto LABEL_31;
      }
    }
LABEL_22:
    v20 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v20;
    ++v19;
  }
  while (v23 == 82);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression((uint64_t)&v35, a2);
  v26 = v37;
  if (v37)
    goto LABEL_36;
  v27 = *(_QWORD **)(a2 + 8);
  v32 = *(_DWORD *)(a2 + 96) - v9;
  *(_QWORD *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = __PAIR64__(v32, v9);
  v29 = 8;
LABEL_41:
  v33 = v29;
  result = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v27, &v34, a3, &v35, &v33);
  *v5 = result;
  *((_DWORD *)v5 + 6) = 0;
  v31 = v37;
  if (v37 != -1)
    return (_QWORD *)((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v31])(&v34, &v35);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF22ReferenceWrapperVectorIN4WGSL3AST10ExpressionELm0EEENSA_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF22ReferenceWrapperVectorIN4WGSL3AST10ExpressionELm0EEENSA_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

void WGSL::AST::BoolLiteral::~BoolLiteral(WGSL::AST::BoolLiteral *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C401CCA9EDFLL);
}

uint64_t WGSL::AST::BoolLiteral::kind(WGSL::AST::BoolLiteral *this)
{
  return 32;
}

void WGSL::AST::Signed32Literal::~Signed32Literal(WGSL::AST::Signed32Literal *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40FA57840CLL);
}

uint64_t WGSL::AST::Signed32Literal::kind(WGSL::AST::Signed32Literal *this)
{
  return 35;
}

void WGSL::AST::AbstractFloatLiteral::~AbstractFloatLiteral(WGSL::AST::AbstractFloatLiteral *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40F2BF966CLL);
}

uint64_t WGSL::AST::AbstractFloatLiteral::kind(WGSL::AST::AbstractFloatLiteral *this)
{
  return 30;
}

void WGSL::AST::Float32Literal::~Float32Literal(WGSL::AST::Float32Literal *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40FA57840CLL);
}

uint64_t WGSL::AST::Float32Literal::kind(WGSL::AST::Float32Literal *this)
{
  return 33;
}

void WGSL::AST::Float16Literal::~Float16Literal(WGSL::AST::Float16Literal *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD7050[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40C31245DDLL);
}

uint64_t WGSL::AST::Float16Literal::kind(WGSL::AST::Float16Literal *this)
{
  return 34;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::IndexAccessExpression,WGSL::SourceSpan &,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x4FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E0FD3060;
  *(_QWORD *)(v8 + 64) = *a3;
  *(_QWORD *)(v8 + 72) = *a4;
  *v7 += 80;
  v9 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v9 != *((_DWORD *)v7 + 10))
  {
    v16 = (_QWORD *)(v7[4] + 8 * v9);
LABEL_17:
    *v16 = v8;
    *((_DWORD *)v7 + 11) = v9 + 1;
    return (_QWORD *)v8;
  }
  v10 = v9 + (v9 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (void *)v7[4];
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)v7 + 10) = v12;
    v7[4] = v14;
    memcpy(v14, v13, 8 * v9);
    if (v13)
    {
      if ((void *)v7[4] == v13)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v13, v15);
    }
    v9 = *((unsigned int *)v7 + 11);
    v16 = (_QWORD *)(v7[4] + 8 * v9);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::FieldAccessExpression,WGSL::SourceSpan &,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::Identifier,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x87uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E0FD3878;
  *(_QWORD *)(v8 + 64) = *a3;
  *(_QWORD *)(v8 + 72) = &off_1E0FD2EE8;
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(v8 + 72) = &off_1E0FD2F10;
  v9 = *(_DWORD **)(a4 + 24);
  *(_QWORD *)(a4 + 24) = 0;
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(v8 + 80);
  *(_QWORD *)(v8 + 96) = v9;
  *(_QWORD *)(v8 + 104) = &off_1E0FD2F10;
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v8 + 128) = v9;
  *v7 += 136;
  v10 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v10 != *((_DWORD *)v7 + 10))
  {
    v17 = (_QWORD *)(v7[4] + 8 * v10);
LABEL_19:
    *v17 = v8;
    *((_DWORD *)v7 + 11) = v10 + 1;
    return (_QWORD *)v8;
  }
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (void *)v7[4];
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v7 + 10) = v13;
    v7[4] = v15;
    memcpy(v15, v14, 8 * v10);
    if (v14)
    {
      if ((void *)v7[4] == v14)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
    v10 = *((unsigned int *)v7 + 11);
    v17 = (_QWORD *)(v7[4] + 8 * v10);
    goto LABEL_19;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseMultiplicativeExpressionPostUnary(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  unsigned int v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  int v10;
  char v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int v21;
  _DWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  _DWORD *v28;
  __int128 v29;
  unsigned int v30;
  char v31;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 96);
  v25 = *(_DWORD *)(a2 + 92);
  v26 = *(_DWORD *)(a2 + 88);
  v7 = (_OWORD *)(a2 + 60);
  v8 = result + 1;
  while (1)
  {
    v10 = *(_DWORD *)(a2 + 56);
    if ((v10 - 62) > 0xE || ((1 << (v10 - 62)) & 0x5001) == 0)
      break;
    v31 = 2;
    if (v10 != 76)
    {
      if (v10 == 74)
      {
        v12 = 3;
      }
      else
      {
        if (v10 != 62)
          goto LABEL_36;
        v12 = 4;
      }
      v31 = v12;
    }
    v13 = *(_DWORD *)(a2 + 36);
    v14 = *(_DWORD *)(a2 + 40) + 1;
    do
    {
      *(_DWORD *)(a2 + 40) = v14;
      if (v13 <= v14)
        goto LABEL_36;
      v16 = *(_QWORD *)(a2 + 24);
      v17 = v16 + 32 * v14;
      v18 = *(_DWORD *)v17;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v17;
      *v7 = *(_OWORD *)(v17 + 4);
      v19 = *(_DWORD *)v17;
      if (v19 <= 8)
      {
        if (((1 << v19) & 0x38) != 0)
        {
          v20 = *(_DWORD **)(v16 + 32 * v14 + 24);
LABEL_26:
          *(_QWORD *)(a2 + 80) = v20;
          goto LABEL_17;
        }
        if (((1 << v19) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v16 + 32 * v14 + 24);
          goto LABEL_17;
        }
        if (v19 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v20 = *(_DWORD **)(v16 + 32 * v14 + 24);
          if (v20)
            *v20 += 2;
          goto LABEL_26;
        }
      }
LABEL_17:
      v15 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v15;
      ++v14;
    }
    while (v18 == 82);
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseUnaryExpression(&v28, a2);
    v21 = v30;
    if (!v30)
    {
      v23 = *(_QWORD **)(a2 + 8);
      v24 = *(_DWORD *)(a2 + 96) - v6;
      *(_QWORD *)&v27 = __PAIR64__(v25, v26);
      *((_QWORD *)&v27 + 1) = __PAIR64__(v24, v6);
      result = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v23, &v27, a3, &v28, &v31);
      *a3 = result;
      v9 = v30;
      if (v30 != -1)
        goto LABEL_3;
      goto LABEL_4;
    }
    if (v30 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x1824F0F9CLL);
    }
    v22 = v28;
    if (v28)
      *v28 += 2;
    *v8 = v29;
    *v5 = v22;
    *((_DWORD *)v5 + 6) = 1;
    v9 = 1;
LABEL_3:
    result = (_QWORD *)((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v9])(&v27, &v28);
LABEL_4:
    if (v21)
      return result;
  }
  *v5 = *a3;
  *((_DWORD *)v5 + 6) = 0;
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ElaboratedTypeExpression,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(_QWORD *this, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x6FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E0FD7190;
  *(_QWORD *)(v8 + 64) = &off_1E0FD2EE8;
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v8 + 64) = &off_1E0FD2F10;
  v9 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 88) = v9;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(v8 + 96) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v8 + 104) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v8 + 108) = v10;
  *v7 += 112;
  v11 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v11 != *((_DWORD *)v7 + 10))
  {
    v18 = (_QWORD *)(v7[4] + 8 * v11);
LABEL_17:
    *v18 = v8;
    *((_DWORD *)v7 + 11) = v11 + 1;
    return (_QWORD *)v8;
  }
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (void *)v7[4];
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)v7 + 10) = v14;
    v7[4] = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if ((void *)v7[4] == v15)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *((unsigned int *)v7 + 11);
    v18 = (_QWORD *)(v7[4] + 8 * v11);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::ElaboratedTypeExpression::~ElaboratedTypeExpression(WGSL::AST::ElaboratedTypeExpression *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)this = off_1E0FD7190;
  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 8) = &off_1E0FD2F10;
  v4 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)this = off_1E0FD2EC0;
      if (!*((_BYTE *)this + 56))
        return;
      goto LABEL_9;
    }
    *v4 -= 2;
  }
  *(_QWORD *)this = off_1E0FD2EC0;
  if (!*((_BYTE *)this + 56))
    return;
LABEL_9:
  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E0FD7050[v5])(&v6, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
}

{
  WTF *v3;
  _DWORD *v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)this = off_1E0FD7190;
  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 8) = &off_1E0FD2F10;
  v4 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)this = off_1E0FD2EC0;
      if (!*((_BYTE *)this + 56))
        goto LABEL_12;
      goto LABEL_9;
    }
    *v4 -= 2;
  }
  *(_QWORD *)this = off_1E0FD2EC0;
  if (!*((_BYTE *)this + 56))
    goto LABEL_12;
LABEL_9:
  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E0FD7050[v5])(&v6, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
LABEL_12:
  MEMORY[0x186DAB2A8](this, 0x10F3C40F5957126);
}

uint64_t WGSL::AST::ElaboratedTypeExpression::kind(WGSL::AST::ElaboratedTypeExpression *this)
{
  return 60;
}

void WGSL::AST::TypeAlias::~TypeAlias(WGSL::AST::TypeAlias *this)
{
  _DWORD *v2;

  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v2 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (*v2 == 2)
      WTF::StringImpl::destroy();
    else
      *v2 -= 2;
  }
}

{
  _DWORD *v2;

  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v2 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (*v2 == 2)
      WTF::StringImpl::destroy();
    else
      *v2 -= 2;
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::TypeAlias::kind(WGSL::AST::TypeAlias *this)
{
  return 58;
}

uint64_t WGSL::AST::TypeAlias::name(WGSL::AST::TypeAlias *this)
{
  return (uint64_t)this + 24;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST10ExpressionEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ConstAssert,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD71F8;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::ConstAssert::~ConstAssert(WGSL::AST::ConstAssert *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::ConstAssert::kind(WGSL::AST::ConstAssert *this)
{
  return 15;
}

void WGSL::AST::ConstAssert::name(WGSL::AST::ConstAssert *this)
{
  __break(0xC471u);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST11ConstAssertEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_DWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttribute(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *result;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  _QWORD *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  const char *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  const char *v72;
  _DWORD *v73;
  _QWORD *v74;
  unsigned int v75;
  _QWORD *v76;
  _DWORD *v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  unsigned __int8 **v81;
  unint64_t v82;
  _QWORD *v83;
  unsigned int v84;
  _DWORD *v85;
  const char *v86;
  _QWORD *v87;
  unsigned int v88;
  _QWORD *v89;
  _QWORD *v90;
  unsigned int v91;
  _DWORD *v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  _QWORD *v96;
  unsigned int v97;
  _DWORD *v98;
  const char *v99;
  char *v100;
  const char *v101;
  unint64_t v102;
  _QWORD *v103;
  unsigned int v104;
  _QWORD *v105;
  unsigned int v106;
  _QWORD *v107;
  unsigned int v108;
  _DWORD *v109;
  _QWORD *v110;
  unsigned int v111;
  char v112;
  _BYTE *v113;
  _QWORD *v114;
  unsigned int v115;
  const char *v116;
  _DWORD *v117;
  unsigned int v118;
  unint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  unint64_t v122;
  unsigned int v123;
  _QWORD *v124;
  unsigned int v125;
  _QWORD *v126;
  unsigned int v127;
  unint64_t v128;
  _QWORD *v129;
  unsigned int v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  _DWORD *v146;
  _DWORD *v147;
  _DWORD *v148;
  const char *v149;
  __int128 v150;
  int v151;
  const char *v152;
  const char *v153;
  _DWORD *v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  const char *v158;
  __int128 v159;
  _DWORD *v160;
  unsigned int v161;
  _DWORD *v162;
  _DWORD *v163;
  _DWORD *v164;
  _DWORD *v165;
  _DWORD *v166;
  _DWORD *v167;
  _DWORD *v168;
  _DWORD *v169;
  _DWORD *v170;
  _DWORD *v171;
  _DWORD *v172;
  _DWORD *v173;
  const char *v174;
  __int128 v175;
  _DWORD *v176;
  unsigned int v177;
  _DWORD *v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  _BYTE v182[24];
  _DWORD *v183;
  int v184;
  int v185;
  _DWORD *v186;
  _DWORD *v187;

  v4 = *(const char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 56);
  if (v6 != 40)
  {
    WGSL::toString(40);
    WGSL::toString(v6);
    *(_QWORD *)v182 = "Expected a ";
    *(_QWORD *)&v182[8] = 12;
    v174 = ", but got a ";
    *(_QWORD *)&v175 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v182, (uint64_t *)&v187, (uint64_t)&v174, (uint64_t *)&v186, &v158);
    if (!v158)
    {
      __break(0xC471u);
      JUMPOUT(0x1824F325CLL);
    }
    v17 = v186;
    v186 = 0;
    if (v17)
    {
      if (*v17 == 2)
      {
        WTF::StringImpl::destroy();
        result = v187;
        v187 = 0;
        if (!result)
        {
LABEL_57:
          v32 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v158;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v32;
          *(_DWORD *)(a1 + 24) = 1;
          return result;
        }
LABEL_54:
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
        goto LABEL_57;
      }
      *v17 -= 2;
    }
    result = v187;
    v187 = 0;
    if (!result)
      goto LABEL_57;
    goto LABEL_54;
  }
  v7 = (unint64_t)&v149;
  v8 = a2 + 60;
  v9 = *(_DWORD *)(a2 + 36);
  v10 = *(_DWORD *)(a2 + 40) + 1;
  v11 = 32 * v10;
  do
  {
    *(_DWORD *)(a2 + 40) = v10;
    if (v9 <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1824F323CLL);
    }
    v13 = *(_QWORD *)(a2 + 24);
    v14 = *(unsigned int *)(v13 + v11);
    *(_DWORD *)(a2 + 56) = v14;
    *(_OWORD *)v8 = *(_OWORD *)(v13 + v11 + 4);
    v15 = *(_DWORD *)(v13 + v11);
    if (v15 <= 8)
    {
      if (((1 << v15) & 0x38) != 0)
      {
        v16 = *(_DWORD **)(v13 + v11 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v16;
        goto LABEL_4;
      }
      if (((1 << v15) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + v11 + 24);
        goto LABEL_4;
      }
      if (v15 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v16 = *(_DWORD **)(v13 + v11 + 24);
        if (v16)
          *v16 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v12 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v12;
    ++v10;
    v11 += 32;
  }
  while ((_DWORD)v14 == 82);
  if ((_DWORD)v14 != 18)
  {
    if ((_DWORD)v14 == 8)
    {
      *(_DWORD *)v182 = 8;
      *(_OWORD *)&v182[4] = *(_OWORD *)v8;
      v24 = *(_DWORD **)(a2 + 80);
      if (v24)
        *v24 += 2;
      v183 = v24;
      v184 = 0;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v10;
        if (v9 <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1824F324CLL);
        }
        v26 = v13 + 32 * v10;
        v27 = *(_DWORD *)v26;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v26;
        *(_OWORD *)v8 = *(_OWORD *)(v26 + 4);
        v28 = *(_DWORD *)v26;
        if (v28 > 8)
          goto LABEL_38;
        if (((1 << v28) & 0x38) != 0)
          break;
        if (((1 << v28) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v10 + 24);
        }
        else if (v28 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v29 = *(_DWORD **)(v13 + 32 * v10 + 24);
          if (v29)
            *v29 += 2;
          goto LABEL_47;
        }
LABEL_38:
        v25 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v25;
        ++v10;
        if (v27 != 82)
        {
          if (MEMORY[0x186DAB1B8](v24, "group", 5))
          {
            v35 = *(_DWORD *)(a2 + 56);
            if (v35 == 67)
            {
              v36 = *(_DWORD *)(a2 + 36);
              v37 = *(_DWORD *)(a2 + 40) + 1;
              while (1)
              {
                *(_DWORD *)(a2 + 40) = v37;
                if (v36 <= v37)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824F3254);
                }
                v39 = *(_QWORD *)(a2 + 24);
                v40 = v39 + 32 * v37;
                v41 = *(_DWORD *)v40;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v40;
                *(_OWORD *)v8 = *(_OWORD *)(v40 + 4);
                v42 = *(_DWORD *)v40;
                if (v42 > 8)
                  goto LABEL_68;
                if (((1 << v42) & 0x38) != 0)
                  break;
                if (((1 << v42) & 0xC4) != 0)
                {
                  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v39 + 32 * v37 + 24);
                }
                else if (v42 == 8)
                {
                  *(_QWORD *)(a2 + 80) = 0;
                  v43 = *(_DWORD **)(v39 + 32 * v37 + 24);
                  if (v43)
                    *v43 += 2;
                  goto LABEL_77;
                }
LABEL_68:
                v38 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v38;
                ++v37;
                if (v41 != 82)
                {
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v158, a2);
                  v14 = v160;
                  if (!(_DWORD)v160)
                  {
                    if (*(_DWORD *)(a2 + 56) == 48)
                      WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                    WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
                    v7 = v177;
                    if (v177)
                    {
                      WGSL::toString(68);
                      if ((_DWORD)v7 == 1)
                      {
                        WGSL::toString((int)v174);
                        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v173, (uint64_t *)&v172);
                        v59 = v172;
                        v172 = 0;
                        if (v59)
                        {
                          if (*v59 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *v59 -= 2;
                        }
                        v70 = v173;
                        v173 = 0;
                        if (!v70)
                          goto LABEL_233;
LABEL_230:
                        if (*v70 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *v70 -= 2;
                        goto LABEL_233;
                      }
LABEL_464:
                      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_465:
                      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v7 + 8);
                      *(_QWORD *)a1 = 0;
LABEL_273:
                      *(_DWORD *)(a1 + 24) = 1;
LABEL_274:
                      ((void (*)(const char **, const char **))off_1E0FD71D8[v8])(&v149, &v174);
LABEL_235:
                      ((void (*)(const char **, const char **))off_1E0FD71D8[v14])(&v174, &v158);
                      v56 = 0;
                      return (_DWORD *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD6FF8[v56])(&v174, v182);
                    }
                    if ((_DWORD)v174 == 8 && v176)
                    {
                      if (*v176 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v176 -= 2;
                    }
                    v74 = *(_QWORD **)(a2 + 8);
                    v75 = *(_DWORD *)(a2 + 96) - v5;
                    v174 = v4;
                    *(_QWORD *)&v175 = __PAIR64__(v75, v5);
                    v76 = WGSL::AST::Builder::construct<WGSL::AST::GroupAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v74, &v174, &v158);
LABEL_282:
                    *(_QWORD *)a1 = v76;
                    *(_DWORD *)(a1 + 24) = 0;
                    goto LABEL_235;
                  }
LABEL_198:
                  if ((_DWORD)v14 != 1)
                    goto LABEL_464;
                  v72 = v158;
                  if (v158)
                    *(_DWORD *)v158 += 2;
                  *(_OWORD *)(a1 + 8) = v159;
                  *(_QWORD *)a1 = v72;
LABEL_234:
                  *(_DWORD *)(a1 + 24) = 1;
                  goto LABEL_235;
                }
              }
              v43 = *(_DWORD **)(v39 + 32 * v37 + 24);
LABEL_77:
              *(_QWORD *)(a2 + 80) = v43;
              goto LABEL_68;
            }
            WGSL::toString(67);
            WGSL::toString(v35);
            v174 = "Expected a ";
            *(_QWORD *)&v175 = 12;
            v158 = ", but got a ";
            *(_QWORD *)&v159 = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v174, (uint64_t *)&v179, (uint64_t)&v158, (uint64_t *)&v178, &v149);
            if (!v149)
            {
              __break(0xC471u);
              JUMPOUT(0x1824F3274);
            }
            v57 = v178;
            v178 = 0;
            if (v57)
            {
              if (*v57 == 2)
                WTF::StringImpl::destroy();
              else
                *v57 -= 2;
            }
            v63 = v179;
            v179 = 0;
            if (v63)
            {
              if (*v63 == 2)
                WTF::StringImpl::destroy();
              else
                *v63 -= 2;
            }
            v56 = 0;
            v64 = (*(_DWORD *)(a2 + 96) - v5);
            v65 = v149;
LABEL_373:
            *(_QWORD *)a1 = v65;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v5 | (v64 << 32);
LABEL_374:
            *(_DWORD *)(a1 + 24) = 1;
            return (_DWORD *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD6FF8[v56])(&v174, v182);
          }
          if (MEMORY[0x186DAB1B8](v24, "binding", 7))
          {
            v46 = *(_DWORD *)(a2 + 56);
            if (v46 != 67)
            {
              WGSL::toString(67);
              WGSL::toString(v46);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v174, (uint64_t *)&v171, (uint64_t *)&v170);
              v60 = v170;
              v170 = 0;
              if (v60)
              {
                if (*v60 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v60 -= 2;
              }
              v67 = v171;
              v171 = 0;
              if (v67)
              {
                if (*v67 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v67 -= 2;
              }
              v56 = 0;
              v64 = (*(_DWORD *)(a2 + 96) - v5);
              v65 = v174;
              goto LABEL_373;
            }
            v47 = *(_DWORD *)(a2 + 36);
            v48 = *(_DWORD *)(a2 + 40) + 1;
            while (2)
            {
              *(_DWORD *)(a2 + 40) = v48;
              if (v47 <= v48)
              {
                __break(0xC471u);
                JUMPOUT(0x1824F3264);
              }
              v50 = *(_QWORD *)(a2 + 24);
              v51 = v50 + 32 * v48;
              v52 = *(_DWORD *)v51;
              *(_DWORD *)(a2 + 56) = *(_DWORD *)v51;
              *(_OWORD *)v8 = *(_OWORD *)(v51 + 4);
              v53 = *(_DWORD *)v51;
              if (v53 <= 8)
              {
                if (((1 << v53) & 0x38) != 0)
                {
                  v54 = *(_DWORD **)(v50 + 32 * v48 + 24);
                  goto LABEL_93;
                }
                if (((1 << v53) & 0xC4) != 0)
                {
                  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v50 + 32 * v48 + 24);
                }
                else if (v53 == 8)
                {
                  *(_QWORD *)(a2 + 80) = 0;
                  v54 = *(_DWORD **)(v50 + 32 * v48 + 24);
                  if (v54)
                    *v54 += 2;
LABEL_93:
                  *(_QWORD *)(a2 + 80) = v54;
                }
              }
              v49 = *(_DWORD *)(a2 + 68);
              *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
              *(_DWORD *)(a2 + 96) = v49;
              ++v48;
              if (v52 != 82)
              {
                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v158, a2);
                v14 = v160;
                if ((_DWORD)v160)
                  goto LABEL_198;
                if (*(_DWORD *)(a2 + 56) == 48)
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
                v7 = v177;
                if (!v177)
                {
                  if ((_DWORD)v174 == 8 && v176)
                  {
                    if (*v176 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v176 -= 2;
                  }
                  v83 = *(_QWORD **)(a2 + 8);
                  v84 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v84, v5);
                  v76 = WGSL::AST::Builder::construct<WGSL::AST::BindingAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v83, &v174, &v158);
                  goto LABEL_282;
                }
                WGSL::toString(68);
                if ((_DWORD)v7 != 1)
                  goto LABEL_464;
                WGSL::toString((int)v174);
                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v169, (uint64_t *)&v168);
                v62 = v168;
                v168 = 0;
                if (v62)
                {
                  if (*v62 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v62 -= 2;
                }
                v70 = v169;
                v169 = 0;
                if (v70)
                  goto LABEL_230;
LABEL_233:
                v78 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                *(_QWORD *)a1 = v149;
                *(_QWORD *)(a1 + 8) = v4;
                *(_QWORD *)(a1 + 16) = v78;
                goto LABEL_234;
              }
              continue;
            }
          }
          if (MEMORY[0x186DAB1B8](v24, "location", 8))
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
            v14 = v177;
            if (!v177)
            {
              if ((_DWORD)v174 == 8 && v176)
              {
                if (*v176 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v176 -= 2;
              }
              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v158, a2);
              v14 = v160;
              if ((_DWORD)v160)
                goto LABEL_198;
              if (*(_DWORD *)(a2 + 56) == 48)
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
              v7 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                v90 = *(_QWORD **)(a2 + 8);
                v91 = *(_DWORD *)(a2 + 96) - v5;
                v174 = v4;
                *(_QWORD *)&v175 = __PAIR64__(v91, v5);
                v76 = WGSL::AST::Builder::construct<WGSL::AST::LocationAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v90, &v174, (uint64_t *)&v158);
                goto LABEL_282;
              }
              WGSL::toString(68);
              if ((_DWORD)v7 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v165, (uint64_t *)&v164);
              v73 = v164;
              v164 = 0;
              if (v73)
              {
                if (*v73 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v73 -= 2;
              }
              v70 = v165;
              v165 = 0;
              if (v70)
                goto LABEL_230;
              goto LABEL_233;
            }
            WGSL::toString(67);
            if ((_DWORD)v14 != 1)
              goto LABEL_464;
            WGSL::toString((int)v174);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v167, (uint64_t *)&v166);
            v58 = v166;
            v166 = 0;
            if (v58)
            {
              if (*v58 == 2)
                WTF::StringImpl::destroy();
              else
                *v58 -= 2;
            }
            v69 = v167;
            v167 = 0;
            if (!v69)
              goto LABEL_372;
LABEL_369:
            if (*v69 == 2)
              WTF::StringImpl::destroy();
            else
              *v69 -= 2;
            goto LABEL_372;
          }
          if (MEMORY[0x186DAB1B8](v24, "builtin", 7))
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
            v14 = v177;
            if (v177)
            {
              WGSL::toString(67);
              if ((_DWORD)v14 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v163, (uint64_t *)&v162);
              v61 = v162;
              v162 = 0;
              if (v61)
              {
                if (*v61 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v61 -= 2;
              }
              v69 = v163;
              v163 = 0;
              if (v69)
                goto LABEL_369;
              goto LABEL_372;
            }
            if ((_DWORD)v174 == 8 && v176)
            {
              if (*v176 == 2)
                WTF::StringImpl::destroy();
              else
                *v176 -= 2;
            }
            v14 = (unint64_t)&v174;
            WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v174, a2);
            if (v177)
            {
              if (v177 != 1)
                goto LABEL_464;
              v79 = v174;
              if (v174)
                *(_DWORD *)v174 += 2;
              *(_OWORD *)(a1 + 8) = v175;
              *(_QWORD *)a1 = v79;
              *(_DWORD *)(a1 + 24) = 1;
              v80 = v177;
              if (v177 != -1)
                goto LABEL_242;
            }
            else
            {
              v81 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::Builtin> [12]>::tryGet<WTF::String>((unsigned __int8 ***)WGSL::parseBuiltin(WTF::String const&)::__map, (uint64_t *)&v176);
              if (v81)
              {
                v14 = (unint64_t)v81;
                switch(*(_BYTE *)v81)
                {
                  case 0:
                    *(_BYTE *)(*(_QWORD *)a2 + 19) = 1;
                    break;
                  case 1:
                    *(_BYTE *)(*(_QWORD *)a2 + 25) = 1;
                    break;
                  case 8:
                    *(_BYTE *)(*(_QWORD *)a2 + 26) = 1;
                    break;
                  case 9:
                    *(_BYTE *)(*(_QWORD *)a2 + 24) = 1;
                    break;
                  default:
                    break;
                }
                if (*(_DWORD *)(a2 + 56) == 48)
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v158, a2, 68);
                v7 = v161;
                if (v161)
                {
                  WGSL::toString(68);
                  if ((_DWORD)v7 != 1)
                    goto LABEL_464;
                  WGSL::toString((int)v158);
                  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v157, (uint64_t *)&v156);
                  v92 = v156;
                  v156 = 0;
                  if (v92)
                  {
                    if (*v92 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v92 -= 2;
                  }
                  v93 = v157;
                  v157 = 0;
                  if (v93)
                  {
                    if (*v93 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v93 -= 2;
                  }
                  v94 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                  *(_QWORD *)a1 = v149;
                  *(_QWORD *)(a1 + 8) = v4;
                  *(_QWORD *)(a1 + 16) = v94;
                  *(_DWORD *)(a1 + 24) = 1;
                  v80 = v177;
                  if (v177 != -1)
LABEL_242:
                    ((void (*)(const char **, const char **))off_1E0FD6FE8[v80])(&v158, &v174);
                }
                else
                {
                  if ((_DWORD)v158 == 8 && v160)
                  {
                    if (*v160 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v160 -= 2;
                  }
                  v103 = *(_QWORD **)(a2 + 8);
                  v104 = *(_DWORD *)(a2 + 96) - v5;
                  v158 = v4;
                  *(_QWORD *)&v159 = __PAIR64__(v104, v5);
                  *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::BuiltinAttribute,WGSL::SourceSpan,WGSL::Builtin const&,void>(v103, &v158, (char *)v14);
                  *(_DWORD *)(a1 + 24) = 0;
                  v80 = v177;
                  if (v177 != -1)
                    goto LABEL_242;
                }
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v82 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                *(_QWORD *)a1 = v158;
                *(_QWORD *)(a1 + 8) = v4;
                *(_QWORD *)(a1 + 16) = v82;
                *(_DWORD *)(a1 + 24) = 1;
                v80 = v177;
                if (v177 != -1)
                  goto LABEL_242;
              }
            }
LABEL_243:
            v56 = 0;
            return (_DWORD *)((uint64_t (*)(_QWORD, _QWORD))off_1E0FD6FF8[v56])(&v174, v182);
          }
          if (MEMORY[0x186DAB1B8](v24, "workgroup_size", 14))
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
            v14 = v177;
            if (!v177)
            {
              if ((_DWORD)v174 == 8 && v176)
              {
                if (*v176 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v176 -= 2;
              }
              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v158, a2);
              v14 = v160;
              if ((_DWORD)v160)
                goto LABEL_198;
              v152 = 0;
              v153 = 0;
              if (*(_DWORD *)(a2 + 56) == 48)
              {
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                if (*(_DWORD *)(a2 + 56) != 68)
                {
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v174, a2);
                  v8 = v176;
                  if ((_DWORD)v176)
                  {
                    if ((_DWORD)v176 != 1)
                      goto LABEL_464;
                    v86 = v174;
                    if (v174)
                      *(_DWORD *)v174 += 2;
                    *(_OWORD *)(a1 + 8) = v175;
                    *(_QWORD *)a1 = v86;
                    goto LABEL_273;
                  }
                  v153 = v174;
                  if (*(_DWORD *)(a2 + 56) == 48)
                  {
                    WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                    if (*(_DWORD *)(a2 + 56) != 68)
                    {
                      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v149, a2);
                      if (v151)
                      {
                        if (v151 != 1)
                          goto LABEL_464;
                        v116 = v149;
                        if (!v149)
                          goto LABEL_465;
                        *(_DWORD *)v149 += 2;
                        *(_OWORD *)(a1 + 8) = v150;
                        *(_QWORD *)a1 = v116;
                        *(_DWORD *)(a1 + 24) = 1;
                        if (*(_DWORD *)v116 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *(_DWORD *)v116 -= 2;
                        goto LABEL_274;
                      }
                      v152 = v149;
                      if (*(_DWORD *)(a2 + 56) == 48)
                        WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                    }
                  }
                  ((void (*)(const char **, const char **))off_1E0FD71D8[v8])(&v149, &v174);
                }
              }
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
              v7 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                v107 = *(_QWORD **)(a2 + 8);
                v108 = *(_DWORD *)(a2 + 96) - v5;
                v174 = v4;
                *(_QWORD *)&v175 = __PAIR64__(v108, v5);
                v76 = WGSL::AST::Builder::construct<WGSL::AST::WorkgroupSizeAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::Expression*,WGSL::AST::Expression*,void>(v107, &v174, &v158, (uint64_t *)&v153, (uint64_t *)&v152);
                goto LABEL_282;
              }
              WGSL::toString(68);
              if ((_DWORD)v7 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v148, (uint64_t *)&v147);
              v98 = v147;
              v147 = 0;
              if (v98)
              {
                if (*v98 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v98 -= 2;
              }
              v70 = v148;
              v148 = 0;
              if (v70)
                goto LABEL_230;
              goto LABEL_233;
            }
            WGSL::toString(67);
            if ((_DWORD)v14 != 1)
              goto LABEL_464;
            WGSL::toString((int)v174);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v155, (uint64_t *)&v154);
            v66 = v154;
            v154 = 0;
            if (v66)
            {
              if (*v66 == 2)
                WTF::StringImpl::destroy();
              else
                *v66 -= 2;
            }
            v69 = v155;
            v155 = 0;
            if (v69)
              goto LABEL_369;
            goto LABEL_372;
          }
          if (MEMORY[0x186DAB1B8](v24, "align", 5))
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
            v14 = v177;
            if (!v177)
            {
              if ((_DWORD)v174 == 8 && v176)
              {
                if (*v176 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v176 -= 2;
              }
              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v158, a2);
              v14 = v160;
              if ((_DWORD)v160)
                goto LABEL_198;
              if (*(_DWORD *)(a2 + 56) == 48)
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
              v7 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                v114 = *(_QWORD **)(a2 + 8);
                v115 = *(_DWORD *)(a2 + 96) - v5;
                v174 = v4;
                *(_QWORD *)&v175 = __PAIR64__(v115, v5);
                v76 = WGSL::AST::Builder::construct<WGSL::AST::AlignAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v114, &v174, &v158);
                goto LABEL_282;
              }
              WGSL::toString(68);
              if ((_DWORD)v7 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v144, (uint64_t *)&v143);
              v95 = v143;
              v143 = 0;
              if (v95)
              {
                if (*v95 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v95 -= 2;
              }
              v70 = v144;
              v144 = 0;
              if (v70)
                goto LABEL_230;
              goto LABEL_233;
            }
            WGSL::toString(67);
            if ((_DWORD)v14 != 1)
              goto LABEL_464;
            WGSL::toString((int)v174);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v146, (uint64_t *)&v145);
            v68 = v145;
            v145 = 0;
            if (v68)
            {
              if (*v68 == 2)
                WTF::StringImpl::destroy();
              else
                *v68 -= 2;
            }
            v69 = v146;
            v146 = 0;
            if (v69)
              goto LABEL_369;
            goto LABEL_372;
          }
          if (!MEMORY[0x186DAB1B8](v24, "interpolate", 11))
          {
            if (MEMORY[0x186DAB1B8](v24, "size", 4))
            {
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
              v14 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v158, a2);
                v14 = v160;
                if ((_DWORD)v160)
                  goto LABEL_198;
                if (*(_DWORD *)(a2 + 56) == 48)
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
                v7 = v177;
                if (!v177)
                {
                  if ((_DWORD)v174 == 8 && v176)
                  {
                    if (*v176 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v176 -= 2;
                  }
                  v124 = *(_QWORD **)(a2 + 8);
                  v125 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v125, v5);
                  v76 = WGSL::AST::Builder::construct<WGSL::AST::SizeAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v124, &v174, &v158);
                  goto LABEL_282;
                }
                WGSL::toString(68);
                if ((_DWORD)v7 != 1)
                  goto LABEL_464;
                WGSL::toString((int)v174);
                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v136, (uint64_t *)&v135);
                v109 = v135;
                v135 = 0;
                if (v109)
                {
                  if (*v109 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v109 -= 2;
                }
                v70 = v136;
                v136 = 0;
                if (v70)
                  goto LABEL_230;
                goto LABEL_233;
              }
              WGSL::toString(67);
              if ((_DWORD)v14 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v138, (uint64_t *)&v137);
              v77 = v137;
              v137 = 0;
              if (v77)
              {
                if (*v77 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v77 -= 2;
              }
              v69 = v138;
              v138 = 0;
              if (v69)
                goto LABEL_369;
            }
            else
            {
              if (!MEMORY[0x186DAB1B8](v24, "id", 2))
              {
                if (MEMORY[0x186DAB1B8](v24, "invariant", 9))
                {
                  v87 = *(_QWORD **)(a2 + 8);
                  v88 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v88, v5);
                  v89 = WGSL::AST::Builder::construct<WGSL::AST::InvariantAttribute,WGSL::SourceSpan,void>(v87, &v174);
                }
                else if (MEMORY[0x186DAB1B8](v24, "must_use", 8))
                {
                  v96 = *(_QWORD **)(a2 + 8);
                  v97 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v97, v5);
                  v89 = WGSL::AST::Builder::construct<WGSL::AST::MustUseAttribute,WGSL::SourceSpan,void>(v96, &v174);
                }
                else if (MEMORY[0x186DAB1B8](v24, "const", 5))
                {
                  v105 = *(_QWORD **)(a2 + 8);
                  v106 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v106, v5);
                  v89 = WGSL::AST::Builder::construct<WGSL::AST::ConstAttribute,WGSL::SourceSpan,void>(v105, &v174);
                }
                else
                {
                  if (MEMORY[0x186DAB1B8](v24, "vertex", 6))
                  {
                    v110 = *(_QWORD **)(a2 + 8);
                    v111 = *(_DWORD *)(a2 + 96) - v5;
                    v174 = v4;
                    *(_QWORD *)&v175 = __PAIR64__(v111, v5);
                    v112 = 1;
                  }
                  else if (MEMORY[0x186DAB1B8](v24, "compute", 7))
                  {
                    v110 = *(_QWORD **)(a2 + 8);
                    v118 = *(_DWORD *)(a2 + 96) - v5;
                    v174 = v4;
                    *(_QWORD *)&v175 = __PAIR64__(v118, v5);
                    v112 = 4;
                  }
                  else
                  {
                    if (!MEMORY[0x186DAB1B8](v24, "fragment", 8))
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v56 = 0;
                      v128 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                      *(_QWORD *)a1 = v174;
                      *(_QWORD *)(a1 + 8) = v4;
                      *(_QWORD *)(a1 + 16) = v128;
                      goto LABEL_374;
                    }
                    v110 = *(_QWORD **)(a2 + 8);
                    v123 = *(_DWORD *)(a2 + 96) - v5;
                    v174 = v4;
                    *(_QWORD *)&v175 = __PAIR64__(v123, v5);
                    v112 = 2;
                  }
                  LOBYTE(v158) = v112;
                  v89 = WGSL::AST::Builder::construct<WGSL::AST::StageAttribute,WGSL::SourceSpan,WGSL::ShaderStage,void>(v110, &v174, (char *)&v158);
                }
                v56 = 0;
                *(_QWORD *)a1 = v89;
                *(_DWORD *)(a1 + 24) = 0;
                return (_DWORD *)((uint64_t (*)(_QWORD, _QWORD))off_1E0FD6FF8[v56])(&v174, v182);
              }
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
              v14 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v158, a2);
                v14 = v160;
                if ((_DWORD)v160)
                  goto LABEL_198;
                if (*(_DWORD *)(a2 + 56) == 48)
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
                v7 = v177;
                if (!v177)
                {
                  if ((_DWORD)v174 == 8 && v176)
                  {
                    if (*v176 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v176 -= 2;
                  }
                  v129 = *(_QWORD **)(a2 + 8);
                  v130 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v130, v5);
                  v76 = WGSL::AST::Builder::construct<WGSL::AST::IdAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v129, &v174, &v158);
                  goto LABEL_282;
                }
                WGSL::toString(68);
                if ((_DWORD)v7 != 1)
                  goto LABEL_464;
                WGSL::toString((int)v174);
                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v132, (uint64_t *)&v131);
                v117 = v131;
                v131 = 0;
                if (v117)
                {
                  if (*v117 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v117 -= 2;
                }
                v70 = v132;
                v132 = 0;
                if (v70)
                  goto LABEL_230;
                goto LABEL_233;
              }
              WGSL::toString(67);
              if ((_DWORD)v14 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v134, (uint64_t *)&v133);
              v85 = v133;
              v133 = 0;
              if (v85)
              {
                if (*v85 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v85 -= 2;
              }
              v69 = v134;
              v134 = 0;
              if (v69)
                goto LABEL_369;
            }
LABEL_372:
            v56 = 0;
            v64 = (*(_DWORD *)(a2 + 96) - v5);
            v65 = v158;
            goto LABEL_373;
          }
          WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
          v14 = v177;
          if (v177)
          {
            WGSL::toString(67);
            if ((_DWORD)v14 != 1)
              goto LABEL_464;
            WGSL::toString((int)v174);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v142, (uint64_t *)&v141);
            v71 = v141;
            v141 = 0;
            if (v71)
            {
              if (*v71 == 2)
                WTF::StringImpl::destroy();
              else
                *v71 -= 2;
            }
            v69 = v142;
            v142 = 0;
            if (v69)
              goto LABEL_369;
            goto LABEL_372;
          }
          if ((_DWORD)v174 == 8 && v176)
          {
            if (*v176 == 2)
              WTF::StringImpl::destroy();
            else
              *v176 -= 2;
          }
          v14 = (unint64_t)&v174;
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v174, a2);
          if (v177)
          {
            if (v177 != 1)
              goto LABEL_464;
            v99 = v174;
            if (v174)
              *(_DWORD *)v174 += 2;
            *(_OWORD *)(a1 + 8) = v175;
            *(_QWORD *)a1 = v99;
            goto LABEL_445;
          }
          v100 = (char *)WGSL::parseInterpolationType((uint64_t *)&v176);
          if (!v100)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v102 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v158;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v102;
            goto LABEL_445;
          }
          v14 = (unint64_t)v100;
          LOBYTE(v153) = 0;
          if (*(_DWORD *)(a2 + 56) == 48)
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
            v8 = (uint64_t)&v158;
            WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v158, a2);
            if (v161)
            {
              if (v161 != 1)
                goto LABEL_464;
              v101 = v158;
              if (v158)
                *(_DWORD *)v158 += 2;
              v8 = 0;
              *(_OWORD *)(a1 + 8) = v159;
              *(_QWORD *)a1 = v101;
LABEL_424:
              *(_DWORD *)(a1 + 24) = 1;
            }
            else
            {
              v113 = WGSL::parseInterpolationSampling((uint64_t *)&v160);
              if (!v113)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v8 = 0;
                v119 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                *(_QWORD *)a1 = v149;
                *(_QWORD *)(a1 + 8) = v4;
                *(_QWORD *)(a1 + 16) = v119;
                goto LABEL_424;
              }
              LOBYTE(v153) = *v113;
              v8 = 1;
            }
            if (v161 != -1)
              ((void (*)(const char **, const char **))off_1E0FD6FE8[v161])(&v149, &v158);
            if ((_DWORD)v8)
            {
              if (*(_DWORD *)(a2 + 56) == 48)
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
              goto LABEL_430;
            }
          }
          else
          {
LABEL_430:
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v158, a2, 68);
            v7 = v161;
            if (!v161)
            {
              if ((_DWORD)v158 == 8 && v160)
              {
                if (*v160 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v160 -= 2;
              }
              v126 = *(_QWORD **)(a2 + 8);
              v127 = *(_DWORD *)(a2 + 96) - v5;
              v158 = v4;
              *(_QWORD *)&v159 = __PAIR64__(v127, v5);
              *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::InterpolateAttribute,WGSL::SourceSpan,WGSL::InterpolationType const&,WGSL::InterpolationSampling &,void>(v126, &v158, (char *)v14, (char *)&v153);
              *(_DWORD *)(a1 + 24) = 0;
              v80 = v177;
              if (v177 != -1)
                goto LABEL_242;
              goto LABEL_243;
            }
            WGSL::toString(68);
            if ((_DWORD)v7 != 1)
              goto LABEL_464;
            WGSL::toString((int)v158);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v140, (uint64_t *)&v139);
            v120 = v139;
            v139 = 0;
            if (v120)
            {
              if (*v120 == 2)
                WTF::StringImpl::destroy();
              else
                *v120 -= 2;
            }
            v121 = v140;
            v140 = 0;
            if (v121)
            {
              if (*v121 == 2)
                WTF::StringImpl::destroy();
              else
                *v121 -= 2;
            }
            v122 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v149;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v122;
LABEL_445:
            *(_DWORD *)(a1 + 24) = 1;
          }
          v80 = v177;
          if (v177 != -1)
            goto LABEL_242;
          goto LABEL_243;
        }
      }
      v29 = *(_DWORD **)(v13 + 32 * v10 + 24);
LABEL_47:
      *(_QWORD *)(a2 + 80) = v29;
      goto LABEL_38;
    }
    *(_DWORD *)v182 = v14;
    v184 = 1;
    WGSL::toString(8);
    WGSL::toString(v14);
    v174 = "Expected a ";
    *(_QWORD *)&v175 = 12;
    v158 = ", but got a ";
    *(_QWORD *)&v159 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v174, (uint64_t *)&v181, (uint64_t)&v158, (uint64_t *)&v180, &v149);
    if (!v149)
    {
      __break(0xC471u);
      JUMPOUT(0x1824F326CLL);
    }
    v33 = v180;
    v180 = 0;
    if (v33)
    {
      if (*v33 == 2)
      {
        WTF::StringImpl::destroy();
        v34 = v181;
        v181 = 0;
        if (!v34)
        {
LABEL_98:
          v55 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v149;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v55;
          v56 = 1;
          *(_DWORD *)(a1 + 24) = 1;
          return (_DWORD *)((uint64_t (*)(_QWORD, _QWORD))off_1E0FD6FF8[v56])(&v174, v182);
        }
LABEL_95:
        if (*v34 == 2)
          WTF::StringImpl::destroy();
        else
          *v34 -= 2;
        goto LABEL_98;
      }
      *v33 -= 2;
    }
    v34 = v181;
    v181 = 0;
    if (!v34)
      goto LABEL_98;
    goto LABEL_95;
  }
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v10;
    if (v9 <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1824F3244);
    }
    v20 = v13 + 32 * v10;
    v21 = *(_DWORD *)v20;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v20;
    *(_OWORD *)v8 = *(_OWORD *)(v20 + 4);
    v22 = *(_DWORD *)v20;
    if (v22 <= 8)
    {
      if (((1 << v22) & 0x38) != 0)
      {
        v23 = *(_DWORD **)(v13 + 32 * v10 + 24);
        goto LABEL_32;
      }
      if (((1 << v22) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v10 + 24);
      }
      else if (v22 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v23 = *(_DWORD **)(v13 + 32 * v10 + 24);
        if (v23)
          *v23 += 2;
LABEL_32:
        *(_QWORD *)(a2 + 80) = v23;
      }
    }
    v19 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v19;
    ++v10;
    if (v21 == 82)
      continue;
    break;
  }
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseDiagnostic((uint64_t)v182, a2);
  if (!v185)
  {
    v44 = *(_QWORD **)(a2 + 8);
    v45 = *(_DWORD *)(a2 + 96) - v5;
    v174 = v4;
    *(_QWORD *)&v175 = __PAIR64__(v45, v5);
    result = WGSL::AST::Builder::construct<WGSL::AST::DiagnosticAttribute,WGSL::SourceSpan,WGSL::AST::Diagnostic,void>(v44, &v174, (uint64_t)v182);
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 24) = 0;
    v31 = v185;
    if (v185 != -1)
      return (_DWORD *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD7030[v31])(&v174, v182);
    return result;
  }
  if (v185 != 1)
    goto LABEL_464;
  v30 = *(_QWORD *)v182;
  if (*(_QWORD *)v182)
    **(_DWORD **)v182 += 2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v182[8];
  *(_QWORD *)a1 = v30;
  v31 = 1;
  *(_DWORD *)(a1 + 24) = 1;
  return (_DWORD *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD7030[v31])(&v174, v182);
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::DiagnosticAttribute,WGSL::SourceSpan,WGSL::AST::Diagnostic,void>(_QWORD *this, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x67uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD7238;
  *(_BYTE *)(v6 + 24) = *(_BYTE *)a3;
  *(_QWORD *)(v6 + 32) = &off_1E0FD2EE8;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v6 + 32) = &off_1E0FD2F10;
  v7 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 96) = 0;
  if (*(_BYTE *)(a3 + 72))
  {
    *(_QWORD *)(v6 + 64) = &off_1E0FD2EE8;
    *(_OWORD *)(v6 + 72) = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(v6 + 64) = &off_1E0FD2F10;
    v8 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(v6 + 88) = v8;
    *(_BYTE *)(v6 + 96) = 1;
  }
  *v5 += 104;
  v9 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v9 != *((_DWORD *)v5 + 10))
  {
    v16 = (_QWORD *)(v5[4] + 8 * v9);
LABEL_19:
    *v16 = v6;
    *((_DWORD *)v5 + 11) = v9 + 1;
    return (_QWORD *)v6;
  }
  v10 = v9 + (v9 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (void *)v5[4];
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)v5 + 10) = v12;
    v5[4] = v14;
    memcpy(v14, v13, 8 * v9);
    if (v13)
    {
      if ((void *)v5[4] == v13)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v13, v15);
    }
    v9 = *((unsigned int *)v5 + 11);
    v16 = (_QWORD *)(v5[4] + 8 * v9);
    goto LABEL_19;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::GroupAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD44E8;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::BindingAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD4588;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::LocationAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD7260;
  *(_QWORD *)(v6 + 24) = v7;
  *v5 += 32;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::BuiltinAttribute,WGSL::SourceSpan,WGSL::Builtin const&,void>(_QWORD *this, _OWORD *a2, char *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD4628;
  *(_BYTE *)(v6 + 24) = v7;
  *v5 += 32;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::WorkgroupSizeAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::Expression*,WGSL::AST::Expression*,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;

  v9 = this;
  v10 = *this;
  if (this[1] - *this <= 0x2FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v10 = *v9;
  }
  v11 = *a4;
  v12 = *a5;
  *(_OWORD *)(v10 + 8) = *a2;
  *(_QWORD *)v10 = &off_1E0FD7288;
  *(_QWORD *)(v10 + 24) = *a3;
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v12;
  *v9 += 48;
  v13 = *((unsigned int *)v9 + 11);
  if ((_DWORD)v13 != *((_DWORD *)v9 + 10))
  {
    v20 = (_QWORD *)(v9[4] + 8 * v13);
LABEL_17:
    *v20 = v10;
    *((_DWORD *)v9 + 11) = v13 + 1;
    return (_QWORD *)v10;
  }
  v14 = v13 + (v13 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= v13 + 1)
    v16 = v13 + 1;
  else
    v16 = v15;
  if (!(v16 >> 29))
  {
    v17 = (void *)v9[4];
    v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
    *((_DWORD *)v9 + 10) = v16;
    v9[4] = v18;
    memcpy(v18, v17, 8 * v13);
    if (v17)
    {
      if ((void *)v9[4] == v17)
      {
        v9[4] = 0;
        *((_DWORD *)v9 + 10) = 0;
      }
      WTF::fastFree((WTF *)v17, v19);
    }
    v13 = *((unsigned int *)v9 + 11);
    v20 = (_QWORD *)(v9[4] + 8 * v13);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::AlignAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD72B0;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::InterpolateAttribute,WGSL::SourceSpan,WGSL::InterpolationType const&,WGSL::InterpolationSampling &,void>(_QWORD *this, _OWORD *a2, char *a3, char *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  v9 = *a3;
  v10 = *a4;
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)v8 = &off_1E0FD72D8;
  *(_BYTE *)(v8 + 24) = v9;
  *(_BYTE *)(v8 + 25) = v10;
  *v7 += 32;
  v11 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v11 != *((_DWORD *)v7 + 10))
  {
    v18 = (_QWORD *)(v7[4] + 8 * v11);
LABEL_17:
    *v18 = v8;
    *((_DWORD *)v7 + 11) = v11 + 1;
    return (_QWORD *)v8;
  }
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (void *)v7[4];
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)v7 + 10) = v14;
    v7[4] = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if ((void *)v7[4] == v15)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *((unsigned int *)v7 + 11);
    v18 = (_QWORD *)(v7[4] + 8 * v11);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::SizeAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD7300;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::IdAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD7328;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::InvariantAttribute,WGSL::SourceSpan,void>(_QWORD *this, _OWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  v3 = this;
  v4 = *this;
  if (this[1] - *this <= 0x17uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v4 = *v3;
  }
  *(_OWORD *)(v4 + 8) = *a2;
  *(_QWORD *)v4 = &off_1E0FD7350;
  *v3 += 24;
  v5 = *((unsigned int *)v3 + 11);
  if ((_DWORD)v5 != *((_DWORD *)v3 + 10))
  {
    v12 = (_QWORD *)(v3[4] + 8 * v5);
LABEL_17:
    *v12 = v4;
    *((_DWORD *)v3 + 11) = v5 + 1;
    return (_QWORD *)v4;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (!(v8 >> 29))
  {
    v9 = (void *)v3[4];
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 10) = v8;
    v3[4] = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if ((void *)v3[4] == v9)
      {
        v3[4] = 0;
        *((_DWORD *)v3 + 10) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *((unsigned int *)v3 + 11);
    v12 = (_QWORD *)(v3[4] + 8 * v5);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::MustUseAttribute,WGSL::SourceSpan,void>(_QWORD *this, _OWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  v3 = this;
  v4 = *this;
  if (this[1] - *this <= 0x17uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v4 = *v3;
  }
  *(_OWORD *)(v4 + 8) = *a2;
  *(_QWORD *)v4 = &off_1E0FD7378;
  *v3 += 24;
  v5 = *((unsigned int *)v3 + 11);
  if ((_DWORD)v5 != *((_DWORD *)v3 + 10))
  {
    v12 = (_QWORD *)(v3[4] + 8 * v5);
LABEL_17:
    *v12 = v4;
    *((_DWORD *)v3 + 11) = v5 + 1;
    return (_QWORD *)v4;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (!(v8 >> 29))
  {
    v9 = (void *)v3[4];
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 10) = v8;
    v3[4] = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if ((void *)v3[4] == v9)
      {
        v3[4] = 0;
        *((_DWORD *)v3 + 10) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *((unsigned int *)v3 + 11);
    v12 = (_QWORD *)(v3[4] + 8 * v5);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ConstAttribute,WGSL::SourceSpan,void>(_QWORD *this, _OWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  v3 = this;
  v4 = *this;
  if (this[1] - *this <= 0x17uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v4 = *v3;
  }
  *(_OWORD *)(v4 + 8) = *a2;
  *(_QWORD *)v4 = &off_1E0FD73A0;
  *v3 += 24;
  v5 = *((unsigned int *)v3 + 11);
  if ((_DWORD)v5 != *((_DWORD *)v3 + 10))
  {
    v12 = (_QWORD *)(v3[4] + 8 * v5);
LABEL_17:
    *v12 = v4;
    *((_DWORD *)v3 + 11) = v5 + 1;
    return (_QWORD *)v4;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (!(v8 >> 29))
  {
    v9 = (void *)v3[4];
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 10) = v8;
    v3[4] = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if ((void *)v3[4] == v9)
      {
        v3[4] = 0;
        *((_DWORD *)v3 + 10) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *((unsigned int *)v3 + 11);
    v12 = (_QWORD *)(v3[4] + 8 * v5);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::StageAttribute,WGSL::SourceSpan,WGSL::ShaderStage,void>(_QWORD *this, _OWORD *a2, char *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD73C8;
  *(_BYTE *)(v6 + 24) = v7;
  *v5 += 32;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::DiagnosticAttribute::~DiagnosticAttribute(WGSL::AST::DiagnosticAttribute *this)
{
  _DWORD *v2;
  _DWORD *v3;

  if (!*((_BYTE *)this + 96)
    || (*((_QWORD *)this + 8) = &off_1E0FD2F10, v2 = (_DWORD *)*((_QWORD *)this + 11), *((_QWORD *)this + 11) = 0, !v2))
  {
LABEL_5:
    *((_QWORD *)this + 4) = &off_1E0FD2F10;
    v3 = (_DWORD *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (!v3)
      return;
    goto LABEL_6;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy();
  *((_QWORD *)this + 4) = &off_1E0FD2F10;
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v3)
    return;
LABEL_6:
  if (*v3 == 2)
    WTF::StringImpl::destroy();
  else
    *v3 -= 2;
}

{
  _DWORD *v2;
  _DWORD *v3;

  if (*((_BYTE *)this + 96))
  {
    *((_QWORD *)this + 8) = &off_1E0FD2F10;
    v2 = (_DWORD *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v2)
    {
      if (*v2 == 2)
      {
        WTF::StringImpl::destroy();
        *((_QWORD *)this + 4) = &off_1E0FD2F10;
        v3 = (_DWORD *)*((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = 0;
        if (!v3)
          goto LABEL_11;
LABEL_6:
        if (*v3 == 2)
          WTF::StringImpl::destroy();
        else
          *v3 -= 2;
LABEL_11:
        JUMPOUT(0x186DAB2A8);
      }
      *v2 -= 2;
    }
  }
  *((_QWORD *)this + 4) = &off_1E0FD2F10;
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v3)
    goto LABEL_11;
  goto LABEL_6;
}

uint64_t WGSL::AST::DiagnosticAttribute::kind(WGSL::AST::DiagnosticAttribute *this)
{
  return 5;
}

void WGSL::AST::LocationAttribute::~LocationAttribute(WGSL::AST::LocationAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::LocationAttribute::kind(WGSL::AST::LocationAttribute *this)
{
  return 10;
}

void WGSL::AST::WorkgroupSizeAttribute::~WorkgroupSizeAttribute(WGSL::AST::WorkgroupSizeAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::WorkgroupSizeAttribute::kind(WGSL::AST::WorkgroupSizeAttribute *this)
{
  return 14;
}

void WGSL::AST::AlignAttribute::~AlignAttribute(WGSL::AST::AlignAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::AlignAttribute::kind(WGSL::AST::AlignAttribute *this)
{
  return 1;
}

void WGSL::AST::InterpolateAttribute::~InterpolateAttribute(WGSL::AST::InterpolateAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::InterpolateAttribute::kind(WGSL::AST::InterpolateAttribute *this)
{
  return 8;
}

void WGSL::AST::SizeAttribute::~SizeAttribute(WGSL::AST::SizeAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::SizeAttribute::kind(WGSL::AST::SizeAttribute *this)
{
  return 12;
}

void WGSL::AST::IdAttribute::~IdAttribute(WGSL::AST::IdAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::IdAttribute::kind(WGSL::AST::IdAttribute *this)
{
  return 7;
}

void WGSL::AST::InvariantAttribute::~InvariantAttribute(WGSL::AST::InvariantAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::InvariantAttribute::kind(WGSL::AST::InvariantAttribute *this)
{
  return 9;
}

void WGSL::AST::MustUseAttribute::~MustUseAttribute(WGSL::AST::MustUseAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::MustUseAttribute::kind(WGSL::AST::MustUseAttribute *this)
{
  return 11;
}

void WGSL::AST::ConstAttribute::~ConstAttribute(WGSL::AST::ConstAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::ConstAttribute::kind(WGSL::AST::ConstAttribute *this)
{
  return 4;
}

void WGSL::AST::StageAttribute::~StageAttribute(WGSL::AST::StageAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::StageAttribute::kind(WGSL::AST::StageAttribute *this)
{
  return 13;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST9AttributeEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::StructureMember,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(_QWORD *this, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD *v21;

  v9 = this;
  v10 = *this;
  if (this[1] - *this <= 0x9FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v10 = *v9;
  }
  *(_OWORD *)(v10 + 8) = *a2;
  *(_QWORD *)v10 = &off_1E0FD3850;
  *(_QWORD *)(v10 + 24) = &off_1E0FD2EE8;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v10 + 24) = &off_1E0FD2F10;
  v11 = *(_DWORD **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 56) = &off_1E0FD2F10;
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 80) = v11;
  v12 = *a5;
  *a5 = 0;
  *(_QWORD *)(v10 + 88) = v12;
  LODWORD(v12) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v10 + 96) = v12;
  LODWORD(v12) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(v10 + 100) = v12;
  v13 = *a4;
  *(_BYTE *)(v10 + 124) = 0;
  *(_BYTE *)(v10 + 128) = 0;
  *(_BYTE *)(v10 + 132) = 0;
  *(_BYTE *)(v10 + 136) = 0;
  *(_WORD *)(v10 + 140) = 0;
  *(_BYTE *)(v10 + 144) = 0;
  *(_BYTE *)(v10 + 148) = 0;
  *(_BYTE *)(v10 + 152) = 0;
  *(_BYTE *)(v10 + 154) = 0;
  *(_QWORD *)(v10 + 104) = v13;
  *(_QWORD *)(v10 + 112) = 0;
  *(_BYTE *)(v10 + 120) = 0;
  *v9 += 160;
  v14 = *((unsigned int *)v9 + 11);
  if ((_DWORD)v14 != *((_DWORD *)v9 + 10))
  {
    v21 = (_QWORD *)(v9[4] + 8 * v14);
LABEL_19:
    *v21 = v10;
    *((_DWORD *)v9 + 11) = v14 + 1;
    return (_QWORD *)v10;
  }
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= v14 + 1)
    v17 = v14 + 1;
  else
    v17 = v16;
  if (!(v17 >> 29))
  {
    v18 = (void *)v9[4];
    v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
    *((_DWORD *)v9 + 10) = v17;
    v9[4] = v19;
    memcpy(v19, v18, 8 * v14);
    if (v18)
    {
      if ((void *)v9[4] == v18)
      {
        v9[4] = 0;
        *((_DWORD *)v9 + 10) = 0;
      }
      WTF::fastFree((WTF *)v18, v20);
    }
    v14 = *((unsigned int *)v9 + 11);
    v21 = (_QWORD *)(v9[4] + 8 * v14);
    goto LABEL_19;
  }
  __break(0xC471u);
  return this;
}

WTF *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *result;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v6 = *a2;
    if (!*a2)
    {
      v7 = 0;
      v8 = *a3;
      v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = *a3;
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    goto LABEL_6;
LABEL_4:
  v10 = v9 >> 8;
LABEL_7:
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v7;
    v14 = (WTF::StringImpl **)(v6 + 8 * (v10 & v7));
    result = *v14;
    if (*v14 == (WTF::StringImpl *)-1)
    {
      v11 = (WTF::StringImpl **)(v6 + 8 * v13);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v11)
      {
        result = 0;
        *v11 = 0;
        --*(_DWORD *)(*a2 - 16);
        v14 = v11;
      }
      v18 = *a3;
      if (*a3)
        *(_DWORD *)v18 += 2;
      *v14 = v18;
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        v19 = *a2;
        if (*a2)
          goto LABEL_21;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v19 = *a2;
        if (*a2)
        {
LABEL_21:
          v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
          v21 = *(unsigned int *)(v19 - 4);
          if (v21 <= 0x400)
            goto LABEL_22;
          goto LABEL_30;
        }
      }
      v20 = *(unsigned int *)(v19 - 16);
      v21 = *(unsigned int *)(v19 - 4);
      if (v21 <= 0x400)
      {
LABEL_22:
        if (3 * v21 > 4 * v20)
        {
LABEL_33:
          v23 = v19 + 8 * v21;
          v22 = 1;
          goto LABEL_34;
        }
        if (!(_DWORD)v21)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
          v14 = (WTF::StringImpl **)result;
          v19 = *a2;
          if (!*a2)
          {
LABEL_25:
            v21 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v21 = *(unsigned int *)(v19 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21)), v14);
        v14 = (WTF::StringImpl **)result;
        v19 = *a2;
        if (!*a2)
          goto LABEL_25;
        goto LABEL_32;
      }
LABEL_30:
      if (v21 > 2 * v20)
        goto LABEL_33;
      goto LABEL_31;
    }
    result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v10 = i + v13;
  }
  v16 = *a2;
  if (*a2)
    v17 = *(unsigned int *)(v16 - 4);
  else
    v17 = 0;
  v22 = 0;
  v23 = v16 + 8 * v17;
LABEL_34:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral,WGSL::AST::Identifier,char>(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6, uint64_t a7, char a8)
{
  size_t v8;
  unint64_t v9;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  char v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  unint64_t v27;
  __int128 v28;
  char v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _WORD *v43;
  int8x16_t *v44;
  __int16 v45;
  int8x16_t *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int128 *v49;
  int8x16_t *v50;
  size_t v51;
  _BYTE *v52;
  unint64_t v53;
  unsigned __int128 *v54;
  unsigned __int128 v55;
  uint64_t v56;
  _WORD *v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  char *v64;
  char *v65;
  char *v66;
  size_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  _BYTE *v72;
  int8x16_t *v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _WORD *v82;
  int8x16_t *v83;
  __int16 v84;
  _BYTE *v85;
  _BYTE *v86;
  int8x16_t *v87;
  size_t v88;
  _BYTE *v89;
  unint64_t v90;
  unsigned __int128 *v91;
  unsigned __int128 v92;
  size_t v93;
  unint64_t v94;
  unint64_t v95;
  _BYTE *v96;
  int8x16_t *v97;
  char v98;
  unint64_t v99;
  _WORD *v100;
  unint64_t v101;
  __int128 v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _WORD *v114;
  int8x16_t *v115;
  __int16 v116;
  int8x16_t *v117;
  uint64_t v118;
  uint64_t v119;
  _WORD *v120;
  unint64_t v121;
  __int128 v122;
  char *v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _WORD *v137;
  int8x16_t *v138;
  __int16 v139;
  uint8x8_t *v140;
  uint16x8_t *v141;
  unint64_t v142;
  uint8x16_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint8x8_t *v146;
  uint16x8_t *v147;
  unint64_t v148;
  uint8x8_t v149;
  uint8x8_t *v150;
  uint16x8_t *v151;
  unint64_t v152;
  uint8x16_t v153;
  uint16x8_t v154;
  uint16x8_t v155;
  uint8x8_t *v156;
  uint16x8_t *v157;
  unint64_t v158;
  uint8x8_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int8x16_t *v165;
  int8x16_t *v166;
  unint64_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int16x8_t *v172;
  int8x8_t *v173;
  unint64_t v174;
  int16x8_t v175;
  int8x16_t *v176;
  int8x16_t *v177;
  unint64_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int16x8_t *v183;
  int8x8_t *v184;
  unint64_t v185;
  int16x8_t v186;
  uint8x8_t *v187;
  uint16x8_t *v188;
  unint64_t v189;
  uint8x16_t v190;
  uint16x8_t v191;
  uint16x8_t v192;
  uint8x8_t *v193;
  uint16x8_t *v194;
  unint64_t v195;
  uint8x8_t v196;
  uint8x8_t *v197;
  uint16x8_t *v198;
  unint64_t v199;
  uint8x16_t v200;
  uint16x8_t v201;
  uint16x8_t v202;
  uint8x8_t *v203;
  uint16x8_t *v204;
  unint64_t v205;
  uint8x8_t v206;
  uint64_t v209;
  int8x16x2_t v210;
  int8x16x2_t v211;
  int8x16x2_t v212;
  int8x16x2_t v213;
  int8x16x2_t v214;
  int8x16x2_t v215;
  int8x16x2_t v216;
  int8x16x2_t v217;
  int8x16x2_t v218;
  int8x16x2_t v219;
  int8x16x2_t v220;
  int8x16x2_t v221;

  if (a3)
    v8 = a3 - 1;
  else
    v8 = 0;
  if (v8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824F5278);
  }
  if (a6)
    v9 = a6 - 1;
  else
    v9 = 0;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824F5298);
  }
  v15 = (_QWORD *)result;
  if (!a4)
  {
    v16 = 0;
    if (a7)
      goto LABEL_11;
LABEL_16:
    v18 = 0;
    v20 = 1;
    goto LABEL_17;
  }
  v16 = *(_DWORD *)(a4 + 4);
  if (!a7)
    goto LABEL_16;
LABEL_11:
  v17 = *(_DWORD *)(a7 + 4);
  if (v17 < 0)
    goto LABEL_25;
  v18 = 0;
  v19 = __OFADD__(v17, 1);
  v20 = v17 + 1;
  if (v19)
    goto LABEL_26;
LABEL_17:
  v19 = __OFADD__((_DWORD)v9, v20);
  v21 = v9 + v20;
  v22 = v19;
  if (v16 < 0 || (v22 & 1) != 0)
    goto LABEL_26;
  v19 = __OFADD__(v16, v21);
  v23 = v16 + v21;
  if (v19 || (v24 = (v8 + v23), __OFADD__((_DWORD)v8, v23)))
  {
LABEL_25:
    v18 = 0;
    goto LABEL_26;
  }
  if ((!a4 || (*(_BYTE *)(a4 + 16) & 4) != 0) && (!a7 || (*(_BYTE *)(a7 + 16) & 4) != 0))
  {
    if (!(_DWORD)v24)
      goto LABEL_44;
    if ((v24 & 0x80000000) != 0)
      goto LABEL_25;
    result = WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
    v18 = v209;
    if (!v209)
      goto LABEL_26;
    v36 = (_BYTE *)(v209 + 20);
    *(_DWORD *)v209 = 2;
    *(_DWORD *)(v209 + 4) = v24;
    *(_QWORD *)(v209 + 8) = v209 + 20;
    *(_DWORD *)(v209 + 16) = 4;
    v37 = a8;
    if ((_DWORD)v8)
    {
      if ((_DWORD)v8 == 1)
      {
        *v36 = a2->i8[0];
      }
      else
      {
        result = (uint64_t)memcpy((void *)(v209 + 20), a2, v8);
        v36 = (_BYTE *)(v209 + 20);
        v37 = a8;
      }
    }
    v49 = (unsigned __int128 *)&v36[v8];
    if (!a4)
    {
      v56 = 0;
      goto LABEL_111;
    }
    v50 = *(int8x16_t **)(a4 + 8);
    v51 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v51)
      {
        if ((_DWORD)v51 == 1)
        {
          *(_BYTE *)v49 = v50->i8[0];
        }
        else
        {
          result = (uint64_t)memcpy(&v36[v8], v50, v51);
          v37 = a8;
        }
      }
      goto LABEL_110;
    }
    v52 = (char *)v49 + v51;
    if (v51 < 0x10)
    {
      v53 = (unint64_t)&v36[v8];
    }
    else
    {
      v53 = (unint64_t)v49 + (v51 & 0xFFFFFFF0);
      v54 = v49;
      do
      {
        v55 = (unsigned __int128)vld2q_s8(v50->i8);
        v50 += 2;
        *v54++ = v55;
      }
      while (v54 != (unsigned __int128 *)v53);
    }
    if ((_BYTE *)v53 == v52)
    {
LABEL_110:
      v56 = *(unsigned int *)(a4 + 4);
LABEL_111:
      v85 = (char *)v49 + v56;
      if ((_DWORD)v9)
      {
        if ((_DWORD)v9 == 1)
        {
          *v85 = a5->i8[0];
        }
        else
        {
          result = (uint64_t)memcpy((char *)v49 + v56, a5, v9);
          v37 = a8;
        }
      }
      v86 = &v85[v9];
      if (!a7)
      {
        *v86 = v37;
        goto LABEL_26;
      }
      v87 = *(int8x16_t **)(a7 + 8);
      v88 = *(unsigned int *)(a7 + 4);
      if ((*(_BYTE *)(a7 + 16) & 4) != 0)
      {
        if ((_DWORD)v88)
        {
          if ((_DWORD)v88 == 1)
          {
            *v86 = v87->i8[0];
          }
          else
          {
            result = (uint64_t)memcpy(&v85[v9], v87, v88);
            v37 = a8;
          }
        }
        goto LABEL_137;
      }
      v89 = &v86[v88];
      if (v88 < 0x10)
      {
        v90 = (unint64_t)&v85[v9];
      }
      else
      {
        v90 = (unint64_t)&v86[v88 & 0xFFFFFFF0];
        v91 = (unsigned __int128 *)&v85[v9];
        do
        {
          v92 = (unsigned __int128)vld2q_s8(v87->i8);
          v87 += 2;
          *v91++ = v92;
        }
        while (v91 != (unsigned __int128 *)v90);
      }
      if ((_BYTE *)v90 == v89)
      {
LABEL_137:
        v86[*(unsigned int *)(a7 + 4)] = v37;
        goto LABEL_26;
      }
      v93 = v56 + a3 + v209 + v88 + v9;
      v94 = v93 - v90 - (a3 != 0) + 20;
      if (v94 < 8
        || (!a3 ? (v95 = v90) : (v95 = v90 + 1),
            v90 < (unint64_t)&v87[2].u64[1] + 2 * v93 + -2 * v95 && (unint64_t)v87 < v93 - (a3 != 0) + 20))
      {
        v96 = (_BYTE *)v90;
        v97 = v87;
        goto LABEL_134;
      }
      if (v94 >= 0x20)
      {
        v160 = v94 & 0xFFFFFFFFFFFFFFE0;
        v176 = v87 + 2;
        v177 = (int8x16_t *)(v90 + 16);
        v178 = v94 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v180 = v176[-2];
          v179 = v176[-1];
          v182 = *v176;
          v181 = v176[1];
          v176 += 4;
          v177[-1] = vuzp1q_s8(v180, v179);
          *v177 = vuzp1q_s8(v182, v181);
          v177 += 2;
          v178 -= 32;
        }
        while (v178);
        if (v94 == v160)
          goto LABEL_137;
        if ((v94 & 0x18) == 0)
        {
          v97 = (int8x16_t *)((char *)v87 + 2 * v160);
          v96 = (_BYTE *)(v90 + v160);
          do
          {
LABEL_134:
            v98 = v97->i8[0];
            v97 = (int8x16_t *)((char *)v97 + 2);
            *v96++ = v98;
          }
          while (v96 != v89);
          goto LABEL_137;
        }
      }
      else
      {
        v160 = 0;
      }
      v96 = (_BYTE *)(v90 + (v94 & 0xFFFFFFFFFFFFFFF8));
      v97 = (int8x16_t *)((char *)v87 + 2 * (v94 & 0xFFFFFFFFFFFFFFF8));
      v183 = (int16x8_t *)((char *)v87 + 2 * v160);
      v184 = (int8x8_t *)(v90 + v160);
      v185 = v160 - (v94 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v186 = *v183++;
        *v184++ = vmovn_s16(v186);
        v185 += 8;
      }
      while (v185);
      if (v94 == (v94 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_137;
      goto LABEL_134;
    }
    v67 = v209 + a3 + v51;
    v68 = v67 - v53 - (a3 != 0) + 20;
    if (v68 < 8
      || (!a3 ? (v69 = v53) : (v69 = v53 + 1),
          v53 < (unint64_t)&v50[2].u64[1] + 2 * v67 + -2 * v69
        ? (v70 = (unint64_t)v50 >= v67 - (a3 != 0) + 20)
        : (v70 = 1),
          !v70))
    {
      v72 = (_BYTE *)v53;
      v73 = v50;
      goto LABEL_92;
    }
    if (v68 >= 0x20)
    {
      v71 = v68 & 0xFFFFFFFFFFFFFFE0;
      v165 = v50 + 2;
      v166 = (int8x16_t *)(v53 + 16);
      v167 = v68 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v169 = v165[-2];
        v168 = v165[-1];
        v171 = *v165;
        v170 = v165[1];
        v165 += 4;
        v166[-1] = vuzp1q_s8(v169, v168);
        *v166 = vuzp1q_s8(v171, v170);
        v166 += 2;
        v167 -= 32;
      }
      while (v167);
      if (v68 == v71)
        goto LABEL_110;
      if ((v68 & 0x18) == 0)
      {
        v73 = (int8x16_t *)((char *)v50 + 2 * v71);
        v72 = (_BYTE *)(v53 + v71);
        do
        {
LABEL_92:
          v74 = v73->i8[0];
          v73 = (int8x16_t *)((char *)v73 + 2);
          *v72++ = v74;
        }
        while (v72 != v52);
        goto LABEL_110;
      }
    }
    else
    {
      v71 = 0;
    }
    v72 = (_BYTE *)(v53 + (v68 & 0xFFFFFFFFFFFFFFF8));
    v73 = (int8x16_t *)((char *)v50 + 2 * (v68 & 0xFFFFFFFFFFFFFFF8));
    v172 = (int16x8_t *)((char *)v50 + 2 * v71);
    v173 = (int8x8_t *)(v53 + v71);
    v174 = v71 - (v68 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v175 = *v172++;
      *v173++ = vmovn_s16(v175);
      v174 += 8;
    }
    while (v174);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_110;
    goto LABEL_92;
  }
  if (!(_DWORD)v24)
  {
LABEL_44:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_26;
  }
  if (v24 > 0x7FFFFFEF)
    goto LABEL_25;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v24 + 20));
  v18 = v209;
  if (v209)
  {
    v25 = v209 + 20;
    *(_DWORD *)v209 = 2;
    *(_DWORD *)(v209 + 4) = v24;
    *(_QWORD *)(v209 + 8) = v209 + 20;
    *(_DWORD *)(v209 + 16) = 0;
    v26 = (_WORD *)(v209 + 20 + 2 * v8);
    if ((v8 & 0xFFFFFFC0) != 0)
    {
      v27 = v25 + 2 * (v8 & 0xFFFFFFC0);
      v28 = 0uLL;
      v29 = a8;
      do
      {
        v210.val[0] = *a2;
        v30 = a2[1];
        v214.val[0] = a2[2];
        v31 = a2[3];
        a2 += 4;
        v32 = v31;
        v214.val[1] = 0uLL;
        v218.val[0] = v30;
        v210.val[1] = 0uLL;
        v33 = (char *)v25;
        vst2q_s8(v33, v210);
        v33 += 32;
        v218.val[1] = 0uLL;
        vst2q_s8(v33, v218);
        v34 = (char *)(v25 + 64);
        vst2q_s8(v34, v214);
        v35 = (char *)(v25 + 96);
        vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
        v25 += 128;
      }
      while (v25 != v27);
      v25 = v27;
    }
    else
    {
      v29 = a8;
    }
    if ((_WORD *)v25 != v26)
    {
      v38 = v209 + 2 * a3 - v25;
      v39 = -2;
      if (a3)
        v40 = -2;
      else
        v40 = 0;
      v41 = v38 + v40 + 18;
      if (v41 < 0xE)
        goto LABEL_55;
      if (!a3)
        v39 = 0;
      v42 = v38 + v39 + 18;
      if (v25 < (unint64_t)a2->u64 + (v42 >> 1) + 1
        && (unint64_t)a2 < (v42 & 0xFFFFFFFFFFFFFFFELL) + v25 + 2)
      {
LABEL_55:
        v43 = (_WORD *)v25;
        v44 = a2;
        goto LABEL_56;
      }
      v75 = (v41 >> 1) + 1;
      if (v41 >= 0x3E)
      {
        v76 = v75 & 0xFFFFFFFFFFFFFFE0;
        v140 = (uint8x8_t *)&a2[1];
        v141 = (uint16x8_t *)(v25 + 32);
        v142 = v75 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v143 = *(uint8x16_t *)v140[-2].i8;
          v144 = vmovl_u8(*v140);
          v145 = vmovl_high_u8(*(uint8x16_t *)v140->i8);
          v141[-2] = vmovl_u8(*(uint8x8_t *)v143.i8);
          v141[-1] = vmovl_high_u8(v143);
          *v141 = v144;
          v141[1] = v145;
          v141 += 4;
          v140 += 4;
          v142 -= 32;
        }
        while (v142);
        if (v75 == v76)
          goto LABEL_57;
        if ((v75 & 0x18) == 0)
        {
          v44 = (int8x16_t *)((char *)a2 + v76);
          v43 = (_WORD *)(v25 + 2 * v76);
          do
          {
LABEL_56:
            v45 = v44->u8[0];
            v44 = (int8x16_t *)((char *)v44 + 1);
            *v43++ = v45;
          }
          while (v43 != v26);
          goto LABEL_57;
        }
      }
      else
      {
        v76 = 0;
      }
      v43 = (_WORD *)(v25 + 2 * (v75 & 0xFFFFFFFFFFFFFFF8));
      v44 = (int8x16_t *)((char *)a2 + (v75 & 0xFFFFFFFFFFFFFFF8));
      v146 = (uint8x8_t *)&a2->i8[v76];
      v147 = (uint16x8_t *)(v25 + 2 * v76);
      v148 = v76 - (v75 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v149 = *v146++;
        *v147++ = vmovl_u8(v149);
        v148 += 8;
      }
      while (v148);
      if (v75 != (v75 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_56;
    }
LABEL_57:
    if (!a4)
    {
      v48 = 0;
      goto LABEL_140;
    }
    v46 = *(int8x16_t **)(a4 + 8);
    v47 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) == 0)
    {
      if ((_DWORD)v47)
      {
        if ((_DWORD)v47 == 1)
        {
          *v26 = v46->i16[0];
        }
        else
        {
          result = (uint64_t)memcpy((void *)(v209 + 20 + 2 * v8), v46, 2 * v47);
          v29 = a8;
        }
      }
      goto LABEL_139;
    }
    v57 = &v26[v47];
    if (v47 < 0x40)
    {
      v58 = v209 + 20 + 2 * v8;
    }
    else
    {
      v58 = (unint64_t)&v26[v47 & 0xFFFFFFC0];
      v59 = 0uLL;
      v60 = v209 + 20 + 2 * v8;
      do
      {
        v211.val[0] = *v46;
        v61 = v46[1];
        v215.val[0] = v46[2];
        v62 = v46[3];
        v46 += 4;
        v63 = v62;
        v215.val[1] = 0uLL;
        v219.val[0] = v61;
        v211.val[1] = 0uLL;
        v64 = (char *)v60;
        vst2q_s8(v64, v211);
        v64 += 32;
        v219.val[1] = 0uLL;
        vst2q_s8(v64, v219);
        v65 = (char *)(v60 + 64);
        vst2q_s8(v65, v215);
        v66 = (char *)(v60 + 96);
        vst2q_s8(v66, *(int8x16x2_t *)(&v59 - 1));
        v60 += 128;
      }
      while (v60 != v58);
    }
    if ((_WORD *)v58 == v57)
    {
LABEL_139:
      v48 = *(unsigned int *)(a4 + 4);
LABEL_140:
      v99 = (unint64_t)&v26[v48];
      v100 = (_WORD *)(v99 + 2 * v9);
      if ((v9 & 0xFFFFFFC0) != 0)
      {
        v101 = v99 + 2 * (v9 & 0xFFFFFFC0);
        v102 = 0uLL;
        do
        {
          v212.val[0] = *a5;
          v103 = a5[1];
          v216.val[0] = a5[2];
          v104 = a5[3];
          a5 += 4;
          v105 = v104;
          v216.val[1] = 0uLL;
          v220.val[0] = v103;
          v212.val[1] = 0uLL;
          v106 = (char *)v99;
          vst2q_s8(v106, v212);
          v106 += 32;
          v220.val[1] = 0uLL;
          vst2q_s8(v106, v220);
          v107 = (char *)(v99 + 64);
          vst2q_s8(v107, v216);
          v108 = (char *)(v99 + 96);
          vst2q_s8(v108, *(int8x16x2_t *)(&v102 - 1));
          v99 += 128;
        }
        while (v99 != v101);
        v99 = v101;
      }
      if ((_WORD *)v99 != v100)
      {
        v109 = v209 + 2 * (v48 + a3 + v9) - v99;
        v110 = -2;
        if (a3)
          v111 = -2;
        else
          v111 = 0;
        v112 = v109 + v111 + 18;
        if (v112 < 0xE)
          goto LABEL_153;
        if (!a3)
          v110 = 0;
        v113 = v109 + v110 + 18;
        if (v99 < (unint64_t)a5->u64 + (v113 >> 1) + 1
          && (unint64_t)a5 < (v113 & 0xFFFFFFFFFFFFFFFELL) + v99 + 2)
        {
LABEL_153:
          v114 = (_WORD *)v99;
          v115 = a5;
          goto LABEL_154;
        }
        v130 = (v112 >> 1) + 1;
        if (v112 >= 0x3E)
        {
          v131 = v130 & 0xFFFFFFFFFFFFFFE0;
          v150 = (uint8x8_t *)&a5[1];
          v151 = (uint16x8_t *)(v99 + 32);
          v152 = v130 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v153 = *(uint8x16_t *)v150[-2].i8;
            v154 = vmovl_u8(*v150);
            v155 = vmovl_high_u8(*(uint8x16_t *)v150->i8);
            v151[-2] = vmovl_u8(*(uint8x8_t *)v153.i8);
            v151[-1] = vmovl_high_u8(v153);
            *v151 = v154;
            v151[1] = v155;
            v151 += 4;
            v150 += 4;
            v152 -= 32;
          }
          while (v152);
          if (v130 == v131)
            goto LABEL_155;
          if ((v130 & 0x18) == 0)
          {
            v115 = (int8x16_t *)((char *)a5 + v131);
            v114 = (_WORD *)(v99 + 2 * v131);
            do
            {
LABEL_154:
              v116 = v115->u8[0];
              v115 = (int8x16_t *)((char *)v115 + 1);
              *v114++ = v116;
            }
            while (v114 != v100);
            goto LABEL_155;
          }
        }
        else
        {
          v131 = 0;
        }
        v114 = (_WORD *)(v99 + 2 * (v130 & 0xFFFFFFFFFFFFFFF8));
        v115 = (int8x16_t *)((char *)a5 + (v130 & 0xFFFFFFFFFFFFFFF8));
        v156 = (uint8x8_t *)&a5->i8[v131];
        v157 = (uint16x8_t *)(v99 + 2 * v131);
        v158 = v131 - (v130 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v159 = *v156++;
          *v157++ = vmovl_u8(v159);
          v158 += 8;
        }
        while (v158);
        if (v130 != (v130 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_154;
      }
LABEL_155:
      if (!a7)
      {
        v119 = 0;
LABEL_182:
        v100[v119] = v29;
        goto LABEL_26;
      }
      v117 = *(int8x16_t **)(a7 + 8);
      v118 = *(unsigned int *)(a7 + 4);
      if ((*(_BYTE *)(a7 + 16) & 4) == 0)
      {
        if ((_DWORD)v118)
        {
          if ((_DWORD)v118 == 1)
          {
            *v100 = v117->i16[0];
          }
          else
          {
            result = (uint64_t)memcpy(v100, v117, 2 * v118);
            v29 = a8;
          }
        }
        goto LABEL_181;
      }
      v120 = &v100[v118];
      if (v118 < 0x40)
      {
        v121 = (unint64_t)v100;
      }
      else
      {
        v121 = (unint64_t)&v100[v118 & 0xFFFFFFC0];
        v122 = 0uLL;
        v123 = (char *)v100;
        do
        {
          v213.val[0] = *v117;
          v124 = v117[1];
          v217.val[0] = v117[2];
          v125 = v117[3];
          v117 += 4;
          v126 = v125;
          v217.val[1] = 0uLL;
          v221.val[0] = v124;
          v213.val[1] = 0uLL;
          v127 = v123;
          vst2q_s8(v127, v213);
          v127 += 32;
          v221.val[1] = 0uLL;
          vst2q_s8(v127, v221);
          v128 = v123 + 64;
          vst2q_s8(v128, v217);
          v129 = v123 + 96;
          vst2q_s8(v129, *(int8x16x2_t *)(&v122 - 1));
          v123 += 128;
        }
        while (v123 != (char *)v121);
      }
      if ((_WORD *)v121 == v120)
        goto LABEL_181;
      v132 = v209 + 2 * (v48 + a3 + v118 + v9) - v121;
      v133 = -2;
      if (a3)
        v134 = -2;
      else
        v134 = 0;
      v135 = v132 + v134 + 18;
      if (v135 < 0xE)
        goto LABEL_177;
      if (!a3)
        v133 = 0;
      v136 = v132 + v133 + 18;
      if (v121 < (unint64_t)v117->u64 + (v136 >> 1) + 1
        && (unint64_t)v117 < (v136 & 0xFFFFFFFFFFFFFFFELL) + v121 + 2)
      {
LABEL_177:
        v137 = (_WORD *)v121;
        v138 = v117;
        goto LABEL_178;
      }
      v163 = (v135 >> 1) + 1;
      if (v135 >= 0x3E)
      {
        v164 = v163 & 0xFFFFFFFFFFFFFFE0;
        v197 = (uint8x8_t *)&v117[1];
        v198 = (uint16x8_t *)(v121 + 32);
        v199 = v163 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v200 = *(uint8x16_t *)v197[-2].i8;
          v201 = vmovl_u8(*v197);
          v202 = vmovl_high_u8(*(uint8x16_t *)v197->i8);
          v198[-2] = vmovl_u8(*(uint8x8_t *)v200.i8);
          v198[-1] = vmovl_high_u8(v200);
          *v198 = v201;
          v198[1] = v202;
          v198 += 4;
          v197 += 4;
          v199 -= 32;
        }
        while (v199);
        if (v163 == v164)
          goto LABEL_181;
        if ((v163 & 0x18) == 0)
        {
          v138 = (int8x16_t *)((char *)v117 + v164);
          v137 = (_WORD *)(v121 + 2 * v164);
          do
          {
LABEL_178:
            v139 = v138->u8[0];
            v138 = (int8x16_t *)((char *)v138 + 1);
            *v137++ = v139;
          }
          while (v137 != v120);
LABEL_181:
          v119 = *(unsigned int *)(a7 + 4);
          goto LABEL_182;
        }
      }
      else
      {
        v164 = 0;
      }
      v137 = (_WORD *)(v121 + 2 * (v163 & 0xFFFFFFFFFFFFFFF8));
      v138 = (int8x16_t *)((char *)v117 + (v163 & 0xFFFFFFFFFFFFFFF8));
      v203 = (uint8x8_t *)&v117->i8[v164];
      v204 = (uint16x8_t *)(v121 + 2 * v164);
      v205 = v164 - (v163 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v206 = *v203++;
        *v204++ = vmovl_u8(v206);
        v205 += 8;
      }
      while (v205);
      if (v163 == (v163 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_181;
      goto LABEL_178;
    }
    v77 = v209 + 2 * (v47 + a3) - v58;
    v78 = -2;
    if (a3)
      v79 = -2;
    else
      v79 = 0;
    v80 = v77 + v79 + 18;
    if (v80 < 0xE)
      goto LABEL_106;
    if (!a3)
      v78 = 0;
    v81 = v77 + v78 + 18;
    if (v58 < (unint64_t)v46->u64 + (v81 >> 1) + 1
      && (unint64_t)v46 < (v81 & 0xFFFFFFFFFFFFFFFELL) + v58 + 2)
    {
LABEL_106:
      v82 = (_WORD *)v58;
      v83 = v46;
      goto LABEL_107;
    }
    v161 = (v80 >> 1) + 1;
    if (v80 >= 0x3E)
    {
      v162 = v161 & 0xFFFFFFFFFFFFFFE0;
      v187 = (uint8x8_t *)&v46[1];
      v188 = (uint16x8_t *)(v58 + 32);
      v189 = v161 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v190 = *(uint8x16_t *)v187[-2].i8;
        v191 = vmovl_u8(*v187);
        v192 = vmovl_high_u8(*(uint8x16_t *)v187->i8);
        v188[-2] = vmovl_u8(*(uint8x8_t *)v190.i8);
        v188[-1] = vmovl_high_u8(v190);
        *v188 = v191;
        v188[1] = v192;
        v188 += 4;
        v187 += 4;
        v189 -= 32;
      }
      while (v189);
      if (v161 == v162)
        goto LABEL_139;
      if ((v161 & 0x18) == 0)
      {
        v83 = (int8x16_t *)((char *)v46 + v162);
        v82 = (_WORD *)(v58 + 2 * v162);
        do
        {
LABEL_107:
          v84 = v83->u8[0];
          v83 = (int8x16_t *)((char *)v83 + 1);
          *v82++ = v84;
        }
        while (v82 != v57);
        goto LABEL_139;
      }
    }
    else
    {
      v162 = 0;
    }
    v82 = (_WORD *)(v58 + 2 * (v161 & 0xFFFFFFFFFFFFFFF8));
    v83 = (int8x16_t *)((char *)v46 + (v161 & 0xFFFFFFFFFFFFFFF8));
    v193 = (uint8x8_t *)&v46->i8[v162];
    v194 = (uint16x8_t *)(v58 + 2 * v162);
    v195 = v162 - (v161 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v196 = *v193++;
      *v194++ = vmovl_u8(v196);
      v195 += 8;
    }
    while (v195);
    if (v161 == (v161 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_139;
    goto LABEL_107;
  }
LABEL_26:
  *v15 = v18;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST15StructureMemberEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST9StructureEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Variable,WGSL::SourceSpan,WGSL::AST::VariableFlavor &,WGSL::AST::Identifier,WGSL::AST::VariableQualifier *,WGSL::AST::Expression *,WGSL::AST::Expression *,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(_QWORD *this, _OWORD *a2, char *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;

  v15 = this;
  v16 = *this;
  if (this[1] - *this <= 0xB7uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v16 = *v15;
  }
  v17 = *a3;
  v18 = *a5;
  v19 = *a6;
  v20 = *a7;
  *(_OWORD *)(v16 + 8) = *a2;
  *(_QWORD *)v16 = &off_1E0FD38A0;
  *(_QWORD *)(v16 + 24) = &off_1E0FD2EE8;
  *(_OWORD *)(v16 + 32) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(v16 + 24) = &off_1E0FD2F10;
  v21 = *(_DWORD **)(a4 + 24);
  *(_QWORD *)(a4 + 24) = 0;
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(v16 + 32);
  *(_QWORD *)(v16 + 48) = v21;
  *(_QWORD *)(v16 + 56) = &off_1E0FD2F10;
  if (v21)
    *v21 += 2;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  *(_QWORD *)(v16 + 80) = v21;
  v22 = *a8;
  *a8 = 0;
  *(_QWORD *)(v16 + 88) = v22;
  LODWORD(v22) = *((_DWORD *)a8 + 2);
  *((_DWORD *)a8 + 2) = 0;
  *(_DWORD *)(v16 + 96) = v22;
  LODWORD(v22) = *((_DWORD *)a8 + 3);
  *((_DWORD *)a8 + 3) = 0;
  *(_DWORD *)(v16 + 100) = v22;
  *(_QWORD *)(v16 + 104) = v18;
  *(_QWORD *)(v16 + 112) = v19;
  *(_QWORD *)(v16 + 120) = v20;
  *(_BYTE *)(v16 + 128) = v17;
  *(_BYTE *)(v16 + 129) = 0;
  *(_BYTE *)(v16 + 160) = 0;
  *(_BYTE *)(v16 + 164) = 0;
  *(_BYTE *)(v16 + 168) = 0;
  *(_BYTE *)(v16 + 172) = 0;
  *(_BYTE *)(v16 + 176) = 0;
  if (!v19)
    v19 = v20;
  *(_QWORD *)(v16 + 149) = 0;
  *(_QWORD *)(v16 + 136) = 0;
  *(_QWORD *)(v16 + 144) = 0;
  *(_QWORD *)(v16 + 144) = *(_QWORD *)(v19 + 24);
  *v15 += 184;
  v23 = *((unsigned int *)v15 + 11);
  if ((_DWORD)v23 != *((_DWORD *)v15 + 10))
  {
    v30 = (_QWORD *)(v15[4] + 8 * v23);
LABEL_21:
    *v30 = v16;
    *((_DWORD *)v15 + 11) = v23 + 1;
    return (_QWORD *)v16;
  }
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= v23 + 1)
    v26 = v23 + 1;
  else
    v26 = v25;
  if (!(v26 >> 29))
  {
    v27 = (void *)v15[4];
    v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
    *((_DWORD *)v15 + 10) = v26;
    v15[4] = v28;
    memcpy(v28, v27, 8 * v23);
    if (v27)
    {
      if ((void *)v15[4] == v27)
      {
        v15[4] = 0;
        *((_DWORD *)v15 + 10) = 0;
      }
      WTF::fastFree((WTF *)v27, v29);
    }
    v23 = *((unsigned int *)v15 + 11);
    v30 = (_QWORD *)(v15[4] + 8 * v23);
    goto LABEL_21;
  }
  __break(0xC471u);
  return this;
}

const char *WGSL::TemplateTypes<(WGSL::TokenType)28,(WGSL::TokenType)26,(WGSL::TokenType)34>::appendNameTo(uint64_t a1)
{
  const char *v2;
  _DWORD *v3;
  const char *result;
  _DWORD *v5;
  const char *v6;
  int v7;
  _DWORD *v8;

  WGSL::toString(28);
  v8 = v5;
  v6 = ", ";
  v7 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)a1, (uint64_t *)&v8, (uint64_t)&v6);
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  WGSL::toString(26);
  v8 = 0;
  v6 = ", ";
  v7 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)a1, (uint64_t *)&v8, (uint64_t)&v6);
  WGSL::toString(34);
  v2 = v6;
  if (*(_DWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
  {
    if (!v6 || (v6[16] & 4) != 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_21;
  }
  if (v6)
    *(_DWORD *)v6 += 2;
  v3 = *(_DWORD **)a1;
  *(_QWORD *)a1 = v2;
  if (v3)
  {
    if (*v3 == 2)
    {
      WTF::StringImpl::destroy();
      v2 = v6;
      if (!v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    *v3 -= 2;
  }
  if (v2)
LABEL_13:
    LODWORD(v2) = *((_DWORD *)v2 + 1);
LABEL_14:
  *(_DWORD *)(a1 + 16) = (_DWORD)v2;
LABEL_21:
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (const char *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::VariableQualifier,WGSL::SourceSpan,WGSL::AddressSpace &,WGSL::AccessMode &,void>(_QWORD *this, _OWORD *a2, char *a3, char *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  v9 = *a3;
  v10 = *a4;
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)v8 = &off_1E0FD7420;
  *(_BYTE *)(v8 + 24) = v9;
  *(_BYTE *)(v8 + 25) = v10;
  *v7 += 32;
  v11 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v11 != *((_DWORD *)v7 + 10))
  {
    v18 = (_QWORD *)(v7[4] + 8 * v11);
LABEL_17:
    *v18 = v8;
    *((_DWORD *)v7 + 11) = v11 + 1;
    return (_QWORD *)v8;
  }
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (void *)v7[4];
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)v7 + 10) = v14;
    v7[4] = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if ((void *)v7[4] == v15)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *((unsigned int *)v7 + 11);
    v18 = (_QWORD *)(v7[4] + 8 * v11);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::VariableQualifier::~VariableQualifier(WGSL::AST::VariableQualifier *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::VariableQualifier::kind(WGSL::AST::VariableQualifier *this)
{
  return 63;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL12AddressSpaceENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_BYTE *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(_BYTE *result, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  size_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v12;
  uint64_t v13;

  if (a3)
    v5 = a3 - 1;
  else
    v5 = 0;
  if (v5 >> 31 || (a5 ? (v6 = a5 - 1) : (v6 = 0), v6 >> 31))
  {
    __break(0xC471u);
    JUMPOUT(0x1824F5BB8);
  }
  v7 = result;
  v8 = (v5 + v6);
  if (__OFADD__((_DWORD)v5, (_DWORD)v6))
    goto LABEL_11;
  if (!(_DWORD)v8)
  {
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_19;
  }
  if ((v8 & 0x80000000) != 0)
  {
LABEL_11:
    v9 = 0;
  }
  else
  {
    result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v8 + 20));
    v9 = v13;
    if (v13)
    {
      v12 = (_BYTE *)(v13 + 20);
      *(_DWORD *)v13 = 2;
      *(_DWORD *)(v13 + 4) = v8;
      *(_QWORD *)(v13 + 8) = v13 + 20;
      *(_DWORD *)(v13 + 16) = 4;
      if ((_DWORD)v5)
      {
        if ((_DWORD)v5 == 1)
          *v12 = *a2;
        else
          result = memcpy((void *)(v13 + 20), a2, v5);
      }
      if ((_DWORD)v6)
      {
        result = &v12[v5];
        if ((_DWORD)v6 == 1)
          *result = *a4;
        else
          result = memcpy(result, a4, v6);
      }
    }
  }
LABEL_19:
  *v7 = v9;
  return result;
}

WTF *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseCompoundStatement(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  WTF *result;
  _DWORD *v7;
  int v8;
  _OWORD *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  _DWORD *v18;
  void *v19;
  int v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  const char **v33;
  WTF *v34;
  const char *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  const char *v46;
  const char *v47;
  __int128 v48;
  unsigned int v49;
  _DWORD *v50;
  WTF *v51;
  uint64_t v52;
  _DWORD *v53;
  __int128 v54;
  int v55;
  WTF *v56;
  uint64_t v57;

  v4 = *(const char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  result = (WTF *)WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(&v53, a2);
  if (v55)
  {
    if (v55 == 1)
    {
      v7 = v53;
      if (v53)
        *v53 += 2;
      *(_OWORD *)(a1 + 8) = v54;
      *(_QWORD *)a1 = v7;
      goto LABEL_73;
    }
LABEL_77:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x1824F60D8);
  }
  v8 = *(_DWORD *)(a2 + 56);
  if (v8 != 43)
  {
    WGSL::toString(43);
    WGSL::toString(v8);
    v47 = "Expected a ";
    *(_QWORD *)&v48 = 12;
    v56 = (WTF *)", but got a ";
    v57 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v47, (uint64_t *)&v51, (uint64_t)&v56, (uint64_t *)&v50, &v52);
    if (!v52)
      goto LABEL_81;
    v18 = v50;
    v50 = 0;
    if (v18)
    {
      if (*v18 == 2)
      {
        WTF::StringImpl::destroy();
        result = v51;
        v51 = 0;
        if (!result)
        {
LABEL_72:
          v45 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v52;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v45;
LABEL_73:
          *(_DWORD *)(a1 + 24) = 1;
          goto LABEL_74;
        }
LABEL_69:
        if (*(_DWORD *)result == 2)
          result = (WTF *)WTF::StringImpl::destroy();
        else
          *(_DWORD *)result -= 2;
        goto LABEL_72;
      }
      *v18 -= 2;
    }
    result = v51;
    v51 = 0;
    if (!result)
      goto LABEL_72;
    goto LABEL_69;
  }
  v9 = (_OWORD *)(a2 + 60);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v11;
    if (v10 <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1824F60E0);
    }
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v13 + 32 * v11;
    v15 = *(_DWORD *)v14;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
    *v9 = *(_OWORD *)(v14 + 4);
    v16 = *(_DWORD *)v14;
    if (v16 <= 8)
    {
      if (((1 << v16) & 0x38) != 0)
      {
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_18:
        *(_QWORD *)(a2 + 80) = v17;
        goto LABEL_9;
      }
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
        goto LABEL_9;
      }
      if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_18;
      }
    }
LABEL_9:
    v12 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v12;
    ++v11;
  }
  while (v15 == 82);
  v46 = v4;
  v56 = 0;
  v57 = 0;
  do
  {
LABEL_28:
    v20 = *(_DWORD *)(a2 + 56);
    if (v20 == 73)
    {
      v24 = *(_DWORD *)(a2 + 36);
      v25 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v25;
        if (v24 <= v25)
          goto LABEL_81;
        v27 = *(_QWORD *)(a2 + 24);
        v28 = v27 + 32 * v25;
        v29 = *(_DWORD *)v28;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v28;
        *v9 = *(_OWORD *)(v28 + 4);
        v30 = *(_DWORD *)v28;
        if (v30 <= 8)
        {
          if (((1 << v30) & 0x38) != 0)
          {
            v31 = *(_DWORD **)(v27 + 32 * v25 + 24);
LABEL_47:
            *(_QWORD *)(a2 + 80) = v31;
            goto LABEL_38;
          }
          if (((1 << v30) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v27 + 32 * v25 + 24);
          }
          else if (v30 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v31 = *(_DWORD **)(v27 + 32 * v25 + 24);
            if (v31)
              *v31 += 2;
            goto LABEL_47;
          }
        }
LABEL_38:
        v26 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v26;
        ++v25;
        if (v29 != 82)
          goto LABEL_28;
      }
    }
    if (v20 == 44)
    {
      v36 = *(_DWORD *)(a2 + 36);
      v37 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v37;
        if (v36 <= v37)
        {
          __break(0xC471u);
          JUMPOUT(0x1824F60E8);
        }
        v39 = *(_QWORD *)(a2 + 24);
        v40 = v39 + 32 * v37;
        v41 = *(_DWORD *)v40;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v40;
        *v9 = *(_OWORD *)(v40 + 4);
        v42 = *(_DWORD *)v40;
        if (v42 > 8)
          goto LABEL_55;
        if (((1 << v42) & 0x38) != 0)
          break;
        if (((1 << v42) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v39 + 32 * v37 + 24);
        }
        else if (v42 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v43 = *(_DWORD **)(v39 + 32 * v37 + 24);
          if (v43)
            *v43 += 2;
          goto LABEL_64;
        }
LABEL_55:
        v38 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v38;
        ++v37;
        if (v41 != 82)
        {
          v44 = *(_QWORD **)(a2 + 8);
          v47 = v46;
          LODWORD(v48) = v5;
          DWORD1(v48) = v38 - v5;
          *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::CompoundStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,void>(v44, &v47, (uint64_t *)&v53, (uint64_t *)&v56);
          *(_DWORD *)(a1 + 24) = 0;
          goto LABEL_66;
        }
      }
      v43 = *(_DWORD **)(v39 + 32 * v37 + 24);
LABEL_64:
      *(_QWORD *)(a2 + 80) = v43;
      goto LABEL_55;
    }
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseStatement((uint64_t)&v47, a2);
    v21 = v49;
    if (v49)
    {
      if (v49 != 1)
        goto LABEL_77;
      v22 = v47;
      if (v47)
        *(_DWORD *)v47 += 2;
      *(_OWORD *)(a1 + 8) = v48;
      *(_QWORD *)a1 = v22;
      *(_DWORD *)(a1 + 24) = 1;
      v23 = v49;
      if (v49 != -1)
LABEL_26:
        ((void (*)(uint64_t *, const char **))off_1E0FD75E8[v23])(&v52, &v47);
    }
    else
    {
      v32 = HIDWORD(v57);
      if (HIDWORD(v57) == (_DWORD)v57)
      {
        v33 = (const char **)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)&v47);
        v32 = HIDWORD(v57);
        v34 = v56;
        v35 = *v33;
      }
      else
      {
        v34 = v56;
        v35 = v47;
      }
      *((_QWORD *)v34 + v32) = v35;
      ++HIDWORD(v57);
      v23 = v49;
      if (v49 != -1)
        goto LABEL_26;
    }
  }
  while (!v21);
LABEL_66:
  result = v56;
  if (v56)
  {
    v56 = 0;
    LODWORD(v57) = 0;
    result = (WTF *)WTF::fastFree(result, v19);
  }
LABEL_74:
  if (v55 != -1)
    return (WTF *)((uint64_t (*)(const char **, _DWORD **))off_1E0FD7638[v55])(&v47, &v53);
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Function,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::Parameter,0ul>,WGSL::AST::Expression *,std::reference_wrapper<WGSL::AST::CompoundStatement>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(_QWORD *this, __int128 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;

  v15 = this;
  v16 = *this;
  if (this[1] - *this <= 0xAFuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v16 = *v15;
  }
  v17 = *a5;
  v18 = *a2;
  *(_QWORD *)v16 = &off_1E0FD7608;
  *(_OWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 24) = &off_1E0FD2EE8;
  *(_OWORD *)(v16 + 32) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v16 + 24) = &off_1E0FD2F10;
  v19 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 48) = v19;
  v20 = *a4;
  *a4 = 0;
  *(_QWORD *)(v16 + 56) = v20;
  LODWORD(v20) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v16 + 64) = v20;
  LODWORD(v20) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v16 + 68) = v20;
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 80) = 0;
  v21 = *a7;
  *a7 = 0;
  *(_QWORD *)(v16 + 72) = v21;
  LODWORD(v21) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(v16 + 80) = v21;
  LODWORD(v21) = *((_DWORD *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_DWORD *)(v16 + 84) = v21;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  v22 = *a8;
  *a8 = 0;
  *(_QWORD *)(v16 + 88) = v22;
  LODWORD(v22) = *((_DWORD *)a8 + 2);
  *((_DWORD *)a8 + 2) = 0;
  *(_DWORD *)(v16 + 96) = v22;
  LODWORD(v22) = *((_DWORD *)a8 + 3);
  *((_DWORD *)a8 + 3) = 0;
  *(_DWORD *)(v16 + 100) = v22;
  *(_QWORD *)(v16 + 104) = v17;
  *(_QWORD *)(v16 + 112) = *a6;
  *(_WORD *)(v16 + 120) = 0;
  *(_BYTE *)(v16 + 122) = 0;
  *(_BYTE *)(v16 + 128) = 0;
  *(_BYTE *)(v16 + 152) = 0;
  *(_BYTE *)(v16 + 165) = 0;
  *(_BYTE *)(v16 + 168) = 0;
  *(_BYTE *)(v16 + 172) = 0;
  *(_DWORD *)(v16 + 160) = 0;
  *v15 += 176;
  v23 = *((unsigned int *)v15 + 11);
  if ((_DWORD)v23 != *((_DWORD *)v15 + 10))
  {
    v30 = (_QWORD *)(v15[4] + 8 * v23);
LABEL_17:
    *v30 = v16;
    *((_DWORD *)v15 + 11) = v23 + 1;
    return (_QWORD *)v16;
  }
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= v23 + 1)
    v26 = v23 + 1;
  else
    v26 = v25;
  if (!(v26 >> 29))
  {
    v27 = (void *)v15[4];
    v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
    *((_DWORD *)v15 + 10) = v26;
    v15[4] = v28;
    memcpy(v28, v27, 8 * v23);
    if (v27)
    {
      if ((void *)v15[4] == v27)
      {
        v15[4] = 0;
        *((_DWORD *)v15 + 10) = 0;
      }
      WTF::fastFree((WTF *)v27, v29);
    }
    v23 = *((unsigned int *)v15 + 11);
    v30 = (_QWORD *)(v15[4] + 8 * v23);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>(_QWORD *this, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;

  v11 = this;
  v12 = *this;
  if (this[1] - *this <= 0x67uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v12 = *v11;
  }
  v13 = *a6;
  *(_OWORD *)(v12 + 8) = *a2;
  *(_QWORD *)v12 = &off_1E0FD35E0;
  *(_BYTE *)(v12 + 24) = v13;
  *(_QWORD *)(v12 + 32) = &off_1E0FD2EE8;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v12 + 32) = &off_1E0FD2F10;
  v14 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(v12 + 56) = v14;
  v15 = *a4;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 64) = v15;
  v16 = *a5;
  *a5 = 0;
  *(_QWORD *)(v12 + 72) = v16;
  LODWORD(v16) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v12 + 80) = v16;
  LODWORD(v16) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_BYTE *)(v12 + 93) = 0;
  *(_BYTE *)(v12 + 96) = 0;
  *(_BYTE *)(v12 + 100) = 0;
  *(_DWORD *)(v12 + 84) = v16;
  *(_DWORD *)(v12 + 88) = 0;
  *v11 += 104;
  v17 = *((unsigned int *)v11 + 11);
  if ((_DWORD)v17 != *((_DWORD *)v11 + 10))
  {
    v24 = (_QWORD *)(v11[4] + 8 * v17);
LABEL_17:
    *v24 = v12;
    *((_DWORD *)v11 + 11) = v17 + 1;
    return (_QWORD *)v12;
  }
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v17 + 1)
    v20 = v17 + 1;
  else
    v20 = v19;
  if (!(v20 >> 29))
  {
    v21 = (void *)v11[4];
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *((_DWORD *)v11 + 10) = v20;
    v11[4] = v22;
    memcpy(v22, v21, 8 * v17);
    if (v21)
    {
      if ((void *)v11[4] == v21)
      {
        v11[4] = 0;
        *((_DWORD *)v11 + 10) = 0;
      }
      WTF::fastFree((WTF *)v21, v23);
    }
    v17 = *((unsigned int *)v11 + 11);
    v24 = (_QWORD *)(v11[4] + 8 * v17);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST9ParameterEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

WTF *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseStatement(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  WTF *result;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  _OWORD *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  unsigned int v51;
  _OWORD *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  _DWORD *v59;
  WTF *v60;
  int v61;
  uint64_t v62;
  WTF *v63;
  uint64_t (**v64)();
  _OWORD *v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  _DWORD *v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  unsigned int v77;
  _OWORD *v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  _DWORD *v85;
  _OWORD *v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  _DWORD *v94;
  unsigned int v95;
  _OWORD *v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  _DWORD *v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  _DWORD *v111;
  unsigned int v112;
  _OWORD *v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  _DWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  _DWORD *v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  _DWORD *v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  _DWORD *v137;
  int v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  _DWORD *v142;
  WTF *v143;
  int v144;
  _QWORD *v145;
  int v146;
  int v147;
  unsigned int v148;
  _DWORD *v149;
  WTF *v150;
  int v151;
  WTF *v152;
  _DWORD *v153;
  _QWORD *v154;
  _DWORD *v155;
  uint64_t (*v156)();
  uint64_t v157;
  WTF *v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD *v161;
  _DWORD *v162;
  _DWORD *v163;
  _DWORD *v164;
  void *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  int v172;
  uint64_t (**v173)();
  uint64_t v174;
  WTF *v175;
  uint64_t v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  _DWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  unsigned int v193;
  int v194;
  _DWORD *v195;
  const char *v196;
  int v197;
  _DWORD *v198;
  _OWORD *v199;
  unint64_t v200;
  void *v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  WTF *v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int v216;
  _DWORD *v217;
  const char *v218;
  char v219;
  uint64_t v220;
  WTF *v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  unsigned int v228;
  _DWORD *v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  int v243;
  unsigned int v244;
  _DWORD *v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  _DWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  _DWORD *v257;
  _QWORD *v258;
  unsigned int v259;
  int v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  _DWORD *v264;
  WTF *v265;
  WTF *v266;
  int v267;
  unsigned int v268;
  _DWORD *v269;
  _DWORD *v270;
  unint64_t v271;
  unsigned int v272;
  uint64_t v273;
  _DWORD *v274;
  unint64_t v275;
  WTF *v276;
  _DWORD *v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  _DWORD *v285;
  WTF *v286;
  unsigned int v287;
  unsigned int v288;
  const char *v289;
  unsigned int v290;
  unsigned int v291;
  WTF *v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  _DWORD *v301;
  _QWORD *v302;
  unsigned int v303;
  uint64_t v304;
  const char *v305;
  unint64_t v306;
  _DWORD *v307;
  unint64_t v308;
  _QWORD *v309;
  int v310;
  _QWORD *v311;
  uint64_t v312;
  WTF *v313;
  const char *v314;
  uint64_t v315;
  _QWORD *v316;
  int v317;
  WTF *v318;
  int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int v326;
  unsigned int v327;
  _DWORD *v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  unsigned int v335;
  _DWORD *v336;
  void *v337;
  unint64_t v338;
  int v339;
  char v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  _DWORD *v348;
  unsigned int v349;
  const char *v350;
  unsigned int v351;
  _QWORD *v352;
  int v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  unsigned int v359;
  _DWORD *v360;
  int v361;
  unsigned int v362;
  unint64_t v363;
  unsigned int v364;
  unsigned int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  _DWORD *v371;
  const char *v372;
  uint64_t v373;
  WTF *v374;
  unsigned int v375;
  const char *v376;
  unsigned int v377;
  int v378;
  unint64_t v379;
  char *v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  char *v384;
  WTF *v385;
  WTF *v386;
  unint64_t v387;
  _DWORD *v388;
  unsigned int v389;
  unsigned int v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  _DWORD *v396;
  _QWORD *v397;
  WTF *v398;
  unint64_t v399;
  WTF *v400;
  int v401;
  const char *v402;
  uint64_t v403;
  _QWORD *v404;
  int v405;
  _QWORD *v406;
  unsigned int v407;
  _DWORD *v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  unsigned int v415;
  _DWORD *v416;
  _QWORD *v417;
  _DWORD *v418;
  unint64_t v419;
  WTF **v420;
  WTF **v421;
  const char *v422;
  unint64_t v423;
  int v424;
  int v425;
  unsigned int v426;
  unsigned int v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  int v431;
  unsigned int v432;
  _DWORD *v433;
  unsigned int v434;
  unsigned int v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  int v439;
  unsigned int v440;
  _DWORD *v441;
  unsigned int v442;
  unsigned int v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  _DWORD *v449;
  _DWORD *v450;
  unsigned int v451;
  _DWORD *v452;
  WTF *v453;
  int v454;
  _DWORD *v455;
  unint64_t v456;
  WTF *v457;
  uint64_t v458;
  const char *v459;
  _DWORD *v460;
  unint64_t v461;
  _QWORD *v462;
  int v463;
  _QWORD *v464;
  unsigned int v465;
  int v466;
  _DWORD *v467;
  _DWORD *v468;
  unint64_t v469;
  _QWORD *v470;
  int v471;
  __int128 v472;
  unint64_t v473;
  WTF *v474;
  WTF *v475;
  _DWORD *__src;
  unsigned int __srca;
  _QWORD *v478;
  WTF *v479;
  int v480;
  unint64_t v481;
  unint64_t v482;
  _OWORD *v483;
  WTF *v484;
  unsigned int v485;
  int v486;
  unsigned int v487;
  int v488;
  const char *v489;
  unsigned int v490;
  _DWORD *v491;
  _DWORD *v492;
  _DWORD *v493;
  WTF *v494;
  _DWORD *v495;
  WTF *v496;
  _DWORD *v497;
  WTF *v498;
  _DWORD *v499;
  WTF *v500;
  _DWORD *v501;
  WTF *v502;
  _DWORD *v503;
  _DWORD *v504;
  _DWORD *v505;
  _DWORD *v506;
  _DWORD *v507;
  _DWORD *v508;
  _DWORD *v509;
  _DWORD *v510;
  _DWORD *v511;
  _DWORD *v512;
  _DWORD *v513;
  _DWORD *v514;
  WTF *v515;
  __int128 v516;
  int v517;
  WTF *v518;
  _DWORD *v519;
  WTF *v520;
  _DWORD *v521;
  WTF *v522;
  _BYTE v523[24];
  _DWORD *v524;
  unsigned int v525;
  _DWORD *v526;
  uint64_t v527;
  WTF *v528;
  __int128 v529;
  unint64_t v530;
  WTF *v531;
  unsigned __int8 v532;
  const char *v533;
  __int128 v534;
  unsigned int v535;
  WTF *v536;
  uint64_t v537;
  WTF *v538;
  __int128 v539;
  unsigned int v540;
  const char *v541;
  uint64_t v542;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v6 + 1;
  if ((v6 + 1) >= 0x81)
  {
LABEL_2:
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)a1 = v528;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_3;
  }
  switch(*(_DWORD *)(a2 + 56))
  {
    case 8:
      result = (WTF *)WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v528, a2);
      if ((_DWORD)v531)
      {
        if ((_DWORD)v531 != 1)
          goto LABEL_990;
        v76 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)(a1 + 8) = v529;
        *(_QWORD *)a1 = v76;
        *(_DWORD *)(a1 + 24) = 1;
LABEL_806:
        v74 = v531;
        if ((_DWORD)v531 == -1)
          goto LABEL_948;
        v173 = off_1E0FD6FE8;
LABEL_808:
        v156 = v173[v74];
        goto LABEL_946;
      }
      if ((*(_DWORD *)(a2 + 56) | 0x10) == 0x53)
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseTypeNameAfterIdentifier((uint64_t)&v538, a2, (uint64_t)&v528, (const char *)v4, v5);
        v174 = v540;
        if (v540)
        {
          if (v540 != 1)
            goto LABEL_990;
          v175 = v538;
          if (v538)
            *(_DWORD *)v538 += 2;
          *(_OWORD *)(a1 + 8) = v539;
          *(_QWORD *)a1 = v175;
          *(_DWORD *)(a1 + 24) = 1;
          goto LABEL_631;
        }
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseArgumentExpressionList(&v533, a2);
        if (v535)
        {
          if (v535 != 1)
            goto LABEL_990;
          v314 = v533;
          if (v533)
            *(_DWORD *)v533 += 2;
          *(_OWORD *)(a1 + 8) = v534;
          *(_QWORD *)a1 = v314;
          *(_DWORD *)(a1 + 24) = 1;
          v315 = v535;
          if (v535 == -1)
            goto LABEL_631;
        }
        else
        {
          v404 = *(_QWORD **)(a2 + 8);
          v405 = *(_DWORD *)(a2 + 96) - v5;
          *(_QWORD *)v523 = v4;
          *(_DWORD *)&v523[8] = v5;
          *(_DWORD *)&v523[12] = v405;
          v406 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(v404, v523, (uint64_t *)&v538, (uint64_t *)&v533);
          WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)v523, a2, 73);
          v407 = v525;
          if (v525)
          {
            WGSL::toString(73);
            if (v407 != 1)
              goto LABEL_990;
            WGSL::toString(*(int *)v523);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v515, (uint64_t *)&v506, (uint64_t *)&v505);
            v408 = v505;
            v505 = 0;
            if (v408)
            {
              if (*v408 == 2)
                WTF::StringImpl::destroy();
              else
                *v408 -= 2;
            }
            v460 = v506;
            v506 = 0;
            if (v460)
            {
              if (*v460 == 2)
                WTF::StringImpl::destroy();
              else
                *v460 -= 2;
            }
            v461 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v515;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v461;
            *(_DWORD *)(a1 + 24) = 1;
            v315 = v535;
            if (v535 == -1)
              goto LABEL_631;
          }
          else
          {
            if (*(_DWORD *)v523 == 8 && v524)
            {
              if (*v524 == 2)
                WTF::StringImpl::destroy();
              else
                *v524 -= 2;
            }
            v470 = *(_QWORD **)(a2 + 8);
            v471 = *(_DWORD *)(a2 + 96) - v5;
            *(_QWORD *)v523 = v4;
            *(_DWORD *)&v523[8] = v5;
            *(_DWORD *)&v523[12] = v471;
            *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::CallStatement,WGSL::SourceSpan,WGSL::AST::CallExpression &,void>(v470, v523, (uint64_t)v406);
            *(_DWORD *)(a1 + 24) = 0;
            v315 = v535;
            if (v535 == -1)
              goto LABEL_631;
          }
        }
        ((void (*)(_BYTE *, const char **))off_1E0FD70A8[v315])(v523, &v533);
LABEL_631:
        result = (WTF *)((uint64_t (*)(_BYTE *, WTF **))off_1E0FD71D8[v174])(v523, &v538);
        goto LABEL_806;
      }
      v309 = *(_QWORD **)(a2 + 8);
      v310 = *(_DWORD *)(a2 + 96) - v5;
      *(_QWORD *)v523 = v4;
      *(_DWORD *)&v523[8] = v5;
      *(_DWORD *)&v523[12] = v310;
      v311 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v309, v523, (uint64_t)&v528);
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parsePostfixExpression((uint64_t)&v538, a2, v311, v4, v5);
      v312 = v540;
      if (v540)
      {
        if (v540 != 1)
          goto LABEL_990;
        v313 = v538;
        if (v538)
          *(_DWORD *)v538 += 2;
        *(_OWORD *)(a1 + 8) = v539;
        *(_QWORD *)a1 = v313;
        *(_DWORD *)(a1 + 24) = 1;
        goto LABEL_805;
      }
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableUpdatingStatement((uint64_t)&v533, a2, &v538);
      if (v535)
      {
        if (v535 != 1)
          goto LABEL_990;
        v402 = v533;
        if (v533)
          *(_DWORD *)v533 += 2;
        *(_OWORD *)(a1 + 8) = v534;
        *(_QWORD *)a1 = v402;
        *(_DWORD *)(a1 + 24) = 1;
        v403 = v535;
        if (v535 == -1)
          goto LABEL_805;
      }
      else
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)v523, a2, 73);
        v451 = v525;
        if (v525)
        {
          WGSL::toString(73);
          if (v451 != 1)
            goto LABEL_990;
          WGSL::toString(*(int *)v523);
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v515, (uint64_t *)&v504, (uint64_t *)&v503);
          v452 = v503;
          v503 = 0;
          if (v452)
          {
            if (*v452 == 2)
              WTF::StringImpl::destroy();
            else
              *v452 -= 2;
          }
          v468 = v504;
          v504 = 0;
          if (v468)
          {
            if (*v468 == 2)
              WTF::StringImpl::destroy();
            else
              *v468 -= 2;
          }
          v469 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v515;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v469;
          *(_DWORD *)(a1 + 24) = 1;
          v403 = v535;
          if (v535 == -1)
            goto LABEL_805;
        }
        else
        {
          if (*(_DWORD *)v523 == 8 && v524)
          {
            if (*v524 == 2)
              WTF::StringImpl::destroy();
            else
              *v524 -= 2;
          }
          *(_QWORD *)a1 = v533;
          *(_DWORD *)(a1 + 24) = 0;
          v403 = v535;
          if (v535 == -1)
            goto LABEL_805;
        }
      }
      ((void (*)(_BYTE *, const char **))off_1E0FD75E8[v403])(v523, &v533);
LABEL_805:
      result = (WTF *)((uint64_t (*)(_BYTE *, WTF **))off_1E0FD71D8[v312])(v523, &v538);
      goto LABEL_806;
    case 0xB:
      v77 = *(_DWORD *)(a2 + 36);
      v78 = (_OWORD *)(a2 + 60);
      v79 = *(_DWORD *)(a2 + 40) + 1;
      v80 = 32 * v79;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v79;
        if (v77 <= v79)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA544);
        }
        v82 = *(_QWORD *)(a2 + 24);
        v83 = *(_DWORD *)(v82 + v80);
        *(_DWORD *)(a2 + 56) = v83;
        *v78 = *(_OWORD *)(v82 + v80 + 4);
        v84 = *(_DWORD *)(v82 + v80);
        if (v84 > 8)
          goto LABEL_120;
        if (((1 << v84) & 0x38) != 0)
          break;
        if (((1 << v84) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v82 + v80 + 24);
        }
        else if (v84 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v85 = *(_DWORD **)(v82 + v80 + 24);
          if (v85)
            *v85 += 2;
          goto LABEL_129;
        }
LABEL_120:
        v81 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v81;
        ++v79;
        v80 += 32;
        if (v83 != 82)
        {
          if (v83 != 73)
          {
            WGSL::toString(73);
            WGSL::toString(v83);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v500, (uint64_t *)&v499);
            v161 = v499;
            v499 = 0;
            if (v161)
            {
              if (*v161 == 2)
                WTF::StringImpl::destroy();
              else
                *v161 -= 2;
            }
            result = v500;
            v500 = 0;
            if (!result)
              goto LABEL_605;
            goto LABEL_602;
          }
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v79;
            if (v77 <= v79)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA564);
            }
            v129 = v82 + 32 * v79;
            v130 = *(_DWORD *)v129;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v129;
            *v78 = *(_OWORD *)(v129 + 4);
            v131 = *(_DWORD *)v129;
            if (v131 <= 8)
            {
              if (((1 << v131) & 0x38) != 0)
              {
                v132 = *(_DWORD **)(v82 + 32 * v79 + 24);
                goto LABEL_205;
              }
              if (((1 << v131) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v82 + 32 * v79 + 24);
              }
              else if (v131 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v132 = *(_DWORD **)(v82 + 32 * v79 + 24);
                if (v132)
                  *v132 += 2;
LABEL_205:
                *(_QWORD *)(a2 + 80) = v132;
              }
            }
            v128 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v128;
            ++v79;
            if (v130 != 82)
            {
              v167 = *(_QWORD **)(a2 + 8);
              v528 = (WTF *)v4;
              LODWORD(v529) = v5;
              DWORD1(v529) = v128 - v5;
              result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::BreakStatement,WGSL::SourceSpan,void>(v167, &v528);
              goto LABEL_305;
            }
            continue;
          }
        }
      }
      v85 = *(_DWORD **)(v82 + v80 + 24);
LABEL_129:
      *(_QWORD *)(a2 + 80) = v85;
      goto LABEL_120;
    case 0xD:
    case 0x1A:
    case 0x22:
      *(_QWORD *)v523 = 0;
      *(_QWORD *)&v523[8] = 0;
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableWithAttributes((uint64_t)&v528, a2, (uint64_t *)v523);
      if (*(_QWORD *)v523)
        WTF::fastFree(*(WTF **)v523, v9);
      v10 = v530;
      if ((_DWORD)v530)
      {
        if ((_DWORD)v530 != 1)
          goto LABEL_990;
        v11 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)(a1 + 8) = v529;
        *(_QWORD *)a1 = v11;
LABEL_351:
        *(_DWORD *)(a1 + 24) = 1;
LABEL_352:
        v156 = off_1E0FD7040[v10];
        goto LABEL_946;
      }
      v14 = *(_DWORD *)(a2 + 56);
      if (v14 != 73)
      {
        WGSL::toString(73);
        WGSL::toString(v14);
        *(_QWORD *)v523 = "Expected a ";
        *(_QWORD *)&v523[8] = 12;
        v538 = (WTF *)", but got a ";
        *(_QWORD *)&v539 = 13;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v523, (uint64_t *)&v508, (uint64_t)&v538, (uint64_t *)&v507, &v533);
        if (!v533)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA5E4);
        }
        v153 = v507;
        v507 = 0;
        if (v153)
        {
          if (*v153 == 2)
            WTF::StringImpl::destroy();
          else
            *v153 -= 2;
        }
        v189 = v508;
        v508 = 0;
        if (v189)
        {
          if (*v189 == 2)
            WTF::StringImpl::destroy();
          else
            *v189 -= 2;
        }
        v190 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
        *(_QWORD *)a1 = v533;
        *(_QWORD *)(a1 + 8) = v4;
        *(_QWORD *)(a1 + 16) = v190;
        goto LABEL_351;
      }
      v15 = *(_DWORD *)(a2 + 36);
      v16 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v16;
        if (v15 <= v16)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA514);
        }
        v18 = *(_QWORD *)(a2 + 24);
        v19 = v18 + 32 * v16;
        v20 = *(_DWORD *)v19;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v19;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v19 + 4);
        v21 = *(_DWORD *)v19;
        if (v21 > 8)
          goto LABEL_20;
        if (((1 << v21) & 0x38) != 0)
          break;
        if (((1 << v21) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v18 + 32 * v16 + 24);
        }
        else if (v21 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v22 = *(_DWORD **)(v18 + 32 * v16 + 24);
          if (v22)
            *v22 += 2;
          goto LABEL_29;
        }
LABEL_20:
        v17 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v17;
        ++v16;
        if (v20 != 82)
        {
          v154 = *(_QWORD **)(a2 + 8);
          *(_QWORD *)v523 = v4;
          *(_DWORD *)&v523[8] = v5;
          *(_DWORD *)&v523[12] = v17 - v5;
          *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Variable>,void>(v154, v523, &v528);
          *(_DWORD *)(a1 + 24) = 0;
          goto LABEL_352;
        }
      }
      v22 = *(_DWORD **)(v18 + 32 * v16 + 24);
LABEL_29:
      *(_QWORD *)(a2 + 80) = v22;
      goto LABEL_20;
    case 0xE:
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseConstAssert((uint64_t)&v528, a2);
      v62 = v530;
      if (!(_DWORD)v530)
      {
        v171 = *(_QWORD **)(a2 + 8);
        v172 = *(_DWORD *)(a2 + 96) - v5;
        *(_QWORD *)v523 = v4;
        *(_DWORD *)&v523[8] = v5;
        *(_DWORD *)&v523[12] = v172;
        *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::ConstAssertStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::ConstAssert>,void>(v171, v523, &v528);
        *(_DWORD *)(a1 + 24) = 0;
        v64 = off_1E0FD7218;
        goto LABEL_590;
      }
      if ((_DWORD)v530 != 1)
        goto LABEL_990;
      v63 = v528;
      if (v528)
        *(_DWORD *)v528 += 2;
      *(_OWORD *)(a1 + 8) = v529;
      *(_QWORD *)a1 = v63;
      *(_DWORD *)(a1 + 24) = 1;
      v64 = off_1E0FD7218;
      goto LABEL_590;
    case 0xF:
      v95 = *(_DWORD *)(a2 + 36);
      v96 = (_OWORD *)(a2 + 60);
      v97 = *(_DWORD *)(a2 + 40) + 1;
      v98 = 32 * v97;
      do
      {
        *(_DWORD *)(a2 + 40) = v97;
        if (v95 <= v97)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA54CLL);
        }
        v100 = *(_QWORD *)(a2 + 24);
        v101 = *(_DWORD *)(v100 + v98);
        *(_DWORD *)(a2 + 56) = v101;
        *v96 = *(_OWORD *)(v100 + v98 + 4);
        v102 = *(_DWORD *)(v100 + v98);
        if (v102 <= 8)
        {
          if (((1 << v102) & 0x38) != 0)
          {
            v103 = *(_DWORD **)(v100 + v98 + 24);
LABEL_153:
            *(_QWORD *)(a2 + 80) = v103;
            goto LABEL_144;
          }
          if (((1 << v102) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v100 + v98 + 24);
            goto LABEL_144;
          }
          if (v102 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v103 = *(_DWORD **)(v100 + v98 + 24);
            if (v103)
              *v103 += 2;
            goto LABEL_153;
          }
        }
LABEL_144:
        v99 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v99;
        ++v97;
        v98 += 32;
      }
      while (v101 == 82);
      if (v101 != 73)
      {
        WGSL::toString(73);
        WGSL::toString(v101);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v498, (uint64_t *)&v497);
        v162 = v497;
        v497 = 0;
        if (v162)
        {
          if (*v162 == 2)
            WTF::StringImpl::destroy();
          else
            *v162 -= 2;
        }
        result = v498;
        v498 = 0;
        if (!result)
          goto LABEL_605;
        goto LABEL_602;
      }
      while (2)
      {
        *(_DWORD *)(a2 + 40) = v97;
        if (v95 <= v97)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA56CLL);
        }
        v134 = v100 + 32 * v97;
        v135 = *(_DWORD *)v134;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v134;
        *v96 = *(_OWORD *)(v134 + 4);
        v136 = *(_DWORD *)v134;
        if (v136 <= 8)
        {
          if (((1 << v136) & 0x38) != 0)
          {
            v137 = *(_DWORD **)(v100 + 32 * v97 + 24);
            goto LABEL_218;
          }
          if (((1 << v136) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v100 + 32 * v97 + 24);
          }
          else if (v136 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v137 = *(_DWORD **)(v100 + 32 * v97 + 24);
            if (v137)
              *v137 += 2;
LABEL_218:
            *(_QWORD *)(a2 + 80) = v137;
          }
        }
        v133 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v133;
        ++v97;
        if (v135 == 82)
          continue;
        break;
      }
      v168 = *(_QWORD **)(a2 + 8);
      v528 = (WTF *)v4;
      LODWORD(v529) = v5;
      DWORD1(v529) = v133 - v5;
      result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::ContinueStatement,WGSL::SourceSpan,void>(v168, &v528);
LABEL_305:
      *(_QWORD *)a1 = result;
      *(_DWORD *)(a1 + 24) = 0;
LABEL_948:
      *(_DWORD *)(a2 + 44) = v6;
      return result;
    case 0x13:
      v51 = *(_DWORD *)(a2 + 36);
      v52 = (_OWORD *)(a2 + 60);
      v53 = *(_DWORD *)(a2 + 40) + 1;
      v54 = 32 * v53;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v53;
        if (v51 <= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA53CLL);
        }
        v56 = *(_QWORD *)(a2 + 24);
        v57 = *(_DWORD *)(v56 + v54);
        *(_DWORD *)(a2 + 56) = v57;
        *v52 = *(_OWORD *)(v56 + v54 + 4);
        v58 = *(_DWORD *)(v56 + v54);
        if (v58 > 8)
          goto LABEL_76;
        if (((1 << v58) & 0x38) != 0)
          break;
        if (((1 << v58) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v56 + v54 + 24);
        }
        else if (v58 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v59 = *(_DWORD **)(v56 + v54 + 24);
          if (v59)
            *v59 += 2;
          goto LABEL_85;
        }
LABEL_76:
        v55 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v55;
        ++v53;
        v54 += 32;
        if (v57 != 82)
        {
          if (v57 != 73)
          {
            WGSL::toString(73);
            WGSL::toString(v57);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v496, (uint64_t *)&v495);
            v160 = v495;
            v495 = 0;
            if (v160)
            {
              if (*v160 == 2)
                WTF::StringImpl::destroy();
              else
                *v160 -= 2;
            }
            result = v496;
            v496 = 0;
            if (!result)
              goto LABEL_605;
            goto LABEL_602;
          }
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v53;
            if (v51 <= v53)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA55CLL);
            }
            v124 = v56 + 32 * v53;
            v125 = *(_DWORD *)v124;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v124;
            *v52 = *(_OWORD *)(v124 + 4);
            v126 = *(_DWORD *)v124;
            if (v126 <= 8)
            {
              if (((1 << v126) & 0x38) != 0)
              {
                v127 = *(_DWORD **)(v56 + 32 * v53 + 24);
                goto LABEL_192;
              }
              if (((1 << v126) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v56 + 32 * v53 + 24);
              }
              else if (v126 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v127 = *(_DWORD **)(v56 + 32 * v53 + 24);
                if (v127)
                  *v127 += 2;
LABEL_192:
                *(_QWORD *)(a2 + 80) = v127;
              }
            }
            v123 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v123;
            ++v53;
            if (v125 != 82)
            {
              v166 = *(_QWORD **)(a2 + 8);
              v528 = (WTF *)v4;
              LODWORD(v529) = v5;
              DWORD1(v529) = v123 - v5;
              result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::DiscardStatement,WGSL::SourceSpan,void>(v166, &v528);
              goto LABEL_305;
            }
            continue;
          }
        }
      }
      v59 = *(_DWORD **)(v56 + v54 + 24);
LABEL_85:
      *(_QWORD *)(a2 + 80) = v59;
      goto LABEL_76;
    case 0x18:
      v65 = (_OWORD *)(a2 + 60);
      v66 = *(_DWORD *)(a2 + 36);
      LODWORD(v67) = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v67;
        if (v66 <= v67)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA4FCLL);
        }
        v69 = *(_QWORD *)(a2 + 24);
        v70 = v69 + 32 * v67;
        v71 = *(_DWORD *)v70;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v70;
        *v65 = *(_OWORD *)(v70 + 4);
        v72 = *(_DWORD *)v70;
        if (v72 > 8)
          goto LABEL_98;
        if (((1 << v72) & 0x38) != 0)
          break;
        if (((1 << v72) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v69 + 32 * v67 + 24);
        }
        else if (v72 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v73 = *(_DWORD **)(v69 + 32 * v67 + 24);
          if (v73)
            *v73 += 2;
          goto LABEL_107;
        }
LABEL_98:
        v68 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v68;
        v67 = (v67 + 1);
        if (v71 != 82)
        {
          v538 = 0;
          v533 = 0;
          v515 = 0;
          if (v71 != 67)
          {
            WGSL::toString(67);
            WGSL::toString(v71);
            v528 = (WTF *)"Expected a ";
            *(_QWORD *)&v529 = 12;
            *(_QWORD *)v523 = ", but got a ";
            *(_QWORD *)&v523[8] = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v536, (uint64_t)v523, (uint64_t *)&v526, &v541);
            if (!v541)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA60CLL);
            }
            v164 = v526;
            v526 = 0;
            if (v164)
            {
              if (*v164 == 2)
                WTF::StringImpl::destroy();
              else
                *v164 -= 2;
            }
            result = v536;
            v536 = 0;
            if (result)
              goto LABEL_608;
            goto LABEL_611;
          }
          v145 = (_QWORD *)(v69 + 32 * v67 + 24);
          while (1)
          {
            *(_DWORD *)(a2 + 40) = v67;
            if (v66 <= v67)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA5B4);
            }
            v147 = *((_DWORD *)v145 - 6);
            *(_DWORD *)(a2 + 56) = v147;
            *v65 = *(_OWORD *)((char *)v145 - 20);
            v148 = *((_DWORD *)v145 - 6);
            if (v148 > 8)
              goto LABEL_240;
            if (((1 << v148) & 0x38) != 0)
              break;
            if (((1 << v148) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *v145;
            }
            else if (v148 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v149 = (_DWORD *)*v145;
              if (*v145)
                *v149 += 2;
              goto LABEL_249;
            }
LABEL_240:
            v146 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v146;
            v145 += 4;
            LODWORD(v67) = v67 + 1;
            if (v147 != 82)
            {
              switch(v147)
              {
                case 8:
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseLHSExpression((uint64_t)&v528, a2);
                  if ((_DWORD)v530)
                  {
                    if ((_DWORD)v530 != 1)
                      goto LABEL_990;
                    v400 = v528;
                    if (v528)
                      *(_DWORD *)v528 += 2;
                    *(_OWORD *)&v523[8] = v529;
                    *(_QWORD *)v523 = v400;
                    v401 = 1;
                    LODWORD(v524) = 1;
LABEL_850:
                    ((void (*)(const char **, WTF **))off_1E0FD71D8[v401])(&v541, &v528);
                  }
                  else
                  {
                    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableUpdatingStatement((uint64_t)v523, a2, &v528);
                    v401 = v530;
                    if ((_DWORD)v530 != -1)
                      goto LABEL_850;
                  }
                  if ((_DWORD)v524)
                  {
                    if ((_DWORD)v524 != 1)
                      goto LABEL_990;
                    result = *(WTF **)v523;
                    if (!*(_QWORD *)v523)
                    {
                      v472 = *(_OWORD *)&v523[8];
                      goto LABEL_988;
                    }
                    **(_DWORD **)v523 += 2;
                    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
                    *(_QWORD *)a1 = result;
                    *(_DWORD *)(a1 + 24) = 1;
                    *(_QWORD *)v523 = 0;
                    v424 = *(_DWORD *)result - 2;
                    if (*(_DWORD *)result != 2)
                      goto LABEL_905;
                    goto LABEL_855;
                  }
                  v538 = *(WTF **)v523;
LABEL_857:
                  v425 = *(_DWORD *)(a2 + 56);
                  if (v425 == 73)
                  {
LABEL_858:
                    v426 = *(_DWORD *)(a2 + 36);
                    v427 = *(_DWORD *)(a2 + 40) + 1;
                    v428 = 32 * v427;
                    while (1)
                    {
                      *(_DWORD *)(a2 + 40) = v427;
                      if (v426 <= v427)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824FA5BCLL);
                      }
                      v430 = *(_QWORD *)(a2 + 24);
                      v431 = *(_DWORD *)(v430 + v428);
                      *(_DWORD *)(a2 + 56) = v431;
                      *v65 = *(_OWORD *)(v430 + v428 + 4);
                      v432 = *(_DWORD *)(v430 + v428);
                      if (v432 > 8)
                        goto LABEL_860;
                      if (((1 << v432) & 0x38) != 0)
                        break;
                      if (((1 << v432) & 0xC4) != 0)
                      {
                        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v430 + v428 + 24);
                      }
                      else if (v432 == 8)
                      {
                        *(_QWORD *)(a2 + 80) = 0;
                        v433 = *(_DWORD **)(v430 + v428 + 24);
                        if (v433)
                          *v433 += 2;
                        goto LABEL_869;
                      }
LABEL_860:
                      v429 = *(_DWORD *)(a2 + 68);
                      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                      *(_DWORD *)(a2 + 96) = v429;
                      v428 += 32;
                      ++v427;
                      if (v431 != 82)
                      {
                        if (v431 == 73)
                          goto LABEL_871;
                        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v528, a2);
                        if ((_DWORD)v530)
                        {
                          if ((_DWORD)v530 != 1)
                            goto LABEL_990;
                          result = v528;
                          if (!v528)
                            goto LABEL_987;
LABEL_904:
                          *(_DWORD *)result += 2;
                          *(_OWORD *)(a1 + 8) = v529;
                          *(_QWORD *)a1 = result;
                          *(_DWORD *)(a1 + 24) = 1;
                          v424 = *(_DWORD *)result - 2;
                          if (*(_DWORD *)result != 2)
                            goto LABEL_905;
LABEL_855:
                          result = (WTF *)WTF::StringImpl::destroy();
                          goto LABEL_948;
                        }
                        v533 = (const char *)v528;
                        v454 = *(_DWORD *)(a2 + 56);
                        if (v454 != 73)
                        {
                          WGSL::toString(73);
                          WGSL::toString(v454);
                          v528 = (WTF *)"Expected a ";
                          *(_QWORD *)&v529 = 12;
                          *(_QWORD *)v523 = ", but got a ";
                          *(_QWORD *)&v523[8] = 13;
                          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v520, (uint64_t)v523, (uint64_t *)&v519, &v541);
                          if (!v541)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1824FA654);
                          }
                          v455 = v519;
                          v519 = 0;
                          if (v455)
                          {
                            if (*v455 == 2)
                              WTF::StringImpl::destroy();
                            else
                              *v455 -= 2;
                          }
                          result = v520;
                          v520 = 0;
                          if (!result)
                            goto LABEL_611;
LABEL_608:
                          if (*(_DWORD *)result == 2)
                            result = (WTF *)WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)result -= 2;
                          goto LABEL_611;
                        }
LABEL_871:
                        v434 = *(_DWORD *)(a2 + 36);
                        v435 = *(_DWORD *)(a2 + 40) + 1;
                        v436 = 32 * v435;
                        while (2)
                        {
                          *(_DWORD *)(a2 + 40) = v435;
                          if (v434 <= v435)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1824FA5D4);
                          }
                          v438 = *(_QWORD *)(a2 + 24);
                          v439 = *(_DWORD *)(v438 + v436);
                          *(_DWORD *)(a2 + 56) = v439;
                          *v65 = *(_OWORD *)(v438 + v436 + 4);
                          v440 = *(_DWORD *)(v438 + v436);
                          if (v440 <= 8)
                          {
                            if (((1 << v440) & 0x38) != 0)
                            {
                              v441 = *(_DWORD **)(v438 + v436 + 24);
                              goto LABEL_882;
                            }
                            if (((1 << v440) & 0xC4) != 0)
                            {
                              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v438 + v436 + 24);
                            }
                            else if (v440 == 8)
                            {
                              *(_QWORD *)(a2 + 80) = 0;
                              v441 = *(_DWORD **)(v438 + v436 + 24);
                              if (v441)
                                *v441 += 2;
LABEL_882:
                              *(_QWORD *)(a2 + 80) = v441;
                            }
                          }
                          v437 = *(_DWORD *)(a2 + 68);
                          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                          *(_DWORD *)(a2 + 96) = v437;
                          v436 += 32;
                          ++v435;
                          if (v439 != 82)
                          {
                            if (v439 != 8)
                            {
                              if (v439 == 68)
                                goto LABEL_885;
LABEL_933:
                              result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v306 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
LABEL_613:
                              *(_QWORD *)(a1 + 8) = v4;
                              *(_QWORD *)(a1 + 16) = v306;
LABEL_3:
                              *(_DWORD *)(a1 + 24) = 1;
                              goto LABEL_948;
                            }
                            WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableUpdatingStatement((uint64_t)&v528, a2);
                            if ((_DWORD)v530)
                            {
                              if ((_DWORD)v530 != 1)
                                goto LABEL_990;
                              result = v528;
                              if (v528)
                              {
                                *(_DWORD *)v528 += 2;
                                *(_OWORD *)(a1 + 8) = v529;
                                *(_QWORD *)a1 = result;
                                *(_DWORD *)(a1 + 24) = 1;
                                v528 = 0;
                                v424 = *(_DWORD *)result - 2;
                                if (*(_DWORD *)result == 2)
                                  goto LABEL_855;
LABEL_905:
                                *(_DWORD *)result = v424;
                                goto LABEL_948;
                              }
LABEL_987:
                              v472 = v529;
LABEL_988:
                              *(_OWORD *)(a1 + 8) = v472;
                              *(_QWORD *)a1 = 0;
                              goto LABEL_3;
                            }
                            v515 = v528;
                            v466 = *(_DWORD *)(a2 + 56);
                            if (v466 != 68)
                            {
                              WGSL::toString(68);
                              WGSL::toString(v466);
                              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v518, (uint64_t *)&v514);
                              v467 = v514;
                              v514 = 0;
                              if (v467)
                              {
                                if (*v467 == 2)
                                  WTF::StringImpl::destroy();
                                else
                                  *v467 -= 2;
                              }
                              result = v518;
                              v518 = 0;
                              if (!result)
                                goto LABEL_605;
LABEL_602:
                              if (*(_DWORD *)result == 2)
                                result = (WTF *)WTF::StringImpl::destroy();
                              else
                                *(_DWORD *)result -= 2;
                              goto LABEL_605;
                            }
LABEL_885:
                            v442 = *(_DWORD *)(a2 + 36);
                            v443 = *(_DWORD *)(a2 + 40) + 1;
                            while (2)
                            {
                              *(_DWORD *)(a2 + 40) = v443;
                              if (v442 <= v443)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1824FA5CCLL);
                              }
                              v445 = *(_QWORD *)(a2 + 24);
                              v446 = v445 + 32 * v443;
                              v447 = *(_DWORD *)v446;
                              *(_DWORD *)(a2 + 56) = *(_DWORD *)v446;
                              *v65 = *(_OWORD *)(v446 + 4);
                              v448 = *(_DWORD *)v446;
                              if (v448 <= 8)
                              {
                                if (((1 << v448) & 0x38) != 0)
                                {
                                  v449 = *(_DWORD **)(v445 + 32 * v443 + 24);
                                  goto LABEL_896;
                                }
                                if (((1 << v448) & 0xC4) != 0)
                                {
                                  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v445 + 32 * v443 + 24);
                                }
                                else if (v448 == 8)
                                {
                                  *(_QWORD *)(a2 + 80) = 0;
                                  v449 = *(_DWORD **)(v445 + 32 * v443 + 24);
                                  if (v449)
                                    *v449 += 2;
LABEL_896:
                                  *(_QWORD *)(a2 + 80) = v449;
                                }
                              }
                              v444 = *(_DWORD *)(a2 + 68);
                              *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                              *(_DWORD *)(a2 + 96) = v444;
                              ++v443;
                              if (v447 != 82)
                              {
                                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseCompoundStatement(&v528, a2);
                                v62 = v530;
                                if (!(_DWORD)v530)
                                {
                                  v462 = *(_QWORD **)(a2 + 8);
                                  v463 = *(_DWORD *)(a2 + 96) - v5;
                                  *(_QWORD *)v523 = v4;
                                  *(_DWORD *)&v523[8] = v5;
                                  *(_DWORD *)&v523[12] = v463;
                                  *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::ForStatement,WGSL::SourceSpan,WGSL::AST::Statement *&,WGSL::AST::Expression *&,WGSL::AST::Statement *&,std::reference_wrapper<WGSL::AST::CompoundStatement>,void>(v462, v523, (uint64_t *)&v538, (uint64_t *)&v533, (uint64_t *)&v515, &v528);
                                  *(_DWORD *)(a1 + 24) = 0;
                                  goto LABEL_957;
                                }
                                if ((_DWORD)v530 == 1)
                                {
                                  v453 = v528;
                                  if (v528)
                                    *(_DWORD *)v528 += 2;
                                  *(_OWORD *)(a1 + 8) = v529;
                                  *(_QWORD *)a1 = v453;
                                  *(_DWORD *)(a1 + 24) = 1;
LABEL_957:
                                  v64 = off_1E0FD7628;
LABEL_590:
                                  v156 = v64[v62];
LABEL_946:
                                  v420 = (WTF **)v523;
                                  v421 = &v528;
LABEL_947:
                                  result = (WTF *)((uint64_t (*)(WTF **, WTF **))v156)(v420, v421);
                                  goto LABEL_948;
                                }
LABEL_990:
                                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_991:
                                __break(0xC471u);
                                JUMPOUT(0x1824FA4F4);
                              }
                              continue;
                            }
                          }
                          continue;
                        }
                      }
                    }
                    v433 = *(_DWORD **)(v430 + v428 + 24);
LABEL_869:
                    *(_QWORD *)(a2 + 80) = v433;
                    goto LABEL_860;
                  }
                  WGSL::toString(73);
                  WGSL::toString(v425);
                  v528 = (WTF *)"Expected a ";
                  *(_QWORD *)&v529 = 12;
                  *(_QWORD *)v523 = ", but got a ";
                  *(_QWORD *)&v523[8] = 13;
                  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v522, (uint64_t)v523, (uint64_t *)&v521, &v541);
                  if (!v541)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824FA64CLL);
                  }
                  v450 = v521;
                  v521 = 0;
                  if (v450)
                  {
                    if (*v450 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v450 -= 2;
                  }
                  result = v522;
                  v522 = 0;
                  if (result)
                    goto LABEL_608;
                  break;
                case 9:
                case 10:
                case 11:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                  goto LABEL_933;
                case 13:
                case 26:
                case 34:
                  *(_QWORD *)v523 = 0;
                  *(_QWORD *)&v523[8] = 0;
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableWithAttributes((uint64_t)&v528, a2, (uint64_t *)v523);
                  if (*(_QWORD *)v523)
                    WTF::fastFree(*(WTF **)v523, v165);
                  if ((_DWORD)v530)
                  {
                    if ((_DWORD)v530 != 1)
                      goto LABEL_990;
                    result = v528;
                    if (!v528)
                      goto LABEL_987;
                    goto LABEL_904;
                  }
                  v316 = *(_QWORD **)(a2 + 8);
                  v317 = *(_DWORD *)(a2 + 96) - v5;
                  *(_QWORD *)v523 = v4;
                  *(_DWORD *)&v523[8] = v5;
                  *(_DWORD *)&v523[12] = v317;
                  v538 = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Variable>,void>(v316, v523, &v528);
                  if ((_DWORD)v530 != -1)
                    ((void (*)(_BYTE *, WTF **))off_1E0FD7040[v530])(v523, &v528);
                  goto LABEL_857;
                default:
                  if (v147 != 73)
                    goto LABEL_933;
                  goto LABEL_858;
              }
LABEL_611:
              v304 = (*(_DWORD *)(a2 + 96) - v5);
              v305 = v541;
LABEL_612:
              v306 = v5 | (v304 << 32);
              *(_QWORD *)a1 = v305;
              goto LABEL_613;
            }
          }
          v149 = (_DWORD *)*v145;
LABEL_249:
          *(_QWORD *)(a2 + 80) = v149;
          goto LABEL_240;
        }
      }
      v73 = *(_DWORD **)(v69 + 32 * v67 + 24);
LABEL_107:
      *(_QWORD *)(a2 + 80) = v73;
      goto LABEL_98;
    case 0x19:
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(&v528, a2);
      if ((_DWORD)v530)
      {
        if ((_DWORD)v530 != 1)
          goto LABEL_990;
        v60 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)(a1 + 8) = v529;
        *(_QWORD *)a1 = v60;
        v61 = 1;
        *(_DWORD *)(a1 + 24) = 1;
      }
      else
      {
        result = (WTF *)WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIfStatementWithAttributes(a1, a2, (uint64_t *)&v528, v4, v5);
        v61 = v530;
        if ((_DWORD)v530 == -1)
          goto LABEL_948;
      }
      v156 = off_1E0FD7638[v61];
      goto LABEL_946;
    case 0x1B:
      v86 = (_OWORD *)(a2 + 60);
      v87 = *(_DWORD *)(a2 + 36);
      v88 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v88;
        if (v87 <= v88)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA504);
        }
        v90 = *(_QWORD *)(a2 + 24);
        v91 = v90 + 32 * v88;
        v92 = *(_DWORD *)v91;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v91;
        *v86 = *(_OWORD *)(v91 + 4);
        v93 = *(_DWORD *)v91;
        if (v93 > 8)
          goto LABEL_132;
        if (((1 << v93) & 0x38) != 0)
          break;
        if (((1 << v93) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v90 + 32 * v88 + 24);
        }
        else if (v93 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v94 = *(_DWORD **)(v90 + 32 * v88 + 24);
          if (v94)
            *v94 += 2;
          goto LABEL_141;
        }
LABEL_132:
        v89 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v89;
        ++v88;
        if (v92 != 82)
        {
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(&v538, a2);
          if (v540)
          {
            if (v540 != 1)
              goto LABEL_990;
            v150 = v538;
            if (v538)
              *(_DWORD *)v538 += 2;
            *(_OWORD *)(a1 + 8) = v539;
            *(_QWORD *)a1 = v150;
            v151 = 1;
            *(_DWORD *)(a1 + 24) = 1;
LABEL_793:
            result = (WTF *)((uint64_t (*)(WTF **, WTF **))off_1E0FD7638[v151])(&v528, &v538);
            goto LABEL_948;
          }
          v178 = *(_DWORD *)(a2 + 56);
          if (v178 != 43)
          {
            WGSL::toString(43);
            WGSL::toString(v178);
            v528 = (WTF *)"Expected a ";
            *(_QWORD *)&v529 = 12;
            *(_QWORD *)v523 = ", but got a ";
            *(_QWORD *)&v523[8] = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v515, (uint64_t)v523, (uint64_t *)&v541, &v533);
            if (!v533)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA614);
            }
            v196 = v541;
            v541 = 0;
            if (v196)
            {
              if (*(_DWORD *)v196 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v196 -= 2;
            }
            v398 = v515;
            v515 = 0;
            if (v398)
            {
              if (*(_DWORD *)v398 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v398 -= 2;
            }
            v151 = 0;
            v399 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v533;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v399;
            *(_DWORD *)(a1 + 24) = 1;
            goto LABEL_793;
          }
          v179 = *(_DWORD *)(a2 + 36);
          v180 = *(_DWORD *)(a2 + 40) + 1;
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v180;
            if (v179 <= v180)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA594);
            }
            v182 = *(_QWORD *)(a2 + 24);
            v183 = v182 + 32 * v180;
            v184 = *(_DWORD *)v183;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v183;
            *v86 = *(_OWORD *)(v183 + 4);
            v185 = *(_DWORD *)v183;
            if (v185 <= 8)
            {
              if (((1 << v185) & 0x38) != 0)
              {
                v186 = *(_DWORD **)(v182 + 32 * v180 + 24);
                goto LABEL_339;
              }
              if (((1 << v185) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v182 + 32 * v180 + 24);
              }
              else if (v185 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v186 = *(_DWORD **)(v182 + 32 * v180 + 24);
                if (v186)
                  *v186 += 2;
LABEL_339:
                *(_QWORD *)(a2 + 80) = v186;
              }
            }
            v181 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v181;
            ++v180;
            if (v184 == 82)
              continue;
            break;
          }
          v486 = 0;
          v199 = (_OWORD *)(a1 + 8);
          v536 = 0;
          v537 = 0;
          LOBYTE(v528) = 0;
          v200 = HIDWORD(v4);
          v532 = 0;
          while (2)
          {
            while (2)
            {
              v202 = *(_DWORD *)(a2 + 56);
              if (v202 != 16)
              {
                if (v202 != 44)
                {
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseStatement(v523, a2);
                  v203 = (int)v524;
                  if ((_DWORD)v524)
                  {
                    if ((_DWORD)v524 != 1)
                      goto LABEL_990;
                    v204 = *(_QWORD *)v523;
                    if (*(_QWORD *)v523)
                      **(_DWORD **)v523 += 2;
                    *v199 = *(_OWORD *)&v523[8];
                    *(_QWORD *)a1 = v204;
                    *(_DWORD *)(a1 + 24) = 1;
                    v205 = v524;
                    if ((_DWORD)v524 == -1)
                    {
LABEL_381:
                      if (v203)
                      {
LABEL_774:
                        if (v486)
                        {
                          if (*((_QWORD *)&v529 + 1))
                            WTF::fastFree(*((WTF **)&v529 + 1), v201);
                          if (v528)
                            WTF::fastFree(v528, v201);
                        }
                        result = v536;
                        if (v536)
                        {
                          v536 = 0;
                          LODWORD(v537) = 0;
                          result = (WTF *)WTF::fastFree(result, v201);
                        }
                        v151 = v540;
                        if (v540 == -1)
                          goto LABEL_948;
                        goto LABEL_793;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    v206 = HIDWORD(v537);
                    if (HIDWORD(v537) == (_DWORD)v537)
                    {
                      v207 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v536, HIDWORD(v537) + 1, (unint64_t)v523);
                      v206 = HIDWORD(v537);
                      v208 = v536;
                      v209 = *v207;
                    }
                    else
                    {
                      v208 = v536;
                      v209 = *(_QWORD *)v523;
                    }
                    *((_QWORD *)v208 + v206) = v209;
                    ++HIDWORD(v537);
                    v205 = v524;
                    if ((_DWORD)v524 == -1)
                      goto LABEL_381;
                  }
                  ((void (*)(const char **, _BYTE *))off_1E0FD75E8[v205])(&v533, v523);
                  goto LABEL_381;
                }
                v389 = *(_DWORD *)(a2 + 36);
                v390 = *(_DWORD *)(a2 + 40) + 1;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v390;
                  if (v389 <= v390)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824FA5ACLL);
                  }
                  v392 = *(_QWORD *)(a2 + 24);
                  v393 = v392 + 32 * v390;
                  v394 = *(_DWORD *)v393;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v393;
                  *v86 = *(_OWORD *)(v393 + 4);
                  v395 = *(_DWORD *)v393;
                  if (v395 <= 8)
                  {
                    if (((1 << v395) & 0x38) != 0)
                    {
                      v396 = *(_DWORD **)(v392 + 32 * v390 + 24);
                      goto LABEL_772;
                    }
                    if (((1 << v395) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v392 + 32 * v390 + 24);
                    }
                    else if (v395 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v396 = *(_DWORD **)(v392 + 32 * v390 + 24);
                      if (v396)
                        *v396 += 2;
LABEL_772:
                      *(_QWORD *)(a2 + 80) = v396;
                    }
                  }
                  v391 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v391;
                  ++v390;
                  if (v394 != 82)
                  {
                    v397 = *(_QWORD **)(a2 + 8);
                    *(_DWORD *)v523 = v4;
                    *(_DWORD *)&v523[4] = v200;
                    *(_DWORD *)&v523[8] = v5;
                    *(_DWORD *)&v523[12] = v391 - v5;
                    *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::LoopStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,std::optional<WGSL::AST::Continuing>,void>(v397, v523, (uint64_t *)&v538, (uint64_t *)&v536, (uint64_t *)&v528);
                    *(_DWORD *)(a1 + 24) = 0;
                    v486 = v532;
                    goto LABEL_774;
                  }
                  continue;
                }
              }
              break;
            }
            v210 = *(_DWORD *)(a2 + 36);
            v211 = *(_DWORD *)(a2 + 40) + 1;
LABEL_398:
            *(_DWORD *)(a2 + 40) = v211;
            if (v210 <= v211)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA59CLL);
            }
            v213 = *(_QWORD *)(a2 + 24);
            v214 = v213 + 32 * v211;
            v215 = *(_DWORD *)v214;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v214;
            *v86 = *(_OWORD *)(v214 + 4);
            v216 = *(_DWORD *)v214;
            if (v216 <= 8)
            {
              if (((1 << v216) & 0x38) != 0)
              {
                v217 = *(_DWORD **)(v213 + 32 * v211 + 24);
                goto LABEL_406;
              }
              if (((1 << v216) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v213 + 32 * v211 + 24);
              }
              else if (v216 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v217 = *(_DWORD **)(v213 + 32 * v211 + 24);
                if (v217)
                  *v217 += 2;
LABEL_406:
                *(_QWORD *)(a2 + 80) = v217;
              }
            }
            v212 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v212;
            ++v211;
            if (v215 != 82)
            {
              v526 = 0;
              v527 = 0;
              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(&v533, a2);
              if (v535)
              {
                if (v535 != 1)
                  goto LABEL_990;
                v218 = v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                v219 = 0;
                *v199 = v534;
                *(_QWORD *)a1 = v218;
                *(_DWORD *)(a1 + 24) = 1;
                v220 = v535;
                if (v535 == -1)
                  goto LABEL_413;
                goto LABEL_412;
              }
              if (*(_DWORD *)(a2 + 56) != 43)
              {
                *(_DWORD *)v523 = *(_DWORD *)(a2 + 56);
                v525 = 1;
                WGSL::toString(43);
                if (v525 != 1)
                  goto LABEL_990;
                WGSL::toString(*(int *)v523);
                v515 = (WTF *)"Expected a ";
                *(_QWORD *)&v516 = 12;
                v541 = ", but got a ";
                v542 = 13;
                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v515, (uint64_t *)&v521, (uint64_t)&v541, (uint64_t *)&v520, &v522);
                if (!v522)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824FA624);
                }
                v265 = v520;
                v520 = 0;
                if (v265)
                {
                  if (*(_DWORD *)v265 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *(_DWORD *)v265 -= 2;
                }
                v270 = v521;
                v521 = 0;
                if (!v270)
                  goto LABEL_516;
                goto LABEL_513;
              }
              *(_OWORD *)&v523[4] = *v86;
              *(_DWORD *)v523 = 43;
              v525 = 0;
              v222 = *(_DWORD *)(a2 + 36);
              v223 = *(_DWORD *)(a2 + 40) + 1;
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v223;
                if (v222 <= v223)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824FA5DCLL);
                }
                v225 = *(_QWORD *)(a2 + 24);
                v226 = v225 + 32 * v223;
                v227 = *(_DWORD *)v226;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v226;
                *v86 = *(_OWORD *)(v226 + 4);
                v228 = *(_DWORD *)v226;
                if (v228 <= 8)
                {
                  if (((1 << v228) & 0x38) != 0)
                  {
                    v229 = *(_DWORD **)(v225 + 32 * v223 + 24);
                    goto LABEL_429;
                  }
                  if (((1 << v228) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v225 + 32 * v223 + 24);
                  }
                  else if (v228 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v229 = *(_DWORD **)(v225 + 32 * v223 + 24);
                    if (v229)
                      *v229 += 2;
LABEL_429:
                    *(_QWORD *)(a2 + 80) = v229;
                  }
                }
                v224 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v224;
                ++v223;
                if (v227 == 82)
                  continue;
                break;
              }
LABEL_431:
              v230 = *(_DWORD *)(a2 + 56);
              if (v230 != 11)
                goto LABEL_432;
              while (2)
              {
                v259 = *(_DWORD *)(a2 + 36);
                v240 = *(_DWORD *)(a2 + 40);
                v238 = 32 * (v240 + 1);
                v239 = v240 + 2;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = ++v240;
                  if (v259 <= v240)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824FA5F4);
                  }
                  v241 = v239;
                  v242 = *(_QWORD *)(a2 + 24);
                  v243 = *(_DWORD *)(v242 + v238);
                  *(_DWORD *)(a2 + 56) = v243;
                  *v86 = *(_OWORD *)(v242 + v238 + 4);
                  v244 = *(_DWORD *)(v242 + v238);
                  if (v244 <= 8)
                  {
                    if (((1 << v244) & 0x38) != 0)
                    {
                      v245 = *(_DWORD **)(v242 + v238 + 24);
                      goto LABEL_454;
                    }
                    if (((1 << v244) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v242 + v238 + 24);
                    }
                    else if (v244 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v245 = *(_DWORD **)(v242 + v238 + 24);
                      if (v245)
                        *v245 += 2;
LABEL_454:
                      *(_QWORD *)(a2 + 80) = v245;
                    }
                  }
                  v237 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v237;
                  v238 += 32;
                  v239 = v241 + 1;
                  if (v243 == 82)
                    continue;
                  break;
                }
                if (v243 != 25)
                {
                  if (v243 != 73)
                  {
                    *(_DWORD *)v523 = v243;
                    v525 = 1;
                    WGSL::toString(73);
                    if (v525 != 1)
                      goto LABEL_990;
                    WGSL::toString(*(int *)v523);
                    v515 = (WTF *)"Expected a ";
                    *(_QWORD *)&v516 = 12;
                    v541 = ", but got a ";
                    v542 = 13;
                    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v515, (uint64_t *)&v519, (uint64_t)&v541, (uint64_t *)&v518, &v522);
                    if (!v522)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824FA63CLL);
                    }
                    v292 = v518;
                    v518 = 0;
                    if (v292)
                    {
                      if (*(_DWORD *)v292 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *(_DWORD *)v292 -= 2;
                    }
                    v270 = v519;
                    v519 = 0;
                    if (v270)
                      goto LABEL_513;
LABEL_516:
                    v271 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                    *(_QWORD *)a1 = v522;
                    *(_QWORD *)(a1 + 8) = v4;
                    *(_QWORD *)(a1 + 16) = v271;
                    *(_DWORD *)(a1 + 24) = 1;
                    if (v525 != -1)
                      ((void (*)(WTF **, _BYTE *))off_1E0FD6FF8[v525])(&v515, v523);
                    goto LABEL_539;
                  }
                  *(_OWORD *)&v523[4] = *v86;
                  *(_DWORD *)v523 = 73;
                  v525 = 0;
LABEL_460:
                  *(_DWORD *)(a2 + 40) = v241;
                  if (v259 <= v241)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824FA5FCLL);
                  }
                  v247 = v242 + 32 * v241;
                  v248 = *(_DWORD *)v247;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v247;
                  *v86 = *(_OWORD *)(v247 + 4);
                  v249 = *(_DWORD *)v247;
                  if (v249 <= 8)
                  {
                    if (((1 << v249) & 0x38) != 0)
                    {
                      v250 = *(_DWORD **)(v242 + 32 * v241 + 24);
                      goto LABEL_468;
                    }
                    if (((1 << v249) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v242 + 32 * v241 + 24);
                    }
                    else if (v249 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v250 = *(_DWORD **)(v242 + 32 * v241 + 24);
                      if (v250)
                        *v250 += 2;
LABEL_468:
                      *(_QWORD *)(a2 + 80) = v250;
                    }
                  }
                  v246 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v246;
                  ++v241;
                  if (v248 != 82)
                  {
                    v251 = *(_QWORD **)(a2 + 8);
                    *(_DWORD *)v523 = v4;
                    *(_DWORD *)&v523[4] = v200;
                    *(_DWORD *)&v523[8] = v5;
                    *(_DWORD *)&v523[12] = v246 - v5;
                    v252 = WGSL::AST::Builder::construct<WGSL::AST::BreakStatement,WGSL::SourceSpan,void>(v251, v523);
                    v253 = HIDWORD(v527);
                    if (HIDWORD(v527) == (_DWORD)v527)
                    {
                      v478 = v252;
                      v481 = v200;
                      v254 = HIDWORD(v527) + ((unint64_t)HIDWORD(v527) >> 2);
                      if (v254 >= 0x10)
                        v255 = v254 + 1;
                      else
                        v255 = 16;
                      if (v255 <= (unint64_t)HIDWORD(v527) + 1)
                        v256 = HIDWORD(v527) + 1;
                      else
                        v256 = v255;
                      if (v256 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824FA61CLL);
                      }
                      __src = v526;
                      v257 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v256));
                      LODWORD(v527) = v256;
                      v526 = v257;
                      memcpy(v257, __src, 8 * v253);
                      v200 = v481;
                      if (__src)
                      {
                        if (v526 == __src)
                        {
                          v526 = 0;
                          LODWORD(v527) = 0;
                        }
                        WTF::fastFree((WTF *)__src, v201);
                      }
                      LODWORD(v253) = HIDWORD(v527);
                      v258 = &v526[2 * HIDWORD(v527)];
                      v252 = v478;
                    }
                    else
                    {
                      v258 = &v526[2 * HIDWORD(v527)];
                    }
                    *v258 = v252;
                    HIDWORD(v527) = v253 + 1;
                    v230 = *(_DWORD *)(a2 + 56);
                    if (v230 == 11)
                      continue;
LABEL_432:
                    if (v230 == 44)
                    {
                      v479 = 0;
                      goto LABEL_545;
                    }
                    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseStatement(v523, a2);
                    v231 = (int)v524;
                    if ((_DWORD)v524)
                    {
                      if ((_DWORD)v524 != 1)
                        goto LABEL_990;
                      v232 = *(_QWORD *)v523;
                      if (*(_QWORD *)v523)
                        **(_DWORD **)v523 += 2;
                      *v199 = *(_OWORD *)&v523[8];
                      *(_QWORD *)a1 = v232;
                      *(_DWORD *)(a1 + 24) = 1;
                    }
                    else
                    {
                      v233 = HIDWORD(v527);
                      if (HIDWORD(v527) == (_DWORD)v527)
                      {
                        v234 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v526, HIDWORD(v527) + 1, (unint64_t)v523);
                        v233 = HIDWORD(v527);
                        v235 = (uint64_t)v526;
                        v236 = *v234;
                      }
                      else
                      {
                        v235 = (uint64_t)v526;
                        v236 = *(_QWORD *)v523;
                      }
                      *(_QWORD *)(v235 + 8 * v233) = v236;
                      ++HIDWORD(v527);
                    }
                    if ((_DWORD)v524 != -1)
                      ((void (*)(WTF **, _BYTE *))off_1E0FD75E8[v524])(&v515, v523);
                    if (!v231)
                      goto LABEL_431;
LABEL_539:
                    v219 = 0;
                    v220 = v535;
                    if (v535 != -1)
                      goto LABEL_412;
                    goto LABEL_413;
                  }
                  goto LABEL_460;
                }
                break;
              }
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v241;
                if (v259 <= v241)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824FA604);
                }
                v261 = v242 + 32 * v241;
                v262 = *(_DWORD *)v261;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v261;
                *v86 = *(_OWORD *)(v261 + 4);
                v263 = *(_DWORD *)v261;
                if (v263 <= 8)
                {
                  if (((1 << v263) & 0x38) != 0)
                  {
                    v264 = *(_DWORD **)(v242 + 32 * v241 + 24);
                    goto LABEL_495;
                  }
                  if (((1 << v263) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v242 + 32 * v241 + 24);
                  }
                  else if (v263 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v264 = *(_DWORD **)(v242 + 32 * v241 + 24);
                    if (v264)
                      *v264 += 2;
LABEL_495:
                    *(_QWORD *)(a2 + 80) = v264;
                  }
                }
                v260 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v260;
                ++v241;
                if (v262 == 82)
                  continue;
                break;
              }
              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v515, a2);
              if (!v517)
              {
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)v523, a2, 73);
                v268 = v525;
                v482 = v200;
                if (v525)
                {
                  WGSL::toString(73);
                  if (v525 != 1)
                    goto LABEL_990;
                  WGSL::toString(*(int *)v523);
                  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v541, (uint64_t *)&v514, (uint64_t *)&v513);
                  v269 = v513;
                  v513 = 0;
                  if (v269)
                  {
                    if (*v269 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v269 -= 2;
                  }
                  v274 = v514;
                  v514 = 0;
                  if (v274)
                  {
                    if (*v274 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v274 -= 2;
                  }
                  v272 = v268;
                  v275 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                  *(_QWORD *)a1 = v541;
                  *(_QWORD *)(a1 + 8) = v4;
                  *(_QWORD *)(a1 + 16) = v275;
                  v267 = 1;
                  *(_DWORD *)(a1 + 24) = 1;
                  v273 = v525;
                  if (v525 == -1)
                  {
                    v479 = 0;
LABEL_529:
                    v200 = v482;
                    goto LABEL_530;
                  }
                }
                else
                {
                  v272 = 0;
                  v273 = 0;
                  v267 = 13;
                }
                ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v273])(&v541, v523);
                v276 = v515;
                if (v272)
                  v276 = 0;
                v479 = v276;
                goto LABEL_529;
              }
              if (v517 != 1)
                goto LABEL_990;
              v266 = v515;
              if (v515)
                *(_DWORD *)v515 += 2;
              v479 = 0;
              *v199 = v516;
              *(_QWORD *)a1 = v266;
              v267 = 1;
              *(_DWORD *)(a1 + 24) = 1;
LABEL_530:
              if (v517 != -1)
                ((void (*)(_BYTE *, WTF **))off_1E0FD71D8[v517])(v523, &v515);
              if (v267 != 13)
                goto LABEL_539;
              if (*(_DWORD *)(a2 + 56) != 44)
              {
                *(_DWORD *)v523 = *(_DWORD *)(a2 + 56);
                v525 = 1;
                WGSL::toString(44);
                if (v525 != 1)
                  goto LABEL_990;
                WGSL::toString(*(int *)v523);
                v515 = (WTF *)"Expected a ";
                *(_QWORD *)&v516 = 12;
                v541 = ", but got a ";
                v542 = 13;
                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v515, (uint64_t *)&v512, (uint64_t)&v541, (uint64_t *)&v511, &v522);
                if (!v522)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824FA62CLL);
                }
                v277 = v511;
                v511 = 0;
                if (v277)
                {
                  if (*v277 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v277 -= 2;
                }
                v270 = v512;
                v512 = 0;
                if (!v270)
                  goto LABEL_516;
LABEL_513:
                if (*v270 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v270 -= 2;
                goto LABEL_516;
              }
LABEL_545:
              *(_OWORD *)&v523[4] = *v86;
              *(_DWORD *)v523 = 44;
              v525 = 0;
              v278 = *(_DWORD *)(a2 + 36);
              v279 = *(_DWORD *)(a2 + 40) + 1;
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v279;
                if (v278 <= v279)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824FA634);
                }
                v281 = *(_QWORD *)(a2 + 24);
                v282 = v281 + 32 * v279;
                v283 = *(_DWORD *)v282;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v282;
                *v86 = *(_OWORD *)(v282 + 4);
                v284 = *(_DWORD *)v282;
                if (v284 <= 8)
                {
                  if (((1 << v284) & 0x38) != 0)
                  {
                    v285 = *(_DWORD **)(v281 + 32 * v279 + 24);
                    goto LABEL_556;
                  }
                  if (((1 << v284) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v281 + 32 * v279 + 24);
                  }
                  else if (v284 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v285 = *(_DWORD **)(v281 + 32 * v279 + 24);
                    if (v285)
                      *v285 += 2;
LABEL_556:
                    *(_QWORD *)(a2 + 80) = v285;
                  }
                }
                v280 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v280;
                ++v279;
                if (v283 == 82)
                  continue;
                break;
              }
              v286 = (WTF *)v526;
              v526 = 0;
              v288 = v527;
              v287 = HIDWORD(v527);
              v527 = 0;
              v289 = v533;
              v533 = 0;
              v291 = v534;
              v290 = DWORD1(v534);
              *(_QWORD *)&v534 = 0;
              if (v486)
              {
                v473 = __PAIR64__(v287, v288);
                v474 = v286;
                __srca = v291;
                v487 = v290;
                if (v528)
                  WTF::fastFree(v528, v201);
                v528 = v474;
                *(_QWORD *)&v529 = v473;
                if (v475)
                  WTF::fastFree(v475, v201);
                *((_QWORD *)&v529 + 1) = v289;
                v530 = __PAIR64__(v487, __srca);
                v486 = 1;
                v475 = (WTF *)v289;
                v219 = 1;
                v531 = v479;
                v220 = v535;
                if (v535 == -1)
                  goto LABEL_413;
LABEL_412:
                ((void (*)(_BYTE *, const char **))off_1E0FD7638[v220])(v523, &v533);
              }
              else
              {
                v528 = v286;
                *(_QWORD *)&v529 = __PAIR64__(v287, v288);
                *((_QWORD *)&v529 + 1) = v289;
                v530 = __PAIR64__(v290, v291);
                v531 = v479;
                v475 = (WTF *)v289;
                v219 = 1;
                v486 = 1;
                v532 = 1;
                v220 = v535;
                if (v535 != -1)
                  goto LABEL_412;
              }
LABEL_413:
              v221 = (WTF *)v526;
              if (v526)
              {
                v526 = 0;
                LODWORD(v527) = 0;
                WTF::fastFree(v221, v201);
              }
              if ((v219 & 1) == 0)
                goto LABEL_774;
              continue;
            }
            goto LABEL_398;
          }
        }
      }
      v94 = *(_DWORD **)(v90 + 32 * v88 + 24);
LABEL_141:
      *(_QWORD *)(a2 + 80) = v94;
      goto LABEL_132;
    case 0x1E:
      v43 = *(_DWORD *)(a2 + 36);
      v44 = *(_DWORD *)(a2 + 40) + 1;
      v45 = 32 * v44;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v44;
        if (v43 <= v44)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA534);
        }
        v47 = *(_QWORD *)(a2 + 24);
        v48 = *(_DWORD *)(v47 + v45);
        *(_DWORD *)(a2 + 56) = v48;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v47 + v45 + 4);
        v49 = *(_DWORD *)(v47 + v45);
        if (v49 > 8)
          goto LABEL_64;
        if (((1 << v49) & 0x38) != 0)
          break;
        if (((1 << v49) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v47 + v45 + 24);
        }
        else if (v49 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v50 = *(_DWORD **)(v47 + v45 + 24);
          if (v50)
            *v50 += 2;
          goto LABEL_73;
        }
LABEL_64:
        v46 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v46;
        v45 += 32;
        ++v44;
        if (v48 != 82)
        {
          if (v48 == 73)
          {
            v121 = *(_QWORD **)(a2 + 8);
            v528 = (WTF *)v4;
            LODWORD(v529) = v5;
            DWORD1(v529) = v46 - v5;
            v122 = WGSL::AST::Builder::construct<WGSL::AST::ReturnStatement,WGSL::SourceSpan,decltype(nullptr),void>(v121, &v528);
            *(_QWORD *)v523 = v122;
            LODWORD(v524) = 0;
LABEL_361:
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v528, a2, 73);
            v194 = (int)v531;
            if ((_DWORD)v531)
            {
              WGSL::toString(73);
              if (v194 != 1)
                goto LABEL_990;
              WGSL::toString((int)v528);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v538, (uint64_t *)&v510, (uint64_t *)&v509);
              v195 = v509;
              v509 = 0;
              if (v195)
              {
                if (*v195 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v195 -= 2;
              }
              v307 = v510;
              v510 = 0;
              if (v307)
              {
                if (*v307 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v307 -= 2;
              }
              v159 = 0;
              v308 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
              *(_QWORD *)a1 = v538;
              *(_QWORD *)(a1 + 8) = v4;
              *(_QWORD *)(a1 + 16) = v308;
              *(_DWORD *)(a1 + 24) = 1;
            }
            else
            {
              if ((_DWORD)v528 == 8 && v530)
              {
                if (*(_DWORD *)v530 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v530 -= 2;
              }
              v159 = 0;
              *(_QWORD *)a1 = v122;
              *(_DWORD *)(a1 + 24) = 0;
            }
          }
          else
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v528, a2);
            v157 = v530;
            if (!(_DWORD)v530)
            {
              v192 = *(_QWORD **)(a2 + 8);
              v193 = *(_DWORD *)(a2 + 96) - v5;
              v538 = (WTF *)v4;
              *(_QWORD *)&v539 = __PAIR64__(v193, v5);
              v533 = (const char *)v528;
              v122 = WGSL::AST::Builder::construct<WGSL::AST::ReturnStatement,WGSL::SourceSpan,WGSL::AST::Expression *,void>(v192, &v538, (uint64_t *)&v533);
              *(_QWORD *)v523 = v122;
              LODWORD(v524) = 0;
              ((void (*)(WTF **, WTF **))off_1E0FD71D8[v157])(&v538, &v528);
              goto LABEL_361;
            }
            if ((_DWORD)v530 != 1)
              goto LABEL_990;
            v158 = v528;
            if (v528)
              *(_DWORD *)v528 += 2;
            *(_OWORD *)&v523[8] = v529;
            *(_QWORD *)v523 = v158;
            v159 = 1;
            LODWORD(v524) = 1;
            ((void (*)(WTF **, WTF **))off_1E0FD71D8[v157])(&v538, &v528);
            if (v158)
              *(_DWORD *)v158 += 2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
            *(_QWORD *)a1 = v158;
            *(_DWORD *)(a1 + 24) = 1;
          }
          v156 = off_1E0FD75E8[v159];
LABEL_842:
          v420 = &v528;
          v421 = (WTF **)v523;
          goto LABEL_947;
        }
      }
      v50 = *(_DWORD **)(v47 + v45 + 24);
LABEL_73:
      *(_QWORD *)(a2 + 80) = v50;
      goto LABEL_64;
    case 0x20:
      v34 = (_OWORD *)(a2 + 60);
      v35 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v36;
        if (v35 <= v36)
          goto LABEL_991;
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v38 + 32 * v36;
        v40 = *(_DWORD *)v39;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v39;
        *v34 = *(_OWORD *)(v39 + 4);
        v41 = *(_DWORD *)v39;
        if (v41 > 8)
          goto LABEL_52;
        if (((1 << v41) & 0x38) != 0)
          break;
        if (((1 << v41) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v38 + 32 * v36 + 24);
        }
        else if (v41 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
          if (v42)
            *v42 += 2;
          goto LABEL_61;
        }
LABEL_52:
        v37 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v37;
        ++v36;
        if (v40 != 82)
        {
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v528, a2);
          if ((_DWORD)v530)
          {
            if ((_DWORD)v530 != 1)
              goto LABEL_990;
            v143 = v528;
            if (v528)
              *(_DWORD *)v528 += 2;
            *(_OWORD *)(a1 + 8) = v529;
            *(_QWORD *)a1 = v143;
            v144 = 1;
            *(_DWORD *)(a1 + 24) = 1;
            goto LABEL_945;
          }
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseAttributes(v523, a2);
          if ((_DWORD)v524)
          {
            if ((_DWORD)v524 != 1)
              goto LABEL_990;
            v176 = *(_QWORD *)v523;
            if (*(_QWORD *)v523)
              **(_DWORD **)v523 += 2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
            *(_QWORD *)a1 = v176;
            v177 = 1;
            *(_DWORD *)(a1 + 24) = 1;
            goto LABEL_943;
          }
          v293 = *(_DWORD *)(a2 + 56);
          if (v293 != 43)
          {
            WGSL::toString(43);
            WGSL::toString(v293);
            v538 = (WTF *)"Expected a ";
            *(_QWORD *)&v539 = 12;
            v533 = ", but got a ";
            *(_QWORD *)&v534 = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v538, (uint64_t *)&v541, (uint64_t)&v533, (uint64_t *)&v536, &v515);
            if (!v515)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA644);
            }
            v318 = v536;
            v536 = 0;
            if (v318)
            {
              if (*(_DWORD *)v318 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v318 -= 2;
            }
            v422 = v541;
            v541 = 0;
            if (v422)
            {
              if (*(_DWORD *)v422 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v422 -= 2;
            }
            v177 = 0;
            v423 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v515;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v423;
            *(_DWORD *)(a1 + 24) = 1;
            goto LABEL_943;
          }
          v294 = *(_DWORD *)(a2 + 36);
          v295 = *(_DWORD *)(a2 + 40) + 1;
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v295;
            if (v294 <= v295)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA5A4);
            }
            v297 = *(_QWORD *)(a2 + 24);
            v298 = v297 + 32 * v295;
            v299 = *(_DWORD *)v298;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v298;
            *v34 = *(_OWORD *)(v298 + 4);
            v300 = *(_DWORD *)v298;
            if (v300 <= 8)
            {
              if (((1 << v300) & 0x38) != 0)
              {
                v301 = *(_DWORD **)(v297 + 32 * v295 + 24);
                goto LABEL_586;
              }
              if (((1 << v300) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v297 + 32 * v295 + 24);
              }
              else if (v300 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v301 = *(_DWORD **)(v297 + 32 * v295 + 24);
                if (v301)
                  *v301 += 2;
LABEL_586:
                *(_QWORD *)(a2 + 80) = v301;
              }
            }
            v296 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v296;
            ++v295;
            if (v299 == 82)
              continue;
            break;
          }
          v480 = 0;
          v319 = 0;
          v485 = 0;
          v541 = 0;
          v542 = 0;
          v483 = (_OWORD *)(a1 + 8);
          LOBYTE(v538) = 0;
          LOBYTE(v540) = 0;
          while (2)
          {
            v320 = *(_DWORD *)(a2 + 56);
            if (v320 != 44)
            {
              v536 = 0;
              v537 = 0;
              if (v320 != 17)
              {
                if (v320 != 12)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v338 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                  *(_QWORD *)(a1 + 8) = v4;
                  *(_QWORD *)(a1 + 16) = v338;
                  v339 = 1;
                  *(_DWORD *)(a1 + 24) = 1;
                  goto LABEL_752;
                }
                v321 = *(_DWORD *)(a2 + 36);
                v322 = *(_DWORD *)(a2 + 40) + 1;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v322;
                  if (v321 <= v322)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824FA524);
                  }
                  v324 = *(_QWORD *)(a2 + 24);
                  v325 = v324 + 32 * v322;
                  v326 = *(_DWORD *)v325;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v325;
                  *v34 = *(_OWORD *)(v325 + 4);
                  v327 = *(_DWORD *)v325;
                  if (v327 <= 8)
                  {
                    if (((1 << v327) & 0x38) != 0)
                    {
                      v328 = *(_DWORD **)(v324 + 32 * v322 + 24);
                      goto LABEL_656;
                    }
                    if (((1 << v327) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v324 + 32 * v322 + 24);
                    }
                    else if (v327 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v328 = *(_DWORD **)(v324 + 32 * v322 + 24);
                      if (v328)
                        *v328 += 2;
LABEL_656:
                      *(_QWORD *)(a2 + 80) = v328;
                    }
                  }
                  v323 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v323;
                  ++v322;
                  if (v326 == 82)
                    continue;
                  break;
                }
                v484 = 0;
                v490 = 0;
                v340 = 0;
                v488 = v319;
LABEL_671:
                if (v326 == 17)
                {
                  v341 = *(_DWORD *)(a2 + 36);
                  v342 = *(_DWORD *)(a2 + 40) + 1;
                  while (1)
                  {
                    *(_DWORD *)(a2 + 40) = v342;
                    if (v341 <= v342)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824FA57CLL);
                    }
                    v344 = *(_QWORD *)(a2 + 24);
                    v345 = v344 + 32 * v342;
                    v346 = *(_DWORD *)v345;
                    *(_DWORD *)(a2 + 56) = *(_DWORD *)v345;
                    *v34 = *(_OWORD *)(v345 + 4);
                    v347 = *(_DWORD *)v345;
                    if (v347 > 8)
                      goto LABEL_674;
                    if (((1 << v347) & 0x38) != 0)
                      break;
                    if (((1 << v347) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v344 + 32 * v342 + 24);
                    }
                    else if (v347 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v348 = *(_DWORD **)(v344 + 32 * v342 + 24);
                      if (v348)
                        *v348 += 2;
                      goto LABEL_683;
                    }
LABEL_674:
                    v343 = *(_DWORD *)(a2 + 68);
                    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                    *(_DWORD *)(a2 + 96) = v343;
                    ++v342;
                    if (v346 != 82)
                    {
                      v340 = 1;
                      goto LABEL_696;
                    }
                  }
                  v348 = *(_DWORD **)(v344 + 32 * v342 + 24);
LABEL_683:
                  *(_QWORD *)(a2 + 80) = v348;
                  goto LABEL_674;
                }
                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v533, a2);
                v349 = v535;
                if (v535)
                {
                  if (v535 != 1)
                    goto LABEL_990;
                  v350 = v533;
                  if (v533)
                    *(_DWORD *)v533 += 2;
                  *v483 = v534;
                  *(_QWORD *)a1 = v350;
                  *(_DWORD *)(a1 + 24) = 1;
                }
                else
                {
                  v351 = v490;
                  if (v490 == (_DWORD)v537)
                  {
                    v352 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v536, v490 + 1, (unint64_t)&v533);
                    v353 = HIDWORD(v537);
                    v484 = v536;
                    *((_QWORD *)v536 + HIDWORD(v537)) = *v352;
                    v490 = v353 + 1;
                    HIDWORD(v537) = v353 + 1;
                  }
                  else
                  {
                    *((_QWORD *)v484 + v490++) = v533;
                    HIDWORD(v537) = v351 + 1;
                  }
                }
                if (v535 != -1)
                  ((void (*)(WTF **, const char **))off_1E0FD71D8[v535])(&v515, &v533);
                ++v485;
                if (v349)
                {
                  v339 = 1;
                  v319 = v488;
                  goto LABEL_752;
                }
LABEL_696:
                v326 = *(_DWORD *)(a2 + 56);
                if (v326 != 48)
                {
                  v319 = v488;
                  if ((v340 & 1) != 0)
                    goto LABEL_715;
LABEL_712:
                  v361 = 0;
                  goto LABEL_719;
                }
                v354 = *(_DWORD *)(a2 + 36);
                v355 = (*(_DWORD *)(a2 + 40) + 1);
                v356 = 32 * v355;
                v319 = v488;
LABEL_700:
                *(_DWORD *)(a2 + 40) = v355;
                if (v354 <= v355)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824FA58CLL);
                }
                v358 = *(_QWORD *)(a2 + 24);
                v326 = *(_DWORD *)(v358 + v356);
                *(_DWORD *)(a2 + 56) = v326;
                *v34 = *(_OWORD *)(v358 + v356 + 4);
                v359 = *(_DWORD *)(v358 + v356);
                if (v359 <= 8)
                {
                  if (((1 << v359) & 0x38) != 0)
                  {
                    v360 = *(_DWORD **)(v358 + v356 + 24);
                    goto LABEL_708;
                  }
                  if (((1 << v359) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v358 + v356 + 24);
                  }
                  else if (v359 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v360 = *(_DWORD **)(v358 + v356 + 24);
                    if (v360)
                      *v360 += 2;
LABEL_708:
                    *(_QWORD *)(a2 + 80) = v360;
                  }
                }
                v357 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v357;
                v356 += 32;
                LODWORD(v355) = v355 + 1;
                if (v326 != 82)
                {
                  if (v326 == 43 || v326 == 47)
                  {
                    if ((v340 & 1) == 0)
                      goto LABEL_712;
LABEL_715:
                    v362 = v490;
LABEL_716:
                    if (v319)
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v363 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                      *(_QWORD *)a1 = v533;
                      *(_QWORD *)(a1 + 8) = v4;
                      *(_QWORD *)(a1 + 16) = v363;
                      v319 = 1;
                      *(_DWORD *)(a1 + 24) = 1;
                      v339 = 1;
                      goto LABEL_752;
                    }
                    v490 = v362;
                    v326 = *(_DWORD *)(a2 + 56);
                    v361 = 1;
LABEL_719:
                    if (v326 != 47)
                    {
LABEL_732:
                      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseCompoundStatement(&v533, a2);
                      if (v535)
                      {
                        if (v535 != 1)
                          goto LABEL_990;
                        v372 = v533;
                        if (v533)
                          *(_DWORD *)v533 += 2;
                        *v483 = v534;
                        *(_QWORD *)a1 = v372;
                        v339 = 1;
                        *(_DWORD *)(a1 + 24) = 1;
                        v373 = v535;
                        if (v535 != -1)
                          goto LABEL_751;
                      }
                      else
                      {
                        if (v361)
                        {
                          v374 = v536;
                          v375 = v537;
                          v536 = 0;
                          v537 = 0;
                          v376 = v533;
                          if (v480)
                          {
                            if (v538)
                            {
                              v489 = v533;
                              WTF::fastFree(v538, v337);
                              v376 = v489;
                            }
                            v538 = v374;
                            *(_QWORD *)&v539 = __PAIR64__(v490, v375);
                            v480 = 1;
                            v319 = 1;
                            *((_QWORD *)&v539 + 1) = v376;
                          }
                          else
                          {
                            v538 = v374;
                            *(_QWORD *)&v539 = __PAIR64__(v490, v375);
                            *((_QWORD *)&v539 + 1) = v533;
                            v319 = 1;
                            v480 = 1;
                            LOBYTE(v540) = 1;
                          }
                        }
                        else
                        {
                          v515 = v536;
                          v377 = v537;
                          v536 = 0;
                          v537 = 0;
                          *(_QWORD *)&v516 = __PAIR64__(v490, v377);
                          *((_QWORD *)&v516 + 1) = v533;
                          v378 = HIDWORD(v542);
                          if (HIDWORD(v542) == (_DWORD)v542)
                          {
                            v379 = WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v541, HIDWORD(v542) + 1, (unint64_t)&v515);
                            v378 = HIDWORD(v542);
                            v380 = (char *)&v541[24 * HIDWORD(v542)];
                            *(_QWORD *)v380 = 0;
                            *((_QWORD *)v380 + 1) = 0;
                            v381 = *(_QWORD *)v379;
                            *(_QWORD *)v379 = 0;
                            *(_QWORD *)v380 = v381;
                            LODWORD(v381) = *(_DWORD *)(v379 + 8);
                            *(_DWORD *)(v379 + 8) = 0;
                            *((_DWORD *)v380 + 2) = v381;
                            LODWORD(v381) = *(_DWORD *)(v379 + 12);
                            *(_DWORD *)(v379 + 12) = 0;
                            *((_DWORD *)v380 + 3) = v381;
                            v382 = v380 + 16;
                            v383 = (_QWORD *)(v379 + 16);
                          }
                          else
                          {
                            v384 = (char *)&v541[24 * HIDWORD(v542)];
                            *(_QWORD *)v384 = 0;
                            *((_QWORD *)v384 + 1) = 0;
                            v385 = v515;
                            v515 = 0;
                            *(_QWORD *)v384 = v385;
                            *((_DWORD *)v384 + 2) = v516;
                            LODWORD(v385) = DWORD1(v516);
                            DWORD1(v516) = 0;
                            *((_DWORD *)v384 + 3) = (_DWORD)v385;
                            v382 = v384 + 16;
                            v383 = (_QWORD *)&v516 + 1;
                          }
                          *v382 = *v383;
                          HIDWORD(v542) = v378 + 1;
                          v386 = v515;
                          if (v515)
                          {
                            v515 = 0;
                            LODWORD(v516) = 0;
                            WTF::fastFree(v386, v337);
                          }
                        }
                        if (v485 < 0x400)
                        {
                          v339 = 0;
                          v373 = v535;
                          if (v535 == -1)
                            goto LABEL_752;
LABEL_751:
                          ((void (*)(WTF **, const char **))off_1E0FD7628[v373])(&v515, &v533);
                          goto LABEL_752;
                        }
                        WTF::String::number((WTF::String *)0x3FF);
                        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"switch statement cannot have more than ", 40, (uint64_t *)&v526, (int8x16_t *)" case selector values", 22, &v515);
                        v387 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                        *(_QWORD *)a1 = v515;
                        *(_QWORD *)(a1 + 8) = v4;
                        *(_QWORD *)(a1 + 16) = v387;
                        *(_DWORD *)(a1 + 24) = 1;
                        v515 = 0;
                        v388 = v526;
                        v526 = 0;
                        if (v388)
                        {
                          if (*v388 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *v388 -= 2;
                        }
                        v339 = 1;
                        v373 = v535;
                        if (v535 != -1)
                          goto LABEL_751;
                      }
LABEL_752:
                      result = v536;
                      if (v536)
                      {
                        v536 = 0;
                        result = (WTF *)WTF::fastFree(result, v337);
                      }
                      if (v339)
                      {
LABEL_828:
                        if (v480)
                        {
                          result = v538;
                          if (v538)
                            result = (WTF *)WTF::fastFree(v538, v337);
                        }
                        goto LABEL_935;
                      }
                      continue;
                    }
                    v364 = *(_DWORD *)(a2 + 36);
                    v365 = *(_DWORD *)(a2 + 40) + 1;
                    while (2)
                    {
                      *(_DWORD *)(a2 + 40) = v365;
                      if (v364 <= v365)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824FA584);
                      }
                      v367 = *(_QWORD *)(a2 + 24);
                      v368 = v367 + 32 * v365;
                      v369 = *(_DWORD *)v368;
                      *(_DWORD *)(a2 + 56) = *(_DWORD *)v368;
                      *v34 = *(_OWORD *)(v368 + 4);
                      v370 = *(_DWORD *)v368;
                      if (v370 <= 8)
                      {
                        if (((1 << v370) & 0x38) != 0)
                        {
                          v371 = *(_DWORD **)(v367 + 32 * v365 + 24);
                          goto LABEL_731;
                        }
                        if (((1 << v370) & 0xC4) != 0)
                        {
                          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v367 + 32 * v365 + 24);
                        }
                        else if (v370 == 8)
                        {
                          *(_QWORD *)(a2 + 80) = 0;
                          v371 = *(_DWORD **)(v367 + 32 * v365 + 24);
                          if (v371)
                            *v371 += 2;
LABEL_731:
                          *(_QWORD *)(a2 + 80) = v371;
                        }
                      }
                      v366 = *(_DWORD *)(a2 + 68);
                      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                      *(_DWORD *)(a2 + 96) = v366;
                      ++v365;
                      if (v369 != 82)
                        goto LABEL_732;
                      continue;
                    }
                  }
                  goto LABEL_671;
                }
                goto LABEL_700;
              }
              v329 = *(_DWORD *)(a2 + 36);
              v330 = *(_DWORD *)(a2 + 40) + 1;
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v330;
                if (v329 <= v330)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824FA52CLL);
                }
                v332 = *(_QWORD *)(a2 + 24);
                v333 = v332 + 32 * v330;
                v334 = *(_DWORD *)v333;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v333;
                *v34 = *(_OWORD *)(v333 + 4);
                v335 = *(_DWORD *)v333;
                if (v335 <= 8)
                {
                  if (((1 << v335) & 0x38) != 0)
                  {
                    v336 = *(_DWORD **)(v332 + 32 * v330 + 24);
                    goto LABEL_668;
                  }
                  if (((1 << v335) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v332 + 32 * v330 + 24);
                  }
                  else if (v335 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v336 = *(_DWORD **)(v332 + 32 * v330 + 24);
                    if (v336)
                      *v336 += 2;
LABEL_668:
                    *(_QWORD *)(a2 + 80) = v336;
                  }
                }
                v331 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v331;
                ++v330;
                if (v334 != 82)
                {
                  v362 = 0;
                  goto LABEL_716;
                }
                continue;
              }
            }
            break;
          }
          v409 = *(_DWORD *)(a2 + 36);
          v410 = *(_DWORD *)(a2 + 40) + 1;
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v410;
            if (v409 <= v410)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA5C4);
            }
            v412 = *(_QWORD *)(a2 + 24);
            v413 = v412 + 32 * v410;
            v414 = *(_DWORD *)v413;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v413;
            *v34 = *(_OWORD *)(v413 + 4);
            v415 = *(_DWORD *)v413;
            if (v415 <= 8)
            {
              if (((1 << v415) & 0x38) != 0)
              {
                v416 = *(_DWORD **)(v412 + 32 * v410 + 24);
                goto LABEL_825;
              }
              if (((1 << v415) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v412 + 32 * v410 + 24);
              }
              else if (v415 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v416 = *(_DWORD **)(v412 + 32 * v410 + 24);
                if (v416)
                  *v416 += 2;
LABEL_825:
                *(_QWORD *)(a2 + 80) = v416;
              }
            }
            v411 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v411;
            ++v410;
            if (v414 != 82)
            {
              if (v480)
              {
                v417 = *(_QWORD **)(a2 + 8);
                v533 = (const char *)v4;
                LODWORD(v534) = v5;
                DWORD1(v534) = v411 - v5;
                result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::SwitchStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WGSL::AST::SwitchClause,void>(v417, &v533, (uint64_t *)&v528, (uint64_t *)v523, (uint64_t *)&v541, (uint64_t *)&v538);
                *(_QWORD *)a1 = result;
                *(_DWORD *)(a1 + 24) = 0;
                v480 = v540;
                goto LABEL_828;
              }
              result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
              v456 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
              *(_QWORD *)a1 = v533;
              *(_QWORD *)(a1 + 8) = v4;
              *(_QWORD *)(a1 + 16) = v456;
              *(_DWORD *)(a1 + 24) = 1;
LABEL_935:
              v457 = (WTF *)v541;
              if (HIDWORD(v542))
              {
                v458 = 24 * HIDWORD(v542);
                v459 = v541;
                do
                {
                  result = *(WTF **)v459;
                  if (*(_QWORD *)v459)
                  {
                    *(_QWORD *)v459 = 0;
                    *((_DWORD *)v459 + 2) = 0;
                    result = (WTF *)WTF::fastFree(result, v337);
                  }
                  v459 += 24;
                  v458 -= 24;
                }
                while (v458);
              }
              if (v457)
                result = (WTF *)WTF::fastFree(v457, v337);
              v177 = (int)v524;
              if ((_DWORD)v524 != -1)
LABEL_943:
                result = (WTF *)((uint64_t (*)(WTF **, _BYTE *))off_1E0FD7638[v177])(&v538, v523);
              v144 = v530;
              if ((_DWORD)v530 == -1)
                goto LABEL_948;
LABEL_945:
              v156 = off_1E0FD71D8[v144];
              goto LABEL_946;
            }
            continue;
          }
        }
      }
      v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
LABEL_61:
      *(_QWORD *)(a2 + 80) = v42;
      goto LABEL_52;
    case 0x23:
      v104 = *(_DWORD *)(a2 + 36);
      v105 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v105;
        if (v104 <= v105)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA50CLL);
        }
        v107 = *(_QWORD *)(a2 + 24);
        v108 = v107 + 32 * v105;
        v109 = *(_DWORD *)v108;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v108;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v108 + 4);
        v110 = *(_DWORD *)v108;
        if (v110 > 8)
          goto LABEL_156;
        if (((1 << v110) & 0x38) != 0)
          break;
        if (((1 << v110) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v107 + 32 * v105 + 24);
        }
        else if (v110 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v111 = *(_DWORD **)(v107 + 32 * v105 + 24);
          if (v111)
            *v111 += 2;
          goto LABEL_165;
        }
LABEL_156:
        v106 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v106;
        ++v105;
        if (v109 != 82)
        {
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v528, a2);
          v62 = v530;
          if ((_DWORD)v530)
          {
            if ((_DWORD)v530 != 1)
              goto LABEL_990;
            v152 = v528;
            if (v528)
              *(_DWORD *)v528 += 2;
            *(_OWORD *)(a1 + 8) = v529;
            *(_QWORD *)a1 = v152;
            *(_DWORD *)(a1 + 24) = 1;
          }
          else
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::parseCompoundStatement(v523, a2);
            v187 = v524;
            if ((_DWORD)v524)
            {
              if ((_DWORD)v524 != 1)
                goto LABEL_990;
              v188 = *(_QWORD *)v523;
              if (*(_QWORD *)v523)
                **(_DWORD **)v523 += 2;
              *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
              *(_QWORD *)a1 = v188;
              *(_DWORD *)(a1 + 24) = 1;
            }
            else
            {
              v302 = *(_QWORD **)(a2 + 8);
              v303 = *(_DWORD *)(a2 + 96) - v5;
              v538 = (WTF *)v4;
              *(_QWORD *)&v539 = __PAIR64__(v303, v5);
              *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::WhileStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::CompoundStatement>,void>(v302, &v538, &v528, v523);
              *(_DWORD *)(a1 + 24) = 0;
            }
            ((void (*)(WTF **, _BYTE *))off_1E0FD7628[v187])(&v538, v523);
          }
          v64 = off_1E0FD71D8;
          goto LABEL_590;
        }
      }
      v111 = *(_DWORD **)(v107 + 32 * v105 + 24);
LABEL_165:
      *(_QWORD *)(a2 + 80) = v111;
      goto LABEL_156;
    case 0x24:
    case 0x43:
    case 0x4C:
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseLHSExpression((uint64_t)&v528, a2);
      if ((_DWORD)v530)
      {
        if ((_DWORD)v530 != 1)
          goto LABEL_990;
        v12 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)&v523[8] = v529;
        *(_QWORD *)v523 = v12;
        v13 = 1;
        LODWORD(v524) = 1;
      }
      else
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableUpdatingStatement((uint64_t)v523, a2, &v528);
        v13 = v530;
        if ((_DWORD)v530 == -1)
        {
LABEL_32:
          v23 = (int)v524;
          if ((_DWORD)v524)
          {
            if ((_DWORD)v524 != 1)
              goto LABEL_990;
            v24 = *(_QWORD *)v523;
            if (*(_QWORD *)v523)
              **(_DWORD **)v523 += 2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
LABEL_270:
            *(_QWORD *)a1 = v24;
            *(_DWORD *)(a1 + 24) = v23;
LABEL_271:
            v156 = off_1E0FD75E8[v23];
            goto LABEL_842;
          }
          v25 = *(_DWORD *)(a2 + 56);
          if (v25 != 73)
          {
            WGSL::toString(73);
            WGSL::toString(v25);
            v528 = (WTF *)"Expected a ";
            *(_QWORD *)&v529 = 12;
            v538 = (WTF *)", but got a ";
            *(_QWORD *)&v539 = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v502, (uint64_t)&v538, (uint64_t *)&v501, &v533);
            if (!v533)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA5ECLL);
            }
            v155 = v501;
            v501 = 0;
            if (v155)
            {
              if (*v155 == 2)
                WTF::StringImpl::destroy();
              else
                *v155 -= 2;
            }
            result = v502;
            v502 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF *)WTF::StringImpl::destroy();
              else
                *(_DWORD *)result -= 2;
            }
            v191 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v533;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v191;
            *(_DWORD *)(a1 + 24) = 1;
            v23 = (int)v524;
            if ((_DWORD)v524 == -1)
              goto LABEL_948;
            goto LABEL_271;
          }
          v26 = *(_DWORD *)(a2 + 36);
          v27 = *(_DWORD *)(a2 + 40) + 1;
          while (1)
          {
            *(_DWORD *)(a2 + 40) = v27;
            if (v26 <= v27)
            {
              __break(0xC471u);
              JUMPOUT(0x1824FA51CLL);
            }
            v29 = *(_QWORD *)(a2 + 24);
            v30 = v29 + 32 * v27;
            v31 = *(_DWORD *)v30;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v30;
            *(_OWORD *)(a2 + 60) = *(_OWORD *)(v30 + 4);
            v32 = *(_DWORD *)v30;
            if (v32 > 8)
              goto LABEL_40;
            if (((1 << v32) & 0x38) != 0)
              break;
            if (((1 << v32) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v29 + 32 * v27 + 24);
            }
            else if (v32 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v33 = *(_DWORD **)(v29 + 32 * v27 + 24);
              if (v33)
                *v33 += 2;
              goto LABEL_49;
            }
LABEL_40:
            v28 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v28;
            ++v27;
            if (v31 != 82)
            {
              v24 = *(_QWORD *)v523;
              goto LABEL_270;
            }
          }
          v33 = *(_DWORD **)(v29 + 32 * v27 + 24);
LABEL_49:
          *(_QWORD *)(a2 + 80) = v33;
          goto LABEL_40;
        }
      }
      ((void (*)(WTF **, WTF **))off_1E0FD71D8[v13])(&v538, &v528);
      goto LABEL_32;
    case 0x2B:
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseCompoundStatement(&v528, a2);
      v74 = v530;
      if ((_DWORD)v530)
      {
        if ((_DWORD)v530 != 1)
          goto LABEL_990;
        v75 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)(a1 + 8) = v529;
      }
      else
      {
        v75 = v528;
      }
      *(_QWORD *)a1 = v75;
      *(_DWORD *)(a1 + 24) = v74;
      v173 = off_1E0FD7628;
      goto LABEL_808;
    case 0x4F:
      v112 = *(_DWORD *)(a2 + 36);
      v113 = (_OWORD *)(a2 + 60);
      v114 = *(_DWORD *)(a2 + 40) + 1;
      v115 = 32 * v114;
      break;
    default:
      goto LABEL_2;
  }
  while (1)
  {
    *(_DWORD *)(a2 + 40) = v114;
    if (v112 <= v114)
    {
      __break(0xC471u);
      JUMPOUT(0x1824FA554);
    }
    v117 = *(_QWORD *)(a2 + 24);
    v118 = *(_DWORD *)(v117 + v115);
    *(_DWORD *)(a2 + 56) = v118;
    *v113 = *(_OWORD *)(v117 + v115 + 4);
    v119 = *(_DWORD *)(v117 + v115);
    if (v119 > 8)
      goto LABEL_168;
    if (((1 << v119) & 0x38) != 0)
      break;
    if (((1 << v119) & 0xC4) != 0)
    {
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v117 + v115 + 24);
    }
    else if (v119 == 8)
    {
      *(_QWORD *)(a2 + 80) = 0;
      v120 = *(_DWORD **)(v117 + v115 + 24);
      if (v120)
        *v120 += 2;
      goto LABEL_177;
    }
LABEL_168:
    v116 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v116;
    ++v114;
    v115 += 32;
    if (v118 != 82)
    {
      if (v118 != 49)
      {
        WGSL::toString(49);
        WGSL::toString(v118);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v494, (uint64_t *)&v493);
        v163 = v493;
        v493 = 0;
        if (v163)
        {
          if (*v163 == 2)
            WTF::StringImpl::destroy();
          else
            *v163 -= 2;
        }
        result = v494;
        v494 = 0;
        if (result)
          goto LABEL_602;
LABEL_605:
        v304 = (*(_DWORD *)(a2 + 96) - v5);
        v305 = (const char *)v528;
        goto LABEL_612;
      }
      while (2)
      {
        *(_DWORD *)(a2 + 40) = v114;
        if (v112 <= v114)
        {
          __break(0xC471u);
          JUMPOUT(0x1824FA574);
        }
        v139 = v117 + 32 * v114;
        v140 = *(_DWORD *)v139;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v139;
        *v113 = *(_OWORD *)(v139 + 4);
        v141 = *(_DWORD *)v139;
        if (v141 <= 8)
        {
          if (((1 << v141) & 0x38) != 0)
          {
            v142 = *(_DWORD **)(v117 + 32 * v114 + 24);
            goto LABEL_231;
          }
          if (((1 << v141) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v117 + 32 * v114 + 24);
          }
          else if (v141 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v142 = *(_DWORD **)(v117 + 32 * v114 + 24);
            if (v142)
              *v142 += 2;
LABEL_231:
            *(_QWORD *)(a2 + 80) = v142;
          }
        }
        v138 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v138;
        ++v114;
        if (v140 != 82)
        {
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)v523, a2);
          v169 = v524;
          if ((_DWORD)v524)
          {
            if ((_DWORD)v524 != 1)
              goto LABEL_990;
            v170 = *(_QWORD *)v523;
            if (*(_QWORD *)v523)
              **(_DWORD **)v523 += 2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
            *(_QWORD *)a1 = v170;
            goto LABEL_837;
          }
          WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v528, a2, 73);
          v197 = (int)v531;
          if ((_DWORD)v531)
          {
            WGSL::toString(73);
            if (v197 != 1)
              goto LABEL_990;
            WGSL::toString((int)v528);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v538, (uint64_t *)&v492, (uint64_t *)&v491);
            v198 = v491;
            v491 = 0;
            if (v198)
            {
              if (*v198 == 2)
                WTF::StringImpl::destroy();
              else
                *v198 -= 2;
            }
            v418 = v492;
            v492 = 0;
            if (v418)
            {
              if (*v418 == 2)
                WTF::StringImpl::destroy();
              else
                *v418 -= 2;
            }
            v419 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v538;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v419;
LABEL_837:
            *(_DWORD *)(a1 + 24) = 1;
          }
          else
          {
            if ((_DWORD)v528 == 8 && v530)
            {
              if (*(_DWORD *)v530 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v530 -= 2;
            }
            v464 = *(_QWORD **)(a2 + 8);
            v465 = *(_DWORD *)(a2 + 96) - v5;
            v528 = (WTF *)v4;
            *(_QWORD *)&v529 = __PAIR64__(v465, v5);
            *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::PhonyAssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v464, &v528, v523);
            *(_DWORD *)(a1 + 24) = 0;
          }
          v156 = off_1E0FD71D8[v169];
          goto LABEL_842;
        }
        continue;
      }
    }
  }
  v120 = *(_DWORD **)(v117 + v115 + 24);
LABEL_177:
  *(_QWORD *)(a2 + 80) = v120;
  goto LABEL_168;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Variable>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD38D0;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableUpdatingStatement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  unsigned int i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  __int128 v46;
  _DWORD *v47;
  __int128 v48;
  int v49;
  __int16 v50;

  v6 = *(_DWORD **)(a2 + 88);
  v7 = *(unsigned int *)(a2 + 96);
  v8 = *(_DWORD *)(a2 + 56);
  if (v8 == 71)
  {
    v9 = 257;
    goto LABEL_5;
  }
  if (v8 == 60)
  {
    v9 = 256;
LABEL_5:
    LOWORD(v46) = v9;
    v10 = *(_DWORD *)(a2 + 36);
    for (i = *(_DWORD *)(a2 + 40) + 1; ; ++i)
    {
      *(_DWORD *)(a2 + 40) = i;
      if (v10 <= i)
        goto LABEL_57;
      v13 = *(_QWORD *)(a2 + 24);
      v14 = v13 + 32 * i;
      v15 = *(_DWORD *)v14;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v14 + 4);
      v16 = *(_DWORD *)v14;
      if (v16 > 8)
        goto LABEL_7;
      if (((1 << v16) & 0x38) != 0)
        break;
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * i + 24);
      }
      else if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * i + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_16;
      }
LABEL_7:
      v12 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v12;
      if (v15 != 82)
      {
        v18 = *(_QWORD **)(a2 + 8);
        v47 = v6;
        LODWORD(v48) = v7;
        DWORD1(v48) = v12 - v7;
        result = (uint64_t)WGSL::AST::Builder::construct<WGSL::AST::DecrementIncrementStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::DecrementIncrementStatement::Operation &,void>(v18, &v47, a3, (char *)&v46);
        *(_QWORD *)a1 = result;
        *(_DWORD *)(a1 + 24) = 0;
        return result;
      }
    }
    v17 = *(_DWORD **)(v13 + 32 * i + 24);
LABEL_16:
    *(_QWORD *)(a2 + 80) = v17;
    goto LABEL_7;
  }
  v20 = (v8 - 38);
  if (v20 > 0x2B)
    goto LABEL_55;
  if (((1 << (v8 - 38)) & 0x8A412910001) == 0)
  {
    if (v20 == 11)
    {
      v35 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v36;
        if (v35 <= v36)
        {
          __break(0xC471u);
          goto LABEL_60;
        }
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v38 + 32 * v36;
        v40 = *(_DWORD *)v39;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v39;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v39 + 4);
        v41 = *(_DWORD *)v39;
        if (v41 <= 8)
        {
          if (((1 << v41) & 0x38) != 0)
          {
            v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
LABEL_52:
            *(_QWORD *)(a2 + 80) = v42;
            goto LABEL_43;
          }
          if (((1 << v41) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v38 + 32 * v36 + 24);
          }
          else if (v41 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
            if (v42)
              *v42 += 2;
            goto LABEL_52;
          }
        }
LABEL_43:
        v37 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v37;
        ++v36;
        if (v40 != 82)
        {
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v47, a2);
          v29 = v49;
          if (!v49)
          {
            v43 = *(_QWORD **)(a2 + 8);
            v44 = *(_DWORD *)(a2 + 96) - v7;
            *(_QWORD *)&v46 = v6;
            *((_QWORD *)&v46 + 1) = __PAIR64__(v44, v7);
            v34 = WGSL::AST::Builder::construct<WGSL::AST::AssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,void>(v43, &v46, a3, &v47);
            goto LABEL_38;
          }
LABEL_33:
          if (v29 == 1)
          {
            v30 = v47;
            if (v47)
              *v47 += 2;
            *(_OWORD *)(a1 + 8) = v48;
            *(_QWORD *)a1 = v30;
            v31 = 1;
            *(_DWORD *)(a1 + 24) = 1;
            return ((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v31])(&v46, &v47);
          }
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_57:
          __break(0xC471u);
LABEL_60:
          JUMPOUT(0x1824FAD48);
        }
      }
    }
LABEL_55:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v45 = v7 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v7) << 32);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v45;
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }
  v50 = WGSL::toBinaryOperation(v8) | 0x100;
  v21 = *(_DWORD *)(a2 + 36);
  v22 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v22;
    if (v21 <= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1824FAD50);
    }
    v24 = *(_QWORD *)(a2 + 24);
    v25 = v24 + 32 * v22;
    v26 = *(_DWORD *)v25;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v25;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v25 + 4);
    v27 = *(_DWORD *)v25;
    if (v27 <= 8)
    {
      if (((1 << v27) & 0x38) != 0)
      {
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
LABEL_31:
        *(_QWORD *)(a2 + 80) = v28;
        goto LABEL_22;
      }
      if (((1 << v27) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v24 + 32 * v22 + 24);
        goto LABEL_22;
      }
      if (v27 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
        if (v28)
          *v28 += 2;
        goto LABEL_31;
      }
    }
LABEL_22:
    v23 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v23;
    ++v22;
  }
  while (v26 == 82);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v47, a2);
  v29 = v49;
  if (v49)
    goto LABEL_33;
  v32 = *(_QWORD **)(a2 + 8);
  v33 = *(_DWORD *)(a2 + 96) - v7;
  *(_QWORD *)&v46 = v6;
  *((_QWORD *)&v46 + 1) = __PAIR64__(v33, v7);
  v34 = WGSL::AST::Builder::construct<WGSL::AST::CompoundAssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation &,void>(v32, &v46, a3, &v47, (char *)&v50);
LABEL_38:
  v31 = 0;
  *(_QWORD *)a1 = v34;
  *(_DWORD *)(a1 + 24) = 0;
  return ((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v31])(&v46, &v47);
}

uint64_t WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableUpdatingStatement(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  uint64_t result;
  _BOOL8 v7;
  _DWORD *v8;
  __int128 v9;
  int v10;
  char v11;

  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseLHSExpression((uint64_t)&v8, a2);
  if (v10)
  {
    if (v10 != 1)
    {
      v7 = std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::AST::Builder::construct<WGSL::AST::BreakStatement,WGSL::SourceSpan,void>((WGSL::AST::Builder *)v7);
    }
    v4 = v8;
    if (v8)
      *v8 += 2;
    *(_OWORD *)(a1 + 8) = v9;
    *(_QWORD *)a1 = v4;
    v5 = 1;
    *(_DWORD *)(a1 + 24) = 1;
  }
  else
  {
    result = WGSL::Parser<WGSL::Lexer<unsigned char>>::parseVariableUpdatingStatement(a1, a2, &v8);
    v5 = v10;
    if (v10 == -1)
      return result;
  }
  return ((uint64_t (*)(char *, _DWORD **))off_1E0FD71D8[v5])(&v11, &v8);
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::BreakStatement,WGSL::SourceSpan,void>(_QWORD *this, _OWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  v3 = this;
  v4 = *this;
  if (this[1] - *this <= 0x17uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v4 = *v3;
  }
  *(_OWORD *)(v4 + 8) = *a2;
  *(_QWORD *)v4 = &off_1E0FD7530;
  *v3 += 24;
  v5 = *((unsigned int *)v3 + 11);
  if ((_DWORD)v5 != *((_DWORD *)v3 + 10))
  {
    v12 = (_QWORD *)(v3[4] + 8 * v5);
LABEL_17:
    *v12 = v4;
    *((_DWORD *)v3 + 11) = v5 + 1;
    return (_QWORD *)v4;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (!(v8 >> 29))
  {
    v9 = (void *)v3[4];
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 10) = v8;
    v3[4] = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if ((void *)v3[4] == v9)
      {
        v3[4] = 0;
        *((_DWORD *)v3 + 10) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *((unsigned int *)v3 + 11);
    v12 = (_QWORD *)(v3[4] + 8 * v5);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ContinueStatement,WGSL::SourceSpan,void>(_QWORD *this, _OWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  v3 = this;
  v4 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v4 = *v3;
  }
  *(_OWORD *)(v4 + 8) = *a2;
  *(_QWORD *)v4 = &off_1E0FD7558;
  *(_BYTE *)(v4 + 24) = 0;
  *v3 += 32;
  v5 = *((unsigned int *)v3 + 11);
  if ((_DWORD)v5 != *((_DWORD *)v3 + 10))
  {
    v12 = (_QWORD *)(v3[4] + 8 * v5);
LABEL_17:
    *v12 = v4;
    *((_DWORD *)v3 + 11) = v5 + 1;
    return (_QWORD *)v4;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (!(v8 >> 29))
  {
    v9 = (void *)v3[4];
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 10) = v8;
    v3[4] = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if ((void *)v3[4] == v9)
      {
        v3[4] = 0;
        *((_DWORD *)v3 + 10) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *((unsigned int *)v3 + 11);
    v12 = (_QWORD *)(v3[4] + 8 * v5);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::DiscardStatement,WGSL::SourceSpan,void>(_QWORD *this, _OWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  v3 = this;
  v4 = *this;
  if (this[1] - *this <= 0x17uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v4 = *v3;
  }
  *(_OWORD *)(v4 + 8) = *a2;
  *(_QWORD *)v4 = &off_1E0FD7580;
  *v3 += 24;
  v5 = *((unsigned int *)v3 + 11);
  if ((_DWORD)v5 != *((_DWORD *)v3 + 10))
  {
    v12 = (_QWORD *)(v3[4] + 8 * v5);
LABEL_17:
    *v12 = v4;
    *((_DWORD *)v3 + 11) = v5 + 1;
    return (_QWORD *)v4;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (!(v8 >> 29))
  {
    v9 = (void *)v3[4];
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 10) = v8;
    v3[4] = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if ((void *)v3[4] == v9)
      {
        v3[4] = 0;
        *((_DWORD *)v3 + 10) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *((unsigned int *)v3 + 11);
    v12 = (_QWORD *)(v3[4] + 8 * v5);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::PhonyAssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD75A8;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ConstAssertStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::ConstAssert>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD75D0;
  *(_QWORD *)(v6 + 24) = *a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_DWORD *WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIfStatementWithAttributes(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  int v9;
  _OWORD *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *result;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  void *v35;
  int *v36;
  int v37;
  _QWORD *v38;
  unsigned int v39;
  WTF *v40[2];
  uint64_t v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  const char *v45;
  __int128 v46;
  unsigned int v47;
  const char *v48;
  __int128 v49;
  unsigned int v50;
  _DWORD *v51;
  _DWORD *v52;

  v9 = *(_DWORD *)(a2 + 56);
  if (v9 != 25)
  {
    WGSL::toString(25);
    WGSL::toString(v9);
    v48 = "Expected a ";
    *(_QWORD *)&v49 = 12;
    v45 = ", but got a ";
    *(_QWORD *)&v46 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v48, (uint64_t *)&v52, (uint64_t)&v45, (uint64_t *)&v51, &v41);
    if (!v41)
    {
      __break(0xC471u);
      goto LABEL_70;
    }
    v20 = v51;
    v51 = 0;
    if (v20)
    {
      if (*v20 == 2)
      {
        WTF::StringImpl::destroy();
        result = v52;
        v52 = 0;
        if (!result)
        {
LABEL_35:
          v26 = a5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - a5) << 32);
          *(_QWORD *)a1 = v41;
          *(_QWORD *)(a1 + 8) = a4;
          *(_QWORD *)(a1 + 16) = v26;
          *(_DWORD *)(a1 + 24) = 1;
          return result;
        }
LABEL_32:
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
        goto LABEL_35;
      }
      *v20 -= 2;
    }
    result = v52;
    v52 = 0;
    if (!result)
      goto LABEL_35;
    goto LABEL_32;
  }
  v11 = (_OWORD *)(a2 + 60);
  v12 = *(_DWORD *)(a2 + 36);
  v13 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v13;
    if (v12 <= v13)
      goto LABEL_67;
    v15 = *(_QWORD *)(a2 + 24);
    v16 = v15 + 32 * v13;
    v17 = *(_DWORD *)v16;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v16;
    *v11 = *(_OWORD *)(v16 + 4);
    v18 = *(_DWORD *)v16;
    if (v18 <= 8)
    {
      if (((1 << v18) & 0x38) != 0)
      {
        v19 = *(_DWORD **)(v15 + 32 * v13 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v19;
        goto LABEL_4;
      }
      if (((1 << v18) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v15 + 32 * v13 + 24);
        goto LABEL_4;
      }
      if (v18 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v19 = *(_DWORD **)(v15 + 32 * v13 + 24);
        if (v19)
          *v19 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v14 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v14;
    ++v13;
  }
  while (v17 == 82);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseExpression((uint64_t)&v48, a2);
  v22 = v50;
  if (v50)
  {
    if (v50 == 1)
    {
      v23 = v48;
      if (v48)
        *(_DWORD *)v48 += 2;
      *(_OWORD *)(a1 + 8) = v49;
      *(_QWORD *)a1 = v23;
      *(_DWORD *)(a1 + 24) = 1;
      return (_DWORD *)((uint64_t (*)(const char **, const char **))off_1E0FD71D8[v22])(&v45, &v48);
    }
    goto LABEL_66;
  }
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseCompoundStatement(&v45, a2);
  v24 = v47;
  if (v47)
  {
    if (v47 == 1)
    {
      v25 = v45;
      if (v45)
        *(_DWORD *)v45 += 2;
      *(_OWORD *)(a1 + 8) = v46;
      *(_QWORD *)a1 = v25;
LABEL_30:
      *(_DWORD *)(a1 + 24) = 1;
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  v44 = 0;
  if (*(_DWORD *)(a2 + 56) != 20)
  {
LABEL_62:
    v38 = *(_QWORD **)(a2 + 8);
    v39 = *(_DWORD *)(a2 + 96) - a5;
    v41 = a4;
    *(_QWORD *)&v42 = __PAIR64__(v39, a5);
    *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::IfStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::CompoundStatement>,WGSL::AST::Statement *&,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(v38, &v41, &v48, &v45, &v44, a3);
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_63;
  }
  v27 = *(_DWORD *)(a2 + 36);
  v28 = *(_DWORD *)(a2 + 40) + 1;
  v29 = 32 * v28;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v28;
    if (v27 <= v28)
    {
      __break(0xC471u);
      JUMPOUT(0x1824FB7E4);
    }
    v31 = *(_QWORD *)(a2 + 24);
    v32 = *(_DWORD *)(v31 + v29);
    *(_DWORD *)(a2 + 56) = v32;
    *v11 = *(_OWORD *)(v31 + v29 + 4);
    v33 = *(_DWORD *)(v31 + v29);
    if (v33 <= 8)
    {
      if (((1 << v33) & 0x38) != 0)
      {
        v34 = *(_DWORD **)(v31 + v29 + 24);
        goto LABEL_48;
      }
      if (((1 << v33) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v31 + v29 + 24);
      }
      else if (v33 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v34 = *(_DWORD **)(v31 + v29 + 24);
        if (v34)
          *v34 += 2;
LABEL_48:
        *(_QWORD *)(a2 + 80) = v34;
      }
    }
    v30 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v30;
    v29 += 32;
    ++v28;
    if (v32 == 82)
      continue;
    break;
  }
  if (v32 != 25)
  {
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseCompoundStatement(&v41, a2);
    if (!v43)
    {
LABEL_61:
      v44 = v41;
      goto LABEL_62;
    }
    if (v43 == 1)
    {
      v36 = (int *)v41;
      if (v41)
        goto LABEL_59;
LABEL_55:
      *(_OWORD *)(a1 + 8) = v42;
      *(_QWORD *)a1 = 0;
      goto LABEL_30;
    }
LABEL_66:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_67:
    __break(0xC471u);
LABEL_70:
    JUMPOUT(0x1824FB7DCLL);
  }
  v40[0] = 0;
  v40[1] = 0;
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIfStatementWithAttributes(&v41, a2, v40, a4, a5);
  if (v40[0])
    WTF::fastFree(v40[0], v35);
  if (!v43)
    goto LABEL_61;
  if (v43 != 1)
    goto LABEL_66;
  v36 = (int *)v41;
  if (!v41)
    goto LABEL_55;
LABEL_59:
  v37 = *v36;
  *v36 += 2;
  *(_OWORD *)(a1 + 8) = v42;
  *(_QWORD *)a1 = v36;
  *(_DWORD *)(a1 + 24) = 1;
  if (v37)
    *v36 = v37;
  else
    WTF::StringImpl::destroy();
LABEL_63:
  ((void (*)(uint64_t *, const char **))off_1E0FD7628[v24])(&v41, &v45);
  return (_DWORD *)((uint64_t (*)(const char **, const char **))off_1E0FD71D8[v22])(&v45, &v48);
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::IfStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::CompoundStatement>,WGSL::AST::Statement *&,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;

  v11 = this;
  v12 = *this;
  if (this[1] - *this <= 0x3FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v12 = *v11;
  }
  v13 = *a5;
  *(_OWORD *)(v12 + 8) = *a2;
  *(_QWORD *)v12 = &off_1E0FD45D8;
  *(_QWORD *)(v12 + 24) = *a3;
  *(_QWORD *)(v12 + 32) = *a4;
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  v14 = *a6;
  *a6 = 0;
  *(_QWORD *)(v12 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)a6 + 2);
  *((_DWORD *)a6 + 2) = 0;
  *(_DWORD *)(v12 + 56) = v14;
  LODWORD(v14) = *((_DWORD *)a6 + 3);
  *((_DWORD *)a6 + 3) = 0;
  *(_DWORD *)(v12 + 60) = v14;
  *v11 += 64;
  v15 = *((unsigned int *)v11 + 11);
  if ((_DWORD)v15 != *((_DWORD *)v11 + 10))
  {
    v22 = (_QWORD *)(v11[4] + 8 * v15);
LABEL_17:
    *v22 = v12;
    *((_DWORD *)v11 + 11) = v15 + 1;
    return (_QWORD *)v12;
  }
  v16 = v15 + (v15 >> 2);
  if (v16 >= 0x10)
    v17 = v16 + 1;
  else
    v17 = 16;
  if (v17 <= v15 + 1)
    v18 = v15 + 1;
  else
    v18 = v17;
  if (!(v18 >> 29))
  {
    v19 = (void *)v11[4];
    v20 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
    *((_DWORD *)v11 + 10) = v18;
    v11[4] = v20;
    memcpy(v20, v19, 8 * v15);
    if (v19)
    {
      if ((void *)v11[4] == v19)
      {
        v11[4] = 0;
        *((_DWORD *)v11 + 10) = 0;
      }
      WTF::fastFree((WTF *)v19, v21);
    }
    v15 = *((unsigned int *)v11 + 11);
    v22 = (_QWORD *)(v11[4] + 8 * v15);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ReturnStatement,WGSL::SourceSpan,decltype(nullptr),void>(_QWORD *this, _OWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  v3 = this;
  v4 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v4 = *v3;
  }
  *(_OWORD *)(v4 + 8) = *a2;
  *(_QWORD *)v4 = &off_1E0FD7468;
  *(_QWORD *)(v4 + 24) = 0;
  *v3 += 32;
  v5 = *((unsigned int *)v3 + 11);
  if ((_DWORD)v5 != *((_DWORD *)v3 + 10))
  {
    v12 = (_QWORD *)(v3[4] + 8 * v5);
LABEL_17:
    *v12 = v4;
    *((_DWORD *)v3 + 11) = v5 + 1;
    return (_QWORD *)v4;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (!(v8 >> 29))
  {
    v9 = (void *)v3[4];
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 10) = v8;
    v3[4] = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if ((void *)v3[4] == v9)
      {
        v3[4] = 0;
        *((_DWORD *)v3 + 10) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *((unsigned int *)v3 + 11);
    v12 = (_QWORD *)(v3[4] + 8 * v5);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ReturnStatement,WGSL::SourceSpan,WGSL::AST::Expression *,void>(_QWORD *this, _OWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD7468;
  *(_QWORD *)(v6 + 24) = v7;
  *v5 += 32;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::ReturnStatement::~ReturnStatement(WGSL::AST::ReturnStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::ReturnStatement::kind(WGSL::AST::ReturnStatement *this)
{
  return 51;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::DecrementIncrementStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::DecrementIncrementStatement::Operation &,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, char *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x27uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  v9 = *a4;
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)v8 = &off_1E0FD7490;
  *(_QWORD *)(v8 + 24) = *a3;
  *(_BYTE *)(v8 + 32) = v9;
  *v7 += 40;
  v10 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v10 != *((_DWORD *)v7 + 10))
  {
    v17 = (_QWORD *)(v7[4] + 8 * v10);
LABEL_17:
    *v17 = v8;
    *((_DWORD *)v7 + 11) = v10 + 1;
    return (_QWORD *)v8;
  }
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (void *)v7[4];
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v7 + 10) = v13;
    v7[4] = v15;
    memcpy(v15, v14, 8 * v10);
    if (v14)
    {
      if ((void *)v7[4] == v14)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
    v10 = *((unsigned int *)v7 + 11);
    v17 = (_QWORD *)(v7[4] + 8 * v10);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::CompoundAssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation &,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, _QWORD *a4, char *a5)
{
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;

  v9 = this;
  v10 = *this;
  if (this[1] - *this <= 0x2FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v10 = *v9;
  }
  v11 = *a5;
  *(_OWORD *)(v10 + 8) = *a2;
  *(_QWORD *)v10 = &off_1E0FD4650;
  *(_QWORD *)(v10 + 24) = *a3;
  *(_QWORD *)(v10 + 32) = *a4;
  *(_BYTE *)(v10 + 40) = v11;
  *v9 += 48;
  v12 = *((unsigned int *)v9 + 11);
  if ((_DWORD)v12 != *((_DWORD *)v9 + 10))
  {
    v19 = (_QWORD *)(v9[4] + 8 * v12);
LABEL_17:
    *v19 = v10;
    *((_DWORD *)v9 + 11) = v12 + 1;
    return (_QWORD *)v10;
  }
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (void *)v9[4];
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)v9 + 10) = v15;
    v9[4] = v17;
    memcpy(v17, v16, 8 * v12);
    if (v16)
    {
      if ((void *)v9[4] == v16)
      {
        v9[4] = 0;
        *((_DWORD *)v9 + 10) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
    v12 = *((unsigned int *)v9 + 11);
    v19 = (_QWORD *)(v9[4] + 8 * v12);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::AssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x27uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)v8 = &off_1E0FD38F8;
  *(_QWORD *)(v8 + 24) = *a3;
  *(_QWORD *)(v8 + 32) = *a4;
  *v7 += 40;
  v9 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v9 != *((_DWORD *)v7 + 10))
  {
    v16 = (_QWORD *)(v7[4] + 8 * v9);
LABEL_17:
    *v16 = v8;
    *((_DWORD *)v7 + 11) = v9 + 1;
    return (_QWORD *)v8;
  }
  v10 = v9 + (v9 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (void *)v7[4];
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)v7 + 10) = v12;
    v7[4] = v14;
    memcpy(v14, v13, 8 * v9);
    if (v13)
    {
      if ((void *)v7[4] == v13)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v13, v15);
    }
    v9 = *((unsigned int *)v7 + 11);
    v16 = (_QWORD *)(v7[4] + 8 * v9);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::DecrementIncrementStatement::~DecrementIncrementStatement(WGSL::AST::DecrementIncrementStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::DecrementIncrementStatement::kind(WGSL::AST::DecrementIncrementStatement *this)
{
  return 45;
}

void WGSL::Parser<WGSL::Lexer<unsigned char>>::parseLHSExpression(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  char *v18;
  int v19;
  unsigned int v20;
  _OWORD *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  char *v35;
  _QWORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _DWORD *v46;
  _DWORD *v47;
  char *v48;
  int v49;
  _DWORD *v50;
  unint64_t v51;
  char *v52;
  __int128 v53;
  int v54;
  char *v55;
  __int128 v56;
  int v57;
  int v58;
  _DWORD *v59;
  _DWORD *v60;
  char *v61;
  __int128 v62;

  v4 = *(char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v6 + 1;
  if ((v6 + 1) >= 0x81)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_80;
  }
  v8 = *(_DWORD *)(a2 + 56);
  if (v8 == 76)
  {
    v9 = 2;
    goto LABEL_7;
  }
  if (v8 != 36)
  {
    if (v8 == 8)
    {
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v55, a2);
      if (v58)
      {
        if (v58 != 1)
          goto LABEL_88;
        v31 = v55;
        if (v55)
          *(_DWORD *)v55 += 2;
        v53 = v56;
        v52 = v31;
        v32 = 1;
        v54 = 1;
      }
      else
      {
        v36 = *(_QWORD **)(a2 + 8);
        v37 = *(_DWORD *)(a2 + 96) - v5;
        *(_QWORD *)&v62 = v4;
        *((_QWORD *)&v62 + 1) = __PAIR64__(v37, v5);
        v52 = (char *)WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v36, &v62, (uint64_t)&v55);
        v54 = 0;
        v32 = v58;
        if (v58 == -1)
          goto LABEL_73;
      }
      ((void (*)(__int128 *, char **))off_1E0FD6FE8[v32])(&v62, &v55);
      goto LABEL_73;
    }
    if (v8 != 67)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v33 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
      *(_QWORD *)&v53 = v4;
      *((_QWORD *)&v53 + 1) = v33;
      v54 = 1;
      goto LABEL_73;
    }
    v20 = *(_DWORD *)(a2 + 36);
    v21 = (_OWORD *)(a2 + 60);
    v22 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v22;
      if (v20 <= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1824FC560);
      }
      v24 = *(_QWORD *)(a2 + 24);
      v25 = v24 + 32 * v22;
      v26 = *(_DWORD *)v25;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v25;
      *v21 = *(_OWORD *)(v25 + 4);
      v27 = *(_DWORD *)v25;
      if (v27 > 8)
        goto LABEL_28;
      if (((1 << v27) & 0x38) != 0)
        break;
      if (((1 << v27) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v24 + 32 * v22 + 24);
      }
      else if (v27 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
        if (v28)
          *v28 += 2;
        goto LABEL_37;
      }
LABEL_28:
      v23 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v23;
      ++v22;
      if (v26 != 82)
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseLHSExpression(&v55, a2);
        v34 = v57;
        if (v57)
        {
          if (v57 == 1)
          {
            v35 = v55;
            if (v55)
              *(_DWORD *)v55 += 2;
            v53 = v56;
LABEL_71:
            v52 = v35;
            v54 = v34;
LABEL_72:
            ((void (*)(__int128 *, char **))off_1E0FD71D8[v34])(&v62, &v55);
LABEL_73:
            if (!v54)
            {
              WGSL::Parser<WGSL::Lexer<unsigned char>>::parsePostfixExpression(a1, a2, v52, (unint64_t)v4, v5);
              v49 = v54;
              if (v54 == -1)
                goto LABEL_80;
LABEL_79:
              ((void (*)(char **, char **))off_1E0FD71D8[v49])(&v55, &v52);
              goto LABEL_80;
            }
            if (v54 == 1)
            {
              v48 = v52;
              if (v52)
                *(_DWORD *)v52 += 2;
              *(_OWORD *)(a1 + 8) = v53;
              *(_QWORD *)a1 = v48;
              v49 = 1;
              *(_DWORD *)(a1 + 24) = 1;
              goto LABEL_79;
            }
          }
LABEL_88:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_92:
          __break(0xC471u);
          JUMPOUT(0x1824FC558);
        }
        v38 = *(_DWORD *)(a2 + 56);
        if (v38 != 68)
        {
          WGSL::toString(68);
          WGSL::toString(v38);
          v52 = "Expected a ";
          *(_QWORD *)&v53 = 12;
          *(_QWORD *)&v62 = ", but got a ";
          *((_QWORD *)&v62 + 1) = 13;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v52, (uint64_t *)&v60, (uint64_t)&v62, (uint64_t *)&v59, &v61);
          if (v61)
          {
            v47 = v59;
            v59 = 0;
            if (v47)
            {
              if (*v47 == 2)
                WTF::StringImpl::destroy();
              else
                *v47 -= 2;
            }
            v50 = v60;
            v60 = 0;
            if (v50)
            {
              if (*v50 == 2)
                WTF::StringImpl::destroy();
              else
                *v50 -= 2;
            }
            v51 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            v52 = v61;
            *(_QWORD *)&v53 = v4;
            *((_QWORD *)&v53 + 1) = v51;
            v54 = 1;
            v34 = v57;
            if (v57 != -1)
              goto LABEL_72;
            goto LABEL_73;
          }
          goto LABEL_92;
        }
        v39 = *(_DWORD *)(a2 + 36);
        v40 = *(_DWORD *)(a2 + 40) + 1;
        while (2)
        {
          *(_DWORD *)(a2 + 40) = v40;
          if (v39 <= v40)
          {
            __break(0xC471u);
            JUMPOUT(0x1824FC568);
          }
          v42 = *(_QWORD *)(a2 + 24);
          v43 = v42 + 32 * v40;
          v44 = *(_DWORD *)v43;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v43;
          *v21 = *(_OWORD *)(v43 + 4);
          v45 = *(_DWORD *)v43;
          if (v45 <= 8)
          {
            if (((1 << v45) & 0x38) != 0)
            {
              v46 = *(_DWORD **)(v42 + 32 * v40 + 24);
              goto LABEL_65;
            }
            if (((1 << v45) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v42 + 32 * v40 + 24);
            }
            else if (v45 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v46 = *(_DWORD **)(v42 + 32 * v40 + 24);
              if (v46)
                *v46 += 2;
LABEL_65:
              *(_QWORD *)(a2 + 80) = v46;
            }
          }
          v41 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v41;
          ++v40;
          if (v44 != 82)
          {
            v35 = v55;
            goto LABEL_71;
          }
          continue;
        }
      }
    }
    v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
LABEL_37:
    *(_QWORD *)(a2 + 80) = v28;
    goto LABEL_28;
  }
  v9 = 0;
LABEL_7:
  LOBYTE(v62) = v9;
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v11;
    if (v10 <= v11)
      goto LABEL_92;
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v13 + 32 * v11;
    v15 = *(_DWORD *)v14;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v14 + 4);
    v16 = *(_DWORD *)v14;
    if (v16 <= 8)
    {
      if (((1 << v16) & 0x38) != 0)
      {
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_18:
        *(_QWORD *)(a2 + 80) = v17;
        goto LABEL_9;
      }
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
        goto LABEL_9;
      }
      if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_18;
      }
    }
LABEL_9:
    v12 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v12;
    ++v11;
  }
  while (v15 == 82);
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseLHSExpression(&v55, a2);
  if (!v57)
  {
    v29 = *(_QWORD **)(a2 + 8);
    v30 = *(_DWORD *)(a2 + 96) - v5;
    v52 = v4;
    *(_QWORD *)&v53 = __PAIR64__(v30, v5);
    *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::UnaryOperation &,void>(v29, &v52, &v55, (char *)&v62);
    *(_DWORD *)(a1 + 24) = 0;
    v19 = v57;
    if (v57 != -1)
      goto LABEL_39;
    goto LABEL_80;
  }
  if (v57 != 1)
    goto LABEL_88;
  v18 = v55;
  if (v55)
    *(_DWORD *)v55 += 2;
  *(_OWORD *)(a1 + 8) = v56;
  *(_QWORD *)a1 = v18;
  v19 = 1;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_39:
  ((void (*)(char **, char **))off_1E0FD71D8[v19])(&v52, &v55);
LABEL_80:
  *(_DWORD *)(a2 + 44) = v6;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ForStatement,WGSL::SourceSpan,WGSL::AST::Statement *&,WGSL::AST::Expression *&,WGSL::AST::Statement *&,std::reference_wrapper<WGSL::AST::CompoundStatement>,void>(_QWORD *this, _OWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;

  v11 = this;
  v12 = *this;
  if (this[1] - *this <= 0x37uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v12 = *v11;
  }
  v13 = *a3;
  v14 = *a4;
  v15 = *a5;
  *(_OWORD *)(v12 + 8) = *a2;
  *(_QWORD *)v12 = &off_1E0FD4678;
  *(_QWORD *)(v12 + 24) = v13;
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v15;
  *(_QWORD *)(v12 + 48) = *a6;
  *v11 += 56;
  v16 = *((unsigned int *)v11 + 11);
  if ((_DWORD)v16 != *((_DWORD *)v11 + 10))
  {
    v23 = (_QWORD *)(v11[4] + 8 * v16);
LABEL_17:
    *v23 = v12;
    *((_DWORD *)v11 + 11) = v16 + 1;
    return (_QWORD *)v12;
  }
  v17 = v16 + (v16 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v16 + 1)
    v19 = v16 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = (void *)v11[4];
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *((_DWORD *)v11 + 10) = v19;
    v11[4] = v21;
    memcpy(v21, v20, 8 * v16);
    if (v20)
    {
      if ((void *)v11[4] == v20)
      {
        v11[4] = 0;
        *((_DWORD *)v11 + 10) = 0;
      }
      WTF::fastFree((WTF *)v20, v22);
    }
    v16 = *((unsigned int *)v11 + 11);
    v23 = (_QWORD *)(v11[4] + 8 * v16);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::LoopStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,std::optional<WGSL::AST::Continuing>,void>(_QWORD *this, _OWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;

  v9 = this;
  v10 = *this;
  if (this[1] - *this <= 0x6FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v10 = *v9;
  }
  *(_OWORD *)(v10 + 8) = *a2;
  *(_QWORD *)v10 = &off_1E0FD74B8;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(v10 + 24) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v10 + 32) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v10 + 36) = v11;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(v10 + 40) = v12;
  LODWORD(v12) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v10 + 48) = v12;
  v13 = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_BYTE *)(v10 + 56) = 0;
  *(_DWORD *)(v10 + 52) = v13;
  *(_BYTE *)(v10 + 96) = 0;
  if (*((_BYTE *)a5 + 40))
  {
    *(_QWORD *)(v10 + 56) = 0;
    *(_QWORD *)(v10 + 64) = 0;
    v14 = *a5;
    *a5 = 0;
    *(_QWORD *)(v10 + 56) = v14;
    LODWORD(v14) = *((_DWORD *)a5 + 2);
    *((_DWORD *)a5 + 2) = 0;
    *(_DWORD *)(v10 + 64) = v14;
    LODWORD(v14) = *((_DWORD *)a5 + 3);
    *((_DWORD *)a5 + 3) = 0;
    *(_DWORD *)(v10 + 68) = v14;
    *(_QWORD *)(v10 + 72) = 0;
    *(_QWORD *)(v10 + 80) = 0;
    v15 = a5[2];
    a5[2] = 0;
    *(_QWORD *)(v10 + 72) = v15;
    LODWORD(v15) = *((_DWORD *)a5 + 6);
    *((_DWORD *)a5 + 6) = 0;
    *(_DWORD *)(v10 + 80) = v15;
    LODWORD(v15) = *((_DWORD *)a5 + 7);
    *((_DWORD *)a5 + 7) = 0;
    *(_DWORD *)(v10 + 84) = v15;
    *(_QWORD *)(v10 + 88) = a5[4];
    *(_BYTE *)(v10 + 96) = 1;
  }
  *(_BYTE *)(v10 + 104) = 0;
  *v9 += 112;
  v16 = *((unsigned int *)v9 + 11);
  if ((_DWORD)v16 != *((_DWORD *)v9 + 10))
  {
    v23 = (_QWORD *)(v9[4] + 8 * v16);
LABEL_19:
    *v23 = v10;
    *((_DWORD *)v9 + 11) = v16 + 1;
    return (_QWORD *)v10;
  }
  v17 = v16 + (v16 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v16 + 1)
    v19 = v16 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = (void *)v9[4];
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *((_DWORD *)v9 + 10) = v19;
    v9[4] = v21;
    memcpy(v21, v20, 8 * v16);
    if (v20)
    {
      if ((void *)v9[4] == v20)
      {
        v9[4] = 0;
        *((_DWORD *)v9 + 10) = 0;
      }
      WTF::fastFree((WTF *)v20, v22);
    }
    v16 = *((unsigned int *)v9 + 11);
    v23 = (_QWORD *)(v9[4] + 8 * v16);
    goto LABEL_19;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::LoopStatement::~LoopStatement(WGSL::AST::LoopStatement *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;

  if (*((_BYTE *)this + 96))
  {
    v3 = (WTF *)*((_QWORD *)this + 9);
    if (v3)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = (WTF *)*((_QWORD *)this + 7);
    if (v4)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;

  if (*((_BYTE *)this + 96))
  {
    v3 = (WTF *)*((_QWORD *)this + 9);
    if (v3)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = (WTF *)*((_QWORD *)this + 7);
    if (v4)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::LoopStatement::kind(WGSL::AST::LoopStatement *this)
{
  return 49;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::SwitchStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WGSL::AST::SwitchClause,void>(_QWORD *this, _OWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;

  v11 = this;
  v12 = *this;
  if (this[1] - *this <= 0x5FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v12 = *v11;
  }
  *(_OWORD *)(v12 + 8) = *a2;
  *(_QWORD *)v12 = &off_1E0FD74E0;
  *(_WORD *)(v12 + 24) = 0;
  v13 = *a3;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 32) = v13;
  v14 = *a4;
  *a4 = 0;
  *(_QWORD *)(v12 + 40) = v14;
  LODWORD(v14) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v12 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v12 + 52) = v14;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  v15 = *a5;
  *a5 = 0;
  *(_QWORD *)(v12 + 56) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v12 + 64) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(v12 + 68) = v15;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  v16 = *a6;
  *a6 = 0;
  *(_QWORD *)(v12 + 72) = v16;
  LODWORD(v16) = *((_DWORD *)a6 + 2);
  *((_DWORD *)a6 + 2) = 0;
  *(_DWORD *)(v12 + 80) = v16;
  LODWORD(v16) = *((_DWORD *)a6 + 3);
  *((_DWORD *)a6 + 3) = 0;
  *(_DWORD *)(v12 + 84) = v16;
  *(_QWORD *)(v12 + 88) = a6[2];
  *v11 += 96;
  v17 = *((unsigned int *)v11 + 11);
  if ((_DWORD)v17 != *((_DWORD *)v11 + 10))
  {
    v24 = (_QWORD *)(v11[4] + 8 * v17);
LABEL_17:
    *v24 = v12;
    *((_DWORD *)v11 + 11) = v17 + 1;
    return (_QWORD *)v12;
  }
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v17 + 1)
    v20 = v17 + 1;
  else
    v20 = v19;
  if (!(v20 >> 29))
  {
    v21 = (void *)v11[4];
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *((_DWORD *)v11 + 10) = v20;
    v11[4] = v22;
    memcpy(v22, v21, 8 * v17);
    if (v21)
    {
      if ((void *)v11[4] == v21)
      {
        v11[4] = 0;
        *((_DWORD *)v11 + 10) = 0;
      }
      WTF::fastFree((WTF *)v21, v23);
    }
    v17 = *((unsigned int *)v11 + 11);
    v24 = (_QWORD *)(v11[4] + 8 * v17);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

unint64_t WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 24 * v4;
        v9 = (char *)v3 + 8;
        do
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          v10 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *(_QWORD *)v7 = v10;
          LODWORD(v10) = *(_DWORD *)v9;
          *(_DWORD *)v9 = 0;
          v7[2] = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 1);
          *((_DWORD *)v9 + 1) = 0;
          v7[3] = v10;
          *((_QWORD *)v7 + 2) = *((_QWORD *)v9 + 1);
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          if (result)
          {
            *((_QWORD *)v9 - 1) = 0;
            *(_DWORD *)v9 = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 24;
          v7 += 6;
          v8 -= 24;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void WGSL::AST::SwitchStatement::~SwitchStatement(WGSL::AST::SwitchStatement *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 17);
  v5 = (WTF *)*((_QWORD *)this + 7);
  if ((_DWORD)v4)
  {
    v6 = 24 * v4;
    do
    {
      v7 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v5 = (WTF *)((char *)v5 + 24);
      v6 -= 24;
    }
    while (v6);
    v5 = (WTF *)*((_QWORD *)this + 7);
  }
  if (v5)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v8, a2);
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 17);
  v5 = (WTF *)*((_QWORD *)this + 7);
  if ((_DWORD)v4)
  {
    v6 = 24 * v4;
    do
    {
      v7 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v5 = (WTF *)((char *)v5 + 24);
      v6 -= 24;
    }
    while (v6);
    v5 = (WTF *)*((_QWORD *)this + 7);
  }
  if (v5)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v8, a2);
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::SwitchStatement::kind(WGSL::AST::SwitchStatement *this)
{
  return 53;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::WhileStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::CompoundStatement>,void>(_QWORD *this, _OWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x27uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)v8 = &off_1E0FD7508;
  *(_QWORD *)(v8 + 24) = *a3;
  *(_QWORD *)(v8 + 32) = *a4;
  *v7 += 40;
  v9 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v9 != *((_DWORD *)v7 + 10))
  {
    v16 = (_QWORD *)(v7[4] + 8 * v9);
LABEL_17:
    *v16 = v8;
    *((_DWORD *)v7 + 11) = v9 + 1;
    return (_QWORD *)v8;
  }
  v10 = v9 + (v9 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = (void *)v7[4];
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)v7 + 10) = v12;
    v7[4] = v14;
    memcpy(v14, v13, 8 * v9);
    if (v13)
    {
      if ((void *)v7[4] == v13)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v13, v15);
    }
    v9 = *((unsigned int *)v7 + 11);
    v16 = (_QWORD *)(v7[4] + 8 * v9);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::WhileStatement::~WhileStatement(WGSL::AST::WhileStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::WhileStatement::kind(WGSL::AST::WhileStatement *this)
{
  return 55;
}

void WGSL::AST::BreakStatement::~BreakStatement(WGSL::AST::BreakStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::BreakStatement::kind(WGSL::AST::BreakStatement *this)
{
  return 39;
}

void WGSL::AST::ContinueStatement::~ContinueStatement(WGSL::AST::ContinueStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::ContinueStatement::kind(WGSL::AST::ContinueStatement *this)
{
  return 44;
}

void WGSL::AST::DiscardStatement::~DiscardStatement(WGSL::AST::DiscardStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::DiscardStatement::kind(WGSL::AST::DiscardStatement *this)
{
  return 46;
}

void WGSL::AST::PhonyAssignmentStatement::~PhonyAssignmentStatement(WGSL::AST::PhonyAssignmentStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::PhonyAssignmentStatement::kind(WGSL::AST::PhonyAssignmentStatement *this)
{
  return 50;
}

void WGSL::AST::ConstAssertStatement::~ConstAssertStatement(WGSL::AST::ConstAssertStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::ConstAssertStatement::kind(WGSL::AST::ConstAssertStatement *this)
{
  return 43;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST9StatementEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

void WGSL::AST::Function::~Function(WGSL::AST::Function *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  _DWORD *v6;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v6 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*v6 == 2)
      WTF::StringImpl::destroy();
    else
      *v6 -= 2;
  }
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  _DWORD *v6;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v6 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*v6 == 2)
      WTF::StringImpl::destroy();
    else
      *v6 -= 2;
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::Function::kind(WGSL::AST::Function *this)
{
  return 27;
}

uint64_t WGSL::AST::Function::name(WGSL::AST::Function *this)
{
  return (uint64_t)this + 24;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST17CompoundStatementEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF22ReferenceWrapperVectorIN4WGSL3AST9AttributeELm0EEENSA_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF22ReferenceWrapperVectorIN4WGSL3AST9AttributeELm0EEENSA_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN4WGSL3AST11DeclarationEEENS9_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

__n128 WGSL::Parser<WGSL::Lexer<char16_t>>::parseShader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  _OWORD *v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v60;
  const char *v61;
  const char *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  _DWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  _DWORD *v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  _DWORD *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  _DWORD *v109;
  char **v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  _DWORD *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  _DWORD *v127;
  const char *v128;
  const char *v129;
  uint64_t v130;
  int v131;
  int v132;
  _BOOL4 v133;
  unint64_t v134;
  BOOL v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  _DWORD *v146;
  _DWORD *v147;
  _DWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  __n128 *v161;
  uint64_t (**v162)();
  const char *v163;
  uint64_t v164;
  int v165;
  void *v166;
  uint64_t v167;
  const char *v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  _DWORD *v175;
  uint64_t v176;
  const char *v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  _DWORD *v185;
  const char *v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  _DWORD *v199;
  uint64_t v200;
  const char *v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  _DWORD *v210;
  const char *v211;
  const char *v212;
  const char *v213;
  const char *v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  _DWORD *v224;
  const char *v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int v232;
  _DWORD *v233;
  unint64_t v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;
  _DWORD *v242;
  unint64_t v243;
  const char *v244;
  uint64_t v245;
  const char *v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  _DWORD *v255;
  unint64_t v256;
  unint64_t v257;
  _DWORD *v258;
  _QWORD *v259;
  const char *v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  _DWORD *v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  _DWORD *v278;
  _DWORD *v279;
  _DWORD *v280;
  WTF *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  const char *v287;
  uint64_t v288;
  __n128 *v289;
  uint64_t v290;
  WTF *v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  _DWORD *v300;
  _DWORD *v301;
  const char *v302;
  uint64_t v303;
  _QWORD *v304;
  unsigned int v305;
  void *v306;
  unsigned int v307;
  const char *v308;
  int v309;
  _DWORD *v310;
  unint64_t v311;
  _QWORD *v312;
  int v313;
  unsigned int v314;
  unsigned int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  unsigned int v320;
  _DWORD *v321;
  unint64_t v322;
  _DWORD *v323;
  int v324;
  uint64_t v325;
  void *v326;
  unint64_t v327;
  uint64_t v328;
  const char *v329;
  uint64_t v330;
  const char *v331;
  uint64_t v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  unsigned int v340;
  _DWORD *v341;
  _DWORD *v342;
  const char *v343;
  uint64_t v344;
  _QWORD *v345;
  unsigned int v346;
  unsigned int v347;
  _DWORD *v348;
  unint64_t v349;
  _QWORD *v350;
  int v351;
  _DWORD *v352;
  _DWORD *v353;
  unint64_t v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  _DWORD *v362;
  unint64_t v363;
  _DWORD *v364;
  const char *v365;
  unint64_t v366;
  const char *v367;
  unint64_t v368;
  unint64_t v369;
  WTF *v370;
  int v371;
  _DWORD *v372;
  const char *v373;
  const char *v374;
  unint64_t v375;
  unint64_t v376;
  int v377;
  unsigned int v378;
  unsigned int v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  unsigned int v384;
  _DWORD *v385;
  unsigned int v386;
  uint64_t v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int v393;
  unsigned int v394;
  _DWORD *v395;
  WTF *v396;
  uint64_t v397;
  const char *v398;
  int v399;
  uint64_t v400;
  unsigned int v401;
  unsigned int v402;
  _DWORD *v403;
  char *v404;
  int v405;
  unint64_t v406;
  _DWORD *v407;
  _QWORD *v408;
  _QWORD *v409;
  unsigned int v410;
  uint64_t v411;
  const char *v412;
  const char *v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _DWORD **v417;
  _DWORD *v418;
  WTF *v419;
  uint64_t v420;
  const char *v421;
  const char *v422;
  unint64_t v423;
  uint64_t v424;
  const char *v425;
  unsigned int v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  const char **v431;
  uint64_t v432;
  const char *v433;
  _DWORD *v434;
  const char *v435;
  _DWORD *v436;
  const char *v437;
  char *v438;
  unint64_t v439;
  int v440;
  unint64_t v441;
  unint64_t v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unsigned int v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  __n128 *v453;
  const char *v455;
  const char *v456;
  unint64_t v457;
  unsigned int v458;
  _DWORD *v459;
  _DWORD *v460;
  _BYTE v461[24];
  uint64_t v462;
  _DWORD v463[12];
  unsigned int v464;
  const char *v465;
  __n128 v466;
  unsigned int v467;
  const char *v468;
  __n128 v469;
  unsigned int v470;
  _DWORD *v471;
  _DWORD *v472;
  const char *v473;
  __n128 v474;
  unsigned int v475;
  WTF *v476;
  uint64_t v477;
  _BYTE v478[24];
  _DWORD *v479;
  unsigned int v480;
  const char *v481;
  __n128 v482;
  unsigned int v483;
  _DWORD *v484;
  _DWORD *v485;
  const char *v486;
  const char *v487;
  __n128 v488;
  unsigned int v489;
  __int128 v490;

  v452 = *(_QWORD *)(a2 + 88);
  v451 = *(unsigned int *)(a2 + 96);
  v3 = *(unsigned int *)(a2 + 36);
  *(_QWORD *)v461 = 0;
  *(_QWORD *)&v461[8] = 0;
  *(_QWORD *)&v461[16] = v463;
  result.n128_u64[0] = 16;
  v462 = 16;
  v5 = v3 - 1;
  if (v3 == 1)
    goto LABEL_70;
  v6 = 0;
  v7 = 0;
  while (2)
  {
    v8 = *(unsigned int *)(a2 + 36);
    if (v7 >= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x182500D6CLL);
    }
    v9 = *(_QWORD *)(a2 + 24);
    v10 = (_DWORD *)(v9 + 32 * v7);
    switch(*v10)
    {
      case 8:
      case 0x22:
        v24 = v7 + 1;
        if (v7 + 1 >= v8)
        {
          __break(0xC471u);
          JUMPOUT(0x182500D94);
        }
        v25 = (_DWORD *)(v9 + 32 * v24);
        if (*v25 != 55)
          goto LABEL_6;
        v26 = *(_QWORD *)v461;
        v27 = *(_QWORD *)&v461[8];
        if (*(_QWORD *)v461)
        {
          if (*(_QWORD *)&v461[8] + 1 != *(_QWORD *)v461)
            goto LABEL_60;
          v28 = v462;
          v29 = *(char **)&v461[16];
          v30 = v462 + ((unint64_t)v462 >> 2);
          if (v30 < 0x10)
            goto LABEL_45;
        }
        else
        {
          v28 = v462;
          if (!*(_QWORD *)&v461[8])
          {
            if ((_DWORD)v462)
              goto LABEL_60;
            v27 = 0;
            v29 = *(char **)&v461[16];
LABEL_45:
            *(_QWORD *)&v461[16] = v463;
            LODWORD(v462) = 16;
            v31 = v463;
            if (*(_QWORD *)v461 > v27)
              goto LABEL_46;
            goto LABEL_54;
          }
          if (*(_QWORD *)&v461[8] != v462 - 1)
            goto LABEL_60;
          v29 = *(char **)&v461[16];
          v30 = v462 + ((unint64_t)v462 >> 2);
          if (v30 < 0x10)
            goto LABEL_45;
        }
        if (v30 >= 0xFFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x182500DD4);
        }
        v32 = v30 + 1;
        v31 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * (v30 + 1)));
        LODWORD(v462) = v32;
        *(_QWORD *)&v461[16] = v31;
        v26 = *(_QWORD *)v461;
        v27 = *(_QWORD *)&v461[8];
        if (*(_QWORD *)v461 > *(_QWORD *)&v461[8])
        {
LABEL_46:
          memcpy(v31, v29, 16 * v27);
          memcpy((void *)(*(_QWORD *)&v461[16] + 16 * (*(_QWORD *)v461 - v28 + v462)), &v29[16 * *(_QWORD *)v461], 16 * v28 - 16 * *(_QWORD *)v461);
          *(_QWORD *)v461 = *(_QWORD *)v461 - v28 + v462;
          if (v463 == (_DWORD *)v29)
            goto LABEL_60;
          goto LABEL_55;
        }
LABEL_54:
        memcpy(&v31[4 * v26], &v29[16 * v26], 16 * v27 - 16 * v26);
        if (v463 == (_DWORD *)v29)
          goto LABEL_60;
LABEL_55:
        if (v29)
        {
          if (*(char **)&v461[16] == v29)
          {
            *(_QWORD *)&v461[16] = 0;
            LODWORD(v462) = 0;
          }
          WTF::fastFree((WTF *)v29, (void *)a2);
        }
LABEL_60:
        v33 = *(_QWORD *)&v461[8];
        v34 = *(_QWORD *)&v461[16] + 16 * *(_QWORD *)&v461[8];
        *(_QWORD *)v34 = v25;
        *(_DWORD *)(v34 + 8) = v6;
        if (v33 == v462 - 1)
          v35 = 0;
        else
          v35 = v33 + 1;
        *(_QWORD *)&v461[8] = v35;
        v7 = v24;
LABEL_6:
        if (++v7 < v5)
          continue;
        v36 = *(WTF **)&v461[16];
        if (v463 != *(_DWORD **)&v461[16] && *(_QWORD *)&v461[16] != 0)
        {
          *(_QWORD *)&v461[16] = 0;
          LODWORD(v462) = 0;
          WTF::fastFree(v36, (void *)a2);
        }
LABEL_70:
        v38 = (_OWORD *)(a2 + 60);
        v39 = (uint64_t *)(a2 + 80);
        v453 = (__n128 *)(a1 + 8);
        v449 = (uint64_t)&v478[8];
LABEL_72:
        while (2)
        {
          v40 = *(_DWORD *)(a2 + 56);
          if (v40 == 18)
          {
            v82 = *(_DWORD *)(a2 + 36);
            v83 = *(_DWORD *)(a2 + 40) + 1;
            while (1)
            {
              *(_DWORD *)(a2 + 40) = v83;
              if (v82 <= v83)
              {
                __break(0xC471u);
                JUMPOUT(0x182500D1CLL);
              }
              v85 = *(_QWORD *)(a2 + 24);
              v86 = v85 + 32 * v83;
              v87 = *(_DWORD *)v86;
              *(_DWORD *)(a2 + 56) = *(_DWORD *)v86;
              *v38 = *(_OWORD *)(v86 + 4);
              v88 = *(_DWORD *)v86;
              if (v88 > 8)
                goto LABEL_151;
              if (((1 << v88) & 0x38) != 0)
                break;
              if (((1 << v88) & 0xC4) != 0)
              {
                *v39 = *(_QWORD *)(v85 + 32 * v83 + 24);
              }
              else if (v88 == 8)
              {
                *v39 = 0;
                v89 = *(_DWORD **)(v85 + 32 * v83 + 24);
                if (v89)
                  *v89 += 2;
                goto LABEL_160;
              }
LABEL_151:
              v84 = *(_DWORD *)(a2 + 68);
              *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
              *(_DWORD *)(a2 + 96) = v84;
              ++v83;
              if (v87 != 82)
              {
                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseDiagnostic((uint64_t)v461, a2);
                if (v464)
                {
                  if (v464 != 1)
                    goto LABEL_916;
                  v90 = *(_QWORD *)v461;
                  if (*(_QWORD *)v461)
                    **(_DWORD **)v461 += 2;
                  v91 = 0;
                  result = *(__n128 *)&v461[8];
                  *v453 = *(__n128 *)&v461[8];
                  *(_QWORD *)a1 = v90;
                  *(_BYTE *)(a1 + 24) = 1;
                  v92 = v464;
                  if (v464 == -1)
                    goto LABEL_167;
                  goto LABEL_166;
                }
                if (*(_DWORD *)(a2 + 56) != 73)
                {
                  *(_DWORD *)v478 = *(_DWORD *)(a2 + 56);
                  v480 = 1;
                  WGSL::toString(73);
                  if (v480 != 1)
                    goto LABEL_916;
                  WGSL::toString(*(int *)v478);
                  v487 = "Expected a ";
                  v488.n128_u64[0] = 12;
                  v481 = ", but got a ";
                  v482.n128_u64[0] = 13;
                  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v487, (uint64_t *)&v460, (uint64_t)&v481, (uint64_t *)&v459, &v473);
                  if (!v473)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x182500DBCLL);
                  }
                  v147 = v459;
                  v459 = 0;
                  if (v147)
                  {
                    if (*v147 != 2)
                    {
                      *v147 -= 2;
                      goto LABEL_283;
                    }
                    WTF::StringImpl::destroy();
                    v148 = v460;
                    v460 = 0;
                    if (v148)
                    {
LABEL_302:
                      if (*v148 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v148 -= 2;
                    }
                  }
                  else
                  {
LABEL_283:
                    v148 = v460;
                    v460 = 0;
                    if (v148)
                      goto LABEL_302;
                  }
                  v160 = v451 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v451) << 32);
                  *(_QWORD *)a1 = v473;
                  *(_QWORD *)(a1 + 8) = v452;
                  *(_QWORD *)(a1 + 16) = v160;
                  *(_BYTE *)(a1 + 24) = 1;
                  if (v480 == -1)
                  {
                    v91 = 0;
                    v92 = v464;
                    if (v464 != -1)
                      goto LABEL_166;
                  }
                  else
                  {
                    ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v480])(&v487, v478);
                    v91 = 0;
                    v92 = v464;
                    if (v464 != -1)
                      goto LABEL_166;
                  }
                  goto LABEL_167;
                }
                *(_OWORD *)&v478[4] = *v38;
                *(_DWORD *)v478 = 73;
                v480 = 0;
                v102 = *(_DWORD *)(a2 + 36);
                v103 = *(_DWORD *)(a2 + 40) + 1;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v103;
                  if (v102 <= v103)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x182500D4CLL);
                  }
                  v105 = *(_QWORD *)(a2 + 24);
                  v106 = v105 + 32 * v103;
                  v107 = *(_DWORD *)v106;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v106;
                  *v38 = *(_OWORD *)(v106 + 4);
                  v108 = *(_DWORD *)v106;
                  if (v108 <= 8)
                  {
                    if (((1 << v108) & 0x38) != 0)
                    {
                      v109 = *(_DWORD **)(v105 + 32 * v103 + 24);
                      goto LABEL_195;
                    }
                    if (((1 << v108) & 0xC4) != 0)
                    {
                      *v39 = *(_QWORD *)(v105 + 32 * v103 + 24);
                    }
                    else if (v108 == 8)
                    {
                      *v39 = 0;
                      v109 = *(_DWORD **)(v105 + 32 * v103 + 24);
                      if (v109)
                        *v109 += 2;
LABEL_195:
                      *v39 = (uint64_t)v109;
                    }
                  }
                  v104 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v104;
                  ++v103;
                  if (v107 == 82)
                    continue;
                  break;
                }
                v149 = *(_QWORD **)(a2 + 8);
                *(_QWORD *)v478 = v452;
                *(_DWORD *)&v478[8] = v451;
                *(_DWORD *)&v478[12] = v104 - v451;
                v150 = WGSL::AST::Builder::construct<WGSL::AST::DiagnosticDirective,WGSL::SourceSpan,WGSL::AST::Diagnostic,void>(v149, v478, (uint64_t)v461);
                v151 = *(_QWORD *)a2;
                v152 = *(unsigned int *)(*(_QWORD *)a2 + 92);
                if ((_DWORD)v152 == *(_DWORD *)(*(_QWORD *)a2 + 88))
                {
                  v450 = v150;
                  v153 = v152 + (v152 >> 2);
                  if (v153 >= 0x10)
                    v154 = v153 + 1;
                  else
                    v154 = 16;
                  if (v154 <= v152 + 1)
                    v155 = v152 + 1;
                  else
                    v155 = v154;
                  if (v155 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x182500DC4);
                  }
                  v156 = *(void **)(v151 + 80);
                  v157 = (void *)WTF::fastMalloc((WTF *)(8 * v155));
                  *(_DWORD *)(v151 + 88) = v155;
                  *(_QWORD *)(v151 + 80) = v157;
                  memcpy(v157, v156, 8 * v152);
                  if (v156)
                  {
                    if (*(void **)(v151 + 80) == v156)
                    {
                      *(_QWORD *)(v151 + 80) = 0;
                      *(_DWORD *)(v151 + 88) = 0;
                    }
                    WTF::fastFree((WTF *)v156, v158);
                  }
                  v159 = *(unsigned int *)(v151 + 92);
                  *(_QWORD *)(*(_QWORD *)(v151 + 80) + 8 * v159) = v450;
                  *(_DWORD *)(v151 + 92) = v159 + 1;
                  v91 = 1;
                  v92 = v464;
                  if (v464 == -1)
                    goto LABEL_167;
LABEL_166:
                  ((void (*)(_BYTE *, _BYTE *))off_1E0FD7030[v92])(v478, v461);
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v151 + 80) + 8 * v152) = v150;
                  *(_DWORD *)(v151 + 92) = v152 + 1;
                  v91 = 1;
                  v92 = v464;
                  if (v464 != -1)
                    goto LABEL_166;
                }
LABEL_167:
                if ((v91 & 1) == 0)
                  return result;
                goto LABEL_72;
              }
            }
            v89 = *(_DWORD **)(v85 + 32 * v83 + 24);
LABEL_160:
            *v39 = (uint64_t)v89;
            goto LABEL_151;
          }
          if (v40 != 21)
          {
            if (v40 == 29)
            {
              v41 = *(_QWORD *)(a2 + 88);
              v42 = *(unsigned int *)(a2 + 96);
              v43 = *(_DWORD *)(a2 + 36);
              v44 = *(_DWORD *)(a2 + 40) + 1;
              while (1)
              {
                *(_DWORD *)(a2 + 40) = v44;
                if (v43 <= v44)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182500D14);
                }
                v46 = *(_QWORD *)(a2 + 24);
                v47 = v46 + 32 * v44;
                v48 = *(_DWORD *)v47;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v47;
                *v38 = *(_OWORD *)(v47 + 4);
                v49 = *(_DWORD *)v47;
                if (v49 > 8)
                  goto LABEL_77;
                if (((1 << v49) & 0x38) != 0)
                  break;
                if (((1 << v49) & 0xC4) != 0)
                {
                  *v39 = *(_QWORD *)(v46 + 32 * v44 + 24);
                }
                else if (v49 == 8)
                {
                  *v39 = 0;
                  v50 = *(_DWORD **)(v46 + 32 * v44 + 24);
                  if (v50)
                    *v50 += 2;
                  goto LABEL_86;
                }
LABEL_77:
                v45 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v45;
                ++v44;
                if (v48 != 82)
                {
                  while (1)
                  {
                    if (v48 != 8)
                    {
                      *(_DWORD *)v461 = v48;
                      v463[0] = 1;
                      WGSL::toString(8);
                      if (v463[0] != 1)
                        goto LABEL_916;
                      WGSL::toString(*(int *)v461);
                      v487 = "Expected a ";
                      v488.n128_u64[0] = 12;
                      v481 = ", but got a ";
                      v482.n128_u64[0] = 13;
                      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v487, (uint64_t *)&v468, (uint64_t)&v481, (uint64_t *)&v465, &v473);
                      if (!v473)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x182500D54);
                      }
                      v61 = v465;
                      v465 = 0;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 != 2)
                        {
                          *(_DWORD *)v61 -= 2;
                          goto LABEL_109;
                        }
                        WTF::StringImpl::destroy();
                        v62 = v468;
                        v468 = 0;
                        if (v62)
                        {
LABEL_127:
                          if (*(_DWORD *)v62 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v62 -= 2;
                        }
                      }
                      else
                      {
LABEL_109:
                        v62 = v468;
                        v468 = 0;
                        if (v62)
                          goto LABEL_127;
                      }
                      v71 = v42 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v42) << 32);
                      *(_QWORD *)v478 = v473;
                      goto LABEL_131;
                    }
                    *(_DWORD *)v461 = 8;
                    *(_OWORD *)&v461[4] = *v38;
                    v52 = (_DWORD *)*v39;
                    if (*v39)
                      *v52 += 2;
                    v462 = (uint64_t)v52;
                    v463[0] = 0;
                    v53 = *(_DWORD *)(a2 + 36);
                    v54 = *(_DWORD *)(a2 + 40) + 1;
                    do
                    {
                      *(_DWORD *)(a2 + 40) = v54;
                      if (v53 <= v54)
                        goto LABEL_917;
                      v56 = *(_QWORD *)(a2 + 24);
                      v57 = v56 + 32 * v54;
                      v58 = *(_DWORD *)v57;
                      *(_DWORD *)(a2 + 56) = *(_DWORD *)v57;
                      *v38 = *(_OWORD *)(v57 + 4);
                      v59 = *(_DWORD *)v57;
                      if (v59 <= 8)
                      {
                        if (((1 << v59) & 0x38) != 0)
                        {
                          v60 = *(_DWORD **)(v56 + 32 * v54 + 24);
LABEL_103:
                          *v39 = (uint64_t)v60;
                          goto LABEL_94;
                        }
                        if (((1 << v59) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v56 + 32 * v54 + 24);
                          goto LABEL_94;
                        }
                        if (v59 == 8)
                        {
                          *v39 = 0;
                          v60 = *(_DWORD **)(v56 + 32 * v54 + 24);
                          if (v60)
                            *v60 += 2;
                          goto LABEL_103;
                        }
                      }
LABEL_94:
                      v55 = *(_DWORD *)(a2 + 68);
                      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                      *(_DWORD *)(a2 + 96) = v55;
                      ++v54;
                    }
                    while (v58 == 82);
                    if (WGSL::parseLanguageFeature(&v462))
                    {
                      if (*(_DWORD *)(a2 + 56) != 48)
                      {
                        v51 = 4;
                        goto LABEL_132;
                      }
                      v63 = *(_DWORD *)(a2 + 36);
                      v64 = *(_DWORD *)(a2 + 40) + 1;
                      while (1)
                      {
                        *(_DWORD *)(a2 + 40) = v64;
                        if (v63 <= v64)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182500D0CLL);
                        }
                        v66 = *(_QWORD *)(a2 + 24);
                        v67 = v66 + 32 * v64;
                        v68 = *(_DWORD *)v67;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v67;
                        *v38 = *(_OWORD *)(v67 + 4);
                        v69 = *(_DWORD *)v67;
                        if (v69 > 8)
                          goto LABEL_115;
                        if (((1 << v69) & 0x38) != 0)
                          break;
                        if (((1 << v69) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v66 + 32 * v64 + 24);
                        }
                        else if (v69 == 8)
                        {
                          *v39 = 0;
                          v70 = *(_DWORD **)(v66 + 32 * v64 + 24);
                          if (v70)
                            *v70 += 2;
                          goto LABEL_124;
                        }
LABEL_115:
                        v65 = *(_DWORD *)(a2 + 68);
                        result.n128_u64[0] = *(_QWORD *)(a2 + 60);
                        *(_QWORD *)(a2 + 88) = result.n128_u64[0];
                        *(_DWORD *)(a2 + 96) = v65;
                        ++v64;
                        if (v68 != 82)
                        {
                          v51 = 0;
                          goto LABEL_132;
                        }
                      }
                      v70 = *(_DWORD **)(v66 + 32 * v64 + 24);
LABEL_124:
                      *v39 = (uint64_t)v70;
                      goto LABEL_115;
                    }
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v71 = v42 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v42) << 32);
LABEL_131:
                    *(_QWORD *)&v478[8] = v41;
                    *(_QWORD *)&v478[16] = v71;
                    v51 = 1;
                    LOBYTE(v479) = 1;
LABEL_132:
                    if (v463[0] != -1)
                      ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v463[0]])(&v487, v461);
                    if (v51)
                    {
                      if (v51 != 4)
                      {
                        if ((_BYTE)v479)
                        {
                          v438 = *(char **)v478;
LABEL_914:
                          if (v438)
                            goto LABEL_905;
LABEL_915:
                          result = *(__n128 *)&v478[8];
                          *v453 = *(__n128 *)&v478[8];
                          *(_QWORD *)a1 = 0;
                          *(_BYTE *)(a1 + 24) = 1;
                          return result;
                        }
                        goto LABEL_72;
                      }
                      v93 = *(_DWORD *)(a2 + 56);
                      if (v93 == 73)
                      {
LABEL_171:
                        v94 = *(_DWORD *)(a2 + 36);
                        v95 = *(_DWORD *)(a2 + 40) + 1;
                        while (1)
                        {
                          *(_DWORD *)(a2 + 40) = v95;
                          if (v94 <= v95)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x182500D3CLL);
                          }
                          v97 = *(_QWORD *)(a2 + 24);
                          v98 = v97 + 32 * v95;
                          v99 = *(_DWORD *)v98;
                          *(_DWORD *)(a2 + 56) = *(_DWORD *)v98;
                          *v38 = *(_OWORD *)(v98 + 4);
                          v100 = *(_DWORD *)v98;
                          if (v100 > 8)
                            goto LABEL_173;
                          if (((1 << v100) & 0x38) != 0)
                            break;
                          if (((1 << v100) & 0xC4) != 0)
                          {
                            *v39 = *(_QWORD *)(v97 + 32 * v95 + 24);
                          }
                          else if (v100 == 8)
                          {
                            *v39 = 0;
                            v101 = *(_DWORD **)(v97 + 32 * v95 + 24);
                            if (v101)
                              *v101 += 2;
                            goto LABEL_182;
                          }
LABEL_173:
                          v96 = *(_DWORD *)(a2 + 68);
                          result.n128_u64[0] = *(_QWORD *)(a2 + 60);
                          *(_QWORD *)(a2 + 88) = result.n128_u64[0];
                          *(_DWORD *)(a2 + 96) = v96;
                          ++v95;
                          if (v99 != 82)
                            goto LABEL_72;
                        }
                        v101 = *(_DWORD **)(v97 + 32 * v95 + 24);
LABEL_182:
                        *v39 = (uint64_t)v101;
                        goto LABEL_173;
                      }
                      WGSL::toString(73);
                      WGSL::toString(v93);
                      *(_QWORD *)v461 = "Expected a ";
                      *(_QWORD *)&v461[8] = 12;
                      v487 = ", but got a ";
                      v488.n128_u64[0] = 13;
                      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v455, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                      if (!v481)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x182500E74);
                      }
                      v436 = (_DWORD *)v490;
                      *(_QWORD *)&v490 = 0;
                      if (v436)
                      {
                        if (*v436 != 2)
                        {
                          *v436 -= 2;
                          goto LABEL_897;
                        }
                        WTF::StringImpl::destroy();
                        v437 = v455;
                        v455 = 0;
                        if (v437)
                        {
LABEL_910:
                          if (*(_DWORD *)v437 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v437 -= 2;
                        }
                      }
                      else
                      {
LABEL_897:
                        v437 = v455;
                        v455 = 0;
                        if (v437)
                          goto LABEL_910;
                      }
                      v441 = v42 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v42) << 32);
                      v438 = (char *)v481;
                      *(_QWORD *)&v478[8] = v41;
                      *(_QWORD *)&v478[16] = v441;
                      LOBYTE(v479) = 1;
                      goto LABEL_914;
                    }
                    v48 = *(_DWORD *)(a2 + 56);
                    if (v48 == 73)
                      goto LABEL_171;
                  }
                }
              }
              v50 = *(_DWORD **)(v46 + 32 * v44 + 24);
LABEL_86:
              *v39 = (uint64_t)v50;
              goto LABEL_77;
            }
            v161 = (__n128 *)&v456;
            v162 = off_1E0FD7648;
LABEL_311:
            while (2)
            {
              if (v40 != 73)
              {
                if (v40 == 1)
                {
                  *(_BYTE *)a1 = 0;
                  *(_BYTE *)(a1 + 24) = 0;
                  return result;
                }
                v163 = *(const char **)(a2 + 88);
                v164 = *(unsigned int *)(a2 + 96);
                v165 = *(_DWORD *)(a2 + 56);
                if (v165 != 10)
                {
                  if (v165 == 14)
                  {
                    WGSL::Parser<WGSL::Lexer<char16_t>>::parseConstAssert((uint64_t)v461, a2);
                    v176 = v462;
                    if ((_DWORD)v462)
                    {
                      if ((_DWORD)v462 != 1)
                        goto LABEL_916;
                      v177 = *(const char **)v461;
                      if (*(_QWORD *)v461)
                        **(_DWORD **)v461 += 2;
                      *v161 = *(__n128 *)&v461[8];
                    }
                    else
                    {
                      v177 = *(const char **)v461;
                    }
                    v455 = v177;
                    v458 = v176;
                    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7218[v176])(v478, v461);
                    goto LABEL_870;
                  }
                  if (v165 == 13)
                  {
                    *(_QWORD *)v478 = 0;
                    *(_QWORD *)&v478[8] = 0;
                    WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableWithAttributes((uint64_t)v461, a2, (uint64_t *)v478);
                    if (*(_QWORD *)v478)
                      WTF::fastFree(*(WTF **)v478, v166);
                    v167 = v462;
                    if ((_DWORD)v462)
                    {
                      if ((_DWORD)v462 != 1)
                        goto LABEL_916;
                      v168 = *(const char **)v461;
                      if (*(_QWORD *)v461)
                        **(_DWORD **)v461 += 2;
                      *v161 = *(__n128 *)&v461[8];
LABEL_410:
                      v455 = v168;
                      v458 = v167;
                      goto LABEL_487;
                    }
                    v191 = *(_DWORD *)(a2 + 56);
                    if (v191 == 73)
                    {
                      v192 = *(_DWORD *)(a2 + 36);
                      v193 = *(_DWORD *)(a2 + 40) + 1;
                      while (1)
                      {
                        *(_DWORD *)(a2 + 40) = v193;
                        if (v192 <= v193)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182500D74);
                        }
                        v195 = *(_QWORD *)(a2 + 24);
                        v196 = v195 + 32 * v193;
                        v197 = *(_DWORD *)v196;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v196;
                        *v38 = *(_OWORD *)(v196 + 4);
                        v198 = *(_DWORD *)v196;
                        if (v198 > 8)
                          goto LABEL_368;
                        if (((1 << v198) & 0x38) != 0)
                          break;
                        if (((1 << v198) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v195 + 32 * v193 + 24);
                        }
                        else if (v198 == 8)
                        {
                          *v39 = 0;
                          v199 = *(_DWORD **)(v195 + 32 * v193 + 24);
                          if (v199)
                            *v199 += 2;
                          goto LABEL_377;
                        }
LABEL_368:
                        v194 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v194;
                        ++v193;
                        if (v197 != 82)
                        {
                          v168 = *(const char **)v461;
                          goto LABEL_410;
                        }
                      }
                      v199 = *(_DWORD **)(v195 + 32 * v193 + 24);
LABEL_377:
                      *v39 = (uint64_t)v199;
                      goto LABEL_368;
                    }
                    WGSL::toString(73);
                    WGSL::toString(v191);
                    *(_QWORD *)v478 = "Expected a ";
                    *(_QWORD *)&v478[8] = 12;
                    v487 = ", but got a ";
                    v488.n128_u64[0] = 13;
                    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v478, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v468, &v481);
                    if (!v481)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x182500DFCLL);
                    }
                    v211 = v468;
                    v468 = 0;
                    if (v211)
                    {
                      if (*(_DWORD *)v211 != 2)
                      {
                        *(_DWORD *)v211 -= 2;
                        goto LABEL_401;
                      }
                      WTF::StringImpl::destroy();
                      v212 = v473;
                      v473 = 0;
                      if (v212)
                      {
LABEL_483:
                        if (*(_DWORD *)v212 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *(_DWORD *)v212 -= 2;
                      }
                    }
                    else
                    {
LABEL_401:
                      v212 = v473;
                      v473 = 0;
                      if (v212)
                        goto LABEL_483;
                    }
                    v256 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                    v455 = v481;
                    v456 = v163;
                    v457 = v256;
                    v458 = 1;
LABEL_487:
                    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7040[v167])(v478, v461);
                    v162 = off_1E0FD7648;
                    goto LABEL_870;
                  }
                  WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(&v468, a2);
                  if (v470)
                  {
                    if (v470 != 1)
                      goto LABEL_916;
                    v186 = v468;
                    if (v468)
                      *(_DWORD *)v468 += 2;
                    result = v469;
                    *v161 = v469;
                    v455 = v186;
                    v458 = 1;
                    v187 = v470;
                    if (v470 != -1)
                      goto LABEL_869;
                    goto LABEL_870;
                  }
                  switch(*(_DWORD *)(a2 + 56))
                  {
                    case 0x17:
                      v225 = *(const char **)(a2 + 88);
                      v447 = *(unsigned int *)(a2 + 96);
                      v226 = *(_DWORD *)(a2 + 36);
                      v227 = *(_DWORD *)(a2 + 40) + 1;
                      while (1)
                      {
                        *(_DWORD *)(a2 + 40) = v227;
                        if (v226 <= v227)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182500D84);
                        }
                        v229 = *(_QWORD *)(a2 + 24);
                        v230 = v229 + 32 * v227;
                        v231 = *(_DWORD *)v230;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v230;
                        *v38 = *(_OWORD *)(v230 + 4);
                        v232 = *(_DWORD *)v230;
                        if (v232 > 8)
                          goto LABEL_435;
                        if (((1 << v232) & 0x38) != 0)
                          break;
                        if (((1 << v232) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v229 + 32 * v227 + 24);
                        }
                        else if (v232 == 8)
                        {
                          *v39 = 0;
                          v233 = *(_DWORD **)(v229 + 32 * v227 + 24);
                          if (v233)
                            *v233 += 2;
                          goto LABEL_444;
                        }
LABEL_435:
                        v228 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v228;
                        ++v227;
                        if (v231 != 82)
                        {
                          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v478, a2);
                          if (v480)
                          {
                            if (v480 != 1)
                              goto LABEL_916;
                            v244 = *(const char **)v478;
                            if (*(_QWORD *)v478)
                              **(_DWORD **)v478 += 2;
                            v466 = *(__n128 *)&v478[8];
                            v465 = v244;
                            v467 = 1;
                            v245 = 1;
LABEL_861:
                            ((void (*)(_BYTE *, _BYTE *))off_1E0FD6FE8[v245])(v461, v478);
LABEL_862:
                            v424 = v467;
                            if (v467)
                            {
                              if (v467 != 1)
                                goto LABEL_916;
                              v425 = v465;
                              if (v465)
                                *(_DWORD *)v465 += 2;
                              *v161 = v466;
                            }
                            else
                            {
                              v425 = v465;
                            }
                            v455 = v425;
                            v458 = v424;
                            ((void (*)(_BYTE *, const char **))off_1E0FD7648[v424])(v461, &v465);
                            v187 = v470;
                            if (v470 != -1)
LABEL_869:
                              ((void (*)(_BYTE *, const char **))off_1E0FD7638[v187])(v461, &v468);
LABEL_870:
                            v426 = v458;
                            if (v458)
                            {
                              if (v458 != 1)
                                goto LABEL_916;
                              v427 = v455;
                              if (v455)
                                *(_DWORD *)v455 += 2;
                              result = *v161;
                              *v453 = *v161;
                              *(_QWORD *)a1 = v427;
                              *(_BYTE *)(a1 + 24) = 1;
                              v428 = v458;
                              if (v458 != -1)
LABEL_875:
                                ((void (*)(_BYTE *, const char **))off_1E0FD7648[v428])(v461, &v455);
                            }
                            else
                            {
                              v429 = *(_QWORD *)a2;
                              v430 = *(unsigned int *)(*(_QWORD *)a2 + 76);
                              if ((_DWORD)v430 == *(_DWORD *)(*(_QWORD *)a2 + 72))
                              {
                                v431 = (const char **)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v429 + 64, v430 + 1, (unint64_t)&v455);
                                v430 = *(unsigned int *)(v429 + 76);
                                v432 = *(_QWORD *)(v429 + 64);
                                v433 = *v431;
                              }
                              else
                              {
                                v432 = *(_QWORD *)(v429 + 64);
                                v433 = v455;
                              }
                              *(_QWORD *)(v432 + 8 * v430) = v433;
                              ++*(_DWORD *)(v429 + 76);
                              v428 = v458;
                              if (v458 != -1)
                                goto LABEL_875;
                            }
                            if (v426)
                              return result;
                            v40 = *(_DWORD *)(a2 + 56);
                            goto LABEL_311;
                          }
                          v443 = v225;
                          v261 = *(_DWORD *)(a2 + 56);
                          if (v261 != 67)
                          {
                            WGSL::toString(67);
                            WGSL::toString(v261);
                            *(_QWORD *)v461 = "Expected a ";
                            *(_QWORD *)&v461[8] = 12;
                            v487 = ", but got a ";
                            v488.n128_u64[0] = 13;
                            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                            if (!v481)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x182500E1CLL);
                            }
                            v279 = (_DWORD *)v490;
                            *(_QWORD *)&v490 = 0;
                            if (v279)
                            {
                              if (*v279 == 2)
                                WTF::StringImpl::destroy();
                              else
                                *v279 -= 2;
                            }
                            v373 = v473;
                            v473 = 0;
                            if (v373)
                            {
                              if (*(_DWORD *)v373 == 2)
                                WTF::StringImpl::destroy();
                              else
                                *(_DWORD *)v373 -= 2;
                            }
                            v245 = 0;
                            v375 = v447 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v447) << 32);
                            v465 = v481;
                            v466.n128_u64[0] = (unint64_t)v443;
                            v466.n128_u64[1] = v375;
                            v467 = 1;
                            goto LABEL_861;
                          }
                          v262 = *(_DWORD *)(a2 + 36);
                          v263 = *(_DWORD *)(a2 + 40) + 1;
                          while (2)
                          {
                            *(_DWORD *)(a2 + 40) = v263;
                            if (v262 <= v263)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x182500DDCLL);
                            }
                            v265 = *(_QWORD *)(a2 + 24);
                            v266 = v265 + 32 * v263;
                            v267 = *(_DWORD *)v266;
                            *(_DWORD *)(a2 + 56) = *(_DWORD *)v266;
                            *v38 = *(_OWORD *)(v266 + 4);
                            v268 = *(_DWORD *)v266;
                            if (v268 <= 8)
                            {
                              if (((1 << v268) & 0x38) != 0)
                              {
                                v269 = *(_DWORD **)(v265 + 32 * v263 + 24);
                                goto LABEL_520;
                              }
                              if (((1 << v268) & 0xC4) != 0)
                              {
                                *v39 = *(_QWORD *)(v265 + 32 * v263 + 24);
                              }
                              else if (v268 == 8)
                              {
                                *v39 = 0;
                                v269 = *(_DWORD **)(v265 + 32 * v263 + 24);
                                if (v269)
                                  *v269 += 2;
LABEL_520:
                                *v39 = (uint64_t)v269;
                              }
                            }
                            v264 = *(_DWORD *)(a2 + 68);
                            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                            *(_DWORD *)(a2 + 96) = v264;
                            ++v263;
                            if (v267 == 82)
                              continue;
                            break;
                          }
                          v281 = 0;
                          v282 = 0;
                          v476 = 0;
                          v477 = 0;
                          while (2)
                          {
                            if (*(_DWORD *)(a2 + 56) == 68)
                            {
                              v465 = (const char *)v449;
                              v467 = 1;
                              v162 = off_1E0FD7648;
                            }
                            else
                            {
                              v283 = *(_QWORD *)(a2 + 88);
                              v284 = *(unsigned int *)(a2 + 96);
                              WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(&v487, a2);
                              if (v489)
                              {
                                if (v489 != 1)
                                  goto LABEL_916;
                                v285 = v487;
                                if (v487)
                                  *(_DWORD *)v487 += 2;
                                v474 = v488;
                                v473 = v285;
                                v475 = 1;
                                v286 = 1;
                                goto LABEL_596;
                              }
                              WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v461, a2);
                              if (v463[0])
                              {
                                if (v463[0] != 1)
                                  goto LABEL_916;
                                v287 = *(const char **)v461;
                                if (*(_QWORD *)v461)
                                  **(_DWORD **)v461 += 2;
                                v474 = *(__n128 *)&v461[8];
                                v473 = v287;
                                v475 = 1;
                                v288 = 1;
                                goto LABEL_595;
                              }
                              v446 = v284;
                              v289 = v161;
                              v290 = v282;
                              v291 = v281;
                              v292 = *(_DWORD *)(a2 + 56);
                              if (v292 != 47)
                              {
                                WGSL::toString(47);
                                WGSL::toString(v292);
                                v481 = "Expected a ";
                                v482.n128_u64[0] = 12;
                                *(_QWORD *)&v490 = ", but got a ";
                                *((_QWORD *)&v490 + 1) = 13;
                                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v481, (uint64_t *)&v485, (uint64_t)&v490, (uint64_t *)&v484, &v486);
                                if (!v486)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x182500E2CLL);
                                }
                                v301 = v484;
                                v484 = 0;
                                v281 = v291;
                                v282 = v290;
                                v161 = v289;
                                if (v301)
                                {
                                  if (*v301 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *v301 -= 2;
                                }
                                v310 = v485;
                                v485 = 0;
                                if (v310)
                                {
                                  if (*v310 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *v310 -= 2;
                                }
                                v288 = 0;
                                v311 = v446 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v446) << 32);
                                v473 = v486;
                                v474.n128_u64[0] = v283;
                                v474.n128_u64[1] = v311;
                                v475 = 1;
                                goto LABEL_595;
                              }
                              v293 = *(_DWORD *)(a2 + 36);
                              v294 = *(_DWORD *)(a2 + 40) + 1;
                              v281 = v291;
                              v282 = v290;
                              v161 = v289;
                              while (2)
                              {
                                *(_DWORD *)(a2 + 40) = v294;
                                if (v293 <= v294)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x182500DECLL);
                                }
                                v296 = *(_QWORD *)(a2 + 24);
                                v297 = v296 + 32 * v294;
                                v298 = *(_DWORD *)v297;
                                *(_DWORD *)(a2 + 56) = *(_DWORD *)v297;
                                *v38 = *(_OWORD *)(v297 + 4);
                                v299 = *(_DWORD *)v297;
                                if (v299 <= 8)
                                {
                                  if (((1 << v299) & 0x38) != 0)
                                  {
                                    v300 = *(_DWORD **)(v296 + 32 * v294 + 24);
                                    goto LABEL_569;
                                  }
                                  if (((1 << v299) & 0xC4) != 0)
                                  {
                                    *v39 = *(_QWORD *)(v296 + 32 * v294 + 24);
                                  }
                                  else if (v299 == 8)
                                  {
                                    *v39 = 0;
                                    v300 = *(_DWORD **)(v296 + 32 * v294 + 24);
                                    if (v300)
                                      *v300 += 2;
LABEL_569:
                                    *v39 = (uint64_t)v300;
                                  }
                                }
                                v295 = *(_DWORD *)(a2 + 68);
                                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                                *(_DWORD *)(a2 + 96) = v295;
                                ++v294;
                                if (v298 == 82)
                                  continue;
                                break;
                              }
                              WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeName((uint64_t)&v481, a2);
                              if (v483)
                              {
                                if (v483 != 1)
                                  goto LABEL_916;
                                v302 = v481;
                                if (v481)
                                  *(_DWORD *)v481 += 2;
                                v474 = v482;
                                v473 = v302;
                                v475 = 1;
                                v303 = 1;
LABEL_582:
                                ((void (*)(__int128 *, const char **))off_1E0FD71D8[v303])(&v490, &v481);
                                v288 = v463[0];
                                if (v463[0] == -1)
                                  goto LABEL_583;
LABEL_595:
                                ((void (*)(const char **, _BYTE *))off_1E0FD6FE8[v288])(&v481, v461);
                                v286 = v489;
                                if (v489 != -1)
                                  goto LABEL_596;
LABEL_584:
                                v307 = v475;
                                if (v475)
                                  goto LABEL_585;
LABEL_597:
                                if ((_DWORD)v282 == (_DWORD)v477)
                                {
                                  v312 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v476, v282 + 1, (unint64_t)&v473);
                                  v313 = HIDWORD(v477);
                                  v281 = v476;
                                  *((_QWORD *)v476 + HIDWORD(v477)) = *v312;
                                }
                                else
                                {
                                  *((_QWORD *)v281 + v282) = v473;
                                  v313 = HIDWORD(v477);
                                }
                                v282 = (v313 + 1);
                                HIDWORD(v477) = v282;
                                if (v282 < 0x100)
                                {
                                  if (*(_DWORD *)(a2 + 56) != 48)
                                  {
                                    v309 = 7;
                                    goto LABEL_616;
                                  }
                                  v314 = *(_DWORD *)(a2 + 36);
                                  v315 = *(_DWORD *)(a2 + 40) + 1;
                                  while (1)
                                  {
                                    *(_DWORD *)(a2 + 40) = v315;
                                    if (v314 <= v315)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x182500DA4);
                                    }
                                    v317 = *(_QWORD *)(a2 + 24);
                                    v318 = v317 + 32 * v315;
                                    v319 = *(_DWORD *)v318;
                                    *(_DWORD *)(a2 + 56) = *(_DWORD *)v318;
                                    *v38 = *(_OWORD *)(v318 + 4);
                                    v320 = *(_DWORD *)v318;
                                    if (v320 > 8)
                                      goto LABEL_604;
                                    if (((1 << v320) & 0x38) != 0)
                                      break;
                                    if (((1 << v320) & 0xC4) != 0)
                                    {
                                      *v39 = *(_QWORD *)(v317 + 32 * v315 + 24);
                                    }
                                    else if (v320 == 8)
                                    {
                                      *v39 = 0;
                                      v321 = *(_DWORD **)(v317 + 32 * v315 + 24);
                                      if (v321)
                                        *v321 += 2;
                                      goto LABEL_613;
                                    }
LABEL_604:
                                    v316 = *(_DWORD *)(a2 + 68);
                                    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                                    *(_DWORD *)(a2 + 96) = v316;
                                    ++v315;
                                    if (v319 != 82)
                                    {
                                      v309 = 0;
                                      goto LABEL_616;
                                    }
                                  }
                                  v321 = *(_DWORD **)(v317 + 32 * v315 + 24);
LABEL_613:
                                  *v39 = (uint64_t)v321;
                                  goto LABEL_604;
                                }
                                WTF::String::number((WTF::String *)0xFF);
                                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"function cannot have more than ", 32, (uint64_t *)&v472, (int8x16_t *)" parameters", 12, v461);
                                v322 = v447 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v447) << 32);
                                v449 = *(_QWORD *)v461;
                                v466.n128_u64[0] = (unint64_t)v443;
                                v466.n128_u64[1] = v322;
                                *(_QWORD *)v461 = 0;
                                v323 = v472;
                                v472 = 0;
                                if (v323)
                                {
                                  if (*v323 != 2)
                                  {
                                    *v323 -= 2;
                                    goto LABEL_621;
                                  }
                                  WTF::StringImpl::destroy();
                                  v309 = 1;
                                }
                                else
                                {
LABEL_621:
                                  v309 = 1;
                                }
                              }
                              else
                              {
                                v304 = *(_QWORD **)(a2 + 8);
                                v305 = *(_DWORD *)(a2 + 96) - v446;
                                *(_QWORD *)&v490 = v283;
                                *((_QWORD *)&v490 + 1) = __PAIR64__(v305, v446);
                                LOBYTE(v486) = 0;
                                v473 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>(v304, &v490, (uint64_t)v461, (uint64_t *)&v481, (uint64_t *)&v487, (char *)&v486);
                                v475 = 0;
                                v303 = v483;
                                if (v483 != -1)
                                  goto LABEL_582;
                                v288 = v463[0];
                                if (v463[0] != -1)
                                  goto LABEL_595;
LABEL_583:
                                v286 = v489;
                                if (v489 == -1)
                                  goto LABEL_584;
LABEL_596:
                                ((void (*)(_BYTE *, const char **))off_1E0FD7638[v286])(v461, &v487);
                                v307 = v475;
                                if (!v475)
                                  goto LABEL_597;
LABEL_585:
                                if (v307 != 1)
                                  goto LABEL_916;
                                v308 = v473;
                                if (v473)
                                  *(_DWORD *)v473 += 2;
                                v449 = (uint64_t)v308;
                                v466 = v474;
                                v309 = 1;
                              }
LABEL_616:
                              if (v475 != -1)
                                ((void (*)(_BYTE *, const char **))off_1E0FD7448[v475])(v461, &v473);
                              if (!v309)
                                continue;
                              v162 = off_1E0FD7648;
                              if (v309 != 7)
                              {
                                v465 = (const char *)v449;
LABEL_857:
                                v467 = 1;
                                goto LABEL_858;
                              }
                              v370 = v281;
                              v465 = (const char *)v449;
                              v467 = 1;
                              v371 = *(_DWORD *)(a2 + 56);
                              if (v371 != 68)
                              {
                                WGSL::toString(68);
                                WGSL::toString(v371);
                                *(_QWORD *)v461 = "Expected a ";
                                *(_QWORD *)&v461[8] = 12;
                                v487 = ", but got a ";
                                v488.n128_u64[0] = 13;
                                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                                if (!v481)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x182500E44);
                                }
                                v372 = (_DWORD *)v490;
                                *(_QWORD *)&v490 = 0;
                                v281 = v370;
                                if (v372)
                                {
                                  if (*v372 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *v372 -= 2;
                                }
                                v422 = v473;
                                v473 = 0;
                                if (v422)
                                {
                                  if (*(_DWORD *)v422 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *(_DWORD *)v422 -= 2;
                                }
                                v423 = v447 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v447) << 32);
                                v465 = v481;
                                v466.n128_u64[0] = (unint64_t)v443;
                                v466.n128_u64[1] = v423;
                                goto LABEL_857;
                              }
                            }
                            break;
                          }
                          v386 = *(_DWORD *)(a2 + 36);
                          LODWORD(v387) = *(_DWORD *)(a2 + 40);
                          v388 = v387 + 2;
                          while (2)
                          {
                            v387 = (v387 + 1);
                            *(_DWORD *)(a2 + 40) = v387;
                            if (v386 <= v387)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x182500E54);
                            }
                            v390 = v388;
                            v391 = *(_QWORD *)(a2 + 24);
                            v392 = v391 + 32 * v387;
                            v393 = *(_DWORD *)v392;
                            *(_DWORD *)(a2 + 56) = *(_DWORD *)v392;
                            *v38 = *(_OWORD *)(v392 + 4);
                            v394 = *(_DWORD *)v392;
                            if (v394 <= 8)
                            {
                              if (((1 << v394) & 0x38) != 0)
                              {
                                v395 = *(_DWORD **)(v391 + 32 * v387 + 24);
                                goto LABEL_779;
                              }
                              if (((1 << v394) & 0xC4) != 0)
                              {
                                *v39 = *(_QWORD *)(v391 + 32 * v387 + 24);
                              }
                              else if (v394 == 8)
                              {
                                *v39 = 0;
                                v395 = *(_DWORD **)(v391 + 32 * v387 + 24);
                                if (v395)
                                  *v395 += 2;
LABEL_779:
                                *v39 = (uint64_t)v395;
                              }
                            }
                            v389 = *(_DWORD *)(a2 + 68);
                            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                            *(_DWORD *)(a2 + 96) = v389;
                            v388 = v390 + 1;
                            if (v393 == 82)
                              continue;
                            break;
                          }
                          v396 = 0;
                          v481 = 0;
                          v482.n128_u64[0] = 0;
                          v473 = 0;
                          if (v393 != 39)
                            goto LABEL_781;
                          while (2)
                          {
                            *(_DWORD *)(a2 + 40) = v390;
                            if (v386 <= v390)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x182500E5CLL);
                            }
                            v400 = v391 + 32 * v390;
                            v401 = *(_DWORD *)v400;
                            *(_DWORD *)(a2 + 56) = *(_DWORD *)v400;
                            *v38 = *(_OWORD *)(v400 + 4);
                            v402 = *(_DWORD *)v400;
                            if (v402 <= 8)
                            {
                              if (((1 << v402) & 0x38) != 0)
                              {
                                v403 = *(_DWORD **)(v391 + 32 * v390 + 24);
                                goto LABEL_796;
                              }
                              if (((1 << v402) & 0xC4) != 0)
                              {
                                *v39 = *(_QWORD *)(v391 + 32 * v390 + 24);
                              }
                              else if (v402 == 8)
                              {
                                *v39 = 0;
                                v403 = *(_DWORD **)(v391 + 32 * v390 + 24);
                                if (v403)
                                  *v403 += 2;
LABEL_796:
                                *v39 = (uint64_t)v403;
                              }
                            }
                            v399 = *(_DWORD *)(a2 + 68);
                            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                            *(_DWORD *)(a2 + 96) = v399;
                            ++v390;
                            if (v401 != 82)
                            {
                              WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(v461, a2);
                              if ((_DWORD)v462)
                              {
                                if ((_DWORD)v462 == 1)
                                {
                                  v404 = *(char **)v461;
                                  if (*(_QWORD *)v461)
                                  {
                                    v405 = **(_DWORD **)v461;
                                    **(_DWORD **)v461 += 2;
                                    v466 = *(__n128 *)&v461[8];
                                    v465 = v404;
                                    v467 = 1;
                                    if (v405)
                                      *(_DWORD *)v404 = v405;
                                    else
                                      WTF::StringImpl::destroy();
                                    v281 = v476;
                                  }
                                  else
                                  {
                                    v466 = *(__n128 *)&v461[8];
                                    v465 = 0;
                                    v467 = 1;
                                    v281 = v476;
                                  }
                                  goto LABEL_858;
                                }
LABEL_916:
                                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_917:
                                __break(0xC471u);
                                JUMPOUT(0x182500CFCLL);
                              }
                              v396 = *(WTF **)v461;
                              v481 = *(const char **)v461;
                              v482.n128_u64[0] = *(_QWORD *)&v461[8];
                              WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeName((uint64_t)&v487, a2);
                              v411 = v489;
                              if (v489)
                              {
                                if (v489 != 1)
                                  goto LABEL_916;
                                v412 = v487;
                                if (v487)
                                  *(_DWORD *)v487 += 2;
                                v466 = v488;
                                v465 = v412;
                                v467 = 1;
                              }
                              else
                              {
                                v473 = v487;
                              }
                              ((void (*)(__int128 *, const char **))off_1E0FD71D8[v411])(&v490, &v487);
                              if ((_DWORD)v411)
                              {
LABEL_848:
                                if (v396)
                                {
                                  v481 = 0;
                                  v482.n128_u32[0] = 0;
                                  WTF::fastFree(v396, v306);
                                }
                                v281 = v476;
LABEL_858:
                                if (v281)
                                {
                                  v476 = 0;
                                  LODWORD(v477) = 0;
                                  WTF::fastFree(v281, v306);
                                }
                                v245 = v480;
                                if (v480 != -1)
                                  goto LABEL_861;
                                goto LABEL_862;
                              }
LABEL_781:
                              WGSL::Parser<WGSL::Lexer<char16_t>>::parseCompoundStatement((uint64_t)v461, a2);
                              v397 = v462;
                              if ((_DWORD)v462)
                              {
                                if ((_DWORD)v462 != 1)
                                  goto LABEL_916;
                                v398 = *(const char **)v461;
                                if (*(_QWORD *)v461)
                                  **(_DWORD **)v461 += 2;
                                v466 = *(__n128 *)&v461[8];
                                v465 = v398;
                                v467 = 1;
                              }
                              else
                              {
                                v409 = *(_QWORD **)(a2 + 8);
                                v410 = *(_DWORD *)(a2 + 96) - v447;
                                v487 = v443;
                                v488.n128_u64[0] = __PAIR64__(v410, v447);
                                v465 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::Function,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::Parameter,0ul>,WGSL::AST::Expression *,std::reference_wrapper<WGSL::AST::CompoundStatement>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(v409, (__int128 *)&v487, (uint64_t)v478, (uint64_t *)&v476, (uint64_t *)&v473, v461, (uint64_t *)&v468, (uint64_t *)&v481);
                                v467 = 0;
                                v396 = (WTF *)v481;
                              }
                              ((void (*)(const char **, _BYTE *))off_1E0FD7628[v397])(&v487, v461);
                              goto LABEL_848;
                            }
                            continue;
                          }
                        }
                      }
                      v233 = *(_DWORD **)(v229 + 32 * v227 + 24);
LABEL_444:
                      *v39 = (uint64_t)v233;
                      goto LABEL_435;
                    case 0x1C:
                    case 0x22:
                      WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableWithAttributes((uint64_t)v461, a2, (uint64_t *)&v468);
                      v200 = v462;
                      if ((_DWORD)v462)
                      {
                        if ((_DWORD)v462 != 1)
                          goto LABEL_916;
                        v201 = *(const char **)v461;
                        if (*(_QWORD *)v461)
                          **(_DWORD **)v461 += 2;
                        *v161 = *(__n128 *)&v461[8];
                        goto LABEL_535;
                      }
                      v247 = *(_DWORD *)(a2 + 56);
                      if (v247 != 73)
                      {
                        WGSL::toString(73);
                        WGSL::toString(v247);
                        *(_QWORD *)v478 = "Expected a ";
                        *(_QWORD *)&v478[8] = 12;
                        v487 = ", but got a ";
                        v488.n128_u64[0] = 13;
                        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v478, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v465, &v481);
                        if (!v481)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182500E14);
                        }
                        v260 = v465;
                        v465 = 0;
                        if (v260)
                        {
                          if (*(_DWORD *)v260 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v260 -= 2;
                        }
                        v367 = v473;
                        v473 = 0;
                        if (v367)
                        {
                          if (*(_DWORD *)v367 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v367 -= 2;
                        }
                        v368 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                        v455 = v481;
                        v456 = v163;
                        v457 = v368;
                        v458 = 1;
LABEL_730:
                        ((void (*)(_BYTE *, _BYTE *))off_1E0FD7040[v200])(v478, v461);
                        v162 = off_1E0FD7648;
                        v187 = v470;
                        if (v470 != -1)
                          goto LABEL_869;
                        goto LABEL_870;
                      }
                      v248 = *(_DWORD *)(a2 + 36);
                      v249 = *(_DWORD *)(a2 + 40) + 1;
                      while (1)
                      {
                        *(_DWORD *)(a2 + 40) = v249;
                        if (v248 <= v249)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182500DACLL);
                        }
                        v251 = *(_QWORD *)(a2 + 24);
                        v252 = v251 + 32 * v249;
                        v253 = *(_DWORD *)v252;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v252;
                        *v38 = *(_OWORD *)(v252 + 4);
                        v254 = *(_DWORD *)v252;
                        if (v254 > 8)
                          goto LABEL_472;
                        if (((1 << v254) & 0x38) != 0)
                          break;
                        if (((1 << v254) & 0xC4) != 0)
                        {
                          *v39 = *(_QWORD *)(v251 + 32 * v249 + 24);
                        }
                        else if (v254 == 8)
                        {
                          *v39 = 0;
                          v255 = *(_DWORD **)(v251 + 32 * v249 + 24);
                          if (v255)
                            *v255 += 2;
                          goto LABEL_481;
                        }
LABEL_472:
                        v250 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v250;
                        ++v249;
                        if (v253 != 82)
                        {
                          v201 = *(const char **)v461;
LABEL_535:
                          v455 = v201;
                          v458 = v200;
                          goto LABEL_730;
                        }
                      }
                      v255 = *(_DWORD **)(v251 + 32 * v249 + 24);
LABEL_481:
                      *v39 = (uint64_t)v255;
                      goto LABEL_472;
                    case 0x1F:
                      v234 = *(_QWORD *)(a2 + 88);
                      v445 = *(unsigned int *)(a2 + 96);
                      v235 = *(_DWORD *)(a2 + 36);
                      v236 = *(_DWORD *)(a2 + 40) + 1;
                      break;
                    default:
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v243 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                      v456 = v163;
                      v457 = v243;
                      v458 = 1;
                      v187 = v470;
                      if (v470 == -1)
                        goto LABEL_870;
                      goto LABEL_869;
                  }
                  while (2)
                  {
                    *(_DWORD *)(a2 + 40) = v236;
                    if (v235 <= v236)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x182500D8CLL);
                    }
                    v238 = *(_QWORD *)(a2 + 24);
                    v239 = v238 + 32 * v236;
                    v240 = *(_DWORD *)v239;
                    *(_DWORD *)(a2 + 56) = *(_DWORD *)v239;
                    *v38 = *(_OWORD *)(v239 + 4);
                    v241 = *(_DWORD *)v239;
                    if (v241 <= 8)
                    {
                      if (((1 << v241) & 0x38) != 0)
                      {
                        v242 = *(_DWORD **)(v238 + 32 * v236 + 24);
                        goto LABEL_456;
                      }
                      if (((1 << v241) & 0xC4) != 0)
                      {
                        *v39 = *(_QWORD *)(v238 + 32 * v236 + 24);
                      }
                      else if (v241 == 8)
                      {
                        *v39 = 0;
                        v242 = *(_DWORD **)(v238 + 32 * v236 + 24);
                        if (v242)
                          *v242 += 2;
LABEL_456:
                        *v39 = (uint64_t)v242;
                      }
                    }
                    v237 = *(_DWORD *)(a2 + 68);
                    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                    *(_DWORD *)(a2 + 96) = v237;
                    ++v236;
                    if (v240 != 82)
                    {
                      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v478, a2);
                      if (v480)
                      {
                        if (v480 != 1)
                          goto LABEL_916;
                        v246 = *(const char **)v478;
                        if (*(_QWORD *)v478)
                          **(_DWORD **)v478 += 2;
                        v466 = *(__n128 *)&v478[8];
                        v465 = v246;
                        v467 = 1;
                        goto LABEL_836;
                      }
                      v270 = *(_DWORD *)(a2 + 56);
                      if (v270 != 43)
                      {
                        WGSL::toString(43);
                        WGSL::toString(v270);
                        *(_QWORD *)v461 = "Expected a ";
                        *(_QWORD *)&v461[8] = 12;
                        v487 = ", but got a ";
                        v488.n128_u64[0] = 13;
                        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                        if (!v481)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182500E24);
                        }
                        v280 = (_DWORD *)v490;
                        *(_QWORD *)&v490 = 0;
                        if (v280)
                        {
                          if (*v280 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *v280 -= 2;
                        }
                        v374 = v473;
                        v473 = 0;
                        if (v374)
                        {
                          if (*(_DWORD *)v374 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v374 -= 2;
                        }
                        v376 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                        v465 = v481;
                        v466.n128_u64[0] = v234;
                        v466.n128_u64[1] = v376;
                        v467 = 1;
                        goto LABEL_836;
                      }
                      v271 = *(_DWORD *)(a2 + 36);
                      v272 = *(_DWORD *)(a2 + 40) + 1;
                      while (2)
                      {
                        *(_DWORD *)(a2 + 40) = v272;
                        if (v271 <= v272)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182500DE4);
                        }
                        v274 = *(_QWORD *)(a2 + 24);
                        v275 = v274 + 32 * v272;
                        v276 = *(_DWORD *)v275;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v275;
                        *v38 = *(_OWORD *)(v275 + 4);
                        v277 = *(_DWORD *)v275;
                        if (v277 <= 8)
                        {
                          if (((1 << v277) & 0x38) != 0)
                          {
                            v278 = *(_DWORD **)(v274 + 32 * v272 + 24);
                            goto LABEL_533;
                          }
                          if (((1 << v277) & 0xC4) != 0)
                          {
                            *v39 = *(_QWORD *)(v274 + 32 * v272 + 24);
                          }
                          else if (v277 == 8)
                          {
                            *v39 = 0;
                            v278 = *(_DWORD **)(v274 + 32 * v272 + 24);
                            if (v278)
                              *v278 += 2;
LABEL_533:
                            *v39 = (uint64_t)v278;
                          }
                        }
                        v273 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v273;
                        ++v272;
                        if (v276 == 82)
                          continue;
                        break;
                      }
                      v442 = v234;
                      v444 = 0;
                      v448 = 0;
                      v476 = 0;
                      v477 = 0;
                      v472 = 0;
                      v449 = v467;
                      while (2)
                      {
                        if (*(_DWORD *)(a2 + 56) == 44)
                        {
                          v369 = v442;
                          goto LABEL_753;
                        }
                        v327 = *(_QWORD *)(a2 + 88);
                        v328 = *(unsigned int *)(a2 + 96);
                        WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(&v487, a2);
                        if (v489)
                        {
                          if (v489 != 1)
                            goto LABEL_916;
                          v329 = v487;
                          if (v487)
                            *(_DWORD *)v487 += 2;
                          v474 = v488;
                          v473 = v329;
                          v475 = 1;
                          v330 = 1;
                          goto LABEL_676;
                        }
                        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v461, a2);
                        if (v463[0])
                        {
                          if (v463[0] != 1)
                            goto LABEL_916;
                          v331 = *(const char **)v461;
                          if (*(_QWORD *)v461)
                            **(_DWORD **)v461 += 2;
                          v474 = *(__n128 *)&v461[8];
                          v473 = v331;
                          v475 = 1;
                          v332 = 1;
                          goto LABEL_675;
                        }
                        v333 = *(_DWORD *)(a2 + 56);
                        if (v333 != 47)
                        {
                          WGSL::toString(47);
                          WGSL::toString(v333);
                          v481 = "Expected a ";
                          v482.n128_u64[0] = 12;
                          *(_QWORD *)&v490 = ", but got a ";
                          *((_QWORD *)&v490 + 1) = 13;
                          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v481, (uint64_t *)&v485, (uint64_t)&v490, (uint64_t *)&v484, &v486);
                          if (!v486)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x182500E34);
                          }
                          v342 = v484;
                          v484 = 0;
                          if (v342)
                          {
                            if (*v342 == 2)
                              WTF::StringImpl::destroy();
                            else
                              *v342 -= 2;
                          }
                          v348 = v485;
                          v485 = 0;
                          if (v348)
                          {
                            if (*v348 == 2)
                              WTF::StringImpl::destroy();
                            else
                              *v348 -= 2;
                          }
                          v332 = 0;
                          v349 = v328 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v328) << 32);
                          v473 = v486;
                          v474.n128_u64[0] = v327;
                          v474.n128_u64[1] = v349;
                          v475 = 1;
                          goto LABEL_675;
                        }
                        v334 = *(_DWORD *)(a2 + 36);
                        v335 = *(_DWORD *)(a2 + 40) + 1;
LABEL_642:
                        *(_DWORD *)(a2 + 40) = v335;
                        if (v334 <= v335)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182500DF4);
                        }
                        v337 = *(_QWORD *)(a2 + 24);
                        v338 = v337 + 32 * v335;
                        v339 = *(_DWORD *)v338;
                        *(_DWORD *)(a2 + 56) = *(_DWORD *)v338;
                        *v38 = *(_OWORD *)(v338 + 4);
                        v340 = *(_DWORD *)v338;
                        if (v340 <= 8)
                        {
                          if (((1 << v340) & 0x38) != 0)
                          {
                            v341 = *(_DWORD **)(v337 + 32 * v335 + 24);
                            goto LABEL_650;
                          }
                          if (((1 << v340) & 0xC4) != 0)
                          {
                            *v39 = *(_QWORD *)(v337 + 32 * v335 + 24);
                          }
                          else if (v340 == 8)
                          {
                            *v39 = 0;
                            v341 = *(_DWORD **)(v337 + 32 * v335 + 24);
                            if (v341)
                              *v341 += 2;
LABEL_650:
                            *v39 = (uint64_t)v341;
                          }
                        }
                        v336 = *(_DWORD *)(a2 + 68);
                        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                        *(_DWORD *)(a2 + 96) = v336;
                        ++v335;
                        if (v339 != 82)
                        {
                          WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeName((uint64_t)&v481, a2);
                          if (v483)
                          {
                            if (v483 != 1)
                              goto LABEL_916;
                            v343 = v481;
                            if (v481)
                              *(_DWORD *)v481 += 2;
                            v474 = v482;
                            v473 = v343;
                            v475 = 1;
                            v344 = 1;
LABEL_663:
                            ((void (*)(__int128 *, const char **))off_1E0FD71D8[v344])(&v490, &v481);
                            v332 = v463[0];
                            if (v463[0] == -1)
                              goto LABEL_664;
LABEL_675:
                            ((void (*)(const char **, _BYTE *))off_1E0FD6FE8[v332])(&v481, v461);
                            v330 = v489;
                            if (v489 != -1)
                              goto LABEL_676;
LABEL_665:
                            v347 = v475;
                            if (v475)
                              goto LABEL_666;
                          }
                          else
                          {
                            v345 = *(_QWORD **)(a2 + 8);
                            v346 = *(_DWORD *)(a2 + 96) - v328;
                            *(_QWORD *)&v490 = v327;
                            *((_QWORD *)&v490 + 1) = __PAIR64__(v346, v328);
                            v473 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::StructureMember,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(v345, &v490, (uint64_t)v461, (uint64_t *)&v481, (uint64_t *)&v487);
                            v475 = 0;
                            v344 = v483;
                            if (v483 != -1)
                              goto LABEL_663;
                            v332 = v463[0];
                            if (v463[0] != -1)
                              goto LABEL_675;
LABEL_664:
                            v330 = v489;
                            if (v489 == -1)
                              goto LABEL_665;
LABEL_676:
                            ((void (*)(_BYTE *, const char **))off_1E0FD7638[v330])(v461, &v487);
                            v347 = v475;
                            if (v475)
                            {
LABEL_666:
                              if (v347 != 1)
                                goto LABEL_916;
                              v162 = (uint64_t (**)())v473;
                              if (v473)
                                *(_DWORD *)v473 += 2;
                              v466 = v474;
                              v449 = 1;
                              v324 = 1;
                              v325 = 1;
                              goto LABEL_625;
                            }
                          }
                          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)v461, (uint64_t *)&v472, (const WTF::StringImpl **)v473 + 6);
                          if (v461[16])
                          {
                            if (v448 == (_DWORD)v477)
                            {
                              v350 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v476, v448 + 1, (unint64_t)&v473);
                              v351 = HIDWORD(v477);
                              v444 = (uint64_t)v476;
                              *((_QWORD *)v476 + HIDWORD(v477)) = *v350;
                            }
                            else
                            {
                              *(_QWORD *)(v444 + 8 * v448) = v473;
                              v351 = HIDWORD(v477);
                            }
                            HIDWORD(v477) = v351 + 1;
                            v448 = v351 + 1;
                            if ((v351 + 1) < 0x400)
                            {
                              if (*(_DWORD *)(a2 + 56) != 48)
                              {
                                v324 = 7;
                                v325 = v475;
                                if (v475 == -1)
                                  goto LABEL_626;
                                goto LABEL_625;
                              }
                              v355 = *(_DWORD *)(a2 + 36);
                              v356 = *(_DWORD *)(a2 + 40) + 1;
                              while (2)
                              {
                                *(_DWORD *)(a2 + 40) = v356;
                                if (v355 <= v356)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x182500DB4);
                                }
                                v358 = *(_QWORD *)(a2 + 24);
                                v359 = v358 + 32 * v356;
                                v360 = *(_DWORD *)v359;
                                *(_DWORD *)(a2 + 56) = *(_DWORD *)v359;
                                *v38 = *(_OWORD *)(v359 + 4);
                                v361 = *(_DWORD *)v359;
                                if (v361 <= 8)
                                {
                                  if (((1 << v361) & 0x38) != 0)
                                  {
                                    v362 = *(_DWORD **)(v358 + 32 * v356 + 24);
                                    goto LABEL_702;
                                  }
                                  if (((1 << v361) & 0xC4) != 0)
                                  {
                                    *v39 = *(_QWORD *)(v358 + 32 * v356 + 24);
                                  }
                                  else if (v361 == 8)
                                  {
                                    *v39 = 0;
                                    v362 = *(_DWORD **)(v358 + 32 * v356 + 24);
                                    if (v362)
                                      *v362 += 2;
LABEL_702:
                                    *v39 = (uint64_t)v362;
                                  }
                                }
                                v357 = *(_DWORD *)(a2 + 68);
                                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                                *(_DWORD *)(a2 + 96) = v357;
                                ++v356;
                                if (v360 != 82)
                                {
                                  v324 = 0;
                                  v325 = v475;
                                  if (v475 == -1)
                                    goto LABEL_626;
LABEL_625:
                                  ((void (*)(_BYTE *, const char **))off_1E0FD73F0[v325])(v461, &v473);
                                  goto LABEL_626;
                                }
                                continue;
                              }
                            }
                            WTF::String::number((WTF::String *)0x3FF);
                            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"struct cannot have more than ", 30, (uint64_t *)&v471, (int8x16_t *)" members", 9, &v487);
                            v363 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                            v162 = (uint64_t (**)())v487;
                            v466.n128_u64[0] = v442;
                            v466.n128_u64[1] = v363;
                            v487 = 0;
                            v364 = v471;
                            v471 = 0;
                            if (v364)
                            {
                              if (*v364 != 2)
                              {
                                *v364 -= 2;
                                goto LABEL_712;
                              }
LABEL_711:
                              WTF::StringImpl::destroy();
                            }
                          }
                          else
                          {
                            v352 = (_DWORD *)*((_QWORD *)v473 + 6);
                            if (v352)
                              *v352 += 2;
                            v353 = v479;
                            if (v479)
                              *v479 += 2;
                            WTF::tryMakeString<WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral,WGSL::AST::Identifier,char>((uint64_t)&v487, (int8x16_t *)"duplicate member '", 19, (uint64_t)v352, (int8x16_t *)"' in struct '", 14, (uint64_t)v353, 39);
                            v162 = (uint64_t (**)())v487;
                            if (!v487)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x182500E3CLL);
                            }
                            v354 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                            v466.n128_u64[0] = v442;
                            v466.n128_u64[1] = v354;
                            if (v353)
                            {
                              if (*v353 == 2)
                                WTF::StringImpl::destroy();
                              else
                                *v353 -= 2;
                            }
                            if (v352)
                            {
                              if (*v352 != 2)
                              {
                                *v352 -= 2;
                                goto LABEL_712;
                              }
                              goto LABEL_711;
                            }
                          }
LABEL_712:
                          v449 = 1;
                          v324 = 1;
                          v325 = v475;
                          if (v475 != -1)
                            goto LABEL_625;
LABEL_626:
                          if (v324)
                          {
                            v369 = v442;
                            if (v324 != 7)
                            {
                              v465 = (const char *)v162;
                              v467 = v449;
LABEL_805:
                              v162 = off_1E0FD7648;
                              goto LABEL_824;
                            }
LABEL_753:
                            v465 = (const char *)v162;
                            v467 = v449;
                            if (!v448)
                            {
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v406 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                              v466.n128_u64[0] = v369;
                              v466.n128_u64[1] = v406;
                              v467 = 1;
                              goto LABEL_805;
                            }
                            v377 = *(_DWORD *)(a2 + 56);
                            if (v377 != 44)
                            {
                              WGSL::toString(44);
                              WGSL::toString(v377);
                              *(_QWORD *)v461 = "Expected a ";
                              *(_QWORD *)&v461[8] = 12;
                              v487 = ", but got a ";
                              v488.n128_u64[0] = 13;
                              WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v473, (uint64_t)&v487, (uint64_t *)&v490, &v481);
                              if (!v481)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x182500E64);
                              }
                              v407 = (_DWORD *)v490;
                              *(_QWORD *)&v490 = 0;
                              v162 = off_1E0FD7648;
                              if (v407)
                              {
                                if (*v407 == 2)
                                  WTF::StringImpl::destroy();
                                else
                                  *v407 -= 2;
                              }
                              v413 = v473;
                              v473 = 0;
                              if (v413)
                              {
                                if (*(_DWORD *)v413 == 2)
                                  WTF::StringImpl::destroy();
                                else
                                  *(_DWORD *)v413 -= 2;
                              }
                              v414 = v445 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v445) << 32);
                              v465 = v481;
                              v466.n128_u64[0] = v369;
                              v466.n128_u64[1] = v414;
                              v467 = 1;
LABEL_824:
                              v415 = (uint64_t)v472;
                              if (v472)
                              {
                                v416 = *(v472 - 1);
                                if ((_DWORD)v416)
                                {
                                  v417 = (_DWORD **)v472;
                                  do
                                  {
                                    v418 = *v417;
                                    if (*v417 != (_DWORD *)-1)
                                    {
                                      *v417 = 0;
                                      if (v418)
                                      {
                                        if (*v418 == 2)
                                          WTF::StringImpl::destroy();
                                        else
                                          *v418 -= 2;
                                      }
                                    }
                                    ++v417;
                                    --v416;
                                  }
                                  while (v416);
                                }
                                WTF::fastFree((WTF *)(v415 - 16), v326);
                              }
                              v419 = v476;
                              if (v476)
                              {
                                v476 = 0;
                                LODWORD(v477) = 0;
                                WTF::fastFree(v419, v326);
                              }
LABEL_836:
                              if (v480 != -1)
                                ((void (*)(_BYTE *, _BYTE *))off_1E0FD6FE8[v480])(v461, v478);
                              v420 = v467;
                              if (v467)
                              {
                                if (v467 != 1)
                                  goto LABEL_916;
                                v421 = v465;
                                if (v465)
                                  *(_DWORD *)v465 += 2;
                                *v161 = v466;
                              }
                              else
                              {
                                v421 = v465;
                              }
                              v455 = v421;
                              v458 = v420;
                              ((void (*)(_BYTE *, const char **))off_1E0FD7400[v420])(v461, &v465);
                              v187 = v470;
                              if (v470 != -1)
                                goto LABEL_869;
                              goto LABEL_870;
                            }
                            v378 = *(_DWORD *)(a2 + 36);
                            v379 = *(_DWORD *)(a2 + 40) + 1;
                            v162 = off_1E0FD7648;
                            while (2)
                            {
                              *(_DWORD *)(a2 + 40) = v379;
                              if (v378 <= v379)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x182500E4CLL);
                              }
                              v381 = *(_QWORD *)(a2 + 24);
                              v382 = v381 + 32 * v379;
                              v383 = *(_DWORD *)v382;
                              *(_DWORD *)(a2 + 56) = *(_DWORD *)v382;
                              *v38 = *(_OWORD *)(v382 + 4);
                              v384 = *(_DWORD *)v382;
                              if (v384 <= 8)
                              {
                                if (((1 << v384) & 0x38) != 0)
                                {
                                  v385 = *(_DWORD **)(v381 + 32 * v379 + 24);
                                  goto LABEL_766;
                                }
                                if (((1 << v384) & 0xC4) != 0)
                                {
                                  *v39 = *(_QWORD *)(v381 + 32 * v379 + 24);
                                }
                                else if (v384 == 8)
                                {
                                  *v39 = 0;
                                  v385 = *(_DWORD **)(v381 + 32 * v379 + 24);
                                  if (v385)
                                    *v385 += 2;
LABEL_766:
                                  *v39 = (uint64_t)v385;
                                }
                              }
                              v380 = *(_DWORD *)(a2 + 68);
                              *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                              *(_DWORD *)(a2 + 96) = v380;
                              ++v379;
                              if (v383 != 82)
                              {
                                v408 = *(_QWORD **)(a2 + 8);
                                *(_QWORD *)v461 = v369;
                                *(_DWORD *)&v461[8] = v445;
                                *(_DWORD *)&v461[12] = v380 - v445;
                                LOBYTE(v487) = 0;
                                v465 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(v408, v461, (uint64_t)v478, (uint64_t *)&v476, (uint64_t *)&v468, (char *)&v487);
                                v467 = 0;
                                goto LABEL_824;
                              }
                              continue;
                            }
                          }
                          continue;
                        }
                        goto LABEL_642;
                      }
                    }
                    continue;
                  }
                }
                v178 = *(_DWORD *)(a2 + 36);
                v179 = *(_DWORD *)(a2 + 40) + 1;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v179;
                  if (v178 <= v179)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x182500D64);
                  }
                  v181 = *(_QWORD *)(a2 + 24);
                  v182 = v181 + 32 * v179;
                  v183 = *(_DWORD *)v182;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v182;
                  *v38 = *(_OWORD *)(v182 + 4);
                  v184 = *(_DWORD *)v182;
                  if (v184 <= 8)
                  {
                    if (((1 << v184) & 0x38) != 0)
                    {
                      v185 = *(_DWORD **)(v181 + 32 * v179 + 24);
                      goto LABEL_351;
                    }
                    if (((1 << v184) & 0xC4) != 0)
                    {
                      *v39 = *(_QWORD *)(v181 + 32 * v179 + 24);
                    }
                    else if (v184 == 8)
                    {
                      *v39 = 0;
                      v185 = *(_DWORD **)(v181 + 32 * v179 + 24);
                      if (v185)
                        *v185 += 2;
LABEL_351:
                      *v39 = (uint64_t)v185;
                    }
                  }
                  v180 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v180;
                  ++v179;
                  if (v183 == 82)
                    continue;
                  break;
                }
                WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v461, a2);
                if (v463[0])
                {
                  if (v463[0] != 1)
                    goto LABEL_916;
                  v188 = *(const char **)v461;
                  if (*(_QWORD *)v461)
                    **(_DWORD **)v461 += 2;
                  v488 = *(__n128 *)&v461[8];
                  v487 = v188;
                  v489 = 1;
                  v189 = 1;
                  v190 = 1;
                  goto LABEL_493;
                }
                v202 = *(_DWORD *)(a2 + 56);
                if (v202 == 49)
                {
                  v203 = *(_DWORD *)(a2 + 36);
                  v204 = *(_DWORD *)(a2 + 40) + 1;
                  while (1)
                  {
                    *(_DWORD *)(a2 + 40) = v204;
                    if (v203 <= v204)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x182500D7CLL);
                    }
                    v206 = *(_QWORD *)(a2 + 24);
                    v207 = v206 + 32 * v204;
                    v208 = *(_DWORD *)v207;
                    *(_DWORD *)(a2 + 56) = *(_DWORD *)v207;
                    *v38 = *(_OWORD *)(v207 + 4);
                    v209 = *(_DWORD *)v207;
                    if (v209 > 8)
                      goto LABEL_387;
                    if (((1 << v209) & 0x38) != 0)
                      break;
                    if (((1 << v209) & 0xC4) != 0)
                    {
                      *v39 = *(_QWORD *)(v206 + 32 * v204 + 24);
                    }
                    else if (v209 == 8)
                    {
                      *v39 = 0;
                      v210 = *(_DWORD **)(v206 + 32 * v204 + 24);
                      if (v210)
                        *v210 += 2;
                      goto LABEL_396;
                    }
LABEL_387:
                    v205 = *(_DWORD *)(a2 + 68);
                    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                    *(_DWORD *)(a2 + 96) = v205;
                    ++v204;
                    if (v208 != 82)
                    {
                      WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeName((uint64_t)v478, a2);
                      if ((_DWORD)v479)
                      {
                        if ((_DWORD)v479 != 1)
                          goto LABEL_916;
                        v188 = *(const char **)v478;
                        if (*(_QWORD *)v478)
                          **(_DWORD **)v478 += 2;
                        v488 = *(__n128 *)&v478[8];
                        v487 = v188;
                        v489 = 1;
                        v189 = 1;
                        v215 = v479;
                        if ((_DWORD)v479 != -1)
                          goto LABEL_416;
                        goto LABEL_417;
                      }
                      v216 = *(_DWORD *)(a2 + 56);
                      if (v216 == 73)
                      {
                        v217 = *(_DWORD *)(a2 + 36);
                        v218 = *(_DWORD *)(a2 + 40) + 1;
                        while (1)
                        {
                          *(_DWORD *)(a2 + 40) = v218;
                          if (v217 <= v218)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x182500D9CLL);
                          }
                          v220 = *(_QWORD *)(a2 + 24);
                          v221 = v220 + 32 * v218;
                          v222 = *(_DWORD *)v221;
                          *(_DWORD *)(a2 + 56) = *(_DWORD *)v221;
                          *v38 = *(_OWORD *)(v221 + 4);
                          v223 = *(_DWORD *)v221;
                          if (v223 > 8)
                            goto LABEL_423;
                          if (((1 << v223) & 0x38) != 0)
                            break;
                          if (((1 << v223) & 0xC4) != 0)
                          {
                            *v39 = *(_QWORD *)(v220 + 32 * v218 + 24);
                          }
                          else if (v223 == 8)
                          {
                            *v39 = 0;
                            v224 = *(_DWORD **)(v220 + 32 * v218 + 24);
                            if (v224)
                              *v224 += 2;
                            goto LABEL_432;
                          }
LABEL_423:
                          v219 = *(_DWORD *)(a2 + 68);
                          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                          *(_DWORD *)(a2 + 96) = v219;
                          ++v218;
                          if (v222 != 82)
                          {
                            v259 = *(_QWORD **)(a2 + 8);
                            v481 = v163;
                            v482.n128_u32[0] = v164;
                            v482.n128_u32[1] = v219 - v164;
                            v188 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::TypeAlias,WGSL::SourceSpan,WGSL::AST::Identifier,std::reference_wrapper<WGSL::AST::Expression>,void>(v259, &v481, (uint64_t)v461, (uint64_t *)v478);
                            v189 = 0;
                            v487 = v188;
                            v489 = 0;
                            v215 = v479;
                            if ((_DWORD)v479 == -1)
                              goto LABEL_417;
LABEL_416:
                            ((void (*)(const char **, _BYTE *))off_1E0FD71D8[v215])(&v481, v478);
                            goto LABEL_417;
                          }
                        }
                        v224 = *(_DWORD **)(v220 + 32 * v218 + 24);
LABEL_432:
                        *v39 = (uint64_t)v224;
                        goto LABEL_423;
                      }
                      WGSL::toString(73);
                      WGSL::toString(v216);
                      v481 = "Expected a ";
                      v482.n128_u64[0] = 12;
                      v473 = ", but got a ";
                      v474.n128_u64[0] = 13;
                      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v481, (uint64_t *)&v465, (uint64_t)&v473, (uint64_t *)&v490, &v468);
                      if (!v468)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x182500E0CLL);
                      }
                      v258 = (_DWORD *)v490;
                      *(_QWORD *)&v490 = 0;
                      if (v258)
                      {
                        if (*v258 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *v258 -= 2;
                      }
                      v365 = v465;
                      v465 = 0;
                      if (v365)
                      {
                        if (*(_DWORD *)v365 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *(_DWORD *)v365 -= 2;
                      }
                      v188 = v468;
                      v366 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                      v487 = v468;
                      v488.n128_u64[0] = (unint64_t)v163;
                      v488.n128_u64[1] = v366;
                      v489 = 1;
                      v189 = 1;
                      v215 = v479;
                      if ((_DWORD)v479 != -1)
                        goto LABEL_416;
LABEL_417:
                      v190 = v463[0];
                      if (v463[0] == -1)
                      {
                        if (!v189)
                          goto LABEL_497;
                      }
                      else
                      {
LABEL_493:
                        ((void (*)(_BYTE *, _BYTE *))off_1E0FD6FE8[v190])(v478, v461);
                        if (!v189)
                        {
LABEL_497:
                          v455 = v188;
                          v458 = v189;
                          ((void (*)(_BYTE *, const char **))off_1E0FD7648[v189])(v461, &v487);
                          goto LABEL_870;
                        }
                      }
                      if (v188)
                        *(_DWORD *)v188 += 2;
                      *v161 = v488;
                      goto LABEL_497;
                    }
                  }
                  v210 = *(_DWORD **)(v206 + 32 * v204 + 24);
LABEL_396:
                  *v39 = (uint64_t)v210;
                  goto LABEL_387;
                }
                WGSL::toString(49);
                WGSL::toString(v202);
                *(_QWORD *)v478 = "Expected a ";
                *(_QWORD *)&v478[8] = 12;
                v481 = ", but got a ";
                v482.n128_u64[0] = 13;
                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v478, (uint64_t *)&v468, (uint64_t)&v481, (uint64_t *)&v465, &v473);
                if (!v473)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182500E04);
                }
                v213 = v465;
                v465 = 0;
                if (v213)
                {
                  if (*(_DWORD *)v213 != 2)
                  {
                    *(_DWORD *)v213 -= 2;
                    goto LABEL_407;
                  }
                  WTF::StringImpl::destroy();
                  v214 = v468;
                  v468 = 0;
                  if (v214)
                  {
LABEL_489:
                    if (*(_DWORD *)v214 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *(_DWORD *)v214 -= 2;
                  }
                }
                else
                {
LABEL_407:
                  v214 = v468;
                  v468 = 0;
                  if (v214)
                    goto LABEL_489;
                }
                v190 = 0;
                v188 = v473;
                v257 = v164 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v164) << 32);
                v487 = v473;
                v488.n128_u64[0] = (unint64_t)v163;
                v488.n128_u64[1] = v257;
                v489 = 1;
                v189 = 1;
                goto LABEL_493;
              }
              v169 = *(_DWORD *)(a2 + 36);
              v170 = *(_DWORD *)(a2 + 40) + 1;
LABEL_326:
              *(_DWORD *)(a2 + 40) = v170;
              if (v169 <= v170)
              {
                __break(0xC471u);
                JUMPOUT(0x182500D44);
              }
              v172 = *(_QWORD *)(a2 + 24);
              v173 = v172 + 32 * v170;
              v40 = *(_DWORD *)v173;
              *(_DWORD *)(a2 + 56) = *(_DWORD *)v173;
              *v38 = *(_OWORD *)(v173 + 4);
              v174 = *(_DWORD *)v173;
              if (v174 <= 8)
              {
                if (((1 << v174) & 0x38) != 0)
                {
                  v175 = *(_DWORD **)(v172 + 32 * v170 + 24);
                  goto LABEL_334;
                }
                if (((1 << v174) & 0xC4) != 0)
                {
                  *v39 = *(_QWORD *)(v172 + 32 * v170 + 24);
                }
                else if (v174 == 8)
                {
                  *v39 = 0;
                  v175 = *(_DWORD **)(v172 + 32 * v170 + 24);
                  if (v175)
                    *v175 += 2;
LABEL_334:
                  *v39 = (uint64_t)v175;
                }
              }
              v171 = *(_DWORD *)(a2 + 68);
              result.n128_u64[0] = *(_QWORD *)(a2 + 60);
              *(_QWORD *)(a2 + 88) = result.n128_u64[0];
              *(_DWORD *)(a2 + 96) = v171;
              ++v170;
              if (v40 != 82)
                continue;
              goto LABEL_326;
            }
          }
          v72 = *(_QWORD *)(a2 + 88);
          v73 = *(unsigned int *)(a2 + 96);
          v74 = *(_DWORD *)(a2 + 36);
          v75 = *(_DWORD *)(a2 + 40) + 1;
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v75;
            if (v74 <= v75)
            {
              __break(0xC471u);
              JUMPOUT(0x182500D24);
            }
            v77 = *(_QWORD *)(a2 + 24);
            v78 = v77 + 32 * v75;
            v79 = *(_DWORD *)v78;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v78;
            *v38 = *(_OWORD *)(v78 + 4);
            v80 = *(_DWORD *)v78;
            if (v80 <= 8)
            {
              if (((1 << v80) & 0x38) != 0)
              {
                v81 = *(_DWORD **)(v77 + 32 * v75 + 24);
                goto LABEL_148;
              }
              if (((1 << v80) & 0xC4) != 0)
              {
                *v39 = *(_QWORD *)(v77 + 32 * v75 + 24);
              }
              else if (v80 == 8)
              {
                *v39 = 0;
                v81 = *(_DWORD **)(v77 + 32 * v75 + 24);
                if (v81)
                  *v81 += 2;
LABEL_148:
                *v39 = (uint64_t)v81;
              }
            }
            v76 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v76;
            ++v75;
            if (v79 == 82)
              continue;
            break;
          }
          while (2)
          {
            if (v79 != 8)
            {
              *(_DWORD *)v461 = v79;
              v463[0] = 1;
              WGSL::toString(8);
              if (v463[0] != 1)
                goto LABEL_916;
              WGSL::toString(*(int *)v461);
              v487 = "Expected a ";
              v488.n128_u64[0] = 12;
              v481 = ", but got a ";
              v482.n128_u64[0] = 13;
              WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v487, (uint64_t *)&v468, (uint64_t)&v481, (uint64_t *)&v465, &v473);
              if (!v473)
              {
                __break(0xC471u);
                JUMPOUT(0x182500D5CLL);
              }
              v128 = v465;
              v465 = 0;
              if (v128)
              {
                if (*(_DWORD *)v128 == 2)
                {
                  WTF::StringImpl::destroy();
                  v129 = v468;
                  v468 = 0;
                  if (!v129)
                  {
LABEL_244:
                    v134 = v73 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v73) << 32);
                    *(_QWORD *)v478 = v473;
                    goto LABEL_256;
                  }
LABEL_241:
                  if (*(_DWORD *)v129 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *(_DWORD *)v129 -= 2;
                  goto LABEL_244;
                }
                *(_DWORD *)v128 -= 2;
              }
              v129 = v468;
              v468 = 0;
              if (!v129)
                goto LABEL_244;
              goto LABEL_241;
            }
            *(_DWORD *)v461 = 8;
            *(_OWORD *)&v461[4] = *v38;
            v118 = *v39;
            if (*v39)
              *(_DWORD *)v118 += 2;
            v462 = v118;
            v463[0] = 0;
            v119 = *(_DWORD *)(a2 + 36);
            LODWORD(v120) = *(_DWORD *)(a2 + 40);
            v121 = v120 + 2;
            while (2)
            {
              v120 = (v120 + 1);
              *(_DWORD *)(a2 + 40) = v120;
              if (v119 <= v120)
              {
                __break(0xC471u);
                JUMPOUT(0x182500D04);
              }
              v113 = v121;
              v123 = *(_QWORD *)(a2 + 24);
              v124 = v123 + 32 * v120;
              v125 = *(_DWORD *)v124;
              *(_DWORD *)(a2 + 56) = *(_DWORD *)v124;
              *v38 = *(_OWORD *)(v124 + 4);
              v126 = *(_DWORD *)v124;
              if (v126 <= 8)
              {
                if (((1 << v126) & 0x38) != 0)
                {
                  v127 = *(_DWORD **)(v123 + 32 * v120 + 24);
                  goto LABEL_225;
                }
                if (((1 << v126) & 0xC4) != 0)
                {
                  *v39 = *(_QWORD *)(v123 + 32 * v120 + 24);
                }
                else if (v126 == 8)
                {
                  *v39 = 0;
                  v127 = *(_DWORD **)(v123 + 32 * v120 + 24);
                  if (v127)
                    *v127 += 2;
LABEL_225:
                  *v39 = (uint64_t)v127;
                }
              }
              v122 = *(_DWORD *)(a2 + 68);
              result.n128_u64[0] = *(_QWORD *)(a2 + 60);
              *(_QWORD *)(a2 + 88) = result.n128_u64[0];
              *(_DWORD *)(a2 + 96) = v122;
              v121 = v113 + 1;
              if (v125 == 82)
                continue;
              break;
            }
            if (!v118)
              goto LABEL_255;
            v130 = *(_QWORD *)(v118 + 8);
            v131 = *(_DWORD *)(v118 + 4);
            if ((char *)v130 == "f16" || v131 != 3)
            {
              v136 = (char *)v130 == "f16" && v131 == 3;
              if (v136)
              {
                v110 = &(&WGSL::parseExtension(WTF::String const&)::__entries)[3 * !v136];
                goto LABEL_197;
              }
            }
            else
            {
              if ((*(_BYTE *)(v118 + 16) & 4) == 0)
              {
                if (*(_WORD *)v130 != 102)
                  goto LABEL_255;
                v132 = *(_DWORD *)(v130 + 2);
                v12 = v132 == 3538993;
                v133 = v132 != 3538993;
                if (!v12)
                  goto LABEL_255;
LABEL_196:
                v110 = &(&WGSL::parseExtension(WTF::String const&)::__entries)[3 * v133];
LABEL_197:
                *(_BYTE *)(*(_QWORD *)a2 + 31) |= *((_BYTE *)v110 + 16);
                if (v125 != 48)
                {
                  v111 = 4;
                  goto LABEL_257;
                }
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v113;
                  if (v119 <= v113)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x182500D2CLL);
                  }
                  v114 = v123 + 32 * v113;
                  v115 = *(_DWORD *)v114;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v114;
                  *v38 = *(_OWORD *)(v114 + 4);
                  v116 = *(_DWORD *)v114;
                  if (v116 <= 8)
                  {
                    if (((1 << v116) & 0x38) != 0)
                    {
                      v117 = *(_DWORD **)(v123 + 32 * v113 + 24);
                      goto LABEL_209;
                    }
                    if (((1 << v116) & 0xC4) != 0)
                    {
                      *v39 = *(_QWORD *)(v123 + 32 * v113 + 24);
                    }
                    else if (v116 == 8)
                    {
                      *v39 = 0;
                      v117 = *(_DWORD **)(v123 + 32 * v113 + 24);
                      if (v117)
                        *v117 += 2;
LABEL_209:
                      *v39 = (uint64_t)v117;
                    }
                  }
                  v112 = *(_DWORD *)(a2 + 68);
                  result.n128_u64[0] = *(_QWORD *)(a2 + 60);
                  *(_QWORD *)(a2 + 88) = result.n128_u64[0];
                  *(_DWORD *)(a2 + 96) = v112;
                  ++v113;
                  if (v115 != 82)
                  {
                    v111 = 0;
                    goto LABEL_257;
                  }
                  continue;
                }
              }
              if (*(_BYTE *)v130 == 102)
              {
                v137 = *(unsigned __int16 *)(v130 + 1);
                v12 = v137 == 13873;
                v133 = v137 != 13873;
                if (v12)
                  goto LABEL_196;
              }
            }
LABEL_255:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v134 = v73 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v73) << 32);
LABEL_256:
            *(_QWORD *)&v478[8] = v72;
            *(_QWORD *)&v478[16] = v134;
            v111 = 1;
            LOBYTE(v479) = 1;
LABEL_257:
            if (v463[0] != -1)
              ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v463[0]])(&v487, v461);
            if (!v111)
            {
              v79 = *(_DWORD *)(a2 + 56);
              if (v79 != 73)
                continue;
LABEL_264:
              v139 = *(_DWORD *)(a2 + 36);
              v140 = *(_DWORD *)(a2 + 40) + 1;
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v140;
                if (v139 <= v140)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182500D34);
                }
                v142 = *(_QWORD *)(a2 + 24);
                v143 = v142 + 32 * v140;
                v144 = *(_DWORD *)v143;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v143;
                *v38 = *(_OWORD *)(v143 + 4);
                v145 = *(_DWORD *)v143;
                if (v145 <= 8)
                {
                  if (((1 << v145) & 0x38) != 0)
                  {
                    v146 = *(_DWORD **)(v142 + 32 * v140 + 24);
                    goto LABEL_275;
                  }
                  if (((1 << v145) & 0xC4) != 0)
                  {
                    *v39 = *(_QWORD *)(v142 + 32 * v140 + 24);
                  }
                  else if (v145 == 8)
                  {
                    *v39 = 0;
                    v146 = *(_DWORD **)(v142 + 32 * v140 + 24);
                    if (v146)
                      *v146 += 2;
LABEL_275:
                    *v39 = (uint64_t)v146;
                  }
                }
                v141 = *(_DWORD *)(a2 + 68);
                result.n128_u64[0] = *(_QWORD *)(a2 + 60);
                *(_QWORD *)(a2 + 88) = result.n128_u64[0];
                *(_DWORD *)(a2 + 96) = v141;
                ++v140;
                if (v144 != 82)
                  goto LABEL_72;
                continue;
              }
            }
            break;
          }
          if (v111 != 4)
          {
            if ((_BYTE)v479)
            {
              v438 = *(char **)v478;
              goto LABEL_904;
            }
            continue;
          }
          break;
        }
        v138 = *(_DWORD *)(a2 + 56);
        if (v138 == 73)
          goto LABEL_264;
        WGSL::toString(73);
        WGSL::toString(v138);
        *(_QWORD *)v461 = "Expected a ";
        *(_QWORD *)&v461[8] = 12;
        v487 = ", but got a ";
        v488.n128_u64[0] = 13;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v461, (uint64_t *)&v455, (uint64_t)&v487, (uint64_t *)&v490, &v481);
        if (!v481)
        {
          __break(0xC471u);
          JUMPOUT(0x182500E6CLL);
        }
        v434 = (_DWORD *)v490;
        *(_QWORD *)&v490 = 0;
        if (v434)
        {
          if (*v434 != 2)
          {
            *v434 -= 2;
            goto LABEL_891;
          }
          WTF::StringImpl::destroy();
          v435 = v455;
          v455 = 0;
          if (v435)
          {
LABEL_900:
            if (*(_DWORD *)v435 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v435 -= 2;
          }
        }
        else
        {
LABEL_891:
          v435 = v455;
          v455 = 0;
          if (v435)
            goto LABEL_900;
        }
        v439 = v73 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v73) << 32);
        v438 = (char *)v481;
        *(_QWORD *)&v478[8] = v72;
        *(_QWORD *)&v478[16] = v439;
        LOBYTE(v479) = 1;
LABEL_904:
        if (!v438)
          goto LABEL_915;
LABEL_905:
        v440 = *(_DWORD *)v438;
        *(_DWORD *)v438 += 2;
        result = *(__n128 *)&v478[8];
        *v453 = *(__n128 *)&v478[8];
        *(_QWORD *)a1 = v438;
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)v478 = 0;
        if (v440)
          *(_DWORD *)v438 = v440;
        else
          WTF::StringImpl::destroy();
        return result;
      case 0x25:
      case 0x41:
        v23 = *(_QWORD *)&v461[8];
        if (*(_QWORD *)v461 != *(_QWORD *)&v461[8])
        {
          while (1)
          {
            if (v23)
            {
              --v23;
              if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * v23 + 8) != v6)
                goto LABEL_6;
            }
            else
            {
              v23 = v462 - 1;
              if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * v23 + 8) != v6)
                goto LABEL_6;
            }
            *(_QWORD *)&v461[8] = v23;
            if (*(_QWORD *)v461 == v23)
              goto LABEL_6;
          }
        }
        goto LABEL_6;
      case 0x2B:
      case 0x2F:
      case 0x31:
      case 0x49:
        *(_QWORD *)v461 = 0;
        *(_QWORD *)&v461[8] = 0;
        v11 = *(WTF **)&v461[16];
        v12 = v463 == *(_DWORD **)&v461[16] || *(_QWORD *)&v461[16] == 0;
        if (!v12)
        {
          *(_QWORD *)&v461[16] = 0;
          LODWORD(v462) = 0;
          WTF::fastFree(v11, (void *)a2);
        }
        v6 = 0;
        goto LABEL_6;
      case 0x2D:
      case 0x43:
        ++v6;
        goto LABEL_6;
      case 0x2E:
      case 0x44:
        for (i = *(_QWORD *)&v461[8]; *(_QWORD *)v461 != i; *(_QWORD *)&v461[8] = i)
        {
          if (i)
          {
            --i;
            if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * i + 8) != v6)
              break;
          }
          else
          {
            i = v462 - 1;
            if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * i + 8) != v6)
              break;
          }
        }
        if (v6)
          --v6;
        else
          v6 = 0;
        goto LABEL_6;
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
        v13 = *(_QWORD *)&v461[8];
        if (*(_QWORD *)v461 != *(_QWORD *)&v461[8])
        {
          v14 = v462;
          if (*(_QWORD *)&v461[8])
            v14 = *(_QWORD *)&v461[8];
          v15 = v14 - 1;
          v16 = *(_QWORD *)&v461[16];
          if (*(_DWORD *)(*(_QWORD *)&v461[16] + 16 * v15 + 8) == v6)
          {
            if (v8 <= v7)
            {
              __break(0xC471u);
              JUMPOUT(0x182500DCCLL);
            }
            v17 = (_DWORD *)(v9 + 32 * v7);
            v18 = *v17 - 52;
            if (v18 <= 2)
            {
              v19 = dword_1826100D0[v18];
              *v17 = 51;
              v17[8] = v19;
              v20 = v462;
              if (v13)
                v20 = v13;
              v15 = v20 - 1;
            }
            v21 = *(_DWORD **)(v16 + 16 * v15);
            *(_QWORD *)&v461[8] = v15;
            *v21 = 83;
            *v10 = 84;
          }
        }
        goto LABEL_6;
      default:
        goto LABEL_6;
    }
  }
}

_DWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseConstAssert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *result;
  uint64_t v18;
  const char *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  unint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  const char *v37;
  __int128 v38;
  unsigned int v39;
  _DWORD *v40;
  _DWORD *v41;
  _QWORD v42[2];
  __int128 v43;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 56);
  if (v6 != 14)
  {
    WGSL::toString(14);
    WGSL::toString(v6);
    v37 = "Expected a ";
    *(_QWORD *)&v38 = 12;
    *(_QWORD *)&v43 = ", but got a ";
    *((_QWORD *)&v43 + 1) = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v37, (uint64_t *)&v41, (uint64_t)&v43, (uint64_t *)&v40, v42);
    if (!v42[0])
    {
      __break(0xC471u);
      JUMPOUT(0x1825013CCLL);
    }
    v16 = v40;
    v40 = 0;
    if (v16)
    {
      if (*v16 == 2)
      {
        WTF::StringImpl::destroy();
        result = v41;
        v41 = 0;
        if (!result)
        {
LABEL_42:
          v29 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v42[0];
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v29;
          *(_DWORD *)(a1 + 24) = 1;
          return result;
        }
LABEL_39:
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
        goto LABEL_42;
      }
      *v16 -= 2;
    }
    result = v41;
    v41 = 0;
    if (!result)
      goto LABEL_42;
    goto LABEL_39;
  }
  v7 = (_OWORD *)(a2 + 60);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v8 <= v9)
      goto LABEL_59;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v7 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v37, a2);
  v18 = v39;
  if (v39)
  {
    if (v39 == 1)
    {
      v19 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_OWORD *)(a1 + 8) = v38;
      *(_QWORD *)a1 = v19;
LABEL_56:
      *(_DWORD *)(a1 + 24) = 1;
      return (_DWORD *)((uint64_t (*)(__int128 *, const char **))off_1E0FD71D8[v18])(&v43, &v37);
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_59:
    __break(0xC471u);
LABEL_63:
    JUMPOUT(0x1825013BCLL);
  }
  v20 = *(_DWORD *)(a2 + 56);
  if (v20 != 73)
  {
    WGSL::toString(73);
    WGSL::toString(v20);
    *(_QWORD *)&v43 = "Expected a ";
    *((_QWORD *)&v43 + 1) = 12;
    v42[0] = ", but got a ";
    v42[1] = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v43, (uint64_t *)&v35, (uint64_t)v42, (uint64_t *)&v34, &v36);
    if (!v36)
    {
      __break(0xC471u);
      goto LABEL_63;
    }
    v30 = v34;
    v34 = 0;
    if (v30)
    {
      if (*v30 == 2)
      {
        WTF::StringImpl::destroy();
        v31 = v35;
        v35 = 0;
        if (!v31)
        {
LABEL_55:
          v33 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v36;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v33;
          goto LABEL_56;
        }
LABEL_52:
        if (*v31 == 2)
          WTF::StringImpl::destroy();
        else
          *v31 -= 2;
        goto LABEL_55;
      }
      *v30 -= 2;
    }
    v31 = v35;
    v35 = 0;
    if (!v31)
      goto LABEL_55;
    goto LABEL_52;
  }
  v21 = *(_DWORD *)(a2 + 36);
  v22 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v22;
    if (v21 <= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1825013C4);
    }
    v24 = *(_QWORD *)(a2 + 24);
    v25 = v24 + 32 * v22;
    v26 = *(_DWORD *)v25;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v25;
    *v7 = *(_OWORD *)(v25 + 4);
    v27 = *(_DWORD *)v25;
    if (v27 <= 8)
    {
      if (((1 << v27) & 0x38) != 0)
      {
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
LABEL_37:
        *(_QWORD *)(a2 + 80) = v28;
        goto LABEL_28;
      }
      if (((1 << v27) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v24 + 32 * v22 + 24);
        goto LABEL_28;
      }
      if (v27 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
        if (v28)
          *v28 += 2;
        goto LABEL_37;
      }
    }
LABEL_28:
    v23 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v23;
    ++v22;
  }
  while (v26 == 82);
  v32 = *(_QWORD **)(a2 + 8);
  *(_QWORD *)&v43 = v4;
  DWORD2(v43) = v5;
  HIDWORD(v43) = v23 - v5;
  result = WGSL::AST::Builder::construct<WGSL::AST::ConstAssert,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v32, &v43, &v37);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 24) = 0;
  if ((_DWORD)v18 != -1)
    return (_DWORD *)((uint64_t (*)(__int128 *, const char **))off_1E0FD71D8[v18])(&v43, &v37);
  return result;
}

_QWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(_QWORD *result, uint64_t a2)
{
  WTF **v3;
  WTF *v4;
  unsigned int v5;
  _OWORD *v6;
  void *v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  WTF *v13;
  __int128 v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  char v18;

  v3 = (WTF **)result;
  v4 = 0;
  v5 = 0;
  v16 = 0;
  v17 = 0;
  v6 = result + 1;
  do
  {
    if (*(_DWORD *)(a2 + 56) != 40)
    {
      *v3 = v4;
      *((_DWORD *)v3 + 2) = v17;
      *((_DWORD *)v3 + 3) = v5;
      *((_DWORD *)v3 + 6) = 0;
      return result;
    }
    result = WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttribute((uint64_t)&v13, a2);
    v8 = v15;
    if (v15)
    {
      if (v15 != 1)
      {
        v12 = std::__throw_bad_variant_access[abi:sn180100]();
        return (_QWORD *)WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableWithAttributes(v12);
      }
      v9 = v13;
      if (v13)
        *(_DWORD *)v13 += 2;
      *v6 = v14;
      *v3 = v9;
      *((_DWORD *)v3 + 6) = 1;
      v10 = v15;
      if (v15 != -1)
        goto LABEL_14;
    }
    else
    {
      if (v5 != (_DWORD)v17)
      {
        *((_QWORD *)v4 + v5++) = v13;
        HIDWORD(v17) = v5;
        v10 = v15;
        if (v15 == -1)
          continue;
LABEL_14:
        result = (_QWORD *)((uint64_t (*)(char *, WTF **))off_1E0FD73E0[v10])(&v18, &v13);
        continue;
      }
      result = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v16, v5 + 1, (unint64_t)&v13);
      v11 = HIDWORD(v17);
      v4 = v16;
      *((_QWORD *)v16 + HIDWORD(v17)) = *result;
      v5 = v11 + 1;
      HIDWORD(v17) = v11 + 1;
      v10 = v15;
      if (v15 != -1)
        goto LABEL_14;
    }
  }
  while (!v8);
  result = v16;
  if (v16)
    return (_QWORD *)WTF::fastFree(v16, v7);
  return result;
}

uint64_t WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableWithAttributes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  const char *v41;
  _DWORD *v42;
  unsigned __int8 **v43;
  unint64_t v44;
  const char *v45;
  const char *v46;
  _DWORD *v47;
  unint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  const char *v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  char v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _DWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _DWORD *v82;
  _DWORD *v83;
  _BYTE *v84;
  int v85;
  unint64_t v86;
  _DWORD *v87;
  char *v88;
  int v89;
  const char *v90;
  _DWORD *v91;
  char *v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _DWORD *v102;
  const char *v103;
  _DWORD *v104;
  char *v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  _DWORD *v114;
  BOOL v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  unint64_t v120;
  _DWORD *v121;
  unint64_t v122;
  uint64_t v124;
  char v125;
  _DWORD *v126;
  _DWORD *v127;
  const char *v128;
  __int128 v129;
  int v130;
  const char *v131;
  char v132;
  int v133;
  __int128 v134;
  int v135;
  const char *v136;
  __int128 v137;
  int v138;
  const char *v139;
  __int128 v140;
  int v141;
  _DWORD *v142;
  _DWORD *v143;
  const char *v144;
  _BYTE v145[24];
  _DWORD *v146;
  unsigned int v147;
  uint64_t v148[2];
  uint64_t v149[4];

  v5 = *(const char **)(a2 + 88);
  v6 = *(unsigned int *)(a2 + 96);
  v7 = *(unsigned int *)(a2 + 56);
  *(_OWORD *)v145 = *(_OWORD *)(a2 + 60);
  if (v7 > 0x22)
    goto LABEL_24;
  if (((1 << v7) & 0x414002000) == 0)
  {
    if (v7 == 8)
    {
      v19 = *(int **)(a2 + 80);
      if (v19)
      {
        v20 = *v19;
        *v19 += 2;
        v133 = 8;
        v135 = 1;
        if (v20)
          *v19 = v20;
        else
          WTF::StringImpl::destroy();
LABEL_71:
        memset(v145, 0, 20);
        v145[20] = 1;
        WTF::StringBuilder::append();
        WGSL::toString(13);
        v136 = v128;
        v139 = ", ";
        LODWORD(v140) = 2;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)v145, (uint64_t *)&v136, (uint64_t)&v139);
        v45 = v128;
        v128 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v45 -= 2;
        }
        WGSL::TemplateTypes<(WGSL::TokenType)28,(WGSL::TokenType)26,(WGSL::TokenType)34>::appendNameTo((uint64_t)v145);
        WGSL::toString(v7);
        v139 = "], but got a ";
        LODWORD(v140) = 13;
        v136 = v128;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>((WTF::StringBuilder *)v145, (unint64_t *)&v139, (uint64_t *)&v136);
        v46 = v128;
        v128 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
          {
            WTF::StringImpl::destroy();
            v47 = *(_DWORD **)v145;
            if (!*(_QWORD *)v145)
              goto LABEL_81;
            goto LABEL_82;
          }
          *(_DWORD *)v46 -= 2;
        }
        v47 = *(_DWORD **)v145;
        if (!*(_QWORD *)v145)
        {
LABEL_81:
          WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v145);
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)v145);
          v47 = *(_DWORD **)v145;
          if (!*(_QWORD *)v145)
            goto LABEL_83;
        }
LABEL_82:
        *v47 += 2;
LABEL_83:
        v48 = v6 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v6) << 32);
        *(_QWORD *)a1 = v47;
        *(_QWORD *)(a1 + 8) = v5;
        *(_QWORD *)(a1 + 16) = v48;
        *(_DWORD *)(a1 + 24) = 1;
        v49 = *(_DWORD **)&v145[8];
        *(_QWORD *)&v145[8] = 0;
        if (v49)
        {
          if (*v49 == 2)
          {
            WTF::StringImpl::destroy();
            v50 = *(_DWORD **)v145;
            *(_QWORD *)v145 = 0;
            if (!v50)
            {
LABEL_91:
              v51 = 1;
              return ((uint64_t (*)(_BYTE *, int *))off_1E0FD6FF8[v51])(v145, &v133);
            }
LABEL_89:
            if (*v50 == 2)
            {
              WTF::StringImpl::destroy();
              v51 = 1;
              return ((uint64_t (*)(_BYTE *, int *))off_1E0FD6FF8[v51])(v145, &v133);
            }
            *v50 -= 2;
            goto LABEL_91;
          }
          *v49 -= 2;
        }
        v50 = *(_DWORD **)v145;
        *(_QWORD *)v145 = 0;
        if (!v50)
          goto LABEL_91;
        goto LABEL_89;
      }
    }
LABEL_24:
    v133 = v7;
    v135 = 1;
    goto LABEL_71;
  }
  v9 = (_OWORD *)(a2 + 60);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v11;
    if (v10 <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1825027A0);
    }
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v13 + 32 * v11;
    v15 = *(_DWORD *)v14;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
    *v9 = *(_OWORD *)(v14 + 4);
    v16 = *(_DWORD *)v14;
    if (v16 <= 8)
    {
      if (((1 << v16) & 0x38) != 0)
      {
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_14:
        *(_QWORD *)(a2 + 80) = v17;
        goto LABEL_5;
      }
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
        goto LABEL_5;
      }
      if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_14;
      }
    }
LABEL_5:
    v12 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v12;
    ++v11;
  }
  while (v15 == 82);
  v133 = v7;
  v134 = *(_OWORD *)v145;
  v135 = 0;
  switch((_DWORD)v7)
  {
    case 0xD:
      v18 = 0;
      v125 = 1;
      v132 = 0;
      v131 = 0;
      if (*(_DWORD *)(a2 + 56) == 83)
        goto LABEL_26;
      goto LABEL_54;
    case 0x1C:
      v125 = 0;
      v18 = 2;
      v132 = 2;
      v131 = 0;
      if (*(_DWORD *)(a2 + 56) == 83)
        goto LABEL_26;
      goto LABEL_54;
    case 0x1A:
      v125 = 1;
      v18 = 1;
      v132 = 1;
      v131 = 0;
      if (*(_DWORD *)(a2 + 56) == 83)
        goto LABEL_26;
LABEL_54:
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v145, a2);
      v38 = v147;
      if (!v147)
        goto LABEL_196;
LABEL_55:
      if (v38 == 1)
      {
        v39 = *(_QWORD *)v145;
        if (*(_QWORD *)v145)
          **(_DWORD **)v145 += 2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v145[8];
        *(_QWORD *)a1 = v39;
        v40 = 1;
        *(_DWORD *)(a1 + 24) = 1;
        goto LABEL_261;
      }
LABEL_268:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_283;
  }
  v125 = 0;
  v18 = 3;
  v132 = 3;
  v131 = 0;
  if (*(_DWORD *)(a2 + 56) != 83)
    goto LABEL_54;
LABEL_26:
  v21 = *(_QWORD *)(a2 + 88);
  v22 = *(unsigned int *)(a2 + 96);
  v23 = *(_DWORD *)(a2 + 36);
  v24 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v24;
    if (v23 <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x1825027A8);
    }
    v26 = *(_QWORD *)(a2 + 24);
    v27 = v26 + 32 * v24;
    v28 = *(_DWORD *)v27;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v27;
    *v9 = *(_OWORD *)(v27 + 4);
    v29 = *(_DWORD *)v27;
    if (v29 <= 8)
    {
      if (((1 << v29) & 0x38) != 0)
      {
        v30 = *(_DWORD **)(v26 + 32 * v24 + 24);
        goto LABEL_37;
      }
      if (((1 << v29) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v26 + 32 * v24 + 24);
      }
      else if (v29 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v30 = *(_DWORD **)(v26 + 32 * v24 + 24);
        if (v30)
          *v30 += 2;
LABEL_37:
        *(_QWORD *)(a2 + 80) = v30;
      }
    }
    v25 = *(unsigned int *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v25;
    ++v24;
    if (v28 == 82)
      continue;
    break;
  }
  v31 = *(_QWORD *)(a2 + 88);
  v124 = v22;
  if (v28 != 8)
  {
    *(_DWORD *)v145 = v28;
    v147 = 1;
    WGSL::toString(8);
    WGSL::toString(*(int *)v145);
    v139 = "Expected a ";
    *(_QWORD *)&v140 = 12;
    v136 = ", but got a ";
    *(_QWORD *)&v137 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v139, v148, (uint64_t)&v136, (uint64_t *)&v144, v149);
    if (!v149[0])
    {
      __break(0xC471u);
      JUMPOUT(0x1825027E0);
    }
    v41 = v144;
    v144 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy();
        v42 = (_DWORD *)v148[0];
        v148[0] = 0;
        if (!v42)
        {
LABEL_97:
          v44 = v25 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v25) << 32);
          v139 = (const char *)v149[0];
LABEL_98:
          *(_QWORD *)&v140 = v31;
          *((_QWORD *)&v140 + 1) = v44;
          v52 = 1;
          v141 = 1;
          v53 = v147;
          if (v147 == -1)
            goto LABEL_100;
          goto LABEL_99;
        }
LABEL_94:
        if (*v42 == 2)
          WTF::StringImpl::destroy();
        else
          *v42 -= 2;
        goto LABEL_97;
      }
      *(_DWORD *)v41 -= 2;
    }
    v42 = (_DWORD *)v148[0];
    v148[0] = 0;
    if (!v42)
      goto LABEL_97;
    goto LABEL_94;
  }
  *(_DWORD *)v145 = 8;
  *(_OWORD *)&v145[4] = *v9;
  v32 = *(_DWORD **)(a2 + 80);
  if (v32)
    *v32 += 2;
  v146 = v32;
  v147 = 0;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v24;
    if (v23 <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x1825027B0);
    }
    v34 = v26 + 32 * v24;
    v35 = *(_DWORD *)v34;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v34;
    *v9 = *(_OWORD *)(v34 + 4);
    v36 = *(_DWORD *)v34;
    if (v36 <= 8)
    {
      if (((1 << v36) & 0x38) != 0)
      {
        v37 = *(_DWORD **)(v26 + 32 * v24 + 24);
        goto LABEL_52;
      }
      if (((1 << v36) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v26 + 32 * v24 + 24);
      }
      else if (v36 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v37 = *(_DWORD **)(v26 + 32 * v24 + 24);
        if (v37)
          *v37 += 2;
LABEL_52:
        *(_QWORD *)(a2 + 80) = v37;
      }
    }
    v33 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v33;
    ++v24;
    if (v35 == 82)
      continue;
    break;
  }
  v43 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::AddressSpace> [6]>::tryGet<WTF::String>((unsigned __int8 ***)WGSL::parseAddressSpace(WTF::String const&)::__map, (uint64_t *)&v146);
  if (!v43 || *(_BYTE *)v43 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v44 = v25 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v25) << 32);
    goto LABEL_98;
  }
  v52 = 0;
  LOBYTE(v139) = *(_BYTE *)v43;
  v141 = 0;
  v53 = v147;
  if (v147 != -1)
  {
LABEL_99:
    ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v53])(&v136, v145);
    v52 = v141;
  }
LABEL_100:
  if (v52)
  {
    if (v52 != 1)
      goto LABEL_268;
    v54 = v139;
    if (v139)
      *(_DWORD *)v139 += 2;
    v129 = v140;
    v128 = v54;
    v55 = 1;
    v130 = 1;
    goto LABEL_189;
  }
  v56 = *(_DWORD *)(a2 + 56);
  if (v56 != 48)
  {
    if (v139 >= 5u)
      v65 = 1;
    else
      v65 = 0x10001uLL >> (8 * v139);
    LOBYTE(v143) = v65;
    if (v56 != 84)
      goto LABEL_177;
LABEL_123:
    v66 = *(_DWORD *)(a2 + 36);
    v67 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v67;
      if (v66 <= v67)
      {
        __break(0xC471u);
        JUMPOUT(0x1825027C8);
      }
      v69 = *(_QWORD *)(a2 + 24);
      v70 = v69 + 32 * v67;
      v71 = *(_DWORD *)v70;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v70;
      *v9 = *(_OWORD *)(v70 + 4);
      v72 = *(_DWORD *)v70;
      if (v72 > 8)
        goto LABEL_125;
      if (((1 << v72) & 0x38) != 0)
        break;
      if (((1 << v72) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v69 + 32 * v67 + 24);
      }
      else if (v72 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v73 = *(_DWORD **)(v69 + 32 * v67 + 24);
        if (v73)
          *v73 += 2;
        goto LABEL_134;
      }
LABEL_125:
      v68 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v68;
      ++v67;
      if (v71 != 82)
      {
        v74 = *(_QWORD **)(a2 + 8);
        *(_QWORD *)v145 = v21;
        *(_DWORD *)&v145[8] = v124;
        *(_DWORD *)&v145[12] = v68 - v124;
        v128 = (const char *)WGSL::AST::Builder::construct<WGSL::AST::VariableQualifier,WGSL::SourceSpan,WGSL::AddressSpace &,WGSL::AccessMode &,void>(v74, v145, (char *)&v139, (char *)&v143);
        v130 = 0;
        goto LABEL_188;
      }
    }
    v73 = *(_DWORD **)(v69 + 32 * v67 + 24);
LABEL_134:
    *(_QWORD *)(a2 + 80) = v73;
    goto LABEL_125;
  }
  if (v139 != 3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v75 = v124 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v124) << 32);
LABEL_187:
    *(_QWORD *)&v129 = v21;
    *((_QWORD *)&v129 + 1) = v75;
    v130 = 1;
    goto LABEL_188;
  }
  v57 = *(_DWORD *)(a2 + 36);
  v58 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v58;
    if (v57 <= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1825027D0);
    }
    v60 = *(_QWORD *)(a2 + 24);
    v61 = v60 + 32 * v58;
    v62 = *(_DWORD *)v61;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v61;
    *v9 = *(_OWORD *)(v61 + 4);
    v63 = *(_DWORD *)v61;
    if (v63 <= 8)
    {
      if (((1 << v63) & 0x38) != 0)
      {
        v64 = *(_DWORD **)(v60 + 32 * v58 + 24);
        goto LABEL_118;
      }
      if (((1 << v63) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v60 + 32 * v58 + 24);
      }
      else if (v63 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v64 = *(_DWORD **)(v60 + 32 * v58 + 24);
        if (v64)
          *v64 += 2;
LABEL_118:
        *(_QWORD *)(a2 + 80) = v64;
      }
    }
    v59 = *(unsigned int *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v59;
    ++v58;
    if (v62 == 82)
      continue;
    break;
  }
  v76 = *(_QWORD *)(a2 + 88);
  if (v62 != 8)
  {
    *(_DWORD *)v145 = v62;
    v147 = 1;
    WGSL::toString(8);
    if (v147 != 1)
      goto LABEL_268;
    WGSL::toString(*(int *)v145);
    v149[0] = (uint64_t)"Expected a ";
    v149[1] = 12;
    v148[0] = (uint64_t)", but got a ";
    v148[1] = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v149, (uint64_t *)&v143, (uint64_t)v148, (uint64_t *)&v142, &v144);
    if (!v144)
      goto LABEL_283;
    v83 = v142;
    v142 = 0;
    if (v83)
    {
      if (*v83 == 2)
        WTF::StringImpl::destroy();
      else
        *v83 -= 2;
    }
    v87 = v143;
    v143 = 0;
    if (v87)
    {
      if (*v87 == 2)
        WTF::StringImpl::destroy();
      else
        *v87 -= 2;
    }
    v86 = v59 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v59) << 32);
    v136 = v144;
    goto LABEL_168;
  }
  *(_DWORD *)v145 = 8;
  *(_OWORD *)&v145[4] = *v9;
  v77 = *(_DWORD **)(a2 + 80);
  if (v77)
    *v77 += 2;
  v146 = v77;
  v147 = 0;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v58;
    if (v57 <= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1825027D8);
    }
    v79 = v60 + 32 * v58;
    v80 = *(_DWORD *)v79;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v79;
    *v9 = *(_OWORD *)(v79 + 4);
    v81 = *(_DWORD *)v79;
    if (v81 <= 8)
    {
      if (((1 << v81) & 0x38) != 0)
      {
        v82 = *(_DWORD **)(v60 + 32 * v58 + 24);
        goto LABEL_153;
      }
      if (((1 << v81) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v60 + 32 * v58 + 24);
      }
      else if (v81 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v82 = *(_DWORD **)(v60 + 32 * v58 + 24);
        if (v82)
          *v82 += 2;
LABEL_153:
        *(_QWORD *)(a2 + 80) = v82;
      }
    }
    v78 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v78;
    ++v58;
    if (v80 == 82)
      continue;
    break;
  }
  v84 = WGSL::parseAccessMode((uint64_t *)&v146);
  if (v84)
  {
    v85 = 0;
    LOBYTE(v136) = *v84;
    v138 = 0;
    goto LABEL_169;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v86 = v59 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v59) << 32);
LABEL_168:
  *(_QWORD *)&v137 = v76;
  *((_QWORD *)&v137 + 1) = v86;
  v85 = 1;
  v138 = 1;
LABEL_169:
  if (v147 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD6FF8[v147])(v149, v145);
    v85 = v138;
  }
  if (!v85)
  {
    LOBYTE(v143) = (_BYTE)v136;
    v56 = *(_DWORD *)(a2 + 56);
    if (v56 != 84)
    {
LABEL_177:
      WGSL::toString(84);
      WGSL::toString(v56);
      *(_QWORD *)v145 = "Expected a ";
      *(_QWORD *)&v145[8] = 12;
      v136 = ", but got a ";
      *(_QWORD *)&v137 = 13;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v145, v148, (uint64_t)&v136, (uint64_t *)&v144, v149);
      if (!v149[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825027E8);
      }
      v90 = v144;
      v144 = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v90 -= 2;
      }
      v91 = (_DWORD *)v148[0];
      v148[0] = 0;
      if (v91)
      {
        if (*v91 == 2)
          WTF::StringImpl::destroy();
        else
          *v91 -= 2;
      }
      v75 = v124 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v124) << 32);
      v128 = (const char *)v149[0];
      goto LABEL_187;
    }
    goto LABEL_123;
  }
  if (v85 != 1)
    goto LABEL_268;
  v88 = (char *)v136;
  if (v136)
  {
    v89 = *(_DWORD *)v136;
    *(_DWORD *)v136 += 2;
    v129 = v137;
    v128 = v88;
    v130 = 1;
    v136 = 0;
    if (v89)
      *(_DWORD *)v88 = v89;
    else
      WTF::StringImpl::destroy();
  }
  else
  {
    v129 = v137;
    v128 = 0;
    v130 = 1;
  }
LABEL_188:
  v55 = v141;
  if (v141 != -1)
LABEL_189:
    ((void (*)(_BYTE *, const char **))off_1E0FD7438[v55])(v145, &v139);
  if (v130)
  {
    if (v130 == 1)
    {
      v92 = (char *)v128;
      if (v128)
      {
        v93 = *(_DWORD *)v128;
        *(_DWORD *)v128 += 2;
        *(_OWORD *)(a1 + 8) = v129;
        *(_QWORD *)a1 = v92;
        *(_DWORD *)(a1 + 24) = 1;
        v128 = 0;
        if (v93)
          *(_DWORD *)v92 = v93;
        else
          WTF::StringImpl::destroy();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = v129;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 24) = 1;
      }
      goto LABEL_262;
    }
    goto LABEL_268;
  }
  v131 = v128;
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v145, a2);
  v38 = v147;
  if (v147)
    goto LABEL_55;
LABEL_196:
  v128 = 0;
  v94 = *(_DWORD *)(a2 + 56);
  if (v94 != 47)
  {
    v103 = 0;
    v149[0] = 0;
    if ((v125 & 1) == 0)
      goto LABEL_221;
    goto LABEL_210;
  }
  v95 = *(_DWORD *)(a2 + 36);
  v96 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v96;
    if (v95 <= v96)
    {
      __break(0xC471u);
      JUMPOUT(0x1825027B8);
    }
    v98 = *(_QWORD *)(a2 + 24);
    v99 = v98 + 32 * v96;
    v100 = *(_DWORD *)v99;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v99;
    *v9 = *(_OWORD *)(v99 + 4);
    v101 = *(_DWORD *)v99;
    if (v101 <= 8)
    {
      if (((1 << v101) & 0x38) != 0)
      {
        v102 = *(_DWORD **)(v98 + 32 * v96 + 24);
        goto LABEL_208;
      }
      if (((1 << v101) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v98 + 32 * v96 + 24);
      }
      else if (v101 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v102 = *(_DWORD **)(v98 + 32 * v96 + 24);
        if (v102)
          *v102 += 2;
LABEL_208:
        *(_QWORD *)(a2 + 80) = v102;
      }
    }
    v97 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v97;
    ++v96;
    if (v100 == 82)
      continue;
    break;
  }
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeName((uint64_t)&v139, a2);
  if (v141)
  {
    if (v141 == 1)
    {
      v105 = (char *)v139;
      if (v139)
      {
        v106 = *(_DWORD *)v139;
        *(_DWORD *)v139 += 2;
        *(_OWORD *)(a1 + 8) = v140;
        *(_QWORD *)a1 = v105;
        *(_DWORD *)(a1 + 24) = 1;
        v139 = 0;
        if (!v106)
          goto LABEL_238;
        goto LABEL_219;
      }
      goto LABEL_266;
    }
    goto LABEL_268;
  }
  v103 = v139;
  v128 = v139;
  v94 = *(_DWORD *)(a2 + 56);
  v149[0] = 0;
  if ((v125 & 1) == 0)
  {
LABEL_221:
    if (v94 == 49)
      goto LABEL_222;
    v115 = 0;
    if (v103)
    {
LABEL_248:
      v118 = *(_QWORD **)(a2 + 8);
      v119 = *(_DWORD *)(a2 + 96) - v6;
      v139 = v5;
      *(_QWORD *)&v140 = __PAIR64__(v119, v6);
      *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::Variable,WGSL::SourceSpan,WGSL::AST::VariableFlavor &,WGSL::AST::Identifier,WGSL::AST::VariableQualifier *,WGSL::AST::Expression *,WGSL::AST::Expression *,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(v118, &v139, &v132, (uint64_t)v145, (uint64_t *)&v131, (uint64_t *)&v128, v149, a3);
      *(_DWORD *)(a1 + 24) = 0;
      v40 = v147;
      if (v147 != -1)
        goto LABEL_261;
      goto LABEL_262;
    }
LABEL_243:
    if (v115)
      goto LABEL_248;
    if (v18 == 3)
    {
      v116 = "var";
      v117 = 4;
LABEL_251:
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v139, v116, v117, " declaration requires a type or initializer", 44);
      if (!v139)
      {
        __break(0xC471u);
        JUMPOUT(0x1825027F8);
      }
      v120 = v6 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v6) << 32);
      *(_QWORD *)a1 = v139;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v120;
      goto LABEL_259;
    }
    if (v18 != 1)
    {
      if (!v18)
      {
        __break(0xC471u);
        JUMPOUT(0x182502798);
      }
      v116 = "override";
      v117 = 9;
      goto LABEL_251;
    }
LABEL_283:
    __break(0xC471u);
    JUMPOUT(0x182502778);
  }
LABEL_210:
  if (v94 != 49)
  {
    WGSL::toString(49);
    WGSL::toString(v94);
    v139 = "Expected a ";
    *(_QWORD *)&v140 = 12;
    v136 = ", but got a ";
    *(_QWORD *)&v137 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v139, (uint64_t *)&v127, (uint64_t)&v136, (uint64_t *)&v126, v148);
    if (!v148[0])
    {
      __break(0xC471u);
      JUMPOUT(0x1825027F0);
    }
    v104 = v126;
    v126 = 0;
    if (v104)
    {
      if (*v104 == 2)
        WTF::StringImpl::destroy();
      else
        *v104 -= 2;
    }
    v121 = v127;
    v127 = 0;
    if (v121)
    {
      if (*v121 == 2)
        WTF::StringImpl::destroy();
      else
        *v121 -= 2;
    }
    v122 = v6 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v6) << 32);
    *(_QWORD *)a1 = v148[0];
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v122;
    goto LABEL_259;
  }
LABEL_222:
  v107 = *(_DWORD *)(a2 + 36);
  v108 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v108;
    if (v107 <= v108)
    {
      __break(0xC471u);
      JUMPOUT(0x1825027C0);
    }
    v110 = *(_QWORD *)(a2 + 24);
    v111 = v110 + 32 * v108;
    v112 = *(_DWORD *)v111;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v111;
    *v9 = *(_OWORD *)(v111 + 4);
    v113 = *(_DWORD *)v111;
    if (v113 <= 8)
    {
      if (((1 << v113) & 0x38) != 0)
      {
        v114 = *(_DWORD **)(v110 + 32 * v108 + 24);
        goto LABEL_233;
      }
      if (((1 << v113) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v110 + 32 * v108 + 24);
      }
      else if (v113 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v114 = *(_DWORD **)(v110 + 32 * v108 + 24);
        if (v114)
          *v114 += 2;
LABEL_233:
        *(_QWORD *)(a2 + 80) = v114;
      }
    }
    v109 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v109;
    ++v108;
    if (v112 == 82)
      continue;
    break;
  }
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v139, a2);
  if (!v141)
  {
    v149[0] = (uint64_t)v139;
    v115 = v139 != 0;
    if (v103)
      goto LABEL_248;
    goto LABEL_243;
  }
  if (v141 != 1)
    goto LABEL_268;
  v105 = (char *)v139;
  if (v139)
  {
    v106 = *(_DWORD *)v139;
    *(_DWORD *)v139 += 2;
    *(_OWORD *)(a1 + 8) = v140;
    *(_QWORD *)a1 = v105;
    *(_DWORD *)(a1 + 24) = 1;
    if (!v106)
    {
LABEL_238:
      WTF::StringImpl::destroy();
      goto LABEL_260;
    }
LABEL_219:
    *(_DWORD *)v105 = v106;
    goto LABEL_260;
  }
LABEL_266:
  *(_OWORD *)(a1 + 8) = v140;
  *(_QWORD *)a1 = 0;
LABEL_259:
  *(_DWORD *)(a1 + 24) = 1;
LABEL_260:
  v40 = 0;
LABEL_261:
  ((void (*)(const char **, _BYTE *))off_1E0FD6FE8[v40])(&v139, v145);
LABEL_262:
  v51 = 0;
  return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD6FF8[v51])(v145, &v133);
}

_DWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeName(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  _DWORD *result;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  char v19;

  v4 = *(const char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v6 + 1;
  if ((v6 + 1) >= 0x10)
  {
    WTF::String::number((WTF::String *)0xF);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"composite type may not be nested more than ", 44, (uint64_t *)&v18, (int8x16_t *)" levels", 8, &v14);
    v11 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v11;
    *(_DWORD *)(a1 + 24) = 1;
    v14 = 0;
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*result == 2)
        result = (_DWORD *)WTF::StringImpl::destroy();
      else
        *result -= 2;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)(a2 + 56) != 8)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_13;
  }
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v14, a2);
  if (!v17)
  {
    if (MEMORY[0x186DAB1B8](v16, "array", 5))
    {
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseArrayType(a1, a2);
      v8 = 0;
LABEL_12:
      result = (_DWORD *)((uint64_t (*)(char *, _DWORD **))off_1E0FD6FE8[v8])(&v19, &v14);
      goto LABEL_13;
    }
    result = WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeNameAfterIdentifier(a1, a2, (uint64_t)&v14, v4, v5);
    v8 = v17;
    if (v17 != -1)
      goto LABEL_12;
LABEL_13:
    *(_DWORD *)(a2 + 48) = v6;
    return result;
  }
  if (v17 == 1)
  {
    v7 = v14;
    if (v14)
      *v14 += 2;
    *(_OWORD *)(a1 + 8) = v15;
    *(_QWORD *)a1 = v7;
    v8 = 1;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_12;
  }
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_DWORD *)WGSL::Parser<WGSL::Lexer<char16_t>>::parseArrayType(v12, v13);
}

void *WGSL::Parser<WGSL::Lexer<char16_t>>::parseArrayType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _OWORD *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  void *result;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _BYTE v47[24];
  int v48;
  int v49;
  const char *v50;
  __int128 v51;
  unsigned int v52;
  _DWORD *v53;
  __int128 v54;
  int v55;
  const char *v56;
  _DWORD *v57;
  _QWORD v58[2];

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v56 = 0;
  v57 = 0;
  v6 = v5;
  if (*(_DWORD *)(a2 + 56) != 83)
  {
LABEL_78:
    v43 = *(_QWORD **)(a2 + 8);
    *(_QWORD *)v47 = v4;
    *(_DWORD *)&v47[8] = v5;
    *(_DWORD *)&v47[12] = v6 - v5;
    result = WGSL::AST::Builder::construct<WGSL::AST::ArrayTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression *&,WGSL::AST::Expression *&,void>(v43, v47, (uint64_t *)&v57, (uint64_t *)&v56);
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 24) = 0;
    return result;
  }
  v7 = *(_DWORD *)(a2 + 36);
  v8 = (_OWORD *)(a2 + 60);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v7 <= v9)
      goto LABEL_80;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v8 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  result = WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeName((uint64_t)&v53, a2);
  if (v55)
  {
    if (v55 == 1)
    {
      v17 = v53;
      if (v53)
        *v53 += 2;
      *(_OWORD *)(a1 + 8) = v54;
      *(_QWORD *)a1 = v17;
      v18 = 1;
      *(_DWORD *)(a1 + 24) = 1;
      goto LABEL_74;
    }
    goto LABEL_79;
  }
  v57 = v53;
  v19 = *(_DWORD *)(a2 + 56);
  if (v19 != 48)
    goto LABEL_48;
  v20 = *(_DWORD *)(a2 + 36);
  v21 = *(_DWORD *)(a2 + 40) + 1;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v21;
    if (v20 <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x182502F30);
    }
    v23 = *(_QWORD *)(a2 + 24);
    v24 = v23 + 32 * v21;
    v25 = *(_DWORD *)v24;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v24;
    *v8 = *(_OWORD *)(v24 + 4);
    v26 = *(_DWORD *)v24;
    if (v26 <= 8)
    {
      if (((1 << v26) & 0x38) != 0)
      {
        v27 = *(_DWORD **)(v23 + 32 * v21 + 24);
        goto LABEL_31;
      }
      if (((1 << v26) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v23 + 32 * v21 + 24);
      }
      else if (v26 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v27 = *(_DWORD **)(v23 + 32 * v21 + 24);
        if (v27)
          *v27 += 2;
LABEL_31:
        *(_QWORD *)(a2 + 80) = v27;
      }
    }
    v22 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v22;
    ++v21;
    if (v25 == 82)
      continue;
    break;
  }
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression(v47, a2);
  if (!v48)
  {
    WGSL::Parser<WGSL::Lexer<char16_t>>::parseAdditiveExpressionPostUnary((uint64_t)&v50, a2, v47);
    v29 = v52;
    if (v52)
    {
      if (v52 != 1)
        goto LABEL_79;
      v31 = v50;
      if (v50)
        *(_DWORD *)v50 += 2;
      *(_OWORD *)(a1 + 8) = v51;
      *(_QWORD *)a1 = v31;
      *(_DWORD *)(a1 + 24) = 1;
    }
    else
    {
      v56 = v50;
    }
    result = (void *)((uint64_t (*)(_QWORD *, const char **))off_1E0FD71D8[v29])(v58, &v50);
    v30 = v48;
    if (v48 != -1)
      goto LABEL_44;
    goto LABEL_45;
  }
  if (v48 != 1)
  {
LABEL_79:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
    __break(0xC471u);
LABEL_84:
    JUMPOUT(0x182502F28);
  }
  v28 = *(_QWORD *)v47;
  if (*(_QWORD *)v47)
    **(_DWORD **)v47 += 2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v47[8];
  *(_QWORD *)a1 = v28;
  LODWORD(v29) = 1;
  *(_DWORD *)(a1 + 24) = 1;
  v30 = 1;
LABEL_44:
  result = (void *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD71D8[v30])(&v50, v47);
LABEL_45:
  if ((_DWORD)v29)
  {
    v18 = 1;
    goto LABEL_74;
  }
  v19 = *(_DWORD *)(a2 + 56);
LABEL_48:
  if (v19 == 84)
  {
    *(_DWORD *)v47 = 84;
    *(_OWORD *)&v47[4] = *v8;
    v49 = 0;
    v32 = *(_DWORD *)(a2 + 36);
    v33 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v33;
      if (v32 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x182502F38);
      }
      v35 = *(_QWORD *)(a2 + 24);
      v36 = v35 + 32 * v33;
      v37 = *(_DWORD *)v36;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v36;
      *v8 = *(_OWORD *)(v36 + 4);
      v38 = *(_DWORD *)v36;
      if (v38 > 8)
        goto LABEL_51;
      if (((1 << v38) & 0x38) != 0)
        break;
      if (((1 << v38) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v35 + 32 * v33 + 24);
      }
      else if (v38 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v39 = *(_DWORD **)(v35 + 32 * v33 + 24);
        if (v39)
          *v39 += 2;
        goto LABEL_60;
      }
LABEL_51:
      v34 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v34;
      ++v33;
      if (v37 != 82)
      {
        v18 = 0;
        goto LABEL_73;
      }
    }
    v39 = *(_DWORD **)(v35 + 32 * v33 + 24);
LABEL_60:
    *(_QWORD *)(a2 + 80) = v39;
    goto LABEL_51;
  }
  *(_DWORD *)v47 = v19;
  v49 = 1;
  WGSL::toString(84);
  WGSL::toString(v19);
  v50 = "Expected a ";
  *(_QWORD *)&v51 = 12;
  v58[0] = ", but got a ";
  v58[1] = 13;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v50, (uint64_t *)&v45, (uint64_t)v58, (uint64_t *)&v44, &v46);
  if (!v46)
  {
    __break(0xC471u);
    goto LABEL_84;
  }
  v40 = v44;
  v44 = 0;
  if (!v40)
    goto LABEL_65;
  if (*v40 == 2)
  {
    WTF::StringImpl::destroy();
    v41 = v45;
    v45 = 0;
    if (!v41)
      goto LABEL_72;
    goto LABEL_69;
  }
  *v40 -= 2;
LABEL_65:
  v41 = v45;
  v45 = 0;
  if (v41)
  {
LABEL_69:
    if (*v41 == 2)
      WTF::StringImpl::destroy();
    else
      *v41 -= 2;
  }
LABEL_72:
  v42 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
  *(_QWORD *)a1 = v46;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v42;
  v18 = 1;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_73:
  result = (void *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD6FF8[v18])(&v50, v47);
LABEL_74:
  if (v55 != -1)
    result = (void *)((uint64_t (*)(_BYTE *, _DWORD **))off_1E0FD71D8[v55])(v47, &v53);
  if (!v18)
  {
    v6 = *(_DWORD *)(a2 + 96);
    goto LABEL_78;
  }
  return result;
}

_QWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeNameAfterIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, unsigned int a5)
{
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *result;
  WTF *v19;
  unsigned int v20;
  void *v21;
  const char *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  _QWORD *v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  const char *v53;
  __int128 v54;
  unsigned int v55;
  WTF *v56;
  uint64_t v57;
  _QWORD v58[2];

  if (*(_DWORD *)(a2 + 56) != 83)
  {
    v16 = *(_QWORD **)(a2 + 8);
    v17 = *(_DWORD *)(a2 + 96) - a5;
    v53 = a4;
    *(_QWORD *)&v54 = __PAIR64__(v17, a5);
    result = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v16, &v53, a3);
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 24) = 0;
    return result;
  }
  v7 = (_OWORD *)(a2 + 60);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v8 <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x182503474);
    }
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v7 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  v19 = 0;
  v20 = 0;
  v56 = 0;
  v57 = 0;
  v46 = a5;
  while (1)
  {
    result = (_QWORD *)WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeName(&v53, a2);
    if (!v55)
    {
      if (v20 == (_DWORD)v57)
      {
        result = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, v20 + 1, (unint64_t)&v53);
        v25 = HIDWORD(v57);
        v19 = v56;
        *((_QWORD *)v56 + HIDWORD(v57)) = *result;
        v20 = v25 + 1;
        HIDWORD(v57) = v25 + 1;
        if (*(_DWORD *)(a2 + 56) != 48)
          goto LABEL_27;
      }
      else
      {
        *((_QWORD *)v19 + v20) = v53;
        v20 = ++HIDWORD(v57);
        if (*(_DWORD *)(a2 + 56) != 48)
        {
LABEL_27:
          v23 = 4;
          v24 = v55;
          if (v55 == -1)
            goto LABEL_22;
          goto LABEL_21;
        }
      }
      v26 = *(_DWORD *)(a2 + 36);
      v27 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v27;
        if (v26 <= v27)
          goto LABEL_75;
        v29 = *(_QWORD *)(a2 + 24);
        v30 = v29 + 32 * v27;
        v31 = *(_DWORD *)v30;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v30;
        *v7 = *(_OWORD *)(v30 + 4);
        v32 = *(_DWORD *)v30;
        if (v32 > 8)
          goto LABEL_32;
        if (((1 << v32) & 0x38) != 0)
          break;
        if (((1 << v32) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v29 + 32 * v27 + 24);
        }
        else if (v32 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v33 = *(_DWORD **)(v29 + 32 * v27 + 24);
          if (v33)
            *v33 += 2;
          goto LABEL_41;
        }
LABEL_32:
        v28 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v28;
        ++v27;
        if (v31 != 82)
        {
          v23 = 0;
          v24 = v55;
          if (v55 == -1)
            goto LABEL_22;
LABEL_21:
          result = (_QWORD *)((uint64_t (*)(_QWORD *, const char **))off_1E0FD71D8[v24])(v58, &v53);
          goto LABEL_22;
        }
      }
      v33 = *(_DWORD **)(v29 + 32 * v27 + 24);
LABEL_41:
      *(_QWORD *)(a2 + 80) = v33;
      goto LABEL_32;
    }
    if (v55 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_75:
      __break(0xC471u);
      goto LABEL_79;
    }
    v22 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    *(_OWORD *)(a1 + 8) = v54;
    *(_QWORD *)a1 = v22;
    v23 = 1;
    *(_DWORD *)(a1 + 24) = 1;
    v24 = v55;
    if (v55 != -1)
      goto LABEL_21;
LABEL_22:
    if (v23)
      break;
    if (*(_DWORD *)(a2 + 56) == 84)
      goto LABEL_46;
  }
  if (v23 != 4)
    goto LABEL_59;
  v34 = *(_DWORD *)(a2 + 56);
  if (v34 != 84)
  {
    WGSL::toString(84);
    WGSL::toString(v34);
    v53 = "Expected a ";
    *(_QWORD *)&v54 = 12;
    v58[0] = ", but got a ";
    v58[1] = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v53, (uint64_t *)&v51, (uint64_t)v58, (uint64_t *)&v50, &v52);
    if (v52)
    {
      v44 = v50;
      v50 = 0;
      if (v44)
      {
        if (*v44 == 2)
        {
          WTF::StringImpl::destroy();
          result = v51;
          v51 = 0;
          if (!result)
            goto LABEL_72;
LABEL_69:
          if (*(_DWORD *)result == 2)
            result = (_QWORD *)WTF::StringImpl::destroy();
          else
            *(_DWORD *)result -= 2;
LABEL_72:
          v45 = v46 | ((unint64_t)(*(_DWORD *)(a2 + 96) - a5) << 32);
          *(_QWORD *)a1 = v52;
          *(_QWORD *)(a1 + 8) = a4;
          *(_QWORD *)(a1 + 16) = v45;
          *(_DWORD *)(a1 + 24) = 1;
          if (v19)
            goto LABEL_60;
          return result;
        }
        *v44 -= 2;
      }
      result = v51;
      v51 = 0;
      if (!result)
        goto LABEL_72;
      goto LABEL_69;
    }
    __break(0xC471u);
LABEL_79:
    JUMPOUT(0x18250346CLL);
  }
LABEL_46:
  v35 = *(_DWORD *)(a2 + 36);
  v36 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v36;
    if (v35 <= v36)
    {
      __break(0xC471u);
      JUMPOUT(0x18250347CLL);
    }
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v38 + 32 * v36;
    v40 = *(_DWORD *)v39;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v39;
    *v7 = *(_OWORD *)(v39 + 4);
    v41 = *(_DWORD *)v39;
    if (v41 <= 8)
    {
      if (((1 << v41) & 0x38) != 0)
      {
        v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
LABEL_57:
        *(_QWORD *)(a2 + 80) = v42;
        goto LABEL_48;
      }
      if (((1 << v41) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v38 + 32 * v36 + 24);
        goto LABEL_48;
      }
      if (v41 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
        if (v42)
          *v42 += 2;
        goto LABEL_57;
      }
    }
LABEL_48:
    v37 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v37;
    ++v36;
  }
  while (v40 == 82);
  v43 = *(_QWORD **)(a2 + 8);
  v53 = a4;
  LODWORD(v54) = a5;
  DWORD1(v54) = v37 - a5;
  result = WGSL::AST::Builder::construct<WGSL::AST::ElaboratedTypeExpression,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(v43, &v53, a3, (uint64_t *)&v56);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 24) = 0;
  v19 = v56;
LABEL_59:
  if (v19)
  {
LABEL_60:
    v56 = 0;
    LODWORD(v57) = 0;
    return (_QWORD *)WTF::fastFree(v19, v21);
  }
  return result;
}

void WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  _DWORD *v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _DWORD *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _DWORD *v82;
  unsigned int v83;
  _OWORD *v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  _DWORD *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  _DWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  _DWORD *v120;
  uint64_t v121;
  const char *v122;
  _DWORD *v123;
  const char *v124;
  int v125;
  _QWORD *v126;
  unsigned int v127;
  _DWORD *v128;
  unint64_t v129;
  _QWORD *v130;
  unsigned int v131;
  _QWORD *v132;
  __int128 v133;
  int v134;
  __int128 v135;
  const char *v136;
  __int128 v137;
  int v138;
  const char *v139;
  __int128 v140;
  unsigned int v141;
  _BYTE v142[24];
  uint64_t v143;
  unsigned int v144;
  _DWORD *v145;
  _DWORD *v146;

  v4 = *(const char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v6 + 1;
  if ((v6 + 1) >= 0x81)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_44;
  }
  v8 = *(_DWORD *)(a2 + 56);
  v9 = v8 - 36;
  if ((v8 - 36) > 0x2A || ((1 << (v8 - 36)) & 0x50000800021) == 0)
  {
    switch(v8)
    {
      case 2:
        *(_DWORD *)v142 = 2;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v12 = *(_DWORD *)(a2 + 36);
        v13 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v13;
          if (v12 <= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x182504468);
          }
          v15 = *(_QWORD *)(a2 + 24);
          v16 = v15 + 32 * v13;
          v17 = *(_DWORD *)v16;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v16;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v16 + 4);
          v18 = *(_DWORD *)v16;
          if (v18 > 8)
            goto LABEL_12;
          if (((1 << v18) & 0x38) != 0)
            break;
          if (((1 << v18) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v15 + 32 * v13 + 24);
          }
          else if (v18 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v19 = *(_DWORD **)(v15 + 32 * v13 + 24);
            if (v19)
              *v19 += 2;
            goto LABEL_21;
          }
LABEL_12:
          v14 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v14;
          ++v13;
          if (v17 != 82)
          {
            v103 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v14 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::AbstractFloatLiteral,WGSL::SourceSpan,double &,void>(v103, &v139, &v143);
            goto LABEL_162;
          }
        }
        v19 = *(_DWORD **)(v15 + 32 * v13 + 24);
LABEL_21:
        *(_QWORD *)(a2 + 80) = v19;
        goto LABEL_12;
      case 3:
        *(_DWORD *)v142 = 3;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v48 = *(_DWORD *)(a2 + 36);
        v49 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v49;
          if (v48 <= v49)
          {
            __break(0xC471u);
            JUMPOUT(0x182504480);
          }
          v51 = *(_QWORD *)(a2 + 24);
          v52 = v51 + 32 * v49;
          v53 = *(_DWORD *)v52;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v52;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v52 + 4);
          v54 = *(_DWORD *)v52;
          if (v54 > 8)
            goto LABEL_71;
          if (((1 << v54) & 0x38) != 0)
            break;
          if (((1 << v54) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v51 + 32 * v49 + 24);
          }
          else if (v54 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v55 = *(_DWORD **)(v51 + 32 * v49 + 24);
            if (v55)
              *v55 += 2;
            goto LABEL_80;
          }
LABEL_71:
          v50 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v50;
          ++v49;
          if (v53 != 82)
          {
            v104 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v50 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::AbstractIntegerLiteral,WGSL::SourceSpan,long long &,void>(v104, &v139, &v143);
            goto LABEL_162;
          }
        }
        v55 = *(_DWORD **)(v51 + 32 * v49 + 24);
LABEL_80:
        *(_QWORD *)(a2 + 80) = v55;
        goto LABEL_71;
      case 4:
        *(_DWORD *)v142 = 4;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v32 = *(_DWORD *)(a2 + 36);
        v33 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v33;
          if (v32 <= v33)
          {
            __break(0xC471u);
            JUMPOUT(0x182504470);
          }
          v35 = *(_QWORD *)(a2 + 24);
          v36 = v35 + 32 * v33;
          v37 = *(_DWORD *)v36;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v36;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v36 + 4);
          v38 = *(_DWORD *)v36;
          if (v38 > 8)
            goto LABEL_47;
          if (((1 << v38) & 0x38) != 0)
            break;
          if (((1 << v38) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v35 + 32 * v33 + 24);
          }
          else if (v38 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v39 = *(_DWORD **)(v35 + 32 * v33 + 24);
            if (v39)
              *v39 += 2;
            goto LABEL_56;
          }
LABEL_47:
          v34 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v34;
          ++v33;
          if (v37 != 82)
          {
            v100 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v34 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::Signed32Literal,WGSL::SourceSpan,long long &,void>(v100, &v139, &v143);
            goto LABEL_162;
          }
        }
        v39 = *(_DWORD **)(v35 + 32 * v33 + 24);
LABEL_56:
        *(_QWORD *)(a2 + 80) = v39;
        goto LABEL_47;
      case 5:
        *(_DWORD *)v142 = 5;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v67 = *(_DWORD *)(a2 + 36);
        v68 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v68;
          if (v67 <= v68)
          {
            __break(0xC471u);
            JUMPOUT(0x182504490);
          }
          v70 = *(_QWORD *)(a2 + 24);
          v71 = v70 + 32 * v68;
          v72 = *(_DWORD *)v71;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v71;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v71 + 4);
          v73 = *(_DWORD *)v71;
          if (v73 > 8)
            goto LABEL_102;
          if (((1 << v73) & 0x38) != 0)
            break;
          if (((1 << v73) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v70 + 32 * v68 + 24);
          }
          else if (v73 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v74 = *(_DWORD **)(v70 + 32 * v68 + 24);
            if (v74)
              *v74 += 2;
            goto LABEL_111;
          }
LABEL_102:
          v69 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v69;
          ++v68;
          if (v72 != 82)
          {
            v106 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v69 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,long long &,void>(v106, &v139, &v143);
            goto LABEL_162;
          }
        }
        v74 = *(_DWORD **)(v70 + 32 * v68 + 24);
LABEL_111:
        *(_QWORD *)(a2 + 80) = v74;
        goto LABEL_102;
      case 6:
        *(_DWORD *)v142 = 6;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v75 = *(_DWORD *)(a2 + 36);
        v76 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v76;
          if (v75 <= v76)
          {
            __break(0xC471u);
            JUMPOUT(0x182504498);
          }
          v78 = *(_QWORD *)(a2 + 24);
          v79 = v78 + 32 * v76;
          v80 = *(_DWORD *)v79;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v79;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v79 + 4);
          v81 = *(_DWORD *)v79;
          if (v81 > 8)
            goto LABEL_114;
          if (((1 << v81) & 0x38) != 0)
            break;
          if (((1 << v81) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v78 + 32 * v76 + 24);
          }
          else if (v81 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v82 = *(_DWORD **)(v78 + 32 * v76 + 24);
            if (v82)
              *v82 += 2;
            goto LABEL_123;
          }
LABEL_114:
          v77 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v77;
          ++v76;
          if (v80 != 82)
          {
            v107 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v77 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::Float32Literal,WGSL::SourceSpan,double &,void>(v107, &v139, (double *)&v143);
            goto LABEL_162;
          }
        }
        v82 = *(_DWORD **)(v78 + 32 * v76 + 24);
LABEL_123:
        *(_QWORD *)(a2 + 80) = v82;
        goto LABEL_114;
      case 7:
        *(_DWORD *)v142 = 7;
        *(_OWORD *)&v142[4] = *(_OWORD *)(a2 + 60);
        v143 = *(_QWORD *)(a2 + 80);
        v144 = 0;
        v40 = *(_DWORD *)(a2 + 36);
        v41 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v41;
          if (v40 <= v41)
          {
            __break(0xC471u);
            JUMPOUT(0x182504478);
          }
          v43 = *(_QWORD *)(a2 + 24);
          v44 = v43 + 32 * v41;
          v45 = *(_DWORD *)v44;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v44;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v44 + 4);
          v46 = *(_DWORD *)v44;
          if (v46 > 8)
            goto LABEL_59;
          if (((1 << v46) & 0x38) != 0)
            break;
          if (((1 << v46) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v43 + 32 * v41 + 24);
          }
          else if (v46 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v47 = *(_DWORD **)(v43 + 32 * v41 + 24);
            if (v47)
              *v47 += 2;
            goto LABEL_68;
          }
LABEL_59:
          v42 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v42;
          ++v41;
          if (v45 != 82)
          {
            v102 = *(_QWORD **)(a2 + 8);
            v139 = v4;
            LODWORD(v140) = v5;
            DWORD1(v140) = v42 - v5;
            v101 = WGSL::AST::Builder::construct<WGSL::AST::Float16Literal,WGSL::SourceSpan,double &,void>(v102, &v139, &v143);
            goto LABEL_162;
          }
        }
        v47 = *(_DWORD **)(v43 + 32 * v41 + 24);
LABEL_68:
        *(_QWORD *)(a2 + 80) = v47;
        goto LABEL_59;
      case 8:
        WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v142, a2);
        if (v144)
        {
          if (v144 != 1)
            goto LABEL_216;
          v56 = *(_QWORD **)v142;
          if (*(_QWORD *)v142)
            **(_DWORD **)v142 += 2;
          v133 = *(_OWORD *)&v142[8];
          v132 = v56;
          v134 = 1;
          v57 = v144;
          if (v144 == -1)
            goto LABEL_163;
LABEL_206:
          ((void (*)(const char **, _BYTE *))off_1E0FD6FE8[v57])(&v139, v142);
          goto LABEL_163;
        }
        if (MEMORY[0x186DAB1B8](v143, "array", 5))
        {
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseArrayType((uint64_t)&v139, a2);
        }
        else
        {
          if ((*(_DWORD *)(a2 + 56) | 0x10) != 0x53)
          {
            v130 = *(_QWORD **)(a2 + 8);
            v131 = *(_DWORD *)(a2 + 96) - v5;
            v139 = v4;
            *(_QWORD *)&v140 = __PAIR64__(v131, v5);
            v132 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v130, &v139, (uint64_t)v142);
            v134 = 0;
            v57 = v144;
            if (v144 == -1)
              goto LABEL_163;
            goto LABEL_206;
          }
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeNameAfterIdentifier((uint64_t)&v139, a2, (uint64_t)v142, v4, v5);
        }
        v121 = v141;
        if (v141)
        {
          if (v141 != 1)
            goto LABEL_216;
          v122 = v139;
          if (v139)
            *(_DWORD *)v139 += 2;
          v133 = v140;
          v132 = v122;
          v134 = 1;
          goto LABEL_205;
        }
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseArgumentExpressionList(&v136, a2);
        if (v138)
        {
          if (v138 != 1)
            goto LABEL_216;
          v124 = v136;
          if (v136)
            *(_DWORD *)v136 += 2;
          v133 = v137;
          v132 = v124;
          v125 = 1;
          v134 = 1;
        }
        else
        {
          v126 = *(_QWORD **)(a2 + 8);
          v127 = *(_DWORD *)(a2 + 96) - v5;
          *(_QWORD *)&v135 = v4;
          *((_QWORD *)&v135 + 1) = __PAIR64__(v127, v5);
          v132 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(v126, &v135, (uint64_t *)&v139, (uint64_t *)&v136);
          v134 = 0;
          v125 = v138;
          if (v138 == -1)
            goto LABEL_205;
        }
        ((void (*)(__int128 *, const char **))off_1E0FD70A8[v125])(&v135, &v136);
LABEL_205:
        ((void (*)(const char **, const char **))off_1E0FD71D8[v121])(&v136, &v139);
        v57 = v144;
        if (v144 == -1)
          goto LABEL_163;
        goto LABEL_206;
      case 22:
        v58 = *(_DWORD *)(a2 + 36);
        v59 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v59;
          if (v58 <= v59)
          {
            __break(0xC471u);
            JUMPOUT(0x182504488);
          }
          v61 = *(_QWORD *)(a2 + 24);
          v62 = v61 + 32 * v59;
          v63 = *(_DWORD *)v62;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v62;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v62 + 4);
          v64 = *(_DWORD *)v62;
          if (v64 > 8)
            goto LABEL_89;
          if (((1 << v64) & 0x38) != 0)
            break;
          if (((1 << v64) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v61 + 32 * v59 + 24);
          }
          else if (v64 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v65 = *(_DWORD **)(v61 + 32 * v59 + 24);
            if (v65)
              *v65 += 2;
            goto LABEL_98;
          }
LABEL_89:
          v60 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v60;
          ++v59;
          if (v63 != 82)
          {
            v105 = *(_QWORD **)(a2 + 8);
            *(_QWORD *)v142 = v4;
            *(_DWORD *)&v142[8] = v5;
            *(_DWORD *)&v142[12] = v60 - v5;
            LOBYTE(v139) = 0;
LABEL_161:
            v101 = WGSL::AST::Builder::construct<WGSL::AST::BoolLiteral,WGSL::SourceSpan,BOOL,void>(v105, v142, (char *)&v139);
LABEL_162:
            v132 = v101;
            v134 = 0;
LABEL_163:
            if (!v134)
            {
              WGSL::Parser<WGSL::Lexer<char16_t>>::parsePostfixExpression(a1, a2, v132, (unint64_t)v4, v5);
              v111 = 0;
LABEL_169:
              ((void (*)(_BYTE *, _QWORD **))off_1E0FD71D8[v111])(v142, &v132);
              goto LABEL_44;
            }
            if (v134 == 1)
            {
              v110 = v132;
              if (v132)
                *(_DWORD *)v132 += 2;
              *(_OWORD *)(a1 + 8) = v133;
              *(_QWORD *)a1 = v110;
              v111 = 1;
              *(_DWORD *)(a1 + 24) = 1;
              goto LABEL_169;
            }
LABEL_216:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_217:
            __break(0xC471u);
            JUMPOUT(0x182504458);
          }
        }
        v65 = *(_DWORD **)(v61 + 32 * v59 + 24);
LABEL_98:
        *(_QWORD *)(a2 + 80) = v65;
        goto LABEL_89;
      case 33:
        v92 = *(_DWORD *)(a2 + 36);
        v93 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v93;
          if (v92 <= v93)
          {
            __break(0xC471u);
            JUMPOUT(0x1825044A8);
          }
          v95 = *(_QWORD *)(a2 + 24);
          v96 = v95 + 32 * v93;
          v97 = *(_DWORD *)v96;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v96;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v96 + 4);
          v98 = *(_DWORD *)v96;
          if (v98 > 8)
            goto LABEL_138;
          if (((1 << v98) & 0x38) != 0)
            break;
          if (((1 << v98) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v95 + 32 * v93 + 24);
          }
          else if (v98 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v99 = *(_DWORD **)(v95 + 32 * v93 + 24);
            if (v99)
              *v99 += 2;
            goto LABEL_147;
          }
LABEL_138:
          v94 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v94;
          ++v93;
          if (v97 != 82)
          {
            v105 = *(_QWORD **)(a2 + 8);
            *(_QWORD *)v142 = v4;
            *(_DWORD *)&v142[8] = v5;
            *(_DWORD *)&v142[12] = v94 - v5;
            LOBYTE(v139) = 1;
            goto LABEL_161;
          }
        }
        v99 = *(_DWORD **)(v95 + 32 * v93 + 24);
LABEL_147:
        *(_QWORD *)(a2 + 80) = v99;
        goto LABEL_138;
      case 67:
        v83 = *(_DWORD *)(a2 + 36);
        v84 = (_OWORD *)(a2 + 60);
        v85 = *(_DWORD *)(a2 + 40) + 1;
        break;
      default:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v66 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
        *(_QWORD *)&v133 = v4;
        *((_QWORD *)&v133 + 1) = v66;
        v134 = 1;
        goto LABEL_163;
    }
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v85;
      if (v83 <= v85)
      {
        __break(0xC471u);
        JUMPOUT(0x1825044A0);
      }
      v87 = *(_QWORD *)(a2 + 24);
      v88 = v87 + 32 * v85;
      v89 = *(_DWORD *)v88;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v88;
      *v84 = *(_OWORD *)(v88 + 4);
      v90 = *(_DWORD *)v88;
      if (v90 > 8)
        goto LABEL_126;
      if (((1 << v90) & 0x38) != 0)
        break;
      if (((1 << v90) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v87 + 32 * v85 + 24);
      }
      else if (v90 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v91 = *(_DWORD **)(v87 + 32 * v85 + 24);
        if (v91)
          *v91 += 2;
        goto LABEL_135;
      }
LABEL_126:
      v86 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v86;
      ++v85;
      if (v89 != 82)
      {
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression(v142, a2);
        v108 = v143;
        if ((_DWORD)v143)
        {
          if ((_DWORD)v143 != 1)
            goto LABEL_216;
          v109 = *(_QWORD **)v142;
          if (*(_QWORD *)v142)
            **(_DWORD **)v142 += 2;
          v133 = *(_OWORD *)&v142[8];
LABEL_197:
          v132 = v109;
          v134 = v108;
LABEL_213:
          ((void (*)(const char **, _BYTE *))off_1E0FD71D8[v108])(&v139, v142);
          goto LABEL_163;
        }
        v112 = *(_DWORD *)(a2 + 56);
        if (v112 != 68)
        {
          WGSL::toString(68);
          WGSL::toString(v112);
          v139 = "Expected a ";
          *(_QWORD *)&v140 = 12;
          v136 = ", but got a ";
          *(_QWORD *)&v137 = 13;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v139, (uint64_t *)&v146, (uint64_t)&v136, (uint64_t *)&v145, &v135);
          if (!(_QWORD)v135)
          {
            __break(0xC471u);
            JUMPOUT(0x1825044B8);
          }
          v123 = v145;
          v145 = 0;
          if (v123)
          {
            if (*v123 == 2)
              WTF::StringImpl::destroy();
            else
              *v123 -= 2;
          }
          v128 = v146;
          v146 = 0;
          if (v128)
          {
            if (*v128 == 2)
              WTF::StringImpl::destroy();
            else
              *v128 -= 2;
          }
          v129 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          v132 = (_QWORD *)v135;
          *(_QWORD *)&v133 = v4;
          *((_QWORD *)&v133 + 1) = v129;
          v134 = 1;
          goto LABEL_213;
        }
        v113 = *(_DWORD *)(a2 + 36);
        v114 = *(_DWORD *)(a2 + 40) + 1;
        while (2)
        {
          *(_DWORD *)(a2 + 40) = v114;
          if (v113 <= v114)
          {
            __break(0xC471u);
            JUMPOUT(0x1825044B0);
          }
          v116 = *(_QWORD *)(a2 + 24);
          v117 = v116 + 32 * v114;
          v118 = *(_DWORD *)v117;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v117;
          *v84 = *(_OWORD *)(v117 + 4);
          v119 = *(_DWORD *)v117;
          if (v119 <= 8)
          {
            if (((1 << v119) & 0x38) != 0)
            {
              v120 = *(_DWORD **)(v116 + 32 * v114 + 24);
              goto LABEL_184;
            }
            if (((1 << v119) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v116 + 32 * v114 + 24);
            }
            else if (v119 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v120 = *(_DWORD **)(v116 + 32 * v114 + 24);
              if (v120)
                *v120 += 2;
LABEL_184:
              *(_QWORD *)(a2 + 80) = v120;
            }
          }
          v115 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v115;
          ++v114;
          if (v118 != 82)
          {
            v109 = *(_QWORD **)v142;
            goto LABEL_197;
          }
          continue;
        }
      }
    }
    v91 = *(_DWORD **)(v87 + 32 * v85 + 24);
LABEL_135:
    *(_QWORD *)(a2 + 80) = v91;
    goto LABEL_126;
  }
  v11 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_25;
    case 5:
      v11 = 4;
      goto LABEL_25;
    case 23:
      v11 = 3;
      goto LABEL_25;
    case 40:
      v11 = 2;
      goto LABEL_25;
    case 42:
      v11 = 1;
LABEL_25:
      LOBYTE(v136) = v11;
      v20 = *(_DWORD *)(a2 + 36);
      v21 = *(_DWORD *)(a2 + 40) + 1;
      break;
    default:
      goto LABEL_217;
  }
  do
  {
    *(_DWORD *)(a2 + 40) = v21;
    if (v20 <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x182504460);
    }
    v23 = *(_QWORD *)(a2 + 24);
    v24 = v23 + 32 * v21;
    v25 = *(_DWORD *)v24;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v24;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v24 + 4);
    v26 = *(_DWORD *)v24;
    if (v26 <= 8)
    {
      if (((1 << v26) & 0x38) != 0)
      {
        v27 = *(_DWORD **)(v23 + 32 * v21 + 24);
LABEL_36:
        *(_QWORD *)(a2 + 80) = v27;
        goto LABEL_27;
      }
      if (((1 << v26) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v23 + 32 * v21 + 24);
        goto LABEL_27;
      }
      if (v26 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v27 = *(_DWORD **)(v23 + 32 * v21 + 24);
        if (v27)
          *v27 += 2;
        goto LABEL_36;
      }
    }
LABEL_27:
    v22 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v22;
    ++v21;
  }
  while (v25 == 82);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression(v142, a2);
  if (!(_DWORD)v143)
  {
    v30 = *(_QWORD **)(a2 + 8);
    v31 = *(_DWORD *)(a2 + 96) - v5;
    v139 = v4;
    *(_QWORD *)&v140 = __PAIR64__(v31, v5);
    *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::UnaryOperation &,void>(v30, &v139, v142, (char *)&v136);
    *(_DWORD *)(a1 + 24) = 0;
    v29 = v143;
    if ((_DWORD)v143 != -1)
      goto LABEL_43;
    goto LABEL_44;
  }
  if ((_DWORD)v143 != 1)
    goto LABEL_216;
  v28 = *(_QWORD *)v142;
  if (*(_QWORD *)v142)
    **(_DWORD **)v142 += 2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v142[8];
  *(_QWORD *)a1 = v28;
  v29 = 1;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_43:
  ((void (*)(const char **, _BYTE *))off_1E0FD71D8[v29])(&v139, v142);
LABEL_44:
  *(_DWORD *)(a2 + 44) = v6;
}

uint64_t WGSL::Parser<WGSL::Lexer<char16_t>>::parseAdditiveExpressionPostUnary(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _OWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  _DWORD *v31;
  __int128 v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;
  unsigned int v36;
  char v37;
  _DWORD *v38;
  __int128 v39;
  unsigned int v40;

  v6 = *(_QWORD *)(a2 + 88);
  v29 = *(_DWORD *)(a2 + 96);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseMultiplicativeExpressionPostUnary(&v38, a2, a3);
  v7 = v40;
  if (!v40)
  {
    *a3 = v38;
    v9 = (_OWORD *)(a1 + 8);
    v28 = v7;
LABEL_10:
    v12 = *(_DWORD *)(a2 + 56);
    if ((v12 - 59) > 0x11 || ((1 << (v12 - 59)) & 0x28809) == 0)
    {
      *(_QWORD *)a1 = *a3;
      *(_DWORD *)(a1 + 24) = 0;
LABEL_41:
      v7 = v28;
      return ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v7])(&v34, &v38);
    }
    result = WGSL::toBinaryOperation(v12);
    v37 = result;
    v15 = *(_DWORD *)(a2 + 36);
    v16 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v16;
      if (v15 <= v16)
        goto LABEL_44;
      v18 = *(_QWORD *)(a2 + 24);
      v19 = v18 + 32 * v16;
      v20 = *(_DWORD *)v19;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v19;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v19 + 4);
      v21 = *(_DWORD *)v19;
      if (v21 > 8)
        goto LABEL_16;
      if (((1 << v21) & 0x38) != 0)
        break;
      if (((1 << v21) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v18 + 32 * v16 + 24);
      }
      else if (v21 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v22 = *(_DWORD **)(v18 + 32 * v16 + 24);
        if (v22)
          *v22 += 2;
        goto LABEL_25;
      }
LABEL_16:
      v17 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v17;
      ++v16;
      if (v20 != 82)
      {
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression(&v34, a2);
        if (v36)
        {
          if (v36 != 1)
            goto LABEL_43;
          v23 = v34;
          if (v34)
            *v34 += 2;
          *v9 = v35;
          *(_QWORD *)a1 = v23;
          v10 = 1;
          *(_DWORD *)(a1 + 24) = 1;
          v11 = 1;
LABEL_8:
          ((void (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v11])(&v31, &v34);
        }
        else
        {
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseMultiplicativeExpressionPostUnary(&v31, a2, &v34);
          v10 = v33;
          if (v33)
          {
            if (v33 != 1)
              goto LABEL_43;
            v24 = v31;
            if (v31)
              *v31 += 2;
            *v9 = v32;
            *(_QWORD *)a1 = v24;
            *(_DWORD *)(a1 + 24) = 1;
            v25 = 1;
          }
          else
          {
            v26 = *(_QWORD **)(a2 + 8);
            v27 = *(_DWORD *)(a2 + 96) - v29;
            *(_QWORD *)&v30 = v6;
            *((_QWORD *)&v30 + 1) = __PAIR64__(v27, v29);
            *a3 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v26, &v30, a3, &v31, &v37);
            v25 = v33;
            if (v33 == -1)
            {
              v11 = v36;
              if (v36 != -1)
                goto LABEL_8;
              goto LABEL_9;
            }
          }
          ((void (*)(__int128 *, _DWORD **))off_1E0FD71D8[v25])(&v30, &v31);
          v11 = v36;
          if (v36 != -1)
            goto LABEL_8;
        }
LABEL_9:
        if (v10)
          goto LABEL_41;
        goto LABEL_10;
      }
    }
    v22 = *(_DWORD **)(v18 + 32 * v16 + 24);
LABEL_25:
    *(_QWORD *)(a2 + 80) = v22;
    goto LABEL_16;
  }
  if (v40 == 1)
  {
    v8 = v38;
    if (v38)
      *v38 += 2;
    *(_OWORD *)(a1 + 8) = v39;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 24) = 1;
    return ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v7])(&v34, &v38);
  }
LABEL_43:
  result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_44:
  __break(0xC471u);
  return result;
}

__n128 WGSL::Parser<WGSL::Lexer<char16_t>>::parsePostfixExpression(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unsigned int a5)
{
  unsigned int v6;
  _QWORD *v7;
  _OWORD *v10;
  unint64_t v11;
  __n128 result;
  char v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  unsigned int v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  unint64_t v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  _BYTE v53[24];
  int v54;
  _DWORD *v55;
  __n128 v56;
  unsigned int v57;
  _QWORD *v58;
  _QWORD v59[2];
  unint64_t v60[3];

  v6 = a4;
  v7 = a3;
  v47 = *(unsigned int *)(a2 + 96);
  v48 = *(_QWORD *)(a2 + 88);
  v10 = (_OWORD *)(a2 + 60);
  v58 = a3;
  v11 = HIDWORD(a4);
  v49 = (__n128 *)(a1 + 8);
  while (2)
  {
    while (1)
    {
      v15 = *(_DWORD *)(a2 + 56);
      if (v15 == 69)
        break;
      if (v15 != 45)
      {
        *(_QWORD *)a1 = v7;
        *(_DWORD *)(a1 + 24) = 0;
        return result;
      }
      v16 = *(_DWORD *)(a2 + 36);
      v17 = *(_DWORD *)(a2 + 40) + 1;
      do
      {
        *(_DWORD *)(a2 + 40) = v17;
        if (v16 <= v17)
          goto LABEL_80;
        v19 = *(_QWORD *)(a2 + 24);
        v20 = v19 + 32 * v17;
        v21 = *(_DWORD *)v20;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v20;
        *v10 = *(_OWORD *)(v20 + 4);
        v22 = *(_DWORD *)v20;
        if (v22 <= 8)
        {
          if (((1 << v22) & 0x38) != 0)
          {
            v23 = *(_DWORD **)(v19 + 32 * v17 + 24);
LABEL_18:
            *(_QWORD *)(a2 + 80) = v23;
            goto LABEL_9;
          }
          if (((1 << v22) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v19 + 32 * v17 + 24);
            goto LABEL_9;
          }
          if (v22 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v23 = *(_DWORD **)(v19 + 32 * v17 + 24);
            if (v23)
              *v23 += 2;
            goto LABEL_18;
          }
        }
LABEL_9:
        v18 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v18;
        ++v17;
      }
      while (v21 == 82);
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression(&v55, a2);
      if (v57)
      {
        if (v57 == 1)
        {
          v33 = v55;
          if (v55)
            *v55 += 2;
          v13 = 0;
          result = v56;
          *v49 = v56;
          *(_QWORD *)a1 = v33;
          *(_DWORD *)(a1 + 24) = 1;
          v14 = v57;
          if (v57 == -1)
            goto LABEL_4;
          goto LABEL_3;
        }
LABEL_76:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
        __break(0xC471u);
        JUMPOUT(0x182504F30);
      }
      if (*(_DWORD *)(a2 + 56) != 46)
      {
        *(_DWORD *)v53 = *(_DWORD *)(a2 + 56);
        v54 = 1;
        WGSL::toString(46);
        if (v54 != 1)
          goto LABEL_76;
        WGSL::toString(*(int *)v53);
        v60[0] = (unint64_t)"Expected a ";
        v60[1] = 12;
        v59[0] = ", but got a ";
        v59[1] = 13;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(v60, (uint64_t *)&v51, (uint64_t)v59, (uint64_t *)&v50, &v52);
        if (!v52)
          goto LABEL_80;
        v42 = v50;
        v50 = 0;
        if (v42)
        {
          if (*v42 != 2)
          {
            *v42 -= 2;
            goto LABEL_58;
          }
          WTF::StringImpl::destroy();
          v43 = v51;
          v51 = 0;
          if (v43)
          {
LABEL_61:
            if (*v43 == 2)
              WTF::StringImpl::destroy();
            else
              *v43 -= 2;
          }
        }
        else
        {
LABEL_58:
          v43 = v51;
          v51 = 0;
          if (v43)
            goto LABEL_61;
        }
        v44 = v47 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v47) << 32);
        *(_QWORD *)a1 = v52;
        *(_QWORD *)(a1 + 8) = v48;
        *(_QWORD *)(a1 + 16) = v44;
        *(_DWORD *)(a1 + 24) = 1;
        if (v54 != -1)
          ((void (*)(unint64_t *, _BYTE *))off_1E0FD6FF8[v54])(v60, v53);
        v13 = 0;
        v14 = v57;
        if (v57 == -1)
          goto LABEL_4;
LABEL_3:
        ((void (*)(_BYTE *, _DWORD **))off_1E0FD71D8[v14])(v53, &v55);
        goto LABEL_4;
      }
      *(_OWORD *)&v53[4] = *v10;
      *(_DWORD *)v53 = 46;
      v54 = 0;
      v34 = *(_DWORD *)(a2 + 36);
      v35 = *(_DWORD *)(a2 + 40) + 1;
      while (2)
      {
        *(_DWORD *)(a2 + 40) = v35;
        if (v34 <= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x182504F40);
        }
        v37 = *(_QWORD *)(a2 + 24);
        v38 = v37 + 32 * v35;
        v39 = *(_DWORD *)v38;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v38;
        *v10 = *(_OWORD *)(v38 + 4);
        v40 = *(_DWORD *)v38;
        if (v40 <= 8)
        {
          if (((1 << v40) & 0x38) != 0)
          {
            v41 = *(_DWORD **)(v37 + 32 * v35 + 24);
            goto LABEL_52;
          }
          if (((1 << v40) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v37 + 32 * v35 + 24);
          }
          else if (v40 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v41 = *(_DWORD **)(v37 + 32 * v35 + 24);
            if (v41)
              *v41 += 2;
LABEL_52:
            *(_QWORD *)(a2 + 80) = v41;
          }
        }
        v36 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v36;
        ++v35;
        if (v39 == 82)
          continue;
        break;
      }
      *(_DWORD *)v53 = v6;
      *(_DWORD *)&v53[4] = v11;
      *(_DWORD *)&v53[8] = a5;
      *(_DWORD *)&v53[12] = v36 - a5;
      v7 = WGSL::AST::Builder::construct<WGSL::AST::IndexAccessExpression,WGSL::SourceSpan &,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,void>(*(_QWORD **)(a2 + 8), v53, &v58, &v55);
      v58 = v7;
      v13 = 1;
      v14 = v57;
      if (v57 != -1)
        goto LABEL_3;
LABEL_4:
      if ((v13 & 1) == 0)
        return result;
    }
    v24 = *(_DWORD *)(a2 + 36);
    v25 = *(_DWORD *)(a2 + 40) + 1;
    do
    {
      *(_DWORD *)(a2 + 40) = v25;
      if (v24 <= v25)
      {
        __break(0xC471u);
        JUMPOUT(0x182504F38);
      }
      v27 = *(_QWORD *)(a2 + 24);
      v28 = v27 + 32 * v25;
      v29 = *(_DWORD *)v28;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v28;
      *v10 = *(_OWORD *)(v28 + 4);
      v30 = *(_DWORD *)v28;
      if (v30 <= 8)
      {
        if (((1 << v30) & 0x38) != 0)
        {
          v31 = *(_DWORD **)(v27 + 32 * v25 + 24);
LABEL_30:
          *(_QWORD *)(a2 + 80) = v31;
          goto LABEL_21;
        }
        if (((1 << v30) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v27 + 32 * v25 + 24);
          goto LABEL_21;
        }
        if (v30 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v31 = *(_DWORD **)(v27 + 32 * v25 + 24);
          if (v31)
            *v31 += 2;
          goto LABEL_30;
        }
      }
LABEL_21:
      v26 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v26;
      ++v25;
    }
    while (v29 == 82);
    WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)v53, a2);
    if (!v54)
    {
      v32 = *(_DWORD *)(a2 + 96) - a5;
      v55 = (_DWORD *)__PAIR64__(v11, v6);
      v56.n128_u64[0] = __PAIR64__(v32, a5);
      v7 = WGSL::AST::Builder::construct<WGSL::AST::FieldAccessExpression,WGSL::SourceSpan &,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::Identifier,void>(*(_QWORD **)(a2 + 8), &v55, &v58, (uint64_t)v53);
      v58 = v7;
      if (v54 != -1)
        ((void (*)(_DWORD **, _BYTE *))off_1E0FD6FE8[v54])(&v55, v53);
      continue;
    }
    break;
  }
  if (v54 != 1)
    goto LABEL_76;
  v45 = *(_DWORD **)v53;
  if (*(_QWORD *)v53)
  {
    v46 = **(_DWORD **)v53;
    **(_DWORD **)v53 += 2;
    result = *(__n128 *)&v53[8];
    *v49 = *(__n128 *)&v53[8];
    *(_QWORD *)a1 = v45;
    *(_DWORD *)(a1 + 24) = 1;
    *(_QWORD *)v53 = 0;
    if (v46)
      *v45 = v46;
    else
      WTF::StringImpl::destroy();
  }
  else
  {
    result = *(__n128 *)&v53[8];
    *v49 = *(__n128 *)&v53[8];
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 24) = 1;
  }
  return result;
}

void WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  int *v19;
  _QWORD *v20;
  unsigned int v21;
  int *v22;
  uint64_t v23;
  int v24;
  int *v25;
  int v26;
  int *v27;
  int *v28;
  __int128 v29;
  int v30;
  _QWORD *v31;
  __int128 v32;
  int v33;
  int *v34;
  __int128 v35;
  unsigned int v36;
  char v37;

  WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression((uint64_t)&v31, a2);
  if (!v33)
  {
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 - 36) <= 0x2C && ((1 << (v5 - 36)) & 0x100010000001) != 0)
    {
      v7 = *(_DWORD *)(a2 + 96);
      v27 = *(int **)(a2 + 88);
      v37 = WGSL::toBinaryOperation(v5);
      v8 = *(_DWORD *)(a2 + 56);
LABEL_14:
      if (*(_DWORD *)(a2 + 56) == v8)
      {
        v10 = *(_DWORD *)(a2 + 36);
        v11 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v11;
          if (v10 <= v11)
            goto LABEL_63;
          v13 = *(_QWORD *)(a2 + 24);
          v14 = v13 + 32 * v11;
          v15 = *(_DWORD *)v14;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(v14 + 4);
          v16 = *(_DWORD *)v14;
          if (v16 > 8)
            goto LABEL_17;
          if (((1 << v16) & 0x38) != 0)
            break;
          if (((1 << v16) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
          }
          else if (v16 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
            if (v17)
              *v17 += 2;
            goto LABEL_26;
          }
LABEL_17:
          v12 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v12;
          ++v11;
          if (v15 != 82)
          {
            WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression((uint64_t)&v34, a2);
            v18 = v36;
            if (v36)
            {
              if (v36 != 1)
                goto LABEL_62;
              v19 = v34;
              if (v34)
                *v34 += 2;
              *(_OWORD *)(a1 + 8) = v35;
              *(_QWORD *)a1 = v19;
              *(_DWORD *)(a1 + 24) = 1;
              v9 = 1;
LABEL_12:
              ((void (*)(int **, int **))off_1E0FD71D8[v9])(&v28, &v34);
            }
            else
            {
              v20 = *(_QWORD **)(a2 + 8);
              v21 = *(_DWORD *)(a2 + 96) - v7;
              v28 = v27;
              *(_QWORD *)&v29 = __PAIR64__(v21, v7);
              v31 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v20, &v28, &v31, &v34, &v37);
              v9 = v36;
              if (v36 != -1)
                goto LABEL_12;
            }
            if (v18)
              goto LABEL_57;
            goto LABEL_14;
          }
        }
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_26:
        *(_QWORD *)(a2 + 80) = v17;
        goto LABEL_17;
      }
      *(_QWORD *)a1 = v31;
      *(_DWORD *)(a1 + 24) = 0;
LABEL_57:
      if (v33 != -1)
        ((void (*)(int **, _QWORD **))off_1E0FD71D8[v33])(&v34, &v31);
      return;
    }
    WGSL::Parser<WGSL::Lexer<char16_t>>::parseRelationalExpressionPostUnary((uint64_t)&v34, a2, &v31);
    if (v36)
    {
      if (v36 != 1)
        goto LABEL_62;
      v22 = v34;
      if (v34)
        *v34 += 2;
      *(_OWORD *)(a1 + 8) = v35;
      *(_QWORD *)a1 = v22;
LABEL_39:
      *(_DWORD *)(a1 + 24) = 1;
      v23 = v36;
      if (v36 == -1)
        goto LABEL_57;
      goto LABEL_56;
    }
    v24 = *(_DWORD *)(a2 + 56);
    if (v24 == 37)
    {
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseShortCircuitExpression((uint64_t)&v28, a2, (uint64_t *)&v34, 37, 16);
      if (v30)
      {
        if (v30 != 1)
          goto LABEL_62;
        v25 = v28;
        if (v28)
        {
LABEL_46:
          v26 = *v25;
          *v25 += 2;
          *(_OWORD *)(a1 + 8) = v29;
          *(_QWORD *)a1 = v25;
          *(_DWORD *)(a1 + 24) = 1;
          if (v26)
          {
            *v25 = v26;
            v23 = v36;
            if (v36 == -1)
              goto LABEL_57;
          }
          else
          {
            WTF::StringImpl::destroy();
            v23 = v36;
            if (v36 == -1)
              goto LABEL_57;
          }
LABEL_56:
          ((void (*)(int **, int **))off_1E0FD71D8[v23])(&v28, &v34);
          goto LABEL_57;
        }
LABEL_52:
        *(_OWORD *)(a1 + 8) = v29;
        *(_QWORD *)a1 = 0;
        goto LABEL_39;
      }
    }
    else
    {
      if (v24 != 65)
      {
        *(_QWORD *)a1 = v34;
        *(_DWORD *)(a1 + 24) = 0;
        v23 = v36;
        if (v36 == -1)
          goto LABEL_57;
        goto LABEL_56;
      }
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseShortCircuitExpression((uint64_t)&v28, a2, (uint64_t *)&v34, 65, 17);
      if (v30)
      {
        if (v30 != 1)
          goto LABEL_62;
        v25 = v28;
        if (v28)
          goto LABEL_46;
        goto LABEL_52;
      }
    }
    v34 = v28;
    *(_QWORD *)a1 = v28;
    *(_DWORD *)(a1 + 24) = 0;
    v23 = v36;
    if (v36 == -1)
      goto LABEL_57;
    goto LABEL_56;
  }
  if (v33 == 1)
  {
    v4 = v31;
    if (v31)
      *(_DWORD *)v31 += 2;
    *(_OWORD *)(a1 + 8) = v32;
    *(_QWORD *)a1 = v4;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_57;
  }
LABEL_62:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
  __break(0xC471u);
}

_DWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseArgumentExpressionList(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF *v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int i;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  _BYTE v48[20];
  int v49;
  const char *v50;
  __int128 v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _QWORD v57[2];
  unint64_t v58[3];

  v3 = result;
  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 56);
  if (v6 != 67)
  {
    WGSL::toString(67);
    WGSL::toString(v6);
    *(_QWORD *)v48 = "Expected a ";
    *(_QWORD *)&v48[8] = 12;
    v50 = ", but got a ";
    *(_QWORD *)&v51 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v48, (uint64_t *)&v56, (uint64_t)&v50, (uint64_t *)&v55, v58);
    if (!v58[0])
    {
      __break(0xC471u);
      goto LABEL_90;
    }
    v16 = v55;
    v55 = 0;
    if (v16)
    {
      if (*v16 == 2)
      {
        WTF::StringImpl::destroy();
        result = v56;
        v56 = 0;
        if (!result)
        {
LABEL_82:
          v43 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)v3 = v58[0];
          *((_QWORD *)v3 + 1) = v4;
          *((_QWORD *)v3 + 2) = v43;
          v3[6] = 1;
          return result;
        }
LABEL_79:
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
        goto LABEL_82;
      }
      *v16 -= 2;
    }
    result = v56;
    v56 = 0;
    if (!result)
      goto LABEL_82;
    goto LABEL_79;
  }
  v7 = (_OWORD *)(a2 + 60);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v9;
    if (v8 <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x18250594CLL);
    }
    v11 = *(_QWORD *)(a2 + 24);
    v12 = v11 + 32 * v9;
    v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v12;
    *v7 = *(_OWORD *)(v12 + 4);
    v14 = *(_DWORD *)v12;
    if (v14 <= 8)
    {
      if (((1 << v14) & 0x38) != 0)
      {
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v15;
        goto LABEL_4;
      }
      if (((1 << v14) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v11 + 32 * v9 + 24);
        goto LABEL_4;
      }
      if (v14 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v15 = *(_DWORD **)(v11 + 32 * v9 + 24);
        if (v15)
          *v15 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v10 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v10;
    ++v9;
  }
  while (v13 == 82);
  v44 = v5;
  v17 = 0;
  v18 = 0;
  v53 = 0;
  v54 = 0;
  do
  {
    if (*(_DWORD *)(a2 + 56) == 68)
    {
      v35 = *(_DWORD *)(a2 + 36);
      for (i = *(_DWORD *)(a2 + 40) + 1; ; ++i)
      {
        *(_DWORD *)(a2 + 40) = i;
        if (v35 <= i)
        {
          __break(0xC471u);
          JUMPOUT(0x182505954);
        }
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v38 + 32 * i;
        v40 = *(_DWORD *)v39;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v39;
        *v7 = *(_OWORD *)(v39 + 4);
        v41 = *(_DWORD *)v39;
        if (v41 > 8)
          goto LABEL_65;
        if (((1 << v41) & 0x38) != 0)
          break;
        if (((1 << v41) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v38 + 32 * i + 24);
        }
        else if (v41 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v42 = *(_DWORD **)(v38 + 32 * i + 24);
          if (v42)
            *v42 += 2;
          goto LABEL_74;
        }
LABEL_65:
        v37 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v37;
        if (v40 != 82)
        {
          *(_QWORD *)v3 = v53;
          v3[2] = v54;
          v3[3] = v18;
          v3[6] = 0;
          return result;
        }
      }
      v42 = *(_DWORD **)(v38 + 32 * i + 24);
LABEL_74:
      *(_QWORD *)(a2 + 80) = v42;
      goto LABEL_65;
    }
    result = (_DWORD *)WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression(&v50, a2);
    if (!v52)
    {
      if (v18 == (_DWORD)v54)
      {
        result = (_DWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, v18 + 1, (unint64_t)&v50);
        v23 = HIDWORD(v54);
        v17 = v53;
        *((_QWORD *)v53 + HIDWORD(v54)) = *(_QWORD *)result;
        v18 = v23 + 1;
        HIDWORD(v54) = v23 + 1;
        v24 = *(_DWORD *)(a2 + 56);
        if (v24 == 68)
          goto LABEL_21;
      }
      else
      {
        *((_QWORD *)v17 + v18) = v50;
        v18 = ++HIDWORD(v54);
        v24 = *(_DWORD *)(a2 + 56);
        if (v24 == 68)
        {
LABEL_21:
          v19 = 1;
          v20 = v52;
          if (v52 == -1)
            continue;
LABEL_22:
          result = (_DWORD *)((uint64_t (*)(_BYTE *, const char **))off_1E0FD71D8[v20])(v48, &v50);
          continue;
        }
      }
      if (v24 == 48)
      {
        *(_OWORD *)&v48[4] = *v7;
        *(_DWORD *)v48 = 48;
        v49 = 0;
        v25 = *(_DWORD *)(a2 + 36);
        v26 = *(_DWORD *)(a2 + 40) + 1;
        while (1)
        {
          *(_DWORD *)(a2 + 40) = v26;
          if (v25 <= v26)
            goto LABEL_85;
          v28 = *(_QWORD *)(a2 + 24);
          v29 = v28 + 32 * v26;
          v30 = *(_DWORD *)v29;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v29;
          *v7 = *(_OWORD *)(v29 + 4);
          v31 = *(_DWORD *)v29;
          if (v31 <= 8)
          {
            if (((1 << v31) & 0x38) != 0)
            {
              v32 = *(_DWORD **)(v28 + 32 * v26 + 24);
LABEL_47:
              *(_QWORD *)(a2 + 80) = v32;
              goto LABEL_38;
            }
            if (((1 << v31) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v28 + 32 * v26 + 24);
            }
            else if (v31 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v32 = *(_DWORD **)(v28 + 32 * v26 + 24);
              if (v32)
                *v32 += 2;
              goto LABEL_47;
            }
          }
LABEL_38:
          v27 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v27;
          ++v26;
          if (v30 != 82)
            goto LABEL_21;
        }
      }
      *(_DWORD *)v48 = v24;
      v49 = 1;
      WGSL::toString(48);
      if (v49 != 1)
      {
LABEL_84:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_85:
        __break(0xC471u);
LABEL_90:
        JUMPOUT(0x182505944);
      }
      WGSL::toString(*(int *)v48);
      v58[0] = (unint64_t)"Expected a ";
      v58[1] = 12;
      v57[0] = ", but got a ";
      v57[1] = 13;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(v58, (uint64_t *)&v46, (uint64_t)v57, (uint64_t *)&v45, &v47);
      if (!v47)
      {
        __break(0xC471u);
        JUMPOUT(0x18250595CLL);
      }
      v33 = v45;
      v45 = 0;
      if (v33)
      {
        if (*v33 == 2)
        {
          WTF::StringImpl::destroy();
          result = v46;
          v46 = 0;
          if (!result)
            goto LABEL_59;
LABEL_56:
          if (*result == 2)
            result = (_DWORD *)WTF::StringImpl::destroy();
          else
            *result -= 2;
LABEL_59:
          v34 = v44 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v44) << 32);
          *(_QWORD *)v3 = v47;
          *((_QWORD *)v3 + 1) = v4;
          *((_QWORD *)v3 + 2) = v34;
          v3[6] = 1;
          if (v49 != -1)
            result = (_DWORD *)((uint64_t (*)(unint64_t *, _BYTE *))off_1E0FD6FF8[v49])(v58, v48);
          v19 = 0;
          v20 = v52;
          if (v52 != -1)
            goto LABEL_22;
          continue;
        }
        *v33 -= 2;
      }
      result = v46;
      v46 = 0;
      if (!result)
        goto LABEL_59;
      goto LABEL_56;
    }
    if (v52 != 1)
      goto LABEL_84;
    v22 = v50;
    if (v50)
      *(_DWORD *)v50 += 2;
    v19 = 0;
    *(_OWORD *)(v3 + 2) = v51;
    *(_QWORD *)v3 = v22;
    v3[6] = 1;
    v20 = v52;
    if (v52 != -1)
      goto LABEL_22;
  }
  while ((v19 & 1) != 0);
  if (v17)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    return (_DWORD *)WTF::fastFree(v17, v21);
  }
  return result;
}

uint64_t WGSL::Parser<WGSL::Lexer<char16_t>>::parseRelationalExpressionPostUnary(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  _DWORD *v27;
  __int128 v28;
  int v29;
  char v30;
  _DWORD *v31;
  __int128 v32;
  int v33;
  _DWORD *v34;
  __int128 v35;
  unsigned int v36;
  _DWORD *v37;
  __int128 v38;
  int v39;
  char v40;

  v6 = *(_DWORD **)(a2 + 88);
  v7 = *(_DWORD *)(a2 + 96);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseShiftExpressionPostUnary(&v31, a2, a3);
  if (!v33)
  {
    v10 = v31;
    *a3 = v31;
    v11 = *(_DWORD *)(a2 + 56);
    if (v11 > 0x38 || ((1 << v11) & 0x19C040000000000) == 0)
    {
LABEL_41:
      v9 = 0;
      *(_QWORD *)a1 = v10;
      *(_DWORD *)(a1 + 24) = 0;
      return ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v9])(&v37, &v31);
    }
    result = WGSL::toBinaryOperation(*(_DWORD *)(a2 + 56));
    v30 = result;
    v14 = *(_DWORD *)(a2 + 36);
    v15 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v15;
      if (v14 <= v15)
        goto LABEL_47;
      v17 = *(_QWORD *)(a2 + 24);
      v18 = v17 + 32 * v15;
      v19 = *(_DWORD *)v18;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v18;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v18 + 4);
      v20 = *(_DWORD *)v18;
      if (v20 > 8)
        goto LABEL_12;
      if (((1 << v20) & 0x38) != 0)
        break;
      if (((1 << v20) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v17 + 32 * v15 + 24);
      }
      else if (v20 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v21 = *(_DWORD **)(v17 + 32 * v15 + 24);
        if (v21)
          *v21 += 2;
        goto LABEL_21;
      }
LABEL_12:
      v16 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v16;
      ++v15;
      if (v19 != 82)
      {
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression((uint64_t)&v37, a2);
        if (v39)
        {
          if (v39 != 1)
            goto LABEL_46;
          v22 = v37;
          if (v37)
            *v37 += 2;
          v28 = v38;
          v27 = v22;
          LODWORD(v23) = 1;
          v29 = 1;
          v24 = 1;
          goto LABEL_34;
        }
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseShiftExpressionPostUnary(&v34, a2, &v37);
        v23 = v36;
        if (v36)
        {
          if (v36 != 1)
            goto LABEL_46;
          v22 = v34;
          if (v34)
            *v34 += 2;
          v28 = v35;
          v27 = v22;
          v29 = 1;
        }
        else
        {
          v22 = v34;
          v27 = v34;
          v29 = 0;
        }
        ((void (*)(char *, _DWORD **))off_1E0FD71D8[v23])(&v40, &v34);
        v24 = v39;
        if (v39 != -1)
LABEL_34:
          ((void (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v24])(&v34, &v37);
        if (!(_DWORD)v23)
        {
          v25 = *(_QWORD **)(a2 + 8);
          v26 = *(_DWORD *)(a2 + 96) - v7;
          v37 = v6;
          *(_QWORD *)&v38 = __PAIR64__(v26, v7);
          v10 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v25, &v37, a3, &v27, &v30);
          *a3 = v10;
          goto LABEL_41;
        }
        if ((_DWORD)v23 != 1)
          goto LABEL_46;
        if (!v22)
        {
          *(_OWORD *)(a1 + 8) = v28;
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 24) = 1;
          v9 = 0;
          return ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v9])(&v37, &v31);
        }
        *v22 += 2;
        *(_OWORD *)(a1 + 8) = v28;
        *(_QWORD *)a1 = v22;
        *(_DWORD *)(a1 + 24) = 1;
        v27 = 0;
        if (*v22 != 2)
        {
          *v22 -= 2;
          v9 = 0;
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD71D8[v9])(&v37, &v31);
        }
        result = WTF::StringImpl::destroy();
        v9 = v33;
        if (v33 != -1)
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD71D8[v9])(&v37, &v31);
        return result;
      }
    }
    v21 = *(_DWORD **)(v17 + 32 * v15 + 24);
LABEL_21:
    *(_QWORD *)(a2 + 80) = v21;
    goto LABEL_12;
  }
  if (v33 == 1)
  {
    v8 = v31;
    if (v31)
      *v31 += 2;
    *(_OWORD *)(a1 + 8) = v32;
    *(_QWORD *)a1 = v8;
    v9 = 1;
    *(_DWORD *)(a1 + 24) = 1;
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD71D8[v9])(&v37, &v31);
  }
LABEL_46:
  result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_47:
  __break(0xC471u);
  return result;
}

uint64_t WGSL::Parser<WGSL::Lexer<char16_t>>::parseShortCircuitExpression(uint64_t result, uint64_t a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  _DWORD *v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _OWORD *v30;
  _DWORD *v31;
  __int128 v32;
  unsigned int v33;
  char v34;
  _DWORD *v35;
  __int128 v36;
  unsigned int v37;
  _DWORD *v38;
  __int128 v39;
  unsigned int v40;
  _BYTE v41[9];

  v8 = result;
  v34 = a5;
  v28 = *(_DWORD *)(a2 + 92);
  v29 = *(_DWORD *)(a2 + 88);
  v9 = (_OWORD *)(a2 + 60);
  v27 = *(_DWORD *)(a2 + 96);
  v30 = (_OWORD *)(result + 8);
  while (*(_DWORD *)(a2 + 56) == a4)
  {
    v11 = *(_DWORD *)(a2 + 36);
    v12 = *(_DWORD *)(a2 + 40) + 1;
    do
    {
      *(_DWORD *)(a2 + 40) = v12;
      if (v11 <= v12)
        goto LABEL_40;
      v14 = *(_QWORD *)(a2 + 24);
      v15 = v14 + 32 * v12;
      v16 = *(_DWORD *)v15;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v15;
      *v9 = *(_OWORD *)(v15 + 4);
      v17 = *(_DWORD *)v15;
      if (v17 <= 8)
      {
        if (((1 << v17) & 0x38) != 0)
        {
          v18 = *(_DWORD **)(v14 + 32 * v12 + 24);
LABEL_17:
          *(_QWORD *)(a2 + 80) = v18;
          goto LABEL_8;
        }
        if (((1 << v17) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v14 + 32 * v12 + 24);
          goto LABEL_8;
        }
        if (v17 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v18 = *(_DWORD **)(v14 + 32 * v12 + 24);
          if (v18)
            *v18 += 2;
          goto LABEL_17;
        }
      }
LABEL_8:
      v13 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v13;
      ++v12;
    }
    while (v16 == 82);
    WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression((uint64_t)&v38, a2);
    if (!v40)
    {
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseRelationalExpressionPostUnary((uint64_t)&v35, a2, &v38);
      v21 = v37;
      if (v37)
      {
        if (v37 != 1)
        {
LABEL_39:
          result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_40:
          __break(0xC471u);
          return result;
        }
        v22 = v35;
        if (v35)
          *v35 += 2;
        v32 = v36;
      }
      else
      {
        v22 = v35;
      }
      v31 = v22;
      v33 = v21;
      ((void (*)(_BYTE *, _DWORD **))off_1E0FD71D8[v21])(v41, &v35);
      v20 = v40;
      if (v40 != -1)
        goto LABEL_30;
      goto LABEL_31;
    }
    if (v40 != 1)
      goto LABEL_39;
    v19 = v38;
    if (v38)
      *v38 += 2;
    v32 = v39;
    v31 = v19;
    v33 = 1;
    v20 = 1;
LABEL_30:
    ((void (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v20])(&v35, &v38);
LABEL_31:
    v23 = v33;
    if (!v33)
    {
      v25 = *(_QWORD **)(a2 + 8);
      v26 = *(_DWORD *)(a2 + 96) - v27;
      v38 = (_DWORD *)__PAIR64__(v28, v29);
      *(_QWORD *)&v39 = __PAIR64__(v26, v27);
      result = (uint64_t)WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v25, &v38, a3, &v31, &v34);
      *a3 = result;
      v10 = v33;
      if (v33 != -1)
        goto LABEL_3;
      goto LABEL_4;
    }
    if (v33 != 1)
      goto LABEL_39;
    v24 = v31;
    if (v31)
      *v31 += 2;
    *v30 = v32;
    *(_QWORD *)v8 = v24;
    *(_DWORD *)(v8 + 24) = 1;
    v10 = 1;
LABEL_3:
    result = ((uint64_t (*)(_DWORD **, _DWORD **))off_1E0FD71D8[v10])(&v38, &v31);
LABEL_4:
    if (v23)
      return result;
  }
  *(_QWORD *)v8 = *a3;
  *(_DWORD *)(v8 + 24) = 0;
  return result;
}

_QWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseShiftExpressionPostUnary(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  _QWORD *v27;
  unsigned int v28;
  char v29;
  _DWORD *v30;
  int v31;
  unsigned int v32;
  char v33;
  __int128 v34;
  _DWORD *v35;
  __int128 v36;
  int v37;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 56);
  if ((v6 - 59) <= 0x11 && ((1 << (v6 - 59)) & 0x28809) != 0)
    return (_QWORD *)WGSL::Parser<WGSL::Lexer<char16_t>>::parseAdditiveExpressionPostUnary((uint64_t)result, a2, a3);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_DWORD *)(a2 + 96);
  if (v6 != 57)
  {
    if (v6 != 53)
    {
      *result = *a3;
      *((_DWORD *)result + 6) = 0;
      return result;
    }
    v10 = *(_DWORD *)(a2 + 36);
    v11 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v11;
      if (v10 <= v11)
        goto LABEL_45;
      v13 = *(_QWORD *)(a2 + 24);
      v14 = v13 + 32 * v11;
      v15 = *(_DWORD *)v14;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v14 + 4);
      v16 = *(_DWORD *)v14;
      if (v16 > 8)
        goto LABEL_10;
      if (((1 << v16) & 0x38) != 0)
        break;
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
      }
      else if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_19;
      }
LABEL_10:
      v12 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v12;
      ++v11;
      if (v15 != 82)
      {
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression((uint64_t)&v35, a2);
        v26 = v37;
        if (!v37)
        {
          v27 = *(_QWORD **)(a2 + 8);
          v28 = *(_DWORD *)(a2 + 96) - v9;
          *(_QWORD *)&v34 = v8;
          *((_QWORD *)&v34 + 1) = __PAIR64__(v28, v9);
          v29 = 9;
          goto LABEL_41;
        }
LABEL_36:
        if (v26 == 1)
        {
          v30 = v35;
          if (v35)
            *v35 += 2;
          *(_OWORD *)(v5 + 1) = v36;
          *v5 = v30;
          v31 = 1;
          *((_DWORD *)v5 + 6) = 1;
          return (_QWORD *)((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v31])(&v34, &v35);
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_45:
        __break(0xC471u);
LABEL_47:
        JUMPOUT(0x1825062A0);
      }
    }
    v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_19:
    *(_QWORD *)(a2 + 80) = v17;
    goto LABEL_10;
  }
  v18 = *(_DWORD *)(a2 + 36);
  v19 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v19;
    if (v18 <= v19)
    {
      __break(0xC471u);
      goto LABEL_47;
    }
    v21 = *(_QWORD *)(a2 + 24);
    v22 = v21 + 32 * v19;
    v23 = *(_DWORD *)v22;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v22;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v22 + 4);
    v24 = *(_DWORD *)v22;
    if (v24 <= 8)
    {
      if (((1 << v24) & 0x38) != 0)
      {
        v25 = *(_DWORD **)(v21 + 32 * v19 + 24);
LABEL_31:
        *(_QWORD *)(a2 + 80) = v25;
        goto LABEL_22;
      }
      if (((1 << v24) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v21 + 32 * v19 + 24);
        goto LABEL_22;
      }
      if (v24 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v25 = *(_DWORD **)(v21 + 32 * v19 + 24);
        if (v25)
          *v25 += 2;
        goto LABEL_31;
      }
    }
LABEL_22:
    v20 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v20;
    ++v19;
  }
  while (v23 == 82);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression((uint64_t)&v35, a2);
  v26 = v37;
  if (v37)
    goto LABEL_36;
  v27 = *(_QWORD **)(a2 + 8);
  v32 = *(_DWORD *)(a2 + 96) - v9;
  *(_QWORD *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = __PAIR64__(v32, v9);
  v29 = 8;
LABEL_41:
  v33 = v29;
  result = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v27, &v34, a3, &v35, &v33);
  *v5 = result;
  *((_DWORD *)v5 + 6) = 0;
  v31 = v37;
  if (v37 != -1)
    return (_QWORD *)((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v31])(&v34, &v35);
  return result;
}

_QWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseMultiplicativeExpressionPostUnary(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  unsigned int v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  int v10;
  char v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int v21;
  _DWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  _DWORD *v28;
  __int128 v29;
  unsigned int v30;
  char v31;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 96);
  v25 = *(_DWORD *)(a2 + 92);
  v26 = *(_DWORD *)(a2 + 88);
  v7 = (_OWORD *)(a2 + 60);
  v8 = result + 1;
  while (1)
  {
    v10 = *(_DWORD *)(a2 + 56);
    if ((v10 - 62) > 0xE || ((1 << (v10 - 62)) & 0x5001) == 0)
      break;
    v31 = 2;
    if (v10 != 76)
    {
      if (v10 == 74)
      {
        v12 = 3;
      }
      else
      {
        if (v10 != 62)
          goto LABEL_36;
        v12 = 4;
      }
      v31 = v12;
    }
    v13 = *(_DWORD *)(a2 + 36);
    v14 = *(_DWORD *)(a2 + 40) + 1;
    do
    {
      *(_DWORD *)(a2 + 40) = v14;
      if (v13 <= v14)
        goto LABEL_36;
      v16 = *(_QWORD *)(a2 + 24);
      v17 = v16 + 32 * v14;
      v18 = *(_DWORD *)v17;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v17;
      *v7 = *(_OWORD *)(v17 + 4);
      v19 = *(_DWORD *)v17;
      if (v19 <= 8)
      {
        if (((1 << v19) & 0x38) != 0)
        {
          v20 = *(_DWORD **)(v16 + 32 * v14 + 24);
LABEL_26:
          *(_QWORD *)(a2 + 80) = v20;
          goto LABEL_17;
        }
        if (((1 << v19) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v16 + 32 * v14 + 24);
          goto LABEL_17;
        }
        if (v19 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v20 = *(_DWORD **)(v16 + 32 * v14 + 24);
          if (v20)
            *v20 += 2;
          goto LABEL_26;
        }
      }
LABEL_17:
      v15 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v15;
      ++v14;
    }
    while (v18 == 82);
    WGSL::Parser<WGSL::Lexer<char16_t>>::parseUnaryExpression(&v28, a2);
    v21 = v30;
    if (!v30)
    {
      v23 = *(_QWORD **)(a2 + 8);
      v24 = *(_DWORD *)(a2 + 96) - v6;
      *(_QWORD *)&v27 = __PAIR64__(v25, v26);
      *((_QWORD *)&v27 + 1) = __PAIR64__(v24, v6);
      result = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation const&,void>(v23, &v27, a3, &v28, &v31);
      *a3 = result;
      v9 = v30;
      if (v30 != -1)
        goto LABEL_3;
      goto LABEL_4;
    }
    if (v30 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x1825064F4);
    }
    v22 = v28;
    if (v28)
      *v28 += 2;
    *v8 = v29;
    *v5 = v22;
    *((_DWORD *)v5 + 6) = 1;
    v9 = 1;
LABEL_3:
    result = (_QWORD *)((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v9])(&v27, &v28);
LABEL_4:
    if (v21)
      return result;
  }
  *v5 = *a3;
  *((_DWORD *)v5 + 6) = 0;
  return result;
}

_DWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttribute(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *result;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  _QWORD *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  const char *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  const char *v72;
  _DWORD *v73;
  _QWORD *v74;
  unsigned int v75;
  _QWORD *v76;
  _DWORD *v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  unsigned __int8 **v81;
  unint64_t v82;
  _QWORD *v83;
  unsigned int v84;
  _DWORD *v85;
  const char *v86;
  _QWORD *v87;
  unsigned int v88;
  _QWORD *v89;
  _QWORD *v90;
  unsigned int v91;
  _DWORD *v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  _QWORD *v96;
  unsigned int v97;
  _DWORD *v98;
  const char *v99;
  char *v100;
  const char *v101;
  unint64_t v102;
  _QWORD *v103;
  unsigned int v104;
  _QWORD *v105;
  unsigned int v106;
  _QWORD *v107;
  unsigned int v108;
  _DWORD *v109;
  _QWORD *v110;
  unsigned int v111;
  char v112;
  _BYTE *v113;
  _QWORD *v114;
  unsigned int v115;
  const char *v116;
  _DWORD *v117;
  unsigned int v118;
  unint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  unint64_t v122;
  unsigned int v123;
  _QWORD *v124;
  unsigned int v125;
  _QWORD *v126;
  unsigned int v127;
  unint64_t v128;
  _QWORD *v129;
  unsigned int v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  _DWORD *v146;
  _DWORD *v147;
  _DWORD *v148;
  const char *v149;
  __int128 v150;
  int v151;
  const char *v152;
  const char *v153;
  _DWORD *v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  const char *v158;
  __int128 v159;
  _DWORD *v160;
  unsigned int v161;
  _DWORD *v162;
  _DWORD *v163;
  _DWORD *v164;
  _DWORD *v165;
  _DWORD *v166;
  _DWORD *v167;
  _DWORD *v168;
  _DWORD *v169;
  _DWORD *v170;
  _DWORD *v171;
  _DWORD *v172;
  _DWORD *v173;
  const char *v174;
  __int128 v175;
  _DWORD *v176;
  unsigned int v177;
  _DWORD *v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  _BYTE v182[24];
  _DWORD *v183;
  int v184;
  int v185;
  _DWORD *v186;
  _DWORD *v187;

  v4 = *(const char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 56);
  if (v6 != 40)
  {
    WGSL::toString(40);
    WGSL::toString(v6);
    *(_QWORD *)v182 = "Expected a ";
    *(_QWORD *)&v182[8] = 12;
    v174 = ", but got a ";
    *(_QWORD *)&v175 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v182, (uint64_t *)&v187, (uint64_t)&v174, (uint64_t *)&v186, &v158);
    if (!v158)
    {
      __break(0xC471u);
      JUMPOUT(0x182508200);
    }
    v17 = v186;
    v186 = 0;
    if (v17)
    {
      if (*v17 == 2)
      {
        WTF::StringImpl::destroy();
        result = v187;
        v187 = 0;
        if (!result)
        {
LABEL_57:
          v32 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v158;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v32;
          *(_DWORD *)(a1 + 24) = 1;
          return result;
        }
LABEL_54:
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
        goto LABEL_57;
      }
      *v17 -= 2;
    }
    result = v187;
    v187 = 0;
    if (!result)
      goto LABEL_57;
    goto LABEL_54;
  }
  v7 = (unint64_t)&v149;
  v8 = a2 + 60;
  v9 = *(_DWORD *)(a2 + 36);
  v10 = *(_DWORD *)(a2 + 40) + 1;
  v11 = 32 * v10;
  do
  {
    *(_DWORD *)(a2 + 40) = v10;
    if (v9 <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1825081E0);
    }
    v13 = *(_QWORD *)(a2 + 24);
    v14 = *(unsigned int *)(v13 + v11);
    *(_DWORD *)(a2 + 56) = v14;
    *(_OWORD *)v8 = *(_OWORD *)(v13 + v11 + 4);
    v15 = *(_DWORD *)(v13 + v11);
    if (v15 <= 8)
    {
      if (((1 << v15) & 0x38) != 0)
      {
        v16 = *(_DWORD **)(v13 + v11 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v16;
        goto LABEL_4;
      }
      if (((1 << v15) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + v11 + 24);
        goto LABEL_4;
      }
      if (v15 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v16 = *(_DWORD **)(v13 + v11 + 24);
        if (v16)
          *v16 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v12 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v12;
    ++v10;
    v11 += 32;
  }
  while ((_DWORD)v14 == 82);
  if ((_DWORD)v14 != 18)
  {
    if ((_DWORD)v14 == 8)
    {
      *(_DWORD *)v182 = 8;
      *(_OWORD *)&v182[4] = *(_OWORD *)v8;
      v24 = *(_DWORD **)(a2 + 80);
      if (v24)
        *v24 += 2;
      v183 = v24;
      v184 = 0;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v10;
        if (v9 <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1825081F0);
        }
        v26 = v13 + 32 * v10;
        v27 = *(_DWORD *)v26;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v26;
        *(_OWORD *)v8 = *(_OWORD *)(v26 + 4);
        v28 = *(_DWORD *)v26;
        if (v28 > 8)
          goto LABEL_38;
        if (((1 << v28) & 0x38) != 0)
          break;
        if (((1 << v28) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v10 + 24);
        }
        else if (v28 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v29 = *(_DWORD **)(v13 + 32 * v10 + 24);
          if (v29)
            *v29 += 2;
          goto LABEL_47;
        }
LABEL_38:
        v25 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v25;
        ++v10;
        if (v27 != 82)
        {
          if (MEMORY[0x186DAB1B8](v24, "group", 5))
          {
            v35 = *(_DWORD *)(a2 + 56);
            if (v35 == 67)
            {
              v36 = *(_DWORD *)(a2 + 36);
              v37 = *(_DWORD *)(a2 + 40) + 1;
              while (1)
              {
                *(_DWORD *)(a2 + 40) = v37;
                if (v36 <= v37)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1825081F8);
                }
                v39 = *(_QWORD *)(a2 + 24);
                v40 = v39 + 32 * v37;
                v41 = *(_DWORD *)v40;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v40;
                *(_OWORD *)v8 = *(_OWORD *)(v40 + 4);
                v42 = *(_DWORD *)v40;
                if (v42 > 8)
                  goto LABEL_68;
                if (((1 << v42) & 0x38) != 0)
                  break;
                if (((1 << v42) & 0xC4) != 0)
                {
                  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v39 + 32 * v37 + 24);
                }
                else if (v42 == 8)
                {
                  *(_QWORD *)(a2 + 80) = 0;
                  v43 = *(_DWORD **)(v39 + 32 * v37 + 24);
                  if (v43)
                    *v43 += 2;
                  goto LABEL_77;
                }
LABEL_68:
                v38 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v38;
                ++v37;
                if (v41 != 82)
                {
                  WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v158, a2);
                  v14 = v160;
                  if (!(_DWORD)v160)
                  {
                    if (*(_DWORD *)(a2 + 56) == 48)
                      WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                    WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
                    v7 = v177;
                    if (v177)
                    {
                      WGSL::toString(68);
                      if ((_DWORD)v7 == 1)
                      {
                        WGSL::toString((int)v174);
                        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v173, (uint64_t *)&v172);
                        v59 = v172;
                        v172 = 0;
                        if (v59)
                        {
                          if (*v59 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *v59 -= 2;
                        }
                        v70 = v173;
                        v173 = 0;
                        if (!v70)
                          goto LABEL_233;
LABEL_230:
                        if (*v70 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *v70 -= 2;
                        goto LABEL_233;
                      }
LABEL_464:
                      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_465:
                      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v7 + 8);
                      *(_QWORD *)a1 = 0;
LABEL_273:
                      *(_DWORD *)(a1 + 24) = 1;
LABEL_274:
                      ((void (*)(const char **, const char **))off_1E0FD71D8[v8])(&v149, &v174);
LABEL_235:
                      ((void (*)(const char **, const char **))off_1E0FD71D8[v14])(&v174, &v158);
                      v56 = 0;
                      return (_DWORD *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD6FF8[v56])(&v174, v182);
                    }
                    if ((_DWORD)v174 == 8 && v176)
                    {
                      if (*v176 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v176 -= 2;
                    }
                    v74 = *(_QWORD **)(a2 + 8);
                    v75 = *(_DWORD *)(a2 + 96) - v5;
                    v174 = v4;
                    *(_QWORD *)&v175 = __PAIR64__(v75, v5);
                    v76 = WGSL::AST::Builder::construct<WGSL::AST::GroupAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v74, &v174, &v158);
LABEL_282:
                    *(_QWORD *)a1 = v76;
                    *(_DWORD *)(a1 + 24) = 0;
                    goto LABEL_235;
                  }
LABEL_198:
                  if ((_DWORD)v14 != 1)
                    goto LABEL_464;
                  v72 = v158;
                  if (v158)
                    *(_DWORD *)v158 += 2;
                  *(_OWORD *)(a1 + 8) = v159;
                  *(_QWORD *)a1 = v72;
LABEL_234:
                  *(_DWORD *)(a1 + 24) = 1;
                  goto LABEL_235;
                }
              }
              v43 = *(_DWORD **)(v39 + 32 * v37 + 24);
LABEL_77:
              *(_QWORD *)(a2 + 80) = v43;
              goto LABEL_68;
            }
            WGSL::toString(67);
            WGSL::toString(v35);
            v174 = "Expected a ";
            *(_QWORD *)&v175 = 12;
            v158 = ", but got a ";
            *(_QWORD *)&v159 = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v174, (uint64_t *)&v179, (uint64_t)&v158, (uint64_t *)&v178, &v149);
            if (!v149)
            {
              __break(0xC471u);
              JUMPOUT(0x182508218);
            }
            v57 = v178;
            v178 = 0;
            if (v57)
            {
              if (*v57 == 2)
                WTF::StringImpl::destroy();
              else
                *v57 -= 2;
            }
            v63 = v179;
            v179 = 0;
            if (v63)
            {
              if (*v63 == 2)
                WTF::StringImpl::destroy();
              else
                *v63 -= 2;
            }
            v56 = 0;
            v64 = (*(_DWORD *)(a2 + 96) - v5);
            v65 = v149;
LABEL_373:
            *(_QWORD *)a1 = v65;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v5 | (v64 << 32);
LABEL_374:
            *(_DWORD *)(a1 + 24) = 1;
            return (_DWORD *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD6FF8[v56])(&v174, v182);
          }
          if (MEMORY[0x186DAB1B8](v24, "binding", 7))
          {
            v46 = *(_DWORD *)(a2 + 56);
            if (v46 != 67)
            {
              WGSL::toString(67);
              WGSL::toString(v46);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v174, (uint64_t *)&v171, (uint64_t *)&v170);
              v60 = v170;
              v170 = 0;
              if (v60)
              {
                if (*v60 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v60 -= 2;
              }
              v67 = v171;
              v171 = 0;
              if (v67)
              {
                if (*v67 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v67 -= 2;
              }
              v56 = 0;
              v64 = (*(_DWORD *)(a2 + 96) - v5);
              v65 = v174;
              goto LABEL_373;
            }
            v47 = *(_DWORD *)(a2 + 36);
            v48 = *(_DWORD *)(a2 + 40) + 1;
            while (2)
            {
              *(_DWORD *)(a2 + 40) = v48;
              if (v47 <= v48)
              {
                __break(0xC471u);
                JUMPOUT(0x182508208);
              }
              v50 = *(_QWORD *)(a2 + 24);
              v51 = v50 + 32 * v48;
              v52 = *(_DWORD *)v51;
              *(_DWORD *)(a2 + 56) = *(_DWORD *)v51;
              *(_OWORD *)v8 = *(_OWORD *)(v51 + 4);
              v53 = *(_DWORD *)v51;
              if (v53 <= 8)
              {
                if (((1 << v53) & 0x38) != 0)
                {
                  v54 = *(_DWORD **)(v50 + 32 * v48 + 24);
                  goto LABEL_93;
                }
                if (((1 << v53) & 0xC4) != 0)
                {
                  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v50 + 32 * v48 + 24);
                }
                else if (v53 == 8)
                {
                  *(_QWORD *)(a2 + 80) = 0;
                  v54 = *(_DWORD **)(v50 + 32 * v48 + 24);
                  if (v54)
                    *v54 += 2;
LABEL_93:
                  *(_QWORD *)(a2 + 80) = v54;
                }
              }
              v49 = *(_DWORD *)(a2 + 68);
              *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
              *(_DWORD *)(a2 + 96) = v49;
              ++v48;
              if (v52 != 82)
              {
                WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v158, a2);
                v14 = v160;
                if ((_DWORD)v160)
                  goto LABEL_198;
                if (*(_DWORD *)(a2 + 56) == 48)
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
                v7 = v177;
                if (!v177)
                {
                  if ((_DWORD)v174 == 8 && v176)
                  {
                    if (*v176 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v176 -= 2;
                  }
                  v83 = *(_QWORD **)(a2 + 8);
                  v84 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v84, v5);
                  v76 = WGSL::AST::Builder::construct<WGSL::AST::BindingAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v83, &v174, &v158);
                  goto LABEL_282;
                }
                WGSL::toString(68);
                if ((_DWORD)v7 != 1)
                  goto LABEL_464;
                WGSL::toString((int)v174);
                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v169, (uint64_t *)&v168);
                v62 = v168;
                v168 = 0;
                if (v62)
                {
                  if (*v62 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v62 -= 2;
                }
                v70 = v169;
                v169 = 0;
                if (v70)
                  goto LABEL_230;
LABEL_233:
                v78 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                *(_QWORD *)a1 = v149;
                *(_QWORD *)(a1 + 8) = v4;
                *(_QWORD *)(a1 + 16) = v78;
                goto LABEL_234;
              }
              continue;
            }
          }
          if (MEMORY[0x186DAB1B8](v24, "location", 8))
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
            v14 = v177;
            if (!v177)
            {
              if ((_DWORD)v174 == 8 && v176)
              {
                if (*v176 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v176 -= 2;
              }
              WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v158, a2);
              v14 = v160;
              if ((_DWORD)v160)
                goto LABEL_198;
              if (*(_DWORD *)(a2 + 56) == 48)
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
              v7 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                v90 = *(_QWORD **)(a2 + 8);
                v91 = *(_DWORD *)(a2 + 96) - v5;
                v174 = v4;
                *(_QWORD *)&v175 = __PAIR64__(v91, v5);
                v76 = WGSL::AST::Builder::construct<WGSL::AST::LocationAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v90, &v174, (uint64_t *)&v158);
                goto LABEL_282;
              }
              WGSL::toString(68);
              if ((_DWORD)v7 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v165, (uint64_t *)&v164);
              v73 = v164;
              v164 = 0;
              if (v73)
              {
                if (*v73 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v73 -= 2;
              }
              v70 = v165;
              v165 = 0;
              if (v70)
                goto LABEL_230;
              goto LABEL_233;
            }
            WGSL::toString(67);
            if ((_DWORD)v14 != 1)
              goto LABEL_464;
            WGSL::toString((int)v174);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v167, (uint64_t *)&v166);
            v58 = v166;
            v166 = 0;
            if (v58)
            {
              if (*v58 == 2)
                WTF::StringImpl::destroy();
              else
                *v58 -= 2;
            }
            v69 = v167;
            v167 = 0;
            if (!v69)
              goto LABEL_372;
LABEL_369:
            if (*v69 == 2)
              WTF::StringImpl::destroy();
            else
              *v69 -= 2;
            goto LABEL_372;
          }
          if (MEMORY[0x186DAB1B8](v24, "builtin", 7))
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
            v14 = v177;
            if (v177)
            {
              WGSL::toString(67);
              if ((_DWORD)v14 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v163, (uint64_t *)&v162);
              v61 = v162;
              v162 = 0;
              if (v61)
              {
                if (*v61 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v61 -= 2;
              }
              v69 = v163;
              v163 = 0;
              if (v69)
                goto LABEL_369;
              goto LABEL_372;
            }
            if ((_DWORD)v174 == 8 && v176)
            {
              if (*v176 == 2)
                WTF::StringImpl::destroy();
              else
                *v176 -= 2;
            }
            v14 = (unint64_t)&v174;
            WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v174, a2);
            if (v177)
            {
              if (v177 != 1)
                goto LABEL_464;
              v79 = v174;
              if (v174)
                *(_DWORD *)v174 += 2;
              *(_OWORD *)(a1 + 8) = v175;
              *(_QWORD *)a1 = v79;
              *(_DWORD *)(a1 + 24) = 1;
              v80 = v177;
              if (v177 != -1)
                goto LABEL_242;
            }
            else
            {
              v81 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::Builtin> [12]>::tryGet<WTF::String>((unsigned __int8 ***)WGSL::parseBuiltin(WTF::String const&)::__map, (uint64_t *)&v176);
              if (v81)
              {
                v14 = (unint64_t)v81;
                switch(*(_BYTE *)v81)
                {
                  case 0:
                    *(_BYTE *)(*(_QWORD *)a2 + 19) = 1;
                    break;
                  case 1:
                    *(_BYTE *)(*(_QWORD *)a2 + 25) = 1;
                    break;
                  case 8:
                    *(_BYTE *)(*(_QWORD *)a2 + 26) = 1;
                    break;
                  case 9:
                    *(_BYTE *)(*(_QWORD *)a2 + 24) = 1;
                    break;
                  default:
                    break;
                }
                if (*(_DWORD *)(a2 + 56) == 48)
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v158, a2, 68);
                v7 = v161;
                if (v161)
                {
                  WGSL::toString(68);
                  if ((_DWORD)v7 != 1)
                    goto LABEL_464;
                  WGSL::toString((int)v158);
                  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v157, (uint64_t *)&v156);
                  v92 = v156;
                  v156 = 0;
                  if (v92)
                  {
                    if (*v92 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v92 -= 2;
                  }
                  v93 = v157;
                  v157 = 0;
                  if (v93)
                  {
                    if (*v93 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v93 -= 2;
                  }
                  v94 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                  *(_QWORD *)a1 = v149;
                  *(_QWORD *)(a1 + 8) = v4;
                  *(_QWORD *)(a1 + 16) = v94;
                  *(_DWORD *)(a1 + 24) = 1;
                  v80 = v177;
                  if (v177 != -1)
LABEL_242:
                    ((void (*)(const char **, const char **))off_1E0FD6FE8[v80])(&v158, &v174);
                }
                else
                {
                  if ((_DWORD)v158 == 8 && v160)
                  {
                    if (*v160 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v160 -= 2;
                  }
                  v103 = *(_QWORD **)(a2 + 8);
                  v104 = *(_DWORD *)(a2 + 96) - v5;
                  v158 = v4;
                  *(_QWORD *)&v159 = __PAIR64__(v104, v5);
                  *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::BuiltinAttribute,WGSL::SourceSpan,WGSL::Builtin const&,void>(v103, &v158, (char *)v14);
                  *(_DWORD *)(a1 + 24) = 0;
                  v80 = v177;
                  if (v177 != -1)
                    goto LABEL_242;
                }
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v82 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                *(_QWORD *)a1 = v158;
                *(_QWORD *)(a1 + 8) = v4;
                *(_QWORD *)(a1 + 16) = v82;
                *(_DWORD *)(a1 + 24) = 1;
                v80 = v177;
                if (v177 != -1)
                  goto LABEL_242;
              }
            }
LABEL_243:
            v56 = 0;
            return (_DWORD *)((uint64_t (*)(_QWORD, _QWORD))off_1E0FD6FF8[v56])(&v174, v182);
          }
          if (MEMORY[0x186DAB1B8](v24, "workgroup_size", 14))
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
            v14 = v177;
            if (!v177)
            {
              if ((_DWORD)v174 == 8 && v176)
              {
                if (*v176 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v176 -= 2;
              }
              WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v158, a2);
              v14 = v160;
              if ((_DWORD)v160)
                goto LABEL_198;
              v152 = 0;
              v153 = 0;
              if (*(_DWORD *)(a2 + 56) == 48)
              {
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                if (*(_DWORD *)(a2 + 56) != 68)
                {
                  WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v174, a2);
                  v8 = v176;
                  if ((_DWORD)v176)
                  {
                    if ((_DWORD)v176 != 1)
                      goto LABEL_464;
                    v86 = v174;
                    if (v174)
                      *(_DWORD *)v174 += 2;
                    *(_OWORD *)(a1 + 8) = v175;
                    *(_QWORD *)a1 = v86;
                    goto LABEL_273;
                  }
                  v153 = v174;
                  if (*(_DWORD *)(a2 + 56) == 48)
                  {
                    WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                    if (*(_DWORD *)(a2 + 56) != 68)
                    {
                      WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v149, a2);
                      if (v151)
                      {
                        if (v151 != 1)
                          goto LABEL_464;
                        v116 = v149;
                        if (!v149)
                          goto LABEL_465;
                        *(_DWORD *)v149 += 2;
                        *(_OWORD *)(a1 + 8) = v150;
                        *(_QWORD *)a1 = v116;
                        *(_DWORD *)(a1 + 24) = 1;
                        if (*(_DWORD *)v116 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *(_DWORD *)v116 -= 2;
                        goto LABEL_274;
                      }
                      v152 = v149;
                      if (*(_DWORD *)(a2 + 56) == 48)
                        WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                    }
                  }
                  ((void (*)(const char **, const char **))off_1E0FD71D8[v8])(&v149, &v174);
                }
              }
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
              v7 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                v107 = *(_QWORD **)(a2 + 8);
                v108 = *(_DWORD *)(a2 + 96) - v5;
                v174 = v4;
                *(_QWORD *)&v175 = __PAIR64__(v108, v5);
                v76 = WGSL::AST::Builder::construct<WGSL::AST::WorkgroupSizeAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::Expression*,WGSL::AST::Expression*,void>(v107, &v174, &v158, (uint64_t *)&v153, (uint64_t *)&v152);
                goto LABEL_282;
              }
              WGSL::toString(68);
              if ((_DWORD)v7 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v148, (uint64_t *)&v147);
              v98 = v147;
              v147 = 0;
              if (v98)
              {
                if (*v98 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v98 -= 2;
              }
              v70 = v148;
              v148 = 0;
              if (v70)
                goto LABEL_230;
              goto LABEL_233;
            }
            WGSL::toString(67);
            if ((_DWORD)v14 != 1)
              goto LABEL_464;
            WGSL::toString((int)v174);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v155, (uint64_t *)&v154);
            v66 = v154;
            v154 = 0;
            if (v66)
            {
              if (*v66 == 2)
                WTF::StringImpl::destroy();
              else
                *v66 -= 2;
            }
            v69 = v155;
            v155 = 0;
            if (v69)
              goto LABEL_369;
            goto LABEL_372;
          }
          if (MEMORY[0x186DAB1B8](v24, "align", 5))
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
            v14 = v177;
            if (!v177)
            {
              if ((_DWORD)v174 == 8 && v176)
              {
                if (*v176 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v176 -= 2;
              }
              WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v158, a2);
              v14 = v160;
              if ((_DWORD)v160)
                goto LABEL_198;
              if (*(_DWORD *)(a2 + 56) == 48)
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
              v7 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                v114 = *(_QWORD **)(a2 + 8);
                v115 = *(_DWORD *)(a2 + 96) - v5;
                v174 = v4;
                *(_QWORD *)&v175 = __PAIR64__(v115, v5);
                v76 = WGSL::AST::Builder::construct<WGSL::AST::AlignAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v114, &v174, &v158);
                goto LABEL_282;
              }
              WGSL::toString(68);
              if ((_DWORD)v7 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v144, (uint64_t *)&v143);
              v95 = v143;
              v143 = 0;
              if (v95)
              {
                if (*v95 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v95 -= 2;
              }
              v70 = v144;
              v144 = 0;
              if (v70)
                goto LABEL_230;
              goto LABEL_233;
            }
            WGSL::toString(67);
            if ((_DWORD)v14 != 1)
              goto LABEL_464;
            WGSL::toString((int)v174);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v146, (uint64_t *)&v145);
            v68 = v145;
            v145 = 0;
            if (v68)
            {
              if (*v68 == 2)
                WTF::StringImpl::destroy();
              else
                *v68 -= 2;
            }
            v69 = v146;
            v146 = 0;
            if (v69)
              goto LABEL_369;
            goto LABEL_372;
          }
          if (!MEMORY[0x186DAB1B8](v24, "interpolate", 11))
          {
            if (MEMORY[0x186DAB1B8](v24, "size", 4))
            {
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
              v14 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v158, a2);
                v14 = v160;
                if ((_DWORD)v160)
                  goto LABEL_198;
                if (*(_DWORD *)(a2 + 56) == 48)
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
                v7 = v177;
                if (!v177)
                {
                  if ((_DWORD)v174 == 8 && v176)
                  {
                    if (*v176 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v176 -= 2;
                  }
                  v124 = *(_QWORD **)(a2 + 8);
                  v125 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v125, v5);
                  v76 = WGSL::AST::Builder::construct<WGSL::AST::SizeAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v124, &v174, &v158);
                  goto LABEL_282;
                }
                WGSL::toString(68);
                if ((_DWORD)v7 != 1)
                  goto LABEL_464;
                WGSL::toString((int)v174);
                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v136, (uint64_t *)&v135);
                v109 = v135;
                v135 = 0;
                if (v109)
                {
                  if (*v109 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v109 -= 2;
                }
                v70 = v136;
                v136 = 0;
                if (v70)
                  goto LABEL_230;
                goto LABEL_233;
              }
              WGSL::toString(67);
              if ((_DWORD)v14 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v138, (uint64_t *)&v137);
              v77 = v137;
              v137 = 0;
              if (v77)
              {
                if (*v77 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v77 -= 2;
              }
              v69 = v138;
              v138 = 0;
              if (v69)
                goto LABEL_369;
            }
            else
            {
              if (!MEMORY[0x186DAB1B8](v24, "id", 2))
              {
                if (MEMORY[0x186DAB1B8](v24, "invariant", 9))
                {
                  v87 = *(_QWORD **)(a2 + 8);
                  v88 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v88, v5);
                  v89 = WGSL::AST::Builder::construct<WGSL::AST::InvariantAttribute,WGSL::SourceSpan,void>(v87, &v174);
                }
                else if (MEMORY[0x186DAB1B8](v24, "must_use", 8))
                {
                  v96 = *(_QWORD **)(a2 + 8);
                  v97 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v97, v5);
                  v89 = WGSL::AST::Builder::construct<WGSL::AST::MustUseAttribute,WGSL::SourceSpan,void>(v96, &v174);
                }
                else if (MEMORY[0x186DAB1B8](v24, "const", 5))
                {
                  v105 = *(_QWORD **)(a2 + 8);
                  v106 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v106, v5);
                  v89 = WGSL::AST::Builder::construct<WGSL::AST::ConstAttribute,WGSL::SourceSpan,void>(v105, &v174);
                }
                else
                {
                  if (MEMORY[0x186DAB1B8](v24, "vertex", 6))
                  {
                    v110 = *(_QWORD **)(a2 + 8);
                    v111 = *(_DWORD *)(a2 + 96) - v5;
                    v174 = v4;
                    *(_QWORD *)&v175 = __PAIR64__(v111, v5);
                    v112 = 1;
                  }
                  else if (MEMORY[0x186DAB1B8](v24, "compute", 7))
                  {
                    v110 = *(_QWORD **)(a2 + 8);
                    v118 = *(_DWORD *)(a2 + 96) - v5;
                    v174 = v4;
                    *(_QWORD *)&v175 = __PAIR64__(v118, v5);
                    v112 = 4;
                  }
                  else
                  {
                    if (!MEMORY[0x186DAB1B8](v24, "fragment", 8))
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v56 = 0;
                      v128 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                      *(_QWORD *)a1 = v174;
                      *(_QWORD *)(a1 + 8) = v4;
                      *(_QWORD *)(a1 + 16) = v128;
                      goto LABEL_374;
                    }
                    v110 = *(_QWORD **)(a2 + 8);
                    v123 = *(_DWORD *)(a2 + 96) - v5;
                    v174 = v4;
                    *(_QWORD *)&v175 = __PAIR64__(v123, v5);
                    v112 = 2;
                  }
                  LOBYTE(v158) = v112;
                  v89 = WGSL::AST::Builder::construct<WGSL::AST::StageAttribute,WGSL::SourceSpan,WGSL::ShaderStage,void>(v110, &v174, (char *)&v158);
                }
                v56 = 0;
                *(_QWORD *)a1 = v89;
                *(_DWORD *)(a1 + 24) = 0;
                return (_DWORD *)((uint64_t (*)(_QWORD, _QWORD))off_1E0FD6FF8[v56])(&v174, v182);
              }
              WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
              v14 = v177;
              if (!v177)
              {
                if ((_DWORD)v174 == 8 && v176)
                {
                  if (*v176 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v176 -= 2;
                }
                WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v158, a2);
                v14 = v160;
                if ((_DWORD)v160)
                  goto LABEL_198;
                if (*(_DWORD *)(a2 + 56) == 48)
                  WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 68);
                v7 = v177;
                if (!v177)
                {
                  if ((_DWORD)v174 == 8 && v176)
                  {
                    if (*v176 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v176 -= 2;
                  }
                  v129 = *(_QWORD **)(a2 + 8);
                  v130 = *(_DWORD *)(a2 + 96) - v5;
                  v174 = v4;
                  *(_QWORD *)&v175 = __PAIR64__(v130, v5);
                  v76 = WGSL::AST::Builder::construct<WGSL::AST::IdAttribute,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v129, &v174, &v158);
                  goto LABEL_282;
                }
                WGSL::toString(68);
                if ((_DWORD)v7 != 1)
                  goto LABEL_464;
                WGSL::toString((int)v174);
                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v132, (uint64_t *)&v131);
                v117 = v131;
                v131 = 0;
                if (v117)
                {
                  if (*v117 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v117 -= 2;
                }
                v70 = v132;
                v132 = 0;
                if (v70)
                  goto LABEL_230;
                goto LABEL_233;
              }
              WGSL::toString(67);
              if ((_DWORD)v14 != 1)
                goto LABEL_464;
              WGSL::toString((int)v174);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v134, (uint64_t *)&v133);
              v85 = v133;
              v133 = 0;
              if (v85)
              {
                if (*v85 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v85 -= 2;
              }
              v69 = v134;
              v134 = 0;
              if (v69)
                goto LABEL_369;
            }
LABEL_372:
            v56 = 0;
            v64 = (*(_DWORD *)(a2 + 96) - v5);
            v65 = v158;
            goto LABEL_373;
          }
          WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v174, a2, 67);
          v14 = v177;
          if (v177)
          {
            WGSL::toString(67);
            if ((_DWORD)v14 != 1)
              goto LABEL_464;
            WGSL::toString((int)v174);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v158, (uint64_t *)&v142, (uint64_t *)&v141);
            v71 = v141;
            v141 = 0;
            if (v71)
            {
              if (*v71 == 2)
                WTF::StringImpl::destroy();
              else
                *v71 -= 2;
            }
            v69 = v142;
            v142 = 0;
            if (v69)
              goto LABEL_369;
            goto LABEL_372;
          }
          if ((_DWORD)v174 == 8 && v176)
          {
            if (*v176 == 2)
              WTF::StringImpl::destroy();
            else
              *v176 -= 2;
          }
          v14 = (unint64_t)&v174;
          WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v174, a2);
          if (v177)
          {
            if (v177 != 1)
              goto LABEL_464;
            v99 = v174;
            if (v174)
              *(_DWORD *)v174 += 2;
            *(_OWORD *)(a1 + 8) = v175;
            *(_QWORD *)a1 = v99;
            goto LABEL_445;
          }
          v100 = (char *)WGSL::parseInterpolationType((uint64_t *)&v176);
          if (!v100)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v102 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v158;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v102;
            goto LABEL_445;
          }
          v14 = (unint64_t)v100;
          LOBYTE(v153) = 0;
          if (*(_DWORD *)(a2 + 56) == 48)
          {
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
            v8 = (uint64_t)&v158;
            WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v158, a2);
            if (v161)
            {
              if (v161 != 1)
                goto LABEL_464;
              v101 = v158;
              if (v158)
                *(_DWORD *)v158 += 2;
              v8 = 0;
              *(_OWORD *)(a1 + 8) = v159;
              *(_QWORD *)a1 = v101;
LABEL_424:
              *(_DWORD *)(a1 + 24) = 1;
            }
            else
            {
              v113 = WGSL::parseInterpolationSampling((uint64_t *)&v160);
              if (!v113)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v8 = 0;
                v119 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                *(_QWORD *)a1 = v149;
                *(_QWORD *)(a1 + 8) = v4;
                *(_QWORD *)(a1 + 16) = v119;
                goto LABEL_424;
              }
              LOBYTE(v153) = *v113;
              v8 = 1;
            }
            if (v161 != -1)
              ((void (*)(const char **, const char **))off_1E0FD6FE8[v161])(&v149, &v158);
            if ((_DWORD)v8)
            {
              if (*(_DWORD *)(a2 + 56) == 48)
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consume(a2);
              goto LABEL_430;
            }
          }
          else
          {
LABEL_430:
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v158, a2, 68);
            v7 = v161;
            if (!v161)
            {
              if ((_DWORD)v158 == 8 && v160)
              {
                if (*v160 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v160 -= 2;
              }
              v126 = *(_QWORD **)(a2 + 8);
              v127 = *(_DWORD *)(a2 + 96) - v5;
              v158 = v4;
              *(_QWORD *)&v159 = __PAIR64__(v127, v5);
              *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::InterpolateAttribute,WGSL::SourceSpan,WGSL::InterpolationType const&,WGSL::InterpolationSampling &,void>(v126, &v158, (char *)v14, (char *)&v153);
              *(_DWORD *)(a1 + 24) = 0;
              v80 = v177;
              if (v177 != -1)
                goto LABEL_242;
              goto LABEL_243;
            }
            WGSL::toString(68);
            if ((_DWORD)v7 != 1)
              goto LABEL_464;
            WGSL::toString((int)v158);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v149, (uint64_t *)&v140, (uint64_t *)&v139);
            v120 = v139;
            v139 = 0;
            if (v120)
            {
              if (*v120 == 2)
                WTF::StringImpl::destroy();
              else
                *v120 -= 2;
            }
            v121 = v140;
            v140 = 0;
            if (v121)
            {
              if (*v121 == 2)
                WTF::StringImpl::destroy();
              else
                *v121 -= 2;
            }
            v122 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v149;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v122;
LABEL_445:
            *(_DWORD *)(a1 + 24) = 1;
          }
          v80 = v177;
          if (v177 != -1)
            goto LABEL_242;
          goto LABEL_243;
        }
      }
      v29 = *(_DWORD **)(v13 + 32 * v10 + 24);
LABEL_47:
      *(_QWORD *)(a2 + 80) = v29;
      goto LABEL_38;
    }
    *(_DWORD *)v182 = v14;
    v184 = 1;
    WGSL::toString(8);
    WGSL::toString(v14);
    v174 = "Expected a ";
    *(_QWORD *)&v175 = 12;
    v158 = ", but got a ";
    *(_QWORD *)&v159 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v174, (uint64_t *)&v181, (uint64_t)&v158, (uint64_t *)&v180, &v149);
    if (!v149)
    {
      __break(0xC471u);
      JUMPOUT(0x182508210);
    }
    v33 = v180;
    v180 = 0;
    if (v33)
    {
      if (*v33 == 2)
      {
        WTF::StringImpl::destroy();
        v34 = v181;
        v181 = 0;
        if (!v34)
        {
LABEL_98:
          v55 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v149;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v55;
          v56 = 1;
          *(_DWORD *)(a1 + 24) = 1;
          return (_DWORD *)((uint64_t (*)(_QWORD, _QWORD))off_1E0FD6FF8[v56])(&v174, v182);
        }
LABEL_95:
        if (*v34 == 2)
          WTF::StringImpl::destroy();
        else
          *v34 -= 2;
        goto LABEL_98;
      }
      *v33 -= 2;
    }
    v34 = v181;
    v181 = 0;
    if (!v34)
      goto LABEL_98;
    goto LABEL_95;
  }
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v10;
    if (v9 <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1825081E8);
    }
    v20 = v13 + 32 * v10;
    v21 = *(_DWORD *)v20;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v20;
    *(_OWORD *)v8 = *(_OWORD *)(v20 + 4);
    v22 = *(_DWORD *)v20;
    if (v22 <= 8)
    {
      if (((1 << v22) & 0x38) != 0)
      {
        v23 = *(_DWORD **)(v13 + 32 * v10 + 24);
        goto LABEL_32;
      }
      if (((1 << v22) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v10 + 24);
      }
      else if (v22 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v23 = *(_DWORD **)(v13 + 32 * v10 + 24);
        if (v23)
          *v23 += 2;
LABEL_32:
        *(_QWORD *)(a2 + 80) = v23;
      }
    }
    v19 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v19;
    ++v10;
    if (v21 == 82)
      continue;
    break;
  }
  WGSL::Parser<WGSL::Lexer<unsigned char>>::parseDiagnostic((uint64_t)v182, a2);
  if (!v185)
  {
    v44 = *(_QWORD **)(a2 + 8);
    v45 = *(_DWORD *)(a2 + 96) - v5;
    v174 = v4;
    *(_QWORD *)&v175 = __PAIR64__(v45, v5);
    result = WGSL::AST::Builder::construct<WGSL::AST::DiagnosticAttribute,WGSL::SourceSpan,WGSL::AST::Diagnostic,void>(v44, &v174, (uint64_t)v182);
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 24) = 0;
    v31 = v185;
    if (v185 != -1)
      return (_DWORD *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD7030[v31])(&v174, v182);
    return result;
  }
  if (v185 != 1)
    goto LABEL_464;
  v30 = *(_QWORD *)v182;
  if (*(_QWORD *)v182)
    **(_DWORD **)v182 += 2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v182[8];
  *(_QWORD *)a1 = v30;
  v31 = 1;
  *(_DWORD *)(a1 + 24) = 1;
  return (_DWORD *)((uint64_t (*)(const char **, _BYTE *))off_1E0FD7030[v31])(&v174, v182);
}

WTF *WGSL::Parser<WGSL::Lexer<char16_t>>::parseCompoundStatement(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  WTF *result;
  _DWORD *v7;
  int v8;
  _OWORD *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  _DWORD *v18;
  void *v19;
  int v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  const char **v33;
  WTF *v34;
  const char *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  const char *v46;
  const char *v47;
  __int128 v48;
  unsigned int v49;
  _DWORD *v50;
  WTF *v51;
  uint64_t v52;
  _DWORD *v53;
  __int128 v54;
  int v55;
  WTF *v56;
  uint64_t v57;

  v4 = *(const char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  result = (WTF *)WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(&v53, a2);
  if (v55)
  {
    if (v55 == 1)
    {
      v7 = v53;
      if (v53)
        *v53 += 2;
      *(_OWORD *)(a1 + 8) = v54;
      *(_QWORD *)a1 = v7;
      goto LABEL_73;
    }
LABEL_77:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x182508740);
  }
  v8 = *(_DWORD *)(a2 + 56);
  if (v8 != 43)
  {
    WGSL::toString(43);
    WGSL::toString(v8);
    v47 = "Expected a ";
    *(_QWORD *)&v48 = 12;
    v56 = (WTF *)", but got a ";
    v57 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v47, (uint64_t *)&v51, (uint64_t)&v56, (uint64_t *)&v50, &v52);
    if (!v52)
      goto LABEL_81;
    v18 = v50;
    v50 = 0;
    if (v18)
    {
      if (*v18 == 2)
      {
        WTF::StringImpl::destroy();
        result = v51;
        v51 = 0;
        if (!result)
        {
LABEL_72:
          v45 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v52;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v45;
LABEL_73:
          *(_DWORD *)(a1 + 24) = 1;
          goto LABEL_74;
        }
LABEL_69:
        if (*(_DWORD *)result == 2)
          result = (WTF *)WTF::StringImpl::destroy();
        else
          *(_DWORD *)result -= 2;
        goto LABEL_72;
      }
      *v18 -= 2;
    }
    result = v51;
    v51 = 0;
    if (!result)
      goto LABEL_72;
    goto LABEL_69;
  }
  v9 = (_OWORD *)(a2 + 60);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v11;
    if (v10 <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x182508748);
    }
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v13 + 32 * v11;
    v15 = *(_DWORD *)v14;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
    *v9 = *(_OWORD *)(v14 + 4);
    v16 = *(_DWORD *)v14;
    if (v16 <= 8)
    {
      if (((1 << v16) & 0x38) != 0)
      {
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_18:
        *(_QWORD *)(a2 + 80) = v17;
        goto LABEL_9;
      }
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
        goto LABEL_9;
      }
      if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_18;
      }
    }
LABEL_9:
    v12 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v12;
    ++v11;
  }
  while (v15 == 82);
  v46 = v4;
  v56 = 0;
  v57 = 0;
  do
  {
LABEL_28:
    v20 = *(_DWORD *)(a2 + 56);
    if (v20 == 73)
    {
      v24 = *(_DWORD *)(a2 + 36);
      v25 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v25;
        if (v24 <= v25)
          goto LABEL_81;
        v27 = *(_QWORD *)(a2 + 24);
        v28 = v27 + 32 * v25;
        v29 = *(_DWORD *)v28;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v28;
        *v9 = *(_OWORD *)(v28 + 4);
        v30 = *(_DWORD *)v28;
        if (v30 <= 8)
        {
          if (((1 << v30) & 0x38) != 0)
          {
            v31 = *(_DWORD **)(v27 + 32 * v25 + 24);
LABEL_47:
            *(_QWORD *)(a2 + 80) = v31;
            goto LABEL_38;
          }
          if (((1 << v30) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v27 + 32 * v25 + 24);
          }
          else if (v30 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v31 = *(_DWORD **)(v27 + 32 * v25 + 24);
            if (v31)
              *v31 += 2;
            goto LABEL_47;
          }
        }
LABEL_38:
        v26 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v26;
        ++v25;
        if (v29 != 82)
          goto LABEL_28;
      }
    }
    if (v20 == 44)
    {
      v36 = *(_DWORD *)(a2 + 36);
      v37 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v37;
        if (v36 <= v37)
        {
          __break(0xC471u);
          JUMPOUT(0x182508750);
        }
        v39 = *(_QWORD *)(a2 + 24);
        v40 = v39 + 32 * v37;
        v41 = *(_DWORD *)v40;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v40;
        *v9 = *(_OWORD *)(v40 + 4);
        v42 = *(_DWORD *)v40;
        if (v42 > 8)
          goto LABEL_55;
        if (((1 << v42) & 0x38) != 0)
          break;
        if (((1 << v42) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v39 + 32 * v37 + 24);
        }
        else if (v42 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v43 = *(_DWORD **)(v39 + 32 * v37 + 24);
          if (v43)
            *v43 += 2;
          goto LABEL_64;
        }
LABEL_55:
        v38 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v38;
        ++v37;
        if (v41 != 82)
        {
          v44 = *(_QWORD **)(a2 + 8);
          v47 = v46;
          LODWORD(v48) = v5;
          DWORD1(v48) = v38 - v5;
          *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::CompoundStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,void>(v44, &v47, (uint64_t *)&v53, (uint64_t *)&v56);
          *(_DWORD *)(a1 + 24) = 0;
          goto LABEL_66;
        }
      }
      v43 = *(_DWORD **)(v39 + 32 * v37 + 24);
LABEL_64:
      *(_QWORD *)(a2 + 80) = v43;
      goto LABEL_55;
    }
    WGSL::Parser<WGSL::Lexer<char16_t>>::parseStatement((uint64_t)&v47, a2);
    v21 = v49;
    if (v49)
    {
      if (v49 != 1)
        goto LABEL_77;
      v22 = v47;
      if (v47)
        *(_DWORD *)v47 += 2;
      *(_OWORD *)(a1 + 8) = v48;
      *(_QWORD *)a1 = v22;
      *(_DWORD *)(a1 + 24) = 1;
      v23 = v49;
      if (v49 != -1)
LABEL_26:
        ((void (*)(uint64_t *, const char **))off_1E0FD75E8[v23])(&v52, &v47);
    }
    else
    {
      v32 = HIDWORD(v57);
      if (HIDWORD(v57) == (_DWORD)v57)
      {
        v33 = (const char **)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)&v47);
        v32 = HIDWORD(v57);
        v34 = v56;
        v35 = *v33;
      }
      else
      {
        v34 = v56;
        v35 = v47;
      }
      *((_QWORD *)v34 + v32) = v35;
      ++HIDWORD(v57);
      v23 = v49;
      if (v49 != -1)
        goto LABEL_26;
    }
  }
  while (!v21);
LABEL_66:
  result = v56;
  if (v56)
  {
    v56 = 0;
    LODWORD(v57) = 0;
    result = (WTF *)WTF::fastFree(result, v19);
  }
LABEL_74:
  if (v55 != -1)
    return (WTF *)((uint64_t (*)(const char **, _DWORD **))off_1E0FD7638[v55])(&v47, &v53);
  return result;
}

WTF *WGSL::Parser<WGSL::Lexer<char16_t>>::parseStatement(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  WTF *result;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  _OWORD *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  unsigned int v51;
  _OWORD *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  _DWORD *v59;
  WTF *v60;
  int v61;
  uint64_t v62;
  WTF *v63;
  uint64_t (**v64)();
  _OWORD *v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  _DWORD *v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  unsigned int v77;
  _OWORD *v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  _DWORD *v85;
  _OWORD *v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  _DWORD *v94;
  unsigned int v95;
  _OWORD *v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  _DWORD *v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  _DWORD *v111;
  unsigned int v112;
  _OWORD *v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  _DWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  _DWORD *v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  _DWORD *v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  _DWORD *v137;
  int v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  _DWORD *v142;
  WTF *v143;
  int v144;
  _QWORD *v145;
  int v146;
  int v147;
  unsigned int v148;
  _DWORD *v149;
  WTF *v150;
  int v151;
  WTF *v152;
  _DWORD *v153;
  _QWORD *v154;
  _DWORD *v155;
  uint64_t (*v156)();
  uint64_t v157;
  WTF *v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD *v161;
  _DWORD *v162;
  _DWORD *v163;
  _DWORD *v164;
  void *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  int v172;
  uint64_t (**v173)();
  uint64_t v174;
  WTF *v175;
  uint64_t v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  _DWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  unsigned int v193;
  int v194;
  _DWORD *v195;
  const char *v196;
  int v197;
  _DWORD *v198;
  _OWORD *v199;
  unint64_t v200;
  void *v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  WTF *v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int v216;
  _DWORD *v217;
  const char *v218;
  char v219;
  uint64_t v220;
  WTF *v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  unsigned int v228;
  _DWORD *v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  int v243;
  unsigned int v244;
  _DWORD *v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  _DWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  _DWORD *v257;
  _QWORD *v258;
  unsigned int v259;
  int v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  _DWORD *v264;
  WTF *v265;
  WTF *v266;
  int v267;
  unsigned int v268;
  _DWORD *v269;
  _DWORD *v270;
  unint64_t v271;
  unsigned int v272;
  uint64_t v273;
  _DWORD *v274;
  unint64_t v275;
  WTF *v276;
  _DWORD *v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  _DWORD *v285;
  WTF *v286;
  unsigned int v287;
  unsigned int v288;
  const char *v289;
  unsigned int v290;
  unsigned int v291;
  WTF *v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  _DWORD *v301;
  _QWORD *v302;
  unsigned int v303;
  uint64_t v304;
  const char *v305;
  unint64_t v306;
  _DWORD *v307;
  unint64_t v308;
  _QWORD *v309;
  int v310;
  _QWORD *v311;
  uint64_t v312;
  WTF *v313;
  const char *v314;
  uint64_t v315;
  _QWORD *v316;
  int v317;
  WTF *v318;
  int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int v326;
  unsigned int v327;
  _DWORD *v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  unsigned int v335;
  _DWORD *v336;
  void *v337;
  unint64_t v338;
  int v339;
  char v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  _DWORD *v348;
  unsigned int v349;
  const char *v350;
  unsigned int v351;
  _QWORD *v352;
  int v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  unsigned int v359;
  _DWORD *v360;
  int v361;
  unsigned int v362;
  unint64_t v363;
  unsigned int v364;
  unsigned int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  _DWORD *v371;
  const char *v372;
  uint64_t v373;
  WTF *v374;
  unsigned int v375;
  const char *v376;
  unsigned int v377;
  int v378;
  unint64_t v379;
  char *v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  char *v384;
  WTF *v385;
  WTF *v386;
  unint64_t v387;
  _DWORD *v388;
  unsigned int v389;
  unsigned int v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  _DWORD *v396;
  _QWORD *v397;
  WTF *v398;
  unint64_t v399;
  WTF *v400;
  int v401;
  const char *v402;
  uint64_t v403;
  _QWORD *v404;
  int v405;
  _QWORD *v406;
  unsigned int v407;
  _DWORD *v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  unsigned int v415;
  _DWORD *v416;
  _QWORD *v417;
  _DWORD *v418;
  unint64_t v419;
  WTF **v420;
  WTF **v421;
  const char *v422;
  unint64_t v423;
  int v424;
  int v425;
  unsigned int v426;
  unsigned int v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  int v431;
  unsigned int v432;
  _DWORD *v433;
  unsigned int v434;
  unsigned int v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  int v439;
  unsigned int v440;
  _DWORD *v441;
  unsigned int v442;
  unsigned int v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  _DWORD *v449;
  _DWORD *v450;
  unsigned int v451;
  _DWORD *v452;
  WTF *v453;
  int v454;
  _DWORD *v455;
  unint64_t v456;
  WTF *v457;
  uint64_t v458;
  const char *v459;
  _DWORD *v460;
  unint64_t v461;
  _QWORD *v462;
  int v463;
  _QWORD *v464;
  unsigned int v465;
  int v466;
  _DWORD *v467;
  _DWORD *v468;
  unint64_t v469;
  _QWORD *v470;
  int v471;
  __int128 v472;
  unint64_t v473;
  WTF *v474;
  WTF *v475;
  _DWORD *__src;
  unsigned int __srca;
  _QWORD *v478;
  WTF *v479;
  int v480;
  unint64_t v481;
  unint64_t v482;
  _OWORD *v483;
  WTF *v484;
  unsigned int v485;
  int v486;
  unsigned int v487;
  int v488;
  const char *v489;
  unsigned int v490;
  _DWORD *v491;
  _DWORD *v492;
  _DWORD *v493;
  WTF *v494;
  _DWORD *v495;
  WTF *v496;
  _DWORD *v497;
  WTF *v498;
  _DWORD *v499;
  WTF *v500;
  _DWORD *v501;
  WTF *v502;
  _DWORD *v503;
  _DWORD *v504;
  _DWORD *v505;
  _DWORD *v506;
  _DWORD *v507;
  _DWORD *v508;
  _DWORD *v509;
  _DWORD *v510;
  _DWORD *v511;
  _DWORD *v512;
  _DWORD *v513;
  _DWORD *v514;
  WTF *v515;
  __int128 v516;
  int v517;
  WTF *v518;
  _DWORD *v519;
  WTF *v520;
  _DWORD *v521;
  WTF *v522;
  _BYTE v523[24];
  _DWORD *v524;
  unsigned int v525;
  _DWORD *v526;
  uint64_t v527;
  WTF *v528;
  __int128 v529;
  unint64_t v530;
  WTF *v531;
  unsigned __int8 v532;
  const char *v533;
  __int128 v534;
  unsigned int v535;
  WTF *v536;
  uint64_t v537;
  WTF *v538;
  __int128 v539;
  unsigned int v540;
  const char *v541;
  uint64_t v542;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v6 + 1;
  if ((v6 + 1) >= 0x81)
  {
LABEL_2:
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)a1 = v528;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_3;
  }
  switch(*(_DWORD *)(a2 + 56))
  {
    case 8:
      result = (WTF *)WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v528, a2);
      if ((_DWORD)v531)
      {
        if ((_DWORD)v531 != 1)
          goto LABEL_990;
        v76 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)(a1 + 8) = v529;
        *(_QWORD *)a1 = v76;
        *(_DWORD *)(a1 + 24) = 1;
LABEL_806:
        v74 = v531;
        if ((_DWORD)v531 == -1)
          goto LABEL_948;
        v173 = off_1E0FD6FE8;
LABEL_808:
        v156 = v173[v74];
        goto LABEL_946;
      }
      if ((*(_DWORD *)(a2 + 56) | 0x10) == 0x53)
      {
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseTypeNameAfterIdentifier((uint64_t)&v538, a2, (uint64_t)&v528, (const char *)v4, v5);
        v174 = v540;
        if (v540)
        {
          if (v540 != 1)
            goto LABEL_990;
          v175 = v538;
          if (v538)
            *(_DWORD *)v538 += 2;
          *(_OWORD *)(a1 + 8) = v539;
          *(_QWORD *)a1 = v175;
          *(_DWORD *)(a1 + 24) = 1;
          goto LABEL_631;
        }
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseArgumentExpressionList(&v533, a2);
        if (v535)
        {
          if (v535 != 1)
            goto LABEL_990;
          v314 = v533;
          if (v533)
            *(_DWORD *)v533 += 2;
          *(_OWORD *)(a1 + 8) = v534;
          *(_QWORD *)a1 = v314;
          *(_DWORD *)(a1 + 24) = 1;
          v315 = v535;
          if (v535 == -1)
            goto LABEL_631;
        }
        else
        {
          v404 = *(_QWORD **)(a2 + 8);
          v405 = *(_DWORD *)(a2 + 96) - v5;
          *(_QWORD *)v523 = v4;
          *(_DWORD *)&v523[8] = v5;
          *(_DWORD *)&v523[12] = v405;
          v406 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(v404, v523, (uint64_t *)&v538, (uint64_t *)&v533);
          WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)v523, a2, 73);
          v407 = v525;
          if (v525)
          {
            WGSL::toString(73);
            if (v407 != 1)
              goto LABEL_990;
            WGSL::toString(*(int *)v523);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v515, (uint64_t *)&v506, (uint64_t *)&v505);
            v408 = v505;
            v505 = 0;
            if (v408)
            {
              if (*v408 == 2)
                WTF::StringImpl::destroy();
              else
                *v408 -= 2;
            }
            v460 = v506;
            v506 = 0;
            if (v460)
            {
              if (*v460 == 2)
                WTF::StringImpl::destroy();
              else
                *v460 -= 2;
            }
            v461 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v515;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v461;
            *(_DWORD *)(a1 + 24) = 1;
            v315 = v535;
            if (v535 == -1)
              goto LABEL_631;
          }
          else
          {
            if (*(_DWORD *)v523 == 8 && v524)
            {
              if (*v524 == 2)
                WTF::StringImpl::destroy();
              else
                *v524 -= 2;
            }
            v470 = *(_QWORD **)(a2 + 8);
            v471 = *(_DWORD *)(a2 + 96) - v5;
            *(_QWORD *)v523 = v4;
            *(_DWORD *)&v523[8] = v5;
            *(_DWORD *)&v523[12] = v471;
            *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::CallStatement,WGSL::SourceSpan,WGSL::AST::CallExpression &,void>(v470, v523, (uint64_t)v406);
            *(_DWORD *)(a1 + 24) = 0;
            v315 = v535;
            if (v535 == -1)
              goto LABEL_631;
          }
        }
        ((void (*)(_BYTE *, const char **))off_1E0FD70A8[v315])(v523, &v533);
LABEL_631:
        result = (WTF *)((uint64_t (*)(_BYTE *, WTF **))off_1E0FD71D8[v174])(v523, &v538);
        goto LABEL_806;
      }
      v309 = *(_QWORD **)(a2 + 8);
      v310 = *(_DWORD *)(a2 + 96) - v5;
      *(_QWORD *)v523 = v4;
      *(_DWORD *)&v523[8] = v5;
      *(_DWORD *)&v523[12] = v310;
      v311 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v309, v523, (uint64_t)&v528);
      WGSL::Parser<WGSL::Lexer<char16_t>>::parsePostfixExpression((uint64_t)&v538, a2, v311, v4, v5);
      v312 = v540;
      if (v540)
      {
        if (v540 != 1)
          goto LABEL_990;
        v313 = v538;
        if (v538)
          *(_DWORD *)v538 += 2;
        *(_OWORD *)(a1 + 8) = v539;
        *(_QWORD *)a1 = v313;
        *(_DWORD *)(a1 + 24) = 1;
        goto LABEL_805;
      }
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableUpdatingStatement((uint64_t)&v533, a2, &v538);
      if (v535)
      {
        if (v535 != 1)
          goto LABEL_990;
        v402 = v533;
        if (v533)
          *(_DWORD *)v533 += 2;
        *(_OWORD *)(a1 + 8) = v534;
        *(_QWORD *)a1 = v402;
        *(_DWORD *)(a1 + 24) = 1;
        v403 = v535;
        if (v535 == -1)
          goto LABEL_805;
      }
      else
      {
        WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)v523, a2, 73);
        v451 = v525;
        if (v525)
        {
          WGSL::toString(73);
          if (v451 != 1)
            goto LABEL_990;
          WGSL::toString(*(int *)v523);
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v515, (uint64_t *)&v504, (uint64_t *)&v503);
          v452 = v503;
          v503 = 0;
          if (v452)
          {
            if (*v452 == 2)
              WTF::StringImpl::destroy();
            else
              *v452 -= 2;
          }
          v468 = v504;
          v504 = 0;
          if (v468)
          {
            if (*v468 == 2)
              WTF::StringImpl::destroy();
            else
              *v468 -= 2;
          }
          v469 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
          *(_QWORD *)a1 = v515;
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v469;
          *(_DWORD *)(a1 + 24) = 1;
          v403 = v535;
          if (v535 == -1)
            goto LABEL_805;
        }
        else
        {
          if (*(_DWORD *)v523 == 8 && v524)
          {
            if (*v524 == 2)
              WTF::StringImpl::destroy();
            else
              *v524 -= 2;
          }
          *(_QWORD *)a1 = v533;
          *(_DWORD *)(a1 + 24) = 0;
          v403 = v535;
          if (v535 == -1)
            goto LABEL_805;
        }
      }
      ((void (*)(_BYTE *, const char **))off_1E0FD75E8[v403])(v523, &v533);
LABEL_805:
      result = (WTF *)((uint64_t (*)(_BYTE *, WTF **))off_1E0FD71D8[v312])(v523, &v538);
      goto LABEL_806;
    case 0xB:
      v77 = *(_DWORD *)(a2 + 36);
      v78 = (_OWORD *)(a2 + 60);
      v79 = *(_DWORD *)(a2 + 40) + 1;
      v80 = 32 * v79;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v79;
        if (v77 <= v79)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C7E0);
        }
        v82 = *(_QWORD *)(a2 + 24);
        v83 = *(_DWORD *)(v82 + v80);
        *(_DWORD *)(a2 + 56) = v83;
        *v78 = *(_OWORD *)(v82 + v80 + 4);
        v84 = *(_DWORD *)(v82 + v80);
        if (v84 > 8)
          goto LABEL_120;
        if (((1 << v84) & 0x38) != 0)
          break;
        if (((1 << v84) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v82 + v80 + 24);
        }
        else if (v84 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v85 = *(_DWORD **)(v82 + v80 + 24);
          if (v85)
            *v85 += 2;
          goto LABEL_129;
        }
LABEL_120:
        v81 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v81;
        ++v79;
        v80 += 32;
        if (v83 != 82)
        {
          if (v83 != 73)
          {
            WGSL::toString(73);
            WGSL::toString(v83);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v500, (uint64_t *)&v499);
            v161 = v499;
            v499 = 0;
            if (v161)
            {
              if (*v161 == 2)
                WTF::StringImpl::destroy();
              else
                *v161 -= 2;
            }
            result = v500;
            v500 = 0;
            if (!result)
              goto LABEL_605;
            goto LABEL_602;
          }
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v79;
            if (v77 <= v79)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C800);
            }
            v129 = v82 + 32 * v79;
            v130 = *(_DWORD *)v129;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v129;
            *v78 = *(_OWORD *)(v129 + 4);
            v131 = *(_DWORD *)v129;
            if (v131 <= 8)
            {
              if (((1 << v131) & 0x38) != 0)
              {
                v132 = *(_DWORD **)(v82 + 32 * v79 + 24);
                goto LABEL_205;
              }
              if (((1 << v131) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v82 + 32 * v79 + 24);
              }
              else if (v131 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v132 = *(_DWORD **)(v82 + 32 * v79 + 24);
                if (v132)
                  *v132 += 2;
LABEL_205:
                *(_QWORD *)(a2 + 80) = v132;
              }
            }
            v128 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v128;
            ++v79;
            if (v130 != 82)
            {
              v167 = *(_QWORD **)(a2 + 8);
              v528 = (WTF *)v4;
              LODWORD(v529) = v5;
              DWORD1(v529) = v128 - v5;
              result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::BreakStatement,WGSL::SourceSpan,void>(v167, &v528);
              goto LABEL_305;
            }
            continue;
          }
        }
      }
      v85 = *(_DWORD **)(v82 + v80 + 24);
LABEL_129:
      *(_QWORD *)(a2 + 80) = v85;
      goto LABEL_120;
    case 0xD:
    case 0x1A:
    case 0x22:
      *(_QWORD *)v523 = 0;
      *(_QWORD *)&v523[8] = 0;
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableWithAttributes((uint64_t)&v528, a2, (uint64_t *)v523);
      if (*(_QWORD *)v523)
        WTF::fastFree(*(WTF **)v523, v9);
      v10 = v530;
      if ((_DWORD)v530)
      {
        if ((_DWORD)v530 != 1)
          goto LABEL_990;
        v11 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)(a1 + 8) = v529;
        *(_QWORD *)a1 = v11;
LABEL_351:
        *(_DWORD *)(a1 + 24) = 1;
LABEL_352:
        v156 = off_1E0FD7040[v10];
        goto LABEL_946;
      }
      v14 = *(_DWORD *)(a2 + 56);
      if (v14 != 73)
      {
        WGSL::toString(73);
        WGSL::toString(v14);
        *(_QWORD *)v523 = "Expected a ";
        *(_QWORD *)&v523[8] = 12;
        v538 = (WTF *)", but got a ";
        *(_QWORD *)&v539 = 13;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)v523, (uint64_t *)&v508, (uint64_t)&v538, (uint64_t *)&v507, &v533);
        if (!v533)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C880);
        }
        v153 = v507;
        v507 = 0;
        if (v153)
        {
          if (*v153 == 2)
            WTF::StringImpl::destroy();
          else
            *v153 -= 2;
        }
        v189 = v508;
        v508 = 0;
        if (v189)
        {
          if (*v189 == 2)
            WTF::StringImpl::destroy();
          else
            *v189 -= 2;
        }
        v190 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
        *(_QWORD *)a1 = v533;
        *(_QWORD *)(a1 + 8) = v4;
        *(_QWORD *)(a1 + 16) = v190;
        goto LABEL_351;
      }
      v15 = *(_DWORD *)(a2 + 36);
      v16 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v16;
        if (v15 <= v16)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C7B0);
        }
        v18 = *(_QWORD *)(a2 + 24);
        v19 = v18 + 32 * v16;
        v20 = *(_DWORD *)v19;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v19;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v19 + 4);
        v21 = *(_DWORD *)v19;
        if (v21 > 8)
          goto LABEL_20;
        if (((1 << v21) & 0x38) != 0)
          break;
        if (((1 << v21) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v18 + 32 * v16 + 24);
        }
        else if (v21 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v22 = *(_DWORD **)(v18 + 32 * v16 + 24);
          if (v22)
            *v22 += 2;
          goto LABEL_29;
        }
LABEL_20:
        v17 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v17;
        ++v16;
        if (v20 != 82)
        {
          v154 = *(_QWORD **)(a2 + 8);
          *(_QWORD *)v523 = v4;
          *(_DWORD *)&v523[8] = v5;
          *(_DWORD *)&v523[12] = v17 - v5;
          *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Variable>,void>(v154, v523, &v528);
          *(_DWORD *)(a1 + 24) = 0;
          goto LABEL_352;
        }
      }
      v22 = *(_DWORD **)(v18 + 32 * v16 + 24);
LABEL_29:
      *(_QWORD *)(a2 + 80) = v22;
      goto LABEL_20;
    case 0xE:
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseConstAssert((uint64_t)&v528, a2);
      v62 = v530;
      if (!(_DWORD)v530)
      {
        v171 = *(_QWORD **)(a2 + 8);
        v172 = *(_DWORD *)(a2 + 96) - v5;
        *(_QWORD *)v523 = v4;
        *(_DWORD *)&v523[8] = v5;
        *(_DWORD *)&v523[12] = v172;
        *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::ConstAssertStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::ConstAssert>,void>(v171, v523, &v528);
        *(_DWORD *)(a1 + 24) = 0;
        v64 = off_1E0FD7218;
        goto LABEL_590;
      }
      if ((_DWORD)v530 != 1)
        goto LABEL_990;
      v63 = v528;
      if (v528)
        *(_DWORD *)v528 += 2;
      *(_OWORD *)(a1 + 8) = v529;
      *(_QWORD *)a1 = v63;
      *(_DWORD *)(a1 + 24) = 1;
      v64 = off_1E0FD7218;
      goto LABEL_590;
    case 0xF:
      v95 = *(_DWORD *)(a2 + 36);
      v96 = (_OWORD *)(a2 + 60);
      v97 = *(_DWORD *)(a2 + 40) + 1;
      v98 = 32 * v97;
      do
      {
        *(_DWORD *)(a2 + 40) = v97;
        if (v95 <= v97)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C7E8);
        }
        v100 = *(_QWORD *)(a2 + 24);
        v101 = *(_DWORD *)(v100 + v98);
        *(_DWORD *)(a2 + 56) = v101;
        *v96 = *(_OWORD *)(v100 + v98 + 4);
        v102 = *(_DWORD *)(v100 + v98);
        if (v102 <= 8)
        {
          if (((1 << v102) & 0x38) != 0)
          {
            v103 = *(_DWORD **)(v100 + v98 + 24);
LABEL_153:
            *(_QWORD *)(a2 + 80) = v103;
            goto LABEL_144;
          }
          if (((1 << v102) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v100 + v98 + 24);
            goto LABEL_144;
          }
          if (v102 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v103 = *(_DWORD **)(v100 + v98 + 24);
            if (v103)
              *v103 += 2;
            goto LABEL_153;
          }
        }
LABEL_144:
        v99 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v99;
        ++v97;
        v98 += 32;
      }
      while (v101 == 82);
      if (v101 != 73)
      {
        WGSL::toString(73);
        WGSL::toString(v101);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v498, (uint64_t *)&v497);
        v162 = v497;
        v497 = 0;
        if (v162)
        {
          if (*v162 == 2)
            WTF::StringImpl::destroy();
          else
            *v162 -= 2;
        }
        result = v498;
        v498 = 0;
        if (!result)
          goto LABEL_605;
        goto LABEL_602;
      }
      while (2)
      {
        *(_DWORD *)(a2 + 40) = v97;
        if (v95 <= v97)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C808);
        }
        v134 = v100 + 32 * v97;
        v135 = *(_DWORD *)v134;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v134;
        *v96 = *(_OWORD *)(v134 + 4);
        v136 = *(_DWORD *)v134;
        if (v136 <= 8)
        {
          if (((1 << v136) & 0x38) != 0)
          {
            v137 = *(_DWORD **)(v100 + 32 * v97 + 24);
            goto LABEL_218;
          }
          if (((1 << v136) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v100 + 32 * v97 + 24);
          }
          else if (v136 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v137 = *(_DWORD **)(v100 + 32 * v97 + 24);
            if (v137)
              *v137 += 2;
LABEL_218:
            *(_QWORD *)(a2 + 80) = v137;
          }
        }
        v133 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v133;
        ++v97;
        if (v135 == 82)
          continue;
        break;
      }
      v168 = *(_QWORD **)(a2 + 8);
      v528 = (WTF *)v4;
      LODWORD(v529) = v5;
      DWORD1(v529) = v133 - v5;
      result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::ContinueStatement,WGSL::SourceSpan,void>(v168, &v528);
LABEL_305:
      *(_QWORD *)a1 = result;
      *(_DWORD *)(a1 + 24) = 0;
LABEL_948:
      *(_DWORD *)(a2 + 44) = v6;
      return result;
    case 0x13:
      v51 = *(_DWORD *)(a2 + 36);
      v52 = (_OWORD *)(a2 + 60);
      v53 = *(_DWORD *)(a2 + 40) + 1;
      v54 = 32 * v53;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v53;
        if (v51 <= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C7D8);
        }
        v56 = *(_QWORD *)(a2 + 24);
        v57 = *(_DWORD *)(v56 + v54);
        *(_DWORD *)(a2 + 56) = v57;
        *v52 = *(_OWORD *)(v56 + v54 + 4);
        v58 = *(_DWORD *)(v56 + v54);
        if (v58 > 8)
          goto LABEL_76;
        if (((1 << v58) & 0x38) != 0)
          break;
        if (((1 << v58) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v56 + v54 + 24);
        }
        else if (v58 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v59 = *(_DWORD **)(v56 + v54 + 24);
          if (v59)
            *v59 += 2;
          goto LABEL_85;
        }
LABEL_76:
        v55 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v55;
        ++v53;
        v54 += 32;
        if (v57 != 82)
        {
          if (v57 != 73)
          {
            WGSL::toString(73);
            WGSL::toString(v57);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v496, (uint64_t *)&v495);
            v160 = v495;
            v495 = 0;
            if (v160)
            {
              if (*v160 == 2)
                WTF::StringImpl::destroy();
              else
                *v160 -= 2;
            }
            result = v496;
            v496 = 0;
            if (!result)
              goto LABEL_605;
            goto LABEL_602;
          }
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v53;
            if (v51 <= v53)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C7F8);
            }
            v124 = v56 + 32 * v53;
            v125 = *(_DWORD *)v124;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v124;
            *v52 = *(_OWORD *)(v124 + 4);
            v126 = *(_DWORD *)v124;
            if (v126 <= 8)
            {
              if (((1 << v126) & 0x38) != 0)
              {
                v127 = *(_DWORD **)(v56 + 32 * v53 + 24);
                goto LABEL_192;
              }
              if (((1 << v126) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v56 + 32 * v53 + 24);
              }
              else if (v126 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v127 = *(_DWORD **)(v56 + 32 * v53 + 24);
                if (v127)
                  *v127 += 2;
LABEL_192:
                *(_QWORD *)(a2 + 80) = v127;
              }
            }
            v123 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v123;
            ++v53;
            if (v125 != 82)
            {
              v166 = *(_QWORD **)(a2 + 8);
              v528 = (WTF *)v4;
              LODWORD(v529) = v5;
              DWORD1(v529) = v123 - v5;
              result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::DiscardStatement,WGSL::SourceSpan,void>(v166, &v528);
              goto LABEL_305;
            }
            continue;
          }
        }
      }
      v59 = *(_DWORD **)(v56 + v54 + 24);
LABEL_85:
      *(_QWORD *)(a2 + 80) = v59;
      goto LABEL_76;
    case 0x18:
      v65 = (_OWORD *)(a2 + 60);
      v66 = *(_DWORD *)(a2 + 36);
      LODWORD(v67) = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v67;
        if (v66 <= v67)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C798);
        }
        v69 = *(_QWORD *)(a2 + 24);
        v70 = v69 + 32 * v67;
        v71 = *(_DWORD *)v70;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v70;
        *v65 = *(_OWORD *)(v70 + 4);
        v72 = *(_DWORD *)v70;
        if (v72 > 8)
          goto LABEL_98;
        if (((1 << v72) & 0x38) != 0)
          break;
        if (((1 << v72) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v69 + 32 * v67 + 24);
        }
        else if (v72 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v73 = *(_DWORD **)(v69 + 32 * v67 + 24);
          if (v73)
            *v73 += 2;
          goto LABEL_107;
        }
LABEL_98:
        v68 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v68;
        v67 = (v67 + 1);
        if (v71 != 82)
        {
          v538 = 0;
          v533 = 0;
          v515 = 0;
          if (v71 != 67)
          {
            WGSL::toString(67);
            WGSL::toString(v71);
            v528 = (WTF *)"Expected a ";
            *(_QWORD *)&v529 = 12;
            *(_QWORD *)v523 = ", but got a ";
            *(_QWORD *)&v523[8] = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v536, (uint64_t)v523, (uint64_t *)&v526, &v541);
            if (!v541)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C8A8);
            }
            v164 = v526;
            v526 = 0;
            if (v164)
            {
              if (*v164 == 2)
                WTF::StringImpl::destroy();
              else
                *v164 -= 2;
            }
            result = v536;
            v536 = 0;
            if (result)
              goto LABEL_608;
            goto LABEL_611;
          }
          v145 = (_QWORD *)(v69 + 32 * v67 + 24);
          while (1)
          {
            *(_DWORD *)(a2 + 40) = v67;
            if (v66 <= v67)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C850);
            }
            v147 = *((_DWORD *)v145 - 6);
            *(_DWORD *)(a2 + 56) = v147;
            *v65 = *(_OWORD *)((char *)v145 - 20);
            v148 = *((_DWORD *)v145 - 6);
            if (v148 > 8)
              goto LABEL_240;
            if (((1 << v148) & 0x38) != 0)
              break;
            if (((1 << v148) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *v145;
            }
            else if (v148 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v149 = (_DWORD *)*v145;
              if (*v145)
                *v149 += 2;
              goto LABEL_249;
            }
LABEL_240:
            v146 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v146;
            v145 += 4;
            LODWORD(v67) = v67 + 1;
            if (v147 != 82)
            {
              switch(v147)
              {
                case 8:
                  WGSL::Parser<WGSL::Lexer<char16_t>>::parseLHSExpression((uint64_t)&v528, a2);
                  if ((_DWORD)v530)
                  {
                    if ((_DWORD)v530 != 1)
                      goto LABEL_990;
                    v400 = v528;
                    if (v528)
                      *(_DWORD *)v528 += 2;
                    *(_OWORD *)&v523[8] = v529;
                    *(_QWORD *)v523 = v400;
                    v401 = 1;
                    LODWORD(v524) = 1;
LABEL_850:
                    ((void (*)(const char **, WTF **))off_1E0FD71D8[v401])(&v541, &v528);
                  }
                  else
                  {
                    WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableUpdatingStatement((uint64_t)v523, a2, &v528);
                    v401 = v530;
                    if ((_DWORD)v530 != -1)
                      goto LABEL_850;
                  }
                  if ((_DWORD)v524)
                  {
                    if ((_DWORD)v524 != 1)
                      goto LABEL_990;
                    result = *(WTF **)v523;
                    if (!*(_QWORD *)v523)
                    {
                      v472 = *(_OWORD *)&v523[8];
                      goto LABEL_988;
                    }
                    **(_DWORD **)v523 += 2;
                    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
                    *(_QWORD *)a1 = result;
                    *(_DWORD *)(a1 + 24) = 1;
                    *(_QWORD *)v523 = 0;
                    v424 = *(_DWORD *)result - 2;
                    if (*(_DWORD *)result != 2)
                      goto LABEL_905;
                    goto LABEL_855;
                  }
                  v538 = *(WTF **)v523;
LABEL_857:
                  v425 = *(_DWORD *)(a2 + 56);
                  if (v425 == 73)
                  {
LABEL_858:
                    v426 = *(_DWORD *)(a2 + 36);
                    v427 = *(_DWORD *)(a2 + 40) + 1;
                    v428 = 32 * v427;
                    while (1)
                    {
                      *(_DWORD *)(a2 + 40) = v427;
                      if (v426 <= v427)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x18250C858);
                      }
                      v430 = *(_QWORD *)(a2 + 24);
                      v431 = *(_DWORD *)(v430 + v428);
                      *(_DWORD *)(a2 + 56) = v431;
                      *v65 = *(_OWORD *)(v430 + v428 + 4);
                      v432 = *(_DWORD *)(v430 + v428);
                      if (v432 > 8)
                        goto LABEL_860;
                      if (((1 << v432) & 0x38) != 0)
                        break;
                      if (((1 << v432) & 0xC4) != 0)
                      {
                        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v430 + v428 + 24);
                      }
                      else if (v432 == 8)
                      {
                        *(_QWORD *)(a2 + 80) = 0;
                        v433 = *(_DWORD **)(v430 + v428 + 24);
                        if (v433)
                          *v433 += 2;
                        goto LABEL_869;
                      }
LABEL_860:
                      v429 = *(_DWORD *)(a2 + 68);
                      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                      *(_DWORD *)(a2 + 96) = v429;
                      v428 += 32;
                      ++v427;
                      if (v431 != 82)
                      {
                        if (v431 == 73)
                          goto LABEL_871;
                        WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v528, a2);
                        if ((_DWORD)v530)
                        {
                          if ((_DWORD)v530 != 1)
                            goto LABEL_990;
                          result = v528;
                          if (!v528)
                            goto LABEL_987;
LABEL_904:
                          *(_DWORD *)result += 2;
                          *(_OWORD *)(a1 + 8) = v529;
                          *(_QWORD *)a1 = result;
                          *(_DWORD *)(a1 + 24) = 1;
                          v424 = *(_DWORD *)result - 2;
                          if (*(_DWORD *)result != 2)
                            goto LABEL_905;
LABEL_855:
                          result = (WTF *)WTF::StringImpl::destroy();
                          goto LABEL_948;
                        }
                        v533 = (const char *)v528;
                        v454 = *(_DWORD *)(a2 + 56);
                        if (v454 != 73)
                        {
                          WGSL::toString(73);
                          WGSL::toString(v454);
                          v528 = (WTF *)"Expected a ";
                          *(_QWORD *)&v529 = 12;
                          *(_QWORD *)v523 = ", but got a ";
                          *(_QWORD *)&v523[8] = 13;
                          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v520, (uint64_t)v523, (uint64_t *)&v519, &v541);
                          if (!v541)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x18250C8F0);
                          }
                          v455 = v519;
                          v519 = 0;
                          if (v455)
                          {
                            if (*v455 == 2)
                              WTF::StringImpl::destroy();
                            else
                              *v455 -= 2;
                          }
                          result = v520;
                          v520 = 0;
                          if (!result)
                            goto LABEL_611;
LABEL_608:
                          if (*(_DWORD *)result == 2)
                            result = (WTF *)WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)result -= 2;
                          goto LABEL_611;
                        }
LABEL_871:
                        v434 = *(_DWORD *)(a2 + 36);
                        v435 = *(_DWORD *)(a2 + 40) + 1;
                        v436 = 32 * v435;
                        while (2)
                        {
                          *(_DWORD *)(a2 + 40) = v435;
                          if (v434 <= v435)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x18250C870);
                          }
                          v438 = *(_QWORD *)(a2 + 24);
                          v439 = *(_DWORD *)(v438 + v436);
                          *(_DWORD *)(a2 + 56) = v439;
                          *v65 = *(_OWORD *)(v438 + v436 + 4);
                          v440 = *(_DWORD *)(v438 + v436);
                          if (v440 <= 8)
                          {
                            if (((1 << v440) & 0x38) != 0)
                            {
                              v441 = *(_DWORD **)(v438 + v436 + 24);
                              goto LABEL_882;
                            }
                            if (((1 << v440) & 0xC4) != 0)
                            {
                              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v438 + v436 + 24);
                            }
                            else if (v440 == 8)
                            {
                              *(_QWORD *)(a2 + 80) = 0;
                              v441 = *(_DWORD **)(v438 + v436 + 24);
                              if (v441)
                                *v441 += 2;
LABEL_882:
                              *(_QWORD *)(a2 + 80) = v441;
                            }
                          }
                          v437 = *(_DWORD *)(a2 + 68);
                          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                          *(_DWORD *)(a2 + 96) = v437;
                          v436 += 32;
                          ++v435;
                          if (v439 != 82)
                          {
                            if (v439 != 8)
                            {
                              if (v439 == 68)
                                goto LABEL_885;
LABEL_933:
                              result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v306 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
LABEL_613:
                              *(_QWORD *)(a1 + 8) = v4;
                              *(_QWORD *)(a1 + 16) = v306;
LABEL_3:
                              *(_DWORD *)(a1 + 24) = 1;
                              goto LABEL_948;
                            }
                            WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableUpdatingStatement((uint64_t)&v528, a2);
                            if ((_DWORD)v530)
                            {
                              if ((_DWORD)v530 != 1)
                                goto LABEL_990;
                              result = v528;
                              if (v528)
                              {
                                *(_DWORD *)v528 += 2;
                                *(_OWORD *)(a1 + 8) = v529;
                                *(_QWORD *)a1 = result;
                                *(_DWORD *)(a1 + 24) = 1;
                                v528 = 0;
                                v424 = *(_DWORD *)result - 2;
                                if (*(_DWORD *)result == 2)
                                  goto LABEL_855;
LABEL_905:
                                *(_DWORD *)result = v424;
                                goto LABEL_948;
                              }
LABEL_987:
                              v472 = v529;
LABEL_988:
                              *(_OWORD *)(a1 + 8) = v472;
                              *(_QWORD *)a1 = 0;
                              goto LABEL_3;
                            }
                            v515 = v528;
                            v466 = *(_DWORD *)(a2 + 56);
                            if (v466 != 68)
                            {
                              WGSL::toString(68);
                              WGSL::toString(v466);
                              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v518, (uint64_t *)&v514);
                              v467 = v514;
                              v514 = 0;
                              if (v467)
                              {
                                if (*v467 == 2)
                                  WTF::StringImpl::destroy();
                                else
                                  *v467 -= 2;
                              }
                              result = v518;
                              v518 = 0;
                              if (!result)
                                goto LABEL_605;
LABEL_602:
                              if (*(_DWORD *)result == 2)
                                result = (WTF *)WTF::StringImpl::destroy();
                              else
                                *(_DWORD *)result -= 2;
                              goto LABEL_605;
                            }
LABEL_885:
                            v442 = *(_DWORD *)(a2 + 36);
                            v443 = *(_DWORD *)(a2 + 40) + 1;
                            while (2)
                            {
                              *(_DWORD *)(a2 + 40) = v443;
                              if (v442 <= v443)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x18250C868);
                              }
                              v445 = *(_QWORD *)(a2 + 24);
                              v446 = v445 + 32 * v443;
                              v447 = *(_DWORD *)v446;
                              *(_DWORD *)(a2 + 56) = *(_DWORD *)v446;
                              *v65 = *(_OWORD *)(v446 + 4);
                              v448 = *(_DWORD *)v446;
                              if (v448 <= 8)
                              {
                                if (((1 << v448) & 0x38) != 0)
                                {
                                  v449 = *(_DWORD **)(v445 + 32 * v443 + 24);
                                  goto LABEL_896;
                                }
                                if (((1 << v448) & 0xC4) != 0)
                                {
                                  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v445 + 32 * v443 + 24);
                                }
                                else if (v448 == 8)
                                {
                                  *(_QWORD *)(a2 + 80) = 0;
                                  v449 = *(_DWORD **)(v445 + 32 * v443 + 24);
                                  if (v449)
                                    *v449 += 2;
LABEL_896:
                                  *(_QWORD *)(a2 + 80) = v449;
                                }
                              }
                              v444 = *(_DWORD *)(a2 + 68);
                              *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                              *(_DWORD *)(a2 + 96) = v444;
                              ++v443;
                              if (v447 != 82)
                              {
                                WGSL::Parser<WGSL::Lexer<char16_t>>::parseCompoundStatement(&v528, a2);
                                v62 = v530;
                                if (!(_DWORD)v530)
                                {
                                  v462 = *(_QWORD **)(a2 + 8);
                                  v463 = *(_DWORD *)(a2 + 96) - v5;
                                  *(_QWORD *)v523 = v4;
                                  *(_DWORD *)&v523[8] = v5;
                                  *(_DWORD *)&v523[12] = v463;
                                  *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::ForStatement,WGSL::SourceSpan,WGSL::AST::Statement *&,WGSL::AST::Expression *&,WGSL::AST::Statement *&,std::reference_wrapper<WGSL::AST::CompoundStatement>,void>(v462, v523, (uint64_t *)&v538, (uint64_t *)&v533, (uint64_t *)&v515, &v528);
                                  *(_DWORD *)(a1 + 24) = 0;
                                  goto LABEL_957;
                                }
                                if ((_DWORD)v530 == 1)
                                {
                                  v453 = v528;
                                  if (v528)
                                    *(_DWORD *)v528 += 2;
                                  *(_OWORD *)(a1 + 8) = v529;
                                  *(_QWORD *)a1 = v453;
                                  *(_DWORD *)(a1 + 24) = 1;
LABEL_957:
                                  v64 = off_1E0FD7628;
LABEL_590:
                                  v156 = v64[v62];
LABEL_946:
                                  v420 = (WTF **)v523;
                                  v421 = &v528;
LABEL_947:
                                  result = (WTF *)((uint64_t (*)(WTF **, WTF **))v156)(v420, v421);
                                  goto LABEL_948;
                                }
LABEL_990:
                                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_991:
                                __break(0xC471u);
                                JUMPOUT(0x18250C790);
                              }
                              continue;
                            }
                          }
                          continue;
                        }
                      }
                    }
                    v433 = *(_DWORD **)(v430 + v428 + 24);
LABEL_869:
                    *(_QWORD *)(a2 + 80) = v433;
                    goto LABEL_860;
                  }
                  WGSL::toString(73);
                  WGSL::toString(v425);
                  v528 = (WTF *)"Expected a ";
                  *(_QWORD *)&v529 = 12;
                  *(_QWORD *)v523 = ", but got a ";
                  *(_QWORD *)&v523[8] = 13;
                  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v522, (uint64_t)v523, (uint64_t *)&v521, &v541);
                  if (!v541)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18250C8E8);
                  }
                  v450 = v521;
                  v521 = 0;
                  if (v450)
                  {
                    if (*v450 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v450 -= 2;
                  }
                  result = v522;
                  v522 = 0;
                  if (result)
                    goto LABEL_608;
                  break;
                case 9:
                case 10:
                case 11:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                  goto LABEL_933;
                case 13:
                case 26:
                case 34:
                  *(_QWORD *)v523 = 0;
                  *(_QWORD *)&v523[8] = 0;
                  WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableWithAttributes((uint64_t)&v528, a2, (uint64_t *)v523);
                  if (*(_QWORD *)v523)
                    WTF::fastFree(*(WTF **)v523, v165);
                  if ((_DWORD)v530)
                  {
                    if ((_DWORD)v530 != 1)
                      goto LABEL_990;
                    result = v528;
                    if (!v528)
                      goto LABEL_987;
                    goto LABEL_904;
                  }
                  v316 = *(_QWORD **)(a2 + 8);
                  v317 = *(_DWORD *)(a2 + 96) - v5;
                  *(_QWORD *)v523 = v4;
                  *(_DWORD *)&v523[8] = v5;
                  *(_DWORD *)&v523[12] = v317;
                  v538 = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Variable>,void>(v316, v523, &v528);
                  if ((_DWORD)v530 != -1)
                    ((void (*)(_BYTE *, WTF **))off_1E0FD7040[v530])(v523, &v528);
                  goto LABEL_857;
                default:
                  if (v147 != 73)
                    goto LABEL_933;
                  goto LABEL_858;
              }
LABEL_611:
              v304 = (*(_DWORD *)(a2 + 96) - v5);
              v305 = v541;
LABEL_612:
              v306 = v5 | (v304 << 32);
              *(_QWORD *)a1 = v305;
              goto LABEL_613;
            }
          }
          v149 = (_DWORD *)*v145;
LABEL_249:
          *(_QWORD *)(a2 + 80) = v149;
          goto LABEL_240;
        }
      }
      v73 = *(_DWORD **)(v69 + 32 * v67 + 24);
LABEL_107:
      *(_QWORD *)(a2 + 80) = v73;
      goto LABEL_98;
    case 0x19:
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(&v528, a2);
      if ((_DWORD)v530)
      {
        if ((_DWORD)v530 != 1)
          goto LABEL_990;
        v60 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)(a1 + 8) = v529;
        *(_QWORD *)a1 = v60;
        v61 = 1;
        *(_DWORD *)(a1 + 24) = 1;
      }
      else
      {
        result = (WTF *)WGSL::Parser<WGSL::Lexer<char16_t>>::parseIfStatementWithAttributes(a1, a2, (uint64_t *)&v528, v4, v5);
        v61 = v530;
        if ((_DWORD)v530 == -1)
          goto LABEL_948;
      }
      v156 = off_1E0FD7638[v61];
      goto LABEL_946;
    case 0x1B:
      v86 = (_OWORD *)(a2 + 60);
      v87 = *(_DWORD *)(a2 + 36);
      v88 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v88;
        if (v87 <= v88)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C7A0);
        }
        v90 = *(_QWORD *)(a2 + 24);
        v91 = v90 + 32 * v88;
        v92 = *(_DWORD *)v91;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v91;
        *v86 = *(_OWORD *)(v91 + 4);
        v93 = *(_DWORD *)v91;
        if (v93 > 8)
          goto LABEL_132;
        if (((1 << v93) & 0x38) != 0)
          break;
        if (((1 << v93) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v90 + 32 * v88 + 24);
        }
        else if (v93 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v94 = *(_DWORD **)(v90 + 32 * v88 + 24);
          if (v94)
            *v94 += 2;
          goto LABEL_141;
        }
LABEL_132:
        v89 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v89;
        ++v88;
        if (v92 != 82)
        {
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(&v538, a2);
          if (v540)
          {
            if (v540 != 1)
              goto LABEL_990;
            v150 = v538;
            if (v538)
              *(_DWORD *)v538 += 2;
            *(_OWORD *)(a1 + 8) = v539;
            *(_QWORD *)a1 = v150;
            v151 = 1;
            *(_DWORD *)(a1 + 24) = 1;
LABEL_793:
            result = (WTF *)((uint64_t (*)(WTF **, WTF **))off_1E0FD7638[v151])(&v528, &v538);
            goto LABEL_948;
          }
          v178 = *(_DWORD *)(a2 + 56);
          if (v178 != 43)
          {
            WGSL::toString(43);
            WGSL::toString(v178);
            v528 = (WTF *)"Expected a ";
            *(_QWORD *)&v529 = 12;
            *(_QWORD *)v523 = ", but got a ";
            *(_QWORD *)&v523[8] = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v515, (uint64_t)v523, (uint64_t *)&v541, &v533);
            if (!v533)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C8B0);
            }
            v196 = v541;
            v541 = 0;
            if (v196)
            {
              if (*(_DWORD *)v196 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v196 -= 2;
            }
            v398 = v515;
            v515 = 0;
            if (v398)
            {
              if (*(_DWORD *)v398 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v398 -= 2;
            }
            v151 = 0;
            v399 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v533;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v399;
            *(_DWORD *)(a1 + 24) = 1;
            goto LABEL_793;
          }
          v179 = *(_DWORD *)(a2 + 36);
          v180 = *(_DWORD *)(a2 + 40) + 1;
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v180;
            if (v179 <= v180)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C830);
            }
            v182 = *(_QWORD *)(a2 + 24);
            v183 = v182 + 32 * v180;
            v184 = *(_DWORD *)v183;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v183;
            *v86 = *(_OWORD *)(v183 + 4);
            v185 = *(_DWORD *)v183;
            if (v185 <= 8)
            {
              if (((1 << v185) & 0x38) != 0)
              {
                v186 = *(_DWORD **)(v182 + 32 * v180 + 24);
                goto LABEL_339;
              }
              if (((1 << v185) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v182 + 32 * v180 + 24);
              }
              else if (v185 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v186 = *(_DWORD **)(v182 + 32 * v180 + 24);
                if (v186)
                  *v186 += 2;
LABEL_339:
                *(_QWORD *)(a2 + 80) = v186;
              }
            }
            v181 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v181;
            ++v180;
            if (v184 == 82)
              continue;
            break;
          }
          v486 = 0;
          v199 = (_OWORD *)(a1 + 8);
          v536 = 0;
          v537 = 0;
          LOBYTE(v528) = 0;
          v200 = HIDWORD(v4);
          v532 = 0;
          while (2)
          {
            while (2)
            {
              v202 = *(_DWORD *)(a2 + 56);
              if (v202 != 16)
              {
                if (v202 != 44)
                {
                  WGSL::Parser<WGSL::Lexer<char16_t>>::parseStatement(v523, a2);
                  v203 = (int)v524;
                  if ((_DWORD)v524)
                  {
                    if ((_DWORD)v524 != 1)
                      goto LABEL_990;
                    v204 = *(_QWORD *)v523;
                    if (*(_QWORD *)v523)
                      **(_DWORD **)v523 += 2;
                    *v199 = *(_OWORD *)&v523[8];
                    *(_QWORD *)a1 = v204;
                    *(_DWORD *)(a1 + 24) = 1;
                    v205 = v524;
                    if ((_DWORD)v524 == -1)
                    {
LABEL_381:
                      if (v203)
                      {
LABEL_774:
                        if (v486)
                        {
                          if (*((_QWORD *)&v529 + 1))
                            WTF::fastFree(*((WTF **)&v529 + 1), v201);
                          if (v528)
                            WTF::fastFree(v528, v201);
                        }
                        result = v536;
                        if (v536)
                        {
                          v536 = 0;
                          LODWORD(v537) = 0;
                          result = (WTF *)WTF::fastFree(result, v201);
                        }
                        v151 = v540;
                        if (v540 == -1)
                          goto LABEL_948;
                        goto LABEL_793;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    v206 = HIDWORD(v537);
                    if (HIDWORD(v537) == (_DWORD)v537)
                    {
                      v207 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v536, HIDWORD(v537) + 1, (unint64_t)v523);
                      v206 = HIDWORD(v537);
                      v208 = v536;
                      v209 = *v207;
                    }
                    else
                    {
                      v208 = v536;
                      v209 = *(_QWORD *)v523;
                    }
                    *((_QWORD *)v208 + v206) = v209;
                    ++HIDWORD(v537);
                    v205 = v524;
                    if ((_DWORD)v524 == -1)
                      goto LABEL_381;
                  }
                  ((void (*)(const char **, _BYTE *))off_1E0FD75E8[v205])(&v533, v523);
                  goto LABEL_381;
                }
                v389 = *(_DWORD *)(a2 + 36);
                v390 = *(_DWORD *)(a2 + 40) + 1;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v390;
                  if (v389 <= v390)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18250C848);
                  }
                  v392 = *(_QWORD *)(a2 + 24);
                  v393 = v392 + 32 * v390;
                  v394 = *(_DWORD *)v393;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v393;
                  *v86 = *(_OWORD *)(v393 + 4);
                  v395 = *(_DWORD *)v393;
                  if (v395 <= 8)
                  {
                    if (((1 << v395) & 0x38) != 0)
                    {
                      v396 = *(_DWORD **)(v392 + 32 * v390 + 24);
                      goto LABEL_772;
                    }
                    if (((1 << v395) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v392 + 32 * v390 + 24);
                    }
                    else if (v395 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v396 = *(_DWORD **)(v392 + 32 * v390 + 24);
                      if (v396)
                        *v396 += 2;
LABEL_772:
                      *(_QWORD *)(a2 + 80) = v396;
                    }
                  }
                  v391 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v391;
                  ++v390;
                  if (v394 != 82)
                  {
                    v397 = *(_QWORD **)(a2 + 8);
                    *(_DWORD *)v523 = v4;
                    *(_DWORD *)&v523[4] = v200;
                    *(_DWORD *)&v523[8] = v5;
                    *(_DWORD *)&v523[12] = v391 - v5;
                    *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::LoopStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,std::optional<WGSL::AST::Continuing>,void>(v397, v523, (uint64_t *)&v538, (uint64_t *)&v536, (uint64_t *)&v528);
                    *(_DWORD *)(a1 + 24) = 0;
                    v486 = v532;
                    goto LABEL_774;
                  }
                  continue;
                }
              }
              break;
            }
            v210 = *(_DWORD *)(a2 + 36);
            v211 = *(_DWORD *)(a2 + 40) + 1;
LABEL_398:
            *(_DWORD *)(a2 + 40) = v211;
            if (v210 <= v211)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C838);
            }
            v213 = *(_QWORD *)(a2 + 24);
            v214 = v213 + 32 * v211;
            v215 = *(_DWORD *)v214;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v214;
            *v86 = *(_OWORD *)(v214 + 4);
            v216 = *(_DWORD *)v214;
            if (v216 <= 8)
            {
              if (((1 << v216) & 0x38) != 0)
              {
                v217 = *(_DWORD **)(v213 + 32 * v211 + 24);
                goto LABEL_406;
              }
              if (((1 << v216) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v213 + 32 * v211 + 24);
              }
              else if (v216 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v217 = *(_DWORD **)(v213 + 32 * v211 + 24);
                if (v217)
                  *v217 += 2;
LABEL_406:
                *(_QWORD *)(a2 + 80) = v217;
              }
            }
            v212 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v212;
            ++v211;
            if (v215 != 82)
            {
              v526 = 0;
              v527 = 0;
              WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(&v533, a2);
              if (v535)
              {
                if (v535 != 1)
                  goto LABEL_990;
                v218 = v533;
                if (v533)
                  *(_DWORD *)v533 += 2;
                v219 = 0;
                *v199 = v534;
                *(_QWORD *)a1 = v218;
                *(_DWORD *)(a1 + 24) = 1;
                v220 = v535;
                if (v535 == -1)
                  goto LABEL_413;
                goto LABEL_412;
              }
              if (*(_DWORD *)(a2 + 56) != 43)
              {
                *(_DWORD *)v523 = *(_DWORD *)(a2 + 56);
                v525 = 1;
                WGSL::toString(43);
                if (v525 != 1)
                  goto LABEL_990;
                WGSL::toString(*(int *)v523);
                v515 = (WTF *)"Expected a ";
                *(_QWORD *)&v516 = 12;
                v541 = ", but got a ";
                v542 = 13;
                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v515, (uint64_t *)&v521, (uint64_t)&v541, (uint64_t *)&v520, &v522);
                if (!v522)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18250C8C0);
                }
                v265 = v520;
                v520 = 0;
                if (v265)
                {
                  if (*(_DWORD *)v265 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *(_DWORD *)v265 -= 2;
                }
                v270 = v521;
                v521 = 0;
                if (!v270)
                  goto LABEL_516;
                goto LABEL_513;
              }
              *(_OWORD *)&v523[4] = *v86;
              *(_DWORD *)v523 = 43;
              v525 = 0;
              v222 = *(_DWORD *)(a2 + 36);
              v223 = *(_DWORD *)(a2 + 40) + 1;
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v223;
                if (v222 <= v223)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18250C878);
                }
                v225 = *(_QWORD *)(a2 + 24);
                v226 = v225 + 32 * v223;
                v227 = *(_DWORD *)v226;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v226;
                *v86 = *(_OWORD *)(v226 + 4);
                v228 = *(_DWORD *)v226;
                if (v228 <= 8)
                {
                  if (((1 << v228) & 0x38) != 0)
                  {
                    v229 = *(_DWORD **)(v225 + 32 * v223 + 24);
                    goto LABEL_429;
                  }
                  if (((1 << v228) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v225 + 32 * v223 + 24);
                  }
                  else if (v228 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v229 = *(_DWORD **)(v225 + 32 * v223 + 24);
                    if (v229)
                      *v229 += 2;
LABEL_429:
                    *(_QWORD *)(a2 + 80) = v229;
                  }
                }
                v224 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v224;
                ++v223;
                if (v227 == 82)
                  continue;
                break;
              }
LABEL_431:
              v230 = *(_DWORD *)(a2 + 56);
              if (v230 != 11)
                goto LABEL_432;
              while (2)
              {
                v259 = *(_DWORD *)(a2 + 36);
                v240 = *(_DWORD *)(a2 + 40);
                v238 = 32 * (v240 + 1);
                v239 = v240 + 2;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = ++v240;
                  if (v259 <= v240)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18250C890);
                  }
                  v241 = v239;
                  v242 = *(_QWORD *)(a2 + 24);
                  v243 = *(_DWORD *)(v242 + v238);
                  *(_DWORD *)(a2 + 56) = v243;
                  *v86 = *(_OWORD *)(v242 + v238 + 4);
                  v244 = *(_DWORD *)(v242 + v238);
                  if (v244 <= 8)
                  {
                    if (((1 << v244) & 0x38) != 0)
                    {
                      v245 = *(_DWORD **)(v242 + v238 + 24);
                      goto LABEL_454;
                    }
                    if (((1 << v244) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v242 + v238 + 24);
                    }
                    else if (v244 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v245 = *(_DWORD **)(v242 + v238 + 24);
                      if (v245)
                        *v245 += 2;
LABEL_454:
                      *(_QWORD *)(a2 + 80) = v245;
                    }
                  }
                  v237 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v237;
                  v238 += 32;
                  v239 = v241 + 1;
                  if (v243 == 82)
                    continue;
                  break;
                }
                if (v243 != 25)
                {
                  if (v243 != 73)
                  {
                    *(_DWORD *)v523 = v243;
                    v525 = 1;
                    WGSL::toString(73);
                    if (v525 != 1)
                      goto LABEL_990;
                    WGSL::toString(*(int *)v523);
                    v515 = (WTF *)"Expected a ";
                    *(_QWORD *)&v516 = 12;
                    v541 = ", but got a ";
                    v542 = 13;
                    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v515, (uint64_t *)&v519, (uint64_t)&v541, (uint64_t *)&v518, &v522);
                    if (!v522)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x18250C8D8);
                    }
                    v292 = v518;
                    v518 = 0;
                    if (v292)
                    {
                      if (*(_DWORD *)v292 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *(_DWORD *)v292 -= 2;
                    }
                    v270 = v519;
                    v519 = 0;
                    if (v270)
                      goto LABEL_513;
LABEL_516:
                    v271 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                    *(_QWORD *)a1 = v522;
                    *(_QWORD *)(a1 + 8) = v4;
                    *(_QWORD *)(a1 + 16) = v271;
                    *(_DWORD *)(a1 + 24) = 1;
                    if (v525 != -1)
                      ((void (*)(WTF **, _BYTE *))off_1E0FD6FF8[v525])(&v515, v523);
                    goto LABEL_539;
                  }
                  *(_OWORD *)&v523[4] = *v86;
                  *(_DWORD *)v523 = 73;
                  v525 = 0;
LABEL_460:
                  *(_DWORD *)(a2 + 40) = v241;
                  if (v259 <= v241)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18250C898);
                  }
                  v247 = v242 + 32 * v241;
                  v248 = *(_DWORD *)v247;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v247;
                  *v86 = *(_OWORD *)(v247 + 4);
                  v249 = *(_DWORD *)v247;
                  if (v249 <= 8)
                  {
                    if (((1 << v249) & 0x38) != 0)
                    {
                      v250 = *(_DWORD **)(v242 + 32 * v241 + 24);
                      goto LABEL_468;
                    }
                    if (((1 << v249) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v242 + 32 * v241 + 24);
                    }
                    else if (v249 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v250 = *(_DWORD **)(v242 + 32 * v241 + 24);
                      if (v250)
                        *v250 += 2;
LABEL_468:
                      *(_QWORD *)(a2 + 80) = v250;
                    }
                  }
                  v246 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v246;
                  ++v241;
                  if (v248 != 82)
                  {
                    v251 = *(_QWORD **)(a2 + 8);
                    *(_DWORD *)v523 = v4;
                    *(_DWORD *)&v523[4] = v200;
                    *(_DWORD *)&v523[8] = v5;
                    *(_DWORD *)&v523[12] = v246 - v5;
                    v252 = WGSL::AST::Builder::construct<WGSL::AST::BreakStatement,WGSL::SourceSpan,void>(v251, v523);
                    v253 = HIDWORD(v527);
                    if (HIDWORD(v527) == (_DWORD)v527)
                    {
                      v478 = v252;
                      v481 = v200;
                      v254 = HIDWORD(v527) + ((unint64_t)HIDWORD(v527) >> 2);
                      if (v254 >= 0x10)
                        v255 = v254 + 1;
                      else
                        v255 = 16;
                      if (v255 <= (unint64_t)HIDWORD(v527) + 1)
                        v256 = HIDWORD(v527) + 1;
                      else
                        v256 = v255;
                      if (v256 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x18250C8B8);
                      }
                      __src = v526;
                      v257 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v256));
                      LODWORD(v527) = v256;
                      v526 = v257;
                      memcpy(v257, __src, 8 * v253);
                      v200 = v481;
                      if (__src)
                      {
                        if (v526 == __src)
                        {
                          v526 = 0;
                          LODWORD(v527) = 0;
                        }
                        WTF::fastFree((WTF *)__src, v201);
                      }
                      LODWORD(v253) = HIDWORD(v527);
                      v258 = &v526[2 * HIDWORD(v527)];
                      v252 = v478;
                    }
                    else
                    {
                      v258 = &v526[2 * HIDWORD(v527)];
                    }
                    *v258 = v252;
                    HIDWORD(v527) = v253 + 1;
                    v230 = *(_DWORD *)(a2 + 56);
                    if (v230 == 11)
                      continue;
LABEL_432:
                    if (v230 == 44)
                    {
                      v479 = 0;
                      goto LABEL_545;
                    }
                    WGSL::Parser<WGSL::Lexer<char16_t>>::parseStatement(v523, a2);
                    v231 = (int)v524;
                    if ((_DWORD)v524)
                    {
                      if ((_DWORD)v524 != 1)
                        goto LABEL_990;
                      v232 = *(_QWORD *)v523;
                      if (*(_QWORD *)v523)
                        **(_DWORD **)v523 += 2;
                      *v199 = *(_OWORD *)&v523[8];
                      *(_QWORD *)a1 = v232;
                      *(_DWORD *)(a1 + 24) = 1;
                    }
                    else
                    {
                      v233 = HIDWORD(v527);
                      if (HIDWORD(v527) == (_DWORD)v527)
                      {
                        v234 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v526, HIDWORD(v527) + 1, (unint64_t)v523);
                        v233 = HIDWORD(v527);
                        v235 = (uint64_t)v526;
                        v236 = *v234;
                      }
                      else
                      {
                        v235 = (uint64_t)v526;
                        v236 = *(_QWORD *)v523;
                      }
                      *(_QWORD *)(v235 + 8 * v233) = v236;
                      ++HIDWORD(v527);
                    }
                    if ((_DWORD)v524 != -1)
                      ((void (*)(WTF **, _BYTE *))off_1E0FD75E8[v524])(&v515, v523);
                    if (!v231)
                      goto LABEL_431;
LABEL_539:
                    v219 = 0;
                    v220 = v535;
                    if (v535 != -1)
                      goto LABEL_412;
                    goto LABEL_413;
                  }
                  goto LABEL_460;
                }
                break;
              }
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v241;
                if (v259 <= v241)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18250C8A0);
                }
                v261 = v242 + 32 * v241;
                v262 = *(_DWORD *)v261;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v261;
                *v86 = *(_OWORD *)(v261 + 4);
                v263 = *(_DWORD *)v261;
                if (v263 <= 8)
                {
                  if (((1 << v263) & 0x38) != 0)
                  {
                    v264 = *(_DWORD **)(v242 + 32 * v241 + 24);
                    goto LABEL_495;
                  }
                  if (((1 << v263) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v242 + 32 * v241 + 24);
                  }
                  else if (v263 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v264 = *(_DWORD **)(v242 + 32 * v241 + 24);
                    if (v264)
                      *v264 += 2;
LABEL_495:
                    *(_QWORD *)(a2 + 80) = v264;
                  }
                }
                v260 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v260;
                ++v241;
                if (v262 == 82)
                  continue;
                break;
              }
              WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v515, a2);
              if (!v517)
              {
                WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)v523, a2, 73);
                v268 = v525;
                v482 = v200;
                if (v525)
                {
                  WGSL::toString(73);
                  if (v525 != 1)
                    goto LABEL_990;
                  WGSL::toString(*(int *)v523);
                  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v541, (uint64_t *)&v514, (uint64_t *)&v513);
                  v269 = v513;
                  v513 = 0;
                  if (v269)
                  {
                    if (*v269 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v269 -= 2;
                  }
                  v274 = v514;
                  v514 = 0;
                  if (v274)
                  {
                    if (*v274 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v274 -= 2;
                  }
                  v272 = v268;
                  v275 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                  *(_QWORD *)a1 = v541;
                  *(_QWORD *)(a1 + 8) = v4;
                  *(_QWORD *)(a1 + 16) = v275;
                  v267 = 1;
                  *(_DWORD *)(a1 + 24) = 1;
                  v273 = v525;
                  if (v525 == -1)
                  {
                    v479 = 0;
LABEL_529:
                    v200 = v482;
                    goto LABEL_530;
                  }
                }
                else
                {
                  v272 = 0;
                  v273 = 0;
                  v267 = 13;
                }
                ((void (*)(const char **, _BYTE *))off_1E0FD6FF8[v273])(&v541, v523);
                v276 = v515;
                if (v272)
                  v276 = 0;
                v479 = v276;
                goto LABEL_529;
              }
              if (v517 != 1)
                goto LABEL_990;
              v266 = v515;
              if (v515)
                *(_DWORD *)v515 += 2;
              v479 = 0;
              *v199 = v516;
              *(_QWORD *)a1 = v266;
              v267 = 1;
              *(_DWORD *)(a1 + 24) = 1;
LABEL_530:
              if (v517 != -1)
                ((void (*)(_BYTE *, WTF **))off_1E0FD71D8[v517])(v523, &v515);
              if (v267 != 13)
                goto LABEL_539;
              if (*(_DWORD *)(a2 + 56) != 44)
              {
                *(_DWORD *)v523 = *(_DWORD *)(a2 + 56);
                v525 = 1;
                WGSL::toString(44);
                if (v525 != 1)
                  goto LABEL_990;
                WGSL::toString(*(int *)v523);
                v515 = (WTF *)"Expected a ";
                *(_QWORD *)&v516 = 12;
                v541 = ", but got a ";
                v542 = 13;
                WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v515, (uint64_t *)&v512, (uint64_t)&v541, (uint64_t *)&v511, &v522);
                if (!v522)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18250C8C8);
                }
                v277 = v511;
                v511 = 0;
                if (v277)
                {
                  if (*v277 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v277 -= 2;
                }
                v270 = v512;
                v512 = 0;
                if (!v270)
                  goto LABEL_516;
LABEL_513:
                if (*v270 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v270 -= 2;
                goto LABEL_516;
              }
LABEL_545:
              *(_OWORD *)&v523[4] = *v86;
              *(_DWORD *)v523 = 44;
              v525 = 0;
              v278 = *(_DWORD *)(a2 + 36);
              v279 = *(_DWORD *)(a2 + 40) + 1;
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v279;
                if (v278 <= v279)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18250C8D0);
                }
                v281 = *(_QWORD *)(a2 + 24);
                v282 = v281 + 32 * v279;
                v283 = *(_DWORD *)v282;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v282;
                *v86 = *(_OWORD *)(v282 + 4);
                v284 = *(_DWORD *)v282;
                if (v284 <= 8)
                {
                  if (((1 << v284) & 0x38) != 0)
                  {
                    v285 = *(_DWORD **)(v281 + 32 * v279 + 24);
                    goto LABEL_556;
                  }
                  if (((1 << v284) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v281 + 32 * v279 + 24);
                  }
                  else if (v284 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v285 = *(_DWORD **)(v281 + 32 * v279 + 24);
                    if (v285)
                      *v285 += 2;
LABEL_556:
                    *(_QWORD *)(a2 + 80) = v285;
                  }
                }
                v280 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v280;
                ++v279;
                if (v283 == 82)
                  continue;
                break;
              }
              v286 = (WTF *)v526;
              v526 = 0;
              v288 = v527;
              v287 = HIDWORD(v527);
              v527 = 0;
              v289 = v533;
              v533 = 0;
              v291 = v534;
              v290 = DWORD1(v534);
              *(_QWORD *)&v534 = 0;
              if (v486)
              {
                v473 = __PAIR64__(v287, v288);
                v474 = v286;
                __srca = v291;
                v487 = v290;
                if (v528)
                  WTF::fastFree(v528, v201);
                v528 = v474;
                *(_QWORD *)&v529 = v473;
                if (v475)
                  WTF::fastFree(v475, v201);
                *((_QWORD *)&v529 + 1) = v289;
                v530 = __PAIR64__(v487, __srca);
                v486 = 1;
                v475 = (WTF *)v289;
                v219 = 1;
                v531 = v479;
                v220 = v535;
                if (v535 == -1)
                  goto LABEL_413;
LABEL_412:
                ((void (*)(_BYTE *, const char **))off_1E0FD7638[v220])(v523, &v533);
              }
              else
              {
                v528 = v286;
                *(_QWORD *)&v529 = __PAIR64__(v287, v288);
                *((_QWORD *)&v529 + 1) = v289;
                v530 = __PAIR64__(v290, v291);
                v531 = v479;
                v475 = (WTF *)v289;
                v219 = 1;
                v486 = 1;
                v532 = 1;
                v220 = v535;
                if (v535 != -1)
                  goto LABEL_412;
              }
LABEL_413:
              v221 = (WTF *)v526;
              if (v526)
              {
                v526 = 0;
                LODWORD(v527) = 0;
                WTF::fastFree(v221, v201);
              }
              if ((v219 & 1) == 0)
                goto LABEL_774;
              continue;
            }
            goto LABEL_398;
          }
        }
      }
      v94 = *(_DWORD **)(v90 + 32 * v88 + 24);
LABEL_141:
      *(_QWORD *)(a2 + 80) = v94;
      goto LABEL_132;
    case 0x1E:
      v43 = *(_DWORD *)(a2 + 36);
      v44 = *(_DWORD *)(a2 + 40) + 1;
      v45 = 32 * v44;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v44;
        if (v43 <= v44)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C7D0);
        }
        v47 = *(_QWORD *)(a2 + 24);
        v48 = *(_DWORD *)(v47 + v45);
        *(_DWORD *)(a2 + 56) = v48;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v47 + v45 + 4);
        v49 = *(_DWORD *)(v47 + v45);
        if (v49 > 8)
          goto LABEL_64;
        if (((1 << v49) & 0x38) != 0)
          break;
        if (((1 << v49) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v47 + v45 + 24);
        }
        else if (v49 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v50 = *(_DWORD **)(v47 + v45 + 24);
          if (v50)
            *v50 += 2;
          goto LABEL_73;
        }
LABEL_64:
        v46 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v46;
        v45 += 32;
        ++v44;
        if (v48 != 82)
        {
          if (v48 == 73)
          {
            v121 = *(_QWORD **)(a2 + 8);
            v528 = (WTF *)v4;
            LODWORD(v529) = v5;
            DWORD1(v529) = v46 - v5;
            v122 = WGSL::AST::Builder::construct<WGSL::AST::ReturnStatement,WGSL::SourceSpan,decltype(nullptr),void>(v121, &v528);
            *(_QWORD *)v523 = v122;
            LODWORD(v524) = 0;
LABEL_361:
            WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v528, a2, 73);
            v194 = (int)v531;
            if ((_DWORD)v531)
            {
              WGSL::toString(73);
              if (v194 != 1)
                goto LABEL_990;
              WGSL::toString((int)v528);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v538, (uint64_t *)&v510, (uint64_t *)&v509);
              v195 = v509;
              v509 = 0;
              if (v195)
              {
                if (*v195 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v195 -= 2;
              }
              v307 = v510;
              v510 = 0;
              if (v307)
              {
                if (*v307 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v307 -= 2;
              }
              v159 = 0;
              v308 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
              *(_QWORD *)a1 = v538;
              *(_QWORD *)(a1 + 8) = v4;
              *(_QWORD *)(a1 + 16) = v308;
              *(_DWORD *)(a1 + 24) = 1;
            }
            else
            {
              if ((_DWORD)v528 == 8 && v530)
              {
                if (*(_DWORD *)v530 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v530 -= 2;
              }
              v159 = 0;
              *(_QWORD *)a1 = v122;
              *(_DWORD *)(a1 + 24) = 0;
            }
          }
          else
          {
            WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v528, a2);
            v157 = v530;
            if (!(_DWORD)v530)
            {
              v192 = *(_QWORD **)(a2 + 8);
              v193 = *(_DWORD *)(a2 + 96) - v5;
              v538 = (WTF *)v4;
              *(_QWORD *)&v539 = __PAIR64__(v193, v5);
              v533 = (const char *)v528;
              v122 = WGSL::AST::Builder::construct<WGSL::AST::ReturnStatement,WGSL::SourceSpan,WGSL::AST::Expression *,void>(v192, &v538, (uint64_t *)&v533);
              *(_QWORD *)v523 = v122;
              LODWORD(v524) = 0;
              ((void (*)(WTF **, WTF **))off_1E0FD71D8[v157])(&v538, &v528);
              goto LABEL_361;
            }
            if ((_DWORD)v530 != 1)
              goto LABEL_990;
            v158 = v528;
            if (v528)
              *(_DWORD *)v528 += 2;
            *(_OWORD *)&v523[8] = v529;
            *(_QWORD *)v523 = v158;
            v159 = 1;
            LODWORD(v524) = 1;
            ((void (*)(WTF **, WTF **))off_1E0FD71D8[v157])(&v538, &v528);
            if (v158)
              *(_DWORD *)v158 += 2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
            *(_QWORD *)a1 = v158;
            *(_DWORD *)(a1 + 24) = 1;
          }
          v156 = off_1E0FD75E8[v159];
LABEL_842:
          v420 = &v528;
          v421 = (WTF **)v523;
          goto LABEL_947;
        }
      }
      v50 = *(_DWORD **)(v47 + v45 + 24);
LABEL_73:
      *(_QWORD *)(a2 + 80) = v50;
      goto LABEL_64;
    case 0x20:
      v34 = (_OWORD *)(a2 + 60);
      v35 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v36;
        if (v35 <= v36)
          goto LABEL_991;
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v38 + 32 * v36;
        v40 = *(_DWORD *)v39;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v39;
        *v34 = *(_OWORD *)(v39 + 4);
        v41 = *(_DWORD *)v39;
        if (v41 > 8)
          goto LABEL_52;
        if (((1 << v41) & 0x38) != 0)
          break;
        if (((1 << v41) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v38 + 32 * v36 + 24);
        }
        else if (v41 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
          if (v42)
            *v42 += 2;
          goto LABEL_61;
        }
LABEL_52:
        v37 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v37;
        ++v36;
        if (v40 != 82)
        {
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v528, a2);
          if ((_DWORD)v530)
          {
            if ((_DWORD)v530 != 1)
              goto LABEL_990;
            v143 = v528;
            if (v528)
              *(_DWORD *)v528 += 2;
            *(_OWORD *)(a1 + 8) = v529;
            *(_QWORD *)a1 = v143;
            v144 = 1;
            *(_DWORD *)(a1 + 24) = 1;
            goto LABEL_945;
          }
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseAttributes(v523, a2);
          if ((_DWORD)v524)
          {
            if ((_DWORD)v524 != 1)
              goto LABEL_990;
            v176 = *(_QWORD *)v523;
            if (*(_QWORD *)v523)
              **(_DWORD **)v523 += 2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
            *(_QWORD *)a1 = v176;
            v177 = 1;
            *(_DWORD *)(a1 + 24) = 1;
            goto LABEL_943;
          }
          v293 = *(_DWORD *)(a2 + 56);
          if (v293 != 43)
          {
            WGSL::toString(43);
            WGSL::toString(v293);
            v538 = (WTF *)"Expected a ";
            *(_QWORD *)&v539 = 12;
            v533 = ", but got a ";
            *(_QWORD *)&v534 = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v538, (uint64_t *)&v541, (uint64_t)&v533, (uint64_t *)&v536, &v515);
            if (!v515)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C8E0);
            }
            v318 = v536;
            v536 = 0;
            if (v318)
            {
              if (*(_DWORD *)v318 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v318 -= 2;
            }
            v422 = v541;
            v541 = 0;
            if (v422)
            {
              if (*(_DWORD *)v422 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v422 -= 2;
            }
            v177 = 0;
            v423 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v515;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v423;
            *(_DWORD *)(a1 + 24) = 1;
            goto LABEL_943;
          }
          v294 = *(_DWORD *)(a2 + 36);
          v295 = *(_DWORD *)(a2 + 40) + 1;
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v295;
            if (v294 <= v295)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C840);
            }
            v297 = *(_QWORD *)(a2 + 24);
            v298 = v297 + 32 * v295;
            v299 = *(_DWORD *)v298;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v298;
            *v34 = *(_OWORD *)(v298 + 4);
            v300 = *(_DWORD *)v298;
            if (v300 <= 8)
            {
              if (((1 << v300) & 0x38) != 0)
              {
                v301 = *(_DWORD **)(v297 + 32 * v295 + 24);
                goto LABEL_586;
              }
              if (((1 << v300) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v297 + 32 * v295 + 24);
              }
              else if (v300 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v301 = *(_DWORD **)(v297 + 32 * v295 + 24);
                if (v301)
                  *v301 += 2;
LABEL_586:
                *(_QWORD *)(a2 + 80) = v301;
              }
            }
            v296 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v296;
            ++v295;
            if (v299 == 82)
              continue;
            break;
          }
          v480 = 0;
          v319 = 0;
          v485 = 0;
          v541 = 0;
          v542 = 0;
          v483 = (_OWORD *)(a1 + 8);
          LOBYTE(v538) = 0;
          LOBYTE(v540) = 0;
          while (2)
          {
            v320 = *(_DWORD *)(a2 + 56);
            if (v320 != 44)
            {
              v536 = 0;
              v537 = 0;
              if (v320 != 17)
              {
                if (v320 != 12)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v338 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                  *(_QWORD *)(a1 + 8) = v4;
                  *(_QWORD *)(a1 + 16) = v338;
                  v339 = 1;
                  *(_DWORD *)(a1 + 24) = 1;
                  goto LABEL_752;
                }
                v321 = *(_DWORD *)(a2 + 36);
                v322 = *(_DWORD *)(a2 + 40) + 1;
                while (2)
                {
                  *(_DWORD *)(a2 + 40) = v322;
                  if (v321 <= v322)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18250C7C0);
                  }
                  v324 = *(_QWORD *)(a2 + 24);
                  v325 = v324 + 32 * v322;
                  v326 = *(_DWORD *)v325;
                  *(_DWORD *)(a2 + 56) = *(_DWORD *)v325;
                  *v34 = *(_OWORD *)(v325 + 4);
                  v327 = *(_DWORD *)v325;
                  if (v327 <= 8)
                  {
                    if (((1 << v327) & 0x38) != 0)
                    {
                      v328 = *(_DWORD **)(v324 + 32 * v322 + 24);
                      goto LABEL_656;
                    }
                    if (((1 << v327) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v324 + 32 * v322 + 24);
                    }
                    else if (v327 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v328 = *(_DWORD **)(v324 + 32 * v322 + 24);
                      if (v328)
                        *v328 += 2;
LABEL_656:
                      *(_QWORD *)(a2 + 80) = v328;
                    }
                  }
                  v323 = *(_DWORD *)(a2 + 68);
                  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                  *(_DWORD *)(a2 + 96) = v323;
                  ++v322;
                  if (v326 == 82)
                    continue;
                  break;
                }
                v484 = 0;
                v490 = 0;
                v340 = 0;
                v488 = v319;
LABEL_671:
                if (v326 == 17)
                {
                  v341 = *(_DWORD *)(a2 + 36);
                  v342 = *(_DWORD *)(a2 + 40) + 1;
                  while (1)
                  {
                    *(_DWORD *)(a2 + 40) = v342;
                    if (v341 <= v342)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x18250C818);
                    }
                    v344 = *(_QWORD *)(a2 + 24);
                    v345 = v344 + 32 * v342;
                    v346 = *(_DWORD *)v345;
                    *(_DWORD *)(a2 + 56) = *(_DWORD *)v345;
                    *v34 = *(_OWORD *)(v345 + 4);
                    v347 = *(_DWORD *)v345;
                    if (v347 > 8)
                      goto LABEL_674;
                    if (((1 << v347) & 0x38) != 0)
                      break;
                    if (((1 << v347) & 0xC4) != 0)
                    {
                      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v344 + 32 * v342 + 24);
                    }
                    else if (v347 == 8)
                    {
                      *(_QWORD *)(a2 + 80) = 0;
                      v348 = *(_DWORD **)(v344 + 32 * v342 + 24);
                      if (v348)
                        *v348 += 2;
                      goto LABEL_683;
                    }
LABEL_674:
                    v343 = *(_DWORD *)(a2 + 68);
                    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                    *(_DWORD *)(a2 + 96) = v343;
                    ++v342;
                    if (v346 != 82)
                    {
                      v340 = 1;
                      goto LABEL_696;
                    }
                  }
                  v348 = *(_DWORD **)(v344 + 32 * v342 + 24);
LABEL_683:
                  *(_QWORD *)(a2 + 80) = v348;
                  goto LABEL_674;
                }
                WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v533, a2);
                v349 = v535;
                if (v535)
                {
                  if (v535 != 1)
                    goto LABEL_990;
                  v350 = v533;
                  if (v533)
                    *(_DWORD *)v533 += 2;
                  *v483 = v534;
                  *(_QWORD *)a1 = v350;
                  *(_DWORD *)(a1 + 24) = 1;
                }
                else
                {
                  v351 = v490;
                  if (v490 == (_DWORD)v537)
                  {
                    v352 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v536, v490 + 1, (unint64_t)&v533);
                    v353 = HIDWORD(v537);
                    v484 = v536;
                    *((_QWORD *)v536 + HIDWORD(v537)) = *v352;
                    v490 = v353 + 1;
                    HIDWORD(v537) = v353 + 1;
                  }
                  else
                  {
                    *((_QWORD *)v484 + v490++) = v533;
                    HIDWORD(v537) = v351 + 1;
                  }
                }
                if (v535 != -1)
                  ((void (*)(WTF **, const char **))off_1E0FD71D8[v535])(&v515, &v533);
                ++v485;
                if (v349)
                {
                  v339 = 1;
                  v319 = v488;
                  goto LABEL_752;
                }
LABEL_696:
                v326 = *(_DWORD *)(a2 + 56);
                if (v326 != 48)
                {
                  v319 = v488;
                  if ((v340 & 1) != 0)
                    goto LABEL_715;
LABEL_712:
                  v361 = 0;
                  goto LABEL_719;
                }
                v354 = *(_DWORD *)(a2 + 36);
                v355 = (*(_DWORD *)(a2 + 40) + 1);
                v356 = 32 * v355;
                v319 = v488;
LABEL_700:
                *(_DWORD *)(a2 + 40) = v355;
                if (v354 <= v355)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18250C828);
                }
                v358 = *(_QWORD *)(a2 + 24);
                v326 = *(_DWORD *)(v358 + v356);
                *(_DWORD *)(a2 + 56) = v326;
                *v34 = *(_OWORD *)(v358 + v356 + 4);
                v359 = *(_DWORD *)(v358 + v356);
                if (v359 <= 8)
                {
                  if (((1 << v359) & 0x38) != 0)
                  {
                    v360 = *(_DWORD **)(v358 + v356 + 24);
                    goto LABEL_708;
                  }
                  if (((1 << v359) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v358 + v356 + 24);
                  }
                  else if (v359 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v360 = *(_DWORD **)(v358 + v356 + 24);
                    if (v360)
                      *v360 += 2;
LABEL_708:
                    *(_QWORD *)(a2 + 80) = v360;
                  }
                }
                v357 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v357;
                v356 += 32;
                LODWORD(v355) = v355 + 1;
                if (v326 != 82)
                {
                  if (v326 == 43 || v326 == 47)
                  {
                    if ((v340 & 1) == 0)
                      goto LABEL_712;
LABEL_715:
                    v362 = v490;
LABEL_716:
                    if (v319)
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v363 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                      *(_QWORD *)a1 = v533;
                      *(_QWORD *)(a1 + 8) = v4;
                      *(_QWORD *)(a1 + 16) = v363;
                      v319 = 1;
                      *(_DWORD *)(a1 + 24) = 1;
                      v339 = 1;
                      goto LABEL_752;
                    }
                    v490 = v362;
                    v326 = *(_DWORD *)(a2 + 56);
                    v361 = 1;
LABEL_719:
                    if (v326 != 47)
                    {
LABEL_732:
                      WGSL::Parser<WGSL::Lexer<char16_t>>::parseCompoundStatement(&v533, a2);
                      if (v535)
                      {
                        if (v535 != 1)
                          goto LABEL_990;
                        v372 = v533;
                        if (v533)
                          *(_DWORD *)v533 += 2;
                        *v483 = v534;
                        *(_QWORD *)a1 = v372;
                        v339 = 1;
                        *(_DWORD *)(a1 + 24) = 1;
                        v373 = v535;
                        if (v535 != -1)
                          goto LABEL_751;
                      }
                      else
                      {
                        if (v361)
                        {
                          v374 = v536;
                          v375 = v537;
                          v536 = 0;
                          v537 = 0;
                          v376 = v533;
                          if (v480)
                          {
                            if (v538)
                            {
                              v489 = v533;
                              WTF::fastFree(v538, v337);
                              v376 = v489;
                            }
                            v538 = v374;
                            *(_QWORD *)&v539 = __PAIR64__(v490, v375);
                            v480 = 1;
                            v319 = 1;
                            *((_QWORD *)&v539 + 1) = v376;
                          }
                          else
                          {
                            v538 = v374;
                            *(_QWORD *)&v539 = __PAIR64__(v490, v375);
                            *((_QWORD *)&v539 + 1) = v533;
                            v319 = 1;
                            v480 = 1;
                            LOBYTE(v540) = 1;
                          }
                        }
                        else
                        {
                          v515 = v536;
                          v377 = v537;
                          v536 = 0;
                          v537 = 0;
                          *(_QWORD *)&v516 = __PAIR64__(v490, v377);
                          *((_QWORD *)&v516 + 1) = v533;
                          v378 = HIDWORD(v542);
                          if (HIDWORD(v542) == (_DWORD)v542)
                          {
                            v379 = WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v541, HIDWORD(v542) + 1, (unint64_t)&v515);
                            v378 = HIDWORD(v542);
                            v380 = (char *)&v541[24 * HIDWORD(v542)];
                            *(_QWORD *)v380 = 0;
                            *((_QWORD *)v380 + 1) = 0;
                            v381 = *(_QWORD *)v379;
                            *(_QWORD *)v379 = 0;
                            *(_QWORD *)v380 = v381;
                            LODWORD(v381) = *(_DWORD *)(v379 + 8);
                            *(_DWORD *)(v379 + 8) = 0;
                            *((_DWORD *)v380 + 2) = v381;
                            LODWORD(v381) = *(_DWORD *)(v379 + 12);
                            *(_DWORD *)(v379 + 12) = 0;
                            *((_DWORD *)v380 + 3) = v381;
                            v382 = v380 + 16;
                            v383 = (_QWORD *)(v379 + 16);
                          }
                          else
                          {
                            v384 = (char *)&v541[24 * HIDWORD(v542)];
                            *(_QWORD *)v384 = 0;
                            *((_QWORD *)v384 + 1) = 0;
                            v385 = v515;
                            v515 = 0;
                            *(_QWORD *)v384 = v385;
                            *((_DWORD *)v384 + 2) = v516;
                            LODWORD(v385) = DWORD1(v516);
                            DWORD1(v516) = 0;
                            *((_DWORD *)v384 + 3) = (_DWORD)v385;
                            v382 = v384 + 16;
                            v383 = (_QWORD *)&v516 + 1;
                          }
                          *v382 = *v383;
                          HIDWORD(v542) = v378 + 1;
                          v386 = v515;
                          if (v515)
                          {
                            v515 = 0;
                            LODWORD(v516) = 0;
                            WTF::fastFree(v386, v337);
                          }
                        }
                        if (v485 < 0x400)
                        {
                          v339 = 0;
                          v373 = v535;
                          if (v535 == -1)
                            goto LABEL_752;
LABEL_751:
                          ((void (*)(WTF **, const char **))off_1E0FD7628[v373])(&v515, &v533);
                          goto LABEL_752;
                        }
                        WTF::String::number((WTF::String *)0x3FF);
                        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"switch statement cannot have more than ", 40, (uint64_t *)&v526, (int8x16_t *)" case selector values", 22, &v515);
                        v387 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
                        *(_QWORD *)a1 = v515;
                        *(_QWORD *)(a1 + 8) = v4;
                        *(_QWORD *)(a1 + 16) = v387;
                        *(_DWORD *)(a1 + 24) = 1;
                        v515 = 0;
                        v388 = v526;
                        v526 = 0;
                        if (v388)
                        {
                          if (*v388 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *v388 -= 2;
                        }
                        v339 = 1;
                        v373 = v535;
                        if (v535 != -1)
                          goto LABEL_751;
                      }
LABEL_752:
                      result = v536;
                      if (v536)
                      {
                        v536 = 0;
                        result = (WTF *)WTF::fastFree(result, v337);
                      }
                      if (v339)
                      {
LABEL_828:
                        if (v480)
                        {
                          result = v538;
                          if (v538)
                            result = (WTF *)WTF::fastFree(v538, v337);
                        }
                        goto LABEL_935;
                      }
                      continue;
                    }
                    v364 = *(_DWORD *)(a2 + 36);
                    v365 = *(_DWORD *)(a2 + 40) + 1;
                    while (2)
                    {
                      *(_DWORD *)(a2 + 40) = v365;
                      if (v364 <= v365)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x18250C820);
                      }
                      v367 = *(_QWORD *)(a2 + 24);
                      v368 = v367 + 32 * v365;
                      v369 = *(_DWORD *)v368;
                      *(_DWORD *)(a2 + 56) = *(_DWORD *)v368;
                      *v34 = *(_OWORD *)(v368 + 4);
                      v370 = *(_DWORD *)v368;
                      if (v370 <= 8)
                      {
                        if (((1 << v370) & 0x38) != 0)
                        {
                          v371 = *(_DWORD **)(v367 + 32 * v365 + 24);
                          goto LABEL_731;
                        }
                        if (((1 << v370) & 0xC4) != 0)
                        {
                          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v367 + 32 * v365 + 24);
                        }
                        else if (v370 == 8)
                        {
                          *(_QWORD *)(a2 + 80) = 0;
                          v371 = *(_DWORD **)(v367 + 32 * v365 + 24);
                          if (v371)
                            *v371 += 2;
LABEL_731:
                          *(_QWORD *)(a2 + 80) = v371;
                        }
                      }
                      v366 = *(_DWORD *)(a2 + 68);
                      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                      *(_DWORD *)(a2 + 96) = v366;
                      ++v365;
                      if (v369 != 82)
                        goto LABEL_732;
                      continue;
                    }
                  }
                  goto LABEL_671;
                }
                goto LABEL_700;
              }
              v329 = *(_DWORD *)(a2 + 36);
              v330 = *(_DWORD *)(a2 + 40) + 1;
              while (2)
              {
                *(_DWORD *)(a2 + 40) = v330;
                if (v329 <= v330)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18250C7C8);
                }
                v332 = *(_QWORD *)(a2 + 24);
                v333 = v332 + 32 * v330;
                v334 = *(_DWORD *)v333;
                *(_DWORD *)(a2 + 56) = *(_DWORD *)v333;
                *v34 = *(_OWORD *)(v333 + 4);
                v335 = *(_DWORD *)v333;
                if (v335 <= 8)
                {
                  if (((1 << v335) & 0x38) != 0)
                  {
                    v336 = *(_DWORD **)(v332 + 32 * v330 + 24);
                    goto LABEL_668;
                  }
                  if (((1 << v335) & 0xC4) != 0)
                  {
                    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v332 + 32 * v330 + 24);
                  }
                  else if (v335 == 8)
                  {
                    *(_QWORD *)(a2 + 80) = 0;
                    v336 = *(_DWORD **)(v332 + 32 * v330 + 24);
                    if (v336)
                      *v336 += 2;
LABEL_668:
                    *(_QWORD *)(a2 + 80) = v336;
                  }
                }
                v331 = *(_DWORD *)(a2 + 68);
                *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
                *(_DWORD *)(a2 + 96) = v331;
                ++v330;
                if (v334 != 82)
                {
                  v362 = 0;
                  goto LABEL_716;
                }
                continue;
              }
            }
            break;
          }
          v409 = *(_DWORD *)(a2 + 36);
          v410 = *(_DWORD *)(a2 + 40) + 1;
          while (2)
          {
            *(_DWORD *)(a2 + 40) = v410;
            if (v409 <= v410)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C860);
            }
            v412 = *(_QWORD *)(a2 + 24);
            v413 = v412 + 32 * v410;
            v414 = *(_DWORD *)v413;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v413;
            *v34 = *(_OWORD *)(v413 + 4);
            v415 = *(_DWORD *)v413;
            if (v415 <= 8)
            {
              if (((1 << v415) & 0x38) != 0)
              {
                v416 = *(_DWORD **)(v412 + 32 * v410 + 24);
                goto LABEL_825;
              }
              if (((1 << v415) & 0xC4) != 0)
              {
                *(_QWORD *)(a2 + 80) = *(_QWORD *)(v412 + 32 * v410 + 24);
              }
              else if (v415 == 8)
              {
                *(_QWORD *)(a2 + 80) = 0;
                v416 = *(_DWORD **)(v412 + 32 * v410 + 24);
                if (v416)
                  *v416 += 2;
LABEL_825:
                *(_QWORD *)(a2 + 80) = v416;
              }
            }
            v411 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v411;
            ++v410;
            if (v414 != 82)
            {
              if (v480)
              {
                v417 = *(_QWORD **)(a2 + 8);
                v533 = (const char *)v4;
                LODWORD(v534) = v5;
                DWORD1(v534) = v411 - v5;
                result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::SwitchStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::Vector<WGSL::AST::SwitchClause,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WGSL::AST::SwitchClause,void>(v417, &v533, (uint64_t *)&v528, (uint64_t *)v523, (uint64_t *)&v541, (uint64_t *)&v538);
                *(_QWORD *)a1 = result;
                *(_DWORD *)(a1 + 24) = 0;
                v480 = v540;
                goto LABEL_828;
              }
              result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
              v456 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
              *(_QWORD *)a1 = v533;
              *(_QWORD *)(a1 + 8) = v4;
              *(_QWORD *)(a1 + 16) = v456;
              *(_DWORD *)(a1 + 24) = 1;
LABEL_935:
              v457 = (WTF *)v541;
              if (HIDWORD(v542))
              {
                v458 = 24 * HIDWORD(v542);
                v459 = v541;
                do
                {
                  result = *(WTF **)v459;
                  if (*(_QWORD *)v459)
                  {
                    *(_QWORD *)v459 = 0;
                    *((_DWORD *)v459 + 2) = 0;
                    result = (WTF *)WTF::fastFree(result, v337);
                  }
                  v459 += 24;
                  v458 -= 24;
                }
                while (v458);
              }
              if (v457)
                result = (WTF *)WTF::fastFree(v457, v337);
              v177 = (int)v524;
              if ((_DWORD)v524 != -1)
LABEL_943:
                result = (WTF *)((uint64_t (*)(WTF **, _BYTE *))off_1E0FD7638[v177])(&v538, v523);
              v144 = v530;
              if ((_DWORD)v530 == -1)
                goto LABEL_948;
LABEL_945:
              v156 = off_1E0FD71D8[v144];
              goto LABEL_946;
            }
            continue;
          }
        }
      }
      v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
LABEL_61:
      *(_QWORD *)(a2 + 80) = v42;
      goto LABEL_52;
    case 0x23:
      v104 = *(_DWORD *)(a2 + 36);
      v105 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v105;
        if (v104 <= v105)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C7A8);
        }
        v107 = *(_QWORD *)(a2 + 24);
        v108 = v107 + 32 * v105;
        v109 = *(_DWORD *)v108;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v108;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v108 + 4);
        v110 = *(_DWORD *)v108;
        if (v110 > 8)
          goto LABEL_156;
        if (((1 << v110) & 0x38) != 0)
          break;
        if (((1 << v110) & 0xC4) != 0)
        {
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v107 + 32 * v105 + 24);
        }
        else if (v110 == 8)
        {
          *(_QWORD *)(a2 + 80) = 0;
          v111 = *(_DWORD **)(v107 + 32 * v105 + 24);
          if (v111)
            *v111 += 2;
          goto LABEL_165;
        }
LABEL_156:
        v106 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v106;
        ++v105;
        if (v109 != 82)
        {
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v528, a2);
          v62 = v530;
          if ((_DWORD)v530)
          {
            if ((_DWORD)v530 != 1)
              goto LABEL_990;
            v152 = v528;
            if (v528)
              *(_DWORD *)v528 += 2;
            *(_OWORD *)(a1 + 8) = v529;
            *(_QWORD *)a1 = v152;
            *(_DWORD *)(a1 + 24) = 1;
          }
          else
          {
            WGSL::Parser<WGSL::Lexer<char16_t>>::parseCompoundStatement(v523, a2);
            v187 = v524;
            if ((_DWORD)v524)
            {
              if ((_DWORD)v524 != 1)
                goto LABEL_990;
              v188 = *(_QWORD *)v523;
              if (*(_QWORD *)v523)
                **(_DWORD **)v523 += 2;
              *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
              *(_QWORD *)a1 = v188;
              *(_DWORD *)(a1 + 24) = 1;
            }
            else
            {
              v302 = *(_QWORD **)(a2 + 8);
              v303 = *(_DWORD *)(a2 + 96) - v5;
              v538 = (WTF *)v4;
              *(_QWORD *)&v539 = __PAIR64__(v303, v5);
              *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::WhileStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::CompoundStatement>,void>(v302, &v538, &v528, v523);
              *(_DWORD *)(a1 + 24) = 0;
            }
            ((void (*)(WTF **, _BYTE *))off_1E0FD7628[v187])(&v538, v523);
          }
          v64 = off_1E0FD71D8;
          goto LABEL_590;
        }
      }
      v111 = *(_DWORD **)(v107 + 32 * v105 + 24);
LABEL_165:
      *(_QWORD *)(a2 + 80) = v111;
      goto LABEL_156;
    case 0x24:
    case 0x43:
    case 0x4C:
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseLHSExpression((uint64_t)&v528, a2);
      if ((_DWORD)v530)
      {
        if ((_DWORD)v530 != 1)
          goto LABEL_990;
        v12 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)&v523[8] = v529;
        *(_QWORD *)v523 = v12;
        v13 = 1;
        LODWORD(v524) = 1;
      }
      else
      {
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableUpdatingStatement((uint64_t)v523, a2, &v528);
        v13 = v530;
        if ((_DWORD)v530 == -1)
        {
LABEL_32:
          v23 = (int)v524;
          if ((_DWORD)v524)
          {
            if ((_DWORD)v524 != 1)
              goto LABEL_990;
            v24 = *(_QWORD *)v523;
            if (*(_QWORD *)v523)
              **(_DWORD **)v523 += 2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
LABEL_270:
            *(_QWORD *)a1 = v24;
            *(_DWORD *)(a1 + 24) = v23;
LABEL_271:
            v156 = off_1E0FD75E8[v23];
            goto LABEL_842;
          }
          v25 = *(_DWORD *)(a2 + 56);
          if (v25 != 73)
          {
            WGSL::toString(73);
            WGSL::toString(v25);
            v528 = (WTF *)"Expected a ";
            *(_QWORD *)&v529 = 12;
            v538 = (WTF *)", but got a ";
            *(_QWORD *)&v539 = 13;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v528, (uint64_t *)&v502, (uint64_t)&v538, (uint64_t *)&v501, &v533);
            if (!v533)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C888);
            }
            v155 = v501;
            v501 = 0;
            if (v155)
            {
              if (*v155 == 2)
                WTF::StringImpl::destroy();
              else
                *v155 -= 2;
            }
            result = v502;
            v502 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF *)WTF::StringImpl::destroy();
              else
                *(_DWORD *)result -= 2;
            }
            v191 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v533;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v191;
            *(_DWORD *)(a1 + 24) = 1;
            v23 = (int)v524;
            if ((_DWORD)v524 == -1)
              goto LABEL_948;
            goto LABEL_271;
          }
          v26 = *(_DWORD *)(a2 + 36);
          v27 = *(_DWORD *)(a2 + 40) + 1;
          while (1)
          {
            *(_DWORD *)(a2 + 40) = v27;
            if (v26 <= v27)
            {
              __break(0xC471u);
              JUMPOUT(0x18250C7B8);
            }
            v29 = *(_QWORD *)(a2 + 24);
            v30 = v29 + 32 * v27;
            v31 = *(_DWORD *)v30;
            *(_DWORD *)(a2 + 56) = *(_DWORD *)v30;
            *(_OWORD *)(a2 + 60) = *(_OWORD *)(v30 + 4);
            v32 = *(_DWORD *)v30;
            if (v32 > 8)
              goto LABEL_40;
            if (((1 << v32) & 0x38) != 0)
              break;
            if (((1 << v32) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v29 + 32 * v27 + 24);
            }
            else if (v32 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v33 = *(_DWORD **)(v29 + 32 * v27 + 24);
              if (v33)
                *v33 += 2;
              goto LABEL_49;
            }
LABEL_40:
            v28 = *(_DWORD *)(a2 + 68);
            *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a2 + 96) = v28;
            ++v27;
            if (v31 != 82)
            {
              v24 = *(_QWORD *)v523;
              goto LABEL_270;
            }
          }
          v33 = *(_DWORD **)(v29 + 32 * v27 + 24);
LABEL_49:
          *(_QWORD *)(a2 + 80) = v33;
          goto LABEL_40;
        }
      }
      ((void (*)(WTF **, WTF **))off_1E0FD71D8[v13])(&v538, &v528);
      goto LABEL_32;
    case 0x2B:
      WGSL::Parser<WGSL::Lexer<char16_t>>::parseCompoundStatement(&v528, a2);
      v74 = v530;
      if ((_DWORD)v530)
      {
        if ((_DWORD)v530 != 1)
          goto LABEL_990;
        v75 = v528;
        if (v528)
          *(_DWORD *)v528 += 2;
        *(_OWORD *)(a1 + 8) = v529;
      }
      else
      {
        v75 = v528;
      }
      *(_QWORD *)a1 = v75;
      *(_DWORD *)(a1 + 24) = v74;
      v173 = off_1E0FD7628;
      goto LABEL_808;
    case 0x4F:
      v112 = *(_DWORD *)(a2 + 36);
      v113 = (_OWORD *)(a2 + 60);
      v114 = *(_DWORD *)(a2 + 40) + 1;
      v115 = 32 * v114;
      break;
    default:
      goto LABEL_2;
  }
  while (1)
  {
    *(_DWORD *)(a2 + 40) = v114;
    if (v112 <= v114)
    {
      __break(0xC471u);
      JUMPOUT(0x18250C7F0);
    }
    v117 = *(_QWORD *)(a2 + 24);
    v118 = *(_DWORD *)(v117 + v115);
    *(_DWORD *)(a2 + 56) = v118;
    *v113 = *(_OWORD *)(v117 + v115 + 4);
    v119 = *(_DWORD *)(v117 + v115);
    if (v119 > 8)
      goto LABEL_168;
    if (((1 << v119) & 0x38) != 0)
      break;
    if (((1 << v119) & 0xC4) != 0)
    {
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v117 + v115 + 24);
    }
    else if (v119 == 8)
    {
      *(_QWORD *)(a2 + 80) = 0;
      v120 = *(_DWORD **)(v117 + v115 + 24);
      if (v120)
        *v120 += 2;
      goto LABEL_177;
    }
LABEL_168:
    v116 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v116;
    ++v114;
    v115 += 32;
    if (v118 != 82)
    {
      if (v118 != 49)
      {
        WGSL::toString(49);
        WGSL::toString(v118);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v528, (uint64_t *)&v494, (uint64_t *)&v493);
        v163 = v493;
        v493 = 0;
        if (v163)
        {
          if (*v163 == 2)
            WTF::StringImpl::destroy();
          else
            *v163 -= 2;
        }
        result = v494;
        v494 = 0;
        if (result)
          goto LABEL_602;
LABEL_605:
        v304 = (*(_DWORD *)(a2 + 96) - v5);
        v305 = (const char *)v528;
        goto LABEL_612;
      }
      while (2)
      {
        *(_DWORD *)(a2 + 40) = v114;
        if (v112 <= v114)
        {
          __break(0xC471u);
          JUMPOUT(0x18250C810);
        }
        v139 = v117 + 32 * v114;
        v140 = *(_DWORD *)v139;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v139;
        *v113 = *(_OWORD *)(v139 + 4);
        v141 = *(_DWORD *)v139;
        if (v141 <= 8)
        {
          if (((1 << v141) & 0x38) != 0)
          {
            v142 = *(_DWORD **)(v117 + 32 * v114 + 24);
            goto LABEL_231;
          }
          if (((1 << v141) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v117 + 32 * v114 + 24);
          }
          else if (v141 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v142 = *(_DWORD **)(v117 + 32 * v114 + 24);
            if (v142)
              *v142 += 2;
LABEL_231:
            *(_QWORD *)(a2 + 80) = v142;
          }
        }
        v138 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v138;
        ++v114;
        if (v140 != 82)
        {
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)v523, a2);
          v169 = v524;
          if ((_DWORD)v524)
          {
            if ((_DWORD)v524 != 1)
              goto LABEL_990;
            v170 = *(_QWORD *)v523;
            if (*(_QWORD *)v523)
              **(_DWORD **)v523 += 2;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)&v523[8];
            *(_QWORD *)a1 = v170;
            goto LABEL_837;
          }
          WGSL::Parser<WGSL::Lexer<unsigned char>>::consumeType((uint64_t)&v528, a2, 73);
          v197 = (int)v531;
          if ((_DWORD)v531)
          {
            WGSL::toString(73);
            if (v197 != 1)
              goto LABEL_990;
            WGSL::toString((int)v528);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(&v538, (uint64_t *)&v492, (uint64_t *)&v491);
            v198 = v491;
            v491 = 0;
            if (v198)
            {
              if (*v198 == 2)
                WTF::StringImpl::destroy();
              else
                *v198 -= 2;
            }
            v418 = v492;
            v492 = 0;
            if (v418)
            {
              if (*v418 == 2)
                WTF::StringImpl::destroy();
              else
                *v418 -= 2;
            }
            v419 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            *(_QWORD *)a1 = v538;
            *(_QWORD *)(a1 + 8) = v4;
            *(_QWORD *)(a1 + 16) = v419;
LABEL_837:
            *(_DWORD *)(a1 + 24) = 1;
          }
          else
          {
            if ((_DWORD)v528 == 8 && v530)
            {
              if (*(_DWORD *)v530 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v530 -= 2;
            }
            v464 = *(_QWORD **)(a2 + 8);
            v465 = *(_DWORD *)(a2 + 96) - v5;
            v528 = (WTF *)v4;
            *(_QWORD *)&v529 = __PAIR64__(v465, v5);
            *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::PhonyAssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,void>(v464, &v528, v523);
            *(_DWORD *)(a1 + 24) = 0;
          }
          v156 = off_1E0FD71D8[v169];
          goto LABEL_842;
        }
        continue;
      }
    }
  }
  v120 = *(_DWORD **)(v117 + v115 + 24);
LABEL_177:
  *(_QWORD *)(a2 + 80) = v120;
  goto LABEL_168;
}

uint64_t WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableUpdatingStatement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  unsigned int i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  __int128 v46;
  _DWORD *v47;
  __int128 v48;
  int v49;
  __int16 v50;

  v6 = *(_DWORD **)(a2 + 88);
  v7 = *(unsigned int *)(a2 + 96);
  v8 = *(_DWORD *)(a2 + 56);
  if (v8 == 71)
  {
    v9 = 257;
    goto LABEL_5;
  }
  if (v8 == 60)
  {
    v9 = 256;
LABEL_5:
    LOWORD(v46) = v9;
    v10 = *(_DWORD *)(a2 + 36);
    for (i = *(_DWORD *)(a2 + 40) + 1; ; ++i)
    {
      *(_DWORD *)(a2 + 40) = i;
      if (v10 <= i)
        goto LABEL_57;
      v13 = *(_QWORD *)(a2 + 24);
      v14 = v13 + 32 * i;
      v15 = *(_DWORD *)v14;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(v14 + 4);
      v16 = *(_DWORD *)v14;
      if (v16 > 8)
        goto LABEL_7;
      if (((1 << v16) & 0x38) != 0)
        break;
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * i + 24);
      }
      else if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * i + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_16;
      }
LABEL_7:
      v12 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v12;
      if (v15 != 82)
      {
        v18 = *(_QWORD **)(a2 + 8);
        v47 = v6;
        LODWORD(v48) = v7;
        DWORD1(v48) = v12 - v7;
        result = (uint64_t)WGSL::AST::Builder::construct<WGSL::AST::DecrementIncrementStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::DecrementIncrementStatement::Operation &,void>(v18, &v47, a3, (char *)&v46);
        *(_QWORD *)a1 = result;
        *(_DWORD *)(a1 + 24) = 0;
        return result;
      }
    }
    v17 = *(_DWORD **)(v13 + 32 * i + 24);
LABEL_16:
    *(_QWORD *)(a2 + 80) = v17;
    goto LABEL_7;
  }
  v20 = (v8 - 38);
  if (v20 > 0x2B)
    goto LABEL_55;
  if (((1 << (v8 - 38)) & 0x8A412910001) == 0)
  {
    if (v20 == 11)
    {
      v35 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 40) + 1;
      while (1)
      {
        *(_DWORD *)(a2 + 40) = v36;
        if (v35 <= v36)
        {
          __break(0xC471u);
          goto LABEL_60;
        }
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v38 + 32 * v36;
        v40 = *(_DWORD *)v39;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)v39;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v39 + 4);
        v41 = *(_DWORD *)v39;
        if (v41 <= 8)
        {
          if (((1 << v41) & 0x38) != 0)
          {
            v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
LABEL_52:
            *(_QWORD *)(a2 + 80) = v42;
            goto LABEL_43;
          }
          if (((1 << v41) & 0xC4) != 0)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v38 + 32 * v36 + 24);
          }
          else if (v41 == 8)
          {
            *(_QWORD *)(a2 + 80) = 0;
            v42 = *(_DWORD **)(v38 + 32 * v36 + 24);
            if (v42)
              *v42 += 2;
            goto LABEL_52;
          }
        }
LABEL_43:
        v37 = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
        *(_DWORD *)(a2 + 96) = v37;
        ++v36;
        if (v40 != 82)
        {
          WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v47, a2);
          v29 = v49;
          if (!v49)
          {
            v43 = *(_QWORD **)(a2 + 8);
            v44 = *(_DWORD *)(a2 + 96) - v7;
            *(_QWORD *)&v46 = v6;
            *((_QWORD *)&v46 + 1) = __PAIR64__(v44, v7);
            v34 = WGSL::AST::Builder::construct<WGSL::AST::AssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,void>(v43, &v46, a3, &v47);
            goto LABEL_38;
          }
LABEL_33:
          if (v29 == 1)
          {
            v30 = v47;
            if (v47)
              *v47 += 2;
            *(_OWORD *)(a1 + 8) = v48;
            *(_QWORD *)a1 = v30;
            v31 = 1;
            *(_DWORD *)(a1 + 24) = 1;
            return ((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v31])(&v46, &v47);
          }
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_57:
          __break(0xC471u);
LABEL_60:
          JUMPOUT(0x18250CEC8);
        }
      }
    }
LABEL_55:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v45 = v7 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v7) << 32);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v45;
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }
  v50 = WGSL::toBinaryOperation(v8) | 0x100;
  v21 = *(_DWORD *)(a2 + 36);
  v22 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v22;
    if (v21 <= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x18250CED0);
    }
    v24 = *(_QWORD *)(a2 + 24);
    v25 = v24 + 32 * v22;
    v26 = *(_DWORD *)v25;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v25;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v25 + 4);
    v27 = *(_DWORD *)v25;
    if (v27 <= 8)
    {
      if (((1 << v27) & 0x38) != 0)
      {
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
LABEL_31:
        *(_QWORD *)(a2 + 80) = v28;
        goto LABEL_22;
      }
      if (((1 << v27) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v24 + 32 * v22 + 24);
        goto LABEL_22;
      }
      if (v27 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
        if (v28)
          *v28 += 2;
        goto LABEL_31;
      }
    }
LABEL_22:
    v23 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v23;
    ++v22;
  }
  while (v26 == 82);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v47, a2);
  v29 = v49;
  if (v49)
    goto LABEL_33;
  v32 = *(_QWORD **)(a2 + 8);
  v33 = *(_DWORD *)(a2 + 96) - v7;
  *(_QWORD *)&v46 = v6;
  *((_QWORD *)&v46 + 1) = __PAIR64__(v33, v7);
  v34 = WGSL::AST::Builder::construct<WGSL::AST::CompoundAssignmentStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::BinaryOperation &,void>(v32, &v46, a3, &v47, (char *)&v50);
LABEL_38:
  v31 = 0;
  *(_QWORD *)a1 = v34;
  *(_DWORD *)(a1 + 24) = 0;
  return ((uint64_t (*)(__int128 *, _DWORD **))off_1E0FD71D8[v31])(&v46, &v47);
}

uint64_t WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableUpdatingStatement(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  uint64_t result;
  _BOOL8 v7;
  _DWORD *v8;
  __int128 v9;
  int v10;
  char v11;

  WGSL::Parser<WGSL::Lexer<char16_t>>::parseLHSExpression((uint64_t)&v8, a2);
  if (v10)
  {
    if (v10 != 1)
    {
      v7 = std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::Parser<WGSL::Lexer<char16_t>>::parseIfStatementWithAttributes(v7);
    }
    v4 = v8;
    if (v8)
      *v8 += 2;
    *(_OWORD *)(a1 + 8) = v9;
    *(_QWORD *)a1 = v4;
    v5 = 1;
    *(_DWORD *)(a1 + 24) = 1;
  }
  else
  {
    result = WGSL::Parser<WGSL::Lexer<char16_t>>::parseVariableUpdatingStatement(a1, a2, &v8);
    v5 = v10;
    if (v10 == -1)
      return result;
  }
  return ((uint64_t (*)(char *, _DWORD **))off_1E0FD71D8[v5])(&v11, &v8);
}

_DWORD *WGSL::Parser<WGSL::Lexer<char16_t>>::parseIfStatementWithAttributes(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  int v9;
  _OWORD *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *result;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  int *v35;
  int v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  const char *v43;
  __int128 v44;
  unsigned int v45;
  const char *v46;
  __int128 v47;
  unsigned int v48;
  _DWORD *v49;
  _DWORD *v50;

  v9 = *(_DWORD *)(a2 + 56);
  if (v9 != 25)
  {
    WGSL::toString(25);
    WGSL::toString(v9);
    v46 = "Expected a ";
    *(_QWORD *)&v47 = 12;
    v43 = ", but got a ";
    *(_QWORD *)&v44 = 13;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v46, (uint64_t *)&v50, (uint64_t)&v43, (uint64_t *)&v49, &v39);
    if (!v39)
      goto LABEL_67;
    v20 = v49;
    v49 = 0;
    if (v20)
    {
      if (*v20 == 2)
      {
        WTF::StringImpl::destroy();
        result = v50;
        v50 = 0;
        if (!result)
        {
LABEL_35:
          v26 = a5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - a5) << 32);
          *(_QWORD *)a1 = v39;
          *(_QWORD *)(a1 + 8) = a4;
          *(_QWORD *)(a1 + 16) = v26;
          *(_DWORD *)(a1 + 24) = 1;
          return result;
        }
LABEL_32:
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
        goto LABEL_35;
      }
      *v20 -= 2;
    }
    result = v50;
    v50 = 0;
    if (!result)
      goto LABEL_35;
    goto LABEL_32;
  }
  v11 = (_OWORD *)(a2 + 60);
  v12 = *(_DWORD *)(a2 + 36);
  v13 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v13;
    if (v12 <= v13)
      goto LABEL_67;
    v15 = *(_QWORD *)(a2 + 24);
    v16 = v15 + 32 * v13;
    v17 = *(_DWORD *)v16;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v16;
    *v11 = *(_OWORD *)(v16 + 4);
    v18 = *(_DWORD *)v16;
    if (v18 <= 8)
    {
      if (((1 << v18) & 0x38) != 0)
      {
        v19 = *(_DWORD **)(v15 + 32 * v13 + 24);
LABEL_13:
        *(_QWORD *)(a2 + 80) = v19;
        goto LABEL_4;
      }
      if (((1 << v18) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v15 + 32 * v13 + 24);
        goto LABEL_4;
      }
      if (v18 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v19 = *(_DWORD **)(v15 + 32 * v13 + 24);
        if (v19)
          *v19 += 2;
        goto LABEL_13;
      }
    }
LABEL_4:
    v14 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v14;
    ++v13;
  }
  while (v17 == 82);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseExpression((uint64_t)&v46, a2);
  v22 = v48;
  if (v48)
  {
    if (v48 == 1)
    {
      v23 = v46;
      if (v46)
        *(_DWORD *)v46 += 2;
      *(_OWORD *)(a1 + 8) = v47;
      *(_QWORD *)a1 = v23;
      *(_DWORD *)(a1 + 24) = 1;
      return (_DWORD *)((uint64_t (*)(const char **, const char **))off_1E0FD71D8[v22])(&v43, &v46);
    }
LABEL_64:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x18250D3F0);
  }
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseCompoundStatement(&v43, a2);
  v24 = v45;
  if (v45)
  {
    if (v45 != 1)
      goto LABEL_64;
    v25 = v43;
    if (v43)
      *(_DWORD *)v43 += 2;
    *(_OWORD *)(a1 + 8) = v44;
    *(_QWORD *)a1 = v25;
    goto LABEL_30;
  }
  v42 = 0;
  if (*(_DWORD *)(a2 + 56) != 20)
  {
LABEL_60:
    v37 = *(_QWORD **)(a2 + 8);
    v38 = *(_DWORD *)(a2 + 96) - a5;
    v39 = a4;
    *(_QWORD *)&v40 = __PAIR64__(v38, a5);
    *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::IfStatement,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,std::reference_wrapper<WGSL::AST::CompoundStatement>,WGSL::AST::Statement *&,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,void>(v37, &v39, &v46, &v43, &v42, a3);
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_61;
  }
  v27 = *(_DWORD *)(a2 + 36);
  v28 = *(_DWORD *)(a2 + 40) + 1;
  v29 = 32 * v28;
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v28;
    if (v27 <= v28)
    {
      __break(0xC471u);
      JUMPOUT(0x18250D3F8);
    }
    v31 = *(_QWORD *)(a2 + 24);
    v32 = *(_DWORD *)(v31 + v29);
    *(_DWORD *)(a2 + 56) = v32;
    *v11 = *(_OWORD *)(v31 + v29 + 4);
    v33 = *(_DWORD *)(v31 + v29);
    if (v33 <= 8)
    {
      if (((1 << v33) & 0x38) != 0)
      {
        v34 = *(_DWORD **)(v31 + v29 + 24);
        goto LABEL_48;
      }
      if (((1 << v33) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v31 + v29 + 24);
      }
      else if (v33 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v34 = *(_DWORD **)(v31 + v29 + 24);
        if (v34)
          *v34 += 2;
LABEL_48:
        *(_QWORD *)(a2 + 80) = v34;
      }
    }
    v30 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v30;
    v29 += 32;
    ++v28;
    if (v32 == 82)
      continue;
    break;
  }
  if (v32 != 25)
  {
    WGSL::Parser<WGSL::Lexer<char16_t>>::parseCompoundStatement(&v39, a2);
    if (v41)
    {
      if (v41 != 1)
        goto LABEL_64;
      v35 = (int *)v39;
      if (v39)
        goto LABEL_57;
LABEL_53:
      *(_OWORD *)(a1 + 8) = v40;
      *(_QWORD *)a1 = 0;
LABEL_30:
      *(_DWORD *)(a1 + 24) = 1;
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseIfStatementWithAttributes(&v39);
  if (!v41)
  {
LABEL_59:
    v42 = v39;
    goto LABEL_60;
  }
  if (v41 != 1)
    goto LABEL_64;
  v35 = (int *)v39;
  if (!v39)
    goto LABEL_53;
LABEL_57:
  v36 = *v35;
  *v35 += 2;
  *(_OWORD *)(a1 + 8) = v40;
  *(_QWORD *)a1 = v35;
  *(_DWORD *)(a1 + 24) = 1;
  if (v36)
    *v35 = v36;
  else
    WTF::StringImpl::destroy();
LABEL_61:
  ((void (*)(uint64_t *, const char **))off_1E0FD7628[v24])(&v39, &v43);
  return (_DWORD *)((uint64_t (*)(const char **, const char **))off_1E0FD71D8[v22])(&v43, &v46);
}

void WGSL::Parser<WGSL::Lexer<char16_t>>::parseLHSExpression(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  char *v18;
  int v19;
  unsigned int v20;
  _OWORD *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  char *v35;
  _QWORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _DWORD *v46;
  _DWORD *v47;
  char *v48;
  int v49;
  _DWORD *v50;
  unint64_t v51;
  char *v52;
  __int128 v53;
  int v54;
  char *v55;
  __int128 v56;
  int v57;
  int v58;
  _DWORD *v59;
  _DWORD *v60;
  char *v61;
  __int128 v62;

  v4 = *(char **)(a2 + 88);
  v5 = *(unsigned int *)(a2 + 96);
  v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v6 + 1;
  if ((v6 + 1) >= 0x81)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_80;
  }
  v8 = *(_DWORD *)(a2 + 56);
  if (v8 == 76)
  {
    v9 = 2;
    goto LABEL_7;
  }
  if (v8 != 36)
  {
    if (v8 == 8)
    {
      WGSL::Parser<WGSL::Lexer<unsigned char>>::parseIdentifier((uint64_t)&v55, a2);
      if (v58)
      {
        if (v58 != 1)
          goto LABEL_88;
        v31 = v55;
        if (v55)
          *(_DWORD *)v55 += 2;
        v53 = v56;
        v52 = v31;
        v32 = 1;
        v54 = 1;
      }
      else
      {
        v36 = *(_QWORD **)(a2 + 8);
        v37 = *(_DWORD *)(a2 + 96) - v5;
        *(_QWORD *)&v62 = v4;
        *((_QWORD *)&v62 + 1) = __PAIR64__(v37, v5);
        v52 = (char *)WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v36, &v62, (uint64_t)&v55);
        v54 = 0;
        v32 = v58;
        if (v58 == -1)
          goto LABEL_73;
      }
      ((void (*)(__int128 *, char **))off_1E0FD6FE8[v32])(&v62, &v55);
      goto LABEL_73;
    }
    if (v8 != 67)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v33 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
      *(_QWORD *)&v53 = v4;
      *((_QWORD *)&v53 + 1) = v33;
      v54 = 1;
      goto LABEL_73;
    }
    v20 = *(_DWORD *)(a2 + 36);
    v21 = (_OWORD *)(a2 + 60);
    v22 = *(_DWORD *)(a2 + 40) + 1;
    while (1)
    {
      *(_DWORD *)(a2 + 40) = v22;
      if (v20 <= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x18250DA1CLL);
      }
      v24 = *(_QWORD *)(a2 + 24);
      v25 = v24 + 32 * v22;
      v26 = *(_DWORD *)v25;
      *(_DWORD *)(a2 + 56) = *(_DWORD *)v25;
      *v21 = *(_OWORD *)(v25 + 4);
      v27 = *(_DWORD *)v25;
      if (v27 > 8)
        goto LABEL_28;
      if (((1 << v27) & 0x38) != 0)
        break;
      if (((1 << v27) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v24 + 32 * v22 + 24);
      }
      else if (v27 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
        if (v28)
          *v28 += 2;
        goto LABEL_37;
      }
LABEL_28:
      v23 = *(_DWORD *)(a2 + 68);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
      *(_DWORD *)(a2 + 96) = v23;
      ++v22;
      if (v26 != 82)
      {
        WGSL::Parser<WGSL::Lexer<char16_t>>::parseLHSExpression(&v55, a2);
        v34 = v57;
        if (v57)
        {
          if (v57 == 1)
          {
            v35 = v55;
            if (v55)
              *(_DWORD *)v55 += 2;
            v53 = v56;
LABEL_71:
            v52 = v35;
            v54 = v34;
LABEL_72:
            ((void (*)(__int128 *, char **))off_1E0FD71D8[v34])(&v62, &v55);
LABEL_73:
            if (!v54)
            {
              WGSL::Parser<WGSL::Lexer<char16_t>>::parsePostfixExpression(a1, a2, v52, (unint64_t)v4, v5);
              v49 = v54;
              if (v54 == -1)
                goto LABEL_80;
LABEL_79:
              ((void (*)(char **, char **))off_1E0FD71D8[v49])(&v55, &v52);
              goto LABEL_80;
            }
            if (v54 == 1)
            {
              v48 = v52;
              if (v52)
                *(_DWORD *)v52 += 2;
              *(_OWORD *)(a1 + 8) = v53;
              *(_QWORD *)a1 = v48;
              v49 = 1;
              *(_DWORD *)(a1 + 24) = 1;
              goto LABEL_79;
            }
          }
LABEL_88:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_92:
          __break(0xC471u);
          JUMPOUT(0x18250DA14);
        }
        v38 = *(_DWORD *)(a2 + 56);
        if (v38 != 68)
        {
          WGSL::toString(68);
          WGSL::toString(v38);
          v52 = "Expected a ";
          *(_QWORD *)&v53 = 12;
          *(_QWORD *)&v62 = ", but got a ";
          *((_QWORD *)&v62 + 1) = 13;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v52, (uint64_t *)&v60, (uint64_t)&v62, (uint64_t *)&v59, &v61);
          if (v61)
          {
            v47 = v59;
            v59 = 0;
            if (v47)
            {
              if (*v47 == 2)
                WTF::StringImpl::destroy();
              else
                *v47 -= 2;
            }
            v50 = v60;
            v60 = 0;
            if (v50)
            {
              if (*v50 == 2)
                WTF::StringImpl::destroy();
              else
                *v50 -= 2;
            }
            v51 = v5 | ((unint64_t)(*(_DWORD *)(a2 + 96) - v5) << 32);
            v52 = v61;
            *(_QWORD *)&v53 = v4;
            *((_QWORD *)&v53 + 1) = v51;
            v54 = 1;
            v34 = v57;
            if (v57 != -1)
              goto LABEL_72;
            goto LABEL_73;
          }
          goto LABEL_92;
        }
        v39 = *(_DWORD *)(a2 + 36);
        v40 = *(_DWORD *)(a2 + 40) + 1;
        while (2)
        {
          *(_DWORD *)(a2 + 40) = v40;
          if (v39 <= v40)
          {
            __break(0xC471u);
            JUMPOUT(0x18250DA24);
          }
          v42 = *(_QWORD *)(a2 + 24);
          v43 = v42 + 32 * v40;
          v44 = *(_DWORD *)v43;
          *(_DWORD *)(a2 + 56) = *(_DWORD *)v43;
          *v21 = *(_OWORD *)(v43 + 4);
          v45 = *(_DWORD *)v43;
          if (v45 <= 8)
          {
            if (((1 << v45) & 0x38) != 0)
            {
              v46 = *(_DWORD **)(v42 + 32 * v40 + 24);
              goto LABEL_65;
            }
            if (((1 << v45) & 0xC4) != 0)
            {
              *(_QWORD *)(a2 + 80) = *(_QWORD *)(v42 + 32 * v40 + 24);
            }
            else if (v45 == 8)
            {
              *(_QWORD *)(a2 + 80) = 0;
              v46 = *(_DWORD **)(v42 + 32 * v40 + 24);
              if (v46)
                *v46 += 2;
LABEL_65:
              *(_QWORD *)(a2 + 80) = v46;
            }
          }
          v41 = *(_DWORD *)(a2 + 68);
          *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a2 + 96) = v41;
          ++v40;
          if (v44 != 82)
          {
            v35 = v55;
            goto LABEL_71;
          }
          continue;
        }
      }
    }
    v28 = *(_DWORD **)(v24 + 32 * v22 + 24);
LABEL_37:
    *(_QWORD *)(a2 + 80) = v28;
    goto LABEL_28;
  }
  v9 = 0;
LABEL_7:
  LOBYTE(v62) = v9;
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_DWORD *)(a2 + 40) + 1;
  do
  {
    *(_DWORD *)(a2 + 40) = v11;
    if (v10 <= v11)
      goto LABEL_92;
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v13 + 32 * v11;
    v15 = *(_DWORD *)v14;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)v14;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(v14 + 4);
    v16 = *(_DWORD *)v14;
    if (v16 <= 8)
    {
      if (((1 << v16) & 0x38) != 0)
      {
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
LABEL_18:
        *(_QWORD *)(a2 + 80) = v17;
        goto LABEL_9;
      }
      if (((1 << v16) & 0xC4) != 0)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 32 * v11 + 24);
        goto LABEL_9;
      }
      if (v16 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0;
        v17 = *(_DWORD **)(v13 + 32 * v11 + 24);
        if (v17)
          *v17 += 2;
        goto LABEL_18;
      }
    }
LABEL_9:
    v12 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 96) = v12;
    ++v11;
  }
  while (v15 == 82);
  WGSL::Parser<WGSL::Lexer<char16_t>>::parseLHSExpression(&v55, a2);
  if (!v57)
  {
    v29 = *(_QWORD **)(a2 + 8);
    v30 = *(_DWORD *)(a2 + 96) - v5;
    v52 = v4;
    *(_QWORD *)&v53 = __PAIR64__(v30, v5);
    *(_QWORD *)a1 = WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,std::reference_wrapper<WGSL::AST::Expression>,WGSL::AST::UnaryOperation &,void>(v29, &v52, &v55, (char *)&v62);
    *(_DWORD *)(a1 + 24) = 0;
    v19 = v57;
    if (v57 != -1)
      goto LABEL_39;
    goto LABEL_80;
  }
  if (v57 != 1)
    goto LABEL_88;
  v18 = v55;
  if (v55)
    *(_DWORD *)v55 += 2;
  *(_OWORD *)(a1 + 8) = v56;
  *(_QWORD *)a1 = v18;
  v19 = 1;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_39:
  ((void (*)(char **, char **))off_1E0FD71D8[v19])(&v52, &v55);
LABEL_80:
  *(_DWORD *)(a2 + 44) = v6;
}

WTF *WGSL::PointerRewriter::rewrite(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WTF **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD **v36;
  _DWORD *v37;
  WTF *result;
  void *v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD v43[2];

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = 0;
  v5 = *(unsigned int *)(a1 + 108);
  v40 = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 30)
    {
      __break(0xC471u);
      goto LABEL_44;
    }
    v39 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    memcpy(v39, *(const void **)(v3 + 96), 4 * *(unsigned int *)(v3 + 108));
    v6 = (WTF **)(v3 + 96);
    v7 = *(WTF **)(v3 + 96);
    if (v7)
      goto LABEL_4;
  }
  else
  {
    v39 = 0;
    v6 = (WTF **)(a1 + 96);
    v7 = *(WTF **)(a1 + 96);
    if (v7)
    {
LABEL_4:
      *(_QWORD *)(v3 + 96) = 0;
      *(_DWORD *)(v3 + 104) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  v41 = v4;
  *v6 = 0;
  v6[1] = 0;
  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v43, v3 + 40);
  v9 = a2[3];
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)a2;
    v11 = 8 * v9;
    do
    {
      v12 = *v10++;
      WGSL::AST::Visitor::visit((_BYTE *)v3, v12);
      ++*(_DWORD *)(v3 + 88);
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *(_DWORD *)(v3 + 108);
  if (v13 - 1 >= 0)
  {
    v42 = v3;
    while (*(_DWORD *)(v3 + 108) > --v13)
    {
      v22 = *((unsigned int *)*v6 + v13);
      v21 = a2[3];
      if (v21 <= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x18250DD00);
      }
      v23 = *(_QWORD *)(v3 + 80);
      v20 = *(uint64_t **)a2;
      v24 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v22);
      v25 = (_QWORD *)(v23 + 400);
      v17 = *(unsigned int *)(v23 + 412);
      if ((_DWORD)v17 == *(_DWORD *)(v23 + 408))
      {
        v14 = v17 + (v17 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v17 + 1)
          v16 = v17 + 1;
        else
          v16 = v15;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v25, v16);
        v17 = *(unsigned int *)(v23 + 412);
        v18 = *(_QWORD *)(v23 + 400) + 32 * v17;
        v19 = operator new(0x20uLL);
        *v19 = &off_1E0FD78B0;
        v19[1] = a2;
        v19[2] = v22;
        v19[3] = v24;
        *(_QWORD *)(v18 + 24) = v19;
        v20 = *(uint64_t **)a2;
        v21 = a2[3];
      }
      else
      {
        v26 = v6;
        v27 = *v25 + 32 * v17;
        v28 = operator new(0x20uLL);
        *v28 = &off_1E0FD78B0;
        v28[1] = a2;
        v28[2] = v22;
        v28[3] = v24;
        *(_QWORD *)(v27 + 24) = v28;
        v6 = v26;
        v3 = v42;
      }
      *(_DWORD *)(v23 + 412) = v17 + 1;
      memmove(&v20[v22], &v20[v22 + 1], 8 * v21 - (8 * v22 + 8));
      --a2[3];
      if (v13 <= 0)
        goto LABEL_22;
    }
    __break(0xC471u);
LABEL_44:
    JUMPOUT(0x18250DCF8);
  }
LABEL_22:
  v29 = v43[0];
  *(_QWORD *)v43[0] = v43[1];
  v30 = *(unsigned int *)(v29 + 20);
  if (!(_DWORD)v30)
  {
    __break(0xC471u);
    JUMPOUT(0x18250DD08);
  }
  v31 = v30 - 1;
  v32 = *(_QWORD *)(v29 + 8);
  v33 = *(_QWORD *)(v32 + 8 * v31);
  *(_QWORD *)(v32 + 8 * v31) = 0;
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 8);
    if (v34)
    {
      v35 = *(unsigned int *)(v34 - 4);
      if ((_DWORD)v35)
      {
        v36 = *(_DWORD ***)(v33 + 8);
        do
        {
          v37 = *v36;
          if (*v36 != (_DWORD *)-1)
          {
            *v36 = 0;
            if (v37)
            {
              if (*v37 == 2)
                WTF::StringImpl::destroy();
              else
                *v37 -= 2;
            }
          }
          v36 += 2;
          --v35;
        }
        while (v35);
      }
      WTF::fastFree((WTF *)(v34 - 16), v8);
    }
    MEMORY[0x186DAB2A8](v33, 0x72C404B2EE363);
  }
  *(_DWORD *)(v29 + 20) = v31;
  result = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 96) = 0;
    *(_DWORD *)(v3 + 104) = 0;
    result = (WTF *)WTF::fastFree(result, v8);
  }
  *(_QWORD *)(v3 + 96) = v39;
  *(_DWORD *)(v3 + 104) = v40;
  *(_DWORD *)(v3 + 108) = v40;
  *(_DWORD *)(v3 + 88) = v41;
  return result;
}

WTF *WGSL::PointerRewriter::visit(WGSL::PointerRewriter *this, WGSL::AST::CompoundStatement *a2)
{
  WTF *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  _QWORD v15[2];

  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v15, (uint64_t)this + 40);
  result = WGSL::PointerRewriter::rewrite((uint64_t)this, (unsigned int *)a2 + 10);
  v6 = v15[0];
  *(_QWORD *)v15[0] = v15[1];
  v7 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v7)
  {
    v8 = v7 - 1;
    v9 = *(_QWORD *)(v6 + 8);
    v10 = *(_QWORD *)(v9 + 8 * v8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(unsigned int *)(v11 - 4);
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD ***)(v10 + 8);
          do
          {
            v14 = *v13;
            if (*v13 != (_DWORD *)-1)
            {
              *v13 = 0;
              if (v14)
              {
                if (*v14 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v14 -= 2;
              }
            }
            v13 += 2;
            --v12;
          }
          while (v12);
        }
        WTF::fastFree((WTF *)(v11 - 16), v5);
      }
      result = (WTF *)MEMORY[0x186DAB2A8](v10, 0x72C404B2EE363);
    }
    *(_DWORD *)(v6 + 20) = v8;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF *WGSL::PointerRewriter::visit(WGSL::PointerRewriter *this, WGSL::AST::VariableStatement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  if (*((_BYTE *)this + 32))
  {
    v4 = *((_QWORD *)a2 + 3);
    v5 = *(_QWORD *)(v4 + 120);
    v12 = v5;
    if (!v5)
      goto LABEL_9;
  }
  else
  {
    (*(void (**)(WGSL::PointerRewriter *, _QWORD))(*(_QWORD *)this + 56))(this, *((_QWORD *)a2 + 3));
    v4 = *((_QWORD *)a2 + 3);
    v5 = *(_QWORD *)(v4 + 120);
    v12 = v5;
    if (!v5)
    {
LABEL_9:
      v11 = 0;
      return WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>((uint64_t)v13, (uint64_t *)(*((_QWORD *)this + 5) + 8), (const WTF::StringImpl **)(v4 + 48), &v11);
    }
  }
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6 || *(_DWORD *)(v6 + 48) != 11)
    goto LABEL_9;
  result = WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>((uint64_t)v13, (uint64_t *)(*((_QWORD *)this + 5) + 8), (const WTF::StringImpl **)(v4 + 48), &v12);
  v8 = *((unsigned int *)this + 27);
  if ((_DWORD)v8 == *((_DWORD *)this + 26))
  {
    result = (WTF *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 96, v8 + 1, (unint64_t)this + 88);
    v8 = *((unsigned int *)this + 27);
    v9 = *((_QWORD *)this + 12);
    v10 = *(_DWORD *)result;
  }
  else
  {
    v9 = *((_QWORD *)this + 12);
    v10 = *((_DWORD *)this + 22);
  }
  *(_DWORD *)(v9 + 4 * v8) = v10;
  ++*((_DWORD *)this + 27);
  return result;
}

unint64_t WGSL::PointerRewriter::visit(unint64_t this, WGSL::AST::PhonyAssignmentStatement *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = this;
  v3 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 24);
  if (v3 && *(_DWORD *)(v3 + 48) == 11)
  {
    v4 = *(unsigned int *)(this + 108);
    if ((_DWORD)v4 == *(_DWORD *)(this + 104))
    {
      this = WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this + 96, v4 + 1, this + 88);
      v4 = *(unsigned int *)(v2 + 108);
      v5 = *(_QWORD *)(v2 + 96);
      v6 = *(_DWORD *)this;
    }
    else
    {
      v5 = *(_QWORD *)(this + 96);
      v6 = *(_DWORD *)(this + 88);
    }
    *(_DWORD *)(v5 + 4 * v4) = v6;
    ++*(_DWORD *)(v2 + 108);
  }
  else if (!*(_BYTE *)(this + 32))
  {
    return (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 208))(this);
  }
  return this;
}

WTF *WGSL::PointerRewriter::visit(WGSL::PointerRewriter *this, WGSL::AST::LoopStatement *a2)
{
  char *v4;
  WTF *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  _DWORD *v24;
  _QWORD v25[2];
  _QWORD v26[2];

  v4 = (char *)this + 40;
  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v26, (uint64_t)this + 40);
  result = WGSL::PointerRewriter::rewrite((uint64_t)this, (unsigned int *)a2 + 10);
  if (*((_BYTE *)a2 + 96))
  {
    WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v25, (uint64_t)v4);
    if (!*((_BYTE *)a2 + 96))
    {
      __break(1u);
      goto LABEL_32;
    }
    result = WGSL::PointerRewriter::rewrite((uint64_t)this, (unsigned int *)a2 + 14);
    v7 = v25[0];
    *(_QWORD *)v25[0] = v25[1];
    v8 = *(unsigned int *)(v7 + 20);
    if (!(_DWORD)v8)
    {
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x18250E16CLL);
    }
    v9 = v8 - 1;
    v10 = *(_QWORD *)(v7 + 8);
    v11 = *(_QWORD *)(v10 + 8 * v9);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(unsigned int *)(v12 - 4);
        if ((_DWORD)v13)
        {
          v14 = *(_DWORD ***)(v11 + 8);
          do
          {
            v15 = *v14;
            if (*v14 != (_DWORD *)-1)
            {
              *v14 = 0;
              if (v15)
              {
                if (*v15 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v15 -= 2;
              }
            }
            v14 += 2;
            --v13;
          }
          while (v13);
        }
        WTF::fastFree((WTF *)(v12 - 16), v6);
      }
      result = (WTF *)MEMORY[0x186DAB2A8](v11, 0x72C404B2EE363);
    }
    *(_DWORD *)(v7 + 20) = v9;
  }
  v16 = v26[0];
  *(_QWORD *)v26[0] = v26[1];
  v17 = *(unsigned int *)(v16 + 20);
  if (!(_DWORD)v17)
    goto LABEL_32;
  v18 = v17 - 1;
  v19 = *(_QWORD *)(v16 + 8);
  v20 = *(_QWORD *)(v19 + 8 * v18);
  *(_QWORD *)(v19 + 8 * v18) = 0;
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = *(unsigned int *)(v21 - 4);
      if ((_DWORD)v22)
      {
        v23 = *(_DWORD ***)(v20 + 8);
        do
        {
          v24 = *v23;
          if (*v23 != (_DWORD *)-1)
          {
            *v23 = 0;
            if (v24)
            {
              if (*v24 == 2)
                WTF::StringImpl::destroy();
              else
                *v24 -= 2;
            }
          }
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      WTF::fastFree((WTF *)(v21 - 16), v6);
    }
    result = (WTF *)MEMORY[0x186DAB2A8](v20, 0x72C404B2EE363);
  }
  *(_DWORD *)(v16 + 20) = v18;
  return result;
}

uint64_t WGSL::PointerRewriter::visit(uint64_t this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WGSL::AST::IdentifierExpression *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WGSL::AST::IdentifierExpression *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  _OWORD *v50;
  _OWORD *v51;
  int v52;
  _DWORD *v53;
  _DWORD *v54;
  char *v55;
  _DWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  _BYTE v78[16];
  int v79;
  unsigned __int8 v80;
  void (**v81)(WGSL::AST::Identifier *__hidden);
  __int128 v82;
  _DWORD *v83;
  WGSL::AST::IdentifierExpression *v84;
  void (**v85)(WGSL::AST::IdentifierExpression *__hidden);
  __int128 v86;
  uint64_t v87;
  _BYTE v88[16];
  int v89;
  unsigned __int8 v90;
  void (**v91)(WGSL::AST::Identifier *__hidden);
  __int128 v92;
  _DWORD *v93;
  _BYTE v94[9];

  v4 = this;
  v5 = *(_QWORD **)(this + 40);
  while (2)
  {
    v6 = v5[1];
    if (!v6)
      goto LABEL_3;
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
    v9 = *((_DWORD *)v8 + 4);
    if (v9 < 0x100)
      v10 = WTF::StringImpl::hashSlowCase(v8);
    else
      v10 = v9 >> 8;
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v7;
      this = *(_QWORD *)(v6 + 16 * v12);
      if (this == -1)
        goto LABEL_9;
      if (!this)
        break;
      this = WTF::equal((WTF *)this, *((const WTF::StringImpl **)a2 + 11), a3);
      if ((this & 1) != 0)
      {
        v13 = v6 + 16 * v12;
        v14 = v5[1];
        if (v14)
        {
          v15 = *(unsigned int *)(v14 - 4);
          goto LABEL_2;
        }
        goto LABEL_17;
      }
LABEL_9:
      ++i;
    }
    v14 = v5[1];
    if (v14)
    {
      v15 = *(unsigned int *)(v14 - 4);
      v13 = v14 + 16 * v15;
LABEL_2:
      if (v13 != v14 + 16 * v15)
      {
LABEL_17:
        v16 = *(_QWORD *)(v13 + 8);
        if (!v16)
          return this;
        v17 = *(_QWORD *)(v4 + 80);
        v18 = *(_QWORD *)(v17 + 312);
        if ((unint64_t)(*(_QWORD *)(v17 + 320) - v18) <= 0x47)
        {
          v65 = WTF::fastMalloc((WTF *)0x4000);
          v84 = (WGSL::AST::IdentifierExpression *)v65;
          v67 = *(unsigned int *)(v17 + 340);
          if ((_DWORD)v67 == *(_DWORD *)(v17 + 336))
          {
            v68 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 328, v67 + 1, (unint64_t)&v84);
            v67 = *(unsigned int *)(v17 + 340);
            v69 = *(_QWORD *)(v17 + 328);
            v70 = *(_QWORD *)v68;
            *(_QWORD *)v68 = 0;
            *(_QWORD *)(v69 + 8 * v67) = v70;
            v71 = v84;
          }
          else
          {
            v72 = v65;
            v71 = 0;
            v73 = *(_QWORD *)(v17 + 328);
            v84 = 0;
            *(_QWORD *)(v73 + 8 * v67) = v72;
          }
          *(_DWORD *)(v17 + 340) = v67 + 1;
          WTF::fastFree(v71, v66);
          v74 = *(unsigned int *)(v17 + 340);
          if (!(_DWORD)v74)
            goto LABEL_105;
          v18 = *(_QWORD *)(*(_QWORD *)(v17 + 328) + 8 * v74 - 8);
          *(_QWORD *)(v17 + 312) = v18;
          *(_QWORD *)(v17 + 320) = v18 + 0x4000;
        }
        *(_OWORD *)(v18 + 8) = *(_OWORD *)((char *)a2 + 8);
        *(_QWORD *)(v18 + 24) = 0;
        *(_BYTE *)(v18 + 32) = 0;
        *(_BYTE *)(v18 + 56) = 0;
        *(_QWORD *)v18 = off_1E0FD4020;
        *(_QWORD *)(v18 + 64) = v16;
        *(_QWORD *)(v18 + 24) = *(_QWORD *)(v16 + 24);
        *(_QWORD *)(v17 + 312) += 72;
        v19 = *(unsigned int *)(v17 + 356);
        if ((_DWORD)v19 != *(_DWORD *)(v17 + 352))
        {
          v26 = (_QWORD *)(*(_QWORD *)(v17 + 344) + 8 * v19);
          goto LABEL_33;
        }
        v20 = v19 + (v19 >> 2);
        if (v20 >= 0x10)
          v21 = v20 + 1;
        else
          v21 = 16;
        if (v21 <= v19 + 1)
          v22 = v19 + 1;
        else
          v22 = v21;
        if (!(v22 >> 29))
        {
          v23 = *(void **)(v17 + 344);
          v24 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
          *(_DWORD *)(v17 + 352) = v22;
          *(_QWORD *)(v17 + 344) = v24;
          memcpy(v24, v23, 8 * v19);
          if (v23)
          {
            if (*(void **)(v17 + 344) == v23)
            {
              *(_QWORD *)(v17 + 344) = 0;
              *(_DWORD *)(v17 + 352) = 0;
            }
            WTF::fastFree((WTF *)v23, v25);
          }
          v19 = *(unsigned int *)(v17 + 356);
          v26 = (_QWORD *)(*(_QWORD *)(v17 + 344) + 8 * v19);
LABEL_33:
          *v26 = v18;
          *(_DWORD *)(v17 + 356) = v19 + 1;
          v27 = *(_QWORD *)(v4 + 80);
          v76 = *(_OWORD *)((char *)a2 + 8);
          v77 = *((_QWORD *)a2 + 3);
          v78[0] = 0;
          v80 = 0;
          v28 = *((unsigned __int8 *)a2 + 56);
          if (*((_BYTE *)a2 + 56))
          {
            v79 = -1;
            v17 = *((unsigned int *)a2 + 12);
            if ((_DWORD)v17 != -1)
            {
              ((void (*)(WGSL::AST::IdentifierExpression **, _BYTE *, char *))off_1E0FD79E0[v17])(&v84, v78, (char *)a2 + 32);
              v79 = v17;
            }
            v80 = 1;
          }
          v82 = *(_OWORD *)((char *)a2 + 72);
          v81 = &off_1E0FD2F10;
          v29 = (_DWORD *)*((_QWORD *)a2 + 11);
          if (v29)
            *v29 += 2;
          v30 = (uint64_t *)(v27 + 400);
          v83 = v29;
          v31 = *(unsigned int *)(v27 + 412);
          if ((_DWORD)v31 == *(_DWORD *)(v27 + 408))
          {
            v32 = v31 + (v31 >> 2);
            if (v32 >= 0x10)
              v33 = v32 + 1;
            else
              v33 = 16;
            if (v33 <= v31 + 1)
              v34 = v31 + 1;
            else
              v34 = v33;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v30, v34);
            v35 = *(unsigned int *)(v27 + 412);
            v36 = *(_QWORD *)(v27 + 400);
            v86 = v76;
            v37 = a2;
            v38 = v77;
            v84 = a2;
            v85 = off_1E0FD2EC0;
            v87 = v77;
            v88[0] = 0;
            v90 = 0;
            v39 = v80;
            if (v80)
            {
              v89 = -1;
              v28 = v79;
              if (v79 != -1)
              {
                v40 = v35;
                v41 = v36;
                ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD7940[v79])(v94, v88, v78);
                v36 = v41;
                v35 = v40;
                v89 = v28;
                v37 = v84;
                v38 = v87;
              }
              v75 = 1;
              v90 = 1;
            }
            else
            {
              v75 = 0;
            }
            v92 = v82;
            v85 = off_1E0FD2E98;
            v91 = &off_1E0FD2F10;
            v56 = v83;
            v83 = 0;
            v93 = v56;
            v57 = v36 + 32 * v35;
            *(_QWORD *)(v57 + 24) = 0;
            v58 = (_QWORD *)(v57 + 24);
            v59 = (char *)operator new(0x70uLL);
            v60 = v59;
            *(_QWORD *)v59 = off_1E0FD79A8;
            *((_QWORD *)v59 + 1) = v37;
            *(_OWORD *)(v59 + 24) = v86;
            *((_QWORD *)v59 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v59 + 5) = v38;
            v59[48] = 0;
            v59[72] = 0;
            if (v39)
            {
              *((_DWORD *)v59 + 16) = -1;
              v50 = (_OWORD *)((char *)a2 + 8);
              v61 = v75;
              if (v28 != -1)
              {
                ((void (*)(_BYTE *, char *, _BYTE *))off_1E0FD7940[v28])(v94, v59 + 48, v88);
                *((_DWORD *)v60 + 16) = v28;
                v56 = v93;
                v61 = v90;
              }
              v60[72] = 1;
              v51 = (_OWORD *)(v18 + 8);
            }
            else
            {
              v51 = (_OWORD *)(v18 + 8);
              v50 = (_OWORD *)((char *)a2 + 8);
              v61 = v75;
            }
            *((_QWORD *)v60 + 2) = off_1E0FD2E98;
            *(_OWORD *)(v60 + 88) = v92;
            *((_QWORD *)v60 + 10) = &off_1E0FD2F10;
            *((_QWORD *)v60 + 13) = v56;
            *v58 = v60;
            v93 = 0;
            v91 = &off_1E0FD2F10;
            v85 = off_1E0FD2EC0;
            if (v61 && v89 != -1)
              ((void (*)(_BYTE *, _BYTE *))off_1E0FD78E8[v89])(v94, v88);
            ++*(_DWORD *)(v27 + 412);
            v55 = (char *)a2 + 32;
LABEL_77:
            v62 = v83;
            v81 = &off_1E0FD2F10;
            v83 = 0;
            if (v62)
            {
              if (*v62 == 2)
              {
                WTF::StringImpl::destroy();
                if (!v80)
                  goto LABEL_85;
LABEL_83:
                if (v79 != -1)
                  ((void (*)(WGSL::AST::IdentifierExpression **, _BYTE *))off_1E0FD78E8[v79])(&v84, v78);
LABEL_85:
                *((_QWORD *)a2 + 8) = &off_1E0FD2F10;
                this = *((_QWORD *)a2 + 11);
                *((_QWORD *)a2 + 11) = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                  {
                    this = WTF::StringImpl::destroy();
                    *(_QWORD *)a2 = off_1E0FD2EC0;
                    if (!*((_BYTE *)a2 + 56))
                    {
LABEL_94:
                      *(_QWORD *)a2 = &off_1E0FD2EE8;
                      *v50 = *v51;
                      *(_QWORD *)a2 = off_1E0FD2EC0;
                      *((_QWORD *)a2 + 3) = *(_QWORD *)(v18 + 24);
                      *((_BYTE *)a2 + 32) = 0;
                      *((_BYTE *)a2 + 56) = 0;
                      if (*(_BYTE *)(v18 + 56))
                      {
                        *((_DWORD *)a2 + 12) = -1;
                        v64 = *(unsigned int *)(v18 + 48);
                        if ((_DWORD)v64 != -1)
                        {
                          this = ((uint64_t (*)(WGSL::AST::IdentifierExpression **, char *, uint64_t))off_1E0FD79E0[v64])(&v84, v55, v18 + 32);
                          *((_DWORD *)a2 + 12) = v64;
                        }
                        *((_BYTE *)a2 + 56) = 1;
                      }
                      *(_QWORD *)a2 = off_1E0FD4020;
                      *((_QWORD *)a2 + 8) = *(_QWORD *)(v18 + 64);
                      return this;
                    }
LABEL_91:
                    v63 = *((unsigned int *)a2 + 12);
                    if ((_DWORD)v63 != -1)
                      this = ((uint64_t (*)(WGSL::AST::IdentifierExpression **, char *))off_1E0FD78E8[v63])(&v84, v55);
                    *((_DWORD *)a2 + 12) = -1;
                    goto LABEL_94;
                  }
                  *(_DWORD *)this -= 2;
                }
                *(_QWORD *)a2 = off_1E0FD2EC0;
                if (!*((_BYTE *)a2 + 56))
                  goto LABEL_94;
                goto LABEL_91;
              }
              *v62 -= 2;
            }
            if (!v80)
              goto LABEL_85;
            goto LABEL_83;
          }
          v42 = *v30;
          v86 = v76;
          v43 = a2;
          v44 = v77;
          v84 = a2;
          v85 = off_1E0FD2EC0;
          v87 = v77;
          v88[0] = 0;
          v90 = 0;
          if (v28)
          {
            v89 = -1;
            if ((_DWORD)v17 != -1)
            {
              v45 = v42;
              ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD7940[v17])(v94, v88, v78);
              v42 = v45;
              v89 = v17;
              v29 = v83;
              v43 = v84;
              v44 = v87;
            }
            v90 = 1;
          }
          v92 = v82;
          v85 = off_1E0FD2E98;
          v91 = &off_1E0FD2F10;
          v83 = 0;
          v93 = v29;
          v46 = v42 + 32 * v31;
          *(_QWORD *)(v46 + 24) = 0;
          v47 = (_QWORD *)(v46 + 24);
          v48 = (char *)operator new(0x70uLL);
          v49 = v48;
          *(_QWORD *)v48 = off_1E0FD79A8;
          *((_QWORD *)v48 + 1) = v43;
          *(_OWORD *)(v48 + 24) = v86;
          *((_QWORD *)v48 + 2) = off_1E0FD2EC0;
          *((_QWORD *)v48 + 5) = v44;
          v48[48] = 0;
          v48[72] = 0;
          v51 = (_OWORD *)(v18 + 8);
          v50 = (_OWORD *)((char *)a2 + 8);
          if (v28)
          {
            *((_DWORD *)v48 + 16) = -1;
            v52 = v89;
            if (v89 != -1)
            {
              ((void (*)(_BYTE *, char *, _BYTE *))off_1E0FD7940[v89])(v94, v48 + 48, v88);
              *((_DWORD *)v49 + 16) = v52;
            }
            v49[72] = 1;
          }
          *((_QWORD *)v49 + 2) = off_1E0FD2E98;
          *(_OWORD *)(v49 + 88) = v92;
          *((_QWORD *)v49 + 10) = &off_1E0FD2F10;
          v53 = v93;
          v93 = 0;
          *((_QWORD *)v49 + 13) = v53;
          *v47 = v49;
          v54 = v93;
          v91 = &off_1E0FD2F10;
          v93 = 0;
          v55 = (char *)a2 + 32;
          if (v54)
          {
            if (*v54 == 2)
            {
              WTF::StringImpl::destroy();
              v85 = off_1E0FD2EC0;
              if (!v90)
              {
LABEL_76:
                ++*(_DWORD *)(v27 + 412);
                goto LABEL_77;
              }
LABEL_74:
              if (v89 != -1)
                ((void (*)(_BYTE *, _BYTE *))off_1E0FD78E8[v89])(v94, v88);
              goto LABEL_76;
            }
            *v54 -= 2;
          }
          v85 = off_1E0FD2EC0;
          if (!v90)
            goto LABEL_76;
          goto LABEL_74;
        }
LABEL_105:
        __break(0xC471u);
        JUMPOUT(0x18250EA48);
      }
    }
LABEL_3:
    v5 = (_QWORD *)*v5;
    if (v5)
      continue;
    return this;
  }
}

uint64_t WGSL::PointerRewriter::visit(uint64_t this, WGSL::AST::UnaryExpression *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WGSL::AST::UnaryExpression *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WGSL::AST::UnaryExpression *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[16];
  int v39;
  unsigned __int8 v40;
  uint64_t v41;
  char v42;
  WGSL::AST::UnaryExpression *v43;
  void (**v44)(WGSL::AST::Expression *__hidden);
  __int128 v45;
  uint64_t v46;
  _BYTE v47[16];
  int v48;
  unsigned __int8 v49;
  uint64_t v50;
  char v51;
  _BYTE v52[9];

  v4 = this;
  if (*(_BYTE *)(this + 32))
  {
    if (*((_BYTE *)a2 + 72) != 2)
      return this;
  }
  else
  {
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 8));
    if (*((_BYTE *)a2 + 72) != 2)
      return this;
  }
  v5 = (_QWORD *)*((_QWORD *)a2 + 8);
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 16))(v5) == 23)
  {
    while ((*(unsigned int (**)(_QWORD *))(*v5 + 16))(v5) == 23)
    {
      v5 = (_QWORD *)v5[8];
      if ((*(unsigned int (**)(_QWORD *))(*v5 + 16))(v5) != 23)
        goto LABEL_8;
    }
    this = 96;
    __break(0xC471u);
  }
  else
  {
LABEL_8:
    this = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    if ((_DWORD)this == 26 && !*((_BYTE *)v5 + 72))
    {
      v6 = *(_QWORD *)(v4 + 80);
      v36 = *(_OWORD *)((char *)a2 + 8);
      v37 = *((_QWORD *)a2 + 3);
      v35 = v5[8];
      v33 = (char *)a2 + 32;
      v38[0] = 0;
      v40 = 0;
      v7 = *((unsigned __int8 *)a2 + 56);
      if (*((_BYTE *)a2 + 56))
      {
        v39 = -1;
        v2 = *((unsigned int *)a2 + 12);
        if ((_DWORD)v2 != -1)
        {
          ((void (*)(WGSL::AST::UnaryExpression **, _BYTE *, char *))off_1E0FD79E0[v2])(&v43, v38, v33);
          v39 = v2;
        }
        v40 = 1;
      }
      v8 = (uint64_t *)(v6 + 400);
      v41 = *((_QWORD *)a2 + 8);
      v42 = *((_BYTE *)a2 + 72);
      v9 = *(unsigned int *)(v6 + 412);
      v34 = v6;
      if ((_DWORD)v9 == *(_DWORD *)(v6 + 408))
      {
        v10 = v9 + (v9 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= v9 + 1)
          v12 = v9 + 1;
        else
          v12 = v11;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v8, v12);
        v13 = *(unsigned int *)(v6 + 412);
        v14 = *(_QWORD *)(v6 + 400);
        v45 = v36;
        v15 = a2;
        v16 = v37;
        v43 = a2;
        v44 = off_1E0FD2EC0;
        v46 = v37;
        v47[0] = 0;
        v49 = 0;
        v17 = v40;
        if (v40)
        {
          v48 = -1;
          LODWORD(v6) = v39;
          if (v39 != -1)
          {
            v18 = v13;
            ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD7940[v39])(v52, v47, v38);
            v13 = v18;
            v48 = v6;
            v15 = v43;
            v16 = v46;
          }
          v19 = 1;
          v49 = 1;
        }
        else
        {
          v19 = 0;
        }
        v44 = off_1E0FD3140;
        v50 = v41;
        v51 = v42;
        v25 = v14 + 32 * v13;
        *(_QWORD *)(v25 + 24) = 0;
        v26 = (uint64_t *)(v25 + 24);
        this = (uint64_t)operator new(0x60uLL);
        v27 = this;
        *(_QWORD *)this = off_1E0FD7A48;
        *(_QWORD *)(this + 8) = v15;
        *(_OWORD *)(this + 24) = v45;
        *(_QWORD *)(this + 16) = off_1E0FD2EC0;
        *(_QWORD *)(this + 40) = v16;
        *(_BYTE *)(this + 48) = 0;
        *(_BYTE *)(this + 72) = 0;
        if (v17)
        {
          *(_DWORD *)(this + 64) = -1;
          if ((_DWORD)v6 != -1)
          {
            this = ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *))off_1E0FD7940[v6])(v52, this + 48, v47);
            *(_DWORD *)(v27 + 64) = v6;
            v19 = v49;
          }
          *(_BYTE *)(v27 + 72) = 1;
          *(_QWORD *)(v27 + 16) = off_1E0FD3140;
          *(_QWORD *)(v27 + 80) = v50;
          *(_BYTE *)(v27 + 88) = v51;
          *v26 = v27;
          v44 = off_1E0FD2EC0;
          if (v19 && v48 != -1)
            this = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD78E8[v48])(v52, v47);
        }
        else
        {
          *(_QWORD *)(this + 16) = off_1E0FD3140;
          *(_QWORD *)(this + 80) = v50;
          *(_BYTE *)(this + 88) = v51;
          *v26 = this;
        }
        v31 = v35;
        ++*(_DWORD *)(v34 + 412);
      }
      else
      {
        v20 = *v8;
        v45 = v36;
        v21 = a2;
        v22 = v37;
        v43 = a2;
        v44 = off_1E0FD2EC0;
        v46 = v37;
        v47[0] = 0;
        v49 = 0;
        if (v7)
        {
          v48 = -1;
          if ((_DWORD)v2 != -1)
          {
            v23 = v20;
            ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD7940[v2])(v52, v47, v38);
            v20 = v23;
            v48 = v2;
            v21 = v43;
            v22 = v46;
          }
          v24 = 1;
          v49 = 1;
        }
        else
        {
          v24 = 0;
        }
        v44 = off_1E0FD3140;
        v50 = v41;
        v51 = v42;
        v28 = v20 + 32 * v9;
        *(_QWORD *)(v28 + 24) = 0;
        v29 = (uint64_t *)(v28 + 24);
        this = (uint64_t)operator new(0x60uLL);
        v30 = this;
        *(_QWORD *)this = off_1E0FD7A48;
        *(_QWORD *)(this + 8) = v21;
        *(_OWORD *)(this + 24) = v45;
        *(_QWORD *)(this + 16) = off_1E0FD2EC0;
        *(_QWORD *)(this + 40) = v22;
        *(_BYTE *)(this + 48) = 0;
        *(_BYTE *)(this + 72) = 0;
        if (v7)
        {
          *(_DWORD *)(this + 64) = -1;
          if ((_DWORD)v2 != -1)
          {
            this = ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *))off_1E0FD7940[v2])(v52, this + 48, v47);
            *(_DWORD *)(v30 + 64) = v2;
            v24 = v49;
          }
          *(_BYTE *)(v30 + 72) = 1;
          *(_QWORD *)(v30 + 16) = off_1E0FD3140;
          *(_QWORD *)(v30 + 80) = v50;
          *(_BYTE *)(v30 + 88) = v51;
          *v29 = v30;
          v44 = off_1E0FD2EC0;
          v31 = v35;
          if (v24)
          {
            if (v48 != -1)
              this = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD78E8[v48])(v52, v47);
            v48 = -1;
          }
        }
        else
        {
          *(_QWORD *)(this + 16) = off_1E0FD3140;
          *(_QWORD *)(this + 80) = v50;
          *(_BYTE *)(this + 88) = v51;
          *v29 = this;
          v44 = off_1E0FD2EC0;
          v31 = v35;
        }
        ++*(_DWORD *)(v34 + 412);
      }
      if (v40 && v39 != -1)
        this = ((uint64_t (*)(WGSL::AST::UnaryExpression **, _BYTE *))off_1E0FD78E8[v39])(&v43, v38);
      *(_QWORD *)a2 = off_1E0FD2EC0;
      if (*((_BYTE *)a2 + 56))
      {
        v32 = *((unsigned int *)a2 + 12);
        if ((_DWORD)v32 != -1)
          this = ((uint64_t (*)(WGSL::AST::UnaryExpression **, char *))off_1E0FD78E8[v32])(&v43, v33);
        *((_DWORD *)a2 + 12) = -1;
      }
      *(_OWORD *)((char *)a2 + 8) = *(_OWORD *)(v31 + 8);
      *((_QWORD *)a2 + 3) = 0;
      *((_BYTE *)a2 + 32) = 0;
      *((_BYTE *)a2 + 56) = 0;
      *(_QWORD *)a2 = off_1E0FD4020;
      *((_QWORD *)a2 + 8) = v31;
      *((_QWORD *)a2 + 3) = *(_QWORD *)(v31 + 24);
    }
  }
  return this;
}

uint64_t WGSL::rewritePointers(uint64_t **this, WGSL::ShaderModule *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (**v12)(WGSL::PointerRewriter *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  WGSL *v18;
  int v19;
  WTF *v20;
  uint64_t v21;

  v14 = 0u;
  v13 = 0u;
  v15 = 0uLL;
  v17 = 0;
  v16 = 0uLL;
  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope((_QWORD *)&v16 + 1, (uint64_t)&v15);
  v12 = &off_1E0FD7668;
  v18 = (WGSL *)this;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v4 = *((unsigned int *)this + 23);
  if ((_DWORD)v4 && !BYTE8(v14))
  {
    v8 = this[10];
    v9 = 8 * v4 - 8;
LABEL_9:
    ((void (*)(_BYTE *, uint64_t))v12[3])(&v12, *v8);
    while (v9)
    {
      ++v8;
      v9 -= 8;
      if (!BYTE8(v14))
        goto LABEL_9;
    }
  }
  v5 = *((unsigned int *)this + 19);
  if ((_DWORD)v5 && !BYTE8(v14))
  {
    v10 = this[8];
    v11 = 8 * v5 - 8;
LABEL_14:
    ((void (*)(_BYTE *, uint64_t))v12[5])(&v12, *v10);
    while (v11)
    {
      ++v10;
      v11 -= 8;
      if (!BYTE8(v14))
        goto LABEL_14;
    }
  }
  v12 = &off_1E0FD7668;
  v6 = v20;
  if (v20)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    WTF::fastFree(v6, v3);
  }
  return WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor((uint64_t)&v12, v3);
}

void WGSL::PointerRewriter::~PointerRewriter(WGSL::PointerRewriter *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E0FD7668;
  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor((uint64_t)this, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = &off_1E0FD7668;
  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor((uint64_t)this, a2);
  JUMPOUT(0x186DAB2A8);
}

_BYTE *WGSL::AST::ScopedVisitor<WGSL::AST::Expression *>::visit(_BYTE *a1, Function *a2)
{
  _BYTE *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  _QWORD v15[2];

  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v15, (uint64_t)(a1 + 40));
  result = WGSL::AST::Visitor::visit(a1, a2);
  v6 = v15[0];
  *(_QWORD *)v15[0] = v15[1];
  v7 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v7)
  {
    v8 = v7 - 1;
    v9 = *(_QWORD *)(v6 + 8);
    v10 = *(_QWORD *)(v9 + 8 * v8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(unsigned int *)(v11 - 4);
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD ***)(v10 + 8);
          do
          {
            v14 = *v13;
            if (*v13 != (_DWORD *)-1)
            {
              *v13 = 0;
              if (v14)
              {
                if (*v14 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v14 -= 2;
              }
            }
            v13 += 2;
            --v12;
          }
          while (v12);
        }
        WTF::fastFree((WTF *)(v11 - 16), v5);
      }
      result = (_BYTE *)MEMORY[0x186DAB2A8](v10, 0x72C404B2EE363);
    }
    *(_DWORD *)(v6 + 20) = v8;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WGSL::AST::ScopedVisitor<WGSL::AST::Expression *>::visit(unsigned __int8 *a1, _QWORD *a2)
{
  _QWORD *result;
  int v5;
  BOOL v6;
  void *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  _QWORD v19[2];

  result = WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v19, (uint64_t)(a1 + 40));
  v5 = a1[32];
  if (a2[3])
    v6 = v5 == 0;
  else
    v6 = 0;
  if (!v6)
  {
    v7 = (void *)a2[4];
    if (a1[32])
      v8 = 1;
    else
      v8 = v7 == 0;
    if (!v8)
      goto LABEL_16;
LABEL_10:
    if (v5)
      goto LABEL_19;
    goto LABEL_17;
  }
  result = (_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 360))(a1);
  v5 = a1[32];
  v7 = (void *)a2[4];
  if (a1[32])
    v9 = 1;
  else
    v9 = v7 == 0;
  if (v9)
    goto LABEL_10;
LABEL_16:
  result = (_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 208))(a1);
  v5 = a1[32];
  if (a1[32])
    goto LABEL_19;
LABEL_17:
  v7 = (void *)a2[5];
  if (v7)
  {
    result = (_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 360))(a1);
    v5 = a1[32];
  }
LABEL_19:
  if (!v5)
    result = (_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 400))(a1, a2[6]);
  v10 = v19[0];
  *(_QWORD *)v19[0] = v19[1];
  v11 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v11)
  {
    v12 = v11 - 1;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_QWORD *)(v13 + 8 * v12);
    *(_QWORD *)(v13 + 8 * v12) = 0;
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(unsigned int *)(v15 - 4);
        if ((_DWORD)v16)
        {
          v17 = *(_DWORD ***)(v14 + 8);
          do
          {
            v18 = *v17;
            if (*v17 != (_DWORD *)-1)
            {
              *v17 = 0;
              if (v18)
              {
                if (*v18 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v18 -= 2;
              }
            }
            v17 += 2;
            --v16;
          }
          while (v16);
        }
        WTF::fastFree((WTF *)(v15 - 16), v7);
      }
      result = (_QWORD *)MEMORY[0x186DAB2A8](v14, 0x72C404B2EE363);
    }
    *(_DWORD *)(v10 + 20) = v12;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void std::__function::__func<void WGSL::ShaderModule::remove<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::remove<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 std::__function::__func<void WGSL::ShaderModule::remove<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::remove<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E0FD78B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void WGSL::ShaderModule::remove<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::remove<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E0FD78B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<void WGSL::ShaderModule::remove<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::remove<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *result;

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1 + 3;
  v4 = *(unsigned int *)(v1 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(v1 + 8))
  {
    v3 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1[1], v4 + 1, (unint64_t)v3);
    LODWORD(v4) = *(_DWORD *)(v1 + 12);
  }
  v5 = (_QWORD *)(*(_QWORD *)v1 + 8 * v2);
  result = memmove(v5 + 1, v5, *(_QWORD *)v1 + 8 * v4 - (_QWORD)v5);
  *v5 = *v3;
  ++*(_DWORD *)(v1 + 12);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_18IdentityExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v4;
  char v5;

  *(_QWORD *)a1 = off_1E0FD79A8;
  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return a1;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return a1;
LABEL_7:
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD78E8[v4])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_18IdentityExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_1E0FD79A8;
  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
LABEL_7:
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD78E8[v3])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_18IdentityExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char v8;

  v2 = (char *)operator new(0x70uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD79A8;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD79E0[v5])(&v8, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD2E98;
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v3 + 10) = &off_1E0FD2F10;
  v6 = *(_DWORD **)(a1 + 104);
  if (v6)
    *v6 += 2;
  *((_QWORD *)v3 + 13) = v6;
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_18IdentityExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  char v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD79A8;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD79E0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD2E98;
  *(_QWORD *)(a2 + 80) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(v3 + 88);
  *(_QWORD *)(a2 + 80) = &off_1E0FD2F10;
  v8 = *(_DWORD **)(v3 + 104);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 104) = v8;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_18IdentityExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  result = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (result)
  {
    if (*result == 2)
    {
      result = (_DWORD *)WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return result;
      goto LABEL_7;
    }
    *result -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return result;
LABEL_7:
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E0FD78E8[v3])(&v4, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_18IdentityExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  __p[10] = &off_1E0FD2F10;
  v2 = (_DWORD *)__p[13];
  __p[13] = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      __p[2] = off_1E0FD2EC0;
      if (!*((_BYTE *)__p + 72))
        goto LABEL_5;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  __p[2] = off_1E0FD2EC0;
  if (!*((_BYTE *)__p + 72))
  {
LABEL_5:
    operator delete(__p);
    return;
  }
LABEL_7:
  v3 = *((unsigned int *)__p + 16);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  ((void (*)(char *, _QWORD *))off_1E0FD78E8[v3])(&v4, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_18IdentityExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  char v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 48);
    v4 = v2;
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t))off_1E0FD78E8[v3])(&v8, v2 + 32);
      v4 = *(_QWORD *)(a1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    v2 = v4;
  }
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD7940[v5])(&v9, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD2E98;
  *(_QWORD *)(v2 + 64) = &off_1E0FD2EE8;
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v2 + 72) = result;
  *(_QWORD *)(v2 + 64) = &off_1E0FD2F10;
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(v2 + 88) = v7;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_10ExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_S7_EEvE4typeERS9_RSA_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD7A48;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD78E8[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_10ExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_S7_EEvE4typeERS9_RSA_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD7A48;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD78E8[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40538DE310);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_10ExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_S7_EEvE4typeERS9_RSA_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD7A48;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD79E0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD3140;
  *((_QWORD *)v3 + 10) = *(_QWORD *)(a1 + 80);
  v3[88] = *(_BYTE *)(a1 + 88);
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_10ExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_S7_EEvE4typeERS9_RSA_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD7A48;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD79E0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD3140;
  v8 = *(_QWORD *)(v3 + 80);
  *(_BYTE *)(a2 + 88) = *(_BYTE *)(v3 + 88);
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_10ExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_S7_EEvE4typeERS9_RSA_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(result + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(result + 72))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD78E8[v2])(&v3, result + 48);
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_10ExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_S7_EEvE4typeERS9_RSA_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  char v3;

  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v2 = *((unsigned int *)__p + 16);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD78E8[v2])(&v3, __p + 6);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_10ExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_S7_EEvE4typeERS9_RSA_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 48);
    v4 = v2;
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD78E8[v3])(&v7, v2 + 32);
      v4 = *(_QWORD *)(v1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    v2 = v4;
  }
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(v1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E0FD7940[v5])(&v8, v2 + 32, v1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD3140;
  v6 = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(v2 + 72) = *(_BYTE *)(v1 + 88);
  *(_QWORD *)(v2 + 64) = v6;
  return result;
}

uint64_t WGSL::toString(int a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_182510024 + 4 * word_1826100DC[a1]))("Invalid", 7);
}

uint64_t sub_182510024()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510034()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510044()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510054()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510064()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510074()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510084()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510094()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825100A4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825100B4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825100C4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825100D4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825100E4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825100F4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510104()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510114()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510124()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510134()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510144()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510154()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510164()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510174()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510184()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510194()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825101A4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825101B4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825101C4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825101D4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825101E4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825101F4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510204()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510214()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510224()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510234()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510244()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510254()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510264()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510274()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510284()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510294()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825102A4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825102B4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825102C4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825102D4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825102E4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825102F4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510304()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510314()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510324()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510334()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510344()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510354()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510364()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510374()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510384()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510394()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825103A4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825103B4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825103C4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825103D4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825103E4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825103F4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510404()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510414()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510424()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510434()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510444()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510454()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510464()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510474()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510484()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510494()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825104A4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825104B4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825104C4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825104D4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825104E4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_1825104F4()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510504()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510514()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510524()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t sub_182510534()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

#error "182510544: too big function (funcsize=0)"

WTF *WGSL::TypeChecker::introduceType(WGSL::TypeChecker *this, const WGSL::AST::Identifier *a2, const WGSL::Type *a3)
{
  WTF *result;
  int v6;
  __int128 v7;
  char v8;
  _BYTE v9[16];
  int v10;
  char v11;
  _BYTE v12[24];

  LOBYTE(v7) = 1;
  *((_QWORD *)&v7 + 1) = a3;
  v8 = 3;
  v9[0] = 0;
  v11 = 0;
  result = WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v12, (uint64_t *)(*((_QWORD *)this + 5) + 8), (const WTF::StringImpl **)a2 + 3, &v7);
  v6 = v12[16];
  if (v11 && v10 != -1)
    result = (WTF *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v10])(v12, v9);
  if (!v6)
  {
    LOBYTE(v7) = 39;
    return (WTF *)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>((uint64_t)this, (__int128 *)((char *)a2 + 8), (int8x16_t *)"redeclaration of '", 19, *((_QWORD *)a2 + 3), (char *)&v7);
  }
  return result;
}

_QWORD *WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  const WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *result;
  uint64_t v20;
  __int128 v21;
  const WTF::StringImpl *v22;
  __int128 v23;
  char v24;
  _BYTE v25[16];
  int v26;
  char v27;
  _BYTE v28[24];
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
    {
      v10 = (const WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = (const WTF::StringImpl *)v23;
    }
  }
  else
  {
    v10 = 0;
  }
  v21 = 0uLL;
  v22 = v10;
  v11 = *(_QWORD *)(a1 + 112);
  v12 = *a5;
  v13 = operator new(0x30uLL);
  *v13 = &off_1E0FD8280;
  v13[1] = a1;
  v13[2] = WGSL::TypeStore::vectorType;
  v13[3] = 0;
  v13[4] = a4;
  *((_DWORD *)v13 + 10) = v12;
  v30 = v13;
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  v14 = WGSL::TypeStore::allocateType<WGSL::Types::TypeConstructor,WTF::ASCIILiteral &,std::function<WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>>(v11, &v23, v29);
  LOBYTE(v23) = 1;
  *((_QWORD *)&v23 + 1) = v14;
  v24 = 3;
  v25[0] = 0;
  v27 = 0;
  WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v28, (uint64_t *)(*(_QWORD *)(a1 + 40) + 8), &v22, &v23);
  v18 = v28[16];
  if (v27 && v26 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v26])(v28, v25);
  if (!v18)
  {
    LOBYTE(v23) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>(a1, &v21, (int8x16_t *)"redeclaration of '", 19, (uint64_t)v10, (char *)&v23);
    result = v30;
    if (v30 != v29)
      goto LABEL_11;
LABEL_14:
    v20 = 4;
    result = v29;
    goto LABEL_15;
  }
  result = v30;
  if (v30 == v29)
    goto LABEL_14;
LABEL_11:
  if (!result)
    goto LABEL_16;
  v20 = 5;
LABEL_15:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 8 * v20))(result, v15, v16, v17);
LABEL_16:
  v22 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (_QWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

_QWORD *WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int *a6)
{
  const WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  __int128 v24;
  const WTF::StringImpl *v25;
  __int128 v26;
  char v27;
  _BYTE v28[16];
  int v29;
  char v30;
  _BYTE v31[24];
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
    {
      v12 = (const WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v12 = (const WTF::StringImpl *)v26;
    }
  }
  else
  {
    v12 = 0;
  }
  v24 = 0uLL;
  v25 = v12;
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *a5;
  v15 = *a6;
  v16 = operator new(0x30uLL);
  *v16 = &off_1E0FD82C8;
  v16[1] = a1;
  v16[2] = WGSL::TypeStore::matrixType;
  v16[3] = 0;
  v16[4] = a4;
  *((_DWORD *)v16 + 10) = v14;
  *((_DWORD *)v16 + 11) = v15;
  v33 = v16;
  *(_QWORD *)&v26 = a2;
  *((_QWORD *)&v26 + 1) = a3;
  v17 = WGSL::TypeStore::allocateType<WGSL::Types::TypeConstructor,WTF::ASCIILiteral &,std::function<WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>>(v13, &v26, v32);
  LOBYTE(v26) = 1;
  *((_QWORD *)&v26 + 1) = v17;
  v27 = 3;
  v28[0] = 0;
  v30 = 0;
  WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v31, (uint64_t *)(*(_QWORD *)(a1 + 40) + 8), &v25, &v26);
  v21 = v31[16];
  if (v30 && v29 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v29])(v31, v28);
  if (!v21)
  {
    LOBYTE(v26) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>(a1, &v24, (int8x16_t *)"redeclaration of '", 19, (uint64_t)v12, (char *)&v26);
    result = v33;
    if (v33 != v32)
      goto LABEL_11;
LABEL_14:
    v23 = 4;
    result = v32;
    goto LABEL_15;
  }
  result = v33;
  if (v33 == v32)
    goto LABEL_14;
LABEL_11:
  if (!result)
    goto LABEL_16;
  v23 = 5;
LABEL_15:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 8 * v23))(result, v18, v19, v20);
LABEL_16:
  v25 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return (_QWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

_QWORD *WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  const WTF::StringImpl *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *result;
  uint64_t v20;
  __int128 v21;
  const WTF::StringImpl *v22;
  __int128 v23;
  char v24;
  _BYTE v25[16];
  int v26;
  char v27;
  _BYTE v28[24];
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
    {
      v10 = (const WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = (const WTF::StringImpl *)v23;
    }
  }
  else
  {
    v10 = 0;
  }
  v21 = 0uLL;
  v22 = v10;
  v11 = *(_QWORD *)(a1 + 112);
  v12 = *a5;
  v13 = operator new(0x30uLL);
  *v13 = &off_1E0FD8310;
  v13[1] = a1;
  v13[2] = WGSL::TypeStore::textureType;
  v13[3] = 0;
  v13[4] = a4;
  *((_BYTE *)v13 + 40) = v12;
  v30 = v13;
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  v14 = WGSL::TypeStore::allocateType<WGSL::Types::TypeConstructor,WTF::ASCIILiteral &,std::function<WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>>(v11, &v23, v29);
  LOBYTE(v23) = 1;
  *((_QWORD *)&v23 + 1) = v14;
  v24 = 3;
  v25[0] = 0;
  v27 = 0;
  WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v28, (uint64_t *)(*(_QWORD *)(a1 + 40) + 8), &v22, &v23);
  v18 = v28[16];
  if (v27 && v26 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v26])(v28, v25);
  if (!v18)
  {
    LOBYTE(v23) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>(a1, &v21, (int8x16_t *)"redeclaration of '", 19, (uint64_t)v10, (char *)&v23);
    result = v30;
    if (v30 != v29)
      goto LABEL_11;
LABEL_14:
    v20 = 4;
    result = v29;
    goto LABEL_15;
  }
  result = v30;
  if (v30 == v29)
    goto LABEL_14;
LABEL_11:
  if (!result)
    goto LABEL_16;
  v20 = 5;
LABEL_15:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 8 * v20))(result, v15, v16, v17);
LABEL_16:
  v22 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (_QWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

_QWORD *WGSL::TypeChecker::allocateTextureStorageConstructor(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *result;
  uint64_t v13;
  __int128 v14;
  const WTF::StringImpl *v15;
  __int128 v16;
  char v17;
  _BYTE v18[16];
  int v19;
  char v20;
  _BYTE v21[24];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
    {
      v8 = (const WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = (const WTF::StringImpl *)v16;
    }
  }
  else
  {
    v8 = 0;
  }
  v14 = 0uLL;
  v15 = v8;
  v9 = *(_QWORD *)(a1 + 112);
  v22[0] = &off_1E0FD83D0;
  v22[1] = a1;
  v22[2] = a4;
  v23 = v22;
  *(_QWORD *)&v16 = a2;
  *((_QWORD *)&v16 + 1) = a3;
  v10 = WGSL::TypeStore::allocateType<WGSL::Types::TypeConstructor,WTF::ASCIILiteral &,std::function<WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>>(v9, &v16, v22);
  LOBYTE(v16) = 1;
  *((_QWORD *)&v16 + 1) = v10;
  v17 = 3;
  v18[0] = 0;
  v20 = 0;
  WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v21, (uint64_t *)(*(_QWORD *)(a1 + 40) + 8), &v15, &v16);
  v11 = v21[16];
  if (v20 && v19 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v19])(v21, v18);
  if (!v11)
  {
    LOBYTE(v16) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>(a1, &v14, (int8x16_t *)"redeclaration of '", 19, (uint64_t)v8, (char *)&v16);
    result = v23;
    if (v23 != v22)
      goto LABEL_11;
LABEL_14:
    v13 = 4;
    result = v22;
    goto LABEL_15;
  }
  result = v23;
  if (v23 == v22)
    goto LABEL_14;
LABEL_11:
  if (!result)
    goto LABEL_16;
  v13 = 5;
LABEL_15:
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
LABEL_16:
  v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (_QWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

WTF *WGSL::TypeChecker::introduceValue(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  const WTF::StringImpl **v7;
  uint64_t v8;
  WTF *result;
  int v10;
  __int128 v11;
  char v12;
  _BYTE v13[16];
  int v14;
  char v15;
  _BYTE v16[24];

  v7 = (const WTF::StringImpl **)(a2 + 24);
  LOBYTE(v11) = 0;
  *((_QWORD *)&v11 + 1) = a3;
  v12 = a4;
  v13[0] = 0;
  v15 = 0;
  if (*(_BYTE *)(a5 + 24))
  {
    v14 = -1;
    v8 = *(unsigned int *)(a5 + 16);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E0FD8010[v8])(v16, v13, a5);
      v14 = v8;
    }
    v15 = 1;
  }
  result = WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v16, (uint64_t *)(*(_QWORD *)(a1 + 40) + 8), v7, &v11);
  v10 = v16[16];
  if (v15 && v14 != -1)
    result = (WTF *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v14])(v16, v13);
  if (!v10)
  {
    LOBYTE(v11) = 39;
    return (WTF *)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>(a1, (__int128 *)(a2 + 8), (int8x16_t *)"redeclaration of '", 19, *(_QWORD *)(a2 + 24), (char *)&v11);
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::add<WGSL::OverloadedDeclaration>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, __int128 *a4)
{
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  int i;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  WTF *result;
  uint64_t v18;
  unsigned int v19;
  const WTF::StringImpl *v20;
  WTF *v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  WGSL::OverloadCandidate *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v7 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v7 = *a2;
    if (!*a2)
    {
      v8 = 0;
      v9 = *a3;
      v10 = *((_DWORD *)*a3 + 4);
      if (v10 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v11 = WTF::StringImpl::hashSlowCase(v9);
      goto LABEL_7;
    }
  }
  v8 = *(_DWORD *)(v7 - 8);
  v9 = *a3;
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    goto LABEL_6;
LABEL_4:
  v11 = v10 >> 8;
LABEL_7:
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v8;
    v15 = (WTF *)(v7 + 48 * (v11 & v8));
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      v12 = (WTF *)(v7 + 48 * v14);
      goto LABEL_9;
    }
    if (!v16)
    {
      if (v12)
      {
        *((_OWORD *)v12 + 1) = 0u;
        *((_OWORD *)v12 + 2) = 0u;
        *(_OWORD *)v12 = 0u;
        --*(_DWORD *)(*a2 - 16);
        v15 = v12;
      }
      v20 = *a3;
      *a3 = 0;
      v21 = *(WTF **)v15;
      *(_QWORD *)v15 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy();
          v27 = *a4;
          *((_BYTE *)v15 + 24) = *((_BYTE *)a4 + 16);
          *(_OWORD *)((char *)v15 + 8) = v27;
          v23 = *((_DWORD *)v15 + 11);
          if (!v23)
            goto LABEL_27;
LABEL_25:
          v28 = (WGSL::OverloadCandidate *)*((_QWORD *)v15 + 4);
          v29 = 88 * v23;
          do
          {
            WGSL::OverloadCandidate::~OverloadCandidate(v28, a2);
            v28 = (WGSL::OverloadCandidate *)(v30 + 88);
            v29 -= 88;
          }
          while (v29);
LABEL_27:
          result = (WTF *)*((_QWORD *)v15 + 4);
          if (result)
          {
            *((_QWORD *)v15 + 4) = 0;
            *((_DWORD *)v15 + 10) = 0;
            result = (WTF *)WTF::fastFree(result, a2);
          }
          v31 = *((_QWORD *)a4 + 3);
          *((_QWORD *)a4 + 3) = 0;
          *((_QWORD *)v15 + 4) = v31;
          LODWORD(v31) = *((_DWORD *)a4 + 8);
          *((_DWORD *)a4 + 8) = 0;
          *((_DWORD *)v15 + 10) = v31;
          LODWORD(v31) = *((_DWORD *)a4 + 9);
          *((_DWORD *)a4 + 9) = 0;
          *((_DWORD *)v15 + 11) = v31;
          if (*a2)
          {
            ++*(_DWORD *)(*a2 - 12);
            v32 = *a2;
            if (*a2)
              goto LABEL_31;
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
            v32 = *a2;
            if (*a2)
            {
LABEL_31:
              v33 = (*(_DWORD *)(v32 - 16) + *(_DWORD *)(v32 - 12));
              v34 = *(unsigned int *)(v32 - 4);
              if (v34 <= 0x400)
                goto LABEL_32;
              goto LABEL_38;
            }
          }
          v33 = *(unsigned int *)(v32 - 16);
          v34 = *(unsigned int *)(v32 - 4);
          if (v34 <= 0x400)
          {
LABEL_32:
            if (3 * v34 > 4 * v33)
            {
LABEL_41:
              v24 = a1;
              v26 = v32 + 48 * v34;
              v25 = 1;
              goto LABEL_42;
            }
            if (!(_DWORD)v34)
            {
              result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (_DWORD **)v15);
              v15 = result;
              v32 = *a2;
              if (!*a2)
              {
LABEL_35:
                LODWORD(v34) = 0;
                goto LABEL_41;
              }
LABEL_40:
              LODWORD(v34) = *(_DWORD *)(v32 - 4);
              goto LABEL_41;
            }
LABEL_39:
            result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v34 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v34)), (_DWORD **)v15);
            v15 = result;
            v32 = *a2;
            if (!*a2)
              goto LABEL_35;
            goto LABEL_40;
          }
LABEL_38:
          if (v34 > 2 * v33)
            goto LABEL_41;
          goto LABEL_39;
        }
        *(_DWORD *)v21 -= 2;
      }
      v22 = *a4;
      *((_BYTE *)v15 + 24) = *((_BYTE *)a4 + 16);
      *(_OWORD *)((char *)v15 + 8) = v22;
      v23 = *((_DWORD *)v15 + 11);
      if (!v23)
        goto LABEL_27;
      goto LABEL_25;
    }
    result = (WTF *)WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v11 = i + v14;
  }
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 4);
  else
    v19 = 0;
  v24 = a1;
  v25 = 0;
  v26 = v18 + 48 * v19;
LABEL_42:
  *(_QWORD *)v24 = v15;
  *(_QWORD *)(v24 + 8) = v26;
  *(_BYTE *)(v24 + 16) = v25;
  return result;
}

uint64_t WGSL::constantNot@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD v32[4];
  int v33;
  char v34;
  unsigned int *v35;
  char v36[8];
  int v37;
  int v38;
  unsigned int v39;
  _QWORD v40[2];
  unsigned int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825AF3FCLL);
  }
  LOBYTE(v40[0]) = 0;
  v41 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_53;
  v5 = off_1E0FD8010[v4];
  ((void (*)(unsigned int **, _QWORD *, _DWORD *))v5)(&v35, v40, v3 + 2);
  v41 = v4;
  LOBYTE(v35) = 0;
  v37 = -1;
  ((void (*)(_DWORD *, unsigned int **, _QWORD *))v5)(v32, &v35, v40);
  v6 = 0;
  v37 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v35)
      v6 = *v35;
    else
      v6 = 0;
  }
  result = ((uint64_t (*)(_DWORD *, unsigned int **))off_1E0FD7CC8[v4])(v32, &v35);
  if (!v6)
  {
    if (v3[6] == 6)
    {
      *(_BYTE *)(a2 + 8) = *((_BYTE *)v3 + 8) ^ 1;
      *(_DWORD *)(a2 + 24) = 6;
      *(_DWORD *)(a2 + 32) = 0;
      v30 = v41;
      if (v41 != -1)
        return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v30])(&v35, v40);
      return result;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x1825AF46CLL);
  }
  v31 = a2;
  v8 = 24 * v6;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v10 = 0;
  v11 = 0;
  v32[0] = 0;
  v33 = 0;
  do
  {
    if (v41 == 8)
    {
      if (v11 >= *(unsigned int *)v40[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825AF3DCLL);
      }
      v13 = *(unsigned int *)(v40[0] + v10 + 24);
      if (v33 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_24;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_19;
      }
      v35 = v32;
      ((void (*)(unsigned int **, _DWORD *, unint64_t))off_1E0FD80E0[v13])(&v35, v32, v40[0] + v10 + 8);
    }
    else
    {
      if (v33 == -1)
      {
        if (v41 == -1)
          goto LABEL_52;
      }
      else if (v41 == -1)
      {
LABEL_19:
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v33])(&v35, v32);
        v33 = -1;
LABEL_52:
        __break(0xC471u);
        JUMPOUT(0x1825AF44CLL);
      }
      v35 = v32;
      ((void (*)(unsigned int **, _DWORD *, _QWORD *))off_1E0FD80E0[v41])(&v35, v32, v40);
    }
LABEL_24:
    if (v33 != 6)
      goto LABEL_52;
    v14 = LOBYTE(v32[0]) ^ 1;
    v36[0] = LOBYTE(v32[0]) ^ 1;
    v38 = 6;
    v39 = 0;
    if (v11 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825AF3BCLL);
    }
    v15 = &v9[v10 / 4];
    v16 = &v9[v10 / 4 + 2];
    v17 = v9[v10 / 4 + 6];
    if ((_DWORD)v17 == 6)
    {
      v12 = 0;
      *(_BYTE *)v16 = v14;
LABEL_10:
      ((void (*)(char *, char *))off_1E0FD7DD0[v12])(&v34, v36);
      goto LABEL_11;
    }
    if ((_DWORD)v17 == -1)
    {
      v12 = 0;
      *((_BYTE *)v15 + 8) = v14;
      v15[6] = 6;
      goto LABEL_10;
    }
    ((void (*)(char *, unsigned int *))off_1E0FD7CC8[v17])(&v34, v16);
    v12 = v39;
    *((_BYTE *)v15 + 8) = v36[0];
    v15[6] = 6;
    if ((_DWORD)v12 != -1)
      goto LABEL_10;
LABEL_11:
    ++v11;
    v10 += 24;
  }
  while (v8 != v10);
  v18 = *v9;
  v19 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v18 + 8));
  v21 = v19;
  *v19 = v18;
  if ((_DWORD)v18)
  {
    v22 = v19 + 6;
    v23 = 24 * v18;
    v24 = v9 + 6;
    do
    {
      *((_BYTE *)v22 - 16) = 0;
      v20 = v22 - 4;
      *v22 = -1;
      v25 = *v24;
      if ((_DWORD)v25 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v25])(&v35, v20, v24 - 4);
        *v22 = v25;
      }
      v22 += 6;
      v24 += 6;
      v23 -= 24;
    }
    while (v23);
  }
  *(_QWORD *)(v31 + 8) = v21;
  *(_DWORD *)(v31 + 24) = 8;
  *(_DWORD *)(v31 + 32) = 0;
  if (v33 != -1)
    ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v33])(&v35, v32);
  v26 = *v9;
  if ((_DWORD)v26)
  {
    v27 = 24 * v26;
    v28 = v9 + 6;
    do
    {
      v20 = v28 - 4;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v29])(&v35, v20);
      *v28 = -1;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  result = WTF::fastFree((WTF *)v9, v20);
  v30 = v41;
  if (v41 != -1)
    return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v30])(&v35, v40);
  return result;
}

void WGSL::constantOr(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  unsigned int *v18;
  BOOL *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35[16];
  int v36;
  unsigned __int8 v37[16];
  int v38;
  char v39;
  unsigned __int8 *v40;
  BOOL v41[16];
  int v42;
  unsigned int v43;
  _QWORD v44[2];
  int v45;
  _QWORD v46[2];
  unsigned int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825AFB58);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825AFB78);
  }
  LOBYTE(v44[0]) = 0;
  v45 = -1;
  v5 = v3[6];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(unsigned __int8 *, _QWORD *, int *))off_1E0FD8010[v5])(v35, v44, v3 + 2);
    v45 = v5;
  }
  LOBYTE(v46[0]) = 0;
  v47 = -1;
  v6 = v3[12];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(unsigned __int8 *, _QWORD *, int *))off_1E0FD8010[v6])(v35, v46, v3 + 8);
    v47 = v6;
    LODWORD(v5) = v45;
  }
  v35[0] = 0;
  v36 = -1;
  if ((_DWORD)v5 != -1)
  {
    v7 = v5;
    ((void (*)(unsigned __int8 **, unsigned __int8 *, _QWORD *))off_1E0FD8010[v5])(&v40, v35, v44);
    v36 = v5;
    if ((_DWORD)v5 == 8)
    {
      if (*(_QWORD *)v35)
        v8 = **(_DWORD **)v35;
      else
        v8 = 0;
      ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v7])(&v40, v35);
      if (!v8)
        goto LABEL_73;
      goto LABEL_18;
    }
    ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v5])(&v40, v35);
    LODWORD(v6) = v47;
  }
  v35[0] = 0;
  v36 = -1;
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(unsigned __int8 **, unsigned __int8 *, _QWORD *))off_1E0FD8010[v6])(&v40, v35, v46);
    v36 = v6;
    if ((_DWORD)v6 == 8 && *(_QWORD *)v35)
      v8 = **(_DWORD **)v35;
    else
      v8 = 0;
    ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v6])(&v40, v35);
    if (v8)
    {
LABEL_18:
      v34 = a2;
      v9 = 24 * v8;
      v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
      *v10 = v8;
      bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
      v11 = 0;
      v12 = 0;
      *(_DWORD *)v35 = 0;
      v36 = 0;
      *(_DWORD *)v37 = 0;
      v38 = 0;
      while (1)
      {
        if (v45 == 8)
        {
          if (v12 >= *(unsigned int *)v44[0])
            goto LABEL_86;
          v14 = *(unsigned int *)(v44[0] + v11 + 24);
          if (v36 == -1)
          {
            if ((_DWORD)v14 == -1)
              goto LABEL_34;
          }
          else if ((_DWORD)v14 == -1)
          {
            goto LABEL_29;
          }
          v40 = v35;
          ((void (*)(unsigned __int8 **, unsigned __int8 *, unint64_t))off_1E0FD80E0[v14])(&v40, v35, v44[0] + v11 + 8);
        }
        else
        {
          if (v36 == -1)
          {
            if (v45 == -1)
              goto LABEL_34;
          }
          else if (v45 == -1)
          {
LABEL_29:
            ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v36])(&v40, v35);
            v36 = -1;
            goto LABEL_34;
          }
          v40 = v35;
          ((void (*)(unsigned __int8 **, unsigned __int8 *, _QWORD *))off_1E0FD80E0[v45])(&v40, v35, v44);
        }
LABEL_34:
        v15 = v47;
        if (v47 == 8)
        {
          if (v12 >= *(unsigned int *)v46[0])
            goto LABEL_86;
          v16 = *(unsigned int *)(v46[0] + v11 + 24);
          if (v38 != -1)
          {
            if ((_DWORD)v16 == -1)
              goto LABEL_41;
LABEL_45:
            v40 = v37;
            ((void (*)(unsigned __int8 **, unsigned __int8 *, unint64_t))off_1E0FD80E0[v16])(&v40, v37, v46[0] + v11 + 8);
            goto LABEL_46;
          }
          if ((_DWORD)v16 != -1)
            goto LABEL_45;
        }
        else
        {
          if (v38 == -1)
          {
            if (v47 == -1)
              goto LABEL_47;
          }
          else if (v47 == -1)
          {
LABEL_41:
            ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v38])(&v40, v37);
            v15 = -1;
            v38 = -1;
            goto LABEL_47;
          }
          v40 = v37;
          ((void (*)(unsigned __int8 **, unsigned __int8 *, _QWORD *))off_1E0FD80E0[v47])(&v40, v37, v46);
        }
LABEL_46:
        v15 = v38;
LABEL_47:
        if (v36 != 6)
          goto LABEL_85;
        if (v15 != 6)
          goto LABEL_84;
        v17 = (v37[0] | v35[0]) != 0;
        v41[0] = v17;
        v42 = 6;
        v43 = 0;
        if (v12 >= *v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1825AFB38);
        }
        v18 = &v10[v11 / 4];
        v19 = (BOOL *)&v10[v11 / 4 + 2];
        v20 = v10[v11 / 4 + 6];
        if ((_DWORD)v20 == 6)
        {
          v13 = 0;
          *v19 = v17;
        }
        else if ((_DWORD)v20 == -1)
        {
          v13 = 0;
          *((_BYTE *)v18 + 8) = v17;
          v18[6] = 6;
        }
        else
        {
          ((void (*)(char *, BOOL *))off_1E0FD7CC8[v20])(&v39, v19);
          v13 = v43;
          *((_BYTE *)v18 + 8) = v41[0];
          v18[6] = 6;
          if ((_DWORD)v13 == -1)
            goto LABEL_21;
        }
        ((void (*)(char *, BOOL *))off_1E0FD7DD0[v13])(&v39, v41);
LABEL_21:
        ++v12;
        v11 += 24;
        if (v9 == v11)
        {
          v21 = *v10;
          v22 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v21 + 8));
          v24 = v22;
          *v22 = v21;
          if ((_DWORD)v21)
          {
            v25 = v22 + 6;
            v26 = 24 * v21;
            v27 = v10 + 6;
            do
            {
              *((_BYTE *)v25 - 16) = 0;
              v23 = v25 - 4;
              *v25 = -1;
              v28 = *v27;
              if ((_DWORD)v28 != -1)
              {
                ((void (*)(unsigned __int8 **, _DWORD *, unsigned int *))off_1E0FD8010[v28])(&v40, v23, v27 - 4);
                *v25 = v28;
              }
              v25 += 6;
              v27 += 6;
              v26 -= 24;
            }
            while (v26);
          }
          *(_QWORD *)(v34 + 8) = v24;
          *(_DWORD *)(v34 + 24) = 8;
          *(_DWORD *)(v34 + 32) = 0;
          if (v38 != -1)
            ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v38])(&v40, v37);
          v38 = -1;
          if (v36 != -1)
            ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v36])(&v40, v35);
          v29 = *v10;
          if ((_DWORD)v29)
          {
            v30 = 24 * v29;
            v31 = v10 + 6;
            do
            {
              v23 = v31 - 4;
              v32 = *v31;
              if ((_DWORD)v32 != -1)
                ((void (*)(unsigned __int8 *, _DWORD *))off_1E0FD7CC8[v32])(v35, v23);
              *v31 = -1;
              v31 += 6;
              v30 -= 24;
            }
            while (v30);
          }
          WTF::fastFree((WTF *)v10, v23);
          v33 = v47;
          if (v47 == -1)
            goto LABEL_77;
LABEL_76:
          ((void (*)(unsigned __int8 *, _QWORD *))off_1E0FD7CC8[v33])(v35, v46);
          goto LABEL_77;
        }
      }
    }
  }
LABEL_73:
  if (v3[6] != 6)
  {
LABEL_86:
    __break(0xC471u);
    JUMPOUT(0x1825AFB18);
  }
  if (v3[12] != 6)
  {
LABEL_84:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x1825AFB9CLL);
  }
  *(_BYTE *)(a2 + 8) = (*((unsigned __int8 *)v3 + 8) | *((unsigned __int8 *)v3 + 32)) != 0;
  *(_DWORD *)(a2 + 24) = 6;
  *(_DWORD *)(a2 + 32) = 0;
  v33 = v47;
  if (v47 != -1)
    goto LABEL_76;
LABEL_77:
  v47 = -1;
  if (v45 != -1)
    ((void (*)(unsigned __int8 *, _QWORD *))off_1E0FD7CC8[v45])(v35, v44);
}

void WGSL::constantAnd(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unsigned int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  _QWORD v38[2];
  int v39;
  unsigned __int8 v40[16];
  int v41;
  char v42;
  unsigned __int8 *v43;
  char v44[16];
  int v45;
  unsigned int v46;
  _QWORD v47[2];
  int v48;
  _QWORD v49[2];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B02A8);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B02C8);
  }
  LOBYTE(v47[0]) = 0;
  v48 = -1;
  v5 = v3[6];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v5])(v38, v47, v3 + 2);
    v48 = v5;
  }
  LOBYTE(v49[0]) = 0;
  v50 = -1;
  v6 = v3[12];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v6])(v38, v49, v3 + 8);
    v50 = v6;
    LODWORD(v5) = v48;
  }
  LOBYTE(v38[0]) = 0;
  v39 = -1;
  if ((_DWORD)v5 != -1)
  {
    v7 = v5;
    ((void (*)(unsigned __int8 **, _QWORD *, _QWORD *))off_1E0FD8010[v5])(&v43, v38, v47);
    v39 = v5;
    if ((_DWORD)v5 == 8)
    {
      if (v38[0])
        v8 = *(_DWORD *)v38[0];
      else
        v8 = 0;
      ((void (*)(unsigned __int8 **, _QWORD *))off_1E0FD7CC8[v7])(&v43, v38);
      if (!v8)
        goto LABEL_79;
      goto LABEL_18;
    }
    ((void (*)(unsigned __int8 **, _QWORD *))off_1E0FD7CC8[v5])(&v43, v38);
    LODWORD(v6) = v50;
  }
  LOBYTE(v38[0]) = 0;
  v39 = -1;
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(unsigned __int8 **, _QWORD *, _QWORD *))off_1E0FD8010[v6])(&v43, v38, v49);
    v39 = v6;
    if ((_DWORD)v6 == 8 && v38[0])
      v8 = *(_DWORD *)v38[0];
    else
      v8 = 0;
    ((void (*)(unsigned __int8 **, _QWORD *))off_1E0FD7CC8[v6])(&v43, v38);
    if (v8)
    {
LABEL_18:
      v37 = a2;
      v9 = 24 * v8;
      v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
      *v10 = v8;
      bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
      v11 = 0;
      v12 = 0;
      LODWORD(v38[0]) = 0;
      v39 = 0;
      *(_DWORD *)v40 = 0;
      v41 = 0;
      while (1)
      {
        if (v48 == 8)
        {
          if (v12 >= *(unsigned int *)v47[0])
            goto LABEL_98;
          v14 = *(unsigned int *)(v47[0] + v11 + 24);
          if (v39 == -1)
          {
            if ((_DWORD)v14 == -1)
              goto LABEL_34;
          }
          else if ((_DWORD)v14 == -1)
          {
            goto LABEL_29;
          }
          v43 = (unsigned __int8 *)v38;
          ((void (*)(unsigned __int8 **, _QWORD *, unint64_t))off_1E0FD80E0[v14])(&v43, v38, v47[0] + v11 + 8);
        }
        else
        {
          if (v39 == -1)
          {
            if (v48 == -1)
              goto LABEL_34;
          }
          else if (v48 == -1)
          {
LABEL_29:
            ((void (*)(unsigned __int8 **, _QWORD *))off_1E0FD7CC8[v39])(&v43, v38);
            v39 = -1;
            goto LABEL_34;
          }
          v43 = (unsigned __int8 *)v38;
          ((void (*)(unsigned __int8 **, _QWORD *, _QWORD *))off_1E0FD80E0[v48])(&v43, v38, v47);
        }
LABEL_34:
        v15 = v50;
        if (v50 == 8)
        {
          if (v12 >= *(unsigned int *)v49[0])
            goto LABEL_98;
          v16 = *(unsigned int *)(v49[0] + v11 + 24);
          if (v41 != -1)
          {
            if ((_DWORD)v16 == -1)
              goto LABEL_41;
LABEL_45:
            v43 = v40;
            ((void (*)(unsigned __int8 **, unsigned __int8 *, unint64_t))off_1E0FD80E0[v16])(&v43, v40, v49[0] + v11 + 8);
            goto LABEL_46;
          }
          if ((_DWORD)v16 != -1)
            goto LABEL_45;
        }
        else
        {
          if (v41 == -1)
          {
            if (v50 == -1)
              goto LABEL_47;
          }
          else if (v50 == -1)
          {
LABEL_41:
            ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v41])(&v43, v40);
            v15 = -1;
            v41 = -1;
            goto LABEL_47;
          }
          v43 = v40;
          ((void (*)(unsigned __int8 **, unsigned __int8 *, _QWORD *))off_1E0FD80E0[v50])(&v43, v40, v49);
        }
LABEL_46:
        v15 = v41;
LABEL_47:
        if (v39 != 6)
          goto LABEL_97;
        if (v15 != 6)
          goto LABEL_96;
        if (LOBYTE(v38[0]))
          v17 = v40[0] == 0;
        else
          v17 = 1;
        v18 = !v17;
        v44[0] = v18;
        v45 = 6;
        v46 = 0;
        if (v12 >= *v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1825B0288);
        }
        v19 = &v10[v11 / 4];
        v20 = (char *)&v10[v11 / 4 + 2];
        v21 = v10[v11 / 4 + 6];
        if ((_DWORD)v21 == 6)
        {
          v13 = 0;
          *v20 = v18;
        }
        else if ((_DWORD)v21 == -1)
        {
          v13 = 0;
          *((_BYTE *)v19 + 8) = v18;
          v19[6] = 6;
        }
        else
        {
          ((void (*)(char *, char *))off_1E0FD7CC8[v21])(&v42, v20);
          v13 = v46;
          *((_BYTE *)v19 + 8) = v44[0];
          v19[6] = 6;
          if ((_DWORD)v13 == -1)
            goto LABEL_21;
        }
        ((void (*)(char *, char *))off_1E0FD7DD0[v13])(&v42, v44);
LABEL_21:
        ++v12;
        v11 += 24;
        if (v9 == v11)
        {
          v22 = *v10;
          v23 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v22 + 8));
          v25 = v23;
          *v23 = v22;
          if ((_DWORD)v22)
          {
            v26 = v23 + 6;
            v27 = 24 * v22;
            v28 = v10 + 6;
            do
            {
              *((_BYTE *)v26 - 16) = 0;
              v24 = v26 - 4;
              *v26 = -1;
              v29 = *v28;
              if ((_DWORD)v29 != -1)
              {
                ((void (*)(unsigned __int8 **, _DWORD *, unsigned int *))off_1E0FD8010[v29])(&v43, v24, v28 - 4);
                *v26 = v29;
              }
              v26 += 6;
              v28 += 6;
              v27 -= 24;
            }
            while (v27);
          }
          *(_QWORD *)(v37 + 8) = v25;
          *(_DWORD *)(v37 + 24) = 8;
          *(_DWORD *)(v37 + 32) = 0;
          if (v41 != -1)
            ((void (*)(unsigned __int8 **, unsigned __int8 *))off_1E0FD7CC8[v41])(&v43, v40);
          v41 = -1;
          if (v39 != -1)
            ((void (*)(unsigned __int8 **, _QWORD *))off_1E0FD7CC8[v39])(&v43, v38);
          v30 = *v10;
          if ((_DWORD)v30)
          {
            v31 = 24 * v30;
            v32 = v10 + 6;
            do
            {
              v24 = v32 - 4;
              v33 = *v32;
              if ((_DWORD)v33 != -1)
                ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v33])(v38, v24);
              *v32 = -1;
              v32 += 6;
              v31 -= 24;
            }
            while (v31);
          }
          WTF::fastFree((WTF *)v10, v24);
          v34 = v50;
          if (v50 == -1)
            goto LABEL_89;
LABEL_88:
          ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v34])(v38, v49);
          goto LABEL_89;
        }
      }
    }
  }
LABEL_79:
  if (v3[6] != 6)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x1825B0268);
  }
  if (v3[12] != 6)
  {
LABEL_96:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_97:
    __break(0xC471u);
    JUMPOUT(0x1825B02ECLL);
  }
  if (*((_BYTE *)v3 + 32))
    v35 = *((_BYTE *)v3 + 8) == 0;
  else
    v35 = 1;
  v36 = !v35;
  *(_BYTE *)(a2 + 8) = v36;
  *(_DWORD *)(a2 + 24) = 6;
  *(_DWORD *)(a2 + 32) = 0;
  v34 = v50;
  if (v50 != -1)
    goto LABEL_88;
LABEL_89:
  v50 = -1;
  if (v48 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v48])(v38, v47);
}

uint64_t WGSL::constantBitwiseOr@<X0>(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  unsigned int v43;
  _QWORD v44[2];
  unsigned int v45;
  _QWORD v46[2];
  unsigned int v47;
  char v48;
  _QWORD *v49;
  _QWORD v50[2];
  int v51;
  unsigned int v52;
  _QWORD v53[2];
  int v54;
  _QWORD v55[2];
  unsigned int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B0B84);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B0BA4);
  }
  v4 = v2 + 2;
  LOBYTE(v53[0]) = 0;
  v54 = -1;
  v5 = v2[6];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v5])(v44, v53, v2 + 2);
    v54 = v5;
  }
  v6 = v2 + 8;
  LOBYTE(v55[0]) = 0;
  v56 = -1;
  v7 = v2[12];
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v7])(v44, v55, v2 + 8);
    v56 = v7;
    LODWORD(v5) = v54;
  }
  LOBYTE(v44[0]) = 0;
  v45 = -1;
  if ((_DWORD)v5 == -1)
  {
LABEL_12:
    LOBYTE(v44[0]) = 0;
    v45 = -1;
    if ((_DWORD)v7 == -1
      || ((((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v7])(&v49, v44, v55),
           v45 = v7,
           (_DWORD)v7 != 8)
       || !v44[0]
        ? (v9 = 0)
        : (v9 = *(_DWORD *)v44[0]),
          ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v7])(&v49, v44),
          !v9))
    {
LABEL_88:
      v40 = v2[6];
      switch((int)v40)
      {
        case 3:
          if (v2[12] != 3)
            goto LABEL_108;
          goto LABEL_94;
        case 4:
          if (v2[12] != 4)
            goto LABEL_108;
LABEL_94:
          LODWORD(v44[0]) = *v6 | *v4;
          break;
        case 5:
          if (v2[12] != 5)
            goto LABEL_108;
          v44[0] = *(_QWORD *)v6 | *(_QWORD *)v4;
          break;
        case 6:
          if (v2[12] != 6)
            goto LABEL_108;
          LOBYTE(v44[0]) = *(_BYTE *)v6 | *(_BYTE *)v4;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825B0BECLL);
      }
      v45 = v40;
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 24) = -1;
      result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *))off_1E0FD7D20[v40])(&v49, a2 + 8, v44);
      *(_DWORD *)(a2 + 24) = v40;
      *(_DWORD *)(a2 + 32) = 0;
      if (v45 != -1)
        result = ((uint64_t (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v45])(&v49, v44);
      v39 = v56;
      if (v56 == -1)
        goto LABEL_101;
LABEL_100:
      result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v39])(v44, v55);
      goto LABEL_101;
    }
    goto LABEL_18;
  }
  v8 = v5;
  ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v5])(&v49, v44, v53);
  v45 = v5;
  if ((_DWORD)v5 != 8)
  {
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v5])(&v49, v44);
    LODWORD(v7) = v56;
    goto LABEL_12;
  }
  if (v44[0])
    v9 = *(_DWORD *)v44[0];
  else
    v9 = 0;
  ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v8])(&v49, v44);
  if (!v9)
    goto LABEL_88;
LABEL_18:
  v10 = v9;
  v11 = 24 * v9;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v9;
  v13 = v12 + 2;
  v14 = 24;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v16 = 0;
  LODWORD(v44[0]) = 0;
  v45 = 0;
  LODWORD(v46[0]) = 0;
  v47 = 0;
  do
  {
    if (v54 == 8)
    {
      if (v16 >= *(unsigned int *)v53[0])
        goto LABEL_104;
      v15 = v53[0] + v14 - 16;
      v17 = *(unsigned int *)(v53[0] + v14);
      v18 = v45;
      if (v45 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_31;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_26;
      }
      v49 = v44;
      ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD80E0[v17])(&v49, v44, v15);
    }
    else
    {
      v18 = v45;
      if (v45 == -1)
      {
        if (v54 == -1)
          goto LABEL_31;
      }
      else if (v54 == -1)
      {
LABEL_26:
        ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD7CC8[v18])(&v49, v44, v15);
        v45 = -1;
        goto LABEL_31;
      }
      v49 = v44;
      ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD80E0[v54])(&v49, v44, v53);
    }
LABEL_31:
    if (v56 == 8)
    {
      if (v16 >= *(unsigned int *)v55[0])
      {
LABEL_104:
        __break(0xC471u);
        JUMPOUT(0x1825B0B44);
      }
      v15 = v55[0] + v14 - 16;
      v19 = *(unsigned int *)(v55[0] + v14);
      v20 = v47;
      if (v47 == -1)
      {
        if ((_DWORD)v19 == -1)
          goto LABEL_43;
      }
      else if ((_DWORD)v19 == -1)
      {
        goto LABEL_38;
      }
      v49 = v46;
      ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD80E0[v19])(&v49, v46, v15);
    }
    else
    {
      v20 = v47;
      if (v47 == -1)
      {
        if (v56 == -1)
          goto LABEL_43;
      }
      else if (v56 == -1)
      {
LABEL_38:
        ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD7CC8[v20])(&v49, v46, v15);
        v47 = -1;
        goto LABEL_43;
      }
      v49 = v46;
      ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD80E0[v56])(&v49, v46, v55);
    }
LABEL_43:
    v21 = v45;
    switch(v45)
    {
      case 3u:
        if (v47 != 3)
          goto LABEL_108;
        goto LABEL_47;
      case 4u:
        if (v47 != 4)
          goto LABEL_108;
LABEL_47:
        LODWORD(v42[0]) = LODWORD(v46[0]) | LODWORD(v44[0]);
        break;
      case 5u:
        if (v47 != 5)
          goto LABEL_108;
        v42[0] = v46[0] | v44[0];
        break;
      case 6u:
        if (v47 != 6)
          goto LABEL_108;
        LOBYTE(v42[0]) = LOBYTE(v46[0]) | LOBYTE(v44[0]);
        break;
      default:
        goto LABEL_109;
    }
    v43 = v45;
    LOBYTE(v50[0]) = 0;
    v51 = -1;
    ((void (*)(char *, _QWORD *, _QWORD *))off_1E0FD7D20[v45])(&v48, v50, v42);
    v51 = v21;
    v52 = 0;
    if (v43 == -1 || (((void (*)(char *, _QWORD *))off_1E0FD7CC8[v43])(&v48, v42), !v52))
    {
      if (v16 >= *v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B0B64);
      }
      v26 = v12[(unint64_t)v14 / 4];
      if ((_DWORD)v26 == -1)
      {
        if (v51 == -1)
          goto LABEL_65;
      }
      else if (v51 == -1)
      {
        ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v26])(v42, v13);
        v12[(unint64_t)v14 / 4] = -1;
        goto LABEL_65;
      }
      v42[0] = v13;
      ((void (*)(_QWORD *, unsigned int *, _QWORD *))off_1E0FD8188[v51])(v42, v13, v50);
LABEL_65:
      v24 = 1;
      v25 = v52;
      if (v52 == -1)
        goto LABEL_67;
LABEL_66:
      ((void (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v25])(v42, v50);
      goto LABEL_67;
    }
    if (v52 != 1)
    {
LABEL_108:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
      __break(0xC471u);
      JUMPOUT(0x1825B0BC8);
    }
    v23 = v50[0];
    if (v50[0])
      *(_DWORD *)v50[0] += 2;
    v24 = 0;
    *(_QWORD *)(a2 + 8) = v23;
    *(_DWORD *)(a2 + 32) = 1;
    v25 = v52;
    if (v52 != -1)
      goto LABEL_66;
LABEL_67:
    if ((v24 & 1) == 0)
      goto LABEL_75;
    ++v16;
    v13 += 6;
    v14 += 24;
  }
  while (v10 != v16);
  v27 = *v12;
  v28 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v27 + 8));
  v29 = v28;
  *v28 = v27;
  if ((_DWORD)v27)
  {
    v30 = v28 + 6;
    v31 = 24 * v27;
    v32 = v12 + 6;
    do
    {
      *((_BYTE *)v30 - 16) = 0;
      v22 = v30 - 4;
      *v30 = -1;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
      {
        ((void (*)(_QWORD **, _DWORD *, unsigned int *))off_1E0FD8010[v33])(&v49, v22, v32 - 4);
        *v30 = v33;
      }
      v30 += 6;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  *(_QWORD *)(a2 + 8) = v29;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
LABEL_75:
  if (v47 != -1)
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v47])(&v49, v46);
  v47 = -1;
  if (v45 != -1)
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v45])(&v49, v44);
  v34 = *v12;
  if ((_DWORD)v34)
  {
    v35 = 24 * v34;
    v36 = v12 + 6;
    do
    {
      v22 = v36 - 4;
      v37 = *v36;
      if ((_DWORD)v37 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v37])(v44, v22);
      *v36 = -1;
      v36 += 6;
      v35 -= 24;
    }
    while (v35);
  }
  result = WTF::fastFree((WTF *)v12, v22);
  v39 = v56;
  if (v56 != -1)
    goto LABEL_100;
LABEL_101:
  v56 = -1;
  if (v54 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v54])(v44, v53);
  return result;
}

uint64_t WGSL::constantBitwiseAnd@<X0>(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  unsigned int v43;
  _QWORD v44[2];
  unsigned int v45;
  _QWORD v46[2];
  unsigned int v47;
  char v48;
  _QWORD *v49;
  _QWORD v50[2];
  int v51;
  unsigned int v52;
  _QWORD v53[2];
  int v54;
  _QWORD v55[2];
  unsigned int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B1480);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B14A0);
  }
  v4 = v2 + 2;
  LOBYTE(v53[0]) = 0;
  v54 = -1;
  v5 = v2[6];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v5])(v44, v53, v2 + 2);
    v54 = v5;
  }
  v6 = v2 + 8;
  LOBYTE(v55[0]) = 0;
  v56 = -1;
  v7 = v2[12];
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v7])(v44, v55, v2 + 8);
    v56 = v7;
    LODWORD(v5) = v54;
  }
  LOBYTE(v44[0]) = 0;
  v45 = -1;
  if ((_DWORD)v5 == -1)
  {
LABEL_12:
    LOBYTE(v44[0]) = 0;
    v45 = -1;
    if ((_DWORD)v7 == -1
      || ((((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v7])(&v49, v44, v55),
           v45 = v7,
           (_DWORD)v7 != 8)
       || !v44[0]
        ? (v9 = 0)
        : (v9 = *(_DWORD *)v44[0]),
          ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v7])(&v49, v44),
          !v9))
    {
LABEL_88:
      v40 = v2[6];
      switch((int)v40)
      {
        case 3:
          if (v2[12] != 3)
            goto LABEL_108;
          goto LABEL_94;
        case 4:
          if (v2[12] != 4)
            goto LABEL_108;
LABEL_94:
          LODWORD(v44[0]) = *v6 & *v4;
          break;
        case 5:
          if (v2[12] != 5)
            goto LABEL_108;
          v44[0] = *(_QWORD *)v6 & *(_QWORD *)v4;
          break;
        case 6:
          if (v2[12] != 6)
            goto LABEL_108;
          LOBYTE(v44[0]) = *(_BYTE *)v6 & *(_BYTE *)v4;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825B14E8);
      }
      v45 = v40;
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 24) = -1;
      result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *))off_1E0FD7D20[v40])(&v49, a2 + 8, v44);
      *(_DWORD *)(a2 + 24) = v40;
      *(_DWORD *)(a2 + 32) = 0;
      if (v45 != -1)
        result = ((uint64_t (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v45])(&v49, v44);
      v39 = v56;
      if (v56 == -1)
        goto LABEL_101;
LABEL_100:
      result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v39])(v44, v55);
      goto LABEL_101;
    }
    goto LABEL_18;
  }
  v8 = v5;
  ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v5])(&v49, v44, v53);
  v45 = v5;
  if ((_DWORD)v5 != 8)
  {
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v5])(&v49, v44);
    LODWORD(v7) = v56;
    goto LABEL_12;
  }
  if (v44[0])
    v9 = *(_DWORD *)v44[0];
  else
    v9 = 0;
  ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v8])(&v49, v44);
  if (!v9)
    goto LABEL_88;
LABEL_18:
  v10 = v9;
  v11 = 24 * v9;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v9;
  v13 = v12 + 2;
  v14 = 24;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v16 = 0;
  LODWORD(v44[0]) = 0;
  v45 = 0;
  LODWORD(v46[0]) = 0;
  v47 = 0;
  do
  {
    if (v54 == 8)
    {
      if (v16 >= *(unsigned int *)v53[0])
        goto LABEL_104;
      v15 = v53[0] + v14 - 16;
      v17 = *(unsigned int *)(v53[0] + v14);
      v18 = v45;
      if (v45 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_31;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_26;
      }
      v49 = v44;
      ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD80E0[v17])(&v49, v44, v15);
    }
    else
    {
      v18 = v45;
      if (v45 == -1)
      {
        if (v54 == -1)
          goto LABEL_31;
      }
      else if (v54 == -1)
      {
LABEL_26:
        ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD7CC8[v18])(&v49, v44, v15);
        v45 = -1;
        goto LABEL_31;
      }
      v49 = v44;
      ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD80E0[v54])(&v49, v44, v53);
    }
LABEL_31:
    if (v56 == 8)
    {
      if (v16 >= *(unsigned int *)v55[0])
      {
LABEL_104:
        __break(0xC471u);
        JUMPOUT(0x1825B1440);
      }
      v15 = v55[0] + v14 - 16;
      v19 = *(unsigned int *)(v55[0] + v14);
      v20 = v47;
      if (v47 == -1)
      {
        if ((_DWORD)v19 == -1)
          goto LABEL_43;
      }
      else if ((_DWORD)v19 == -1)
      {
        goto LABEL_38;
      }
      v49 = v46;
      ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD80E0[v19])(&v49, v46, v15);
    }
    else
    {
      v20 = v47;
      if (v47 == -1)
      {
        if (v56 == -1)
          goto LABEL_43;
      }
      else if (v56 == -1)
      {
LABEL_38:
        ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD7CC8[v20])(&v49, v46, v15);
        v47 = -1;
        goto LABEL_43;
      }
      v49 = v46;
      ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD80E0[v56])(&v49, v46, v55);
    }
LABEL_43:
    v21 = v45;
    switch(v45)
    {
      case 3u:
        if (v47 != 3)
          goto LABEL_108;
        goto LABEL_47;
      case 4u:
        if (v47 != 4)
          goto LABEL_108;
LABEL_47:
        LODWORD(v42[0]) = v46[0] & LODWORD(v44[0]);
        break;
      case 5u:
        if (v47 != 5)
          goto LABEL_108;
        v42[0] = v46[0] & v44[0];
        break;
      case 6u:
        if (v47 != 6)
          goto LABEL_108;
        LOBYTE(v42[0]) = v46[0] & LOBYTE(v44[0]);
        break;
      default:
        goto LABEL_109;
    }
    v43 = v45;
    LOBYTE(v50[0]) = 0;
    v51 = -1;
    ((void (*)(char *, _QWORD *, _QWORD *))off_1E0FD7D20[v45])(&v48, v50, v42);
    v51 = v21;
    v52 = 0;
    if (v43 == -1 || (((void (*)(char *, _QWORD *))off_1E0FD7CC8[v43])(&v48, v42), !v52))
    {
      if (v16 >= *v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B1460);
      }
      v26 = v12[(unint64_t)v14 / 4];
      if ((_DWORD)v26 == -1)
      {
        if (v51 == -1)
          goto LABEL_65;
      }
      else if (v51 == -1)
      {
        ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v26])(v42, v13);
        v12[(unint64_t)v14 / 4] = -1;
        goto LABEL_65;
      }
      v42[0] = v13;
      ((void (*)(_QWORD *, unsigned int *, _QWORD *))off_1E0FD8188[v51])(v42, v13, v50);
LABEL_65:
      v24 = 1;
      v25 = v52;
      if (v52 == -1)
        goto LABEL_67;
LABEL_66:
      ((void (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v25])(v42, v50);
      goto LABEL_67;
    }
    if (v52 != 1)
    {
LABEL_108:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
      __break(0xC471u);
      JUMPOUT(0x1825B14C4);
    }
    v23 = v50[0];
    if (v50[0])
      *(_DWORD *)v50[0] += 2;
    v24 = 0;
    *(_QWORD *)(a2 + 8) = v23;
    *(_DWORD *)(a2 + 32) = 1;
    v25 = v52;
    if (v52 != -1)
      goto LABEL_66;
LABEL_67:
    if ((v24 & 1) == 0)
      goto LABEL_75;
    ++v16;
    v13 += 6;
    v14 += 24;
  }
  while (v10 != v16);
  v27 = *v12;
  v28 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v27 + 8));
  v29 = v28;
  *v28 = v27;
  if ((_DWORD)v27)
  {
    v30 = v28 + 6;
    v31 = 24 * v27;
    v32 = v12 + 6;
    do
    {
      *((_BYTE *)v30 - 16) = 0;
      v22 = v30 - 4;
      *v30 = -1;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
      {
        ((void (*)(_QWORD **, _DWORD *, unsigned int *))off_1E0FD8010[v33])(&v49, v22, v32 - 4);
        *v30 = v33;
      }
      v30 += 6;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  *(_QWORD *)(a2 + 8) = v29;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
LABEL_75:
  if (v47 != -1)
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v47])(&v49, v46);
  v47 = -1;
  if (v45 != -1)
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v45])(&v49, v44);
  v34 = *v12;
  if ((_DWORD)v34)
  {
    v35 = 24 * v34;
    v36 = v12 + 6;
    do
    {
      v22 = v36 - 4;
      v37 = *v36;
      if ((_DWORD)v37 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v37])(v44, v22);
      *v36 = -1;
      v36 += 6;
      v35 -= 24;
    }
    while (v35);
  }
  result = WTF::fastFree((WTF *)v12, v22);
  v39 = v56;
  if (v56 != -1)
    goto LABEL_100;
LABEL_101:
  v56 = -1;
  if (v54 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v54])(v44, v53);
  return result;
}

uint64_t WGSL::constantMinus@<X0>(uint64_t result@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  int v5;
  uint64_t v6;
  float *v7;
  uint64_t (*v8)();
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  _DWORD *v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  float *v44;
  float *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v110;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int *v127;
  _DWORD *v128;
  unsigned int v129;
  double v130;
  int v131;
  unsigned int v132;
  double *v133;
  double v134;
  int v135;
  unsigned int *v136;
  int v137;
  unsigned int v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = **a2;
  if (v5 == 1)
  {
    LOBYTE(v127) = 0;
    v129 = -1;
    v6 = v4[6];
    if ((_DWORD)v6 == -1)
    {
LABEL_225:
      __break(0xC471u);
      JUMPOUT(0x1825B278CLL);
    }
    v7 = (float *)(v4 + 2);
    v8 = off_1E0FD8010[v6];
    ((void (*)(double **, unsigned int **, int *))v8)(&v133, &v127, v4 + 2);
    v129 = v6;
    LOBYTE(v133) = 0;
    v135 = -1;
    ((void (*)(double *, double **, unsigned int **))v8)(&v122, &v133, &v127);
    v9 = 0;
    v135 = v6;
    if ((_DWORD)v6 == 8)
    {
      if (v133)
        v9 = *(_DWORD *)v133;
      else
        v9 = 0;
    }
    result = ((uint64_t (*)(double *, double **))off_1E0FD7CC8[v6])(&v122, &v133);
    if (!v9)
    {
      switch(v4[6])
      {
        case 0:
          *(float *)(a3 + 8) = -*v7;
          *(_DWORD *)(a3 + 24) = 0;
          goto LABEL_188;
        case 1:
          _H0 = *(_WORD *)v7;
          __asm { FCVT            S0, H0 }
          _S0 = -_S0;
          __asm { FCVT            H0, S0 }
          *(_WORD *)(a3 + 8) = LOWORD(_S0);
          v110 = 1;
          goto LABEL_187;
        case 2:
          *(double *)(a3 + 8) = -*(double *)v7;
          v110 = 2;
          goto LABEL_187;
        case 3:
          *(_DWORD *)(a3 + 8) = -*(_DWORD *)v7;
          v110 = 3;
          goto LABEL_187;
        case 4:
          *(_DWORD *)(a3 + 8) = -*(_DWORD *)v7;
          v110 = 4;
          goto LABEL_187;
        case 5:
          *(_QWORD *)(a3 + 8) = -*(_QWORD *)v7;
          v110 = 5;
LABEL_187:
          *(_DWORD *)(a3 + 24) = v110;
LABEL_188:
          *(_DWORD *)(a3 + 32) = 0;
          v74 = v129;
          if (v129 != -1)
            return ((uint64_t (*)(double **, unsigned int **))off_1E0FD7CC8[v74])(&v133, &v127);
          return result;
        default:
          goto LABEL_225;
      }
    }
    v48 = 24 * v9;
    v49 = (unsigned int *)WTF::fastMalloc((WTF *)(v48 + 8));
    *v49 = v9;
    v50 = 6;
    bzero(v49 + 2, 24 * ((v48 - 24) / 0x18uLL) + 24);
    v52 = 0;
    LODWORD(v122) = 0;
    v124 = 0;
    while (2)
    {
      if (v129 == 8)
      {
        if (v52 >= *v127)
        {
          __break(0xC471u);
          JUMPOUT(0x1825B2624);
        }
        v51 = (uint64_t)&v127[v50 - 4];
        v53 = v127[v50];
        v54 = v124;
        if (v124 != -1)
        {
          if ((_DWORD)v53 == -1)
          {
LABEL_221:
            ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v54])(&v133, &v122, v51);
            v124 = -1;
            goto LABEL_222;
          }
          goto LABEL_81;
        }
        if ((_DWORD)v53 != -1)
        {
LABEL_81:
          v133 = &v122;
          ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v53])(&v133, &v122, v51);
        }
      }
      else
      {
        v54 = v124;
        if (v124 == -1)
        {
          if (v129 == -1)
          {
LABEL_222:
            __break(0xC471u);
            JUMPOUT(0x1825B2744);
          }
        }
        else if (v129 == -1)
        {
          goto LABEL_221;
        }
        v133 = &v122;
        ((void (*)(double **, double *, unsigned int **))off_1E0FD80E0[v129])(&v133, &v122, &v127);
      }
      switch(v124)
      {
        case 0u:
          *(float *)&v134 = -*(float *)&v122;
          goto LABEL_88;
        case 1u:
          _H0 = LOWORD(v122);
          __asm { FCVT            S0, H0 }
          _S0 = -_S0;
          __asm { FCVT            H0, S0 }
          LOWORD(v134) = LOWORD(_S0);
          goto LABEL_88;
        case 2u:
          v134 = -v122;
          goto LABEL_88;
        case 3u:
        case 4u:
          LODWORD(v134) = -LODWORD(v122);
          goto LABEL_88;
        case 5u:
          *(_QWORD *)&v134 = -*(_QWORD *)&v122;
LABEL_88:
          LODWORD(v136) = v124;
          v137 = 0;
          if (v52 >= *v49)
          {
            __break(0xC471u);
            JUMPOUT(0x1825B2604);
          }
          v121 = (uint64_t)&v49[v50 - 4];
          ((void (*)(uint64_t *))off_1E0FD8188[v124])(&v121);
          if (v137 != -1)
            ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v137])(&v121, &v134);
          ++v52;
          v50 += 6;
          if (v9 != v52)
            continue;
          v62 = *v49;
          v63 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v62 + 8));
          v65 = v63;
          *v63 = v62;
          if ((_DWORD)v62)
          {
            v66 = v63 + 6;
            v67 = 24 * v62;
            v68 = v49 + 6;
            do
            {
              *((_BYTE *)v66 - 16) = 0;
              v64 = v66 - 4;
              *v66 = -1;
              v69 = *v68;
              if ((_DWORD)v69 != -1)
              {
                ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v69])(&v133, v64, v68 - 4);
                *v66 = v69;
              }
              v66 += 6;
              v68 += 6;
              v67 -= 24;
            }
            while (v67);
          }
          *(_QWORD *)(a3 + 8) = v65;
          *(_DWORD *)(a3 + 24) = 8;
          *(_DWORD *)(a3 + 32) = 0;
          if (v124 != -1)
            ((void (*)(double **, double *))off_1E0FD7CC8[v124])(&v133, &v122);
          v70 = *v49;
          if ((_DWORD)v70)
          {
            v71 = 24 * v70;
            v72 = v49 + 6;
            do
            {
              v64 = v72 - 4;
              v73 = *v72;
              if ((_DWORD)v73 != -1)
                ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v73])(&v133, v64);
              *v72 = -1;
              v72 += 6;
              v71 -= 24;
            }
            while (v71);
          }
          result = WTF::fastFree((WTF *)v49, v64);
          v74 = v129;
          if (v129 == -1)
            return result;
          return ((uint64_t (*)(double **, unsigned int **))off_1E0FD7CC8[v74])(&v133, &v127);
        default:
          goto LABEL_222;
      }
    }
  }
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B2704);
  }
  v10 = v4[6];
  if ((_DWORD)v10 != 9)
  {
    v44 = (float *)(v4 + 2);
    LOBYTE(v133) = 0;
    v135 = -1;
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(unsigned int **, double **, int *))off_1E0FD8010[v10])(&v127, &v133, v4 + 2);
      v135 = v10;
    }
    v45 = (float *)(v4 + 8);
    LOBYTE(v136) = 0;
    v138 = -1;
    v46 = v4[12];
    if ((_DWORD)v46 != -1)
    {
      result = ((uint64_t (*)(unsigned int **, unsigned int **, int *))off_1E0FD8010[v46])(&v127, &v136, v4 + 8);
      v138 = v46;
      LODWORD(v10) = v135;
    }
    LOBYTE(v127) = 0;
    v129 = -1;
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(double *, unsigned int **, double **))off_1E0FD8010[v10])(&v122, &v127, &v133);
      v129 = v10;
      if ((_DWORD)v10 == 8)
      {
        if (*(double *)&v127 == 0.0)
          v47 = 0;
        else
          v47 = *v127;
        result = ((uint64_t (*)(double *, unsigned int **))_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_)(&v122, &v127);
        if (!v47)
        {
LABEL_193:
          switch(v4[6])
          {
            case 0:
              if (v4[12])
                goto LABEL_223;
              *(float *)(a3 + 8) = *v44 - *v45;
              *(_DWORD *)(a3 + 24) = 0;
              *(_DWORD *)(a3 + 32) = 0;
              v106 = v138;
              if (v138 == -1)
                goto LABEL_180;
              goto LABEL_179;
            case 1:
              if (v4[12] != 1)
                goto LABEL_223;
              _H0 = *(_WORD *)v44;
              _H1 = *(_WORD *)v45;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 - _S1;
              __asm { FCVT            H0, S0 }
              *(_WORD *)(a3 + 8) = LOWORD(_S0);
              *(_DWORD *)(a3 + 24) = 1;
              *(_DWORD *)(a3 + 32) = 0;
              v106 = v138;
              if (v138 == -1)
                goto LABEL_180;
              goto LABEL_179;
            case 2:
              if (v4[12] != 2)
                goto LABEL_223;
              *(double *)(a3 + 8) = *(double *)v44 - *(double *)v45;
              *(_DWORD *)(a3 + 24) = 2;
              *(_DWORD *)(a3 + 32) = 0;
              v106 = v138;
              if (v138 == -1)
                goto LABEL_180;
              goto LABEL_179;
            case 3:
              if (v4[12] != 3)
                goto LABEL_223;
              *(_DWORD *)(a3 + 8) = *(_DWORD *)v44 - *(_DWORD *)v45;
              *(_DWORD *)(a3 + 24) = 3;
              *(_DWORD *)(a3 + 32) = 0;
              v106 = v138;
              if (v138 == -1)
                goto LABEL_180;
              goto LABEL_179;
            case 4:
              if (v4[12] != 4)
                goto LABEL_223;
              *(_DWORD *)(a3 + 8) = *(_DWORD *)v44 - *(_DWORD *)v45;
              *(_DWORD *)(a3 + 24) = 4;
              *(_DWORD *)(a3 + 32) = 0;
              v106 = v138;
              if (v138 == -1)
                goto LABEL_180;
              goto LABEL_179;
            case 5:
              if (v4[12] != 5)
                goto LABEL_223;
              *(_QWORD *)(a3 + 8) = *(_QWORD *)v44 - *(_QWORD *)v45;
              *(_DWORD *)(a3 + 24) = 5;
              *(_DWORD *)(a3 + 32) = 0;
              v106 = v138;
              if (v138 == -1)
                goto LABEL_180;
              goto LABEL_179;
            default:
              __break(0xC471u);
              JUMPOUT(0x1825B27ACLL);
          }
        }
        goto LABEL_122;
      }
      result = ((uint64_t (*)(double *, unsigned int **))off_1E0FD7CC8[v10])(&v122, &v127);
      LODWORD(v46) = v138;
    }
    LOBYTE(v127) = 0;
    v129 = -1;
    if ((_DWORD)v46 == -1)
      goto LABEL_193;
    v75 = v46;
    ((void (*)(double *, unsigned int **, unsigned int **))off_1E0FD8010[v46])(&v122, &v127, &v136);
    v129 = v46;
    if ((_DWORD)v46 != 8 || *(double *)&v127 == 0.0)
      v47 = 0;
    else
      v47 = *v127;
    result = ((uint64_t (*)(double *, unsigned int **))off_1E0FD7CC8[v75])(&v122, &v127);
    if (!v47)
      goto LABEL_193;
LABEL_122:
    v119 = a3;
    v80 = 24 * v47;
    v81 = (unsigned int *)WTF::fastMalloc((WTF *)(v80 + 8));
    *v81 = v47;
    v82 = 6;
    bzero(v81 + 2, 24 * ((v80 - 24) / 0x18uLL) + 24);
    v84 = 0;
    LODWORD(v127) = 0;
    v129 = 0;
    LODWORD(v130) = 0;
    v132 = 0;
    while (1)
    {
      if (v135 == 8)
      {
        if (v84 >= *(unsigned int *)v133)
          goto LABEL_214;
        v83 = (uint64_t)&v133[(unint64_t)v82 / 2 - 2];
        v85 = LODWORD(v133[(unint64_t)v82 / 2]);
        v86 = v129;
        if (v129 == -1)
        {
          if ((_DWORD)v85 == -1)
            goto LABEL_136;
        }
        else if ((_DWORD)v85 == -1)
        {
          goto LABEL_131;
        }
        v122 = COERCE_DOUBLE(&v127);
        ((void (*)(double *, unsigned int **, uint64_t))off_1E0FD80E0[v85])(&v122, &v127, v83);
      }
      else
      {
        v86 = v129;
        if (v129 == -1)
        {
          if (v135 == -1)
            goto LABEL_136;
        }
        else if (v135 == -1)
        {
LABEL_131:
          ((void (*)(double *, unsigned int **, uint64_t))off_1E0FD7CC8[v86])(&v122, &v127, v83);
          v129 = -1;
          goto LABEL_136;
        }
        v122 = COERCE_DOUBLE(&v127);
        ((void (*)(double *, unsigned int **, double **))off_1E0FD80E0[v135])(&v122, &v127, &v133);
      }
LABEL_136:
      if (v138 == 8)
      {
        if (v84 >= *v136)
        {
LABEL_214:
          __break(0xC471u);
          JUMPOUT(0x1825B2644);
        }
        v83 = (uint64_t)&v136[v82 - 4];
        v87 = v136[v82];
        v88 = v132;
        if (v132 != -1)
        {
          if ((_DWORD)v87 != -1)
            goto LABEL_147;
LABEL_143:
          ((void (*)(double *, double *, uint64_t))off_1E0FD7CC8[v88])(&v122, &v130, v83);
          v132 = -1;
          goto LABEL_148;
        }
        if ((_DWORD)v87 != -1)
        {
LABEL_147:
          v122 = COERCE_DOUBLE(&v130);
          ((void (*)(double *, double *, uint64_t))off_1E0FD80E0[v87])(&v122, &v130, v83);
        }
      }
      else
      {
        v88 = v132;
        if (v132 != -1)
        {
          if (v138 != -1)
            goto LABEL_145;
          goto LABEL_143;
        }
        if (v138 != -1)
        {
LABEL_145:
          v122 = COERCE_DOUBLE(&v130);
          ((void (*)(double *, double *, unsigned int **))off_1E0FD80E0[v138])(&v122, &v130, &v136);
        }
      }
LABEL_148:
      switch(v129)
      {
        case 0u:
          if (v132)
            goto LABEL_223;
          *(float *)&v123 = *(float *)&v127 - *(float *)&v130;
          break;
        case 1u:
          if (v132 != 1)
            goto LABEL_223;
          _H0 = (__int16)v127;
          _H1 = LOWORD(v130);
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 - _S1;
          __asm { FCVT            H0, S0 }
          LOWORD(v123) = LOWORD(_S0);
          break;
        case 2u:
          if (v132 != 2)
            goto LABEL_223;
          v123 = *(double *)&v127 - v130;
          break;
        case 3u:
          if (v132 != 3)
            goto LABEL_223;
          goto LABEL_156;
        case 4u:
          if (v132 != 4)
            goto LABEL_223;
LABEL_156:
          LODWORD(v123) = (_DWORD)v127 - LODWORD(v130);
          break;
        case 5u:
          if (v132 != 5)
            goto LABEL_223;
          *(_QWORD *)&v123 = (char *)v127 - *(_QWORD *)&v130;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825B276CLL);
      }
      v125 = v129;
      v126 = 0;
      if (v84 >= *v81)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B2664);
      }
      v121 = (uint64_t)&v81[v82 - 4];
      ((void (*)(uint64_t *))off_1E0FD8188[v129])(&v121);
      if (v126 != -1)
        ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v126])(&v121, &v123);
      ++v84;
      v82 += 6;
      if (v47 == v84)
      {
        v94 = *v81;
        v95 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v94 + 8));
        v97 = v95;
        *v95 = v94;
        if ((_DWORD)v94)
        {
          v98 = v95 + 6;
          v99 = 24 * v94;
          v100 = v81 + 6;
          do
          {
            *((_BYTE *)v98 - 16) = 0;
            v96 = v98 - 4;
            *v98 = -1;
            v101 = *v100;
            if ((_DWORD)v101 != -1)
            {
              ((void (*)(double *, _DWORD *, unsigned int *))off_1E0FD8010[v101])(&v122, v96, v100 - 4);
              *v98 = v101;
            }
            v98 += 6;
            v100 += 6;
            v99 -= 24;
          }
          while (v99);
        }
        *(_QWORD *)(v119 + 8) = v97;
        *(_DWORD *)(v119 + 24) = 8;
        *(_DWORD *)(v119 + 32) = 0;
        if (v132 != -1)
          ((void (*)(double *, double *))off_1E0FD7CC8[v132])(&v122, &v130);
        v132 = -1;
        if (v129 != -1)
          ((void (*)(double *, unsigned int **))off_1E0FD7CC8[v129])(&v122, &v127);
        v102 = *v81;
        if ((_DWORD)v102)
        {
          v103 = 24 * v102;
          v104 = v81 + 6;
          do
          {
            v96 = v104 - 4;
            v105 = *v104;
            if ((_DWORD)v105 != -1)
              ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v105])(&v127, v96);
            *v104 = -1;
            v104 += 6;
            v103 -= 24;
          }
          while (v103);
        }
        result = WTF::fastFree((WTF *)v81, v96);
        v106 = v138;
        if (v138 != -1)
LABEL_179:
          result = ((uint64_t (*)(unsigned int **, unsigned int **))off_1E0FD7CC8[v106])(&v127, &v136);
LABEL_180:
        v138 = -1;
        if (v135 != -1)
          return ((uint64_t (*)(unsigned int **, double **))off_1E0FD7CC8[v135])(&v127, &v133);
        return result;
      }
    }
  }
  if (v4[12] != 9 || *(_DWORD *)(result + 48) != 2)
LABEL_223:
    std::__throw_bad_variant_access[abi:sn180100]();
  v11 = v4[2];
  v12 = v4[3];
  v13 = v12 * v11;
  if (!((_DWORD)v12 * (_DWORD)v11))
  {
    *(_QWORD *)(a3 + 8) = v11 | (v12 << 32);
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 9;
    *(_DWORD *)(a3 + 32) = 0;
    return result;
  }
  v116 = v11 | (v12 << 32);
  v118 = a3;
  v120 = *(_QWORD *)result;
  v14 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v13 + 8));
  *v14 = v13;
  v117 = v14 + 2;
  bzero(v14 + 2, 24 * ((24 * (unint64_t)v13 - 24) / 0x18) + 24);
  v15 = 0;
  do
  {
    v16 = (unsigned int *)*((_QWORD *)v4 + 2);
    if (v15 >= *v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1825B2684);
    }
    v17 = &v16[6 * v15];
    LOBYTE(v133) = 0;
    v135 = -1;
    v18 = v17[6];
    if ((_DWORD)v18 != -1)
    {
      ((void (*)(double *, double **, unsigned int *))off_1E0FD8010[v18])(&v122, &v133, v17 + 2);
      v135 = v18;
    }
    v19 = (unsigned int *)*((_QWORD *)v4 + 5);
    if (v15 >= *v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1825B26A4);
    }
    v20 = &v19[6 * v15];
    LOBYTE(v136) = 0;
    v138 = -1;
    v21 = v20[6];
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(double *, unsigned int **, unsigned int *))off_1E0FD8010[v21])(&v122, &v136, v20 + 2);
      v138 = v21;
    }
    v22 = WTF::fastMalloc((WTF *)0x38);
    v23 = (unsigned int *)v22;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_DWORD *)v22 = 2;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    v121 = v22;
    if (v135 == -1)
    {
      *(_DWORD *)(v22 + 24) = -1;
      v25 = (unsigned int *)(v22 + 32);
      v26 = v138;
      if (v138 == -1)
      {
        v24 = 0;
LABEL_26:
        ((void (*)(double *, unsigned int *))off_1E0FD7CC8[v24])(&v122, v25);
        v23[12] = -1;
LABEL_27:
        WGSL::constantMinus(&v127, v120, &v121);
        v28 = *v23;
        if (!(_DWORD)v28)
          goto LABEL_34;
        goto LABEL_30;
      }
    }
    else
    {
      *(_QWORD *)&v122 = v22 + 8;
      ((void (*)(double *))off_1E0FD80E0[v135])(&v122);
      if (*v23 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B26C4);
      }
      v24 = v23[12];
      v25 = v23 + 8;
      v26 = v138;
      if ((_DWORD)v24 == -1)
      {
        if (v138 == 0xFFFFFFFFLL)
          goto LABEL_27;
      }
      else if (v138 == 0xFFFFFFFFLL)
      {
        goto LABEL_26;
      }
    }
    v122 = *(double *)&v25;
    ((void (*)(double *))off_1E0FD80E0[v26])(&v122);
    WGSL::constantMinus(&v127, v120, &v121);
    v28 = *v23;
    if (!(_DWORD)v28)
      goto LABEL_34;
LABEL_30:
    v29 = 24 * v28;
    v30 = v23 + 6;
    do
    {
      v27 = v30 - 4;
      v31 = *v30;
      if ((_DWORD)v31 != -1)
        ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v31])(&v122, v27);
      *v30 = -1;
      v30 += 6;
      v29 -= 24;
    }
    while (v29);
LABEL_34:
    WTF::fastFree((WTF *)v23, v27);
    if (v138 != -1)
      ((void (*)(double *, unsigned int **))off_1E0FD7CC8[v138])(&v122, &v136);
    v138 = -1;
    if (v135 != -1)
      ((void (*)(double *, double **))off_1E0FD7CC8[v135])(&v122, &v133);
    v33 = v131;
    if (v131)
    {
      if (v131 != 1)
        goto LABEL_223;
      v34 = v128;
      if (v128)
        *v128 += 2;
      *(_QWORD *)(v118 + 8) = v34;
      *(_DWORD *)(v118 + 32) = 1;
    }
    else
    {
      if (v15 >= *v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B26E4);
      }
      v35 = &v117[6 * v15];
      v36 = v35[4];
      if ((_DWORD)v36 == -1)
      {
        if (LODWORD(v130) == -1)
          goto LABEL_49;
      }
      else if (LODWORD(v130) == -1)
      {
        ((void (*)(double **, unsigned int *))off_1E0FD7CC8[v36])(&v133, &v117[6 * v15]);
        v35[4] = -1;
        goto LABEL_49;
      }
      v133 = (double *)&v117[6 * v15];
      ((void (*)(double **, double *, _DWORD **))off_1E0FD8188[LODWORD(v130)])(&v133, v133, &v128);
    }
LABEL_49:
    if (v131 != -1)
      ((void (*)(double **, _DWORD **))off_1E0FD7DD0[v131])(&v133, &v128);
    if (v33)
      goto LABEL_114;
    ++v15;
    v37 = *v14;
  }
  while (v15 < v37);
  v38 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v37 + 8));
  v39 = v38;
  *v38 = v37;
  if ((_DWORD)v37)
  {
    v40 = v38 + 6;
    v41 = 24 * v37;
    v42 = v14 + 6;
    do
    {
      *((_BYTE *)v40 - 16) = 0;
      v32 = v40 - 4;
      *v40 = -1;
      v43 = *v42;
      if ((_DWORD)v43 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v43])(&v133, v32, v42 - 4);
        *v40 = v43;
      }
      v40 += 6;
      v42 += 6;
      v41 -= 24;
    }
    while (v41);
  }
  *(_QWORD *)(v118 + 8) = v116;
  *(_QWORD *)(v118 + 16) = v39;
  *(_DWORD *)(v118 + 24) = 9;
  *(_DWORD *)(v118 + 32) = 0;
LABEL_114:
  v76 = *v14;
  if ((_DWORD)v76)
  {
    v77 = 24 * v76;
    v78 = v14 + 6;
    do
    {
      v32 = v78 - 4;
      v79 = *v78;
      if ((_DWORD)v79 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v79])(&v133, v32);
      *v78 = -1;
      v78 += 6;
      v77 -= 24;
    }
    while (v77);
  }
  return WTF::fastFree((WTF *)v14, v32);
}

uint64_t WGSL::constantAdd@<X0>(uint64_t result@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  unsigned int *v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  float *v40;
  float *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *v91;
  double v92[2];
  unsigned int v93;
  int v94;
  unsigned int *v95;
  _DWORD *v96;
  unsigned int v97;
  double v98;
  int v99;
  unsigned int v100;
  _QWORD v101[2];
  int v102;
  _QWORD v103[2];
  unsigned int v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = **a2;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B3588);
  }
  v6 = v4[6];
  if ((_DWORD)v6 != 9)
  {
    if (v5 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1825B35C8);
    }
    v40 = (float *)(v4 + 2);
    LOBYTE(v101[0]) = 0;
    v102 = -1;
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(unsigned int **, _QWORD *, unsigned int *))off_1E0FD8010[v6])(&v95, v101, v4 + 2);
      v102 = v6;
    }
    v41 = (float *)(v4 + 8);
    LOBYTE(v103[0]) = 0;
    v104 = -1;
    v42 = v4[12];
    if ((_DWORD)v42 != -1)
    {
      result = ((uint64_t (*)(unsigned int **, _QWORD *, unsigned int *))off_1E0FD8010[v42])(&v95, v103, v4 + 8);
      v104 = v42;
      LODWORD(v6) = v102;
    }
    LOBYTE(v95) = 0;
    v97 = -1;
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(double **, unsigned int **, _QWORD *))off_1E0FD8010[v6])(&v91, &v95, v101);
      v97 = v6;
      if ((_DWORD)v6 == 8)
      {
        if (*(double *)&v95 == 0.0)
          v43 = 0;
        else
          v43 = *v95;
        result = ((uint64_t (*)(double **, unsigned int **))_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_)(&v91, &v95);
        if (!v43)
        {
LABEL_141:
          switch(v4[6])
          {
            case 0u:
              if (v4[12])
                goto LABEL_169;
              *(float *)(a3 + 8) = *v40 + *v41;
              *(_DWORD *)(a3 + 24) = 0;
              *(_DWORD *)(a3 + 32) = 0;
              v79 = v104;
              if (v104 == -1)
                goto LABEL_136;
              goto LABEL_135;
            case 1u:
              if (v4[12] != 1)
                goto LABEL_169;
              _H0 = *(_WORD *)v40;
              _H1 = *(_WORD *)v41;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 + _S1;
              __asm { FCVT            H0, S0 }
              *(_WORD *)(a3 + 8) = LOWORD(_S0);
              *(_DWORD *)(a3 + 24) = 1;
              *(_DWORD *)(a3 + 32) = 0;
              v79 = v104;
              if (v104 == -1)
                goto LABEL_136;
              goto LABEL_135;
            case 2u:
              if (v4[12] != 2)
                goto LABEL_169;
              *(double *)(a3 + 8) = *(double *)v40 + *(double *)v41;
              *(_DWORD *)(a3 + 24) = 2;
              *(_DWORD *)(a3 + 32) = 0;
              v79 = v104;
              if (v104 == -1)
                goto LABEL_136;
              goto LABEL_135;
            case 3u:
              if (v4[12] != 3)
                goto LABEL_169;
              *(_DWORD *)(a3 + 8) = *(_DWORD *)v41 + *(_DWORD *)v40;
              *(_DWORD *)(a3 + 24) = 3;
              *(_DWORD *)(a3 + 32) = 0;
              v79 = v104;
              if (v104 == -1)
                goto LABEL_136;
              goto LABEL_135;
            case 4u:
              if (v4[12] != 4)
                goto LABEL_169;
              *(_DWORD *)(a3 + 8) = *(_DWORD *)v41 + *(_DWORD *)v40;
              *(_DWORD *)(a3 + 24) = 4;
              *(_DWORD *)(a3 + 32) = 0;
              v79 = v104;
              if (v104 == -1)
                goto LABEL_136;
              goto LABEL_135;
            case 5u:
              if (v4[12] != 5)
                goto LABEL_169;
              *(_QWORD *)(a3 + 8) = *(_QWORD *)v41 + *(_QWORD *)v40;
              *(_DWORD *)(a3 + 24) = 5;
              *(_DWORD *)(a3 + 32) = 0;
              v79 = v104;
              if (v104 == -1)
                goto LABEL_136;
              goto LABEL_135;
            default:
              __break(0xC471u);
              JUMPOUT(0x1825B3610);
          }
        }
        goto LABEL_78;
      }
      result = ((uint64_t (*)(double **, unsigned int **))off_1E0FD7CC8[v6])(&v91, &v95);
      LODWORD(v42) = v104;
    }
    LOBYTE(v95) = 0;
    v97 = -1;
    if ((_DWORD)v42 == -1)
      goto LABEL_141;
    v44 = v42;
    ((void (*)(double **, unsigned int **, _QWORD *))off_1E0FD8010[v42])(&v91, &v95, v103);
    v97 = v42;
    if ((_DWORD)v42 != 8 || *(double *)&v95 == 0.0)
      v43 = 0;
    else
      v43 = *v95;
    result = ((uint64_t (*)(double **, unsigned int **))off_1E0FD7CC8[v44])(&v91, &v95);
    if (!v43)
      goto LABEL_141;
LABEL_78:
    v88 = a3;
    v49 = 24 * v43;
    v50 = (unsigned int *)WTF::fastMalloc((WTF *)(v49 + 8));
    *v50 = v43;
    v51 = 24;
    bzero(v50 + 2, 24 * ((v49 - 24) / 0x18uLL) + 24);
    v53 = 0;
    LODWORD(v95) = 0;
    v97 = 0;
    LODWORD(v98) = 0;
    v100 = 0;
    while (1)
    {
      if (v102 == 8)
      {
        if (v53 >= *(unsigned int *)v101[0])
          goto LABEL_160;
        v52 = v101[0] + v51 - 16;
        v54 = *(unsigned int *)(v101[0] + v51);
        v55 = v97;
        if (v97 == -1)
        {
          if ((_DWORD)v54 == -1)
            goto LABEL_92;
        }
        else if ((_DWORD)v54 == -1)
        {
          goto LABEL_87;
        }
        v91 = (double *)&v95;
        ((void (*)(double **, unsigned int **, uint64_t))off_1E0FD80E0[v54])(&v91, &v95, v52);
      }
      else
      {
        v55 = v97;
        if (v97 == -1)
        {
          if (v102 == -1)
            goto LABEL_92;
        }
        else if (v102 == -1)
        {
LABEL_87:
          ((void (*)(double **, unsigned int **, uint64_t))off_1E0FD7CC8[v55])(&v91, &v95, v52);
          v97 = -1;
          goto LABEL_92;
        }
        v91 = (double *)&v95;
        ((void (*)(double **, unsigned int **, _QWORD *))off_1E0FD80E0[v102])(&v91, &v95, v101);
      }
LABEL_92:
      if (v104 == 8)
      {
        if (v53 >= *(unsigned int *)v103[0])
        {
LABEL_160:
          __break(0xC471u);
          JUMPOUT(0x1825B34C8);
        }
        v52 = v103[0] + v51 - 16;
        v56 = *(unsigned int *)(v103[0] + v51);
        v57 = v100;
        if (v100 != -1)
        {
          if ((_DWORD)v56 != -1)
            goto LABEL_103;
LABEL_99:
          ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v57])(&v91, &v98, v52);
          v100 = -1;
          goto LABEL_104;
        }
        if ((_DWORD)v56 != -1)
        {
LABEL_103:
          v91 = &v98;
          ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v56])(&v91, &v98, v52);
        }
      }
      else
      {
        v57 = v100;
        if (v100 != -1)
        {
          if (v104 != -1)
            goto LABEL_101;
          goto LABEL_99;
        }
        if (v104 != -1)
        {
LABEL_101:
          v91 = &v98;
          ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v104])(&v91, &v98, v103);
        }
      }
LABEL_104:
      switch(v97)
      {
        case 0u:
          if (v100)
            goto LABEL_169;
          *(float *)v92 = *(float *)&v95 + *(float *)&v98;
          break;
        case 1u:
          if (v100 != 1)
            goto LABEL_169;
          _H0 = (__int16)v95;
          _H1 = LOWORD(v98);
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 + _S1;
          __asm { FCVT            H0, S0 }
          LOWORD(v92[0]) = LOWORD(_S0);
          break;
        case 2u:
          if (v100 != 2)
            goto LABEL_169;
          v92[0] = *(double *)&v95 + v98;
          break;
        case 3u:
          if (v100 != 3)
            goto LABEL_169;
          goto LABEL_112;
        case 4u:
          if (v100 != 4)
            goto LABEL_169;
LABEL_112:
          LODWORD(v92[0]) = LODWORD(v98) + (_DWORD)v95;
          break;
        case 5u:
          if (v100 != 5)
            goto LABEL_169;
          *(_QWORD *)&v92[0] = (char *)v95 + *(_QWORD *)&v98;
          break;
        default:
          goto LABEL_170;
      }
      v93 = v97;
      v94 = 0;
      if (v53 >= *v50)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B34E8);
      }
      v90 = (uint64_t)&v50[(unint64_t)v51 / 4 - 4];
      ((void (*)(uint64_t *))off_1E0FD8188[v97])(&v90);
      if (v94 != -1)
        ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v94])(&v90, v92);
      ++v53;
      v51 += 24;
      if (v43 == v53)
      {
        v67 = *v50;
        v68 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v67 + 8));
        v70 = v68;
        *v68 = v67;
        if ((_DWORD)v67)
        {
          v71 = v68 + 6;
          v72 = 24 * v67;
          v73 = v50 + 6;
          do
          {
            *((_BYTE *)v71 - 16) = 0;
            v69 = v71 - 4;
            *v71 = -1;
            v74 = *v73;
            if ((_DWORD)v74 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v74])(&v91, v69, v73 - 4);
              *v71 = v74;
            }
            v71 += 6;
            v73 += 6;
            v72 -= 24;
          }
          while (v72);
        }
        *(_QWORD *)(v88 + 8) = v70;
        *(_DWORD *)(v88 + 24) = 8;
        *(_DWORD *)(v88 + 32) = 0;
        if (v100 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v100])(&v91, &v98);
        v100 = -1;
        if (v97 != -1)
          ((void (*)(double **, unsigned int **))off_1E0FD7CC8[v97])(&v91, &v95);
        v75 = *v50;
        if ((_DWORD)v75)
        {
          v76 = 24 * v75;
          v77 = v50 + 6;
          do
          {
            v69 = v77 - 4;
            v78 = *v77;
            if ((_DWORD)v78 != -1)
              ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v78])(&v95, v69);
            *v77 = -1;
            v77 += 6;
            v76 -= 24;
          }
          while (v76);
        }
        result = WTF::fastFree((WTF *)v50, v69);
        v79 = v104;
        if (v104 != -1)
LABEL_135:
          result = ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v79])(&v95, v103);
LABEL_136:
        v104 = -1;
        if (v102 != -1)
          return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v102])(&v95, v101);
        return result;
      }
    }
  }
  if (v5 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B35A8);
  }
  if (v4[12] != 9 || *(_DWORD *)(result + 48) != 2)
  {
LABEL_169:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_170:
    __break(0xC471u);
    JUMPOUT(0x1825B35ECLL);
  }
  v7 = v4[2];
  v8 = v4[3];
  v9 = v8 * v7;
  if (!((_DWORD)v8 * (_DWORD)v7))
  {
    *(_QWORD *)(a3 + 8) = v7 | (v8 << 32);
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 9;
    *(_DWORD *)(a3 + 32) = 0;
    return result;
  }
  v85 = v7 | (v8 << 32);
  v87 = a3;
  v89 = *(_QWORD *)result;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v9 + 8));
  *v10 = v9;
  v86 = v10 + 2;
  bzero(v10 + 2, 24 * ((24 * (unint64_t)v9 - 24) / 0x18) + 24);
  v11 = 0;
  do
  {
    v12 = (unsigned int *)*((_QWORD *)v4 + 2);
    if (v11 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1825B3508);
    }
    v13 = &v12[6 * v11];
    LOBYTE(v101[0]) = 0;
    v102 = -1;
    v14 = v13[6];
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(double **, _QWORD *, unsigned int *))off_1E0FD8010[v14])(&v91, v101, v13 + 2);
      v102 = v14;
    }
    v15 = (unsigned int *)*((_QWORD *)v4 + 5);
    if (v11 >= *v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1825B3528);
    }
    v16 = &v15[6 * v11];
    LOBYTE(v103[0]) = 0;
    v104 = -1;
    v17 = v16[6];
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(double **, _QWORD *, unsigned int *))off_1E0FD8010[v17])(&v91, v103, v16 + 2);
      v104 = v17;
    }
    v18 = WTF::fastMalloc((WTF *)0x38);
    v19 = (unsigned int *)v18;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_DWORD *)v18 = 2;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    v90 = v18;
    if (v102 == -1)
    {
      *(_DWORD *)(v18 + 24) = -1;
      v21 = (double *)(v18 + 32);
      v22 = v104;
      if (v104 == -1)
      {
        v20 = 0;
LABEL_22:
        ((void (*)(double **, double *))off_1E0FD7CC8[v20])(&v91, v21);
        v19[12] = -1;
LABEL_23:
        WGSL::constantAdd(&v95, v89, &v90);
        v24 = *v19;
        if (!(_DWORD)v24)
          goto LABEL_30;
        goto LABEL_26;
      }
    }
    else
    {
      v91 = (double *)(v18 + 8);
      ((void (*)(double **))off_1E0FD80E0[v102])(&v91);
      if (*v19 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B3548);
      }
      v20 = v19[12];
      v21 = (double *)(v19 + 8);
      v22 = v104;
      if ((_DWORD)v20 == -1)
      {
        if (v104 == 0xFFFFFFFFLL)
          goto LABEL_23;
      }
      else if (v104 == 0xFFFFFFFFLL)
      {
        goto LABEL_22;
      }
    }
    v91 = v21;
    ((void (*)(double **))off_1E0FD80E0[v22])(&v91);
    WGSL::constantAdd(&v95, v89, &v90);
    v24 = *v19;
    if (!(_DWORD)v24)
      goto LABEL_30;
LABEL_26:
    v25 = 24 * v24;
    v26 = v19 + 6;
    do
    {
      v23 = v26 - 4;
      v27 = *v26;
      if ((_DWORD)v27 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v27])(&v91, v23);
      *v26 = -1;
      v26 += 6;
      v25 -= 24;
    }
    while (v25);
LABEL_30:
    WTF::fastFree((WTF *)v19, v23);
    if (v104 != -1)
      ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v104])(&v91, v103);
    v104 = -1;
    if (v102 != -1)
      ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v102])(&v91, v101);
    v29 = v99;
    if (v99)
    {
      if (v99 != 1)
        goto LABEL_169;
      v30 = v96;
      if (v96)
        *v96 += 2;
      *(_QWORD *)(v87 + 8) = v30;
      *(_DWORD *)(v87 + 32) = 1;
    }
    else
    {
      if (v11 >= *v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B3568);
      }
      v31 = &v86[6 * v11];
      v32 = v31[4];
      if ((_DWORD)v32 == -1)
      {
        if (LODWORD(v98) == -1)
          goto LABEL_45;
      }
      else if (LODWORD(v98) == -1)
      {
        ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v32])(v101, &v86[6 * v11]);
        v31[4] = -1;
        goto LABEL_45;
      }
      v101[0] = &v86[6 * v11];
      ((void (*)(_QWORD *, _QWORD, _DWORD **))off_1E0FD8188[LODWORD(v98)])(v101, v101[0], &v96);
    }
LABEL_45:
    if (v99 != -1)
      ((void (*)(_QWORD *, _DWORD **))off_1E0FD7DD0[v99])(v101, &v96);
    if (v29)
      goto LABEL_70;
    ++v11;
    v33 = *v10;
  }
  while (v11 < v33);
  v34 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v33 + 8));
  v35 = v34;
  *v34 = v33;
  if ((_DWORD)v33)
  {
    v36 = v34 + 6;
    v37 = 24 * v33;
    v38 = v10 + 6;
    do
    {
      *((_BYTE *)v36 - 16) = 0;
      v28 = v36 - 4;
      *v36 = -1;
      v39 = *v38;
      if ((_DWORD)v39 != -1)
      {
        ((void (*)(_QWORD *, _DWORD *, unsigned int *))off_1E0FD8010[v39])(v101, v28, v38 - 4);
        *v36 = v39;
      }
      v36 += 6;
      v38 += 6;
      v37 -= 24;
    }
    while (v37);
  }
  *(_QWORD *)(v87 + 8) = v85;
  *(_QWORD *)(v87 + 16) = v35;
  *(_DWORD *)(v87 + 24) = 9;
  *(_DWORD *)(v87 + 32) = 0;
LABEL_70:
  v45 = *v10;
  if ((_DWORD)v45)
  {
    v46 = 24 * v45;
    v47 = v10 + 6;
    do
    {
      v28 = v47 - 4;
      v48 = *v47;
      if ((_DWORD)v48 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v48])(v101, v28);
      *v47 = -1;
      v47 += 6;
      v46 -= 24;
    }
    while (v46);
  }
  return WTF::fastFree((WTF *)v10, v28);
}

void WGSL::constantMultiply(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v10;
  unsigned int *v11;
  WTF *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int i;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  double v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  _DWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  _DWORD *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  _DWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  double *v129;
  uint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  unsigned int v136;
  _DWORD *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  unsigned int v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  double *v174;
  uint64_t v175;
  _DWORD *v176;
  uint64_t v177;
  uint64_t v178;
  _DWORD *v179;
  uint64_t v180;
  unsigned int v181;
  _DWORD *v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  _DWORD *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v195;
  uint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int *v206;
  unint64_t v207;
  unsigned int *v208;
  unsigned int *v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  _DWORD *v217;
  uint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  uint64_t v221;
  _DWORD *v222;
  unsigned int v223;
  _DWORD *v224;
  unsigned int *v225;
  uint64_t v226;
  unint64_t v227;
  _DWORD *v228;
  _DWORD *v229;
  _DWORD *v230;
  uint64_t v231;
  unsigned int *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _DWORD *v236;
  uint64_t v237;
  unsigned int *v238;
  uint64_t v239;
  char *v240;
  unsigned int *v241;
  uint64_t v242;
  WTF *v243;
  WTF *v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  WTF *v248;
  WTF *v249;
  WTF *v250;
  uint64_t v251;
  unsigned int **v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int *v258;
  float *v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int *v262;
  _QWORD v263[2];
  unsigned int v264;
  _QWORD v265[2];
  unsigned int v266;
  uint64_t v267;
  double *v268;
  double v269;
  int v270;
  unsigned int v271;
  int v272;
  double v273;
  _DWORD *v274;
  unsigned int v275;
  double v276;
  unsigned int v277;
  unsigned int v278;
  _QWORD v279[2];
  int v280;
  _QWORD v281[2];
  unsigned int v282;
  uint64_t v283;

  v283 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = **a2;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B5B6CLL);
  }
  v6 = (unsigned int *)(v4 + 2);
  v7 = v4[6];
  if ((_DWORD)v7 == 9)
    v8 = (unsigned int *)(v4 + 2);
  else
    v8 = 0;
  if (v5 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B5B8CLL);
  }
  v10 = v4[12];
  v259 = (float *)(v4 + 8);
  if ((_DWORD)v10 == 9)
    v11 = (unsigned int *)(v4 + 8);
  else
    v11 = 0;
  _ZF = (_DWORD)v7 == 9 && (_DWORD)v10 == 9;
  v254 = a3;
  if (_ZF)
  {
    if (*(_DWORD *)(a1 + 48) != 2)
      goto LABEL_499;
    v17 = *(_QWORD *)a1;
    v18 = *v11;
    v19 = v8[1];
    v20 = v19 * *v11;
    v242 = *v11;
    if (v20)
    {
      v21 = v8[1];
      v248 = (WTF *)WTF::fastMalloc((WTF *)(24 * v20 + 8));
      *(_DWORD *)v248 = v20;
      bzero((char *)v248 + 8, 24 * ((24 * (unint64_t)v20 - 24) / 0x18) + 24);
      v19 = v21;
      v18 = *v11;
      if (!*v11)
        goto LABEL_128;
    }
    else
    {
      v248 = 0;
      if (!v18)
        goto LABEL_128;
    }
    v255 = 0;
    v244 = (WTF *)((char *)v248 + 8);
    LODWORD(v24) = v8[1];
    v239 = v19;
LABEL_38:
    if (!(_DWORD)v24)
      goto LABEL_127;
    v260 = 0;
    v246 = (v19 * v255);
    while (1)
    {
      v25 = *(unsigned int *)(v17 + 48);
      if ((_DWORD)v25 == -1)
        goto LABEL_499;
      v279[0] = &v273;
      ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))off_1E0FD8068[v25])(v265, v279, v17);
      if (*v8)
      {
        for (i = 0; i < *v8; ++i)
        {
          v27 = v260 + v8[1] * i;
          v28 = (unsigned int *)*((_QWORD *)v8 + 1);
          if (*v28 <= v27)
          {
            __break(0xC471u);
            JUMPOUT(0x1825B5AACLL);
          }
          v29 = &v28[6 * v27];
          LOBYTE(v279[0]) = 0;
          v280 = -1;
          v30 = v29[6];
          if ((_DWORD)v30 != -1)
          {
            ((void (*)(double **, _QWORD *, unsigned int *))off_1E0FD8010[v30])(&v268, v279, v29 + 2);
            v280 = v30;
          }
          v31 = i + v11[1] * v255;
          v32 = (unsigned int *)*((_QWORD *)v11 + 1);
          if (*v32 <= v31)
          {
            __break(0xC471u);
            JUMPOUT(0x1825B5ACCLL);
          }
          v33 = &v32[6 * v31];
          LOBYTE(v281[0]) = 0;
          v282 = -1;
          v34 = v33[6];
          if ((_DWORD)v34 != -1)
          {
            ((void (*)(double **, _QWORD *, unsigned int *))off_1E0FD8010[v34])(&v268, v281, v33 + 2);
            v282 = v34;
          }
          v35 = WTF::fastMalloc((WTF *)0x38);
          v36 = (unsigned int *)v35;
          *(_OWORD *)(v35 + 8) = 0u;
          *(_DWORD *)v35 = 2;
          *(_OWORD *)(v35 + 24) = 0u;
          *(_OWORD *)(v35 + 40) = 0u;
          v263[0] = v35;
          if (v280 == -1)
          {
            *(_DWORD *)(v35 + 24) = -1;
            v38 = (double *)(v35 + 32);
            v39 = v282;
            if (v282 == -1)
            {
              v37 = 0;
LABEL_57:
              ((void (*)(double **, double *))off_1E0FD7CC8[v37])(&v268, v38);
              v36[12] = -1;
              goto LABEL_59;
            }
          }
          else
          {
            v268 = (double *)(v35 + 8);
            ((void (*)(double **))off_1E0FD80E0[v280])(&v268);
            if (*v36 < 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1825B5AECLL);
            }
            v37 = v36[12];
            v38 = (double *)(v36 + 8);
            v39 = v282;
            if ((_DWORD)v37 == -1)
            {
              if (v282 == 0xFFFFFFFFLL)
                goto LABEL_59;
            }
            else if (v282 == 0xFFFFFFFFLL)
            {
              goto LABEL_57;
            }
          }
          v268 = v38;
          ((void (*)(double **))off_1E0FD80E0[v39])(&v268);
LABEL_59:
          v40 = v17;
          WGSL::constantMultiply(&v273);
          v42 = *v36;
          if ((_DWORD)v42)
          {
            v43 = 24 * v42;
            v44 = v36 + 6;
            do
            {
              v41 = v44 - 4;
              v45 = *v44;
              if ((_DWORD)v45 != -1)
                ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v45])(&v268, v41);
              *v44 = -1;
              v44 += 6;
              v43 -= 24;
            }
            while (v43);
          }
          WTF::fastFree((WTF *)v36, v41);
          if (v282 != -1)
            ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v282])(&v268, v281);
          v282 = -1;
          if (v280 != -1)
            ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v280])(&v268, v279);
          v17 = v40;
          if (v277)
          {
            if (v277 != 1)
              goto LABEL_499;
            v46 = v274;
            if (v274)
              *v274 += 2;
            *(_QWORD *)(v254 + 8) = v46;
            v47 = 1;
            *(_DWORD *)(v254 + 32) = 1;
            v48 = 1;
LABEL_114:
            ((void (*)(_QWORD *, _DWORD **))off_1E0FD7DD0[v48])(v279, &v274);
            goto LABEL_115;
          }
          LOBYTE(v263[0]) = 0;
          v264 = -1;
          v49 = LODWORD(v276);
          if (LODWORD(v276) != -1)
          {
            ((void (*)(_QWORD *, _QWORD *, _DWORD **))off_1E0FD7D20[LODWORD(v276)])(v279, v263, &v274);
            v264 = v49;
          }
          LOBYTE(v279[0]) = 0;
          v280 = -1;
          v50 = v266;
          if (v266 != -1)
          {
            ((void (*)(uint64_t *, _QWORD *, _QWORD *))off_1E0FD8010[v266])(&v267, v279, v265);
            v280 = v50;
            v49 = v264;
          }
          LOBYTE(v281[0]) = 0;
          v282 = -1;
          if (v49 != 0xFFFFFFFFLL)
          {
            ((void (*)(uint64_t *, _QWORD *, _QWORD *))off_1E0FD8010[v49])(&v267, v281, v263);
            v282 = v49;
          }
          v51 = WTF::fastMalloc((WTF *)0x38);
          v52 = (unsigned int *)v51;
          *(_OWORD *)(v51 + 8) = 0u;
          *(_DWORD *)v51 = 2;
          *(_OWORD *)(v51 + 24) = 0u;
          *(_OWORD *)(v51 + 40) = 0u;
          v262 = (unsigned int *)v51;
          if (v280 == -1)
          {
            *(_DWORD *)(v51 + 24) = -1;
            v54 = (unsigned int *)(v51 + 32);
            v55 = v282;
            if (v282 == -1)
            {
              v53 = 0;
LABEL_87:
              ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v53])(&v267, v54);
              v52[12] = -1;
LABEL_88:
              WGSL::constantAdd(v40, &v262, (uint64_t)&v268);
              v57 = *v52;
              if (!(_DWORD)v57)
                goto LABEL_95;
              goto LABEL_91;
            }
          }
          else
          {
            v267 = v51 + 8;
            ((void (*)(uint64_t *))off_1E0FD80E0[v280])(&v267);
            if (*v52 < 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1825B5B0CLL);
            }
            v53 = v52[12];
            v54 = v52 + 8;
            v55 = v282;
            if ((_DWORD)v53 == -1)
            {
              if (v282 == 0xFFFFFFFFLL)
                goto LABEL_88;
            }
            else if (v282 == 0xFFFFFFFFLL)
            {
              goto LABEL_87;
            }
          }
          v267 = (uint64_t)v54;
          ((void (*)(uint64_t *))off_1E0FD80E0[v55])(&v267);
          WGSL::constantAdd(v40, &v262, (uint64_t)&v268);
          v57 = *v52;
          if (!(_DWORD)v57)
            goto LABEL_95;
LABEL_91:
          v58 = 24 * v57;
          v59 = v52 + 6;
          do
          {
            v56 = v59 - 4;
            v60 = *v59;
            if ((_DWORD)v60 != -1)
              ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v60])(&v267, v56);
            *v59 = -1;
            v59 += 6;
            v58 -= 24;
          }
          while (v58);
LABEL_95:
          WTF::fastFree((WTF *)v52, v56);
          if (v282 != -1)
            ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v282])(&v267, v281);
          v282 = -1;
          if (v280 != -1)
            ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v280])(&v267, v279);
          v47 = v272;
          v17 = v40;
          if (v272)
          {
            if (v272 != 1)
              goto LABEL_499;
            v61 = v269;
            if (v269 != 0.0)
              **(_DWORD **)&v269 += 2;
            *(double *)(v254 + 8) = v61;
            *(_DWORD *)(v254 + 32) = 1;
          }
          else
          {
            if (v266 == -1)
            {
              if (v271 == -1)
                goto LABEL_109;
            }
            else if (v271 == -1)
            {
              ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v266])(v279, v265);
              v266 = -1;
              goto LABEL_109;
            }
            v279[0] = v265;
            ((void (*)(_QWORD *, _QWORD *, double *))off_1E0FD8188[v271])(v279, v265, &v269);
          }
LABEL_109:
          if (v272 != -1)
            ((void (*)(_QWORD *, double *))off_1E0FD7DD0[v272])(v279, &v269);
          if (v264 != -1)
            ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v264])(v279, v263);
          v48 = v277;
          if (v277 != -1)
            goto LABEL_114;
LABEL_115:
          if (v47)
          {
            if (v266 != -1)
              ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v266])(v279, v265);
            v66 = (unsigned int *)v248;
            if (!v248)
              return;
LABEL_214:
            v105 = *v66;
            if ((_DWORD)v105)
            {
              v106 = 24 * v105;
              v107 = v66 + 6;
              do
              {
                a2 = (int **)(v107 - 4);
                v108 = *v107;
                if ((_DWORD)v108 != -1)
                  ((void (*)(_QWORD *, int **))off_1E0FD7CC8[v108])(v279, a2);
                *v107 = -1;
                v107 += 6;
                v106 -= 24;
              }
              while (v106);
            }
LABEL_417:
            WTF::fastFree((WTF *)v66, a2);
            return;
          }
        }
      }
      if (v260 + v246 >= (unint64_t)*(unsigned int *)v248)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B5BCCLL);
      }
      v62 = (char *)v244 + 24 * v260 + 24 * v246;
      v63 = *((unsigned int *)v62 + 4);
      if ((_DWORD)v63 == -1)
      {
        if (v266 == -1)
          goto LABEL_125;
      }
      else if (v266 == -1)
      {
        ((void (*)(_QWORD *, char *))off_1E0FD7CC8[v63])(v279, (char *)v244 + 24 * v260 + 24 * v246);
        *((_DWORD *)v62 + 4) = -1;
        v64 = v266;
        if (v266 == -1)
          goto LABEL_125;
LABEL_124:
        ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v64])(v279, v265);
        goto LABEL_125;
      }
      v279[0] = (char *)v244 + 24 * v260 + 24 * v246;
      ((void (*)(_QWORD *, _QWORD, _QWORD *))off_1E0FD80E0[v266])(v279, v279[0], v265);
      v64 = v266;
      if (v266 != -1)
        goto LABEL_124;
LABEL_125:
      v24 = v8[1];
      if (++v260 >= v24)
      {
        v18 = *v11;
        a3 = v254;
        v19 = v239;
LABEL_127:
        if (++v255 >= (unint64_t)v18)
        {
LABEL_128:
          v65 = v242 | (v19 << 32);
          v66 = (unsigned int *)v248;
          if (!v248)
          {
            *(_QWORD *)(a3 + 8) = v65;
            *(_QWORD *)(a3 + 16) = 0;
            *(_DWORD *)(a3 + 24) = 9;
            *(_DWORD *)(a3 + 32) = 0;
            return;
          }
          v67 = *(unsigned int *)v248;
          v68 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v67 + 8));
          *v68 = v67;
          if ((_DWORD)v67)
          {
            v69 = 0;
            v70 = 24 * v67;
            do
            {
              LOBYTE(v68[v69 / 4 + 2]) = 0;
              a2 = (int **)&v68[v69 / 4 + 2];
              v68[v69 / 4 + 6] = -1;
              v71 = *(unsigned int *)((char *)v248 + v69 + 24);
              if ((_DWORD)v71 != -1)
              {
                ((void (*)(_QWORD *, int **, char *))off_1E0FD8010[v71])(v279, a2, (char *)v248 + v69 + 8);
                v68[v69 / 4 + 6] = v71;
              }
              v69 += 24;
            }
            while (v70 != v69);
            a3 = v254;
          }
          *(_QWORD *)(a3 + 8) = v65;
          *(_QWORD *)(a3 + 16) = v68;
          *(_DWORD *)(a3 + 24) = 9;
          *(_DWORD *)(a3 + 32) = 0;
          goto LABEL_214;
        }
        goto LABEL_38;
      }
    }
  }
  if ((_DWORD)v7 != 9 && (_DWORD)v10 != 9)
  {
    LOBYTE(v279[0]) = 0;
    v280 = -1;
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v7])(&v273, v279, v4 + 2);
      v280 = v7;
      LODWORD(v10) = v4[12];
    }
    LOBYTE(v281[0]) = 0;
    v282 = -1;
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(double *, _QWORD *, float *))off_1E0FD8010[v10])(&v273, v281, v259);
      v282 = v10;
      LODWORD(v7) = v280;
    }
    LOBYTE(v273) = 0;
    v275 = -1;
    if ((_DWORD)v7 != -1)
    {
      v22 = v7;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v7])(&v268, &v273, v279);
      v275 = v7;
      if ((_DWORD)v7 == 8)
      {
        if (v273 == 0.0)
          v23 = 0;
        else
          v23 = **(_DWORD **)&v273;
        ((void (*)(double **, double *))off_1E0FD7CC8[v22])(&v268, &v273);
        if (!v23)
        {
LABEL_297:
          switch(v4[6])
          {
            case 0:
              if (v4[12])
                goto LABEL_499;
              *(float *)(a3 + 8) = *(float *)v6 * *v259;
              *(_DWORD *)(a3 + 24) = 0;
              *(_DWORD *)(a3 + 32) = 0;
              v104 = v282;
              if (v282 == -1)
                goto LABEL_211;
              goto LABEL_210;
            case 1:
              if (v4[12] != 1)
                goto LABEL_499;
              _H0 = *(_WORD *)v6;
              _H1 = *(_WORD *)v259;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 * _S1;
              __asm { FCVT            H0, S0 }
              *(_WORD *)(a3 + 8) = LOWORD(_S0);
              *(_DWORD *)(a3 + 24) = 1;
              *(_DWORD *)(a3 + 32) = 0;
              v104 = v282;
              if (v282 == -1)
                goto LABEL_211;
              goto LABEL_210;
            case 2:
              if (v4[12] != 2)
                goto LABEL_499;
              *(double *)(a3 + 8) = *(double *)v6 * *(double *)v259;
              *(_DWORD *)(a3 + 24) = 2;
              *(_DWORD *)(a3 + 32) = 0;
              v104 = v282;
              if (v282 == -1)
                goto LABEL_211;
              goto LABEL_210;
            case 3:
              if (v4[12] != 3)
                goto LABEL_499;
              *(_DWORD *)(a3 + 8) = *(_DWORD *)v259 * *v6;
              *(_DWORD *)(a3 + 24) = 3;
              *(_DWORD *)(a3 + 32) = 0;
              v104 = v282;
              if (v282 == -1)
                goto LABEL_211;
              goto LABEL_210;
            case 4:
              if (v4[12] != 4)
                goto LABEL_499;
              *(_DWORD *)(a3 + 8) = *(_DWORD *)v259 * *v6;
              *(_DWORD *)(a3 + 24) = 4;
              *(_DWORD *)(a3 + 32) = 0;
              v104 = v282;
              if (v282 == -1)
                goto LABEL_211;
              goto LABEL_210;
            case 5:
              if (v4[12] != 5)
                goto LABEL_499;
              *(_QWORD *)(a3 + 8) = *(_QWORD *)v259 * *(_QWORD *)v6;
              *(_DWORD *)(a3 + 24) = 5;
              *(_DWORD *)(a3 + 32) = 0;
              v104 = v282;
              if (v282 == -1)
                goto LABEL_211;
              goto LABEL_210;
            default:
              __break(0xC471u);
              JUMPOUT(0x1825B5CD4);
          }
        }
        goto LABEL_153;
      }
      ((void (*)(double **, double *))off_1E0FD7CC8[v7])(&v268, &v273);
      LODWORD(v10) = v282;
    }
    LOBYTE(v273) = 0;
    v275 = -1;
    if ((_DWORD)v10 == -1)
      goto LABEL_297;
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v10])(&v268, &v273, v281);
    v275 = v10;
    if ((_DWORD)v10 != 8 || v273 == 0.0)
      v23 = 0;
    else
      v23 = **(_DWORD **)&v273;
    ((void (*)(double **, double *))off_1E0FD7CC8[v10])(&v268, &v273);
    if (!v23)
      goto LABEL_297;
LABEL_153:
    v75 = 24 * v23;
    v76 = (unsigned int *)WTF::fastMalloc((WTF *)(v75 + 8));
    *v76 = v23;
    v77 = 24;
    bzero(v76 + 2, 24 * ((v75 - 24) / 0x18uLL) + 24);
    v79 = 0;
    LODWORD(v273) = 0;
    v275 = 0;
    LODWORD(v276) = 0;
    v278 = 0;
    while (1)
    {
      if (v280 == 8)
      {
        if (v79 >= *(unsigned int *)v279[0])
          goto LABEL_487;
        v78 = v279[0] + v77 - 16;
        v80 = *(unsigned int *)(v279[0] + v77);
        v81 = v275;
        if (v275 == -1)
        {
          if ((_DWORD)v80 == -1)
            goto LABEL_167;
        }
        else if ((_DWORD)v80 == -1)
        {
          goto LABEL_162;
        }
        v268 = &v273;
        ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v80])(&v268, &v273, v78);
      }
      else
      {
        v81 = v275;
        if (v275 == -1)
        {
          if (v280 == -1)
            goto LABEL_167;
        }
        else if (v280 == -1)
        {
LABEL_162:
          ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v81])(&v268, &v273, v78);
          v275 = -1;
          goto LABEL_167;
        }
        v268 = &v273;
        ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v280])(&v268, &v273, v279);
      }
LABEL_167:
      if (v282 == 8)
      {
        if (v79 >= *(unsigned int *)v281[0])
        {
LABEL_487:
          __break(0xC471u);
          JUMPOUT(0x1825B5B2CLL);
        }
        v78 = v281[0] + v77 - 16;
        v82 = *(unsigned int *)(v281[0] + v77);
        v83 = v278;
        if (v278 != -1)
        {
          if ((_DWORD)v82 != -1)
            goto LABEL_178;
LABEL_174:
          ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v83])(&v268, &v276, v78);
          v278 = -1;
          goto LABEL_179;
        }
        if ((_DWORD)v82 != -1)
        {
LABEL_178:
          v268 = &v276;
          ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v82])(&v268, &v276, v78);
        }
      }
      else
      {
        v83 = v278;
        if (v278 != -1)
        {
          if (v282 != -1)
            goto LABEL_176;
          goto LABEL_174;
        }
        if (v282 != -1)
        {
LABEL_176:
          v268 = &v276;
          ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v282])(&v268, &v276, v281);
        }
      }
LABEL_179:
      switch(v275)
      {
        case 0u:
          if (v278)
            goto LABEL_499;
          *(float *)&v269 = *(float *)&v273 * *(float *)&v276;
          break;
        case 1u:
          if (v278 != 1)
            goto LABEL_499;
          _H0 = LOWORD(v273);
          _H1 = LOWORD(v276);
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 * _S1;
          __asm { FCVT            H0, S0 }
          LOWORD(v269) = LOWORD(_S0);
          break;
        case 2u:
          if (v278 != 2)
            goto LABEL_499;
          v269 = v273 * v276;
          break;
        case 3u:
          if (v278 != 3)
            goto LABEL_499;
          goto LABEL_187;
        case 4u:
          if (v278 != 4)
            goto LABEL_499;
LABEL_187:
          LODWORD(v269) = LODWORD(v276) * LODWORD(v273);
          break;
        case 5u:
          if (v278 != 5)
            goto LABEL_499;
          *(_QWORD *)&v269 = *(_QWORD *)&v276 * *(_QWORD *)&v273;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825B5CB4);
      }
      v271 = v275;
      v272 = 0;
      if (v79 >= *v76)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B5B4CLL);
      }
      v265[0] = &v76[(unint64_t)v77 / 4 - 4];
      ((void (*)(_QWORD *))off_1E0FD8188[v275])(v265);
      if (v272 != -1)
        ((void (*)(_QWORD *, double *))off_1E0FD7DD0[v272])(v265, &v269);
      ++v79;
      v77 += 24;
      if (v23 == v79)
      {
        v92 = *v76;
        v93 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v92 + 8));
        v95 = v93;
        *v93 = v92;
        if ((_DWORD)v92)
        {
          v96 = v93 + 6;
          v97 = 24 * v92;
          v98 = v76 + 6;
          do
          {
            *((_BYTE *)v96 - 16) = 0;
            v94 = v96 - 4;
            *v96 = -1;
            v99 = *v98;
            if ((_DWORD)v99 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v99])(&v268, v94, v98 - 4);
              *v96 = v99;
            }
            v96 += 6;
            v98 += 6;
            v97 -= 24;
          }
          while (v97);
        }
        *(_QWORD *)(v254 + 8) = v95;
        *(_DWORD *)(v254 + 24) = 8;
        *(_DWORD *)(v254 + 32) = 0;
        if (v278 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v278])(&v268, &v276);
        v278 = -1;
        if (v275 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v275])(&v268, &v273);
        v100 = *v76;
        if ((_DWORD)v100)
        {
          v101 = 24 * v100;
          v102 = v76 + 6;
          do
          {
            v94 = v102 - 4;
            v103 = *v102;
            if ((_DWORD)v103 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v103])(&v273, v94);
            *v102 = -1;
            v102 += 6;
            v101 -= 24;
          }
          while (v101);
        }
        WTF::fastFree((WTF *)v76, v94);
        v104 = v282;
        if (v282 != -1)
LABEL_210:
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v104])(&v273, v281);
LABEL_211:
        v282 = -1;
        if (v280 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v280])(&v273, v279);
        return;
      }
    }
  }
  if ((_DWORD)v10 == 8)
  {
    if (*(_DWORD *)(a1 + 48) == 1)
    {
      v251 = *(_QWORD *)a1;
      v14 = (WTF *)*v8;
      v15 = v8[1];
      if ((_DWORD)v15)
      {
        v243 = (WTF *)WTF::fastMalloc((WTF *)(24 * v15 + 8));
        *(_DWORD *)v243 = v15;
        bzero((char *)v243 + 8, 24 * ((24 * v15 - 24) / 0x18uLL) + 24);
        if ((_DWORD)v14)
          goto LABEL_22;
      }
      else
      {
        v243 = 0;
        if ((_DWORD)v14)
        {
LABEL_22:
          v16 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * (_QWORD)v14 + 8));
          *v16 = v14;
          bzero(v16 + 2, 24 * ((24 * (uint64_t)v14 - 24) / 0x18uLL) + 24);
          if (!(_DWORD)v15)
          {
LABEL_287:
            if (v243)
            {
              v140 = *(unsigned int *)v243;
              v141 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v140 + 8));
              *v141 = v140;
              if ((_DWORD)v140)
              {
                v142 = 0;
                v143 = 24 * v140;
                do
                {
                  LOBYTE(v141[v142 / 4 + 2]) = 0;
                  a2 = (int **)&v141[v142 / 4 + 2];
                  v141[v142 / 4 + 6] = -1;
                  v144 = *(unsigned int *)((char *)v243 + v142 + 24);
                  if ((_DWORD)v144 != -1)
                  {
                    ((void (*)(_QWORD *, int **, char *))off_1E0FD8010[v144])(v279, a2, (char *)v243 + v142 + 8);
                    v141[v142 / 4 + 6] = v144;
                  }
                  v142 += 24;
                }
                while (v143 != v142);
              }
            }
            else
            {
              v141 = 0;
            }
            *(_QWORD *)(a3 + 8) = v141;
            *(_DWORD *)(a3 + 24) = 8;
            *(_DWORD *)(a3 + 32) = 0;
LABEL_303:
            if (v16)
            {
              v145 = *v16;
              if ((_DWORD)v145)
              {
                v146 = 24 * v145;
                v147 = v16 + 6;
                do
                {
                  a2 = (int **)(v147 - 4);
                  v148 = *v147;
                  if ((_DWORD)v148 != -1)
                    ((void (*)(_QWORD *, int **))off_1E0FD7CC8[v148])(v279, a2);
                  *v147 = -1;
                  v147 += 6;
                  v146 -= 24;
                }
                while (v146);
              }
              WTF::fastFree((WTF *)v16, a2);
            }
            if (v243)
            {
              v149 = *(unsigned int *)v243;
              if ((_DWORD)v149)
              {
                v150 = 24 * v149;
                v151 = (_DWORD *)((char *)v243 + 24);
                do
                {
                  a2 = (int **)(v151 - 4);
                  v152 = *v151;
                  if ((_DWORD)v152 != -1)
                    ((void (*)(_QWORD *, int **))off_1E0FD7CC8[v152])(v279, a2);
                  *v151 = -1;
                  v151 += 6;
                  v150 -= 24;
                }
                while (v150);
              }
              WTF::fastFree(v243, a2);
            }
            return;
          }
          goto LABEL_224;
        }
      }
      v16 = 0;
      if (!(_DWORD)v15)
        goto LABEL_287;
LABEL_224:
      v109 = 0;
      v250 = v14;
      v240 = (char *)v243 + 8;
      while (1)
      {
        v256 = v109;
        if ((_DWORD)v14)
        {
          v110 = 0;
          v111 = v109;
          v112 = v16 + 6;
          while (1)
          {
            while (1)
            {
              v113 = (unsigned int *)*((_QWORD *)v8 + 1);
              if (*v113 <= v111)
              {
                __break(0xC471u);
                JUMPOUT(0x1825B5A2CLL);
              }
              if (v110 >= *v16)
              {
                __break(0xC471u);
                JUMPOUT(0x1825B5A4CLL);
              }
              v114 = *v112;
              v115 = v113[6 * v111 + 6];
              if ((_DWORD)v114 != -1)
                break;
              if ((_DWORD)v115 != -1)
                goto LABEL_228;
LABEL_229:
              ++v110;
              v112 += 6;
              v111 += v15;
              if (v14 == (WTF *)v110)
                goto LABEL_237;
            }
            if ((_DWORD)v115 != -1)
            {
LABEL_228:
              v279[0] = v112 - 4;
              ((void (*)(_QWORD *))off_1E0FD80E0[v115])(v279);
              goto LABEL_229;
            }
            ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v114])(v279, v112 - 4);
            *v112 = -1;
            v112 += 6;
            ++v110;
            v111 += v15;
            if (v14 == (WTF *)v110)
              goto LABEL_237;
          }
        }
        if (v16)
        {
LABEL_237:
          v116 = *v16;
          v117 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v116 + 8));
          *v117 = v116;
          if ((_DWORD)v116)
          {
            v118 = 0;
            do
            {
              LOBYTE(v117[v118 + 2]) = 0;
              v117[v118 + 6] = -1;
              v119 = v16[v118 + 6];
              if ((_DWORD)v119 != -1)
              {
                ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v119])(&v268, &v117[v118 + 2], &v16[v118 + 2]);
                v117[v118 + 6] = v119;
              }
              v118 += 6;
            }
            while (6 * v116 != v118);
            v14 = v250;
          }
          v279[0] = v117;
          v280 = 8;
          v120 = *(unsigned int **)v259;
          if (!*(_QWORD *)v259)
          {
LABEL_251:
            v122 = 0;
            goto LABEL_252;
          }
        }
        else
        {
          v279[0] = 0;
          v280 = 8;
          v120 = *(unsigned int **)v259;
          if (!*(_QWORD *)v259)
            goto LABEL_251;
        }
        v121 = *v120;
        v122 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v121 + 8));
        *v122 = v121;
        if ((_DWORD)v121)
        {
          v123 = 0;
          v124 = 24 * v121;
          do
          {
            LOBYTE(v122[v123 / 4 + 2]) = 0;
            v122[v123 / 4 + 6] = -1;
            v125 = v120[v123 / 4 + 6];
            if ((_DWORD)v125 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v125])(&v268, &v122[v123 / 4 + 2], &v120[v123 / 4 + 2]);
              v122[v123 / 4 + 6] = v125;
            }
            v123 += 24;
          }
          while (v124 != v123);
          v14 = v250;
        }
LABEL_252:
        v281[0] = v122;
        v282 = 8;
        v126 = WTF::fastMalloc((WTF *)0x38);
        v127 = (unsigned int *)v126;
        *(_OWORD *)(v126 + 8) = 0u;
        *(_DWORD *)v126 = 2;
        *(_OWORD *)(v126 + 24) = 0u;
        *(_OWORD *)(v126 + 40) = 0u;
        v265[0] = v126;
        if (v280 == -1)
        {
          *(_DWORD *)(v126 + 24) = -1;
          v129 = (double *)(v126 + 32);
          v130 = v282;
          if (v282 == -1)
          {
            v128 = 0;
LABEL_260:
            ((void (*)(double **, double *))off_1E0FD7CC8[v128])(&v268, v129);
            v127[12] = -1;
LABEL_261:
            WGSL::constantDot(v251, (uint64_t)&v273);
            v132 = *v127;
            if (!(_DWORD)v132)
              goto LABEL_268;
            goto LABEL_264;
          }
        }
        else
        {
          v268 = (double *)(v126 + 8);
          ((void (*)(double **))off_1E0FD80E0[v280])(&v268);
          if (*v127 < 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1825B5BACLL);
          }
          v128 = v127[12];
          v129 = (double *)(v127 + 8);
          v130 = v282;
          if ((_DWORD)v128 == -1)
          {
            if (v282 == 0xFFFFFFFFLL)
              goto LABEL_261;
          }
          else if (v282 == 0xFFFFFFFFLL)
          {
            goto LABEL_260;
          }
        }
        v268 = v129;
        ((void (*)(double **))off_1E0FD80E0[v130])(&v268);
        WGSL::constantDot(v251, (uint64_t)&v273);
        v132 = *v127;
        if (!(_DWORD)v132)
          goto LABEL_268;
LABEL_264:
        v133 = 24 * v132;
        v134 = v127 + 6;
        do
        {
          v131 = v134 - 4;
          v135 = *v134;
          if ((_DWORD)v135 != -1)
            ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v135])(&v268, v131);
          *v134 = -1;
          v134 += 6;
          v133 -= 24;
        }
        while (v133);
LABEL_268:
        WTF::fastFree((WTF *)v127, v131);
        if (v282 != -1)
          ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v282])(&v268, v281);
        v282 = -1;
        if (v280 != -1)
          ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v280])(&v268, v279);
        v136 = v277;
        if (v277)
        {
          if (v277 != 1)
            break;
          v137 = v274;
          if (v274)
            *v274 += 2;
          *(_QWORD *)(a3 + 8) = v137;
          *(_DWORD *)(a3 + 32) = 1;
        }
        else
        {
          if (v256 >= *(unsigned int *)v243)
          {
            __break(0xC471u);
            JUMPOUT(0x1825B5C4CLL);
          }
          v138 = &v240[24 * v256];
          v139 = *((unsigned int *)v138 + 4);
          if ((_DWORD)v139 == -1)
          {
            if (LODWORD(v276) == -1)
              goto LABEL_283;
          }
          else if (LODWORD(v276) == -1)
          {
            ((void (*)(_QWORD *, char *))off_1E0FD7CC8[v139])(v279, &v240[24 * v256]);
            *((_DWORD *)v138 + 4) = -1;
            goto LABEL_283;
          }
          v279[0] = &v240[24 * v256];
          ((void (*)(_QWORD *, _QWORD, _DWORD **))off_1E0FD8188[LODWORD(v276)])(v279, v279[0], &v274);
        }
LABEL_283:
        if (v277 != -1)
          ((void (*)(_QWORD *, _DWORD **))off_1E0FD7DD0[v277])(v279, &v274);
        if (v136)
          goto LABEL_303;
        v109 = v256 + 1;
        if (v256 + 1 == v15)
          goto LABEL_287;
      }
    }
LABEL_499:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if ((_DWORD)v7 == 8)
  {
    if (*(_DWORD *)(a1 + 48) != 1)
      goto LABEL_499;
    v249 = *(WTF **)a1;
    v72 = *v11;
    v73 = v11[1];
    if ((_DWORD)v72)
    {
      v66 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v72 + 8));
      *v66 = v72;
      bzero(v66 + 2, 24 * ((24 * v72 - 24) / 0x18uLL) + 24);
      v252 = (unsigned int **)(v4 + 2);
      if ((_DWORD)v73)
        goto LABEL_142;
    }
    else
    {
      v66 = 0;
      v252 = (unsigned int **)(v4 + 2);
      if ((_DWORD)v73)
      {
LABEL_142:
        v74 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v73 + 8));
        *v74 = v73;
        bzero(v74 + 2, 24 * ((24 * v73 - 24) / 0x18uLL) + 24);
        if (!(_DWORD)v72)
        {
LABEL_380:
          if (v66)
          {
            v185 = *v66;
            v186 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v185 + 8));
            *v186 = v185;
            if ((_DWORD)v185)
            {
              v187 = 0;
              v188 = 24 * v185;
              do
              {
                LOBYTE(v186[v187 / 4 + 2]) = 0;
                a2 = (int **)&v186[v187 / 4 + 2];
                v186[v187 / 4 + 6] = -1;
                v189 = v66[v187 / 4 + 6];
                if ((_DWORD)v189 != -1)
                {
                  ((void (*)(_QWORD *, int **, unsigned int *))off_1E0FD8010[v189])(v279, a2, &v66[v187 / 4 + 2]);
                  v186[v187 / 4 + 6] = v189;
                }
                v187 += 24;
              }
              while (v188 != v187);
              a3 = v254;
            }
          }
          else
          {
            v186 = 0;
          }
          *(_QWORD *)(a3 + 8) = v186;
          *(_DWORD *)(a3 + 24) = 8;
          *(_DWORD *)(a3 + 32) = 0;
LABEL_404:
          if (v74)
          {
            v195 = *v74;
            if ((_DWORD)v195)
            {
              v196 = 24 * v195;
              v197 = v74 + 6;
              do
              {
                a2 = (int **)(v197 - 4);
                v198 = *v197;
                if ((_DWORD)v198 != -1)
                  ((void (*)(_QWORD *, int **))off_1E0FD7CC8[v198])(v279, a2);
                *v197 = -1;
                v197 += 6;
                v196 -= 24;
              }
              while (v196);
            }
            WTF::fastFree((WTF *)v74, a2);
          }
          if (!v66)
            return;
          v199 = *v66;
          if ((_DWORD)v199)
          {
            v200 = 24 * v199;
            v201 = v66 + 6;
            do
            {
              a2 = (int **)(v201 - 4);
              v202 = *v201;
              if ((_DWORD)v202 != -1)
                ((void (*)(_QWORD *, int **))off_1E0FD7CC8[v202])(v279, a2);
              *v201 = -1;
              v201 += 6;
              v200 -= 24;
            }
            while (v200);
          }
          goto LABEL_417;
        }
        goto LABEL_319;
      }
    }
    v74 = 0;
    if (!(_DWORD)v72)
      goto LABEL_380;
LABEL_319:
    v153 = 0;
    v154 = 0;
    v241 = v66;
    v238 = v66 + 2;
    v261 = 24 * v73;
    v245 = v73;
    v247 = v72;
    while (1)
    {
      v257 = v154;
      v155 = v153;
      if ((_DWORD)v73)
      {
        v156 = 0;
        v157 = 0;
        v158 = 6 * v153;
        do
        {
          while (1)
          {
            v159 = (unsigned int *)*((_QWORD *)v11 + 1);
            if (v155 + v157 >= *v159)
            {
              __break(0xC471u);
              JUMPOUT(0x1825B5A6CLL);
            }
            if (v157 >= *v74)
            {
              __break(0xC471u);
              JUMPOUT(0x1825B5A8CLL);
            }
            v160 = v74[v156 / 4 + 6];
            v161 = v159[v158 + 6 + v156 / 4];
            if ((_DWORD)v160 != -1)
              break;
            if ((_DWORD)v161 != -1)
              goto LABEL_323;
LABEL_324:
            ++v157;
            v156 += 24;
            if (v261 == v156)
              goto LABEL_330;
          }
          if ((_DWORD)v161 != -1)
          {
LABEL_323:
            v279[0] = &v74[v156 / 4 + 2];
            ((void (*)(_QWORD *))off_1E0FD80E0[v161])(v279);
            goto LABEL_324;
          }
          ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v160])(v279, &v74[v156 / 4 + 2]);
          v74[v156 / 4 + 6] = -1;
          ++v157;
          v156 += 24;
        }
        while (v261 != v156);
      }
LABEL_330:
      v162 = *v252;
      if (*v252)
      {
        v163 = *v162;
        v164 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v163 + 8));
        *v164 = v163;
        if ((_DWORD)v163)
        {
          v165 = 0;
          do
          {
            LOBYTE(v164[v165 + 2]) = 0;
            v164[v165 + 6] = -1;
            v166 = v162[v165 + 6];
            if ((_DWORD)v166 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v166])(&v268, &v164[v165 + 2], &v162[v165 + 2]);
              v164[v165 + 6] = v166;
            }
            v165 += 6;
          }
          while (6 * v163 != v165);
          a3 = v254;
          v66 = v241;
        }
        v279[0] = v164;
        v280 = 8;
        if (!v74)
        {
LABEL_345:
          v168 = 0;
          goto LABEL_346;
        }
      }
      else
      {
        v279[0] = 0;
        v280 = 8;
        if (!v74)
          goto LABEL_345;
      }
      v167 = *v74;
      v168 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v167 + 8));
      *v168 = v167;
      if ((_DWORD)v167)
      {
        v169 = 0;
        do
        {
          LOBYTE(v168[v169 + 2]) = 0;
          v168[v169 + 6] = -1;
          v170 = v74[v169 + 6];
          if ((_DWORD)v170 != -1)
          {
            ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v170])(&v268, &v168[v169 + 2], &v74[v169 + 2]);
            v168[v169 + 6] = v170;
          }
          v169 += 6;
        }
        while (6 * v167 != v169);
        a3 = v254;
      }
LABEL_346:
      v281[0] = v168;
      v282 = 8;
      v171 = WTF::fastMalloc((WTF *)0x38);
      v172 = (unsigned int *)v171;
      *(_OWORD *)(v171 + 8) = 0u;
      *(_DWORD *)v171 = 2;
      *(_OWORD *)(v171 + 24) = 0u;
      *(_OWORD *)(v171 + 40) = 0u;
      v265[0] = v171;
      if (v280 == -1)
      {
        *(_DWORD *)(v171 + 24) = -1;
        v174 = (double *)(v171 + 32);
        v175 = v282;
        if (v282 == -1)
        {
          v173 = 0;
LABEL_354:
          ((void (*)(double **, double *))off_1E0FD7CC8[v173])(&v268, v174);
          v172[12] = -1;
          goto LABEL_356;
        }
      }
      else
      {
        v268 = (double *)(v171 + 8);
        ((void (*)(double **))off_1E0FD80E0[v280])(&v268);
        if (*v172 < 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1825B5C2CLL);
        }
        v173 = v172[12];
        v174 = (double *)(v172 + 8);
        v175 = v282;
        if ((_DWORD)v173 == -1)
        {
          if (v282 == 0xFFFFFFFFLL)
            goto LABEL_356;
        }
        else if (v282 == 0xFFFFFFFFLL)
        {
          goto LABEL_354;
        }
      }
      v268 = v174;
      ((void (*)(double **))off_1E0FD80E0[v175])(&v268);
LABEL_356:
      WGSL::constantDot((uint64_t)v249, (uint64_t)&v273);
      v177 = *v172;
      if ((_DWORD)v177)
      {
        v178 = 24 * v177;
        v179 = v172 + 6;
        do
        {
          v176 = v179 - 4;
          v180 = *v179;
          if ((_DWORD)v180 != -1)
            ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v180])(&v268, v176);
          *v179 = -1;
          v179 += 6;
          v178 -= 24;
        }
        while (v178);
      }
      WTF::fastFree((WTF *)v172, v176);
      if (v282 != -1)
        ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v282])(&v268, v281);
      v282 = -1;
      if (v280 != -1)
        ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v280])(&v268, v279);
      v181 = v277;
      if (v277)
      {
        if (v277 != 1)
          goto LABEL_499;
        v182 = v274;
        if (v274)
          *v274 += 2;
        *(_QWORD *)(a3 + 8) = v182;
        *(_DWORD *)(a3 + 32) = 1;
      }
      else
      {
        if (v257 >= *v66)
        {
          __break(0xC471u);
          JUMPOUT(0x1825B5C8CLL);
        }
        v183 = &v238[6 * v257];
        v184 = v183[4];
        if ((_DWORD)v184 == -1)
        {
          if (LODWORD(v276) == -1)
            goto LABEL_376;
        }
        else if (LODWORD(v276) == -1)
        {
          ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v184])(v279, &v238[6 * v257]);
          v183[4] = -1;
          goto LABEL_376;
        }
        v279[0] = &v238[6 * v257];
        ((void (*)(_QWORD *, _QWORD, _DWORD **))off_1E0FD8188[LODWORD(v276)])(v279, v279[0], &v274);
      }
LABEL_376:
      if (v277 != -1)
        ((void (*)(_QWORD *, _DWORD **))off_1E0FD7DD0[v277])(v279, &v274);
      if (v181)
        goto LABEL_404;
      v154 = v257 + 1;
      LODWORD(v73) = v245;
      v153 = v155 + v245;
      if (v257 + 1 == v247)
        goto LABEL_380;
    }
  }
  LODWORD(v268) = 0;
  v270 = 0;
  if ((_DWORD)v7 == 9)
  {
    if ((_DWORD)v10 == -1)
    {
      v270 = -1;
    }
    else
    {
      v279[0] = &v268;
      ((void (*)(_QWORD *, double **, float *))off_1E0FD80E0[v10])(v279, &v268, v259);
    }
  }
  else
  {
    if ((_DWORD)v7 == -1)
    {
      v270 = -1;
    }
    else
    {
      v279[0] = &v268;
      ((void (*)(_QWORD *, double **, int *))off_1E0FD80E0[v7])(v279, &v268, v4 + 2);
    }
    v6 = v11;
  }
  if (*(_DWORD *)(a1 + 48) != 2)
    goto LABEL_499;
  v203 = *v6;
  v204 = v6[1];
  v205 = v204 * v203;
  if (!((_DWORD)v204 * (_DWORD)v203))
  {
    *(_QWORD *)(a3 + 8) = v203 | (v204 << 32);
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 9;
    *(_DWORD *)(a3 + 32) = 0;
    goto LABEL_476;
  }
  v253 = v203 | (v204 << 32);
  v206 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v205 + 8));
  *v206 = v205;
  v258 = v206 + 2;
  bzero(v206 + 2, 24 * ((24 * (unint64_t)v205 - 24) / 0x18) + 24);
  v207 = 0;
  do
  {
    v208 = (unsigned int *)*((_QWORD *)v6 + 1);
    if (v207 >= *v208)
    {
      __break(0xC471u);
      JUMPOUT(0x1825B5BECLL);
    }
    v209 = &v208[6 * v207];
    LOBYTE(v279[0]) = 0;
    v280 = -1;
    v210 = v209[6];
    if ((_DWORD)v210 != -1)
    {
      ((void (*)(_QWORD *, _QWORD *, unsigned int *))off_1E0FD8010[v210])(v265, v279, v209 + 2);
      v280 = v210;
    }
    LOBYTE(v281[0]) = 0;
    v282 = -1;
    v211 = v270;
    if (v270 != -1)
    {
      ((void (*)(_QWORD *, _QWORD *, double **))off_1E0FD8010[v270])(v265, v281, &v268);
      v282 = v211;
    }
    v212 = WTF::fastMalloc((WTF *)0x38);
    v213 = (unsigned int *)v212;
    *(_OWORD *)(v212 + 8) = 0u;
    *(_DWORD *)v212 = 2;
    *(_OWORD *)(v212 + 24) = 0u;
    *(_OWORD *)(v212 + 40) = 0u;
    v263[0] = v212;
    if (v280 == -1)
    {
      *(_DWORD *)(v212 + 24) = -1;
      v215 = (unsigned int *)(v212 + 32);
      v216 = v282;
      if (v282 == -1)
      {
        v214 = 0;
LABEL_437:
        ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v214])(v265, v215);
        v213[12] = -1;
        goto LABEL_439;
      }
    }
    else
    {
      v265[0] = v212 + 8;
      ((void (*)(_QWORD *))off_1E0FD80E0[v280])(v265);
      if (*v213 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B5C0CLL);
      }
      v214 = v213[12];
      v215 = v213 + 8;
      v216 = v282;
      if ((_DWORD)v214 == -1)
      {
        if (v282 == 0xFFFFFFFFLL)
          goto LABEL_439;
      }
      else if (v282 == 0xFFFFFFFFLL)
      {
        goto LABEL_437;
      }
    }
    v265[0] = v215;
    ((void (*)(_QWORD *))off_1E0FD80E0[v216])(v265);
LABEL_439:
    WGSL::constantMultiply(&v273);
    v218 = *v213;
    if ((_DWORD)v218)
    {
      v219 = 24 * v218;
      v220 = v213 + 6;
      do
      {
        v217 = v220 - 4;
        v221 = *v220;
        if ((_DWORD)v221 != -1)
          ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v221])(v265, v217);
        *v220 = -1;
        v220 += 6;
        v219 -= 24;
      }
      while (v219);
    }
    WTF::fastFree((WTF *)v213, v217);
    if (v282 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v282])(v265, v281);
    v282 = -1;
    if (v280 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v280])(v265, v279);
    v223 = v277;
    if (v277)
    {
      if (v277 != 1)
        goto LABEL_499;
      v224 = v274;
      if (v274)
        *v274 += 2;
      *(_QWORD *)(a3 + 8) = v224;
      *(_DWORD *)(a3 + 32) = 1;
    }
    else
    {
      if (v207 >= *v206)
      {
        __break(0xC471u);
        JUMPOUT(0x1825B5C6CLL);
      }
      v225 = &v258[6 * v207];
      v226 = v225[4];
      if ((_DWORD)v226 == -1)
      {
        if (LODWORD(v276) == -1)
          goto LABEL_459;
      }
      else if (LODWORD(v276) == -1)
      {
        ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v226])(v279, &v258[6 * v207]);
        v225[4] = -1;
        goto LABEL_459;
      }
      v279[0] = &v258[6 * v207];
      ((void (*)(_QWORD *, _QWORD, _DWORD **))off_1E0FD8188[LODWORD(v276)])(v279, v279[0], &v274);
    }
LABEL_459:
    if (v277 != -1)
      ((void (*)(_QWORD *, _DWORD **))off_1E0FD7DD0[v277])(v279, &v274);
    if (v223)
      goto LABEL_470;
    ++v207;
    v227 = *v206;
  }
  while (v207 < v227);
  v228 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v227 + 8));
  v229 = v228;
  *v228 = v227;
  if ((_DWORD)v227)
  {
    v230 = v228 + 6;
    v231 = 24 * v227;
    v232 = v206 + 6;
    do
    {
      *((_BYTE *)v230 - 16) = 0;
      v222 = v230 - 4;
      *v230 = -1;
      v233 = *v232;
      if ((_DWORD)v233 != -1)
      {
        ((void (*)(_QWORD *, _DWORD *, unsigned int *))off_1E0FD8010[v233])(v279, v222, v232 - 4);
        *v230 = v233;
      }
      v230 += 6;
      v232 += 6;
      v231 -= 24;
    }
    while (v231);
  }
  *(_QWORD *)(v254 + 8) = v253;
  *(_QWORD *)(v254 + 16) = v229;
  *(_DWORD *)(v254 + 24) = 9;
  *(_DWORD *)(v254 + 32) = 0;
LABEL_470:
  v234 = *v206;
  if ((_DWORD)v234)
  {
    v235 = 24 * v234;
    v236 = v206 + 6;
    do
    {
      v222 = v236 - 4;
      v237 = *v236;
      if ((_DWORD)v237 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v237])(v279, v222);
      *v236 = -1;
      v236 += 6;
      v235 -= 24;
    }
    while (v235);
  }
  WTF::fastFree((WTF *)v206, v222);
LABEL_476:
  if (v270 != -1)
    ((void (*)(_QWORD *, double **))off_1E0FD7CC8[v270])(v279, &v268);
}

void WGSL::constantDivide(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  float *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v32;
  int v33;
  double v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v55;
  float v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v64;
  double v65[2];
  unsigned int v66;
  unsigned int v67;
  double v68;
  uint64_t v69;
  unsigned int v70;
  double v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD v74[2];
  int v75;
  _QWORD v76[2];
  int v77;
  double *v78;
  _QWORD v79[2];
  int v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B67E4);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B6804);
  }
  v4 = (float *)(v2 + 2);
  LOBYTE(v74[0]) = 0;
  v75 = -1;
  v5 = v2[6];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v5])(&v68, v74, v2 + 2);
    v75 = v5;
  }
  v6 = (float *)(v2 + 8);
  LOBYTE(v76[0]) = 0;
  v77 = -1;
  v7 = v2[12];
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v7])(&v68, v76, v2 + 8);
    v77 = v7;
    LODWORD(v5) = v75;
  }
  LOBYTE(v68) = 0;
  v70 = -1;
  if ((_DWORD)v5 != -1)
  {
    v8 = v5;
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v5])(&v78, &v68, v74);
    v70 = v5;
    if ((_DWORD)v5 == 8)
    {
      if (v68 == 0.0)
        v9 = 0;
      else
        v9 = **(_DWORD **)&v68;
      ((void (*)(double **, double *))off_1E0FD7CC8[v8])(&v78, &v68);
      if (!v9)
      {
LABEL_102:
        switch(v2[6])
        {
          case 0:
            if (v2[12])
              goto LABEL_138;
            *(float *)(a2 + 8) = *v4 / *v6;
            *(_DWORD *)(a2 + 24) = 0;
            *(_DWORD *)(a2 + 32) = 0;
            goto LABEL_125;
          case 1:
            v49 = v2[12];
            if (v49 != 1)
              goto LABEL_138;
            _H0 = *(_WORD *)v4;
            _H1 = *(_WORD *)v6;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            _S0 = _S0 / _S1;
            __asm { FCVT            H0, S0 }
            v55 = a2;
            *(_WORD *)(a2 + 8) = LOWORD(_S0);
            goto LABEL_109;
          case 2:
            v49 = v2[12];
            if (v49 != 2)
              goto LABEL_138;
            v55 = a2;
            *(double *)(a2 + 8) = *(double *)v4 / *(double *)v6;
LABEL_109:
            *(_DWORD *)(v55 + 24) = v49;
            *(_DWORD *)(v55 + 32) = 0;
            goto LABEL_125;
          case 3:
            if (v2[12] != 3)
              goto LABEL_138;
            v56 = *v6;
            if (!*(_DWORD *)v6)
              goto LABEL_122;
            v57 = v2[2];
            if (v57 == 0x80000000 && v56 == NAN)
              goto LABEL_122;
            v58 = 0;
            LODWORD(v69) = v57 / SLODWORD(v56);
            LODWORD(v71) = 3;
            break;
          case 4:
            if (v2[12] != 4)
              goto LABEL_138;
            if (*(_DWORD *)v6)
            {
              v59 = 0;
              LODWORD(v69) = v2[2] / *(_DWORD *)v6;
              LODWORD(v71) = 4;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v59 = 1;
            }
            v72 = v59;
            *(_BYTE *)(a2 + 8) = 0;
            *(_DWORD *)(a2 + 32) = -1;
            ((void (*)(double **, uint64_t, uint64_t *))off_1E0FD7DE0[v59])(&v78, a2 + 8, &v69);
            *(_DWORD *)(a2 + 32) = v59;
            v62 = v72;
            if (v72 == -1)
              goto LABEL_125;
            goto LABEL_124;
          case 5:
            if (v2[12] != 5)
              goto LABEL_138;
            v60 = *(_QWORD *)v6;
            if (!*(_QWORD *)v6 || (v61 = *((_QWORD *)v2 + 1), v61 == 0x8000000000000000) && v60 == -1)
            {
LABEL_122:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v58 = 1;
            }
            else
            {
              v58 = 0;
              v69 = v61 / v60;
              LODWORD(v71) = 5;
            }
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1825B684CLL);
        }
        v72 = v58;
        *(_BYTE *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 32) = -1;
        ((void (*)(double **, uint64_t, uint64_t *))off_1E0FD7DE0[v58])(&v78, a2 + 8, &v69);
        *(_DWORD *)(a2 + 32) = v58;
        v62 = v72;
        if (v72 != -1)
LABEL_124:
          ((void (*)(double **, uint64_t *))off_1E0FD7DD0[v62])(&v78, &v69);
        goto LABEL_125;
      }
      goto LABEL_18;
    }
    ((void (*)(double **, double *))off_1E0FD7CC8[v5])(&v78, &v68);
    LODWORD(v7) = v77;
  }
  LOBYTE(v68) = 0;
  v70 = -1;
  if ((_DWORD)v7 == -1)
    goto LABEL_102;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v7])(&v78, &v68, v76);
  v70 = v7;
  if ((_DWORD)v7 != 8 || v68 == 0.0)
    v9 = 0;
  else
    v9 = **(_DWORD **)&v68;
  ((void (*)(double **, double *))off_1E0FD7CC8[v7])(&v78, &v68);
  if (!v9)
    goto LABEL_102;
LABEL_18:
  v10 = v9;
  v11 = 24 * v9;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v9;
  v13 = (double *)(v12 + 2);
  v14 = (v11 - 24) / 0x18uLL;
  v15 = 24;
  bzero(v12 + 2, 24 * v14 + 24);
  v18 = 0;
  LODWORD(v68) = 0;
  v70 = 0;
  LODWORD(v71) = 0;
  v73 = 0;
  while (2)
  {
    if (v75 == 8)
    {
      if (v18 >= *(unsigned int *)v74[0])
        goto LABEL_134;
      v17 = v74[0] + v15 - 16;
      v19 = *(unsigned int *)(v74[0] + v15);
      v20 = v70;
      if (v70 == -1)
      {
        if ((_DWORD)v19 == -1)
          goto LABEL_31;
      }
      else if ((_DWORD)v19 == -1)
      {
        goto LABEL_26;
      }
      v78 = &v68;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v19])(&v78, &v68, v17);
    }
    else
    {
      v20 = v70;
      if (v70 == -1)
      {
        if (v75 == -1)
          goto LABEL_31;
      }
      else if (v75 == -1)
      {
LABEL_26:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v20])(&v78, &v68, v17);
        v70 = -1;
        goto LABEL_31;
      }
      v78 = &v68;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v75])(&v78, &v68, v74);
    }
LABEL_31:
    if (v77 == 8)
    {
      if (v18 >= *(unsigned int *)v76[0])
      {
LABEL_134:
        __break(0xC471u);
        JUMPOUT(0x1825B67A4);
      }
      v17 = v76[0] + v15 - 16;
      v21 = *(unsigned int *)(v76[0] + v15);
      v22 = v73;
      if (v73 == -1)
      {
        if ((_DWORD)v21 == -1)
          goto LABEL_43;
      }
      else if ((_DWORD)v21 == -1)
      {
        goto LABEL_38;
      }
      v78 = &v71;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v21])(&v78, &v71, v17);
      goto LABEL_43;
    }
    v22 = v73;
    if (v73 == -1)
    {
      if (v77 == -1)
        goto LABEL_43;
LABEL_40:
      v78 = &v71;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v77])(&v78, &v71, v76);
      goto LABEL_43;
    }
    if (v77 != -1)
      goto LABEL_40;
LABEL_38:
    ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v22])(&v78, &v71, v17);
    v73 = -1;
LABEL_43:
    switch(v70)
    {
      case 0u:
        if (v73)
          goto LABEL_138;
        *(float *)v65 = *(float *)&v68 / *(float *)&v71;
        goto LABEL_50;
      case 1u:
        if (v73 != 1)
          goto LABEL_138;
        _H0 = LOWORD(v68);
        _H1 = LOWORD(v71);
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        _S0 = _S0 / _S1;
        __asm { FCVT            H0, S0 }
        LOWORD(v65[0]) = LOWORD(_S0);
        goto LABEL_50;
      case 2u:
        if (v73 != 2)
          goto LABEL_138;
        v65[0] = v68 / v71;
LABEL_50:
        v66 = v70;
        v67 = 0;
        goto LABEL_74;
      case 3u:
        if (v73 != 3)
          goto LABEL_138;
        if (!LODWORD(v71) || LODWORD(v68) == 0x80000000 && LODWORD(v71) == -1)
          goto LABEL_63;
        v32 = 0;
        LODWORD(v79[0]) = SLODWORD(v68) / SLODWORD(v71);
        v33 = 3;
        goto LABEL_65;
      case 4u:
        if (v73 != 4)
          goto LABEL_138;
        if (!LODWORD(v71))
          goto LABEL_63;
        v32 = 0;
        LODWORD(v79[0]) = LODWORD(v68) / LODWORD(v71);
        v33 = 4;
        goto LABEL_65;
      case 5u:
        if (v73 != 5)
          goto LABEL_138;
        if (v71 == 0.0 || v68 == -0.0 && v71 == NAN)
        {
LABEL_63:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v32 = 1;
        }
        else
        {
          v32 = 0;
          v79[0] = *(_QWORD *)&v68 / *(uint64_t *)&v71;
          v33 = 5;
LABEL_65:
          v80 = v33;
        }
        v81 = v32;
        LOBYTE(v65[0]) = 0;
        v67 = -1;
        ((void (*)(char *, double *, _QWORD *))off_1E0FD7DE0[v32])(&v64, v65, v79);
        v67 = v32;
        if (v81 != -1)
          ((void (*)(char *, _QWORD *))off_1E0FD7DD0[v81])(&v64, v79);
        if (!v67)
        {
LABEL_74:
          if (v18 >= *v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1825B67C4);
          }
          v37 = v12[(unint64_t)v15 / 4];
          if ((_DWORD)v37 == -1)
          {
            if (v66 == -1)
              goto LABEL_80;
          }
          else if (v66 == -1)
          {
            ((void (*)(double **, double *))off_1E0FD7CC8[v37])(&v78, v13);
            v12[(unint64_t)v15 / 4] = -1;
            goto LABEL_80;
          }
          v78 = v13;
          ((void (*)(double **, double *, double *))off_1E0FD8188[v66])(&v78, v13, v65);
LABEL_80:
          v35 = 1;
          v36 = v67;
          if (v67 == -1)
            goto LABEL_82;
LABEL_81:
          ((void (*)(double **, double *))off_1E0FD7DD0[v36])(&v78, v65);
          goto LABEL_82;
        }
        if (v67 != 1)
        {
LABEL_138:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
          __break(0xC471u);
          JUMPOUT(0x1825B6828);
        }
        v34 = v65[0];
        if (*(_QWORD *)&v65[0])
          **(_DWORD **)&v65[0] += 2;
        v35 = 0;
        *(double *)(a2 + 8) = v34;
        *(_DWORD *)(a2 + 32) = 1;
        v36 = v67;
        if (v67 != -1)
          goto LABEL_81;
LABEL_82:
        if ((v35 & 1) == 0)
          goto LABEL_90;
        ++v18;
        v13 += 3;
        v15 += 24;
        if (v10 != v18)
          continue;
        v38 = *v12;
        v39 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v38 + 8));
        v40 = v39;
        *v39 = v38;
        if ((_DWORD)v38)
        {
          v41 = v39 + 6;
          v42 = 24 * v38;
          v43 = v12 + 6;
          do
          {
            *((_BYTE *)v41 - 16) = 0;
            v16 = v41 - 4;
            *v41 = -1;
            v44 = *v43;
            if ((_DWORD)v44 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v44])(&v78, v16, v43 - 4);
              *v41 = v44;
            }
            v41 += 6;
            v43 += 6;
            v42 -= 24;
          }
          while (v42);
        }
        *(_QWORD *)(a2 + 8) = v40;
        *(_DWORD *)(a2 + 24) = 8;
        *(_DWORD *)(a2 + 32) = 0;
LABEL_90:
        if (v73 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v73])(&v78, &v71);
        v73 = -1;
        if (v70 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v70])(&v78, &v68);
        v45 = *v12;
        if ((_DWORD)v45)
        {
          v46 = 24 * v45;
          v47 = v12 + 6;
          do
          {
            v16 = v47 - 4;
            v48 = *v47;
            if ((_DWORD)v48 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v48])(&v68, v16);
            *v47 = -1;
            v47 += 6;
            v46 -= 24;
          }
          while (v46);
        }
        WTF::fastFree((WTF *)v12, v16);
LABEL_125:
        if (v77 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v77])(&v68, v76);
        v77 = -1;
        if (v75 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v75])(&v68, v74);
        return;
      default:
        goto LABEL_139;
    }
  }
}

void WGSL::constantModulo(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  float *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  long double *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v55;
  int v56;
  long double v57;
  float v58;
  int v59;
  int v60;
  int v61;
  long double v62;
  uint64_t v63;
  uint64_t v64;
  char v66;
  _QWORD v67[2];
  unsigned int v68;
  unsigned int v69;
  long double __x;
  uint64_t v71;
  unsigned int v72;
  long double __y;
  unsigned int v74;
  unsigned int v75;
  _QWORD v76[2];
  int v77;
  _QWORD v78[2];
  int v79;
  long double *p_x;
  _QWORD v81[2];
  int v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B737CLL);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B739CLL);
  }
  v4 = (float *)(v2 + 2);
  LOBYTE(v76[0]) = 0;
  v77 = -1;
  v5 = v2[6];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(long double *, _QWORD *, int *))off_1E0FD8010[v5])(&__x, v76, v2 + 2);
    v77 = v5;
  }
  v6 = (float *)(v2 + 8);
  LOBYTE(v78[0]) = 0;
  v79 = -1;
  v7 = v2[12];
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(long double *, _QWORD *, int *))off_1E0FD8010[v7])(&__x, v78, v2 + 8);
    v79 = v7;
    LODWORD(v5) = v77;
  }
  LOBYTE(__x) = 0;
  v72 = -1;
  if ((_DWORD)v5 != -1)
  {
    v8 = v5;
    ((void (*)(long double **, long double *, _QWORD *))off_1E0FD8010[v5])(&p_x, &__x, v76);
    v72 = v5;
    if ((_DWORD)v5 == 8)
    {
      if (*(_QWORD *)&__x)
        v9 = **(_DWORD **)&__x;
      else
        v9 = 0;
      ((void (*)(long double **, long double *))off_1E0FD7CC8[v8])(&p_x, &__x);
      if (!v9)
      {
LABEL_102:
        switch(v2[6])
        {
          case 0:
            if (v2[12])
              goto LABEL_138;
            *(float *)(a2 + 8) = fmodf(*v4, *v6);
            *(_DWORD *)(a2 + 24) = 0;
            *(_DWORD *)(a2 + 32) = 0;
            goto LABEL_125;
          case 1:
            if (v2[12] != 1)
              goto LABEL_138;
            _H0 = *(_WORD *)v4;
            _H1 = *(_WORD *)v6;
            __asm
            {
              FCVT            S0, H0; float
              FCVT            S1, H1; float
            }
            _S0 = fmodf(_S0, _S1);
            __asm { FCVT            H0, S0 }
            v55 = a2;
            *(_WORD *)(a2 + 8) = LOWORD(_S0);
            v56 = 1;
            goto LABEL_109;
          case 2:
            if (v2[12] != 2)
              goto LABEL_138;
            v57 = fmod(*(long double *)v4, *(long double *)v6);
            v55 = a2;
            *(long double *)(a2 + 8) = v57;
            v56 = 2;
LABEL_109:
            *(_DWORD *)(v55 + 24) = v56;
            *(_DWORD *)(v55 + 32) = 0;
            goto LABEL_125;
          case 3:
            if (v2[12] != 3)
              goto LABEL_138;
            v58 = *v6;
            if (!*(_DWORD *)v6)
              goto LABEL_122;
            v59 = v2[2];
            if (v59 == 0x80000000 && v58 == NAN)
              goto LABEL_122;
            v60 = 0;
            LODWORD(v71) = v59 % SLODWORD(v58);
            LODWORD(__y) = 3;
            break;
          case 4:
            if (v2[12] != 4)
              goto LABEL_138;
            if (*(_DWORD *)v6)
            {
              v61 = 0;
              LODWORD(v71) = v2[2] % *(_DWORD *)v6;
              LODWORD(__y) = 4;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v61 = 1;
            }
            v74 = v61;
            *(_BYTE *)(a2 + 8) = 0;
            *(_DWORD *)(a2 + 32) = -1;
            ((void (*)(long double **, uint64_t, uint64_t *))off_1E0FD7DE0[v61])(&p_x, a2 + 8, &v71);
            *(_DWORD *)(a2 + 32) = v61;
            v64 = v74;
            if (v74 == -1)
              goto LABEL_125;
            goto LABEL_124;
          case 5:
            if (v2[12] != 5)
              goto LABEL_138;
            v62 = *(double *)v6;
            if (!*(_QWORD *)v6 || (v63 = *((_QWORD *)v2 + 1), v63 == 0x8000000000000000) && v62 == NAN)
            {
LABEL_122:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v60 = 1;
            }
            else
            {
              v60 = 0;
              v71 = v63 % *(_QWORD *)&v62;
              LODWORD(__y) = 5;
            }
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1825B73E4);
        }
        v74 = v60;
        *(_BYTE *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 32) = -1;
        ((void (*)(long double **, uint64_t, uint64_t *))off_1E0FD7DE0[v60])(&p_x, a2 + 8, &v71);
        *(_DWORD *)(a2 + 32) = v60;
        v64 = v74;
        if (v74 != -1)
LABEL_124:
          ((void (*)(long double **, uint64_t *))off_1E0FD7DD0[v64])(&p_x, &v71);
        goto LABEL_125;
      }
      goto LABEL_18;
    }
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v5])(&p_x, &__x);
    LODWORD(v7) = v79;
  }
  LOBYTE(__x) = 0;
  v72 = -1;
  if ((_DWORD)v7 == -1)
    goto LABEL_102;
  ((void (*)(long double **, long double *, _QWORD *))off_1E0FD8010[v7])(&p_x, &__x, v78);
  v72 = v7;
  if ((_DWORD)v7 == 8 && *(_QWORD *)&__x)
    v9 = **(_DWORD **)&__x;
  else
    v9 = 0;
  ((void (*)(long double **, long double *))off_1E0FD7CC8[v7])(&p_x, &__x);
  if (!v9)
    goto LABEL_102;
LABEL_18:
  v10 = v9;
  v11 = 24 * v9;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v9;
  v13 = (long double *)(v12 + 2);
  v14 = (v11 - 24) / 0x18uLL;
  v15 = 24;
  bzero(v12 + 2, 24 * v14 + 24);
  v17 = 0;
  LODWORD(__x) = 0;
  v72 = 0;
  LODWORD(__y) = 0;
  v75 = 0;
  while (2)
  {
    if (v77 == 8)
    {
      if (v17 >= *(unsigned int *)v76[0])
        goto LABEL_134;
      v16 = v76[0] + v15 - 16;
      v18 = *(unsigned int *)(v76[0] + v15);
      v19 = v72;
      if (v72 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_31;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_26;
      }
      p_x = &__x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v18])(&p_x, &__x, v16);
    }
    else
    {
      v19 = v72;
      if (v72 == -1)
      {
        if (v77 == -1)
          goto LABEL_31;
      }
      else if (v77 == -1)
      {
LABEL_26:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v19])(&p_x, &__x, v16);
        v72 = -1;
        goto LABEL_31;
      }
      p_x = &__x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v77])(&p_x, &__x, v76);
    }
LABEL_31:
    if (v79 == 8)
    {
      if (v17 >= *(unsigned int *)v78[0])
      {
LABEL_134:
        __break(0xC471u);
        JUMPOUT(0x1825B733CLL);
      }
      v16 = v78[0] + v15 - 16;
      v20 = *(unsigned int *)(v78[0] + v15);
      v21 = v75;
      if (v75 == -1)
      {
        if ((_DWORD)v20 == -1)
          goto LABEL_43;
      }
      else if ((_DWORD)v20 == -1)
      {
        goto LABEL_38;
      }
      p_x = &__y;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v20])(&p_x, &__y, v16);
      goto LABEL_43;
    }
    v21 = v75;
    if (v75 == -1)
    {
      if (v79 == -1)
        goto LABEL_43;
LABEL_40:
      p_x = &__y;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v79])(&p_x, &__y, v78);
      goto LABEL_43;
    }
    if (v79 != -1)
      goto LABEL_40;
LABEL_38:
    ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v21])(&p_x, &__y, v16);
    v75 = -1;
LABEL_43:
    v22 = v72;
    switch(v72)
    {
      case 0u:
        if (v75)
          goto LABEL_138;
        LODWORD(v67[0]) = fmodf(*(float *)&__x, *(float *)&__y);
        goto LABEL_50;
      case 1u:
        if (v75 != 1)
          goto LABEL_138;
        _H0 = LOWORD(__x);
        _H1 = LOWORD(__y);
        __asm
        {
          FCVT            S0, H0; float
          FCVT            S1, H1; float
        }
        _S0 = fmodf(_S0, _S1);
        __asm { FCVT            H0, S0 }
        LOWORD(v67[0]) = LOWORD(_S0);
        goto LABEL_50;
      case 2u:
        if (v75 != 2)
          goto LABEL_138;
        v67[0] = fmod(__x, __y);
LABEL_50:
        v68 = v22;
        v69 = 0;
        goto LABEL_74;
      case 3u:
        if (v75 != 3)
          goto LABEL_138;
        if (!LODWORD(__y) || LODWORD(__x) == 0x80000000 && LODWORD(__y) == -1)
          goto LABEL_63;
        v33 = 0;
        LODWORD(v81[0]) = SLODWORD(__x) % SLODWORD(__y);
        v34 = 3;
        goto LABEL_65;
      case 4u:
        if (v75 != 4)
          goto LABEL_138;
        if (!LODWORD(__y))
          goto LABEL_63;
        v33 = 0;
        LODWORD(v81[0]) = LODWORD(__x) % LODWORD(__y);
        v34 = 4;
        goto LABEL_65;
      case 5u:
        if (v75 != 5)
          goto LABEL_138;
        if (!*(_QWORD *)&__y || *(_QWORD *)&__x == 0x8000000000000000 && *(_QWORD *)&__y == -1)
        {
LABEL_63:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v33 = 1;
        }
        else
        {
          v33 = 0;
          v81[0] = *(uint64_t *)&__x % *(_QWORD *)&__y;
          v34 = 5;
LABEL_65:
          v82 = v34;
        }
        v83 = v33;
        LOBYTE(v67[0]) = 0;
        v69 = -1;
        ((void (*)(char *, _QWORD *, _QWORD *))off_1E0FD7DE0[v33])(&v66, v67, v81);
        v69 = v33;
        if (v83 != -1)
          ((void (*)(char *, _QWORD *))off_1E0FD7DD0[v83])(&v66, v81);
        if (!v69)
        {
LABEL_74:
          if (v17 >= *v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1825B735CLL);
          }
          v38 = v12[(unint64_t)v15 / 4];
          if ((_DWORD)v38 == -1)
          {
            if (v68 == -1)
              goto LABEL_80;
          }
          else if (v68 == -1)
          {
            ((void (*)(long double **, long double *))off_1E0FD7CC8[v38])(&p_x, v13);
            v12[(unint64_t)v15 / 4] = -1;
            goto LABEL_80;
          }
          p_x = v13;
          ((void (*)(long double **, long double *, _QWORD *))off_1E0FD8188[v68])(&p_x, v13, v67);
LABEL_80:
          v36 = 1;
          v37 = v69;
          if (v69 == -1)
            goto LABEL_82;
LABEL_81:
          ((void (*)(long double **, _QWORD *))off_1E0FD7DD0[v37])(&p_x, v67);
          goto LABEL_82;
        }
        if (v69 != 1)
        {
LABEL_138:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
          __break(0xC471u);
          JUMPOUT(0x1825B73C0);
        }
        v35 = v67[0];
        if (v67[0])
          *(_DWORD *)v67[0] += 2;
        v36 = 0;
        *(_QWORD *)(a2 + 8) = v35;
        *(_DWORD *)(a2 + 32) = 1;
        v37 = v69;
        if (v69 != -1)
          goto LABEL_81;
LABEL_82:
        if ((v36 & 1) == 0)
          goto LABEL_90;
        ++v17;
        v13 += 3;
        v15 += 24;
        if (v10 != v17)
          continue;
        v39 = *v12;
        v40 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v39 + 8));
        v41 = v40;
        *v40 = v39;
        if ((_DWORD)v39)
        {
          v42 = v40 + 6;
          v43 = 24 * v39;
          v44 = v12 + 6;
          do
          {
            *((_BYTE *)v42 - 16) = 0;
            v23 = v42 - 4;
            *v42 = -1;
            v45 = *v44;
            if ((_DWORD)v45 != -1)
            {
              ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v45])(&p_x, v23, v44 - 4);
              *v42 = v45;
            }
            v42 += 6;
            v44 += 6;
            v43 -= 24;
          }
          while (v43);
        }
        *(_QWORD *)(a2 + 8) = v41;
        *(_DWORD *)(a2 + 24) = 8;
        *(_DWORD *)(a2 + 32) = 0;
LABEL_90:
        if (v75 != -1)
          ((void (*)(long double **, long double *))off_1E0FD7CC8[v75])(&p_x, &__y);
        v75 = -1;
        if (v72 != -1)
          ((void (*)(long double **, long double *))off_1E0FD7CC8[v72])(&p_x, &__x);
        v46 = *v12;
        if ((_DWORD)v46)
        {
          v47 = 24 * v46;
          v48 = v12 + 6;
          do
          {
            v23 = v48 - 4;
            v49 = *v48;
            if ((_DWORD)v49 != -1)
              ((void (*)(long double *, _DWORD *))off_1E0FD7CC8[v49])(&__x, v23);
            *v48 = -1;
            v48 += 6;
            v47 -= 24;
          }
          while (v47);
        }
        WTF::fastFree((WTF *)v12, v23);
LABEL_125:
        if (v79 != -1)
          ((void (*)(long double *, _QWORD *))off_1E0FD7CC8[v79])(&__x, v78);
        v79 = -1;
        if (v77 != -1)
          ((void (*)(long double *, _QWORD *))off_1E0FD7CC8[v77])(&__x, v76);
        return;
      default:
        goto LABEL_139;
    }
  }
}

void WGSL::constantEqual(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v26;
  unsigned int *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v48;
  uint64_t v49;
  double v50[2];
  int v51;
  double v52[2];
  int v53;
  char v54;
  double *v55;
  char v56[16];
  int v57;
  unsigned int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  unsigned int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B7CA0);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B7CC0);
  }
  v5 = (float *)(v3 + 2);
  LOBYTE(v59[0]) = 0;
  v60 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v6])(v50, v59, v3 + 2);
    v60 = v6;
  }
  v7 = (float *)(v3 + 8);
  LOBYTE(v61[0]) = 0;
  v62 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v8])(v50, v61, v3 + 8);
    v62 = v8;
    LODWORD(v6) = v60;
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(v50[0]) = 0;
    v51 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v8])(&v55, v50, v61),
           v51 = v8,
           (_DWORD)v8 != 8)
       || !*(_QWORD *)&v50[0]
        ? (v10 = 0)
        : (v10 = **(_DWORD **)&v50[0]),
          ((void (*)(double **, double *))off_1E0FD7CC8[v8])(&v55, v50),
          !v10))
    {
LABEL_89:
      switch(v3[6])
      {
        case 0:
          if (v3[12])
            goto LABEL_115;
          v43 = *v5 == *v7;
          goto LABEL_102;
        case 1:
          if (v3[12] != 1)
            goto LABEL_115;
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          v43 = _S0 == _S1;
          goto LABEL_102;
        case 2:
          if (v3[12] != 2)
            goto LABEL_115;
          v43 = *(double *)v5 == *(double *)v7;
          goto LABEL_102;
        case 3:
          if (v3[12] != 3)
            goto LABEL_115;
          goto LABEL_99;
        case 4:
          if (v3[12] != 4)
            goto LABEL_115;
LABEL_99:
          v43 = *(_DWORD *)v5 == *(_DWORD *)v7;
          goto LABEL_102;
        case 5:
          if (v3[12] != 5)
            goto LABEL_115;
          v43 = *(_QWORD *)v5 == *(_QWORD *)v7;
LABEL_102:
          v48 = v43;
          break;
        case 6:
          if (v3[12] != 6)
            goto LABEL_115;
          v48 = (*(_BYTE *)v5 == 0) ^ (*(_BYTE *)v7 != 0);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825B7D08);
      }
      *(_BYTE *)(a2 + 8) = v48;
      *(_DWORD *)(a2 + 24) = 6;
      *(_DWORD *)(a2 + 32) = 0;
      v42 = v62;
      if (v62 == -1)
        goto LABEL_107;
LABEL_106:
      ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v42])(v50, v61);
      goto LABEL_107;
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v6])(&v55, v50, v59);
  v51 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v6])(&v55, v50);
    LODWORD(v8) = v62;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v50[0])
    v10 = **(_DWORD **)&v50[0];
  else
    v10 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v55, v50);
  if (!v10)
    goto LABEL_89;
LABEL_18:
  v49 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v14 = 0;
  v15 = 0;
  LODWORD(v50[0]) = 0;
  v51 = 0;
  LODWORD(v52[0]) = 0;
  v53 = 0;
  while (2)
  {
    if (v60 == 8)
    {
      if (v15 >= *(unsigned int *)v59[0])
        goto LABEL_112;
      v17 = *(unsigned int *)(v59[0] + v14 + 24);
      if (v51 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_34;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_29;
      }
      v55 = v50;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v17])(&v55, v50, v59[0] + v14 + 8);
    }
    else
    {
      if (v51 == -1)
      {
        if (v60 == -1)
          goto LABEL_34;
      }
      else if (v60 == -1)
      {
LABEL_29:
        ((void (*)(double **, double *))off_1E0FD7CC8[v51])(&v55, v50);
        v51 = -1;
        goto LABEL_34;
      }
      v55 = v50;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v60])(&v55, v50, v59);
    }
LABEL_34:
    if (v62 == 8)
    {
      if (v15 >= *(unsigned int *)v61[0])
      {
LABEL_112:
        __break(0xC471u);
        JUMPOUT(0x1825B7C80);
      }
      v18 = *(unsigned int *)(v61[0] + v14 + 24);
      if (v53 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_46;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_41;
      }
      v55 = v52;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v18])(&v55, v52, v61[0] + v14 + 8);
      goto LABEL_46;
    }
    if (v53 == -1)
    {
      if (v62 == -1)
        goto LABEL_46;
LABEL_43:
      v55 = v52;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v62])(&v55, v52, v61);
      goto LABEL_46;
    }
    if (v62 != -1)
      goto LABEL_43;
LABEL_41:
    ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v55, v52);
    v53 = -1;
LABEL_46:
    switch(v51)
    {
      case 0:
        if (v53)
          goto LABEL_115;
        _Q0.n128_u32[0] = LODWORD(v50[0]);
        _ZF = *(float *)v50 == *(float *)v52;
        goto LABEL_59;
      case 1:
        if (v53 != 1)
          goto LABEL_115;
        _H0 = LOWORD(v50[0]);
        _H1 = LOWORD(v52[0]);
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        _ZF = _Q0.n128_f32[0] == _S1;
        goto LABEL_59;
      case 2:
        if (v53 != 2)
          goto LABEL_115;
        _Q0.n128_f64[0] = v50[0];
        _ZF = v50[0] == v52[0];
        goto LABEL_59;
      case 3:
        if (v53 == 3)
          goto LABEL_56;
        goto LABEL_115;
      case 4:
        if (v53 != 4)
          goto LABEL_115;
LABEL_56:
        _ZF = LODWORD(v50[0]) == LODWORD(v52[0]);
        goto LABEL_59;
      case 5:
        if (v53 != 5)
          goto LABEL_115;
        _ZF = *(_QWORD *)&v50[0] == *(_QWORD *)&v52[0];
LABEL_59:
        v26 = _ZF;
        v56[0] = v26;
        v57 = 6;
        v58 = 0;
        if (v15 < *v12)
          goto LABEL_63;
        goto LABEL_70;
      case 6:
        if (v53 != 6)
        {
LABEL_115:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_116:
          __break(0xC471u);
          JUMPOUT(0x1825B7CE4);
        }
        v26 = (LOBYTE(v50[0]) == 0) ^ (LOBYTE(v52[0]) != 0);
        v56[0] = v26;
        v57 = 6;
        v58 = 0;
        if (v15 >= *v12)
        {
LABEL_70:
          __break(0xC471u);
          JUMPOUT(0x1825B7968);
        }
LABEL_63:
        v27 = &v12[v14 / 4];
        v28 = (char *)&v12[v14 / 4 + 2];
        v29 = v12[v14 / 4 + 6];
        if ((_DWORD)v29 == 6)
        {
          v16 = 0;
          *v28 = v26;
LABEL_20:
          ((void (*)(char *, char *))off_1E0FD7DD0[v16])(&v54, v56);
          goto LABEL_21;
        }
        if ((_DWORD)v29 == -1)
        {
          v16 = 0;
          *((_BYTE *)v27 + 8) = v26;
          v27[6] = 6;
          goto LABEL_20;
        }
        ((void (*)(char *, char *, __n128))off_1E0FD7CC8[v29])(&v54, v28, _Q0);
        v16 = v58;
        *((_BYTE *)v27 + 8) = v56[0];
        v27[6] = 6;
        if ((_DWORD)v16 != -1)
          goto LABEL_20;
LABEL_21:
        ++v15;
        v14 += 24;
        if (v11 != v14)
          continue;
        v30 = *v12;
        v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
        v33 = v31;
        *v31 = v30;
        if ((_DWORD)v30)
        {
          v34 = v31 + 6;
          v35 = 24 * v30;
          v36 = v12 + 6;
          do
          {
            *((_BYTE *)v34 - 16) = 0;
            v32 = v34 - 4;
            *v34 = -1;
            v37 = *v36;
            if ((_DWORD)v37 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v37])(&v55, v32, v36 - 4);
              *v34 = v37;
            }
            v34 += 6;
            v36 += 6;
            v35 -= 24;
          }
          while (v35);
        }
        *(_QWORD *)(v49 + 8) = v33;
        *(_DWORD *)(v49 + 24) = 8;
        *(_DWORD *)(v49 + 32) = 0;
        if (v53 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v55, v52);
        v53 = -1;
        if (v51 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v51])(&v55, v50);
        v38 = *v12;
        if ((_DWORD)v38)
        {
          v39 = 24 * v38;
          v40 = v12 + 6;
          do
          {
            v32 = v40 - 4;
            v41 = *v40;
            if ((_DWORD)v41 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v41])(v50, v32);
            *v40 = -1;
            v40 += 6;
            v39 -= 24;
          }
          while (v39);
        }
        WTF::fastFree((WTF *)v12, v32);
        v42 = v62;
        if (v62 != -1)
          goto LABEL_106;
LABEL_107:
        v62 = -1;
        if (v60 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v60])(v50, v59);
        return;
      default:
        goto LABEL_116;
    }
  }
}

void WGSL::constantNotEqual(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v26;
  unsigned int *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v48;
  uint64_t v49;
  double v50[2];
  int v51;
  double v52[2];
  int v53;
  char v54;
  double *v55;
  char v56[16];
  int v57;
  unsigned int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  unsigned int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B85CCLL);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B85ECLL);
  }
  v5 = (float *)(v3 + 2);
  LOBYTE(v59[0]) = 0;
  v60 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v6])(v50, v59, v3 + 2);
    v60 = v6;
  }
  v7 = (float *)(v3 + 8);
  LOBYTE(v61[0]) = 0;
  v62 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v8])(v50, v61, v3 + 8);
    v62 = v8;
    LODWORD(v6) = v60;
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(v50[0]) = 0;
    v51 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v8])(&v55, v50, v61),
           v51 = v8,
           (_DWORD)v8 != 8)
       || !*(_QWORD *)&v50[0]
        ? (v10 = 0)
        : (v10 = **(_DWORD **)&v50[0]),
          ((void (*)(double **, double *))off_1E0FD7CC8[v8])(&v55, v50),
          !v10))
    {
LABEL_89:
      switch(v3[6])
      {
        case 0:
          if (v3[12])
            goto LABEL_115;
          v43 = *v5 == *v7;
          goto LABEL_102;
        case 1:
          if (v3[12] != 1)
            goto LABEL_115;
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          v43 = _S0 == _S1;
          goto LABEL_102;
        case 2:
          if (v3[12] != 2)
            goto LABEL_115;
          v43 = *(double *)v5 == *(double *)v7;
          goto LABEL_102;
        case 3:
          if (v3[12] != 3)
            goto LABEL_115;
          goto LABEL_99;
        case 4:
          if (v3[12] != 4)
            goto LABEL_115;
LABEL_99:
          v43 = *(_DWORD *)v5 == *(_DWORD *)v7;
          goto LABEL_102;
        case 5:
          if (v3[12] != 5)
            goto LABEL_115;
          v43 = *(_QWORD *)v5 == *(_QWORD *)v7;
LABEL_102:
          v48 = !v43;
          break;
        case 6:
          if (v3[12] != 6)
            goto LABEL_115;
          v48 = (*(_BYTE *)v5 != 0) ^ (*(_BYTE *)v7 != 0);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825B8634);
      }
      *(_BYTE *)(a2 + 8) = v48;
      *(_DWORD *)(a2 + 24) = 6;
      *(_DWORD *)(a2 + 32) = 0;
      v42 = v62;
      if (v62 == -1)
        goto LABEL_107;
LABEL_106:
      ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v42])(v50, v61);
      goto LABEL_107;
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v6])(&v55, v50, v59);
  v51 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v6])(&v55, v50);
    LODWORD(v8) = v62;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v50[0])
    v10 = **(_DWORD **)&v50[0];
  else
    v10 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v55, v50);
  if (!v10)
    goto LABEL_89;
LABEL_18:
  v49 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v14 = 0;
  v15 = 0;
  LODWORD(v50[0]) = 0;
  v51 = 0;
  LODWORD(v52[0]) = 0;
  v53 = 0;
  while (2)
  {
    if (v60 == 8)
    {
      if (v15 >= *(unsigned int *)v59[0])
        goto LABEL_112;
      v17 = *(unsigned int *)(v59[0] + v14 + 24);
      if (v51 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_34;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_29;
      }
      v55 = v50;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v17])(&v55, v50, v59[0] + v14 + 8);
    }
    else
    {
      if (v51 == -1)
      {
        if (v60 == -1)
          goto LABEL_34;
      }
      else if (v60 == -1)
      {
LABEL_29:
        ((void (*)(double **, double *))off_1E0FD7CC8[v51])(&v55, v50);
        v51 = -1;
        goto LABEL_34;
      }
      v55 = v50;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v60])(&v55, v50, v59);
    }
LABEL_34:
    if (v62 == 8)
    {
      if (v15 >= *(unsigned int *)v61[0])
      {
LABEL_112:
        __break(0xC471u);
        JUMPOUT(0x1825B85ACLL);
      }
      v18 = *(unsigned int *)(v61[0] + v14 + 24);
      if (v53 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_46;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_41;
      }
      v55 = v52;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v18])(&v55, v52, v61[0] + v14 + 8);
      goto LABEL_46;
    }
    if (v53 == -1)
    {
      if (v62 == -1)
        goto LABEL_46;
LABEL_43:
      v55 = v52;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v62])(&v55, v52, v61);
      goto LABEL_46;
    }
    if (v62 != -1)
      goto LABEL_43;
LABEL_41:
    ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v55, v52);
    v53 = -1;
LABEL_46:
    switch(v51)
    {
      case 0:
        if (v53)
          goto LABEL_115;
        _Q0.n128_u32[0] = LODWORD(v50[0]);
        _ZF = *(float *)v50 == *(float *)v52;
        goto LABEL_59;
      case 1:
        if (v53 != 1)
          goto LABEL_115;
        _H0 = LOWORD(v50[0]);
        _H1 = LOWORD(v52[0]);
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        _ZF = _Q0.n128_f32[0] == _S1;
        goto LABEL_59;
      case 2:
        if (v53 != 2)
          goto LABEL_115;
        _Q0.n128_f64[0] = v50[0];
        _ZF = v50[0] == v52[0];
        goto LABEL_59;
      case 3:
        if (v53 == 3)
          goto LABEL_56;
        goto LABEL_115;
      case 4:
        if (v53 != 4)
          goto LABEL_115;
LABEL_56:
        _ZF = LODWORD(v50[0]) == LODWORD(v52[0]);
        goto LABEL_59;
      case 5:
        if (v53 != 5)
          goto LABEL_115;
        _ZF = *(_QWORD *)&v50[0] == *(_QWORD *)&v52[0];
LABEL_59:
        v26 = !_ZF;
        v56[0] = v26;
        v57 = 6;
        v58 = 0;
        if (v15 < *v12)
          goto LABEL_63;
        goto LABEL_70;
      case 6:
        if (v53 != 6)
        {
LABEL_115:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_116:
          __break(0xC471u);
          JUMPOUT(0x1825B8610);
        }
        v26 = (LOBYTE(v50[0]) != 0) ^ (LOBYTE(v52[0]) != 0);
        v56[0] = v26;
        v57 = 6;
        v58 = 0;
        if (v15 >= *v12)
        {
LABEL_70:
          __break(0xC471u);
          JUMPOUT(0x1825B8294);
        }
LABEL_63:
        v27 = &v12[v14 / 4];
        v28 = (char *)&v12[v14 / 4 + 2];
        v29 = v12[v14 / 4 + 6];
        if ((_DWORD)v29 == 6)
        {
          v16 = 0;
          *v28 = v26;
LABEL_20:
          ((void (*)(char *, char *))off_1E0FD7DD0[v16])(&v54, v56);
          goto LABEL_21;
        }
        if ((_DWORD)v29 == -1)
        {
          v16 = 0;
          *((_BYTE *)v27 + 8) = v26;
          v27[6] = 6;
          goto LABEL_20;
        }
        ((void (*)(char *, char *, __n128))off_1E0FD7CC8[v29])(&v54, v28, _Q0);
        v16 = v58;
        *((_BYTE *)v27 + 8) = v56[0];
        v27[6] = 6;
        if ((_DWORD)v16 != -1)
          goto LABEL_20;
LABEL_21:
        ++v15;
        v14 += 24;
        if (v11 != v14)
          continue;
        v30 = *v12;
        v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
        v33 = v31;
        *v31 = v30;
        if ((_DWORD)v30)
        {
          v34 = v31 + 6;
          v35 = 24 * v30;
          v36 = v12 + 6;
          do
          {
            *((_BYTE *)v34 - 16) = 0;
            v32 = v34 - 4;
            *v34 = -1;
            v37 = *v36;
            if ((_DWORD)v37 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v37])(&v55, v32, v36 - 4);
              *v34 = v37;
            }
            v34 += 6;
            v36 += 6;
            v35 -= 24;
          }
          while (v35);
        }
        *(_QWORD *)(v49 + 8) = v33;
        *(_DWORD *)(v49 + 24) = 8;
        *(_DWORD *)(v49 + 32) = 0;
        if (v53 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v55, v52);
        v53 = -1;
        if (v51 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v51])(&v55, v50);
        v38 = *v12;
        if ((_DWORD)v38)
        {
          v39 = 24 * v38;
          v40 = v12 + 6;
          do
          {
            v32 = v40 - 4;
            v41 = *v40;
            if ((_DWORD)v41 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v41])(v50, v32);
            *v40 = -1;
            v40 += 6;
            v39 -= 24;
          }
          while (v39);
        }
        WTF::fastFree((WTF *)v12, v32);
        v42 = v62;
        if (v62 != -1)
          goto LABEL_106;
LABEL_107:
        v62 = -1;
        if (v60 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v60])(v50, v59);
        return;
      default:
        goto LABEL_116;
    }
  }
}

void WGSL::constantLt(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v21;
  unsigned int *v27;
  BOOL *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  double v51[2];
  int v52;
  double v53[2];
  int v54;
  char v55;
  double *v56;
  BOOL v57[16];
  int v58;
  unsigned int v59;
  _QWORD v60[2];
  int v61;
  _QWORD v62[2];
  unsigned int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B8F00);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B8F20);
  }
  v5 = (float *)(v3 + 2);
  LOBYTE(v60[0]) = 0;
  v61 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v6])(v51, v60, v3 + 2);
    v61 = v6;
  }
  v7 = (float *)(v3 + 8);
  LOBYTE(v62[0]) = 0;
  v63 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v8])(v51, v62, v3 + 8);
    v63 = v8;
    LODWORD(v6) = v61;
  }
  LOBYTE(v51[0]) = 0;
  v52 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(v51[0]) = 0;
    v52 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v8])(&v56, v51, v62),
           v52 = v8,
           (_DWORD)v8 != 8)
       || !*(_QWORD *)&v51[0]
        ? (v10 = 0)
        : (v10 = **(_DWORD **)&v51[0]),
          ((void (*)(double **, double *))off_1E0FD7CC8[v8])(&v56, v51),
          !v10))
    {
LABEL_94:
      switch(v3[6])
      {
        case 0:
          if (v3[12])
            goto LABEL_126;
          v43 = *v5 < *v7;
          goto LABEL_101;
        case 1:
          if (v3[12] != 1)
            goto LABEL_126;
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          v43 = _S0 < _S1;
          goto LABEL_101;
        case 2:
          if (v3[12] != 2)
            goto LABEL_126;
          v43 = *(double *)v5 < *(double *)v7;
LABEL_101:
          v48 = v43;
          break;
        case 3:
          if (v3[12] != 3)
            goto LABEL_126;
          v48 = *(_DWORD *)v5 < *(_DWORD *)v7;
          break;
        case 4:
          if (v3[12] != 4)
            goto LABEL_126;
          v48 = *(_DWORD *)v5 < *(_DWORD *)v7;
          break;
        case 5:
          if (v3[12] != 5)
            goto LABEL_126;
          v48 = *(_QWORD *)v5 < *(_QWORD *)v7;
          break;
        case 6:
          if (v3[12] != 6)
            goto LABEL_126;
          if (*(_BYTE *)v5)
            v49 = 1;
          else
            v49 = *(_BYTE *)v7 == 0;
          v48 = !v49;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825B8F68);
      }
      *(_BYTE *)(a2 + 8) = v48;
      *(_DWORD *)(a2 + 24) = 6;
      *(_DWORD *)(a2 + 32) = 0;
      v42 = v63;
      if (v63 == -1)
        goto LABEL_119;
LABEL_118:
      ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v42])(v51, v62);
      goto LABEL_119;
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v6])(&v56, v51, v60);
  v52 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v6])(&v56, v51);
    LODWORD(v8) = v63;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v51[0])
    v10 = **(_DWORD **)&v51[0];
  else
    v10 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v56, v51);
  if (!v10)
    goto LABEL_94;
LABEL_18:
  v50 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v14 = 0;
  v15 = 0;
  LODWORD(v51[0]) = 0;
  v52 = 0;
  LODWORD(v53[0]) = 0;
  v54 = 0;
  while (2)
  {
    if (v61 == 8)
    {
      if (v15 >= *(unsigned int *)v60[0])
        goto LABEL_122;
      v17 = *(unsigned int *)(v60[0] + v14 + 24);
      if (v52 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_34;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_29;
      }
      v56 = v51;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v17])(&v56, v51, v60[0] + v14 + 8);
    }
    else
    {
      if (v52 == -1)
      {
        if (v61 == -1)
          goto LABEL_34;
      }
      else if (v61 == -1)
      {
LABEL_29:
        ((void (*)(double **, double *))off_1E0FD7CC8[v52])(&v56, v51);
        v52 = -1;
        goto LABEL_34;
      }
      v56 = v51;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v61])(&v56, v51, v60);
    }
LABEL_34:
    if (v63 == 8)
    {
      if (v15 >= *(unsigned int *)v62[0])
      {
LABEL_122:
        __break(0xC471u);
        JUMPOUT(0x1825B8EC0);
      }
      v18 = *(unsigned int *)(v62[0] + v14 + 24);
      if (v54 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_46;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_41;
      }
      v56 = v53;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v18])(&v56, v53, v62[0] + v14 + 8);
      goto LABEL_46;
    }
    if (v54 == -1)
    {
      if (v63 == -1)
        goto LABEL_46;
LABEL_43:
      v56 = v53;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v63])(&v56, v53, v62);
      goto LABEL_46;
    }
    if (v63 != -1)
      goto LABEL_43;
LABEL_41:
    ((void (*)(double **, double *))off_1E0FD7CC8[v54])(&v56, v53);
    v54 = -1;
LABEL_46:
    switch(v52)
    {
      case 0:
        if (v54)
          goto LABEL_126;
        _Q0.n128_u32[0] = LODWORD(v51[0]);
        _S1 = *(float *)v53;
        goto LABEL_55;
      case 1:
        if (v54 != 1)
          goto LABEL_126;
        _H0 = LOWORD(v51[0]);
        _H1 = LOWORD(v53[0]);
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
LABEL_55:
        _NF = _Q0.n128_f32[0] < _S1;
        goto LABEL_56;
      case 2:
        if (v54 != 2)
          goto LABEL_126;
        _Q0.n128_f64[0] = v51[0];
        _NF = v51[0] < v53[0];
LABEL_56:
        v21 = _NF;
        goto LABEL_70;
      case 3:
        if (v54 != 3)
          goto LABEL_126;
        v21 = SLODWORD(v51[0]) < SLODWORD(v53[0]);
        goto LABEL_70;
      case 4:
        if (v54 != 4)
          goto LABEL_126;
        v21 = LODWORD(v51[0]) < LODWORD(v53[0]);
        goto LABEL_70;
      case 5:
        if (v54 != 5)
          goto LABEL_126;
        v21 = *(_QWORD *)&v51[0] < *(_QWORD *)&v53[0];
        goto LABEL_70;
      case 6:
        if (v54 != 6)
        {
LABEL_126:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_127:
          __break(0xC471u);
          JUMPOUT(0x1825B8F44);
        }
        if (LOBYTE(v51[0]))
          _ZF = 1;
        else
          _ZF = LOBYTE(v53[0]) == 0;
        v21 = !_ZF;
LABEL_70:
        v57[0] = v21;
        v58 = 6;
        v59 = 0;
        if (v15 >= *v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1825B8EE0);
        }
        v27 = &v12[v14 / 4];
        v28 = (BOOL *)&v12[v14 / 4 + 2];
        v29 = v12[v14 / 4 + 6];
        if ((_DWORD)v29 == 6)
        {
          v16 = 0;
          *v28 = v21;
LABEL_20:
          ((void (*)(char *, BOOL *))off_1E0FD7DD0[v16])(&v55, v57);
          goto LABEL_21;
        }
        if ((_DWORD)v29 == -1)
        {
          v16 = 0;
          *((_BYTE *)v27 + 8) = v21;
          v27[6] = 6;
          goto LABEL_20;
        }
        ((void (*)(char *, BOOL *, __n128))off_1E0FD7CC8[v29])(&v55, v28, _Q0);
        v16 = v59;
        *((_BYTE *)v27 + 8) = v57[0];
        v27[6] = 6;
        if ((_DWORD)v16 != -1)
          goto LABEL_20;
LABEL_21:
        ++v15;
        v14 += 24;
        if (v11 != v14)
          continue;
        v30 = *v12;
        v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
        v33 = v31;
        *v31 = v30;
        if ((_DWORD)v30)
        {
          v34 = v31 + 6;
          v35 = 24 * v30;
          v36 = v12 + 6;
          do
          {
            *((_BYTE *)v34 - 16) = 0;
            v32 = v34 - 4;
            *v34 = -1;
            v37 = *v36;
            if ((_DWORD)v37 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v37])(&v56, v32, v36 - 4);
              *v34 = v37;
            }
            v34 += 6;
            v36 += 6;
            v35 -= 24;
          }
          while (v35);
        }
        *(_QWORD *)(v50 + 8) = v33;
        *(_DWORD *)(v50 + 24) = 8;
        *(_DWORD *)(v50 + 32) = 0;
        if (v54 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v54])(&v56, v53);
        v54 = -1;
        if (v52 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v52])(&v56, v51);
        v38 = *v12;
        if ((_DWORD)v38)
        {
          v39 = 24 * v38;
          v40 = v12 + 6;
          do
          {
            v32 = v40 - 4;
            v41 = *v40;
            if ((_DWORD)v41 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v41])(v51, v32);
            *v40 = -1;
            v40 += 6;
            v39 -= 24;
          }
          while (v39);
        }
        WTF::fastFree((WTF *)v12, v32);
        v42 = v63;
        if (v63 != -1)
          goto LABEL_118;
LABEL_119:
        v63 = -1;
        if (v61 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v61])(v51, v60);
        return;
      default:
        goto LABEL_127;
    }
  }
}

void WGSL::constantLtEq(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  BOOL v26;
  unsigned int *v28;
  BOOL *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  double v52[2];
  int v53;
  double v54[2];
  int v55;
  char v56;
  double *v57;
  BOOL v58[16];
  int v59;
  unsigned int v60;
  _QWORD v61[2];
  int v62;
  _QWORD v63[2];
  unsigned int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B982CLL);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825B984CLL);
  }
  v5 = (float *)(v3 + 2);
  LOBYTE(v61[0]) = 0;
  v62 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v6])(v52, v61, v3 + 2);
    v62 = v6;
  }
  v7 = (float *)(v3 + 8);
  LOBYTE(v63[0]) = 0;
  v64 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v8])(v52, v63, v3 + 8);
    v64 = v8;
    LODWORD(v6) = v62;
  }
  LOBYTE(v52[0]) = 0;
  v53 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(v52[0]) = 0;
    v53 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v8])(&v57, v52, v63),
           v53 = v8,
           (_DWORD)v8 != 8)
       || !*(_QWORD *)&v52[0]
        ? (v10 = 0)
        : (v10 = **(_DWORD **)&v52[0]),
          ((void (*)(double **, double *))off_1E0FD7CC8[v8])(&v57, v52),
          !v10))
    {
LABEL_94:
      switch(v3[6])
      {
        case 0:
          if (v3[12])
            goto LABEL_126;
          v44 = *v5 > *v7;
          goto LABEL_105;
        case 1:
          if (v3[12] != 1)
            goto LABEL_126;
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          v44 = _S0 > _S1;
          goto LABEL_105;
        case 2:
          if (v3[12] != 2)
            goto LABEL_126;
          v44 = *(double *)v5 > *(double *)v7;
          goto LABEL_105;
        case 3:
          if (v3[12] != 3)
            goto LABEL_126;
          v49 = *(_DWORD *)v5 <= *(_DWORD *)v7;
          break;
        case 4:
          if (v3[12] != 4)
            goto LABEL_126;
          v44 = *(_DWORD *)v5 > *(_DWORD *)v7;
LABEL_105:
          v49 = !v44;
          break;
        case 5:
          if (v3[12] != 5)
            goto LABEL_126;
          v49 = *(_QWORD *)v5 <= *(_QWORD *)v7;
          break;
        case 6:
          if (v3[12] != 6)
            goto LABEL_126;
          if (*(_BYTE *)v5)
            v50 = *(_BYTE *)v7 == 0;
          else
            v50 = 0;
          v49 = !v50;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825B9894);
      }
      *(_BYTE *)(a2 + 8) = v49;
      *(_DWORD *)(a2 + 24) = 6;
      *(_DWORD *)(a2 + 32) = 0;
      v43 = v64;
      if (v64 == -1)
        goto LABEL_110;
LABEL_109:
      ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v43])(v52, v63);
      goto LABEL_110;
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v6])(&v57, v52, v61);
  v53 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v6])(&v57, v52);
    LODWORD(v8) = v64;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v52[0])
    v10 = **(_DWORD **)&v52[0];
  else
    v10 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v57, v52);
  if (!v10)
    goto LABEL_94;
LABEL_18:
  v51 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v14 = 0;
  v15 = 0;
  LODWORD(v52[0]) = 0;
  v53 = 0;
  LODWORD(v54[0]) = 0;
  v55 = 0;
  while (2)
  {
    if (v62 == 8)
    {
      if (v15 >= *(unsigned int *)v61[0])
        goto LABEL_122;
      v17 = *(unsigned int *)(v61[0] + v14 + 24);
      if (v53 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_34;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_29;
      }
      v57 = v52;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v17])(&v57, v52, v61[0] + v14 + 8);
    }
    else
    {
      if (v53 == -1)
      {
        if (v62 == -1)
          goto LABEL_34;
      }
      else if (v62 == -1)
      {
LABEL_29:
        ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v57, v52);
        v53 = -1;
        goto LABEL_34;
      }
      v57 = v52;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v62])(&v57, v52, v61);
    }
LABEL_34:
    if (v64 == 8)
    {
      if (v15 >= *(unsigned int *)v63[0])
      {
LABEL_122:
        __break(0xC471u);
        JUMPOUT(0x1825B97ECLL);
      }
      v18 = *(unsigned int *)(v63[0] + v14 + 24);
      if (v55 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_46;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_41;
      }
      v57 = v54;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v18])(&v57, v54, v63[0] + v14 + 8);
      goto LABEL_46;
    }
    if (v55 == -1)
    {
      if (v64 == -1)
        goto LABEL_46;
LABEL_43:
      v57 = v54;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v64])(&v57, v54, v63);
      goto LABEL_46;
    }
    if (v64 != -1)
      goto LABEL_43;
LABEL_41:
    ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v57, v54);
    v55 = -1;
LABEL_46:
    switch(v53)
    {
      case 0:
        if (v55)
          goto LABEL_126;
        _Q0.n128_u32[0] = LODWORD(v52[0]);
        _S1 = *(float *)v54;
        goto LABEL_55;
      case 1:
        if (v55 != 1)
          goto LABEL_126;
        _H0 = LOWORD(v52[0]);
        _H1 = LOWORD(v54[0]);
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
LABEL_55:
        v20 = _Q0.n128_f32[0] > _S1;
        goto LABEL_56;
      case 2:
        if (v55 != 2)
          goto LABEL_126;
        _Q0.n128_f64[0] = v52[0];
        v20 = v52[0] > v54[0];
        goto LABEL_56;
      case 3:
        if (v55 != 3)
          goto LABEL_126;
        v26 = SLODWORD(v52[0]) <= SLODWORD(v54[0]);
        goto LABEL_70;
      case 4:
        if (v55 != 4)
          goto LABEL_126;
        v20 = LODWORD(v52[0]) > LODWORD(v54[0]);
LABEL_56:
        v26 = !v20;
        goto LABEL_70;
      case 5:
        if (v55 != 5)
          goto LABEL_126;
        v26 = *(_QWORD *)&v52[0] <= *(_QWORD *)&v54[0];
        goto LABEL_70;
      case 6:
        if (v55 != 6)
        {
LABEL_126:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_127:
          __break(0xC471u);
          JUMPOUT(0x1825B9870);
        }
        if (LOBYTE(v52[0]))
          _ZF = LOBYTE(v54[0]) == 0;
        else
          _ZF = 0;
        v26 = !_ZF;
LABEL_70:
        v58[0] = v26;
        v59 = 6;
        v60 = 0;
        if (v15 >= *v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1825B980CLL);
        }
        v28 = &v12[v14 / 4];
        v29 = (BOOL *)&v12[v14 / 4 + 2];
        v30 = v12[v14 / 4 + 6];
        if ((_DWORD)v30 == 6)
        {
          v16 = 0;
          *v29 = v26;
LABEL_20:
          ((void (*)(char *, BOOL *))off_1E0FD7DD0[v16])(&v56, v58);
          goto LABEL_21;
        }
        if ((_DWORD)v30 == -1)
        {
          v16 = 0;
          *((_BYTE *)v28 + 8) = v26;
          v28[6] = 6;
          goto LABEL_20;
        }
        ((void (*)(char *, BOOL *, __n128))off_1E0FD7CC8[v30])(&v56, v29, _Q0);
        v16 = v60;
        *((_BYTE *)v28 + 8) = v58[0];
        v28[6] = 6;
        if ((_DWORD)v16 != -1)
          goto LABEL_20;
LABEL_21:
        ++v15;
        v14 += 24;
        if (v11 != v14)
          continue;
        v31 = *v12;
        v32 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v31 + 8));
        v34 = v32;
        *v32 = v31;
        if ((_DWORD)v31)
        {
          v35 = v32 + 6;
          v36 = 24 * v31;
          v37 = v12 + 6;
          do
          {
            *((_BYTE *)v35 - 16) = 0;
            v33 = v35 - 4;
            *v35 = -1;
            v38 = *v37;
            if ((_DWORD)v38 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v38])(&v57, v33, v37 - 4);
              *v35 = v38;
            }
            v35 += 6;
            v37 += 6;
            v36 -= 24;
          }
          while (v36);
        }
        *(_QWORD *)(v51 + 8) = v34;
        *(_DWORD *)(v51 + 24) = 8;
        *(_DWORD *)(v51 + 32) = 0;
        if (v55 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v57, v54);
        v55 = -1;
        if (v53 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v57, v52);
        v39 = *v12;
        if ((_DWORD)v39)
        {
          v40 = 24 * v39;
          v41 = v12 + 6;
          do
          {
            v33 = v41 - 4;
            v42 = *v41;
            if ((_DWORD)v42 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v42])(v52, v33);
            *v41 = -1;
            v41 += 6;
            v40 -= 24;
          }
          while (v40);
        }
        WTF::fastFree((WTF *)v12, v33);
        v43 = v64;
        if (v64 != -1)
          goto LABEL_109;
LABEL_110:
        v64 = -1;
        if (v62 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v62])(v52, v61);
        return;
      default:
        goto LABEL_127;
    }
  }
}

void WGSL::constantGt(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  unsigned int *v27;
  BOOL *v28;
  uint64_t v29;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  double v52[2];
  int v53;
  double v54[2];
  int v55;
  char v56;
  double *v57;
  BOOL v58[16];
  int v59;
  unsigned int v60;
  _QWORD v61[2];
  int v62;
  _QWORD v63[2];
  unsigned int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BA180);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BA1A0);
  }
  v5 = (float *)(v3 + 2);
  LOBYTE(v61[0]) = 0;
  v62 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v6])(v52, v61, v3 + 2);
    v62 = v6;
  }
  v7 = (float *)(v3 + 8);
  LOBYTE(v63[0]) = 0;
  v64 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v8])(v52, v63, v3 + 8);
    v64 = v8;
    LODWORD(v6) = v62;
  }
  LOBYTE(v52[0]) = 0;
  v53 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(v52[0]) = 0;
    v53 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v8])(&v57, v52, v63),
           v53 = v8,
           (_DWORD)v8 != 8)
       || !*(_QWORD *)&v52[0]
        ? (v10 = 0)
        : (v10 = **(_DWORD **)&v52[0]),
          ((void (*)(double **, double *))off_1E0FD7CC8[v8])(&v57, v52),
          !v10))
    {
LABEL_96:
      switch(v3[6])
      {
        case 0:
          if (v3[12])
            goto LABEL_127;
          v44 = *v5 <= *v7;
          goto LABEL_109;
        case 1:
          if (v3[12] != 1)
            goto LABEL_127;
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          v44 = _S0 <= _S1;
          goto LABEL_109;
        case 2:
          if (v3[12] != 2)
            goto LABEL_127;
          v44 = *(double *)v5 <= *(double *)v7;
          goto LABEL_109;
        case 3:
          if (v3[12] != 3)
            goto LABEL_127;
          v44 = *(_DWORD *)v5 <= *(_DWORD *)v7;
          goto LABEL_109;
        case 4:
          if (v3[12] != 4)
            goto LABEL_127;
          v49 = *(_DWORD *)v5 > *(_DWORD *)v7;
          break;
        case 5:
          if (v3[12] != 5)
            goto LABEL_127;
          v44 = *(_QWORD *)v5 <= *(_QWORD *)v7;
LABEL_109:
          v49 = !v44;
          break;
        case 6:
          if (v3[12] != 6)
            goto LABEL_127;
          if (*(_BYTE *)v5)
            v50 = *(_BYTE *)v7 == 0;
          else
            v50 = 0;
          v49 = v50;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825BA1E8);
      }
      *(_BYTE *)(a2 + 8) = v49;
      *(_DWORD *)(a2 + 24) = 6;
      *(_DWORD *)(a2 + 32) = 0;
      v43 = v64;
      if (v64 == -1)
        goto LABEL_114;
LABEL_113:
      ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v43])(v52, v63);
      goto LABEL_114;
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v6])(&v57, v52, v61);
  v53 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v6])(&v57, v52);
    LODWORD(v8) = v64;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v52[0])
    v10 = **(_DWORD **)&v52[0];
  else
    v10 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v57, v52);
  if (!v10)
    goto LABEL_96;
LABEL_18:
  v51 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v13 = 0;
  v14 = 0;
  LODWORD(v52[0]) = 0;
  v53 = 0;
  LODWORD(v54[0]) = 0;
  v55 = 0;
  while (2)
  {
    if (v62 == 8)
    {
      if (v14 >= *(unsigned int *)v61[0])
        goto LABEL_124;
      v16 = *(unsigned int *)(v61[0] + v13 + 24);
      if (v53 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_34;
      }
      else if ((_DWORD)v16 == -1)
      {
        goto LABEL_29;
      }
      v57 = v52;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v16])(&v57, v52, v61[0] + v13 + 8);
    }
    else
    {
      if (v53 == -1)
      {
        if (v62 == -1)
          goto LABEL_34;
      }
      else if (v62 == -1)
      {
LABEL_29:
        ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v57, v52);
        v53 = -1;
        goto LABEL_34;
      }
      v57 = v52;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v62])(&v57, v52, v61);
    }
LABEL_34:
    if (v64 == 8)
    {
      if (v14 >= *(unsigned int *)v63[0])
      {
LABEL_124:
        __break(0xC471u);
        JUMPOUT(0x1825BA160);
      }
      v17 = *(unsigned int *)(v63[0] + v13 + 24);
      if (v55 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_46;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_41;
      }
      v57 = v54;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v17])(&v57, v54, v63[0] + v13 + 8);
      goto LABEL_46;
    }
    if (v55 == -1)
    {
      if (v64 == -1)
        goto LABEL_46;
LABEL_43:
      v57 = v54;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v64])(&v57, v54, v63);
      goto LABEL_46;
    }
    if (v64 != -1)
      goto LABEL_43;
LABEL_41:
    ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v57, v54);
    v55 = -1;
LABEL_46:
    switch(v53)
    {
      case 0:
        if (v55)
          goto LABEL_127;
        v18 = *(float *)v52 <= *(float *)v54;
        goto LABEL_60;
      case 1:
        if (v55 != 1)
          goto LABEL_127;
        _H0 = LOWORD(v52[0]);
        _H1 = LOWORD(v54[0]);
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        v18 = _S0 <= _S1;
        goto LABEL_60;
      case 2:
        if (v55 != 2)
          goto LABEL_127;
        v18 = v52[0] <= v54[0];
        goto LABEL_60;
      case 3:
        if (v55 != 3)
          goto LABEL_127;
        v18 = SLODWORD(v52[0]) <= SLODWORD(v54[0]);
        goto LABEL_60;
      case 4:
        if (v55 != 4)
          goto LABEL_127;
        v19 = LODWORD(v52[0]) > LODWORD(v54[0]);
        v58[0] = LODWORD(v52[0]) > LODWORD(v54[0]);
        v59 = 6;
        v60 = 0;
        if (v14 >= *v12)
          goto LABEL_77;
        goto LABEL_64;
      case 5:
        if (v55 != 5)
          goto LABEL_127;
        v18 = *(_QWORD *)&v52[0] <= *(_QWORD *)&v54[0];
LABEL_60:
        v19 = !v18;
        v58[0] = v19;
        v59 = 6;
        v60 = 0;
        if (v14 < *v12)
          goto LABEL_64;
        goto LABEL_77;
      case 6:
        if (v55 != 6)
        {
LABEL_127:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
          __break(0xC471u);
          JUMPOUT(0x1825BA1C4);
        }
        if (LOBYTE(v52[0]))
          _ZF = LOBYTE(v54[0]) == 0;
        else
          _ZF = 0;
        v19 = _ZF;
        v58[0] = v19;
        v59 = 6;
        v60 = 0;
        if (v14 >= *v12)
        {
LABEL_77:
          __break(0xC471u);
          JUMPOUT(0x1825B9E40);
        }
LABEL_64:
        v27 = &v12[v13 / 4];
        v28 = (BOOL *)&v12[v13 / 4 + 2];
        v29 = v12[v13 / 4 + 6];
        if ((_DWORD)v29 == 6)
        {
          v15 = 0;
          *v28 = v19;
LABEL_20:
          ((void (*)(char *, BOOL *))off_1E0FD7DD0[v15])(&v56, v58);
          goto LABEL_21;
        }
        if ((_DWORD)v29 == -1)
        {
          v15 = 0;
          *((_BYTE *)v27 + 8) = v19;
          v27[6] = 6;
          goto LABEL_20;
        }
        ((void (*)(char *, BOOL *))off_1E0FD7CC8[v29])(&v56, v28);
        v15 = v60;
        *((_BYTE *)v27 + 8) = v58[0];
        v27[6] = 6;
        if ((_DWORD)v15 != -1)
          goto LABEL_20;
LABEL_21:
        ++v14;
        v13 += 24;
        if (v11 != v13)
          continue;
        v31 = *v12;
        v32 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v31 + 8));
        v34 = v32;
        *v32 = v31;
        if ((_DWORD)v31)
        {
          v35 = v32 + 6;
          v36 = 24 * v31;
          v37 = v12 + 6;
          do
          {
            *((_BYTE *)v35 - 16) = 0;
            v33 = v35 - 4;
            *v35 = -1;
            v38 = *v37;
            if ((_DWORD)v38 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v38])(&v57, v33, v37 - 4);
              *v35 = v38;
            }
            v35 += 6;
            v37 += 6;
            v36 -= 24;
          }
          while (v36);
        }
        *(_QWORD *)(v51 + 8) = v34;
        *(_DWORD *)(v51 + 24) = 8;
        *(_DWORD *)(v51 + 32) = 0;
        if (v55 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v57, v54);
        v55 = -1;
        if (v53 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v57, v52);
        v39 = *v12;
        if ((_DWORD)v39)
        {
          v40 = 24 * v39;
          v41 = v12 + 6;
          do
          {
            v33 = v41 - 4;
            v42 = *v41;
            if ((_DWORD)v42 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v42])(v52, v33);
            *v41 = -1;
            v41 += 6;
            v40 -= 24;
          }
          while (v40);
        }
        WTF::fastFree((WTF *)v12, v33);
        v43 = v64;
        if (v64 != -1)
          goto LABEL_113;
LABEL_114:
        v64 = -1;
        if (v62 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v62])(v52, v61);
        return;
      default:
        goto LABEL_128;
    }
  }
}

void WGSL::constantGtEq(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  unsigned int *v27;
  BOOL *v28;
  uint64_t v29;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  double v52[2];
  int v53;
  double v54[2];
  int v55;
  char v56;
  double *v57;
  BOOL v58[16];
  int v59;
  unsigned int v60;
  _QWORD v61[2];
  int v62;
  _QWORD v63[2];
  unsigned int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BAAD4);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BAAF4);
  }
  v5 = (float *)(v3 + 2);
  LOBYTE(v61[0]) = 0;
  v62 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v6])(v52, v61, v3 + 2);
    v62 = v6;
  }
  v7 = (float *)(v3 + 8);
  LOBYTE(v63[0]) = 0;
  v64 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v8])(v52, v63, v3 + 8);
    v64 = v8;
    LODWORD(v6) = v62;
  }
  LOBYTE(v52[0]) = 0;
  v53 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(v52[0]) = 0;
    v53 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v8])(&v57, v52, v63),
           v53 = v8,
           (_DWORD)v8 != 8)
       || !*(_QWORD *)&v52[0]
        ? (v10 = 0)
        : (v10 = **(_DWORD **)&v52[0]),
          ((void (*)(double **, double *))off_1E0FD7CC8[v8])(&v57, v52),
          !v10))
    {
LABEL_96:
      switch(v3[6])
      {
        case 0:
          if (v3[12])
            goto LABEL_127;
          v44 = *v5 < *v7;
          goto LABEL_109;
        case 1:
          if (v3[12] != 1)
            goto LABEL_127;
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          v44 = _S0 < _S1;
          goto LABEL_109;
        case 2:
          if (v3[12] != 2)
            goto LABEL_127;
          v44 = *(double *)v5 < *(double *)v7;
          goto LABEL_109;
        case 3:
          if (v3[12] != 3)
            goto LABEL_127;
          v44 = *(_DWORD *)v5 < *(_DWORD *)v7;
          goto LABEL_109;
        case 4:
          if (v3[12] != 4)
            goto LABEL_127;
          v49 = *(_DWORD *)v5 >= *(_DWORD *)v7;
          break;
        case 5:
          if (v3[12] != 5)
            goto LABEL_127;
          v44 = *(_QWORD *)v5 < *(_QWORD *)v7;
LABEL_109:
          v49 = !v44;
          break;
        case 6:
          if (v3[12] != 6)
            goto LABEL_127;
          if (*(_BYTE *)v5)
            v50 = 1;
          else
            v50 = *(_BYTE *)v7 == 0;
          v49 = v50;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825BAB3CLL);
      }
      *(_BYTE *)(a2 + 8) = v49;
      *(_DWORD *)(a2 + 24) = 6;
      *(_DWORD *)(a2 + 32) = 0;
      v43 = v64;
      if (v64 == -1)
        goto LABEL_114;
LABEL_113:
      ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v43])(v52, v63);
      goto LABEL_114;
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v6])(&v57, v52, v61);
  v53 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v6])(&v57, v52);
    LODWORD(v8) = v64;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v52[0])
    v10 = **(_DWORD **)&v52[0];
  else
    v10 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v57, v52);
  if (!v10)
    goto LABEL_96;
LABEL_18:
  v51 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v13 = 0;
  v14 = 0;
  LODWORD(v52[0]) = 0;
  v53 = 0;
  LODWORD(v54[0]) = 0;
  v55 = 0;
  while (2)
  {
    if (v62 == 8)
    {
      if (v14 >= *(unsigned int *)v61[0])
        goto LABEL_124;
      v16 = *(unsigned int *)(v61[0] + v13 + 24);
      if (v53 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_34;
      }
      else if ((_DWORD)v16 == -1)
      {
        goto LABEL_29;
      }
      v57 = v52;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v16])(&v57, v52, v61[0] + v13 + 8);
    }
    else
    {
      if (v53 == -1)
      {
        if (v62 == -1)
          goto LABEL_34;
      }
      else if (v62 == -1)
      {
LABEL_29:
        ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v57, v52);
        v53 = -1;
        goto LABEL_34;
      }
      v57 = v52;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v62])(&v57, v52, v61);
    }
LABEL_34:
    if (v64 == 8)
    {
      if (v14 >= *(unsigned int *)v63[0])
      {
LABEL_124:
        __break(0xC471u);
        JUMPOUT(0x1825BAAB4);
      }
      v17 = *(unsigned int *)(v63[0] + v13 + 24);
      if (v55 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_46;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_41;
      }
      v57 = v54;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v17])(&v57, v54, v63[0] + v13 + 8);
      goto LABEL_46;
    }
    if (v55 == -1)
    {
      if (v64 == -1)
        goto LABEL_46;
LABEL_43:
      v57 = v54;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v64])(&v57, v54, v63);
      goto LABEL_46;
    }
    if (v64 != -1)
      goto LABEL_43;
LABEL_41:
    ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v57, v54);
    v55 = -1;
LABEL_46:
    switch(v53)
    {
      case 0:
        if (v55)
          goto LABEL_127;
        v18 = *(float *)v52 < *(float *)v54;
        goto LABEL_60;
      case 1:
        if (v55 != 1)
          goto LABEL_127;
        _H0 = LOWORD(v52[0]);
        _H1 = LOWORD(v54[0]);
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        v18 = _S0 < _S1;
        goto LABEL_60;
      case 2:
        if (v55 != 2)
          goto LABEL_127;
        v18 = v52[0] < v54[0];
        goto LABEL_60;
      case 3:
        if (v55 != 3)
          goto LABEL_127;
        v18 = SLODWORD(v52[0]) < SLODWORD(v54[0]);
        goto LABEL_60;
      case 4:
        if (v55 != 4)
          goto LABEL_127;
        v19 = LODWORD(v52[0]) >= LODWORD(v54[0]);
        v58[0] = LODWORD(v52[0]) >= LODWORD(v54[0]);
        v59 = 6;
        v60 = 0;
        if (v14 >= *v12)
          goto LABEL_77;
        goto LABEL_64;
      case 5:
        if (v55 != 5)
          goto LABEL_127;
        v18 = *(_QWORD *)&v52[0] < *(_QWORD *)&v54[0];
LABEL_60:
        v19 = !v18;
        v58[0] = v19;
        v59 = 6;
        v60 = 0;
        if (v14 < *v12)
          goto LABEL_64;
        goto LABEL_77;
      case 6:
        if (v55 != 6)
        {
LABEL_127:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
          __break(0xC471u);
          JUMPOUT(0x1825BAB18);
        }
        if (LOBYTE(v52[0]))
          _ZF = 1;
        else
          _ZF = LOBYTE(v54[0]) == 0;
        v19 = _ZF;
        v58[0] = v19;
        v59 = 6;
        v60 = 0;
        if (v14 >= *v12)
        {
LABEL_77:
          __break(0xC471u);
          JUMPOUT(0x1825BA794);
        }
LABEL_64:
        v27 = &v12[v13 / 4];
        v28 = (BOOL *)&v12[v13 / 4 + 2];
        v29 = v12[v13 / 4 + 6];
        if ((_DWORD)v29 == 6)
        {
          v15 = 0;
          *v28 = v19;
LABEL_20:
          ((void (*)(char *, BOOL *))off_1E0FD7DD0[v15])(&v56, v58);
          goto LABEL_21;
        }
        if ((_DWORD)v29 == -1)
        {
          v15 = 0;
          *((_BYTE *)v27 + 8) = v19;
          v27[6] = 6;
          goto LABEL_20;
        }
        ((void (*)(char *, BOOL *))off_1E0FD7CC8[v29])(&v56, v28);
        v15 = v60;
        *((_BYTE *)v27 + 8) = v58[0];
        v27[6] = 6;
        if ((_DWORD)v15 != -1)
          goto LABEL_20;
LABEL_21:
        ++v14;
        v13 += 24;
        if (v11 != v13)
          continue;
        v31 = *v12;
        v32 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v31 + 8));
        v34 = v32;
        *v32 = v31;
        if ((_DWORD)v31)
        {
          v35 = v32 + 6;
          v36 = 24 * v31;
          v37 = v12 + 6;
          do
          {
            *((_BYTE *)v35 - 16) = 0;
            v33 = v35 - 4;
            *v35 = -1;
            v38 = *v37;
            if ((_DWORD)v38 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v38])(&v57, v33, v37 - 4);
              *v35 = v38;
            }
            v35 += 6;
            v37 += 6;
            v36 -= 24;
          }
          while (v36);
        }
        *(_QWORD *)(v51 + 8) = v34;
        *(_DWORD *)(v51 + 24) = 8;
        *(_DWORD *)(v51 + 32) = 0;
        if (v55 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v57, v54);
        v55 = -1;
        if (v53 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v53])(&v57, v52);
        v39 = *v12;
        if ((_DWORD)v39)
        {
          v40 = 24 * v39;
          v41 = v12 + 6;
          do
          {
            v33 = v41 - 4;
            v42 = *v41;
            if ((_DWORD)v42 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v42])(v52, v33);
            *v41 = -1;
            v41 += 6;
            v40 -= 24;
          }
          while (v40);
        }
        WTF::fastFree((WTF *)v12, v33);
        v43 = v64;
        if (v64 != -1)
          goto LABEL_113;
LABEL_114:
        v64 = -1;
        if (v62 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v62])(v52, v61);
        return;
      default:
        goto LABEL_128;
    }
  }
}

uint64_t WGSL::constantBitwiseNot@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD v31[2];
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  _QWORD v39[2];
  unsigned int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BB030);
  }
  LOBYTE(v39[0]) = 0;
  v40 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v5 = v3 + 2;
  v6 = off_1E0FD8010[v4];
  ((void (*)(unsigned int **, _QWORD *, _DWORD *))v6)(&v34, v39, v3 + 2);
  v40 = v4;
  LOBYTE(v34) = 0;
  v36 = -1;
  ((void (*)(_QWORD *, unsigned int **, _QWORD *))v6)(v31, &v34, v39);
  v7 = 0;
  v36 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v34)
      v7 = *v34;
    else
      v7 = 0;
  }
  result = ((uint64_t (*)(_QWORD *, unsigned int **))off_1E0FD7CC8[v4])(v31, &v34);
  if (!v7)
  {
    v29 = v3[6];
    switch(v29)
    {
      case 5:
        *(_QWORD *)(a2 + 8) = ~*v5;
        *(_DWORD *)(a2 + 24) = 5;
        *(_DWORD *)(a2 + 32) = 0;
        v28 = v40;
        if (v40 != -1)
          return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v28])(&v34, v39);
        return result;
      case 4:
        *(_DWORD *)(a2 + 8) = ~*(_DWORD *)v5;
        *(_DWORD *)(a2 + 24) = 4;
        *(_DWORD *)(a2 + 32) = 0;
        v28 = v40;
        if (v40 != -1)
          return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v28])(&v34, v39);
        return result;
      case 3:
        *(_DWORD *)(a2 + 8) = ~*(_DWORD *)v5;
        *(_DWORD *)(a2 + 24) = 3;
        *(_DWORD *)(a2 + 32) = 0;
        v28 = v40;
        if (v40 != -1)
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v28])(&v34, v39);
        return result;
    }
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x1825BB090);
  }
  v30 = a2;
  v9 = 24 * v7;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *v10 = v7;
  v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v13 = 0;
  LODWORD(v31[0]) = 0;
  v32 = 0;
  do
  {
    if (v40 == 8)
    {
      if (v13 >= *(unsigned int *)v39[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825BB010);
      }
      v12 = v39[0] + v11 * 4 - 16;
      v14 = *(unsigned int *)(v39[0] + v11 * 4);
      v15 = v32;
      if (v32 != -1)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_57;
LABEL_21:
        v34 = (unsigned int *)v31;
        ((void (*)(unsigned int **, _QWORD *, uint64_t))off_1E0FD80E0[v14])(&v34, v31, v12);
        goto LABEL_22;
      }
      if ((_DWORD)v14 != -1)
        goto LABEL_21;
    }
    else
    {
      v15 = v32;
      if (v32 == -1)
      {
        if (v40 == -1)
          goto LABEL_58;
      }
      else if (v40 == -1)
      {
LABEL_57:
        ((void (*)(unsigned int **, _QWORD *, uint64_t))off_1E0FD7CC8[v15])(&v34, v31, v12);
        v32 = -1;
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x1825BB070);
      }
      v34 = (unsigned int *)v31;
      ((void (*)(unsigned int **, _QWORD *, _QWORD *))off_1E0FD80E0[v40])(&v34, v31, v39);
    }
LABEL_22:
    if (v32 == 3 || v32 == 4)
    {
      LODWORD(v35) = ~LODWORD(v31[0]);
    }
    else
    {
      if (v32 != 5)
        goto LABEL_58;
      v35 = ~v31[0];
    }
    v37 = v32;
    v38 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1825BAFF0);
    }
    v33 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v32])(&v33);
    if (v38 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E0FD7DD0[v38])(&v33, &v35);
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  v16 = *v10;
  v17 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v16 + 8));
  v19 = v17;
  *v17 = v16;
  if ((_DWORD)v16)
  {
    v20 = v17 + 6;
    v21 = 24 * v16;
    v22 = v10 + 6;
    do
    {
      *((_BYTE *)v20 - 16) = 0;
      v18 = v20 - 4;
      *v20 = -1;
      v23 = *v22;
      if ((_DWORD)v23 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v23])(&v34, v18, v22 - 4);
        *v20 = v23;
      }
      v20 += 6;
      v22 += 6;
      v21 -= 24;
    }
    while (v21);
  }
  *(_QWORD *)(v30 + 8) = v19;
  *(_DWORD *)(v30 + 24) = 8;
  *(_DWORD *)(v30 + 32) = 0;
  if (v32 != -1)
    ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v32])(&v34, v31);
  v24 = *v10;
  if ((_DWORD)v24)
  {
    v25 = 24 * v24;
    v26 = v10 + 6;
    do
    {
      v18 = v26 - 4;
      v27 = *v26;
      if ((_DWORD)v27 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v27])(&v34, v18);
      *v26 = -1;
      v26 += 6;
      v25 -= 24;
    }
    while (v25);
  }
  result = WTF::fastFree((WTF *)v10, v18);
  v28 = v40;
  if (v40 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v28])(&v34, v39);
  return result;
}

void WGSL::constantBitwiseXor(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD v35[2];
  unsigned int v36;
  _QWORD v37[2];
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  _QWORD v44[2];
  int v45;
  _QWORD v46[2];
  unsigned int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BB7D8);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BB7F8);
  }
  v5 = v3 + 2;
  LOBYTE(v44[0]) = 0;
  v45 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v6])(v35, v44, v3 + 2);
    v45 = v6;
  }
  v7 = v3 + 8;
  LOBYTE(v46[0]) = 0;
  v47 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v8])(v35, v46, v3 + 8);
    v47 = v8;
    LODWORD(v6) = v45;
  }
  LOBYTE(v35[0]) = 0;
  v36 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(v35[0]) = 0;
    v36 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v8])(&v40, v35, v46),
           v36 = v8,
           (_DWORD)v8 != 8)
       || !v35[0]
        ? (v10 = 0)
        : (v10 = *(_DWORD *)v35[0]),
          ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v8])(&v40, v35),
          !v10))
    {
LABEL_77:
      v33 = v3[6];
      switch(v33)
      {
        case 5:
          if (v3[12] == 5)
          {
            *(_QWORD *)(a2 + 8) = *v7 ^ *v5;
            *(_DWORD *)(a2 + 24) = 5;
            *(_DWORD *)(a2 + 32) = 0;
            v32 = v47;
            if (v47 != -1)
              goto LABEL_71;
            goto LABEL_72;
          }
          break;
        case 4:
          if (v3[12] == 4)
          {
            *(_DWORD *)(a2 + 8) = *(_DWORD *)v7 ^ *(_DWORD *)v5;
            *(_DWORD *)(a2 + 24) = 4;
            *(_DWORD *)(a2 + 32) = 0;
            v32 = v47;
            if (v47 != -1)
              goto LABEL_71;
            goto LABEL_72;
          }
          break;
        case 3:
          if (v3[12] == 3)
          {
            *(_DWORD *)(a2 + 8) = *(_DWORD *)v7 ^ *(_DWORD *)v5;
            *(_DWORD *)(a2 + 24) = 3;
            *(_DWORD *)(a2 + 32) = 0;
            v32 = v47;
            if (v47 != -1)
              goto LABEL_71;
            goto LABEL_72;
          }
          break;
        default:
LABEL_95:
          __break(0xC471u);
          JUMPOUT(0x1825BB798);
      }
LABEL_93:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_94:
      __break(0xC471u);
      JUMPOUT(0x1825BB81CLL);
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v6])(&v40, v35, v44);
  v36 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v6])(&v40, v35);
    LODWORD(v8) = v47;
    goto LABEL_12;
  }
  if (v35[0])
    v10 = *(_DWORD *)v35[0];
  else
    v10 = 0;
  ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v9])(&v40, v35);
  if (!v10)
    goto LABEL_77;
LABEL_18:
  v34 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  v13 = 24;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v15 = 0;
  LODWORD(v35[0]) = 0;
  v36 = 0;
  LODWORD(v37[0]) = 0;
  v38 = 0;
  do
  {
    if (v45 == 8)
    {
      if (v15 >= *(unsigned int *)v44[0])
        goto LABEL_95;
      v14 = v44[0] + v13 - 16;
      v16 = *(unsigned int *)(v44[0] + v13);
      v17 = v36;
      if (v36 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_32;
      }
      else if ((_DWORD)v16 == -1)
      {
        goto LABEL_27;
      }
      v40 = v35;
      ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD80E0[v16])(&v40, v35, v14);
    }
    else
    {
      v17 = v36;
      if (v36 == -1)
      {
        if (v45 == -1)
          goto LABEL_32;
      }
      else if (v45 == -1)
      {
LABEL_27:
        ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD7CC8[v17])(&v40, v35, v14);
        v36 = -1;
        goto LABEL_32;
      }
      v40 = v35;
      ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD80E0[v45])(&v40, v35, v44);
    }
LABEL_32:
    if (v47 == 8)
    {
      if (v15 >= *(unsigned int *)v46[0])
        goto LABEL_95;
      v14 = v46[0] + v13 - 16;
      v18 = *(unsigned int *)(v46[0] + v13);
      v19 = v38;
      if (v38 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_44;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_39;
      }
      v40 = v37;
      ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD80E0[v18])(&v40, v37, v14);
    }
    else
    {
      v19 = v38;
      if (v38 == -1)
      {
        if (v47 == -1)
          goto LABEL_44;
      }
      else if (v47 == -1)
      {
LABEL_39:
        ((void (*)(_QWORD **, _QWORD *, uint64_t))off_1E0FD7CC8[v19])(&v40, v37, v14);
        v38 = -1;
        goto LABEL_44;
      }
      v40 = v37;
      ((void (*)(_QWORD **, _QWORD *, _QWORD *))off_1E0FD80E0[v47])(&v40, v37, v46);
    }
LABEL_44:
    if (v36 == 3)
    {
      if (v38 != 3)
        goto LABEL_93;
LABEL_52:
      LODWORD(v41) = LODWORD(v37[0]) ^ LODWORD(v35[0]);
      goto LABEL_53;
    }
    if (v36 == 4)
    {
      if (v38 != 4)
        goto LABEL_93;
      goto LABEL_52;
    }
    if (v36 != 5)
      goto LABEL_94;
    if (v38 != 5)
      goto LABEL_93;
    v41 = v37[0] ^ v35[0];
LABEL_53:
    v42 = v36;
    v43 = 0;
    if (v15 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1825BB7B8);
    }
    v39 = (uint64_t)&v12[(unint64_t)v13 / 4 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v36])(&v39);
    if (v43 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E0FD7DD0[v43])(&v39, &v41);
    ++v15;
    v13 += 24;
  }
  while (v10 != v15);
  v20 = *v12;
  v21 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v20 + 8));
  v23 = v21;
  *v21 = v20;
  if ((_DWORD)v20)
  {
    v24 = v21 + 6;
    v25 = 24 * v20;
    v26 = v12 + 6;
    do
    {
      *((_BYTE *)v24 - 16) = 0;
      v22 = v24 - 4;
      *v24 = -1;
      v27 = *v26;
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(_QWORD **, _DWORD *, unsigned int *))off_1E0FD8010[v27])(&v40, v22, v26 - 4);
        *v24 = v27;
      }
      v24 += 6;
      v26 += 6;
      v25 -= 24;
    }
    while (v25);
  }
  *(_QWORD *)(v34 + 8) = v23;
  *(_DWORD *)(v34 + 24) = 8;
  *(_DWORD *)(v34 + 32) = 0;
  if (v38 != -1)
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v38])(&v40, v37);
  v38 = -1;
  if (v36 != -1)
    ((void (*)(_QWORD **, _QWORD *))off_1E0FD7CC8[v36])(&v40, v35);
  v28 = *v12;
  if ((_DWORD)v28)
  {
    v29 = 24 * v28;
    v30 = v12 + 6;
    do
    {
      v22 = v30 - 4;
      v31 = *v30;
      if ((_DWORD)v31 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v31])(v35, v22);
      *v30 = -1;
      v30 += 6;
      v29 -= 24;
    }
    while (v29);
  }
  WTF::fastFree((WTF *)v12, v22);
  v32 = v47;
  if (v47 != -1)
LABEL_71:
    ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v32])(v35, v46);
LABEL_72:
  v47 = -1;
  if (v45 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v45])(v35, v44);
}

uint64_t WGSL::constantBitwiseShiftLeft@<X0>(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  unsigned int v36[4];
  unsigned int v37;
  unsigned int v38[4];
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  _QWORD v42[2];
  int v43;
  int v44;
  _QWORD v45[2];
  int v46;
  _QWORD v47[2];
  unsigned int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BBEF4);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BBF14);
  }
  LOBYTE(v45[0]) = 0;
  v46 = -1;
  v5 = v3[6];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(unsigned int *, _QWORD *, int *))off_1E0FD8010[v5])(v36, v45, v3 + 2);
    v46 = v5;
  }
  LOBYTE(v47[0]) = 0;
  v48 = -1;
  v6 = v3[12];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(unsigned int *, _QWORD *, int *))off_1E0FD8010[v6])(v36, v47, v3 + 8);
    v48 = v6;
    LODWORD(v5) = v46;
  }
  LOBYTE(v36[0]) = 0;
  v37 = -1;
  if ((_DWORD)v5 == -1)
  {
LABEL_12:
    LOBYTE(v36[0]) = 0;
    v37 = -1;
    if ((_DWORD)v6 == -1
      || ((v8 = v6,
           ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD8010[v6])(&v41, v36, v47), v37 = v6, (_DWORD)v6 != 8)|| !*(_QWORD *)v36? (v7 = 0): (v7 = **(_DWORD **)v36), ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v8])(&v41, v36), !v7))
    {
LABEL_77:
      result = WGSL::constantBitwiseShiftLeft(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue>(a2, (unsigned int *)v3 + 2, v3[8], v3[12]);
      v35 = v48;
      if (v48 == -1)
        goto LABEL_79;
      goto LABEL_78;
    }
    goto LABEL_18;
  }
  ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD8010[v5])(&v41, v36, v45);
  v37 = v5;
  if ((_DWORD)v5 != 8)
  {
    ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v5])(&v41, v36);
    LODWORD(v6) = v48;
    goto LABEL_12;
  }
  if (*(_QWORD *)v36)
    v7 = **(_DWORD **)v36;
  else
    v7 = 0;
  ((void (*)(unsigned int **, unsigned int *))_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_)(&v41, v36);
  if (!v7)
    goto LABEL_77;
LABEL_18:
  v9 = 24 * v7;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *v10 = v7;
  v11 = v10 + 2;
  v12 = 24;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v14 = 0;
  v36[0] = 0;
  v37 = 0;
  v38[0] = 0;
  v39 = 0;
  do
  {
    if (v46 == 8)
    {
      if (v14 >= *(unsigned int *)v45[0])
        goto LABEL_82;
      v13 = v45[0] + v12 - 16;
      v15 = *(unsigned int *)(v45[0] + v12);
      v16 = v37;
      if (v37 == -1)
      {
        if ((_DWORD)v15 == -1)
          goto LABEL_31;
      }
      else if ((_DWORD)v15 == -1)
      {
        goto LABEL_26;
      }
      v41 = v36;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD80E0[v15])(&v41, v36, v13);
    }
    else
    {
      v16 = v37;
      if (v37 == -1)
      {
        if (v46 == -1)
          goto LABEL_31;
      }
      else if (v46 == -1)
      {
LABEL_26:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD7CC8[v16])(&v41, v36, v13);
        v37 = -1;
        goto LABEL_31;
      }
      v41 = v36;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD80E0[v46])(&v41, v36, v45);
    }
LABEL_31:
    if (v48 == 8)
    {
      if (v14 >= *(unsigned int *)v47[0])
      {
LABEL_82:
        __break(0xC471u);
        JUMPOUT(0x1825BBEB4);
      }
      v13 = v47[0] + v12 - 16;
      v17 = *(unsigned int *)(v47[0] + v12);
      v18 = v39;
      if (v39 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_43;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_38;
      }
      v41 = v38;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD80E0[v17])(&v41, v38, v13);
    }
    else
    {
      v18 = v39;
      if (v39 == -1)
      {
        if (v48 == -1)
          goto LABEL_43;
      }
      else if (v48 == -1)
      {
LABEL_38:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD7CC8[v18])(&v41, v38, v13);
        v39 = -1;
        goto LABEL_43;
      }
      v41 = v38;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD80E0[v48])(&v41, v38, v47);
    }
LABEL_43:
    WGSL::constantBitwiseShiftLeft(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue>((uint64_t)&v41, v36, v38[0], v39);
    v20 = v44;
    if (v44)
    {
      if (v44 != 1)
        std::__throw_bad_variant_access[abi:sn180100]();
      v21 = v42[0];
      if (v42[0])
        *(_DWORD *)v42[0] += 2;
      *(_QWORD *)(a2 + 8) = v21;
      *(_DWORD *)(a2 + 32) = 1;
    }
    else
    {
      if (v14 >= *v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1825BBED4);
      }
      v22 = v10[(unint64_t)v12 / 4];
      if ((_DWORD)v22 == -1)
      {
        if (v43 == -1)
          goto LABEL_54;
      }
      else if (v43 == -1)
      {
        ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v22])(&v40, v11);
        v10[(unint64_t)v12 / 4] = -1;
        goto LABEL_54;
      }
      v40 = v11;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD8188[v43])(&v40, v11, v42);
    }
LABEL_54:
    if (v44 != -1)
      ((void (*)(unsigned int **, _QWORD *))off_1E0FD7DD0[v44])(&v40, v42);
    if (v20)
      goto LABEL_64;
    ++v14;
    v11 += 6;
    v12 += 24;
  }
  while (v7 != v14);
  v23 = *v10;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v25 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v26 = v24 + 6;
    v27 = 24 * v23;
    v28 = v10 + 6;
    do
    {
      *((_BYTE *)v26 - 16) = 0;
      v19 = v26 - 4;
      *v26 = -1;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v29])(&v41, v19, v28 - 4);
        *v26 = v29;
      }
      v26 += 6;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  *(_QWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
LABEL_64:
  if (v39 != -1)
    ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v39])(&v41, v38);
  v39 = -1;
  if (v37 != -1)
    ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v37])(&v41, v36);
  v30 = *v10;
  if ((_DWORD)v30)
  {
    v31 = 24 * v30;
    v32 = v10 + 6;
    do
    {
      v19 = v32 - 4;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        ((void (*)(unsigned int *, _DWORD *))off_1E0FD7CC8[v33])(v36, v19);
      *v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  result = WTF::fastFree((WTF *)v10, v19);
  v35 = v48;
  if (v48 != -1)
LABEL_78:
    result = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E0FD7CC8[v35])(v36, v47);
LABEL_79:
  v48 = -1;
  if (v46 != -1)
    return ((uint64_t (*)(unsigned int *, _QWORD *))off_1E0FD7CC8[v46])(v36, v45);
  return result;
}

uint64_t WGSL::constantBitwiseShiftRight@<X0>(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  _QWORD v36[2];
  unsigned int v37;
  unsigned int v38[4];
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  _QWORD v42[2];
  int v43;
  int v44;
  _QWORD v45[2];
  int v46;
  _QWORD v47[2];
  unsigned int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BC5D0);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BC5F0);
  }
  LOBYTE(v45[0]) = 0;
  v46 = -1;
  v5 = v3[6];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v5])(v36, v45, v3 + 2);
    v46 = v5;
  }
  LOBYTE(v47[0]) = 0;
  v48 = -1;
  v6 = v3[12];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, int *))off_1E0FD8010[v6])(v36, v47, v3 + 8);
    v48 = v6;
    LODWORD(v5) = v46;
  }
  LOBYTE(v36[0]) = 0;
  v37 = -1;
  if ((_DWORD)v5 == -1)
  {
LABEL_12:
    LOBYTE(v36[0]) = 0;
    v37 = -1;
    if ((_DWORD)v6 == -1
      || ((v8 = v6,
           ((void (*)(unsigned int **, _QWORD *, _QWORD *))off_1E0FD8010[v6])(&v41, v36, v47),
           v37 = v6,
           (_DWORD)v6 != 8)
       || !v36[0]
        ? (v7 = 0)
        : (v7 = *(_DWORD *)v36[0]),
          ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v8])(&v41, v36),
          !v7))
    {
LABEL_77:
      result = WGSL::constantBitwiseShiftRight(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue>(a2, (uint64_t)(v3 + 2), v3[8], v3[12]);
      v35 = v48;
      if (v48 == -1)
        goto LABEL_79;
      goto LABEL_78;
    }
    goto LABEL_18;
  }
  ((void (*)(unsigned int **, _QWORD *, _QWORD *))off_1E0FD8010[v5])(&v41, v36, v45);
  v37 = v5;
  if ((_DWORD)v5 != 8)
  {
    ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v5])(&v41, v36);
    LODWORD(v6) = v48;
    goto LABEL_12;
  }
  if (v36[0])
    v7 = *(_DWORD *)v36[0];
  else
    v7 = 0;
  ((void (*)(unsigned int **, _QWORD *))_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_)(&v41, v36);
  if (!v7)
    goto LABEL_77;
LABEL_18:
  v9 = 24 * v7;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *v10 = v7;
  v11 = v10 + 2;
  v12 = 24;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v14 = 0;
  LODWORD(v36[0]) = 0;
  v37 = 0;
  v38[0] = 0;
  v39 = 0;
  do
  {
    if (v46 == 8)
    {
      if (v14 >= *(unsigned int *)v45[0])
        goto LABEL_82;
      v13 = v45[0] + v12 - 16;
      v15 = *(unsigned int *)(v45[0] + v12);
      v16 = v37;
      if (v37 == -1)
      {
        if ((_DWORD)v15 == -1)
          goto LABEL_31;
      }
      else if ((_DWORD)v15 == -1)
      {
        goto LABEL_26;
      }
      v41 = (unsigned int *)v36;
      ((void (*)(unsigned int **, _QWORD *, uint64_t))off_1E0FD80E0[v15])(&v41, v36, v13);
    }
    else
    {
      v16 = v37;
      if (v37 == -1)
      {
        if (v46 == -1)
          goto LABEL_31;
      }
      else if (v46 == -1)
      {
LABEL_26:
        ((void (*)(unsigned int **, _QWORD *, uint64_t))off_1E0FD7CC8[v16])(&v41, v36, v13);
        v37 = -1;
        goto LABEL_31;
      }
      v41 = (unsigned int *)v36;
      ((void (*)(unsigned int **, _QWORD *, _QWORD *))off_1E0FD80E0[v46])(&v41, v36, v45);
    }
LABEL_31:
    if (v48 == 8)
    {
      if (v14 >= *(unsigned int *)v47[0])
      {
LABEL_82:
        __break(0xC471u);
        JUMPOUT(0x1825BC590);
      }
      v13 = v47[0] + v12 - 16;
      v17 = *(unsigned int *)(v47[0] + v12);
      v18 = v39;
      if (v39 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_43;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_38;
      }
      v41 = v38;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD80E0[v17])(&v41, v38, v13);
    }
    else
    {
      v18 = v39;
      if (v39 == -1)
      {
        if (v48 == -1)
          goto LABEL_43;
      }
      else if (v48 == -1)
      {
LABEL_38:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD7CC8[v18])(&v41, v38, v13);
        v39 = -1;
        goto LABEL_43;
      }
      v41 = v38;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD80E0[v48])(&v41, v38, v47);
    }
LABEL_43:
    WGSL::constantBitwiseShiftRight(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue>((uint64_t)&v41, (uint64_t)v36, v38[0], v39);
    v20 = v44;
    if (v44)
    {
      if (v44 != 1)
        std::__throw_bad_variant_access[abi:sn180100]();
      v21 = v42[0];
      if (v42[0])
        *(_DWORD *)v42[0] += 2;
      *(_QWORD *)(a2 + 8) = v21;
      *(_DWORD *)(a2 + 32) = 1;
    }
    else
    {
      if (v14 >= *v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1825BC5B0);
      }
      v22 = v10[(unint64_t)v12 / 4];
      if ((_DWORD)v22 == -1)
      {
        if (v43 == -1)
          goto LABEL_54;
      }
      else if (v43 == -1)
      {
        ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v22])(&v40, v11);
        v10[(unint64_t)v12 / 4] = -1;
        goto LABEL_54;
      }
      v40 = v11;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD8188[v43])(&v40, v11, v42);
    }
LABEL_54:
    if (v44 != -1)
      ((void (*)(unsigned int **, _QWORD *))off_1E0FD7DD0[v44])(&v40, v42);
    if (v20)
      goto LABEL_64;
    ++v14;
    v11 += 6;
    v12 += 24;
  }
  while (v7 != v14);
  v23 = *v10;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v25 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v26 = v24 + 6;
    v27 = 24 * v23;
    v28 = v10 + 6;
    do
    {
      *((_BYTE *)v26 - 16) = 0;
      v19 = v26 - 4;
      *v26 = -1;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v29])(&v41, v19, v28 - 4);
        *v26 = v29;
      }
      v26 += 6;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  *(_QWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
LABEL_64:
  if (v39 != -1)
    ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v39])(&v41, v38);
  v39 = -1;
  if (v37 != -1)
    ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v37])(&v41, v36);
  v30 = *v10;
  if ((_DWORD)v30)
  {
    v31 = 24 * v30;
    v32 = v10 + 6;
    do
    {
      v19 = v32 - 4;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v33])(v36, v19);
      *v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  result = WTF::fastFree((WTF *)v10, v19);
  v35 = v48;
  if (v48 != -1)
LABEL_78:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v35])(v36, v47);
LABEL_79:
  v48 = -1;
  if (v46 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v46])(v36, v45);
  return result;
}

_QWORD *WGSL::constantBool@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *result;
  char v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  double v19[2];
  int v20;
  char v21;

  v4 = *a2;
  if (*a2 && *v4)
  {
    LOBYTE(v19[0]) = 0;
    v20 = -1;
    v5 = v4[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(_QWORD *, double *, _DWORD *))off_1E0FD8010[v5])(v17, v19, v4 + 2);
      v20 = v5;
      switch((int)v5)
      {
        case 0:
          _Q0.n128_u32[0] = LODWORD(v19[0]);
          _ZF = *(float *)v19 == 0.0;
          goto LABEL_12;
        case 1:
          _H0 = LOWORD(v19[0]);
          __asm { FCVT            S0, H0 }
          _ZF = _Q0.n128_f32[0] == 0.0;
          goto LABEL_12;
        case 2:
          _Q0.n128_f64[0] = v19[0];
          _ZF = v19[0] == 0.0;
          goto LABEL_12;
        case 3:
        case 4:
          _ZF = LODWORD(v19[0]) == 0;
          goto LABEL_12;
        case 5:
          _ZF = *(_QWORD *)&v19[0] == 0;
LABEL_12:
          v14 = !_ZF;
          goto LABEL_15;
        case 6:
          v14 = LOBYTE(v19[0]);
LABEL_15:
          LOBYTE(v17[0]) = v14;
          v18 = 6;
          result = (_QWORD *)((uint64_t (*)(char *, double *, __n128))off_1E0FD7CC8[v5])(&v21, v19, _Q0);
          goto LABEL_16;
        default:
          break;
      }
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1825BC7C0);
  }
  v8 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v8 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_23;
  }
  *(_QWORD *)&v19[0] = &v21;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, double *, uint64_t))off_1E0FD8068[v8])(v17, v19, a1);
LABEL_16:
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v15 = v18;
  if (v18 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    result = (_QWORD *)((uint64_t (*)(double *))off_1E0FD7D20[v18])(v19);
    *(_DWORD *)(a3 + 24) = v15;
    v16 = v18;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v16 != -1)
      return (_QWORD *)((uint64_t (*)(double *, _QWORD *))off_1E0FD7CC8[v16])(v19, v17);
  }
  return result;
}

char *WGSL::constantI32@<X0>(char *result@<X0>, uint64_t *a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v15;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];
  unsigned int v23;
  double v24[2];
  int v25;
  char v26;
  char *v27;

  v4 = *a2;
  if (*a2 && *(_DWORD *)v4)
  {
    v5 = *(unsigned int *)(v4 + 24);
    if ((_DWORD)v5 == 5)
    {
      v6 = *(_QWORD *)(v4 + 8);
      if (v6 == (int)v6)
      {
        *((_DWORD *)a3 + 2) = v6;
        *((_DWORD *)a3 + 6) = 3;
        *((_DWORD *)a3 + 8) = 0;
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0)
        {
          v12 = -(uint64_t)v6;
          v9 = 1;
          do
          {
            ++v9;
            _CF = v12 >= 0xA;
            v12 /= 0xAuLL;
          }
          while (_CF);
        }
        else
        {
          v9 = 0;
          v10 = v6;
          do
          {
            ++v9;
            v11 = v10 > 9;
            v10 /= 0xAuLL;
          }
          while (v11);
        }
        if (v9 < 0
          || (_VF = __OFADD__(v9, 31), v15 = v9 + 31, _VF)
          || __OFADD__(v15, 6)
          || (result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)v24, v15 + 6, "value ", 6u, v6, " cannot be represented as 'i32'", 0x1Fu), !*(_QWORD *)&v24[0]))
        {
          __break(0xC471u);
          JUMPOUT(0x1825BCA7CLL);
        }
        a3[1] = v24[0];
        *((_DWORD *)a3 + 8) = 1;
      }
      return result;
    }
    LOBYTE(v24[0]) = 0;
    v25 = -1;
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char **, double *, uint64_t))off_1E0FD8010[v5])(&v27, v24, v4 + 8);
      v25 = v5;
      switch((int)v5)
      {
        case 0:
          v8 = (int)*(float *)v24;
          goto LABEL_27;
        case 1:
          _H0 = LOWORD(v24[0]);
          __asm { FCVT            S0, H0 }
          v8 = (int)_S0;
          goto LABEL_27;
        case 2:
          v8 = (int)v24[0];
          goto LABEL_27;
        case 3:
        case 4:
          v8 = LODWORD(v24[0]);
          goto LABEL_27;
        case 6:
          v8 = LOBYTE(v24[0]);
LABEL_27:
          LODWORD(v22[0]) = v8;
          v23 = 3;
          result = (char *)((uint64_t (*)(char **, double *))off_1E0FD7CC8[v5])(&v27, v24);
          goto LABEL_28;
        default:
          break;
      }
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1825BCA74);
  }
  v7 = *((unsigned int *)result + 12);
  if ((_DWORD)v7 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_33;
  }
  v27 = &v26;
  result = (char *)((char *(*)(_QWORD *__return_ptr, char **, char *))off_1E0FD8068[v7])(v22, &v27, result);
LABEL_28:
  *((_BYTE *)a3 + 8) = 0;
  *((_DWORD *)a3 + 6) = -1;
  v20 = v23;
  if (v23 == -1)
  {
    *((_DWORD *)a3 + 8) = 0;
  }
  else
  {
    result = (char *)((uint64_t (*)(double *))off_1E0FD7D20[v23])(v24);
    *((_DWORD *)a3 + 6) = v20;
    v21 = v23;
    *((_DWORD *)a3 + 8) = 0;
    if ((_DWORD)v21 != -1)
      return (char *)((uint64_t (*)(double *, _QWORD *))off_1E0FD7CC8[v21])(v24, v22);
  }
  return result;
}

char *WGSL::constantU32@<X0>(char *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v15;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];
  unsigned int v23;
  double v24[2];
  int v25;
  char v26;
  char *v27;

  v4 = *a2;
  if (*a2 && *(_DWORD *)v4)
  {
    v5 = *(unsigned int *)(v4 + 24);
    if ((_DWORD)v5 == 5)
    {
      v6 = *(_QWORD *)(v4 + 8);
      if (HIDWORD(v6))
      {
        if ((v6 & 0x8000000000000000) != 0)
        {
          v12 = -(uint64_t)v6;
          v9 = 1;
          do
          {
            ++v9;
            _CF = v12 >= 0xA;
            v12 /= 0xAuLL;
          }
          while (_CF);
        }
        else
        {
          v9 = 0;
          v10 = v6;
          do
          {
            ++v9;
            v11 = v10 > 9;
            v10 /= 0xAuLL;
          }
          while (v11);
        }
        if (v9 < 0
          || (_VF = __OFADD__(v9, 31), v15 = v9 + 31, _VF)
          || __OFADD__(v15, 6)
          || (result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)v24, v15 + 6, "value ", 6u, v6, " cannot be represented as 'u32'", 0x1Fu), !*(_QWORD *)&v24[0]))
        {
          __break(0xC471u);
          JUMPOUT(0x1825BCD38);
        }
        *(double *)(a3 + 8) = v24[0];
        *(_DWORD *)(a3 + 32) = 1;
      }
      else
      {
        *(_DWORD *)(a3 + 8) = v6;
        *(_DWORD *)(a3 + 24) = 4;
        *(_DWORD *)(a3 + 32) = 0;
      }
      return result;
    }
    LOBYTE(v24[0]) = 0;
    v25 = -1;
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char **, double *, uint64_t))off_1E0FD8010[v5])(&v27, v24, v4 + 8);
      v25 = v5;
      switch((int)v5)
      {
        case 0:
          v8 = *(float *)v24;
          goto LABEL_27;
        case 1:
          _H0 = LOWORD(v24[0]);
          __asm { FCVT            S0, H0 }
          v8 = _S0;
          goto LABEL_27;
        case 2:
          v8 = v24[0];
          goto LABEL_27;
        case 3:
        case 4:
          v8 = LODWORD(v24[0]);
          goto LABEL_27;
        case 6:
          v8 = LOBYTE(v24[0]);
LABEL_27:
          LODWORD(v22[0]) = v8;
          v23 = 4;
          result = (char *)((uint64_t (*)(char **, double *))off_1E0FD7CC8[v5])(&v27, v24);
          goto LABEL_28;
        default:
          break;
      }
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1825BCD30);
  }
  v7 = *((unsigned int *)result + 12);
  if ((_DWORD)v7 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_33;
  }
  v27 = &v26;
  result = (char *)((char *(*)(_QWORD *__return_ptr, char **, char *))off_1E0FD8068[v7])(v22, &v27, result);
LABEL_28:
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v20 = v23;
  if (v23 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    result = (char *)((uint64_t (*)(double *))off_1E0FD7D20[v23])(v24);
    *(_DWORD *)(a3 + 24) = v20;
    v21 = v23;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v21 != -1)
      return (char *)((uint64_t (*)(double *, _QWORD *))off_1E0FD7CC8[v21])(v24, v22);
  }
  return result;
}

_QWORD *WGSL::constantF32@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *result;
  unsigned int v14;
  uint64_t v15;
  _QWORD v16[2];
  unsigned int v17;
  double v18[2];
  int v19;
  char v20;

  v4 = *a2;
  if (*a2 && *v4)
  {
    LOBYTE(v18[0]) = 0;
    v19 = -1;
    v5 = v4[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(_QWORD *, double *, _DWORD *))off_1E0FD8010[v5])(v16, v18, v4 + 2);
      v19 = v5;
      switch((int)v5)
      {
        case 0:
          _S0 = *(float *)v18;
          goto LABEL_15;
        case 1:
          _H0 = LOWORD(v18[0]);
          __asm { FCVT            S0, H0 }
          goto LABEL_15;
        case 2:
          _S0 = v18[0];
          goto LABEL_15;
        case 3:
          _S0 = (float)SLODWORD(v18[0]);
          goto LABEL_15;
        case 4:
          _S0 = (float)LODWORD(v18[0]);
          goto LABEL_15;
        case 5:
          _S0 = (float)*(uint64_t *)&v18[0];
          goto LABEL_15;
        case 6:
          _S0 = 0.0;
          if (LOBYTE(v18[0]))
            _S0 = 1.0;
LABEL_15:
          *(float *)v16 = _S0;
          v17 = 0;
          result = (_QWORD *)((uint64_t (*)(char *, double *))off_1E0FD7CC8[v5])(&v20, v18);
          goto LABEL_16;
        default:
          break;
      }
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1825BCF28);
  }
  v7 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v7 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  *(_QWORD *)&v18[0] = &v20;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, double *, uint64_t))off_1E0FD8068[v7])(v16, v18, a1);
LABEL_16:
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v14 = v17;
  if (v17 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    result = (_QWORD *)((uint64_t (*)(double *))off_1E0FD7D20[v17])(v18);
    *(_DWORD *)(a3 + 24) = v14;
    v15 = v17;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v15 != -1)
      return (_QWORD *)((uint64_t (*)(double *, _QWORD *))off_1E0FD7CC8[v15])(v18, v16);
  }
  return result;
}

_QWORD *WGSL::constantF16@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  float v6;
  uint64_t v8;
  _QWORD *result;
  unsigned int v14;
  uint64_t v15;
  _QWORD v16[2];
  unsigned int v17;
  unsigned int v18[4];
  int v19;
  char v20;

  v4 = *a2;
  if (*a2 && *v4)
  {
    LOBYTE(v18[0]) = 0;
    v19 = -1;
    v5 = v4[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(_QWORD *, unsigned int *, _DWORD *))off_1E0FD8010[v5])(v16, v18, v4 + 2);
      v19 = v5;
      switch((int)v5)
      {
        case 0:
          LODWORD(_D0) = v18[0];
          goto LABEL_13;
        case 1:
          LOWORD(_D0) = v18[0];
          goto LABEL_16;
        case 2:
          _D0 = *(_QWORD *)v18;
          __asm { FCVT            H0, D0 }
          goto LABEL_16;
        case 3:
          *(float *)&_D0 = (float)(int)v18[0];
          goto LABEL_13;
        case 4:
          *(float *)&_D0 = (float)v18[0];
          goto LABEL_13;
        case 5:
          *(float *)&_D0 = (float)*(uint64_t *)v18;
LABEL_13:
          __asm { FCVT            H0, S0 }
          goto LABEL_16;
        case 6:
          LOWORD(_D0) = 0;
          LOWORD(v6) = 15360;
          if (LOBYTE(v18[0]))
            *(float *)&_D0 = v6;
LABEL_16:
          LOWORD(v16[0]) = _D0;
          v17 = 1;
          result = (_QWORD *)((uint64_t (*)(char *, unsigned int *))off_1E0FD7CC8[v5])(&v20, v18);
          goto LABEL_17;
        default:
          break;
      }
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1825BD120);
  }
  v8 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v8 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_23;
  }
  *(_QWORD *)v18 = &v20;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, unsigned int *, uint64_t))off_1E0FD8068[v8])(v16, v18, a1);
LABEL_17:
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v14 = v17;
  if (v17 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    result = (_QWORD *)((uint64_t (*)(unsigned int *))off_1E0FD7D20[v17])(v18);
    *(_DWORD *)(a3 + 24) = v14;
    v15 = v17;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v15 != -1)
      return (_QWORD *)((uint64_t (*)(unsigned int *, _QWORD *))off_1E0FD7CC8[v15])(v18, v16);
  }
  return result;
}

void WGSL::constantVec2(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _BYTE v6[16];
  unsigned int v7;
  char v8;

  WGSL::constantVector((uint64_t)v6, a1, a2, 2u);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _BYTE *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantVec3(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _BYTE v6[16];
  unsigned int v7;
  char v8;

  WGSL::constantVector((uint64_t)v6, a1, a2, 3u);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _BYTE *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantVec4(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _BYTE v6[16];
  unsigned int v7;
  char v8;

  WGSL::constantVector((uint64_t)v6, a1, a2, 4u);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _BYTE *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat2x2(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 2u, 2);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat2x3(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 2u, 3);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat2x4(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 2u, 4);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat3x2(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 3u, 2);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat3x3(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 3u, 3);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat3x4(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 3u, 4);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat4x2(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 4u, 2);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat4x3(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 4u, 3);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantMat4x4(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WGSL::constantMatrix(v6, a1, a2, 4u, 4);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v4 = v7;
  if (v7 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    ((void (*)(char *))off_1E0FD7D20[v7])(&v8);
    *(_DWORD *)(a3 + 24) = v4;
    v5 = v7;
    *(_DWORD *)(a3 + 32) = 0;
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v5])(&v8, v6);
  }
}

void WGSL::constantAll(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  int v4;
  char v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  _BYTE v11[16];
  int v12;
  char v13;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BDACCLL);
  }
  v4 = v3[6];
  if (v4 == 8)
  {
    v6 = (unsigned int *)*((_QWORD *)v3 + 1);
    if (v6)
      v7 = v6 + 2;
    else
      v7 = 0;
    if (v6)
    {
      v8 = (uint64_t)&v6[6 * *v6 + 2];
      if (v7 != (unsigned int *)v8)
      {
LABEL_12:
        do
        {
          v11[0] = 0;
          v12 = -1;
          v9 = v7[4];
          if ((_DWORD)v9 == -1)
            goto LABEL_20;
          ((void (*)(char *, _BYTE *, unsigned int *))off_1E0FD8010[v9])(&v13, v11, v7);
          v12 = v9;
          if ((_DWORD)v9 != 6)
            goto LABEL_20;
          if (!v11[0])
          {
            *(_BYTE *)(a2 + 8) = 0;
            *(_DWORD *)(a2 + 24) = 6;
            *(_DWORD *)(a2 + 32) = 0;
            ((void (*)(char *, _BYTE *))off_1E0FD7CC8[v9])(&v13, v11);
            return;
          }
          v7 += 6;
        }
        while (v7 != (unsigned int *)v8);
      }
    }
    else
    {
      v8 = 0;
      if (v7)
        goto LABEL_12;
    }
    v5 = 1;
    goto LABEL_17;
  }
  if (v4 == 6)
  {
    v5 = *((_BYTE *)v3 + 8);
LABEL_17:
    *(_BYTE *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 24) = 6;
    *(_DWORD *)(a2 + 32) = 0;
    return;
  }
LABEL_20:
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  WGSL::constantAny(v10);
}

void WGSL::constantAny(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  int v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  _BYTE v10[16];
  int v11;
  char v12;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BDC30);
  }
  v4 = v3[6];
  if (v4 == 8)
  {
    v5 = (unsigned int *)*((_QWORD *)v3 + 1);
    if (v5)
      v6 = v5 + 2;
    else
      v6 = 0;
    if (v5)
    {
      v7 = (uint64_t)&v5[6 * *v5 + 2];
      if (v6 != (unsigned int *)v7)
      {
LABEL_12:
        do
        {
          v10[0] = 0;
          v11 = -1;
          v8 = v6[4];
          if ((_DWORD)v8 == -1)
            goto LABEL_20;
          ((void (*)(char *, _BYTE *, unsigned int *))off_1E0FD8010[v8])(&v12, v10, v6);
          v11 = v8;
          if ((_DWORD)v8 != 6)
            goto LABEL_20;
          if (v10[0])
          {
            *(_BYTE *)(a2 + 8) = 1;
            *(_DWORD *)(a2 + 24) = 6;
            *(_DWORD *)(a2 + 32) = 0;
            ((void (*)(char *, _BYTE *))off_1E0FD7CC8[v8])(&v12, v10);
            return;
          }
          v6 += 6;
        }
        while (v6 != (unsigned int *)v7);
      }
    }
    else
    {
      v7 = 0;
      if (v6)
        goto LABEL_12;
    }
    *(_BYTE *)(a2 + 8) = 0;
    goto LABEL_17;
  }
  if (v4 == 6)
  {
    *(_BYTE *)(a2 + 8) = *((_BYTE *)v3 + 8);
LABEL_17:
    *(_DWORD *)(a2 + 24) = 6;
    *(_DWORD *)(a2 + 32) = 0;
    return;
  }
LABEL_20:
  v9 = std::__throw_bad_variant_access[abi:sn180100]();
  WGSL::constantSelect(v9);
}

void WGSL::constantSelect(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int **v5;
  unsigned int **v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _BOOL8 v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;

  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BDFDCLL);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BDFFCLL);
  }
  if (v4 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BE01CLL);
  }
  v5 = (unsigned int **)(v3 + 2);
  v6 = (unsigned int **)(v3 + 8);
  v7 = v3[18];
  if (v7 == 6)
  {
    if (*((_BYTE *)v3 + 56))
      v8 = v3 + 8;
    else
      v8 = v3 + 2;
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 24) = -1;
    v9 = v8[4];
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v9])(&v34);
      *(_DWORD *)(a2 + 24) = v9;
    }
    goto LABEL_35;
  }
  if (v3[6] != 8 || v3[12] != 8 || v7 != 8)
  {
LABEL_49:
    v33 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantAcos(v33);
    return;
  }
  v10 = (unsigned int *)*((_QWORD *)v3 + 7);
  if (v10)
  {
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = 24 * v11;
      v13 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v11 + 8));
      *v13 = v11;
      bzero(v13 + 2, 24 * ((24 * v11 - 24) / 0x18uLL) + 24);
      v14 = 0;
      v15 = 0;
      while (1)
      {
        while (1)
        {
          v16 = (unsigned int *)*((_QWORD *)v3 + 7);
          if (v15 >= *v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1825BDF5CLL);
          }
          v17 = &v16[v14 / 4];
          if (v17[6] != 6)
            goto LABEL_49;
          if (*((_BYTE *)v17 + 8))
          {
            v18 = (uint64_t)*v6;
            if (v15 >= **v6)
            {
              __break(0xC471u);
              JUMPOUT(0x1825BDF9CLL);
            }
          }
          else
          {
            v18 = (uint64_t)*v5;
            if (v15 >= **v5)
            {
              __break(0xC471u);
              JUMPOUT(0x1825BDFBCLL);
            }
          }
          if (v15 >= *v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1825BDF7CLL);
          }
          v19 = v13[v14 / 4 + 6];
          v20 = *(unsigned int *)(v18 + v14 + 24);
          if ((_DWORD)v19 != -1)
            break;
          if ((_DWORD)v20 != -1)
            goto LABEL_17;
LABEL_18:
          ++v15;
          v14 += 24;
          if (v12 == v14)
            goto LABEL_29;
        }
        if ((_DWORD)v20 != -1)
        {
LABEL_17:
          v37 = (uint64_t)&v13[v14 / 4 + 2];
          ((void (*)(uint64_t *))off_1E0FD80E0[v20])(&v37);
          goto LABEL_18;
        }
        ((void (*)(char *, unsigned int *))off_1E0FD7CC8[v19])(&v38, &v13[v14 / 4 + 2]);
        v13[v14 / 4 + 6] = -1;
        ++v15;
        v14 += 24;
        if (v12 == v14)
        {
LABEL_29:
          v21 = *v13;
          v22 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v21 + 8));
          v24 = v22;
          *v22 = v21;
          if ((_DWORD)v21)
          {
            v25 = v22 + 6;
            v26 = 24 * v21;
            v27 = v13 + 6;
            do
            {
              *((_BYTE *)v25 - 16) = 0;
              v23 = v25 - 4;
              *v25 = -1;
              v28 = *v27;
              if ((_DWORD)v28 != -1)
              {
                ((void (*)(char *, _DWORD *, unsigned int *))off_1E0FD8010[v28])(&v35, v23, v27 - 4);
                *v25 = v28;
              }
              v25 += 6;
              v27 += 6;
              v26 -= 24;
            }
            while (v26);
          }
          *(_QWORD *)(a2 + 8) = v24;
          *(_DWORD *)(a2 + 24) = 8;
          *(_DWORD *)(a2 + 32) = 0;
          v29 = *v13;
          if ((_DWORD)v29)
          {
            v30 = 24 * v29;
            v31 = v13 + 6;
            do
            {
              v23 = v31 - 4;
              v32 = *v31;
              if ((_DWORD)v32 != -1)
                ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v32])(&v36, v23);
              *v31 = -1;
              v31 += 6;
              v30 -= 24;
            }
            while (v30);
          }
          WTF::fastFree((WTF *)v13, v23);
          return;
        }
      }
    }
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 8;
LABEL_35:
  *(_DWORD *)(a2 + 32) = 0;
}

__int16 WGSL::constantAcos@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BE4F8);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = acos(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = acosf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = acosf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825BE558);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825BE4D8);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825BE538);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = acosf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = acos(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = acosf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825BE4B8);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantAsin@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BEA34);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = asin(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = asinf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = asinf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825BEA94);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825BEA14);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825BEA74);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = asinf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = asin(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = asinf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825BE9F4);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantAtan@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BEF70);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = atan(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = atanf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = atanf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825BEFD0);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825BEF50);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825BEFB0);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = atanf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = atan(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = atanf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825BEF30);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantCos@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BF4ACLL);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = cos(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = cosf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = cosf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825BF50CLL);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825BF48CLL);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825BF4ECLL);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = cosf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = cos(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = cosf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825BF46CLL);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantSin@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BF9E8);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = sin(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = sinf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = sinf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825BFA48);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825BF9C8);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825BFA28);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = sinf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = sin(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = sinf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825BF9A8);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantTan@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825BFF24);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = tan(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = tanf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = tanf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825BFF84);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825BFF04);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825BFF64);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = tanf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = tan(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = tanf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825BFEE4);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantAcosh@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C0460);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = acosh(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = acoshf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = acoshf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C04C0);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C0440);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C04A0);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = acoshf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = acosh(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = acoshf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C0420);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantAsinh@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C099CLL);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = asinh(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = asinhf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = asinhf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C09FCLL);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C097CLL);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C09DCLL);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = asinhf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = asinh(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = asinhf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C095CLL);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantAtanh@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C0ED8);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = atanh(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = atanhf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = atanhf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C0F38);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C0EB8);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C0F18);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = atanhf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = atanh(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = atanhf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C0E98);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantCosh@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C1414);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = cosh(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = coshf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = coshf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C1474);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C13F4);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C1454);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = coshf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = cosh(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = coshf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C13D4);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantSinh@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C1950);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = sinh(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = sinhf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = sinhf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C19B0);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C1930);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C1990);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = sinhf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = sinh(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = sinhf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C1910);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantTanh@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C1E8CLL);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = tanh(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = tanhf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = tanhf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C1EECLL);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C1E6CLL);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C1ECCLL);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = tanhf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = tanh(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = tanhf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C1E4CLL);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

uint64_t WGSL::constantAbs@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  float *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v23;
  double v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  float v41;
  double v42;
  uint64_t v43;
  double v44[2];
  unsigned int v45;
  uint64_t v46;
  double *v47;
  double v48;
  int v49;
  unsigned int v50;
  int v51;
  _QWORD v52[2];
  unsigned int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C24DCLL);
  }
  LOBYTE(v52[0]) = 0;
  v53 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 != -1)
  {
    v5 = (float *)(v3 + 2);
    v6 = off_1E0FD8010[v4];
    ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v47, v52, v3 + 2);
    v53 = v4;
    LOBYTE(v47) = 0;
    v49 = -1;
    ((void (*)(double *, double **, _QWORD *))v6)(v44, &v47, v52);
    v7 = 0;
    v49 = v4;
    if ((_DWORD)v4 == 8)
    {
      if (v47)
        v7 = *(_DWORD *)v47;
      else
        v7 = 0;
    }
    result = ((uint64_t (*)(double *, double **))off_1E0FD7CC8[v4])(v44, &v47);
    if (v7)
    {
      v43 = a2;
      v9 = 24 * v7;
      v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
      *v10 = v7;
      v11 = 6;
      bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
      v13 = 0;
      LODWORD(v44[0]) = 0;
      v45 = 0;
      while (2)
      {
        if (v53 == 8)
        {
          if (v13 >= *(unsigned int *)v52[0])
          {
            __break(0xC471u);
            JUMPOUT(0x1825C24BCLL);
          }
          v12 = v52[0] + v11 * 4 - 16;
          v14 = *(unsigned int *)(v52[0] + v11 * 4);
          v15 = v45;
          if (v45 != -1)
          {
            if ((_DWORD)v14 == -1)
            {
LABEL_75:
              ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v15])(&v47, v44, v12);
              v45 = -1;
              goto LABEL_76;
            }
            goto LABEL_21;
          }
          if ((_DWORD)v14 != -1)
          {
LABEL_21:
            v47 = v44;
            ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v14])(&v47, v44, v12);
          }
        }
        else
        {
          v15 = v45;
          if (v45 == -1)
          {
            if (v53 == -1)
            {
LABEL_76:
              __break(0xC471u);
              JUMPOUT(0x1825C251CLL);
            }
          }
          else if (v53 == -1)
          {
            goto LABEL_75;
          }
          v47 = v44;
          ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v53])(&v47, v44, v52);
        }
        switch(v45)
        {
          case 0u:
            LODWORD(v48) = fabsf(*(float *)v44);
            v50 = v45;
            v51 = 0;
            if (v13 >= *v10)
              goto LABEL_72;
            goto LABEL_38;
          case 1u:
            _H0 = LOWORD(v44[0]);
            __asm { FCVT            S0, H0 }
            _S0 = fabsf(_S0);
            __asm { FCVT            H0, S0 }
            LOWORD(v48) = LOWORD(_S0);
            v50 = v45;
            v51 = 0;
            if (v13 >= *v10)
              goto LABEL_72;
            goto LABEL_38;
          case 2u:
            v48 = fabs(v44[0]);
            v50 = v45;
            v51 = 0;
            if (v13 >= *v10)
              goto LABEL_72;
            goto LABEL_38;
          case 3u:
            v23 = LODWORD(v44[0]);
            if (SLODWORD(v44[0]) < 0)
              v23 = -LODWORD(v44[0]);
            goto LABEL_33;
          case 4u:
            v23 = LODWORD(v44[0]);
LABEL_33:
            LODWORD(v48) = v23;
            v50 = v45;
            v51 = 0;
            if (v13 >= *v10)
              goto LABEL_72;
            goto LABEL_38;
          case 5u:
            v24 = v44[0];
            if (v44[0] < 0.0)
              *(_QWORD *)&v24 = -*(_QWORD *)&v44[0];
            v48 = v24;
            v50 = v45;
            v51 = 0;
            if (v13 >= *v10)
            {
LABEL_72:
              __break(0xC471u);
              JUMPOUT(0x1825C249CLL);
            }
LABEL_38:
            v46 = (uint64_t)&v10[v11 - 4];
            ((void (*)(uint64_t *))off_1E0FD8188[v45])(&v46);
            if (v51 != -1)
              ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v51])(&v46, &v48);
            ++v13;
            v11 += 6;
            if (v7 != v13)
              continue;
            v25 = *v10;
            v26 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v25 + 8));
            v28 = v26;
            *v26 = v25;
            if ((_DWORD)v25)
            {
              v29 = v26 + 6;
              v30 = 24 * v25;
              v31 = v10 + 6;
              do
              {
                *((_BYTE *)v29 - 16) = 0;
                v27 = v29 - 4;
                *v29 = -1;
                v32 = *v31;
                if ((_DWORD)v32 != -1)
                {
                  ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v32])(&v47, v27, v31 - 4);
                  *v29 = v32;
                }
                v29 += 6;
                v31 += 6;
                v30 -= 24;
              }
              while (v30);
            }
            *(_QWORD *)(v43 + 8) = v28;
            *(_DWORD *)(v43 + 24) = 8;
            *(_DWORD *)(v43 + 32) = 0;
            if (v45 != -1)
              ((void (*)(double **, double *))off_1E0FD7CC8[v45])(&v47, v44);
            v33 = *v10;
            if ((_DWORD)v33)
            {
              v34 = 24 * v33;
              v35 = v10 + 6;
              do
              {
                v27 = v35 - 4;
                v36 = *v35;
                if ((_DWORD)v36 != -1)
                  ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v36])(&v47, v27);
                *v35 = -1;
                v35 += 6;
                v34 -= 24;
              }
              while (v34);
            }
            result = WTF::fastFree((WTF *)v10, v27);
            v37 = v53;
            if (v53 != -1)
              return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v37])(&v47, v52);
            return result;
          default:
            goto LABEL_76;
        }
      }
    }
    switch(v3[6])
    {
      case 0:
        *(float *)(a2 + 8) = fabsf(*v5);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v37 = v53;
        if (v53 == -1)
          return result;
        return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v37])(&v47, v52);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        _S0 = fabsf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_S0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v37 = v53;
        if (v53 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v37])(&v47, v52);
      case 2:
        *(double *)(a2 + 8) = fabs(*(double *)v5);
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v37 = v53;
        if (v53 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v37])(&v47, v52);
      case 3:
        v41 = *v5;
        if (*(int *)v5 < 0)
          LODWORD(v41) = -LODWORD(v41);
        *(float *)(a2 + 8) = v41;
        *(_DWORD *)(a2 + 24) = 3;
        *(_DWORD *)(a2 + 32) = 0;
        v37 = v53;
        if (v53 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v37])(&v47, v52);
      case 4:
        *(float *)(a2 + 8) = *v5;
        *(_DWORD *)(a2 + 24) = 4;
        *(_DWORD *)(a2 + 32) = 0;
        v37 = v53;
        if (v53 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v37])(&v47, v52);
      case 5:
        v42 = *(double *)v5;
        if (*(uint64_t *)v5 < 0)
          *(_QWORD *)&v42 = -*(_QWORD *)&v42;
        *(double *)(a2 + 8) = v42;
        *(_DWORD *)(a2 + 24) = 5;
        *(_DWORD *)(a2 + 32) = 0;
        v37 = v53;
        if (v53 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v37])(&v47, v52);
      default:
        break;
    }
  }
  __break(0xC471u);
  JUMPOUT(0x1825C2540);
}

void WGSL::constantAtan2(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  long double *v5;
  uint64_t v6;
  long double *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v49;
  long double __y[2];
  unsigned int v51;
  long double __x[2];
  unsigned int v53;
  uint64_t v54;
  long double *v55;
  long double v56[2];
  int v57;
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  unsigned int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C2CC8);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C2CE8);
  }
  v5 = (long double *)(v3 + 2);
  LOBYTE(v59[0]) = 0;
  v60 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(long double *, _QWORD *, int *))off_1E0FD8010[v6])(__y, v59, v3 + 2);
    v60 = v6;
  }
  v7 = (long double *)(v3 + 8);
  LOBYTE(v61[0]) = 0;
  v62 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(long double *, _QWORD *, int *))off_1E0FD8010[v8])(__y, v61, v3 + 8);
    v62 = v8;
    LODWORD(v6) = v60;
  }
  LOBYTE(__y[0]) = 0;
  v51 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(__y[0]) = 0;
    v51 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(long double **, long double *, _QWORD *))off_1E0FD8010[v8])(&v55, __y, v61), v51 = v8, (_DWORD)v8 != 8)|| !*(_QWORD *)&__y[0]? (v10 = 0): (v10 = **(_DWORD **)&__y[0]), ((void (*)(long double **, long double *))off_1E0FD7CC8[v8])(&v55, __y), !v10))
    {
LABEL_74:
      v43 = v3[6];
      if (v43 == 2)
      {
        if (v3[12] == 2)
        {
          *(long double *)(a2 + 8) = atan2(*v5, *v7);
          *(_DWORD *)(a2 + 24) = 2;
          *(_DWORD *)(a2 + 32) = 0;
          v42 = v62;
          if (v62 == -1)
            goto LABEL_86;
LABEL_85:
          ((void (*)(long double *, _QWORD *))off_1E0FD7CC8[v42])(__y, v61);
          goto LABEL_86;
        }
      }
      else if (v43 == 1)
      {
        if (v3[12] == 1)
        {
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S0, H0; float
            FCVT            S1, H1; float
          }
          _S0 = atan2f(_S0, _S1);
          __asm { FCVT            H0, S0 }
          *(_WORD *)(a2 + 8) = LOWORD(_S0);
          *(_DWORD *)(a2 + 24) = 1;
          *(_DWORD *)(a2 + 32) = 0;
          v42 = v62;
          if (v62 == -1)
            goto LABEL_86;
          goto LABEL_85;
        }
      }
      else
      {
        if (v43)
        {
LABEL_95:
          __break(0xC471u);
          JUMPOUT(0x1825C2C88);
        }
        if (!v3[12])
        {
          *(float *)(a2 + 8) = atan2f(*(float *)v5, *(float *)v7);
          *(_DWORD *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 32) = 0;
          v42 = v62;
          if (v62 == -1)
            goto LABEL_86;
          goto LABEL_85;
        }
      }
LABEL_93:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_94:
      __break(0xC471u);
      JUMPOUT(0x1825C2D0CLL);
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(long double **, long double *, _QWORD *))off_1E0FD8010[v6])(&v55, __y, v59);
  v51 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v6])(&v55, __y);
    LODWORD(v8) = v62;
    goto LABEL_12;
  }
  if (*(_QWORD *)&__y[0])
    v10 = **(_DWORD **)&__y[0];
  else
    v10 = 0;
  ((void (*)(long double **, long double *))off_1E0FD7CC8[v9])(&v55, __y);
  if (!v10)
    goto LABEL_74;
LABEL_18:
  v49 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  v13 = 24;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v15 = 0;
  LODWORD(__y[0]) = 0;
  v51 = 0;
  LODWORD(__x[0]) = 0;
  v53 = 0;
  do
  {
    if (v60 == 8)
    {
      if (v15 >= *(unsigned int *)v59[0])
        goto LABEL_95;
      v14 = v59[0] + v13 - 16;
      v16 = *(unsigned int *)(v59[0] + v13);
      v17 = v51;
      if (v51 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_32;
      }
      else if ((_DWORD)v16 == -1)
      {
        goto LABEL_27;
      }
      v55 = __y;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v16])(&v55, __y, v14);
    }
    else
    {
      v17 = v51;
      if (v51 == -1)
      {
        if (v60 == -1)
          goto LABEL_32;
      }
      else if (v60 == -1)
      {
LABEL_27:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v17])(&v55, __y, v14);
        v51 = -1;
        goto LABEL_32;
      }
      v55 = __y;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v60])(&v55, __y, v59);
    }
LABEL_32:
    if (v62 == 8)
    {
      if (v15 >= *(unsigned int *)v61[0])
        goto LABEL_95;
      v14 = v61[0] + v13 - 16;
      v18 = *(unsigned int *)(v61[0] + v13);
      v19 = v53;
      if (v53 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_44;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_39;
      }
      v55 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v18])(&v55, __x, v14);
    }
    else
    {
      v19 = v53;
      if (v53 == -1)
      {
        if (v62 == -1)
          goto LABEL_44;
      }
      else if (v62 == -1)
      {
LABEL_39:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v19])(&v55, __x, v14);
        v53 = -1;
        goto LABEL_44;
      }
      v55 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v62])(&v55, __x, v61);
    }
LABEL_44:
    v20 = v51;
    if (v51)
    {
      if (v51 == 1)
      {
        if (v53 != 1)
          goto LABEL_93;
        _H0 = LOWORD(__y[0]);
        _H1 = LOWORD(__x[0]);
        __asm
        {
          FCVT            S0, H0; float
          FCVT            S1, H1; float
        }
        _S0 = atan2f(_S0, _S1);
        __asm { FCVT            H0, S0 }
        LOWORD(v56[0]) = LOWORD(_S0);
      }
      else
      {
        if (v51 != 2)
          goto LABEL_94;
        if (v53 != 2)
          goto LABEL_93;
        v56[0] = atan2(__y[0], __x[0]);
      }
    }
    else
    {
      if (v53)
        goto LABEL_93;
      LODWORD(v56[0]) = atan2f(*(float *)__y, *(float *)__x);
    }
    v57 = v20;
    v58 = 0;
    if (v15 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C2CA8);
    }
    v54 = (uint64_t)&v12[(unint64_t)v13 / 4 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v20])(&v54);
    if (v58 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v58])(&v54, v56);
    ++v15;
    v13 += 24;
  }
  while (v10 != v15);
  v30 = *v12;
  v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
  v33 = v31;
  *v31 = v30;
  if ((_DWORD)v30)
  {
    v34 = v31 + 6;
    v35 = 24 * v30;
    v36 = v12 + 6;
    do
    {
      *((_BYTE *)v34 - 16) = 0;
      v32 = v34 - 4;
      *v34 = -1;
      v37 = *v36;
      if ((_DWORD)v37 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v37])(&v55, v32, v36 - 4);
        *v34 = v37;
      }
      v34 += 6;
      v36 += 6;
      v35 -= 24;
    }
    while (v35);
  }
  *(_QWORD *)(v49 + 8) = v33;
  *(_DWORD *)(v49 + 24) = 8;
  *(_DWORD *)(v49 + 32) = 0;
  if (v53 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v53])(&v55, __x);
  v53 = -1;
  if (v51 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v51])(&v55, __y);
  v38 = *v12;
  if ((_DWORD)v38)
  {
    v39 = 24 * v38;
    v40 = v12 + 6;
    do
    {
      v32 = v40 - 4;
      v41 = *v40;
      if ((_DWORD)v41 != -1)
        ((void (*)(long double *, _DWORD *))off_1E0FD7CC8[v41])(__y, v32);
      *v40 = -1;
      v40 += 6;
      v39 -= 24;
    }
    while (v39);
  }
  WTF::fastFree((WTF *)v12, v32);
  v42 = v62;
  if (v62 != -1)
    goto LABEL_85;
LABEL_86:
  v62 = -1;
  if (v60 != -1)
    ((void (*)(long double *, _QWORD *))off_1E0FD7CC8[v60])(__y, v59);
}

__int16 WGSL::constantCeil@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v40;
  double v41[2];
  unsigned int v42;
  uint64_t v43;
  double *v44;
  double v45;
  int v46;
  unsigned int v47;
  int v48;
  _QWORD v49[2];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C31F8);
  }
  LOBYTE(v49[0]) = 0;
  v50 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v44, v49, v3 + 2);
  v50 = v4;
  LOBYTE(v44) = 0;
  v46 = -1;
  ((void (*)(double *, double **, _QWORD *))v6)(v41, &v44, v49);
  v7 = 0;
  v46 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v44)
      v7 = *(_DWORD *)v44;
    else
      v7 = 0;
  }
  ((void (*)(double *, double **))off_1E0FD7CC8[v4])(v41, &v44);
  if (!v7)
  {
    v36 = v3[6];
    switch(v36)
    {
      case 2:
        _D0 = ceil(*v5);
        *(double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        *(float *)&_D0 = ceilf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = ceilf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C3258);
  }
  v40 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(v41[0]) = 0;
  v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v12 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C31D8);
      }
      v11 = v49[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v49[0] + v10 * 4);
      v14 = v42;
      if (v42 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v13])(&v44, v41, v11);
    }
    else
    {
      v14 = v42;
      if (v42 == -1)
      {
        if (v50 == -1)
          goto LABEL_59;
      }
      else if (v50 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v14])(&v44, v41, v11);
        v42 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C3238);
      }
      v44 = v41;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        _H0 = LOWORD(v41[0]);
        __asm { FCVT            S0, H0 }
        _S0 = ceilf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v45) = LOWORD(_S0);
      }
      else
      {
        if (v42 != 2)
          goto LABEL_59;
        v45 = ceil(v41[0]);
      }
    }
    else
    {
      LODWORD(v45) = ceilf(*(float *)v41);
    }
    v47 = v42;
    v48 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C31B8);
    }
    v43 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v42])(&v43);
    if (v48 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v48])(&v43, &v45);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v22 = *v9;
  v23 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v22 + 8));
  v25 = v23;
  *v23 = v22;
  if ((_DWORD)v22)
  {
    v26 = v23 + 6;
    v27 = 24 * v22;
    v28 = v9 + 6;
    do
    {
      *((_BYTE *)v26 - 16) = 0;
      v24 = v26 - 4;
      *v26 = -1;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v29])(&v44, v24, v28 - 4);
        *v26 = v29;
      }
      v26 += 6;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  *(_QWORD *)(v40 + 8) = v25;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v42])(&v44, v41);
  v30 = *v9;
  if ((_DWORD)v30)
  {
    v31 = 24 * v30;
    v32 = v9 + 6;
    do
    {
      v24 = v32 - 4;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v33])(&v44, v24);
      *v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  WTF::fastFree((WTF *)v9, v24);
  v35 = v50;
  if (v50 != -1)
LABEL_44:
    ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v35])(&v44, v49);
  return LOWORD(_D0);
}

void WGSL::constantClamp(unsigned int **a1@<X1>, uint64_t a2@<X8>, float _S1@<S1>, float _S2@<S2>)
{
  float *v4;
  unsigned int v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  double v36;
  int v37;
  unsigned int v38;
  double v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  double v59;
  float v60;
  float v61;
  double v62;
  double v64[2];
  unsigned int v65;
  double v66[2];
  unsigned int v67;
  double v68[2];
  unsigned int v69;
  uint64_t v70;
  double *v71;
  double v72[2];
  unsigned int v73;
  int v74;
  _QWORD v75[2];
  unsigned int v76;
  _QWORD v77[2];
  unsigned int v78;
  _QWORD v79[2];
  unsigned int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = (float *)*a1;
  v5 = **a1;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C3D9CLL);
  }
  if (v5 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C3DBCLL);
  }
  if (v5 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C3DDCLL);
  }
  LOBYTE(v75[0]) = 0;
  v76 = -1;
  v6 = *((unsigned int *)v4 + 6);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, float *))off_1E0FD8010[v6])(v64, v75, v4 + 2);
    v76 = v6;
  }
  v7 = v4 + 8;
  LOBYTE(v77[0]) = 0;
  v78 = -1;
  v8 = *((unsigned int *)v4 + 12);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, float *))off_1E0FD8010[v8])(v64, v77, v4 + 8);
    v78 = v8;
  }
  v9 = v4 + 14;
  LOBYTE(v79[0]) = 0;
  v80 = -1;
  v10 = *((unsigned int *)v4 + 18);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(double *, _QWORD *, float *))off_1E0FD8010[v10])(v64, v79, v4 + 14);
    v80 = v10;
  }
  LOBYTE(v64[0]) = 0;
  v65 = -1;
  v11 = v76;
  if (v76 != -1)
  {
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v76])(&v71, v64, v75);
    v65 = v11;
    if ((_DWORD)v11 == 8)
      goto LABEL_18;
    ((void (*)(double **, double *))off_1E0FD7CC8[v11])(&v71, v64);
  }
  LOBYTE(v64[0]) = 0;
  v65 = -1;
  v11 = v78;
  if (v78 == -1)
    goto LABEL_16;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v78])(&v71, v64, v77);
  v65 = v11;
  if ((_DWORD)v11 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v11])(&v71, v64);
LABEL_16:
    LOBYTE(v64[0]) = 0;
    v65 = -1;
    v11 = v80;
    if (v80 == -1)
    {
LABEL_129:
      switch(*((_DWORD *)v4 + 6))
      {
        case 0:
          if (*((_DWORD *)v4 + 12) || *((_DWORD *)v4 + 18))
            goto LABEL_183;
          v53 = v4[2];
          if (v53 < *v7)
            v53 = *v7;
          if (v53 > *v9)
            v53 = *v9;
          *(float *)(a2 + 8) = v53;
          *(_DWORD *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 32) = 0;
          v52 = v80;
          if (v80 == -1)
            goto LABEL_124;
          goto LABEL_123;
        case 1:
          if (*((_DWORD *)v4 + 12) != 1 || *((_DWORD *)v4 + 18) != 1)
            goto LABEL_183;
          LOWORD(_S0) = *((_WORD *)v4 + 4);
          LOWORD(_S1) = *(_WORD *)v7;
          LOWORD(_S2) = *(_WORD *)v9;
          __asm
          {
            FCVT            S3, H0
            FCVT            S4, H1
          }
          if (_S3 < _S4)
            _S0 = _S1;
          __asm
          {
            FCVT            S1, H0
            FCVT            S3, H2
          }
          if (_S1 > _S3)
            _S0 = _S2;
          *(_WORD *)(a2 + 8) = LOWORD(_S0);
          *(_DWORD *)(a2 + 24) = 1;
          *(_DWORD *)(a2 + 32) = 0;
          v52 = v80;
          if (v80 == -1)
            goto LABEL_124;
          goto LABEL_123;
        case 2:
          if (*((_DWORD *)v4 + 12) != 2 || *((_DWORD *)v4 + 18) != 2)
            goto LABEL_183;
          v59 = *((double *)v4 + 1);
          if (v59 < *(double *)v7)
            v59 = *(double *)v7;
          if (v59 > *(double *)v9)
            v59 = *(double *)v9;
          *(double *)(a2 + 8) = v59;
          *(_DWORD *)(a2 + 24) = 2;
          *(_DWORD *)(a2 + 32) = 0;
          v52 = v80;
          if (v80 == -1)
            goto LABEL_124;
          goto LABEL_123;
        case 3:
          if (*((_DWORD *)v4 + 12) != 3 || *((_DWORD *)v4 + 18) != 3)
            goto LABEL_183;
          v60 = v4[2];
          if (SLODWORD(v60) <= *(_DWORD *)v7)
            v60 = *v7;
          if (SLODWORD(v60) >= *(_DWORD *)v9)
            v60 = *v9;
          *(float *)(a2 + 8) = v60;
          *(_DWORD *)(a2 + 24) = 3;
          *(_DWORD *)(a2 + 32) = 0;
          v52 = v80;
          if (v80 == -1)
            goto LABEL_124;
          goto LABEL_123;
        case 4:
          if (*((_DWORD *)v4 + 12) != 4 || *((_DWORD *)v4 + 18) != 4)
            goto LABEL_183;
          v61 = v4[2];
          if (LODWORD(v61) <= *(_DWORD *)v7)
            v61 = *v7;
          if (LODWORD(v61) >= *(_DWORD *)v9)
            v61 = *v9;
          *(float *)(a2 + 8) = v61;
          *(_DWORD *)(a2 + 24) = 4;
          *(_DWORD *)(a2 + 32) = 0;
          v52 = v80;
          if (v80 == -1)
            goto LABEL_124;
          goto LABEL_123;
        case 5:
          if (*((_DWORD *)v4 + 12) != 5 || *((_DWORD *)v4 + 18) != 5)
          {
LABEL_183:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_184:
            __break(0xC471u);
            JUMPOUT(0x1825C3E00);
          }
          v62 = *((double *)v4 + 1);
          if (*(uint64_t *)&v62 <= *(_QWORD *)v7)
            v62 = *(double *)v7;
          if (*(uint64_t *)&v62 >= *(_QWORD *)v9)
            v62 = *(double *)v9;
          *(double *)(a2 + 8) = v62;
          *(_DWORD *)(a2 + 24) = 5;
          *(_DWORD *)(a2 + 32) = 0;
          v52 = v80;
          if (v80 == -1)
            goto LABEL_124;
          goto LABEL_123;
        default:
          __break(0xC471u);
          JUMPOUT(0x1825C3E24);
      }
    }
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v80])(&v71, v64, v79);
    v65 = v11;
    if ((_DWORD)v11 != 8)
      goto LABEL_20;
  }
LABEL_18:
  if (*(_QWORD *)&v64[0])
  {
    v12 = **(_DWORD **)&v64[0];
    goto LABEL_21;
  }
LABEL_20:
  v12 = 0;
LABEL_21:
  ((void (*)(double **, double *))off_1E0FD7CC8[v11])(&v71, v64);
  if (!v12)
    goto LABEL_129;
  v13 = 24 * v12;
  v14 = (unsigned int *)WTF::fastMalloc((WTF *)(v13 + 8));
  *v14 = v12;
  v15 = 24;
  bzero(v14 + 2, 24 * ((v13 - 24) / 0x18uLL) + 24);
  v19 = 0;
  LODWORD(v64[0]) = 0;
  v65 = 0;
  LODWORD(v66[0]) = 0;
  v67 = 0;
  LODWORD(v68[0]) = 0;
  v69 = 0;
  do
  {
    if (v76 == 8)
    {
      if (v19 >= *(unsigned int *)v75[0])
        goto LABEL_178;
      v16 = v75[0] + v15 - 16;
      v20 = *(unsigned int *)(v75[0] + v15);
      v21 = v65;
      if (v65 == -1)
      {
        if ((_DWORD)v20 == -1)
          goto LABEL_36;
      }
      else if ((_DWORD)v20 == -1)
      {
        goto LABEL_31;
      }
      v71 = v64;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v20])(&v71, v64, v16);
    }
    else
    {
      v21 = v65;
      if (v65 == -1)
      {
        if (v76 == -1)
          goto LABEL_36;
      }
      else if (v76 == -1)
      {
LABEL_31:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v21])(&v71, v64, v16);
        v65 = -1;
        goto LABEL_36;
      }
      v71 = v64;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v76])(&v71, v64, v75);
    }
LABEL_36:
    if (v78 == 8)
    {
      if (v19 >= *(unsigned int *)v77[0])
        goto LABEL_178;
      v16 = v77[0] + v15 - 16;
      v22 = *(unsigned int *)(v77[0] + v15);
      v23 = v67;
      if (v67 == -1)
      {
        if ((_DWORD)v22 == -1)
          goto LABEL_48;
      }
      else if ((_DWORD)v22 == -1)
      {
        goto LABEL_43;
      }
      v71 = v66;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v22])(&v71, v66, v16);
    }
    else
    {
      v23 = v67;
      if (v67 == -1)
      {
        if (v78 == -1)
          goto LABEL_48;
      }
      else if (v78 == -1)
      {
LABEL_43:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v23])(&v71, v66, v16);
        v67 = -1;
        goto LABEL_48;
      }
      v71 = v66;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v78])(&v71, v66, v77);
    }
LABEL_48:
    if (v80 == 8)
    {
      if (v19 >= *(unsigned int *)v79[0])
      {
LABEL_178:
        __break(0xC471u);
        JUMPOUT(0x1825C3D5CLL);
      }
      v16 = v79[0] + v15 - 16;
      v24 = *(unsigned int *)(v79[0] + v15);
      v25 = v69;
      if (v69 == -1)
      {
        if ((_DWORD)v24 == -1)
          goto LABEL_60;
      }
      else if ((_DWORD)v24 == -1)
      {
        goto LABEL_55;
      }
      v71 = v68;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v24])(&v71, v68, v16);
    }
    else
    {
      v25 = v69;
      if (v69 == -1)
      {
        if (v80 == -1)
          goto LABEL_60;
      }
      else if (v80 == -1)
      {
LABEL_55:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v25])(&v71, v68, v16);
        v69 = -1;
        goto LABEL_60;
      }
      v71 = v68;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v80])(&v71, v68, v79);
    }
LABEL_60:
    switch(v65)
    {
      case 0u:
        if (v67 || v69)
          goto LABEL_183;
        v26 = *(float *)v64;
        if (*(float *)v64 < *(float *)v66)
          v26 = *(float *)v66;
        if (v26 > *(float *)v68)
          v26 = *(float *)v68;
        *(float *)v72 = v26;
        break;
      case 1u:
        if (v67 != 1 || v69 != 1)
          goto LABEL_183;
        LOWORD(_S0) = LOWORD(v64[0]);
        LOWORD(_S1) = LOWORD(v66[0]);
        LOWORD(_S2) = LOWORD(v68[0]);
        __asm
        {
          FCVT            S3, H1
          FCVT            S4, H0
        }
        if (_S4 < _S3)
          _S0 = _S1;
        __asm
        {
          FCVT            S1, H0
          FCVT            S3, H2
        }
        if (_S1 > _S3)
          _S0 = _S2;
        LOWORD(v72[0]) = _S0;
        break;
      case 2u:
        if (v67 != 2 || v69 != 2)
          goto LABEL_183;
        v36 = v64[0];
        if (v64[0] < v66[0])
          v36 = v66[0];
        if (v36 > v68[0])
          v36 = v68[0];
        v72[0] = v36;
        break;
      case 3u:
        if (v67 != 3 || v69 != 3)
          goto LABEL_183;
        v37 = LODWORD(v64[0]);
        if (SLODWORD(v64[0]) <= SLODWORD(v66[0]))
          v37 = LODWORD(v66[0]);
        if (v37 >= SLODWORD(v68[0]))
          v37 = LODWORD(v68[0]);
        LODWORD(v72[0]) = v37;
        break;
      case 4u:
        if (v67 != 4 || v69 != 4)
          goto LABEL_183;
        v38 = LODWORD(v64[0]);
        if (LODWORD(v64[0]) <= LODWORD(v66[0]))
          v38 = LODWORD(v66[0]);
        if (v38 >= LODWORD(v68[0]))
          v38 = LODWORD(v68[0]);
        LODWORD(v72[0]) = v38;
        break;
      case 5u:
        if (v67 != 5 || v69 != 5)
          goto LABEL_183;
        v39 = v64[0];
        if (*(uint64_t *)&v64[0] <= *(uint64_t *)&v66[0])
          v39 = v66[0];
        if (*(uint64_t *)&v39 >= *(uint64_t *)&v68[0])
          v39 = v68[0];
        v72[0] = v39;
        break;
      default:
        goto LABEL_184;
    }
    v73 = v65;
    v74 = 0;
    if (v19 >= *v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C3D7CLL);
    }
    v70 = (uint64_t)&v14[(unint64_t)v15 / 4 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v65])(&v70);
    if (v74 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v74])(&v70, v72);
    ++v19;
    v15 += 24;
  }
  while (v12 != v19);
  v40 = *v14;
  v41 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v40 + 8));
  v43 = v41;
  *v41 = v40;
  if ((_DWORD)v40)
  {
    v44 = v41 + 6;
    v45 = 24 * v40;
    v46 = v14 + 6;
    do
    {
      *((_BYTE *)v44 - 16) = 0;
      v42 = v44 - 4;
      *v44 = -1;
      v47 = *v46;
      if ((_DWORD)v47 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v47])(&v71, v42, v46 - 4);
        *v44 = v47;
      }
      v44 += 6;
      v46 += 6;
      v45 -= 24;
    }
    while (v45);
  }
  *(_QWORD *)(a2 + 8) = v43;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
  if (v69 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v69])(&v71, v68);
  v69 = -1;
  if (v67 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v67])(&v71, v66);
  v67 = -1;
  if (v65 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v65])(&v71, v64);
  v48 = *v14;
  if ((_DWORD)v48)
  {
    v49 = 24 * v48;
    v50 = v14 + 6;
    do
    {
      v42 = v50 - 4;
      v51 = *v50;
      if ((_DWORD)v51 != -1)
        ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v51])(v64, v42);
      *v50 = -1;
      v50 += 6;
      v49 -= 24;
    }
    while (v49);
  }
  WTF::fastFree((WTF *)v14, v42);
  v52 = v80;
  if (v80 != -1)
LABEL_123:
    ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v52])(v64, v79);
LABEL_124:
  v80 = -1;
  if (v78 != -1)
    ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v78])(v64, v77);
  v78 = -1;
  if (v76 != -1)
    ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v76])(v64, v75);
}

uint64_t WGSL::constantCountLeadingZeros@<X0>(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29[4];
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  _QWORD v37[2];
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C42A8);
  }
  LOBYTE(v37[0]) = 0;
  v38 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_48;
  v5 = off_1E0FD8010[v4];
  ((void (*)(unsigned int **, _QWORD *, _DWORD *))v5)(&v32, v37, v3 + 2);
  v38 = v4;
  LOBYTE(v32) = 0;
  v34 = -1;
  ((void (*)(unsigned int *, unsigned int **, _QWORD *))v5)(v29, &v32, v37);
  v6 = 0;
  v34 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v32)
      v6 = *v32;
    else
      v6 = 0;
  }
  result = ((uint64_t (*)(unsigned int *, unsigned int **))off_1E0FD7CC8[v4])(v29, &v32);
  if (!v6)
  {
    v28 = v3[6];
    if ((v28 - 3) < 2)
    {
      a2[2] = __clz(v3[2]);
      a2[6] = v28;
      a2[8] = 0;
      v27 = v38;
      if (v38 != -1)
        return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v27])(&v32, v37);
      return result;
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x1825C42E8);
  }
  v8 = 24 * v6;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v6;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  v29[0] = 0;
  v30 = 0;
  do
  {
    if (v38 == 8)
    {
      if (v12 >= *(unsigned int *)v37[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C4288);
      }
      v11 = v37[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v37[0] + v10 * 4);
      v14 = v30;
      if (v30 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_17;
      }
      v32 = v29;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD80E0[v13])(&v32, v29, v11);
    }
    else
    {
      v14 = v30;
      if (v30 == -1)
      {
        if (v38 == -1)
          goto LABEL_22;
      }
      else if (v38 == -1)
      {
LABEL_17:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD7CC8[v14])(&v32, v29, v11);
        v30 = -1;
        goto LABEL_22;
      }
      v32 = v29;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD80E0[v38])(&v32, v29, v37);
    }
LABEL_22:
    if (v30 - 3 > 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C42C8);
    }
    v33 = __clz(v29[0]);
    v35 = v30;
    v36 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C4268);
    }
    v31 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v30])(&v31);
    if (v36 != -1)
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7DD0[v36])(&v31, &v33);
    ++v12;
    v10 += 6;
  }
  while (v6 != v12);
  v15 = *v9;
  v16 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v15 + 8));
  v18 = v16;
  *v16 = v15;
  if ((_DWORD)v15)
  {
    v19 = v16 + 6;
    v20 = 24 * v15;
    v21 = v9 + 6;
    do
    {
      *((_BYTE *)v19 - 16) = 0;
      v17 = v19 - 4;
      *v19 = -1;
      v22 = *v21;
      if ((_DWORD)v22 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v22])(&v32, v17, v21 - 4);
        *v19 = v22;
      }
      v19 += 6;
      v21 += 6;
      v20 -= 24;
    }
    while (v20);
  }
  *((_QWORD *)a2 + 1) = v18;
  a2[6] = 8;
  a2[8] = 0;
  if (v30 != -1)
    ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v30])(&v32, v29);
  v23 = *v9;
  if ((_DWORD)v23)
  {
    v24 = 24 * v23;
    v25 = v9 + 6;
    do
    {
      v17 = v25 - 4;
      v26 = *v25;
      if ((_DWORD)v26 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v26])(&v32, v17);
      *v25 = -1;
      v25 += 6;
      v24 -= 24;
    }
    while (v24);
  }
  result = WTF::fastFree((WTF *)v9, v17);
  v27 = v38;
  if (v38 != -1)
    return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v27])(&v32, v37);
  return result;
}

__int16 WGSL::constantCountOneBits@<H0>(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  unsigned int v6;
  int8x8_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  int v31;
  _DWORD v33[4];
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  __int32 v37;
  int v38;
  unsigned int v39;
  int v40;
  _QWORD v41[2];
  unsigned int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C4758);
  }
  LOBYTE(v41[0]) = 0;
  v42 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_48;
  v5 = off_1E0FD8010[v4];
  ((void (*)(unsigned int **, _QWORD *, _DWORD *))v5)(&v36, v41, v3 + 2);
  v42 = v4;
  LOBYTE(v36) = 0;
  v38 = -1;
  ((void (*)(_DWORD *, unsigned int **, _QWORD *))v5)(v33, &v36, v41);
  v6 = 0;
  v38 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v36)
      v6 = *v36;
    else
      v6 = 0;
  }
  ((void (*)(_DWORD *, unsigned int **))off_1E0FD7CC8[v4])(v33, &v36);
  if (!v6)
  {
    v31 = v3[6];
    if ((v31 - 3) < 2)
    {
      v7.i32[0] = v3[2];
      v29 = (uint8x8_t)vcnt_s8(v7);
      v29.i16[0] = vaddlv_u8(v29);
      a2[2] = v29.i32[0];
      a2[6] = v31;
      a2[8] = 0;
      v30 = v42;
      if (v42 != -1)
        goto LABEL_39;
      return v29.i16[0];
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x1825C4798);
  }
  v8 = 24 * v6;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v6;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v13 = 0;
  v33[0] = 0;
  v34 = 0;
  do
  {
    if (v42 == 8)
    {
      if (v13 >= *(unsigned int *)v41[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C4738);
      }
      v11 = v41[0] + v10 * 4 - 16;
      v14 = *(unsigned int *)(v41[0] + v10 * 4);
      v15 = v34;
      if (v34 == -1)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v14 == -1)
      {
        goto LABEL_17;
      }
      v36 = v33;
      ((void (*)(unsigned int **, _DWORD *, uint64_t))off_1E0FD80E0[v14])(&v36, v33, v11);
    }
    else
    {
      v15 = v34;
      if (v34 == -1)
      {
        if (v42 == -1)
          goto LABEL_22;
      }
      else if (v42 == -1)
      {
LABEL_17:
        ((void (*)(unsigned int **, _DWORD *, uint64_t))off_1E0FD7CC8[v15])(&v36, v33, v11);
        v34 = -1;
        goto LABEL_22;
      }
      v36 = v33;
      ((void (*)(unsigned int **, _DWORD *, _QWORD *))off_1E0FD80E0[v42])(&v36, v33, v41);
    }
LABEL_22:
    if (v34 - 3 > 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C4778);
    }
    v12.i32[0] = v33[0];
    v16 = (uint8x8_t)vcnt_s8(v12);
    v16.i16[0] = vaddlv_u8(v16);
    v37 = v16.i32[0];
    v39 = v34;
    v40 = 0;
    if (v13 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C4718);
    }
    v35 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v34])(&v35);
    if (v40 != -1)
      ((void (*)(uint64_t *, __int32 *))off_1E0FD7DD0[v40])(&v35, &v37);
    ++v13;
    v10 += 6;
  }
  while (v6 != v13);
  v17 = *v9;
  v18 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v17 + 8));
  v20 = v18;
  *v18 = v17;
  if ((_DWORD)v17)
  {
    v21 = v18 + 6;
    v22 = 24 * v17;
    v23 = v9 + 6;
    do
    {
      *((_BYTE *)v21 - 16) = 0;
      v19 = v21 - 4;
      *v21 = -1;
      v24 = *v23;
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v24])(&v36, v19, v23 - 4);
        *v21 = v24;
      }
      v21 += 6;
      v23 += 6;
      v22 -= 24;
    }
    while (v22);
  }
  *((_QWORD *)a2 + 1) = v20;
  a2[6] = 8;
  a2[8] = 0;
  if (v34 != -1)
    ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v34])(&v36, v33);
  v25 = *v9;
  if ((_DWORD)v25)
  {
    v26 = 24 * v25;
    v27 = v9 + 6;
    do
    {
      v19 = v27 - 4;
      v28 = *v27;
      if ((_DWORD)v28 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v28])(&v36, v19);
      *v27 = -1;
      v27 += 6;
      v26 -= 24;
    }
    while (v26);
  }
  WTF::fastFree((WTF *)v9, v19);
  v30 = v42;
  if (v42 != -1)
LABEL_39:
    ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v30])(&v36, v41);
  return v29.i16[0];
}

uint64_t WGSL::constantCountTrailingZeros@<X0>(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29[4];
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  _QWORD v37[2];
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C4BF8);
  }
  LOBYTE(v37[0]) = 0;
  v38 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_48;
  v5 = off_1E0FD8010[v4];
  ((void (*)(unsigned int **, _QWORD *, _DWORD *))v5)(&v32, v37, v3 + 2);
  v38 = v4;
  LOBYTE(v32) = 0;
  v34 = -1;
  ((void (*)(unsigned int *, unsigned int **, _QWORD *))v5)(v29, &v32, v37);
  v6 = 0;
  v34 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v32)
      v6 = *v32;
    else
      v6 = 0;
  }
  result = ((uint64_t (*)(unsigned int *, unsigned int **))off_1E0FD7CC8[v4])(v29, &v32);
  if (!v6)
  {
    v28 = v3[6];
    if ((v28 - 3) < 2)
    {
      a2[2] = __clz(__rbit32(v3[2]));
      a2[6] = v28;
      a2[8] = 0;
      v27 = v38;
      if (v38 != -1)
        return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v27])(&v32, v37);
      return result;
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x1825C4C38);
  }
  v8 = 24 * v6;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v6;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  v29[0] = 0;
  v30 = 0;
  do
  {
    if (v38 == 8)
    {
      if (v12 >= *(unsigned int *)v37[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C4BD8);
      }
      v11 = v37[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v37[0] + v10 * 4);
      v14 = v30;
      if (v30 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_17;
      }
      v32 = v29;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD80E0[v13])(&v32, v29, v11);
    }
    else
    {
      v14 = v30;
      if (v30 == -1)
      {
        if (v38 == -1)
          goto LABEL_22;
      }
      else if (v38 == -1)
      {
LABEL_17:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD7CC8[v14])(&v32, v29, v11);
        v30 = -1;
        goto LABEL_22;
      }
      v32 = v29;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD80E0[v38])(&v32, v29, v37);
    }
LABEL_22:
    if (v30 - 3 > 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C4C18);
    }
    v33 = __clz(__rbit32(v29[0]));
    v35 = v30;
    v36 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C4BB8);
    }
    v31 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v30])(&v31);
    if (v36 != -1)
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7DD0[v36])(&v31, &v33);
    ++v12;
    v10 += 6;
  }
  while (v6 != v12);
  v15 = *v9;
  v16 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v15 + 8));
  v18 = v16;
  *v16 = v15;
  if ((_DWORD)v15)
  {
    v19 = v16 + 6;
    v20 = 24 * v15;
    v21 = v9 + 6;
    do
    {
      *((_BYTE *)v19 - 16) = 0;
      v17 = v19 - 4;
      *v19 = -1;
      v22 = *v21;
      if ((_DWORD)v22 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v22])(&v32, v17, v21 - 4);
        *v19 = v22;
      }
      v19 += 6;
      v21 += 6;
      v20 -= 24;
    }
    while (v20);
  }
  *((_QWORD *)a2 + 1) = v18;
  a2[6] = 8;
  a2[8] = 0;
  if (v30 != -1)
    ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v30])(&v32, v29);
  v23 = *v9;
  if ((_DWORD)v23)
  {
    v24 = 24 * v23;
    v25 = v9 + 6;
    do
    {
      v17 = v25 - 4;
      v26 = *v25;
      if ((_DWORD)v26 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v26])(&v32, v17);
      *v25 = -1;
      v25 += 6;
      v24 -= 24;
    }
    while (v24);
  }
  result = WTF::fastFree((WTF *)v9, v17);
  v27 = v38;
  if (v38 != -1)
    return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v27])(&v32, v37);
  return result;
}

uint64_t WGSL::constantCross@<X0>(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;

  v3 = *a1;
  v4 = **a1;
  if (!v4)
    goto LABEL_92;
  if (v3[6] != 8)
    goto LABEL_91;
  if (v4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C5330);
  }
  if (v3[12] != 8)
    goto LABEL_91;
  v5 = *((_QWORD *)v3 + 1);
  v6 = *(_DWORD *)v5;
  if (!*(_DWORD *)v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C5350);
  }
  v7 = *(_DWORD *)(v5 + 24);
  if (v7 != 2)
  {
    if (v7 != 1)
    {
      if (!v7)
      {
        if (v6 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C5370);
        }
        if (!*(_DWORD *)(v5 + 48))
        {
          if (v6 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1825C53D0);
          }
          if (!*(_DWORD *)(v5 + 72))
          {
            v8 = *((_QWORD *)v3 + 4);
            v9 = *(_DWORD *)v8;
            if (!*(_DWORD *)v8)
            {
              __break(0xC471u);
              JUMPOUT(0x1825C5430);
            }
            if (!*(_DWORD *)(v8 + 24))
            {
              if (v9 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1825C5490);
              }
              if (!*(_DWORD *)(v8 + 48))
              {
                if (v9 <= 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1825C54F0);
                }
                if (!*(_DWORD *)(v8 + 72))
                {
                  v10 = *(float *)(v5 + 8);
                  v11 = *(float *)(v5 + 32);
                  v12 = *(float *)(v5 + 56);
                  v13 = *(float *)(v8 + 8);
                  v14 = *(float *)(v8 + 32);
                  v15 = *(float *)(v8 + 56);
                  v16 = (unsigned int *)WTF::fastMalloc((WTF *)0x50);
                  *v16 = 3;
                  *((float *)v16 + 2) = (float)(v11 * v15) - (float)(v12 * v14);
                  *(_OWORD *)(v16 + 7) = 0u;
                  *(_OWORD *)(v16 + 11) = 0u;
                  *(_OWORD *)(v16 + 15) = 0u;
                  v16[19] = 0;
                  *((float *)v16 + 8) = (float)(v12 * v13) - (float)(v10 * v15);
                  *(_OWORD *)(v16 + 3) = 0u;
                  *((float *)v16 + 14) = (float)(v10 * v14) - (float)(v11 * v13);
                  v17 = WTF::fastMalloc((WTF *)0x50);
                  *(_DWORD *)v17 = 3;
                  *(_BYTE *)(v17 + 8) = 0;
                  *(_DWORD *)(v17 + 24) = -1;
                  v18 = v16[6];
                  if ((_DWORD)v18 != -1)
                  {
                    ((void (*)(char *, uint64_t, unsigned int *))off_1E0FD8010[v18])(&v75, v17 + 8, v16 + 2);
                    *(_DWORD *)(v17 + 24) = v18;
                  }
                  *(_BYTE *)(v17 + 32) = 0;
                  *(_DWORD *)(v17 + 48) = -1;
                  v19 = v16[12];
                  if ((_DWORD)v19 != -1)
                  {
                    ((void (*)(char *))off_1E0FD8010[v19])(&v75);
                    *(_DWORD *)(v17 + 48) = v19;
                  }
                  *(_BYTE *)(v17 + 56) = 0;
                  v20 = (void *)(v17 + 56);
                  *(_DWORD *)(v17 + 72) = -1;
                  v21 = v16[18];
                  if ((_DWORD)v21 != -1)
                  {
                    ((void (*)(char *))off_1E0FD8010[v21])(&v75);
                    *(_DWORD *)(v17 + 72) = v21;
                  }
                  *(_QWORD *)(a2 + 8) = v17;
                  *(_DWORD *)(a2 + 24) = 8;
                  *(_DWORD *)(a2 + 32) = 0;
                  v22 = *v16;
                  if ((_DWORD)v22)
                  {
                    v23 = 0;
                    v24 = 24 * v22;
                    do
                    {
                      v25 = &v16[v23 / 4];
                      v26 = v16[v23 / 4 + 6];
                      if ((_DWORD)v26 != -1)
                        ((void (*)(char *, unsigned int *))off_1E0FD7CC8[v26])(&v76, v25 + 2);
                      v25[6] = -1;
                      v23 += 24;
                    }
                    while (v24 != v23);
                  }
                  return WTF::fastFree((WTF *)v16, v20);
                }
              }
            }
          }
        }
        goto LABEL_91;
      }
LABEL_92:
      __break(0xC471u);
      JUMPOUT(0x1825C5310);
    }
    if (v6 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C53B0);
    }
    if (*(_DWORD *)(v5 + 48) == 1)
    {
      if (v6 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825C5410);
      }
      if (*(_DWORD *)(v5 + 72) == 1)
      {
        v44 = *((_QWORD *)v3 + 4);
        v45 = *(_DWORD *)v44;
        if (!*(_DWORD *)v44)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C5470);
        }
        if (*(_DWORD *)(v44 + 24) == 1)
        {
          if (v45 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1825C54D0);
          }
          if (*(_DWORD *)(v44 + 48) == 1)
          {
            if (v45 <= 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1825C5530);
            }
            if (*(_DWORD *)(v44 + 72) == 1)
            {
              _H8 = *(_WORD *)(v5 + 8);
              _H9 = *(_WORD *)(v5 + 32);
              _H10 = *(_WORD *)(v5 + 56);
              _H11 = *(_WORD *)(v44 + 8);
              _H12 = *(_WORD *)(v44 + 32);
              _H13 = *(_WORD *)(v44 + 56);
              v16 = (unsigned int *)WTF::fastMalloc((WTF *)0x50);
              *v16 = 3;
              *(_OWORD *)(v16 + 2) = 0u;
              *(_OWORD *)(v16 + 6) = 0u;
              *(_OWORD *)(v16 + 10) = 0u;
              *((_QWORD *)v16 + 9) = 0;
              *(_OWORD *)(v16 + 14) = 0u;
              __asm
              {
                FCVT            S0, H9
                FCVT            S1, H13
                FCVT            S2, H10
                FCVT            S3, H12
              }
              _S4 = (float)(_S0 * _S1) - (float)(_S2 * _S3);
              __asm { FCVT            H4, S4 }
              *((_WORD *)v16 + 4) = LOWORD(_S4);
              v16[6] = 1;
              __asm
              {
                FCVT            S4, H11
                FCVT            S5, H8
              }
              _S1 = (float)(_S2 * _S4) - (float)(_S5 * _S1);
              __asm { FCVT            H1, S1 }
              *((_WORD *)v16 + 16) = LOWORD(_S1);
              v16[12] = 1;
              _S0 = (float)(_S5 * _S3) - (float)(_S0 * _S4);
              __asm { FCVT            H0, S0 }
              *((_WORD *)v16 + 28) = LOWORD(_S0);
              v16[18] = 1;
              v65 = WTF::fastMalloc((WTF *)0x50);
              *(_DWORD *)v65 = 3;
              *(_BYTE *)(v65 + 8) = 0;
              *(_DWORD *)(v65 + 24) = -1;
              v66 = v16[6];
              if ((_DWORD)v66 != -1)
              {
                ((void (*)(char *, uint64_t, unsigned int *))off_1E0FD8010[v66])(&v77, v65 + 8, v16 + 2);
                *(_DWORD *)(v65 + 24) = v66;
              }
              *(_BYTE *)(v65 + 32) = 0;
              *(_DWORD *)(v65 + 48) = -1;
              v67 = v16[12];
              if ((_DWORD)v67 != -1)
              {
                ((void (*)(char *))off_1E0FD8010[v67])(&v77);
                *(_DWORD *)(v65 + 48) = v67;
              }
              *(_BYTE *)(v65 + 56) = 0;
              v20 = (void *)(v65 + 56);
              *(_DWORD *)(v65 + 72) = -1;
              v68 = v16[18];
              if ((_DWORD)v68 != -1)
              {
                ((void (*)(char *))off_1E0FD8010[v68])(&v77);
                *(_DWORD *)(v65 + 72) = v68;
              }
              *(_QWORD *)(a2 + 8) = v65;
              *(_DWORD *)(a2 + 24) = 8;
              *(_DWORD *)(a2 + 32) = 0;
              v69 = *v16;
              if ((_DWORD)v69)
              {
                v70 = 0;
                v71 = 24 * v69;
                do
                {
                  v72 = &v16[v70 / 4];
                  v73 = v16[v70 / 4 + 6];
                  if ((_DWORD)v73 != -1)
                    ((void (*)(char *, unsigned int *))off_1E0FD7CC8[v73])(&v78, v72 + 2);
                  v72[6] = -1;
                  v70 += 24;
                }
                while (v71 != v70);
              }
              return WTF::fastFree((WTF *)v16, v20);
            }
          }
        }
      }
    }
LABEL_91:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_92;
  }
  if (v6 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C5390);
  }
  if (*(_DWORD *)(v5 + 48) != 2)
    goto LABEL_91;
  if (v6 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C53F0);
  }
  if (*(_DWORD *)(v5 + 72) != 2)
    goto LABEL_91;
  v27 = *((_QWORD *)v3 + 4);
  v28 = *(_DWORD *)v27;
  if (!*(_DWORD *)v27)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C5450);
  }
  if (*(_DWORD *)(v27 + 24) != 2)
    goto LABEL_91;
  if (v28 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C54B0);
  }
  if (*(_DWORD *)(v27 + 48) != 2)
    goto LABEL_91;
  if (v28 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C5510);
  }
  if (*(_DWORD *)(v27 + 72) != 2)
    goto LABEL_91;
  v29 = *(double *)(v5 + 8);
  v30 = *(double *)(v5 + 32);
  v31 = *(double *)(v5 + 56);
  v32 = *(double *)(v27 + 8);
  v33 = *(double *)(v27 + 32);
  v34 = *(double *)(v27 + 56);
  v16 = (unsigned int *)WTF::fastMalloc((WTF *)0x50);
  *v16 = 3;
  *((double *)v16 + 1) = v30 * v34 - v31 * v33;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  v16[6] = 2;
  *((double *)v16 + 4) = v31 * v32 - v29 * v34;
  v16[12] = 2;
  *((double *)v16 + 7) = v29 * v33 - v30 * v32;
  v16[18] = 2;
  v35 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v35 = 3;
  *(_BYTE *)(v35 + 8) = 0;
  *(_DWORD *)(v35 + 24) = -1;
  v36 = v16[6];
  if ((_DWORD)v36 != -1)
  {
    ((void (*)(char *, uint64_t, unsigned int *))off_1E0FD8010[v36])(&v79, v35 + 8, v16 + 2);
    *(_DWORD *)(v35 + 24) = v36;
  }
  *(_BYTE *)(v35 + 32) = 0;
  *(_DWORD *)(v35 + 48) = -1;
  v37 = v16[12];
  if ((_DWORD)v37 != -1)
  {
    ((void (*)(char *))off_1E0FD8010[v37])(&v79);
    *(_DWORD *)(v35 + 48) = v37;
  }
  *(_BYTE *)(v35 + 56) = 0;
  v20 = (void *)(v35 + 56);
  *(_DWORD *)(v35 + 72) = -1;
  v38 = v16[18];
  if ((_DWORD)v38 != -1)
  {
    ((void (*)(char *))off_1E0FD8010[v38])(&v79);
    *(_DWORD *)(v35 + 72) = v38;
  }
  *(_QWORD *)(a2 + 8) = v35;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
  v39 = *v16;
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = 24 * v39;
    do
    {
      v42 = &v16[v40 / 4];
      v43 = v16[v40 / 4 + 6];
      if ((_DWORD)v43 != -1)
        ((void (*)(char *, unsigned int *))off_1E0FD7CC8[v43])(&v80, v42 + 2);
      v42[6] = -1;
      v40 += 24;
    }
    while (v41 != v40);
  }
  return WTF::fastFree((WTF *)v16, v20);
}

uint64_t WGSL::constantDegrees@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  float v38;
  uint64_t v42;
  double v43[2];
  unsigned int v44;
  uint64_t v45;
  double *v46;
  double v47;
  int v48;
  unsigned int v49;
  int v50;
  _QWORD v51[2];
  unsigned int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C5A5CLL);
  }
  LOBYTE(v51[0]) = 0;
  v52 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v46, v51, v3 + 2);
  v52 = v4;
  LOBYTE(v46) = 0;
  v48 = -1;
  ((void (*)(double *, double **, _QWORD *))v6)(v43, &v46, v51);
  v7 = 0;
  v48 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v46)
      v7 = *(_DWORD *)v46;
    else
      v7 = 0;
  }
  result = ((uint64_t (*)(double *, double **))off_1E0FD7CC8[v4])(v43, &v46);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        *(double *)(a2 + 8) = *v5 * 57.2957795;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v52;
        if (v52 != -1)
          return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v36])(&v46, v51);
        return result;
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            D0, H0 }
        _D0 = _D0 * 57.2957795;
        __asm { FCVT            H0, D0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v52;
        if (v52 != -1)
          return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v36])(&v46, v51);
        return result;
      case 0:
        v38 = *(float *)v5 * 57.2957795;
        *(float *)(a2 + 8) = v38;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v52;
        if (v52 != -1)
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v36])(&v46, v51);
        return result;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C5ABCLL);
  }
  v42 = a2;
  v9 = 24 * v7;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *v10 = v7;
  v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v13 = 0;
  LODWORD(v43[0]) = 0;
  v44 = 0;
  do
  {
    if (v52 == 8)
    {
      if (v13 >= *(unsigned int *)v51[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C5A3CLL);
      }
      v12 = v51[0] + v11 * 4 - 16;
      v14 = *(unsigned int *)(v51[0] + v11 * 4);
      v15 = v44;
      if (v44 == -1)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v14 == -1)
      {
        goto LABEL_58;
      }
      v46 = v43;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v14])(&v46, v43, v12);
    }
    else
    {
      v15 = v44;
      if (v44 == -1)
      {
        if (v52 == -1)
          goto LABEL_59;
      }
      else if (v52 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v15])(&v46, v43, v12);
        v44 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C5A9CLL);
      }
      v46 = v43;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v52])(&v46, v43, v51);
    }
LABEL_22:
    if (v44)
    {
      if (v44 == 1)
      {
        _H0 = LOWORD(v43[0]);
        __asm { FCVT            D0, H0 }
        _D0 = _D0 * 57.2957795;
        __asm { FCVT            H0, D0 }
        LOWORD(v47) = LOWORD(_D0);
      }
      else
      {
        if (v44 != 2)
          goto LABEL_59;
        v47 = v43[0] * 57.2957795;
      }
    }
    else
    {
      v16 = *(float *)v43 * 57.2957795;
      *(float *)&v47 = v16;
    }
    v49 = v44;
    v50 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C5A1CLL);
    }
    v45 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v44])(&v45);
    if (v50 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v50])(&v45, &v47);
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  v24 = *v10;
  v25 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v24 + 8));
  v27 = v25;
  *v25 = v24;
  if ((_DWORD)v24)
  {
    v28 = v25 + 6;
    v29 = 24 * v24;
    v30 = v10 + 6;
    do
    {
      *((_BYTE *)v28 - 16) = 0;
      v26 = v28 - 4;
      *v28 = -1;
      v31 = *v30;
      if ((_DWORD)v31 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v31])(&v46, v26, v30 - 4);
        *v28 = v31;
      }
      v28 += 6;
      v30 += 6;
      v29 -= 24;
    }
    while (v29);
  }
  *(_QWORD *)(v42 + 8) = v27;
  *(_DWORD *)(v42 + 24) = 8;
  *(_DWORD *)(v42 + 32) = 0;
  if (v44 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v44])(&v46, v43);
  v32 = *v10;
  if ((_DWORD)v32)
  {
    v33 = 24 * v32;
    v34 = v10 + 6;
    do
    {
      v26 = v34 - 4;
      v35 = *v34;
      if ((_DWORD)v35 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v35])(&v46, v26);
      *v34 = -1;
      v34 += 6;
      v33 -= 24;
    }
    while (v33);
  }
  result = WTF::fastFree((WTF *)v10, v26);
  v36 = v52;
  if (v52 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v36])(&v46, v51);
  return result;
}

__int16 WGSL::constantDeterminant@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  float v67;
  float v75;
  float v76;
  float v83;
  float v84;
  float v87;
  float v89;
  float v90;
  float v93;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
    goto LABEL_182;
  if (v2[6] != 9)
    goto LABEL_178;
  v3 = *((_QWORD *)v2 + 2);
  v4 = *(_DWORD *)v3;
  if (!*(_DWORD *)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C6540);
  }
  v5 = v2[2];
  v6 = *(_DWORD *)(v3 + 24);
  if (v6 == 2)
  {
    switch(v5)
    {
      case 4:
        if (v4 <= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6600);
        }
        if (*(_DWORD *)(v3 + 120) == 2)
        {
          if (v4 <= 8)
          {
            __break(0xC471u);
            JUMPOUT(0x1825C6720);
          }
          if (*(_DWORD *)(v3 + 216) == 2)
          {
            if (v4 <= 0xC)
            {
              __break(0xC471u);
              JUMPOUT(0x1825C67E0);
            }
            if (*(_DWORD *)(v3 + 312) == 2
              && *(_DWORD *)(v3 + 48) == 2
              && *(_DWORD *)(v3 + 144) == 2
              && *(_DWORD *)(v3 + 240) == 2)
            {
              if (v4 <= 0xD)
              {
                __break(0xC471u);
                JUMPOUT(0x1825C68A0);
              }
              if (*(_DWORD *)(v3 + 336) == 2
                && *(_DWORD *)(v3 + 72) == 2
                && *(_DWORD *)(v3 + 168) == 2
                && *(_DWORD *)(v3 + 264) == 2)
              {
                if (v4 <= 0xE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1825C6940);
                }
                if (*(_DWORD *)(v3 + 360) == 2
                  && *(_DWORD *)(v3 + 96) == 2
                  && *(_DWORD *)(v3 + 192) == 2
                  && *(_DWORD *)(v3 + 288) == 2)
                {
                  if (v4 <= 0xF)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1825C69A0);
                  }
                  if (*(_DWORD *)(v3 + 384) == 2)
                  {
                    v34 = *(double *)(v3 + 32);
                    v35 = *(double *)(v3 + 128);
                    v36 = *(double *)(v3 + 224);
                    v37 = *(double *)(v3 + 320);
                    v38 = *(double *)(v3 + 56);
                    v39 = *(double *)(v3 + 152);
                    v40 = *(double *)(v3 + 248);
                    v41 = *(double *)(v3 + 344);
                    v42 = *(double *)(v3 + 80);
                    v43 = *(double *)(v3 + 176);
                    v44 = *(double *)(v3 + 272);
                    v45 = *(double *)(v3 + 368);
                    v46 = -(v37 * v40);
                    v47 = -(v36 * v39);
                    _D0 = *(double *)(v3 + 8)
                        * (v36 * v41 * v43
                         + v35 * v40 * v45
                         + v37 * v39 * v44
                         + v46 * v43
                         + v47 * v45
                         + -(v35 * v41) * v44)
                        - (v36 * v41 * v42
                         + v34 * v40 * v45
                         + v37 * v38 * v44
                         + v46 * v42
                         + -(v36 * v38) * v45
                         + -(v34 * v41) * v44)
                        * *(double *)(v3 + 104)
                        + *(double *)(v3 + 200)
                        * (v35 * v41 * v42
                         + v34 * v39 * v45
                         + v37 * v38 * v43
                         + -(v37 * v39) * v42
                         + -(v35 * v38) * v45
                         + -(v34 * v41) * v43)
                        - *(double *)(v3 + 296)
                        * (v35 * v40 * v42
                         + v34 * v39 * v44
                         + v36 * v38 * v43
                         + v47 * v42
                         + -(v35 * v38) * v44
                         + -(v34 * v40) * v43);
                    *(double *)(a2 + 8) = _D0;
                    *(_DWORD *)(a2 + 24) = 2;
                    *(_DWORD *)(a2 + 32) = 0;
                    return LOWORD(_D0);
                  }
                }
              }
            }
          }
        }
        break;
      case 3:
        if (v4 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6620);
        }
        if (*(_DWORD *)(v3 + 96) == 2)
        {
          if (v4 <= 6)
          {
            __break(0xC471u);
            JUMPOUT(0x1825C6740);
          }
          if (*(_DWORD *)(v3 + 168) == 2 && *(_DWORD *)(v3 + 48) == 2 && *(_DWORD *)(v3 + 120) == 2)
          {
            if (v4 <= 7)
            {
              __break(0xC471u);
              JUMPOUT(0x1825C6800);
            }
            if (*(_DWORD *)(v3 + 192) == 2 && *(_DWORD *)(v3 + 72) == 2 && *(_DWORD *)(v3 + 144) == 2)
            {
              if (v4 <= 8)
              {
                __break(0xC471u);
                JUMPOUT(0x1825C68C0);
              }
              if (*(_DWORD *)(v3 + 216) == 2)
              {
                _D0 = *(double *)(v3 + 80) * *(double *)(v3 + 176) * *(double *)(v3 + 56)
                    + *(double *)(v3 + 8) * *(double *)(v3 + 104) * *(double *)(v3 + 200)
                    + *(double *)(v3 + 152) * *(double *)(v3 + 32) * *(double *)(v3 + 128)
                    + -(*(double *)(v3 + 152) * *(double *)(v3 + 104)) * *(double *)(v3 + 56)
                    + -(*(double *)(v3 + 80) * *(double *)(v3 + 32)) * *(double *)(v3 + 200)
                    + -(*(double *)(v3 + 8) * *(double *)(v3 + 176)) * *(double *)(v3 + 128);
                *(double *)(a2 + 8) = _D0;
                *(_DWORD *)(a2 + 24) = 2;
                *(_DWORD *)(a2 + 32) = 0;
                return LOWORD(_D0);
              }
            }
          }
        }
        break;
      case 2:
        if (v4 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6580);
        }
        if (*(_DWORD *)(v3 + 72) == 2 && *(_DWORD *)(v3 + 48) == 2)
        {
          if (v4 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1825C66A0);
          }
          if (*(_DWORD *)(v3 + 96) == 2)
          {
            _D0 = *(double *)(v3 + 8) * *(double *)(v3 + 80) - *(double *)(v3 + 56) * *(double *)(v3 + 32);
            *(double *)(a2 + 8) = _D0;
            *(_DWORD *)(a2 + 24) = 2;
            *(_DWORD *)(a2 + 32) = 0;
            return LOWORD(_D0);
          }
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1825C6A24);
    }
    goto LABEL_178;
  }
  if (v6 == 1)
  {
    switch(v5)
    {
      case 4:
        if (v4 <= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6640);
        }
        if (*(_DWORD *)(v3 + 120) != 1)
          goto LABEL_178;
        if (v4 <= 8)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6760);
        }
        if (*(_DWORD *)(v3 + 216) != 1)
          goto LABEL_178;
        if (v4 <= 0xC)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6820);
        }
        if (*(_DWORD *)(v3 + 312) != 1
          || *(_DWORD *)(v3 + 48) != 1
          || *(_DWORD *)(v3 + 144) != 1
          || *(_DWORD *)(v3 + 240) != 1)
        {
          goto LABEL_178;
        }
        if (v4 <= 0xD)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C68E0);
        }
        if (*(_DWORD *)(v3 + 336) != 1
          || *(_DWORD *)(v3 + 72) != 1
          || *(_DWORD *)(v3 + 168) != 1
          || *(_DWORD *)(v3 + 264) != 1)
        {
          goto LABEL_178;
        }
        if (v4 <= 0xE)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6960);
        }
        if (*(_DWORD *)(v3 + 360) != 1
          || *(_DWORD *)(v3 + 96) != 1
          || *(_DWORD *)(v3 + 192) != 1
          || *(_DWORD *)(v3 + 288) != 1)
        {
          goto LABEL_178;
        }
        if (v4 <= 0xF)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C69C0);
        }
        if (*(_DWORD *)(v3 + 384) != 1)
          goto LABEL_178;
        _H1 = *(_WORD *)(v3 + 8);
        _H2 = *(_WORD *)(v3 + 104);
        _H3 = *(_WORD *)(v3 + 200);
        _H0 = *(_WORD *)(v3 + 296);
        _H4 = *(_WORD *)(v3 + 32);
        _H5 = *(_WORD *)(v3 + 128);
        _H6 = *(_WORD *)(v3 + 224);
        _H7 = *(_WORD *)(v3 + 320);
        _H16 = *(_WORD *)(v3 + 56);
        _H17 = *(_WORD *)(v3 + 152);
        _H18 = *(_WORD *)(v3 + 248);
        _H19 = *(_WORD *)(v3 + 344);
        _H20 = *(_WORD *)(v3 + 80);
        _H21 = *(_WORD *)(v3 + 176);
        _H22 = *(_WORD *)(v3 + 272);
        _H23 = *(_WORD *)(v3 + 368);
        __asm
        {
          FCVT            S1, H1
          FCVT            S5, H5
          FCVT            S18, H18
        }
        v67 = _S5 * _S18;
        __asm
        {
          FCVT            S23, H23
          FCVT            S6, H6
          FCVT            S19, H19
          FCVT            S21, H21
          FCVT            S7, H7
          FCVT            S17, H17
          FCVT            S22, H22
        }
        v75 = -(float)(_S7 * _S18);
        v76 = -(float)(_S6 * _S17);
        _S26 = (float)((float)((float)((float)((float)((float)(_S6 * _S19) * _S21) + (float)((float)(_S5 * _S18) * _S23))
                                     + (float)((float)(_S7 * _S17) * _S22))
                             + (float)(v75 * _S21))
                     + (float)(v76 * _S23))
             + (float)((float)-(float)(_S5 * _S19) * _S22);
        __asm
        {
          FCVT            H26, S26
          FCVT            S26, H26
          FCVT            S2, H2
          FCVT            S4, H4
          FCVT            S20, H20
          FCVT            S16, H16
        }
        v83 = (float)((float)((float)((float)((float)(_S6 * _S19) * _S20) + (float)((float)(_S4 * _S18) * _S23))
                            + (float)((float)(_S7 * _S16) * _S22))
                    + (float)(v75 * _S20))
            + (float)((float)-(float)(_S6 * _S16) * _S23);
        v84 = -(float)(_S4 * _S19);
        _S25 = v83 + (float)(v84 * _S22);
        __asm
        {
          FCVT            H25, S25
          FCVT            S25, H25
        }
        v87 = (float)(_S1 * _S26) - (float)(_S2 * _S25);
        __asm { FCVT            S2, H3 }
        v89 = (float)((float)((float)(_S5 * _S19) * _S20) + (float)((float)(_S4 * _S17) * _S23))
            + (float)((float)(_S7 * _S16) * _S21);
        v90 = -(float)(_S5 * _S16);
        _S7 = (float)((float)(v89 + (float)((float)-(float)(_S7 * _S17) * _S20)) + (float)(v90 * _S23))
            + (float)(v84 * _S21);
        __asm
        {
          FCVT            H7, S7
          FCVT            S7, H7
        }
        v93 = v87 + (float)(_S2 * _S7);
        __asm { FCVT            S0, H0 }
        _S2 = (float)((float)((float)((float)((float)(v67 * _S20) + (float)((float)(_S4 * _S17) * _S22))
                                    + (float)((float)(_S6 * _S16) * _S21))
                            + (float)(v76 * _S20))
                    + (float)(v90 * _S22))
            + (float)((float)-(float)(_S4 * _S18) * _S21);
        __asm
        {
          FCVT            H2, S2
          FCVT            S2, H2
        }
        *(float *)&_D0 = v93 - (float)(_S0 * _S2);
        goto LABEL_139;
      case 3:
        if (v4 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6660);
        }
        if (*(_DWORD *)(v3 + 96) != 1)
          goto LABEL_178;
        if (v4 <= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6780);
        }
        if (*(_DWORD *)(v3 + 168) != 1 || *(_DWORD *)(v3 + 48) != 1 || *(_DWORD *)(v3 + 120) != 1)
          goto LABEL_178;
        if (v4 <= 7)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6840);
        }
        if (*(_DWORD *)(v3 + 192) != 1 || *(_DWORD *)(v3 + 72) != 1 || *(_DWORD *)(v3 + 144) != 1)
          goto LABEL_178;
        if (v4 <= 8)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C6900);
        }
        if (*(_DWORD *)(v3 + 216) != 1)
          goto LABEL_178;
        _H0 = *(_WORD *)(v3 + 8);
        _H1 = *(_WORD *)(v3 + 80);
        _H2 = *(_WORD *)(v3 + 152);
        _H3 = *(_WORD *)(v3 + 32);
        _H4 = *(_WORD *)(v3 + 104);
        _H5 = *(_WORD *)(v3 + 176);
        _H6 = *(_WORD *)(v3 + 56);
        _H7 = *(_WORD *)(v3 + 128);
        _H16 = *(_WORD *)(v3 + 200);
        __asm
        {
          FCVT            S0, H0
          FCVT            S4, H4
          FCVT            S16, H16
          FCVT            S1, H1
          FCVT            S5, H5
          FCVT            S6, H6
          FCVT            S2, H2
          FCVT            S3, H3
          FCVT            S7, H7
        }
        *(float *)&_D0 = (float)((float)((float)((float)((float)((float)(_S1 * _S5) * _S6)
                                                       + (float)((float)(_S0 * _S4) * _S16))
                                               + (float)((float)(_S2 * _S3) * _S7))
                                       + (float)((float)-(float)(_S2 * _S4) * _S6))
                               + (float)((float)-(float)(_S1 * _S3) * _S16))
                       + (float)((float)-(float)(_S0 * _S5) * _S7);
        goto LABEL_139;
      case 2:
        if (v4 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C65A0);
        }
        if (*(_DWORD *)(v3 + 72) != 1 || *(_DWORD *)(v3 + 48) != 1)
          goto LABEL_178;
        if (v4 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C66C0);
        }
        if (*(_DWORD *)(v3 + 96) != 1)
          goto LABEL_178;
        _H0 = *(_WORD *)(v3 + 8);
        _H1 = *(_WORD *)(v3 + 56);
        _H2 = *(_WORD *)(v3 + 32);
        _H3 = *(_WORD *)(v3 + 80);
        __asm
        {
          FCVT            S0, H0
          FCVT            S3, H3
          FCVT            S1, H1
          FCVT            S2, H2
        }
        *(float *)&_D0 = (float)(_S0 * _S3) - (float)(_S1 * _S2);
LABEL_139:
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        return LOWORD(_D0);
    }
LABEL_182:
    __break(0xC471u);
    JUMPOUT(0x1825C6520);
  }
  if (v6)
  {
LABEL_179:
    __break(0xC471u);
    JUMPOUT(0x1825C69E4);
  }
  if (v5 == 4)
  {
    if (v4 <= 4)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C65C0);
    }
    if (!*(_DWORD *)(v3 + 120))
    {
      if (v4 <= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1825C66E0);
      }
      if (!*(_DWORD *)(v3 + 216))
      {
        if (v4 <= 0xC)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C67A0);
        }
        if (!*(_DWORD *)(v3 + 312) && !*(_DWORD *)(v3 + 48) && !*(_DWORD *)(v3 + 144) && !*(_DWORD *)(v3 + 240))
        {
          if (v4 <= 0xD)
          {
            __break(0xC471u);
            JUMPOUT(0x1825C6860);
          }
          if (!*(_DWORD *)(v3 + 336) && !*(_DWORD *)(v3 + 72) && !*(_DWORD *)(v3 + 168) && !*(_DWORD *)(v3 + 264))
          {
            if (v4 <= 0xE)
            {
              __break(0xC471u);
              JUMPOUT(0x1825C6920);
            }
            if (!*(_DWORD *)(v3 + 360) && !*(_DWORD *)(v3 + 96) && !*(_DWORD *)(v3 + 192) && !*(_DWORD *)(v3 + 288))
            {
              if (v4 <= 0xF)
              {
                __break(0xC471u);
                JUMPOUT(0x1825C6980);
              }
              if (!*(_DWORD *)(v3 + 384))
              {
                v20 = *(float *)(v3 + 32);
                v21 = *(float *)(v3 + 128);
                v22 = *(float *)(v3 + 224);
                v23 = *(float *)(v3 + 320);
                v24 = *(float *)(v3 + 56);
                v25 = *(float *)(v3 + 152);
                v26 = *(float *)(v3 + 248);
                v27 = *(float *)(v3 + 344);
                v28 = *(float *)(v3 + 80);
                v29 = *(float *)(v3 + 176);
                v30 = *(float *)(v3 + 272);
                v31 = *(float *)(v3 + 368);
                v32 = -(float)(v23 * v26);
                v33 = -(float)(v22 * v25);
                *(float *)&_D0 = (float)((float)((float)(*(float *)(v3 + 8)
                                                       * (float)((float)((float)((float)((float)((float)((float)(v22 * v27) * v29)
                                                                                               + (float)((float)(v21 * v26) * v31))
                                                                                       + (float)((float)(v23 * v25) * v30))
                                                                               + (float)(v32 * v29))
                                                                       + (float)(v33 * v31))
                                                               + (float)((float)-(float)(v21 * v27) * v30)))
                                               - (float)((float)((float)((float)((float)((float)((float)((float)(v22 * v27) * v28)
                                                                                               + (float)((float)(v20 * v26) * v31))
                                                                                       + (float)((float)(v23 * v24) * v30))
                                                                               + (float)(v32 * v28))
                                                                       + (float)((float)-(float)(v22 * v24) * v31))
                                                               + (float)((float)-(float)(v20 * v27) * v30))
                                                       * *(float *)(v3 + 104)))
                                       + (float)(*(float *)(v3 + 200)
                                               * (float)((float)((float)((float)((float)((float)((float)(v21 * v27) * v28)
                                                                                       + (float)((float)(v20 * v25) * v31))
                                                                               + (float)((float)(v23 * v24) * v29))
                                                                       + (float)((float)-(float)(v23 * v25) * v28))
                                                               + (float)((float)-(float)(v21 * v24) * v31))
                                                       + (float)((float)-(float)(v20 * v27) * v29))))
                               - (float)(*(float *)(v3 + 296)
                                       * (float)((float)((float)((float)((float)((float)((float)(v21 * v26) * v28)
                                                                               + (float)((float)(v20 * v25) * v30))
                                                                       + (float)((float)(v22 * v24) * v29))
                                                               + (float)(v33 * v28))
                                                       + (float)((float)-(float)(v21 * v24) * v30))
                                               + (float)((float)-(float)(v20 * v26) * v29)));
                *(_DWORD *)(a2 + 8) = LODWORD(_D0);
                *(_DWORD *)(a2 + 24) = 0;
                *(_DWORD *)(a2 + 32) = 0;
                return LOWORD(_D0);
              }
            }
          }
        }
      }
    }
    goto LABEL_178;
  }
  if (v5 == 3)
  {
    if (v4 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C65E0);
    }
    if (!*(_DWORD *)(v3 + 96))
    {
      if (v4 <= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1825C6700);
      }
      if (!*(_DWORD *)(v3 + 168) && !*(_DWORD *)(v3 + 48) && !*(_DWORD *)(v3 + 120))
      {
        if (v4 <= 7)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C67C0);
        }
        if (!*(_DWORD *)(v3 + 192) && !*(_DWORD *)(v3 + 72) && !*(_DWORD *)(v3 + 144))
        {
          if (v4 <= 8)
          {
            __break(0xC471u);
            JUMPOUT(0x1825C6880);
          }
          if (!*(_DWORD *)(v3 + 216))
          {
            *(float *)&_D0 = (float)((float)((float)((float)((float)((float)(*(float *)(v3 + 80) * *(float *)(v3 + 176))
                                                                   * *(float *)(v3 + 56))
                                                           + (float)((float)(*(float *)(v3 + 8) * *(float *)(v3 + 104))
                                                                   * *(float *)(v3 + 200)))
                                                   + (float)((float)(*(float *)(v3 + 152) * *(float *)(v3 + 32))
                                                           * *(float *)(v3 + 128)))
                                           + (float)((float)-(float)(*(float *)(v3 + 152) * *(float *)(v3 + 104))
                                                   * *(float *)(v3 + 56)))
                                   + (float)((float)-(float)(*(float *)(v3 + 80) * *(float *)(v3 + 32))
                                           * *(float *)(v3 + 200)))
                           + (float)((float)-(float)(*(float *)(v3 + 8) * *(float *)(v3 + 176)) * *(float *)(v3 + 128));
            *(_DWORD *)(a2 + 8) = LODWORD(_D0);
            *(_DWORD *)(a2 + 24) = 0;
            *(_DWORD *)(a2 + 32) = 0;
            return LOWORD(_D0);
          }
        }
      }
    }
    goto LABEL_178;
  }
  if (v5 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C6A04);
  }
  if (v4 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C6560);
  }
  if (*(_DWORD *)(v3 + 72) || *(_DWORD *)(v3 + 48))
    goto LABEL_178;
  if (v4 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C6680);
  }
  if (*(_DWORD *)(v3 + 96))
  {
LABEL_178:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_179;
  }
  *(float *)&_D0 = (float)(*(float *)(v3 + 8) * *(float *)(v3 + 80))
                 - (float)(*(float *)(v3 + 56) * *(float *)(v3 + 32));
  *(_DWORD *)(a2 + 8) = LODWORD(_D0);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  return LOWORD(_D0);
}

_QWORD *WGSL::constantDistance@<X0>(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *result;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  int v20;
  uint64_t v21;
  _BYTE v22[16];
  int v23;
  _BYTE v24[8];
  _QWORD v25[2];
  unsigned int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  WGSL::constantMinus(0, a2, (uint64_t)v24);
  if (v27)
  {
    if (v27 != 1)
    {
      v16 = std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::constantDot(v16, v17);
    }
    v5 = v25[0];
    if (v25[0])
      *(_DWORD *)v25[0] += 2;
    *(_QWORD *)(a3 + 8) = v5;
    v6 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    return (_QWORD *)((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v6])(v19, v25);
  }
  v19[0] = 0;
  v20 = -1;
  v7 = v26;
  if (v26 == -1)
  {
    v22[0] = 0;
    v23 = -1;
  }
  else
  {
    ((void (*)(_BYTE *, _BYTE *, _QWORD *))off_1E0FD7D20[v26])(v22, v19, v25);
    v20 = v7;
    v22[0] = 0;
    v23 = -1;
    ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E0FD8010[v7])(&v21, v22, v19);
    v23 = v7;
  }
  v8 = WTF::fastMalloc((WTF *)0x20);
  v9 = (WTF *)v8;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v18 = v8;
  if (v23 == -1)
  {
    *(_DWORD *)(v8 + 24) = -1;
  }
  else
  {
    v21 = v8 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v23])(&v21);
  }
  WGSL::constantLength(a1, &v18, a3);
  v11 = *(unsigned int *)v9;
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    v13 = (_DWORD *)((char *)v9 + 24);
    do
    {
      v10 = v13 - 4;
      v14 = *v13;
      if ((_DWORD)v14 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v14])(&v21, v10);
      *v13 = -1;
      v13 += 6;
      v12 -= 24;
    }
    while (v12);
  }
  result = (_QWORD *)WTF::fastFree(v9, v10);
  if (v23 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v23])(&v21, v22);
  if (v20 != -1)
    result = (_QWORD *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v20])(v22, v19);
  v6 = v27;
  if (v27 != -1)
    return (_QWORD *)((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v6])(v19, v25);
  return result;
}

_QWORD *WGSL::constantDot@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  _QWORD v27[2];
  int v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  _BYTE v34[16];
  unsigned int v35;
  char v36[8];
  _QWORD v37[2];
  int v38;
  int v39;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  WGSL::constantMultiply(&v40);
  if (v43)
  {
    if (v43 == 1)
    {
      v4 = v41[0];
      if (v41[0])
        *(_DWORD *)v41[0] += 2;
      *(_QWORD *)(a2 + 8) = v4;
      v5 = 1;
      *(_DWORD *)(a2 + 32) = 1;
      return (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v5])(v32, v41);
    }
LABEL_66:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v29[0]) = 0;
  v30 = -1;
  v6 = v42;
  if (v42 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))off_1E0FD7D20[v42])(v32, v29, v41);
    v30 = v6;
  }
  v7 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v7 == -1)
    goto LABEL_66;
  v32[0] = v36;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))off_1E0FD8068[v7])(v27, v32, a1);
  if (v30 != 8)
    goto LABEL_66;
  if (v29[0])
    v9 = v29[0] + 8;
  else
    v9 = 0;
  if (v29[0])
  {
    v10 = v29[0] + 8 + 24 * *(unsigned int *)v29[0];
    if (v9 != v10)
      goto LABEL_17;
    goto LABEL_55;
  }
  v10 = 0;
  if (v9)
  {
    do
    {
LABEL_17:
      LOBYTE(v32[0]) = 0;
      v33 = -1;
      v11 = v28;
      if (v28 != -1)
      {
        ((void (*)(uint64_t *, _QWORD *, _QWORD *))off_1E0FD8010[v28])(&v31, v32, v27);
        v33 = v11;
      }
      v34[0] = 0;
      v35 = -1;
      v12 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v12 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E0FD8010[v12])(&v31, v34, v9);
        v35 = v12;
      }
      v13 = WTF::fastMalloc((WTF *)0x38);
      v14 = (unsigned int *)v13;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_DWORD *)v13 = 2;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      v26 = (unsigned int *)v13;
      if (v33 == -1)
      {
        *(_DWORD *)(v13 + 24) = -1;
        v16 = (unsigned int *)(v13 + 32);
        v17 = v35;
        if (v35 == -1)
        {
          v15 = 0;
LABEL_29:
          ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v15])(&v31, v16);
          v14[12] = -1;
LABEL_30:
          WGSL::constantAdd(a1, &v26, (uint64_t)v36);
          v19 = *v14;
          if (!(_DWORD)v19)
            goto LABEL_37;
          goto LABEL_33;
        }
      }
      else
      {
        v31 = v13 + 8;
        ((void (*)(uint64_t *))off_1E0FD80E0[v33])(&v31);
        if (*v14 < 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1825C716CLL);
        }
        v15 = v14[12];
        v16 = v14 + 8;
        v17 = v35;
        if ((_DWORD)v15 == -1)
        {
          if (v35 == 0xFFFFFFFFLL)
            goto LABEL_30;
        }
        else if (v35 == 0xFFFFFFFFLL)
        {
          goto LABEL_29;
        }
      }
      v31 = (uint64_t)v16;
      ((void (*)(uint64_t *))off_1E0FD80E0[v17])(&v31);
      WGSL::constantAdd(a1, &v26, (uint64_t)v36);
      v19 = *v14;
      if (!(_DWORD)v19)
        goto LABEL_37;
LABEL_33:
      v20 = 24 * v19;
      v21 = v14 + 6;
      do
      {
        v18 = v21 - 4;
        v22 = *v21;
        if ((_DWORD)v22 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v22])(&v31, v18);
        *v21 = -1;
        v21 += 6;
        v20 -= 24;
      }
      while (v20);
LABEL_37:
      result = (_QWORD *)WTF::fastFree((WTF *)v14, v18);
      if (v35 != -1)
        result = (_QWORD *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v35])(&v31, v34);
      v35 = -1;
      if (v33 != -1)
        result = (_QWORD *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v33])(&v31, v32);
      v23 = v39;
      if (v39)
      {
        if (v39 != 1)
          goto LABEL_66;
        v24 = v37[0];
        if (v37[0])
          *(_DWORD *)v37[0] += 2;
        *(_QWORD *)(a2 + 8) = v24;
        *(_DWORD *)(a2 + 32) = 1;
      }
      else
      {
        if (v28 == -1)
        {
          if (v38 == -1)
            goto LABEL_51;
        }
        else if (v38 == -1)
        {
          result = (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v28])(v32, v27);
          v28 = -1;
          goto LABEL_51;
        }
        v32[0] = v27;
        result = (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))off_1E0FD8188[v38])(v32, v27, v37);
      }
LABEL_51:
      if (v39 != -1)
        result = (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v39])(v32, v37);
      if (v23)
        goto LABEL_58;
      v9 += 24;
    }
    while (v9 != v10);
  }
LABEL_55:
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = -1;
  v25 = v28;
  if (v28 != -1)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD *))off_1E0FD8010[v28])(v32);
    *(_DWORD *)(a2 + 24) = v25;
  }
  *(_DWORD *)(a2 + 32) = 0;
LABEL_58:
  if (v28 != -1)
    result = (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v28])(v32, v27);
  if (v30 != -1)
    result = (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v30])(v32, v29);
  v5 = v43;
  if (v43 != -1)
    return (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v5])(v32, v41);
  return result;
}

