void sub_182478954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void WebGPU::Device::createShaderModule(int32x2_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD **v15;
  _DWORD *v16;
  const char *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 *v21;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WGSL::Reflection::EntryPointInformation *v28;
  _DWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  const char *v44;
  int32x2_t v45;
  int32x2_t v46;
  const char *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD **v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  const WTF::StringImpl **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  _BYTE *v87;
  int v88;
  int v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  const WTF::StringImpl *v93;
  uint64_t v94;
  unsigned __int8 *v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  _QWORD *v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  const WTF::StringImpl **v134;
  WTF::StringImpl *v135;
  unsigned int v136;
  unsigned int v137;
  _DWORD *v138;
  WTF **v139;
  int i;
  unsigned int v141;
  WTF **v142;
  WTF *v143;
  const WTF::StringImpl *v144;
  WTF *v145;
  WTF *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned __int8 *v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  unsigned int v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t k;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  const WTF::StringImpl *v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  unsigned __int8 *v193;
  __int16 v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  int v199;
  WTF::StringImpl *v200;
  unsigned int v201;
  unsigned int v202;
  WTF **v203;
  int j;
  unsigned int v205;
  WTF **v206;
  WTF *v207;
  const WTF::StringImpl *v208;
  uint64_t v209;
  WTF *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int v217;
  _DWORD *v218;
  _DWORD *v219;
  _DWORD *v220;
  const WTF::StringImpl *v221;
  _DWORD *v222;
  _DWORD *v223;
  _DWORD *v224;
  const WTF::StringImpl *v225;
  uint64_t *v226;
  uint64_t *v227;
  char v228;
  char v229;
  char v230;
  _QWORD *v231;
  uint64_t *v232;
  uint64_t v233;
  _DWORD v234[4];
  unsigned int v235;
  unsigned int v236;
  _DWORD **v237;
  uint64_t v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  _DWORD *v247;
  int v248;
  __int128 v249;
  _DWORD **v250;
  int v251;
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  if (!*a2 || !*(_QWORD *)&a1[1])
    goto LABEL_18;
  v5 = 0;
  while (1)
  {
    a2 = (uint64_t *)*a2;
    if (!a2)
      break;
    if (!v5)
    {
      v5 = a2;
      if (*((_DWORD *)a2 + 2) == 6)
        continue;
    }
    goto LABEL_18;
  }
  if (!v5)
  {
LABEL_18:
    v251 = 2;
    v9 = WTF::fastMalloc((WTF *)0xA8);
    WebGPU::ShaderModule::ShaderModule(v9, (unsigned __int8 **)a1, (uint64_t)&v249);
    *a3 = v9;
    if (v251 != -1)
      ((void (*)(const char **, __int128 *))off_1E0FD2130[v251])(&v239, &v249);
    return;
  }
  v237 = 0;
  v238 = 0;
  v6 = (_DWORD *)a1[27];
  v7 = a1[28].u32[1];
  if ((_DWORD)v7)
  {
    v8 = 4 * v7;
    do
    {
      switch(*v6)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v239 = (const char *)v249;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)&v249, (uint64_t *)&v237, (const WTF::StringImpl **)&v239);
          if (v239)
          {
            if (*(_DWORD *)v239 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v239 -= 2;
          }
          break;
        default:
          break;
      }
      ++v6;
      v8 -= 4;
    }
    while (v8);
  }
  if (v5[2])
    strlen((const char *)v5[2]);
  WTF::String::fromUTF8();
  LOWORD(v247) = 0;
  *(int32x2_t *)&v10 = vrev64_s32(a1[11]);
  DWORD2(v10) = DWORD1(v10);
  HIDWORD(v10) = a1[24].i32[0];
  v249 = v10;
  v11 = (uint64_t)v237;
  v237 = 0;
  v250 = (_DWORD **)v11;
  WGSL::staticCheck((_DWORD **)&v239, (uint64_t)&v249, (uint64_t)&v233);
  v13 = v250;
  if (v250)
  {
    v14 = *((unsigned int *)v250 - 1);
    if ((_DWORD)v14)
    {
      v15 = v250;
      do
      {
        v16 = *v15;
        if (*v15 != (_DWORD *)-1)
        {
          *v15 = 0;
          if (v16)
          {
            if (*v16 == 2)
              WTF::StringImpl::destroy();
            else
              *v16 -= 2;
          }
        }
        ++v15;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 2), v12);
  }
  v17 = v239;
  v239 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy();
      v18 = v236;
      if (v236 != 1)
        goto LABEL_37;
LABEL_42:
      WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v249);
      WTF::String::number((WTF::String *)v234[0]);
      v239 = " generated while compiling the shader:";
      v240 = 39;
      (*(void (**)(__int128 *))(v249 + 32))(&v249);
      WTF::printInternal();
      WTF::printInternal();
      WTF::printInternal();
      WTF::ASCIILiteral::dump();
      (*(void (**)(__int128 *))(v249 + 40))(&v249);
      v23 = v247;
      v247 = 0;
      if (v23)
      {
        if (*v23 == 2)
        {
          WTF::StringImpl::destroy();
          v24 = v234[0];
          if (!v234[0])
          {
LABEL_72:
            WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v249);
            v39 = a1[4];
            v40 = 32 * a1[5].u32[1];
            v41 = *(_QWORD *)&v39 + v40;
            while (v40)
            {
              v42 = *(_DWORD *)(v41 - 8);
              v41 -= 32;
              v40 -= 32;
              if (!v42)
              {
                v43 = *(_QWORD *)&v39 + v40;
                if (!*(_BYTE *)(v43 + 16))
                {
                  v44 = v239;
                  v239 = 0;
                  *(_DWORD *)v43 = 1;
                  *(_QWORD *)(v43 + 8) = v44;
                  *(_BYTE *)(v43 + 16) = 1;
                }
                goto LABEL_80;
              }
            }
            v45 = a1[3];
            if (v45)
            {
              (*(void (**)(int32x2_t, uint64_t, const char **))(**(_QWORD **)&v45 + 16))(v45, 1, &v239);
              v46 = a1[3];
              a1[3] = 0;
              if (v46)
                (*(void (**)(int32x2_t))(**(_QWORD **)&v46 + 8))(v46);
            }
LABEL_80:
            v47 = v239;
            v239 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
              {
                WTF::StringImpl::destroy();
                v48 = v234[0];
                v239 = 0;
                LODWORD(v240) = 0;
                HIDWORD(v240) = v234[0];
                if (!v234[0])
                  goto LABEL_92;
LABEL_86:
                if (v48 >= 0xAAAAAAB)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18247A4A8);
                }
                v49 = 24 * v48;
                v50 = WTF::fastMalloc((WTF *)(24 * v48));
                LODWORD(v240) = v49 / 0x18;
                v239 = (const char *)v50;
                if (v234[0])
                {
                  v51 = v233;
                  v52 = v233 + 24 * v234[0];
                  do
                  {
                    v53 = *(_DWORD **)v51;
                    if (*(_QWORD *)v51)
                      *v53 += 2;
                    *(_QWORD *)v50 = v53;
                    *(_OWORD *)(v50 + 8) = *(_OWORD *)(v51 + 8);
                    v51 += 24;
                    v50 += 24;
                  }
                  while (v51 != v52);
                }
LABEL_92:
                v241 = 0;
                v242 = 0;
                v243 = v235;
                if (v235)
                {
                  if (v235 >= 0xAAAAAAB)
                    goto LABEL_437;
                  v54 = 24 * v235;
                  v55 = WTF::fastMalloc((WTF *)(24 * v235));
                  v242 = v54 / 0x18;
                  v241 = v55;
                  if (v235)
                  {
                    v56 = *(_QWORD *)&v234[1];
                    v57 = *(_QWORD *)&v234[1] + 24 * v235;
                    do
                    {
                      v58 = *(_DWORD **)v56;
                      if (*(_QWORD *)v56)
                        *v58 += 2;
                      *(_QWORD *)v55 = v58;
                      *(_OWORD *)(v55 + 8) = *(_OWORD *)(v56 + 8);
                      v56 += 24;
                      v55 += 24;
                    }
                    while (v56 != v57);
                  }
                }
                v244 = 1;
                v59 = WTF::fastMalloc((WTF *)0xA8);
                WebGPU::ShaderModule::ShaderModule(v59, (unsigned __int8 **)a1, (uint64_t)&v239);
                *a3 = v59;
                if (v244 != -1)
                  ((void (*)(_DWORD **, const char **))off_1E0FD2130[v244])(&v247, &v239);
                WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v249);
                v31 = v236;
                if (v236 == -1)
                  goto LABEL_103;
LABEL_102:
                ((void (*)(__int128 *, uint64_t *))off_1E0FD2148[v31])(&v249, &v233);
                goto LABEL_103;
              }
              *(_DWORD *)v47 -= 2;
            }
            v48 = v234[0];
            v239 = 0;
            LODWORD(v240) = 0;
            HIDWORD(v240) = v234[0];
            if (!v234[0])
              goto LABEL_92;
            goto LABEL_86;
          }
LABEL_70:
          v36 = v233;
          v37 = 24 * v24;
          do
          {
            v239 = "\n";
            v240 = 2;
            v38 = (*(uint64_t (**)(__int128 *))(v249 + 32))(&v249);
            WTF::ASCIILiteral::dump();
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
            WTF::printInternal();
            WTF::printInternal();
            WTF::printInternal();
            WTF::printInternal();
            WTF::printInternal();
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
            (*(void (**)(__int128 *))(v249 + 40))(&v249);
            v36 += 24;
            v37 -= 24;
          }
          while (v37);
          goto LABEL_72;
        }
        *v23 -= 2;
      }
      v24 = v234[0];
      if (!v234[0])
        goto LABEL_72;
      goto LABEL_70;
    }
    *(_DWORD *)v17 -= 2;
  }
  v18 = v236;
  if (v236 == 1)
    goto LABEL_42;
LABEL_37:
  if (v18 || (v245 = 0, v246 = 0, v19 = WTF::fastMalloc((WTF *)0xA8), *(_DWORD *)v19 = 1, v236 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_437;
  }
  *(_QWORD *)&v249 = &v239;
  ((void (*)(__int128 *, uint64_t *))off_1E0FD2198[v236])(&v249, &v233);
  *(_QWORD *)(v19 + 48) = v246;
  v245 = 0;
  v246 = 0;
  *(_QWORD *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 64) = 0;
  v21 = (unsigned __int8 *)*a1;
  if (__ldaxr(*(unsigned __int8 **)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_49;
  }
  MEMORY[0x186DAB1AC](v21);
LABEL_49:
  ++*((_QWORD *)v21 + 1);
  v25 = __ldxr(v21);
  if (v25 == 1)
  {
    if (!__stlxr(0, v21))
      goto LABEL_54;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_54:
  *(_QWORD *)(v19 + 72) = a1;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  v232 = (uint64_t *)(v19 + 112);
  *(_QWORD *)(v19 + 152) = v238;
  *(_QWORD *)(v19 + 144) = 0;
  v238 = 0;
  *(_QWORD *)(v19 + 160) = 0;
  if (!*(_DWORD *)(v19 + 40))
  {
    v32 = *(_QWORD *)(v19 + 24);
    v33 = *(unsigned int *)(v32 + 76);
    if ((_DWORD)v33)
    {
      v226 = a3;
      v227 = (uint64_t *)(v19 + 88);
      v34 = *(_QWORD **)(v32 + 64);
      v35 = &v34[v33];
      v229 = 1;
      v230 = 1;
      v228 = 1;
      v231 = v35;
      while (1)
      {
        v69 = *v34;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v34 + 16))(*v34) != 27
          || *(unsigned __int16 *)(v69 + 121) < 0x100u)
        {
          goto LABEL_129;
        }
        v71 = *(_WORD *)(v69 + 121);
        if (v71 != 4)
          break;
        if ((v230 & 1) == 0 || (v90 = *(_DWORD **)(v19 + 136)) != 0 && v90[1])
        {
          v91 = (_DWORD *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *v91 += 2;
          v92 = *(_DWORD **)(v19 + 136);
          *(_QWORD *)(v19 + 136) = v91;
          if (v92)
          {
            if (*v92 != 2)
            {
              v230 = 0;
              *v92 -= 2;
              goto LABEL_129;
            }
            WTF::StringImpl::destroy();
          }
          v230 = 0;
        }
        else
        {
          v138 = *(_DWORD **)(v69 + 48);
          if (v138)
            *v138 += 2;
          *(_QWORD *)(v19 + 136) = v138;
          if (v90)
          {
            if (*v90 == 2)
              WTF::StringImpl::destroy();
            else
              *v90 -= 2;
          }
          v230 = 1;
        }
LABEL_129:
        if (++v34 == v35)
          goto LABEL_55;
      }
      if (v71 != 2)
      {
        if (v71 != 1)
          goto LABEL_129;
        v72 = *(uint64_t **)(v69 + 56);
        v73 = *(unsigned int *)(v69 + 68);
        *(_QWORD *)&v249 = 0;
        if ((_DWORD)v73)
        {
          v74 = &v72[v73];
          while (1)
          {
            v99 = *v72;
            if (*(_BYTE *)(*v72 + 24))
              goto LABEL_184;
            v100 = *(unsigned __int8 **)(*(_QWORD *)(v99 + 64) + 24);
            if (!v100)
              goto LABEL_184;
            if (*((_DWORD *)v100 + 12) != 4)
              break;
            v101 = *(unsigned int *)(*(_QWORD *)v100 + 84);
            if ((_DWORD)v101)
            {
              v102 = *(_QWORD *)(*(_QWORD *)v100 + 72);
              v103 = v102 + 8 * v101;
              while (2)
              {
                v105 = *(_QWORD *)(*(_QWORD *)v102 + 144);
                if ((v105 & 0xFF00000000) == 0)
                  goto LABEL_192;
                v106 = WebGPU::vertexFormatTypeForStructMember(*(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)v102 + 104)
                                                                                   + 24));
                v107 = v249;
                if ((_QWORD)v249
                  || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v249, 8u, 0), (v107 = v249) != 0))
                {
                  v108 = *(_DWORD *)(v107 - 8);
                }
                else
                {
                  v108 = 0;
                }
                v109 = 9 * ((~((_DWORD)v105 << 15) + v105) ^ ((~((_DWORD)v105 << 15) + v105) >> 10));
                v110 = (v109 ^ (v109 >> 6)) + ~((v109 ^ (v109 >> 6)) << 11);
                v111 = v108 & (v110 ^ HIWORD(v110));
                v70 = (_DWORD *)(v107 + 8 * v111);
                v112 = *v70;
                if (*v70 != -1)
                {
                  v113 = 0;
                  v114 = 1;
                  do
                  {
                    if (v112 == (_DWORD)v105)
                      goto LABEL_192;
                    if (v112 == -2)
                      v113 = v70;
                    v111 = (v111 + v114) & v108;
                    v70 = (_DWORD *)(v107 + 8 * v111);
                    v112 = *v70;
                    ++v114;
                  }
                  while (*v70 != -1);
                  if (v113)
                  {
                    *v113 = 0xFFFFFFFFLL;
                    --*(_DWORD *)(v249 - 16);
                    v70 = v113;
                  }
                }
                *v70 = v105;
                v70[1] = v106;
                if ((_QWORD)v249)
                {
                  ++*(_DWORD *)(v249 - 12);
                  v115 = v249;
                  if ((_QWORD)v249)
                  {
                    v116 = (*(_DWORD *)(v249 - 16) + *(_DWORD *)(v249 - 12));
                    v117 = *(unsigned int *)(v249 - 4);
                    if (v117 <= 0x400)
                      goto LABEL_208;
LABEL_213:
                    if (v117 > 2 * v116)
                      goto LABEL_192;
                    goto LABEL_190;
                  }
                }
                else
                {
                  MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                  v115 = 0;
                }
                v116 = *(unsigned int *)(v115 - 16);
                v117 = *(unsigned int *)(v115 - 4);
                if (v117 > 0x400)
                  goto LABEL_213;
LABEL_208:
                if (3 * v117 > 4 * v116)
                  goto LABEL_192;
                if ((_DWORD)v117)
LABEL_190:
                  v104 = (_DWORD)v117 << (6 * *(_DWORD *)(v115 - 12) >= (2 * v117));
                else
                  v104 = 8;
                WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v249, v104, v70);
LABEL_192:
                v102 += 8;
                if (v102 == v103)
                  break;
                continue;
              }
            }
LABEL_184:
            if (++v72 == v74)
              goto LABEL_241;
          }
          v118 = *(_QWORD *)(v99 + 96);
          if ((v118 & 0xFF00000000) == 0)
            goto LABEL_184;
          v119 = WebGPU::vertexFormatTypeForStructMember(v100);
          v120 = v249;
          if ((_QWORD)v249
            || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v249, 8u, 0), (v120 = v249) != 0))
          {
            v121 = *(_DWORD *)(v120 - 8);
          }
          else
          {
            v121 = 0;
          }
          v122 = 9 * ((~((_DWORD)v118 << 15) + v118) ^ ((~((_DWORD)v118 << 15) + v118) >> 10));
          v123 = (v122 ^ (v122 >> 6)) + ~((v122 ^ (v122 >> 6)) << 11);
          v124 = v121 & (v123 ^ HIWORD(v123));
          v70 = (_DWORD *)(v120 + 8 * v124);
          v125 = *v70;
          if (*v70 != -1)
          {
            v126 = 0;
            v127 = 1;
            do
            {
              if (v125 == (_DWORD)v118)
                goto LABEL_184;
              if (v125 == -2)
                v126 = v70;
              v124 = (v124 + v127) & v121;
              v70 = (_DWORD *)(v120 + 8 * v124);
              v125 = *v70;
              ++v127;
            }
            while (*v70 != -1);
            if (v126)
            {
              *v126 = 0xFFFFFFFFLL;
              --*(_DWORD *)(v249 - 16);
              v70 = v126;
            }
          }
          *v70 = v118;
          v70[1] = v119;
          if ((_QWORD)v249)
            v128 = *(_DWORD *)(v249 - 12) + 1;
          else
            v128 = 1;
          *(_DWORD *)(v249 - 12) = v128;
          if ((_QWORD)v249)
            v129 = *(_DWORD *)(v249 - 12);
          else
            v129 = 0;
          v130 = (*(_DWORD *)(v249 - 16) + v129);
          v131 = *(unsigned int *)(v249 - 4);
          if (v131 > 0x400)
          {
            if (v131 > 2 * v130)
              goto LABEL_184;
          }
          else
          {
            if (3 * v131 > 4 * v130)
              goto LABEL_184;
            if (!(_DWORD)v131)
            {
              v98 = 8;
              goto LABEL_183;
            }
          }
          v98 = (_DWORD)v131 << (6 * *(_DWORD *)(v249 - 12) >= (2 * v131));
LABEL_183:
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v249, v98, v70);
          goto LABEL_184;
        }
LABEL_241:
        v132 = *v232;
        if (*v232
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v232, 8u), (v132 = *v232) != 0))
        {
          v133 = *(_DWORD *)(v132 - 8);
          v134 = (const WTF::StringImpl **)(v69 + 48);
          v135 = *(WTF::StringImpl **)(v69 + 48);
          v136 = *((_DWORD *)v135 + 4);
          if (v136 >= 0x100)
          {
LABEL_244:
            v137 = v136 >> 8;
LABEL_252:
            v139 = 0;
            for (i = 1; ; ++i)
            {
              v141 = v137 & v133;
              v142 = (WTF **)(v132 + 16 * (v137 & v133));
              v143 = *v142;
              if (*v142 == (WTF *)-1)
              {
                v139 = (WTF **)(v132 + 16 * v141);
              }
              else
              {
                if (!v143)
                {
                  if (v139)
                  {
                    *v139 = 0;
                    v139[1] = 0;
                    --*(_DWORD *)(*v232 - 16);
                    v142 = v139;
                  }
                  v144 = *v134;
                  if (*v134)
                    *(_DWORD *)v144 += 2;
                  *v142 = v144;
                  v145 = (WTF *)v249;
                  *(_QWORD *)&v249 = 0;
                  v146 = v142[1];
                  v142[1] = v145;
                  if (v146)
                    WTF::fastFree((WTF *)((char *)v146 - 16), v20);
                  v147 = *v232;
                  if (*v232)
                    v148 = *(_DWORD *)(v147 - 12) + 1;
                  else
                    v148 = 1;
                  *(_DWORD *)(v147 - 12) = v148;
                  v149 = *v232;
                  if (*v232)
                    v150 = *(_DWORD *)(v149 - 12);
                  else
                    v150 = 0;
                  v151 = (*(_DWORD *)(v149 - 16) + v150);
                  v152 = *(unsigned int *)(v149 - 4);
                  if (v152 > 0x400)
                  {
                    if (v152 <= 2 * v151)
                      goto LABEL_276;
                  }
                  else if (3 * v152 <= 4 * v151)
                  {
                    if (!(_DWORD)v152)
                    {
                      v153 = 8;
                      goto LABEL_277;
                    }
LABEL_276:
                    v153 = (_DWORD)v152 << (6 * *(_DWORD *)(v149 - 12) >= (2 * v152));
LABEL_277:
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v232, v153);
                  }
LABEL_278:
                  if ((_QWORD)v249)
                    WTF::fastFree((WTF *)(v249 - 16), v20);
                  v154 = *(_QWORD *)(v69 + 104);
                  a3 = v226;
                  v35 = v231;
                  if (!v154)
                    goto LABEL_415;
                  v155 = *(unsigned __int8 **)(v154 + 24);
                  if (!v155)
                    goto LABEL_415;
                  v247 = 0;
                  v156 = *((_DWORD *)v155 + 12);
                  if (v156 != 4)
                  {
                    if (v156 == 1)
                    {
                      v248 = 0;
                      v188 = *(_QWORD *)v155;
                      if (*(_QWORD *)v155)
                      {
                        if (*(_DWORD *)(v188 + 48))
                          v188 = 0;
                        else
                          v188 = WebGPU::metalDataTypeFromPrimitive((unsigned __int8 *)v188, v155[8]);
                      }
                      v239 = (const char *)v188;
                      LOBYTE(v240) = 0;
                      BYTE2(v240) = 0;
                      WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::add<WebGPU::ShaderModule::VertexOutputFragmentInput>((uint64_t)&v249, (uint64_t *)&v247, &v248, (uint64_t *)&v239);
                    }
                    else if (!v156)
                    {
                      v248 = 0;
                      v157 = *v155 - 1;
                      if (v157 < 7 && ((0x5Bu >> v157) & 1) != 0)
                      {
                        v239 = (const char *)qword_18260F230[(char)v157];
                        LOBYTE(v240) = 0;
                        BYTE2(v240) = 0;
                        WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::add<WebGPU::ShaderModule::VertexOutputFragmentInput>((uint64_t)&v249, (uint64_t *)&v247, &v248, (uint64_t *)&v239);
                        goto LABEL_413;
                      }
LABEL_437:
                      __break(0xC471u);
                      JUMPOUT(0x18247A480);
                    }
LABEL_413:
                    WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>((uint64_t)&v249, (uint64_t *)(v19 + 104), v134, (uint64_t *)&v247);
                    if (v247)
                      WTF::fastFree((WTF *)(v247 - 4), v20);
LABEL_415:
                    if ((v229 & 1) == 0 || (v222 = *(_DWORD **)(v19 + 120)) != 0 && v222[1])
                    {
                      v223 = (_DWORD *)*MEMORY[0x1E0CBF738];
                      if (*MEMORY[0x1E0CBF738])
                        *v223 += 2;
                      v224 = *(_DWORD **)(v19 + 120);
                      *(_QWORD *)(v19 + 120) = v223;
                      if (v224)
                      {
                        if (*v224 == 2)
                        {
                          WTF::StringImpl::destroy();
                          v229 = 0;
                        }
                        else
                        {
                          v229 = 0;
                          *v224 -= 2;
                        }
                      }
                      else
                      {
                        v229 = 0;
                      }
                    }
                    else
                    {
                      v225 = *v134;
                      if (*v134)
                        *(_DWORD *)v225 += 2;
                      *(_QWORD *)(v19 + 120) = v225;
                      if (v222)
                      {
                        if (*v222 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *v222 -= 2;
                      }
                      v229 = 1;
                    }
                    goto LABEL_129;
                  }
                  v189 = *(_QWORD *)v155;
                  v190 = *(unsigned int *)(*(_QWORD *)v155 + 84);
                  if (!(_DWORD)v190)
                    goto LABEL_413;
                  v191 = *(uint64_t **)(v189 + 72);
                  v192 = 8 * v190;
                  while (2)
                  {
                    v195 = *v191;
                    if ((*(_QWORD *)(*v191 + 144) & 0xFF00000000) != 0 && *(unsigned __int16 *)(v195 + 140) <= 0xFFu)
                    {
                      v248 = *(_QWORD *)(*v191 + 144);
                      v193 = *(unsigned __int8 **)(*(_QWORD *)(v195 + 104) + 24);
                      if (v193)
                      {
                        v196 = *((_DWORD *)v193 + 12);
                        if (v196)
                        {
                          if (v196 == 1 && *(_QWORD *)v193 && !*(_DWORD *)(*(_QWORD *)v193 + 48))
                          {
                            v197 = v193[8];
                            v193 = *(unsigned __int8 **)v193;
                            goto LABEL_359;
                          }
                          v193 = 0;
                        }
                        else
                        {
                          v197 = 1;
LABEL_359:
                          v193 = (unsigned __int8 *)WebGPU::metalDataTypeFromPrimitive(v193, v197);
                        }
                      }
                      v239 = (const char *)v193;
                      v194 = *(_WORD *)(v195 + 152);
                      BYTE2(v240) = *(_BYTE *)(v195 + 154);
                      LOWORD(v240) = v194;
                      WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::add<WebGPU::ShaderModule::VertexOutputFragmentInput>((uint64_t)&v249, (uint64_t *)&v247, &v248, (uint64_t *)&v239);
                    }
                    ++v191;
                    v192 -= 8;
                    if (!v192)
                      goto LABEL_413;
                    continue;
                  }
                }
                if ((WTF::equal(v143, *v134, (const WTF::StringImpl *)v70) & 1) != 0)
                  goto LABEL_278;
              }
              v137 = i + v141;
            }
          }
        }
        else
        {
          v133 = 0;
          v134 = (const WTF::StringImpl **)(v69 + 48);
          v135 = *(WTF::StringImpl **)(v69 + 48);
          v136 = *((_DWORD *)v135 + 4);
          if (v136 >= 0x100)
            goto LABEL_244;
        }
        v137 = WTF::StringImpl::hashSlowCase(v135);
        goto LABEL_252;
      }
      v75 = (const WTF::StringImpl **)(v69 + 48);
      v247 = 0;
      v76 = *(unsigned int *)(v69 + 68);
      if ((_DWORD)v76)
      {
        v77 = *(_QWORD *)(v69 + 56);
        v78 = v77 + 8 * v76;
        while (1)
        {
          if (!*(_BYTE *)(*(_QWORD *)v77 + 24))
          {
            v79 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)v77 + 64) + 24);
            if (v79)
            {
              if (v79[12] == 4)
              {
                v80 = *(_QWORD *)v79;
                v81 = *(unsigned int *)(*(_QWORD *)v79 + 84);
                if ((_DWORD)v81)
                  break;
              }
            }
          }
LABEL_139:
          v77 += 8;
          if (v77 == v78)
            goto LABEL_172;
        }
        v82 = *(uint64_t **)(v80 + 72);
        v83 = 8 * v81;
        while (1)
        {
          v86 = *v82;
          switch(*(_WORD *)(*v82 + 140))
          {
            case 0u:
              v87 = (_BYTE *)(WebGPU::ShaderModule::populateShaderModuleState((WebGPU::ShaderModule *)v19, (WTF::StringImpl **)(v69 + 48), (const WTF::StringImpl *)v70)+ 4);
              goto LABEL_153;
            case 1u:
              v87 = (_BYTE *)WebGPU::ShaderModule::populateShaderModuleState((WebGPU::ShaderModule *)v19, (WTF::StringImpl **)(v69 + 48), (const WTF::StringImpl *)v70);
              goto LABEL_153;
            case 8u:
              v87 = (_BYTE *)(WebGPU::ShaderModule::populateShaderModuleState((WebGPU::ShaderModule *)v19, (WTF::StringImpl **)(v69 + 48), (const WTF::StringImpl *)v70)+ 1);
              goto LABEL_153;
            case 9u:
              v87 = (_BYTE *)(WebGPU::ShaderModule::populateShaderModuleState((WebGPU::ShaderModule *)v19, (WTF::StringImpl **)(v69 + 48), (const WTF::StringImpl *)v70)+ 2);
LABEL_153:
              *v87 = 1;
              break;
            default:
              break;
          }
          if ((*(_QWORD *)(v86 + 144) & 0xFF00000000) == 0)
            goto LABEL_147;
          v248 = *(_QWORD *)(v86 + 144);
          v84 = *(_QWORD *)(*(_QWORD *)(v86 + 104) + 24);
          if (v84)
          {
            v88 = *(_DWORD *)(v84 + 48);
            if (!v88)
            {
              v89 = 1;
              goto LABEL_162;
            }
            if (v88 == 1 && *(_QWORD *)v84 && !*(_DWORD *)(*(_QWORD *)v84 + 48))
            {
              v89 = *(unsigned __int8 *)(v84 + 8);
              v84 = *(_QWORD *)v84;
LABEL_162:
              v84 = WebGPU::metalDataTypeFromPrimitive((unsigned __int8 *)v84, v89);
              goto LABEL_146;
            }
            v84 = 0;
          }
LABEL_146:
          v239 = (const char *)v84;
          v85 = *(_WORD *)(v86 + 152);
          BYTE2(v240) = *(_BYTE *)(v86 + 154);
          LOWORD(v240) = v85;
          WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::add<WebGPU::ShaderModule::VertexOutputFragmentInput>((uint64_t)&v249, (uint64_t *)&v247, &v248, (uint64_t *)&v239);
LABEL_147:
          ++v82;
          v83 -= 8;
          if (!v83)
            goto LABEL_139;
        }
      }
LABEL_172:
      WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>((uint64_t)&v249, (uint64_t *)(v19 + 96), (const WTF::StringImpl **)(v69 + 48), (uint64_t *)&v247);
      v35 = v231;
      if (v247)
        WTF::fastFree((WTF *)(v247 - 4), v20);
      v94 = *(_QWORD *)(v69 + 104);
      if (!v94)
        goto LABEL_395;
      v95 = *(unsigned __int8 **)(v94 + 24);
      if (!v95)
        goto LABEL_395;
      v247 = 0;
      v96 = *((_DWORD *)v95 + 12);
      if (v96 != 4)
      {
        if (v96 == 1)
        {
          v248 = 0;
          v158 = *(_QWORD *)v95;
          if (*(_QWORD *)v95)
          {
            if (*(_DWORD *)(v158 + 48))
              v158 = 0;
            else
              v158 = WebGPU::metalDataTypeFromPrimitive((unsigned __int8 *)v158, v95[8]);
          }
          v239 = (const char *)v158;
          WTF::HashMap<unsigned int,MTLDataType,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<MTLDataType>,WTF::HashTableTraits>::add<MTLDataType>(&v249, (uint64_t *)&v247, &v248, &v239);
        }
        else if (!v96)
        {
          v248 = 0;
          v97 = *v95 - 1;
          if (v97 >= 7 || ((0x5Bu >> v97) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x18247A4A0);
          }
          v239 = (const char *)qword_18260F230[(char)v97];
          WTF::HashMap<unsigned int,MTLDataType,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<MTLDataType>,WTF::HashTableTraits>::add<MTLDataType>(&v249, (uint64_t *)&v247, &v248, &v239);
        }
LABEL_362:
        v198 = *v227;
        if (*v227
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v227, 8u), (v198 = *v227) != 0))
        {
          v199 = *(_DWORD *)(v198 - 8);
          v200 = *v75;
          v201 = *((_DWORD *)*v75 + 4);
          if (v201 >= 0x100)
          {
LABEL_365:
            v202 = v201 >> 8;
LABEL_368:
            v203 = 0;
            for (j = 1; ; ++j)
            {
              v205 = v202 & v199;
              v206 = (WTF **)(v198 + 16 * (v202 & v199));
              v207 = *v206;
              if (*v206 == (WTF *)-1)
              {
                v203 = (WTF **)(v198 + 16 * v205);
              }
              else
              {
                if (!v207)
                {
                  if (v203)
                  {
                    *v203 = 0;
                    v203[1] = 0;
                    --*(_DWORD *)(*v227 - 16);
                    v206 = v203;
                  }
                  v208 = *v75;
                  v35 = v231;
                  if (*v75)
                    *(_DWORD *)v208 += 2;
                  *v206 = v208;
                  v209 = (uint64_t)v247;
                  v247 = 0;
                  v210 = v206[1];
                  v206[1] = (WTF *)v209;
                  if (v210)
                    WTF::fastFree((WTF *)((char *)v210 - 16), v20);
                  v211 = *v227;
                  if (*v227)
                    v212 = *(_DWORD *)(v211 - 12) + 1;
                  else
                    v212 = 1;
                  *(_DWORD *)(v211 - 12) = v212;
                  v213 = *v227;
                  if (*v227)
                    v214 = *(_DWORD *)(v213 - 12);
                  else
                    v214 = 0;
                  v215 = (*(_DWORD *)(v213 - 16) + v214);
                  v216 = *(unsigned int *)(v213 - 4);
                  if (v216 > 0x400)
                  {
                    if (v216 <= 2 * v215)
                      goto LABEL_393;
                  }
                  else if (3 * v216 <= 4 * v215)
                  {
                    if (!(_DWORD)v216)
                    {
                      v217 = 8;
                      goto LABEL_394;
                    }
LABEL_393:
                    v217 = (_DWORD)v216 << (6 * *(_DWORD *)(v213 - 12) >= (2 * v216));
LABEL_394:
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v227, v217);
                  }
LABEL_395:
                  if ((v228 & 1) == 0 || (v218 = *(_DWORD **)(v19 + 128)) != 0 && v218[1])
                  {
                    v219 = (_DWORD *)*MEMORY[0x1E0CBF738];
                    if (*MEMORY[0x1E0CBF738])
                      *v219 += 2;
                    v220 = *(_DWORD **)(v19 + 128);
                    *(_QWORD *)(v19 + 128) = v219;
                    if (v220)
                    {
                      if (*v220 == 2)
                      {
                        WTF::StringImpl::destroy();
                        v228 = 0;
                      }
                      else
                      {
                        v228 = 0;
                        *v220 -= 2;
                      }
                    }
                    else
                    {
                      v228 = 0;
                    }
                  }
                  else
                  {
                    v221 = *v75;
                    if (*v75)
                      *(_DWORD *)v221 += 2;
                    *(_QWORD *)(v19 + 128) = v221;
                    if (v218)
                    {
                      if (*v218 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v218 -= 2;
                    }
                    v228 = 1;
                  }
                  goto LABEL_129;
                }
                if ((WTF::equal(v207, *v75, v93) & 1) != 0)
                {
                  v35 = v231;
                  if (v247)
                    WTF::fastFree((WTF *)(v247 - 4), v20);
                  goto LABEL_395;
                }
              }
              v202 = j + v205;
            }
          }
        }
        else
        {
          v199 = 0;
          v200 = *v75;
          v201 = *((_DWORD *)*v75 + 4);
          if (v201 >= 0x100)
            goto LABEL_365;
        }
        v202 = WTF::StringImpl::hashSlowCase(v200);
        goto LABEL_368;
      }
      v159 = *(_QWORD *)v95;
      v160 = *(unsigned int *)(*(_QWORD *)v95 + 84);
      if (!(_DWORD)v160)
        goto LABEL_362;
      v161 = *(uint64_t **)(v159 + 72);
      v162 = &v161[v160];
      while (1)
      {
        v164 = *v161;
        if (*(unsigned __int16 *)(*v161 + 140) < 0x100u)
          goto LABEL_304;
        if (*(_WORD *)(*v161 + 140))
        {
          if (*(_WORD *)(*v161 + 140) != 9)
            goto LABEL_304;
          v165 = (_BYTE *)(WebGPU::ShaderModule::populateShaderModuleState((WebGPU::ShaderModule *)v19, v75, v93) + 3);
        }
        else
        {
          v165 = (_BYTE *)(WebGPU::ShaderModule::populateShaderModuleState((WebGPU::ShaderModule *)v19, v75, v93) + 4);
        }
        *v165 = 1;
LABEL_304:
        v166 = *(unsigned int *)(v164 + 100);
        if ((_DWORD)v166)
        {
          v167 = *(_QWORD **)(v164 + 88);
          for (k = 8 * v166; k; k -= 8)
          {
            v170 = *v167;
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v167 + 16))(*v167) == 3)
            {
              if (*(_BYTE *)(v170 + 24))
              {
                if (*(_BYTE *)(v170 + 24) != 9)
                  goto LABEL_308;
                v169 = (_BYTE *)(WebGPU::ShaderModule::populateShaderModuleState((WebGPU::ShaderModule *)v19, v75, v93)
                               + 3);
              }
              else
              {
                v169 = (_BYTE *)(WebGPU::ShaderModule::populateShaderModuleState((WebGPU::ShaderModule *)v19, v75, v93)
                               + 4);
              }
              *v169 = 1;
            }
LABEL_308:
            ++v167;
          }
        }
        v171 = *(_QWORD *)(v164 + 144);
        if ((v171 & 0xFF00000000) != 0 && *(unsigned __int16 *)(v164 + 140) <= 0xFFu)
        {
          v172 = *(unsigned __int8 **)(*(_QWORD *)(v164 + 104) + 24);
          if (!v172)
            goto LABEL_320;
          v173 = *((_DWORD *)v172 + 12);
          if (v173)
          {
            if (v173 != 1 || !*(_QWORD *)v172 || *(_DWORD *)(*(_QWORD *)v172 + 48))
            {
LABEL_320:
              v174 = 0;
LABEL_323:
              v176 = (uint64_t)v247;
              if (v247
                || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v247, 8u, 0), (v176 = (uint64_t)v247) != 0))
              {
                v177 = *(_DWORD *)(v176 - 8);
              }
              else
              {
                v177 = 0;
              }
              v178 = 9 * ((~((_DWORD)v171 << 15) + v171) ^ ((~((_DWORD)v171 << 15) + v171) >> 10));
              v179 = (v178 ^ (v178 >> 6)) + ~((v178 ^ (v178 >> 6)) << 11);
              v180 = v177 & (v179 ^ HIWORD(v179));
              v93 = (const WTF::StringImpl *)(v176 + 16 * v180);
              v181 = *(_DWORD *)v93;
              if (*(_DWORD *)v93 != -1)
              {
                v182 = 0;
                v183 = 1;
                do
                {
                  if (v181 == (_DWORD)v171)
                    goto LABEL_297;
                  if (v181 == -2)
                    v182 = v93;
                  v180 = (v180 + v183) & v177;
                  v93 = (const WTF::StringImpl *)(v176 + 16 * v180);
                  v181 = *(_DWORD *)v93;
                  ++v183;
                }
                while (*(_DWORD *)v93 != -1);
                if (v182)
                {
                  *(_DWORD *)v182 = -1;
                  --*(_DWORD *)(v176 - 16);
                  v93 = v182;
                }
              }
              *(_DWORD *)v93 = v171;
              *((_QWORD *)v93 + 1) = v174;
              v184 = *(_DWORD *)(v176 - 16);
              v185 = *(_DWORD *)(v176 - 12) + 1;
              *(_DWORD *)(v176 - 12) = v185;
              v186 = (v184 + v185);
              v187 = *(unsigned int *)(v176 - 4);
              if (v187 > 0x400)
              {
                if (v187 > 2 * v186)
                  goto LABEL_297;
              }
              else
              {
                if (3 * v187 > 4 * v186)
                  goto LABEL_297;
                if (!(_DWORD)v187)
                {
                  v163 = 8;
                  goto LABEL_296;
                }
              }
              v163 = (_DWORD)v187 << (6 * v185 >= (2 * v187));
LABEL_296:
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v247, v163, v93);
              goto LABEL_297;
            }
            v175 = v172[8];
            v172 = *(unsigned __int8 **)v172;
          }
          else
          {
            v175 = 1;
          }
          v174 = WebGPU::metalDataTypeFromPrimitive(v172, v175);
          goto LABEL_323;
        }
LABEL_297:
        if (++v161 == v162)
          goto LABEL_362;
      }
    }
  }
LABEL_55:
  *a3 = v19;
  v26 = v245;
  if (v245)
  {
    v27 = *(unsigned int *)(v245 - 4);
    if ((_DWORD)v27)
    {
      v28 = (WGSL::Reflection::EntryPointInformation *)(v245 + 8);
      do
      {
        if (*((_QWORD *)v28 - 1) != -1)
        {
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v28, v20);
          v29 = (_DWORD *)*((_QWORD *)v28 - 1);
          *((_QWORD *)v28 - 1) = 0;
          if (v29)
          {
            if (*v29 == 2)
              WTF::StringImpl::destroy();
            else
              *v29 -= 2;
          }
        }
        v28 = (WGSL::Reflection::EntryPointInformation *)((char *)v28 + 96);
        --v27;
      }
      while (v27);
    }
    WTF::fastFree((WTF *)(v26 - 16), v20);
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(&v246, v20);
  v31 = v236;
  if (v236 != -1)
    goto LABEL_102;
LABEL_103:
  v60 = (uint64_t)v237;
  if (v237)
  {
    v61 = *((unsigned int *)v237 - 1);
    if ((_DWORD)v61)
    {
      v62 = v237;
      do
      {
        v63 = *v62;
        if (*v62 != (_DWORD *)-1)
        {
          *v62 = 0;
          if (v63)
          {
            if (*v63 == 2)
              WTF::StringImpl::destroy();
            else
              *v63 -= 2;
          }
        }
        ++v62;
        --v61;
      }
      while (v61);
    }
    WTF::fastFree((WTF *)(v60 - 16), v30);
  }
  v64 = v238;
  if (v238)
  {
    v65 = *(unsigned int *)(v238 - 4);
    if ((_DWORD)v65)
    {
      v66 = v238;
      while (1)
      {
        v67 = *(_DWORD **)v66;
        if (*(_QWORD *)v66 == -1)
          goto LABEL_117;
        v68 = *(_DWORD **)(v66 + 8);
        *(_QWORD *)(v66 + 8) = 0;
        if (!v68)
          goto LABEL_122;
        if (*v68 != 2)
          break;
        WTF::StringImpl::destroy();
        v67 = *(_DWORD **)v66;
        *(_QWORD *)v66 = 0;
        if (v67)
        {
LABEL_125:
          if (*v67 == 2)
            WTF::StringImpl::destroy();
          else
            *v67 -= 2;
        }
LABEL_117:
        v66 += 16;
        if (!--v65)
          goto LABEL_127;
      }
      *v68 -= 2;
LABEL_122:
      *(_QWORD *)v66 = 0;
      if (v67)
        goto LABEL_125;
      goto LABEL_117;
    }
LABEL_127:
    WTF::fastFree((WTF *)(v64 - 16), v30);
  }
}

void sub_18247A4B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 ***a10, uint64_t *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t *a15, uint64_t *a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t *a21,uint64_t a22,uint64_t *a23,uint64_t *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  void *v41;
  void *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;

  if (a39)
    WTF::fastFree((WTF *)(a39 - 16), a2);
  WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::~HashMap(a17, a2);
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashMap(a21, v41);

  v43 = *(_DWORD **)(v39 + 136);
  *(_QWORD *)(v39 + 136) = 0;
  if (v43)
  {
    if (*v43 == 2)
      WTF::StringImpl::destroy();
    else
      *v43 -= 2;
  }
  v44 = *(_DWORD **)(v39 + 128);
  *(_QWORD *)(v39 + 128) = 0;
  if (v44)
  {
    if (*v44 == 2)
      WTF::StringImpl::destroy();
    else
      *v44 -= 2;
  }
  v45 = *(_DWORD **)(v39 + 120);
  *(_QWORD *)(v39 + 120) = 0;
  if (v45)
  {
    if (*v45 == 2)
      WTF::StringImpl::destroy();
    else
      *v45 -= 2;
  }
  WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(a24, v42);
  WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(a11, v46);
  WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(a23, v47);
  WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(a13, v48);
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashMap(a16, v49);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(a10, v50);

  WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::~HashMap(a15, v51);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(a20, v52);
  v54 = *(unsigned int *)(v39 + 40);
  if ((_DWORD)v54 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E0FD2130[v54])(&a39, a14);
  *(_DWORD *)(v39 + 40) = -1;
  WTF::fastFree((WTF *)v39, v53);
  WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::~HashMap(&a37, v55);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(&a38, v56);
  if (a29 != -1)
    ((void (*)(uint64_t *, char *))off_1E0FD2148[a29])(&a39, &a25);
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashSet(&a30, v57);
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashMap(&a31, v58);
  _Unwind_Resume(a1);
}

void WGSL::Configuration::~Configuration(WGSL::Configuration *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (_DWORD **)*((_QWORD *)this + 2);
      do
      {
        v5 = *v4;
        if (*v4 != (_DWORD *)-1)
        {
          *v4 = 0;
          if (v5)
          {
            if (*v5 == 2)
              WTF::StringImpl::destroy();
            else
              *v5 -= 2;
          }
        }
        ++v4;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

_QWORD *WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashSet(_QWORD *a1, void *a2)
{
  _DWORD **v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;

  v3 = (_DWORD **)*a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = (_DWORD **)*a1;
      do
      {
        v6 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WTF::StringImpl::destroy();
            else
              *v6 -= 2;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      while (1)
      {
        v6 = *(_DWORD **)v5;
        if (*(_QWORD *)v5 == -1)
          goto LABEL_5;
        v7 = *(_DWORD **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (!v7)
          goto LABEL_10;
        if (*v7 != 2)
          break;
        WTF::StringImpl::destroy();
        v6 = *(_DWORD **)v5;
        *(_QWORD *)v5 = 0;
        if (v6)
        {
LABEL_13:
          if (*v6 == 2)
            WTF::StringImpl::destroy();
          else
            *v6 -= 2;
        }
LABEL_5:
        v5 += 16;
        if (!--v4)
          goto LABEL_15;
      }
      *v7 -= 2;
LABEL_10:
      *(_QWORD *)v5 = 0;
      if (v6)
        goto LABEL_13;
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WebGPU::ShaderModule::populateShaderModuleState(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  WTF *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;

  v4 = (uint64_t *)((char *)this + 160);
  v5 = *((_QWORD *)this + 20);
  if (!v5)
  {
LABEL_16:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebGPU::ShaderModule::ShaderModuleState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebGPU::ShaderModule::ShaderModuleState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, 8u, 0);
    v13 = *v4;
    if (*v4)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v15 = *a2;
      v16 = *((_DWORD *)*a2 + 4);
      if (v16 < 0x100)
        goto LABEL_20;
    }
    else
    {
      v14 = 0;
      v15 = *a2;
      v16 = *((_DWORD *)*a2 + 4);
      if (v16 < 0x100)
        goto LABEL_20;
    }
    goto LABEL_18;
  }
  v6 = *(_DWORD *)(v5 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == (WTF *)-1)
      goto LABEL_6;
    if (!v11)
      break;
    if ((WTF::equal(v11, *a2, a3) & 1) != 0)
    {
      v12 = v5 + 16 * v10;
      v13 = *v4;
      if (!*v4 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4))
        return v12 + 8;
      goto LABEL_14;
    }
LABEL_6:
    ++i;
  }
  v13 = *v4;
  if (!*v4)
    goto LABEL_16;
LABEL_14:
  v14 = *(_DWORD *)(v13 - 8);
  v15 = *a2;
  v16 = *((_DWORD *)*a2 + 4);
  if (v16 >= 0x100)
  {
LABEL_18:
    v17 = v16 >> 8;
    goto LABEL_21;
  }
LABEL_20:
  v17 = WTF::StringImpl::hashSlowCase(v15);
LABEL_21:
  v18 = 0;
  v19 = 1;
  while (2)
  {
    v20 = v17 & v14;
    v12 = v13 + 16 * (v17 & v14);
    v21 = *(WTF **)v12;
    if (*(_QWORD *)v12 == -1)
    {
      v18 = v13 + 16 * v20;
LABEL_23:
      v17 = v19 + v20;
      ++v19;
      continue;
    }
    break;
  }
  if (v21)
  {
    if ((WTF::equal(v21, *a2, a3) & 1) != 0)
      return v12 + 8;
    goto LABEL_23;
  }
  if (v18)
  {
    *(_QWORD *)v18 = 0;
    *(_BYTE *)(v18 + 12) = 0;
    *(_DWORD *)(v18 + 8) = 0;
    --*(_DWORD *)(*v4 - 16);
    v12 = v18;
  }
  v22 = *a2;
  if (*a2)
    *(_DWORD *)v22 += 2;
  *(_QWORD *)v12 = v22;
  *(_DWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 12) = 0;
  if (*v4)
  {
    ++*(_DWORD *)(*v4 - 12);
    v23 = *v4;
    if (*v4)
      goto LABEL_34;
LABEL_39:
    v24 = *(unsigned int *)(v23 - 16);
    v25 = *(unsigned int *)(v23 - 4);
    if (v25 > 0x400)
      goto LABEL_40;
LABEL_35:
    if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
        goto LABEL_42;
      }
LABEL_41:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25));
LABEL_42:
      v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebGPU::ShaderModule::ShaderModuleState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebGPU::ShaderModule::ShaderModuleState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v26, (WTF::StringImpl **)v12);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v23 = *v4;
    if (!*v4)
      goto LABEL_39;
LABEL_34:
    v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
    v25 = *(unsigned int *)(v23 - 4);
    if (v25 <= 0x400)
      goto LABEL_35;
LABEL_40:
    if (v25 <= 2 * v24)
      goto LABEL_41;
  }
  return v12 + 8;
}

_OWORD *WTF::HashMap<unsigned int,MTLDataType,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<MTLDataType>,WTF::HashTableTraits>::add<MTLDataType>(_OWORD *result, uint64_t *a2, int *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _OWORD *v15;
  int v16;
  _OWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_OWORD *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    *(_DWORD *)v15 = v11;
    *((_QWORD *)v15 + 1) = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v19 = *a2;
      if (*a2)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v19 = *a2;
      if (*a2)
      {
LABEL_14:
        v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
        v21 = *(unsigned int *)(v19 - 4);
        if (v21 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v20 = *(unsigned int *)(v19 - 16);
    v21 = *(unsigned int *)(v19 - 4);
    if (v21 <= 0x400)
    {
LABEL_15:
      if (3 * v21 > 4 * v20)
      {
LABEL_26:
        *(_QWORD *)v7 = v15;
        *((_QWORD *)v7 + 1) = v19 + 16 * v21;
        *((_BYTE *)v7 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v21)
      {
        result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, v15);
        v15 = result;
        v19 = *a2;
        if (!*a2)
        {
LABEL_18:
          v21 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v21 = *(unsigned int *)(v19 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21)), v15);
      v15 = result;
      v19 = *a2;
      if (!*a2)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v21 > 2 * v20)
      goto LABEL_26;
    goto LABEL_24;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v11)
  {
    if (v16 == -2)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (_OWORD *)(v8 + 16 * v14);
    v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == -1)
    {
      if (v17)
      {
        *(_DWORD *)v17 = -1;
        *((_QWORD *)v17 + 1) = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v15;
  *((_QWORD *)v7 + 1) = v8 + 16 * v22;
  *((_BYTE *)v7 + 16) = 0;
  return result;
}

uint64_t WebGPU::metalDataTypeFromPrimitive(unsigned __int8 *a1, int a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  switch(a2)
  {
    case 1:
      v2 = *a1 - 1;
      if (v2 >= 7 || ((0x5Bu >> v2) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x18247B0B4);
      }
      result = qword_18260F230[(char)v2];
      break;
    case 2:
      v5 = *a1 - 1;
      if (v5 >= 7 || ((0x5Bu >> v5) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x18247B0F4);
      }
      result = qword_18260F268[(char)v5];
      break;
    case 3:
      v4 = *a1 - 1;
      if (v4 >= 7 || ((0x5Bu >> v4) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x18247B0D4);
      }
      result = qword_18260F2A0[(char)v4];
      break;
    case 4:
      v6 = *a1 - 1;
      if (v6 >= 7 || ((0x5Bu >> v6) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x18247B114);
      }
      result = qword_18260F2D8[(char)v6];
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x18247B134);
  }
  return result;
}

BOOL WebGPU::ShaderModule::usesSampleMaskInOutput(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 20);
  if (!v3)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        return 0;
      if ((WTF::equal(v11, *a2, a3) & 1) != 0)
        break;
    }
  }
  v12 = v3 + 16 * v10;
  v13 = *((_QWORD *)this + 20);
  return (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4)) && *(_BYTE *)(v12 + 11) != 0;
}

BOOL WebGPU::ShaderModule::usesFragDepth(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 20);
  if (!v3)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        return 0;
      if ((WTF::equal(v11, *a2, a3) & 1) != 0)
        break;
    }
  }
  v12 = v3 + 16 * v10;
  v13 = *((_QWORD *)this + 20);
  return (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4)) && *(_BYTE *)(v12 + 12) != 0;
}

uint64_t WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::add<WebGPU::ShaderModule::VertexOutputFragmentInput>(uint64_t result, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = v8 + 24 * v14;
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    *(_DWORD *)v15 = v11;
    v19 = *a4;
    *(_DWORD *)(v15 + 15) = *(_DWORD *)((char *)a4 + 7);
    *(_QWORD *)(v15 + 8) = v19;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v20 = *a2;
      if (*a2)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v20 = *a2;
      if (*a2)
      {
LABEL_14:
        v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v21 = *(unsigned int *)(v20 - 16);
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(_QWORD *)v7 = v15;
        *(_QWORD *)(v7 + 8) = v20 + 24 * v22;
        *(_BYTE *)(v7 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v22)
      {
        result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, (__int128 *)v15);
        v15 = result;
        v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          LODWORD(v22) = 0;
          goto LABEL_26;
        }
LABEL_25:
        LODWORD(v22) = *(_DWORD *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), (__int128 *)v15);
      v15 = result;
      v20 = *a2;
      if (!*a2)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21)
      goto LABEL_26;
    goto LABEL_24;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v11)
  {
    if (v16 == -2)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = v8 + 24 * v14;
    v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == -1)
    {
      if (v17)
      {
        *(_DWORD *)v17 = -1;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(_DWORD *)(v8 - 4);
  *(_QWORD *)v7 = v15;
  *(_QWORD *)(v7 + 8) = v8 + 24 * v23;
  *(_BYTE *)(v7 + 16) = 0;
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  int i;
  unsigned int v15;
  WTF *v16;
  WTF *result;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v8 = *a2;
    if (!*a2)
    {
      v9 = 0;
      v10 = *a3;
      v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *a3;
  v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100)
    goto LABEL_6;
LABEL_4:
  v12 = v11 >> 8;
LABEL_7:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF *)(v8 + 16 * (v12 & v9));
    result = *(WTF **)v16;
    if (*(_QWORD *)v16 == -1)
    {
      v13 = (WTF *)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        result = 0;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        --*(_DWORD *)(*a2 - 16);
        v16 = v13;
      }
      v20 = *a3;
      if (*a3)
        *(_DWORD *)v20 += 2;
      *(_QWORD *)v16 = v20;
      v21 = *a4;
      *a4 = 0;
      v22 = *((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = v21;
      if (v22)
        result = (WTF *)WTF::fastFree((WTF *)(v22 - 16), a2);
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        v23 = *a2;
        if (*a2)
          goto LABEL_23;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v23 = *a2;
        if (*a2)
        {
LABEL_23:
          v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
          v25 = *(unsigned int *)(v23 - 4);
          if (v25 <= 0x400)
            goto LABEL_24;
          goto LABEL_32;
        }
      }
      v24 = *(unsigned int *)(v23 - 16);
      v25 = *(unsigned int *)(v23 - 4);
      if (v25 <= 0x400)
      {
LABEL_24:
        if (3 * v25 > 4 * v24)
        {
LABEL_35:
          v27 = v23 + 16 * v25;
          v26 = 1;
          goto LABEL_36;
        }
        if (!(_DWORD)v25)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (WTF::StringImpl **)v16);
          v16 = result;
          v23 = *a2;
          if (!*a2)
          {
LABEL_27:
            v25 = 0;
            goto LABEL_35;
          }
LABEL_34:
          v25 = *(unsigned int *)(v23 - 4);
          goto LABEL_35;
        }
LABEL_33:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25)), (WTF::StringImpl **)v16);
        v16 = result;
        v23 = *a2;
        if (!*a2)
          goto LABEL_27;
        goto LABEL_34;
      }
LABEL_32:
      if (v25 > 2 * v24)
        goto LABEL_35;
      goto LABEL_33;
    }
    result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v12 = i + v15;
  }
  v18 = *a2;
  if (*a2)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v26 = 0;
  v27 = v18 + 16 * v19;
LABEL_36:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v26;
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *(_DWORD **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(_QWORD *)(v5 + 8);
          if (v7)
          {
            WTF::fastFree((WTF *)(v7 - 16), a2);
            v6 = *(_DWORD **)v5;
          }
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WTF::StringImpl::destroy();
            else
              *v6 -= 2;
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WGSL::Reflection::EntryPointInformation *v5;
  _DWORD *v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WGSL::Reflection::EntryPointInformation *)(v3 + 8);
      do
      {
        if (*((_QWORD *)v5 - 1) != -1)
        {
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v5, a2);
          v6 = (_DWORD *)*((_QWORD *)v5 - 1);
          *((_QWORD *)v5 - 1) = 0;
          if (v6)
          {
            if (*v6 == 2)
              WTF::StringImpl::destroy();
            else
              *v6 -= 2;
          }
        }
        v5 = (WGSL::Reflection::EntryPointInformation *)((char *)v5 + 96);
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WebGPU::ShaderModule::fragmentInputsForEntryPoint(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int j;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int k;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;

  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11)
          goto LABEL_15;
        if ((WTF::equal(v11, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = v5 + 16 * v10;
    v13 = *((_QWORD *)this + 12);
    if (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4))
      return v12 + 8;
  }
LABEL_15:
  v15 = *((_QWORD *)this + 19);
  if (!v15)
    return 0;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = *((_DWORD *)*a2 + 4);
  v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v17 >> 8;
  for (j = 0; ; v18 = ++j + v20)
  {
    v20 = v18 & v16;
    v21 = *(WTF **)(v15 + 16 * v20);
    if (v21 != (WTF *)-1)
    {
      if (!v21)
        return 0;
      if ((WTF::equal(v21, *a2, a3) & 1) != 0)
        break;
    }
  }
  v22 = v15 + 16 * v20;
  v23 = *((_QWORD *)this + 19);
  if (v23)
  {
    if (v22 == v23 + 16 * *(unsigned int *)(v23 - 4))
      return 0;
  }
  v24 = *((_QWORD *)this + 12);
  if (!v24)
  {
    v29 = 0;
    v30 = 0;
    goto LABEL_45;
  }
  v25 = *(_DWORD *)(v24 - 8);
  v26 = *(WTF::StringImpl **)(v22 + 8);
  v27 = *((_DWORD *)v26 + 4);
  if (v27 < 0x100)
    v28 = WTF::StringImpl::hashSlowCase(v26);
  else
    v28 = v27 >> 8;
  for (k = 0; ; v28 = k + v32)
  {
    v32 = v28 & v25;
    v33 = *(WTF **)(v24 + 16 * v32);
    if (v33 == (WTF *)-1)
      goto LABEL_35;
    if (!v33)
      break;
    if ((WTF::equal(v33, *(const WTF::StringImpl **)(v22 + 8), a3) & 1) != 0)
    {
      v29 = v24 + 16 * v32;
      v30 = *((_QWORD *)this + 12);
      if (!v30)
        goto LABEL_45;
      v34 = *(unsigned int *)(v30 - 4);
      goto LABEL_43;
    }
LABEL_35:
    ++k;
  }
  v30 = *((_QWORD *)this + 12);
  if (v30)
  {
    v34 = *(unsigned int *)(v30 - 4);
    v29 = v30 + 16 * v34;
LABEL_43:
    v30 += 16 * v34;
    goto LABEL_45;
  }
  v29 = 0;
LABEL_45:
  if (v29 == v30)
    return 0;
  else
    return v29 + 8;
}

uint64_t WebGPU::ShaderModule::fragmentReturnTypeForEntryPoint(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int j;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int k;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;

  v5 = *((_QWORD *)this + 11);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11)
          goto LABEL_15;
        if ((WTF::equal(v11, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = v5 + 16 * v10;
    v13 = *((_QWORD *)this + 11);
    if (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4))
      return v12 + 8;
  }
LABEL_15:
  v15 = *((_QWORD *)this + 19);
  if (!v15)
    return 0;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = *((_DWORD *)*a2 + 4);
  v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v17 >> 8;
  for (j = 0; ; v18 = ++j + v20)
  {
    v20 = v18 & v16;
    v21 = *(WTF **)(v15 + 16 * v20);
    if (v21 != (WTF *)-1)
    {
      if (!v21)
        return 0;
      if ((WTF::equal(v21, *a2, a3) & 1) != 0)
        break;
    }
  }
  v22 = v15 + 16 * v20;
  v23 = *((_QWORD *)this + 19);
  if (v23)
  {
    if (v22 == v23 + 16 * *(unsigned int *)(v23 - 4))
      return 0;
  }
  v24 = *((_QWORD *)this + 11);
  if (!v24)
  {
    v29 = 0;
    v30 = 0;
    goto LABEL_45;
  }
  v25 = *(_DWORD *)(v24 - 8);
  v26 = *(WTF::StringImpl **)(v22 + 8);
  v27 = *((_DWORD *)v26 + 4);
  if (v27 < 0x100)
    v28 = WTF::StringImpl::hashSlowCase(v26);
  else
    v28 = v27 >> 8;
  for (k = 0; ; v28 = k + v32)
  {
    v32 = v28 & v25;
    v33 = *(WTF **)(v24 + 16 * v32);
    if (v33 == (WTF *)-1)
      goto LABEL_35;
    if (!v33)
      break;
    if ((WTF::equal(v33, *(const WTF::StringImpl **)(v22 + 8), a3) & 1) != 0)
    {
      v29 = v24 + 16 * v32;
      v30 = *((_QWORD *)this + 11);
      if (!v30)
        goto LABEL_45;
      v34 = *(unsigned int *)(v30 - 4);
      goto LABEL_43;
    }
LABEL_35:
    ++k;
  }
  v30 = *((_QWORD *)this + 11);
  if (v30)
  {
    v34 = *(unsigned int *)(v30 - 4);
    v29 = v30 + 16 * v34;
LABEL_43:
    v30 += 16 * v34;
    goto LABEL_45;
  }
  v29 = 0;
LABEL_45:
  if (v29 == v30)
    return 0;
  else
    return v29 + 8;
}

uint64_t WebGPU::ShaderModule::vertexReturnTypeForEntryPoint(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int j;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int k;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;

  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11)
          goto LABEL_15;
        if ((WTF::equal(v11, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = v5 + 16 * v10;
    v13 = *((_QWORD *)this + 13);
    if (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4))
      return v12 + 8;
  }
LABEL_15:
  v15 = *((_QWORD *)this + 19);
  if (!v15)
    return 0;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = *((_DWORD *)*a2 + 4);
  v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v17 >> 8;
  for (j = 0; ; v18 = ++j + v20)
  {
    v20 = v18 & v16;
    v21 = *(WTF **)(v15 + 16 * v20);
    if (v21 != (WTF *)-1)
    {
      if (!v21)
        return 0;
      if ((WTF::equal(v21, *a2, a3) & 1) != 0)
        break;
    }
  }
  v22 = v15 + 16 * v20;
  v23 = *((_QWORD *)this + 19);
  if (v23)
  {
    if (v22 == v23 + 16 * *(unsigned int *)(v23 - 4))
      return 0;
  }
  v24 = *((_QWORD *)this + 13);
  if (!v24)
  {
    v29 = 0;
    v30 = 0;
    goto LABEL_45;
  }
  v25 = *(_DWORD *)(v24 - 8);
  v26 = *(WTF::StringImpl **)(v22 + 8);
  v27 = *((_DWORD *)v26 + 4);
  if (v27 < 0x100)
    v28 = WTF::StringImpl::hashSlowCase(v26);
  else
    v28 = v27 >> 8;
  for (k = 0; ; v28 = k + v32)
  {
    v32 = v28 & v25;
    v33 = *(WTF **)(v24 + 16 * v32);
    if (v33 == (WTF *)-1)
      goto LABEL_35;
    if (!v33)
      break;
    if ((WTF::equal(v33, *(const WTF::StringImpl **)(v22 + 8), a3) & 1) != 0)
    {
      v29 = v24 + 16 * v32;
      v30 = *((_QWORD *)this + 13);
      if (!v30)
        goto LABEL_45;
      v34 = *(unsigned int *)(v30 - 4);
      goto LABEL_43;
    }
LABEL_35:
    ++k;
  }
  v30 = *((_QWORD *)this + 13);
  if (v30)
  {
    v34 = *(unsigned int *)(v30 - 4);
    v29 = v30 + 16 * v34;
LABEL_43:
    v30 += 16 * v34;
    goto LABEL_45;
  }
  v29 = 0;
LABEL_45:
  if (v29 == v30)
    return 0;
  else
    return v29 + 8;
}

uint64_t WebGPU::ShaderModule::hasOverride(WebGPU::ShaderModule *this, const WTF::String *a2)
{
  void *v2;
  __CFString *v3;
  uint64_t v4;

  v2 = (void *)*((_QWORD *)this + 18);
  if (*(_QWORD *)a2)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

void sub_18247BFBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const WTF::StringImpl *WebGPU::ShaderModule::stageInTypesForEntryPoint(WebGPU::ShaderModule *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int j;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int k;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;

  result = *a2;
  if (!*a2)
    return result;
  if (!*((_DWORD *)result + 1))
    return 0;
  v6 = *((_QWORD *)this + 14);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = *((_DWORD *)result + 4);
    if (v8 < 0x100)
      v9 = WTF::StringImpl::hashSlowCase(result);
    else
      v9 = v8 >> 8;
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      v12 = *(WTF **)(v6 + 16 * v11);
      if (v12 != (WTF *)-1)
      {
        if (!v12)
          goto LABEL_19;
        if ((WTF::equal(v12, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v13 = v6 + 16 * v11;
    v14 = *((_QWORD *)this + 14);
    if (!v14 || v13 != v14 + 16 * *(unsigned int *)(v14 - 4))
      return (const WTF::StringImpl *)(v13 + 8);
  }
LABEL_19:
  v15 = *((_QWORD *)this + 19);
  if (!v15)
    return 0;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = *((_DWORD *)*a2 + 4);
  v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v17 >> 8;
  for (j = 0; ; v18 = ++j + v20)
  {
    v20 = v18 & v16;
    v21 = *(WTF **)(v15 + 16 * v20);
    if (v21 != (WTF *)-1)
    {
      if (!v21)
        return 0;
      if ((WTF::equal(v21, *a2, a3) & 1) != 0)
        break;
    }
  }
  v22 = v15 + 16 * v20;
  v23 = *((_QWORD *)this + 19);
  if (v23)
  {
    if (v22 == v23 + 16 * *(unsigned int *)(v23 - 4))
      return 0;
  }
  v24 = *((_QWORD *)this + 14);
  if (!v24)
  {
    v29 = 0;
    v30 = 0;
    goto LABEL_49;
  }
  v25 = *(_DWORD *)(v24 - 8);
  v26 = *(WTF::StringImpl **)(v22 + 8);
  v27 = *((_DWORD *)v26 + 4);
  if (v27 < 0x100)
    v28 = WTF::StringImpl::hashSlowCase(v26);
  else
    v28 = v27 >> 8;
  for (k = 0; ; v28 = k + v32)
  {
    v32 = v28 & v25;
    v33 = *(WTF **)(v24 + 16 * v32);
    if (v33 == (WTF *)-1)
      goto LABEL_39;
    if (!v33)
      break;
    if ((WTF::equal(v33, *(const WTF::StringImpl **)(v22 + 8), a3) & 1) != 0)
    {
      v29 = v24 + 16 * v32;
      v30 = *((_QWORD *)this + 14);
      if (!v30)
        goto LABEL_49;
      v34 = *(unsigned int *)(v30 - 4);
      goto LABEL_47;
    }
LABEL_39:
    ++k;
  }
  v30 = *((_QWORD *)this + 14);
  if (v30)
  {
    v34 = *(unsigned int *)(v30 - 4);
    v29 = v30 + 16 * v34;
LABEL_47:
    v30 += 16 * v34;
    goto LABEL_49;
  }
  v29 = 0;
LABEL_49:
  if (v29 == v30)
    return 0;
  else
    return (const WTF::StringImpl *)(v29 + 8);
}

uint64_t WebGPU::ShaderModule::ShaderModule(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;
  _BYTE v10[3];

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E0FD2158[v5])(v10, a1 + 8);
    *(_DWORD *)(a1 + 40) = v5;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x186DAB1AC](v6);
LABEL_7:
  ++*((_QWORD *)v6 + 1);
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_12:
  *(_QWORD *)(a1 + 72) = a2;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  return a1;
}

void sub_18247C324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 40);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD2130[v16])(&a12, v14);
  *(_DWORD *)(v13 + 40) = -1;
  _Unwind_Resume(exception_object);
}

WTF *WebGPU::ShaderModule::convertPipelineLayout@<X0>(WebGPU::ShaderModule *this@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  WTF *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  WebGPU::ShaderModule *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _DWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _DWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  _DWORD *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  __int128 *v66;
  __int128 *v67;
  __int128 v68;
  __int128 v69;
  _DWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unsigned int v78;
  uint64_t v79;
  __int128 *v80;
  __int128 *v81;
  __int128 v82;
  __int128 v83;
  _DWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _DWORD **v89;
  _DWORD *v90;
  unint64_t v91;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  _DWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[21];
  int v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char *v120;

  v117 = 0;
  v118 = 0;
  if (*((_BYTE *)this + 32))
    v3 = *((_DWORD *)this + 7) == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v12 = this;
    v98 = 0;
    v95 = 0;
    v96 = 0;
    v13 = 0;
    while (1)
    {
      v14 = WebGPU::PipelineLayout::bindGroupLayout(v12, v13);
      v115 = 0;
      v116 = 0;
      v16 = *(_QWORD *)(v14 + 48);
      if (v16)
      {
        v17 = *(unsigned int *)(v16 - 4);
        v18 = v16 + 136 * v17;
        if (*(_DWORD *)(v16 - 12))
        {
          v19 = *(_QWORD *)(v14 + 48);
          if ((_DWORD)v17)
          {
            v20 = 136 * v17;
            v19 = *(_QWORD *)(v14 + 48);
            while (*(_DWORD *)v19 >= 0xFFFFFFFE)
            {
              v19 += 136;
              v20 -= 136;
              if (!v20)
              {
                v19 = v18;
                break;
              }
            }
          }
          v94 = v13;
        }
        else
        {
          v19 = v16 + 136 * v17;
          v18 = v19;
          v94 = v13;
        }
        v21 = v16 + 136 * *(unsigned int *)(v16 - 4);
        if (v21 != v19)
        {
          v103 = v98;
          v102 = v96;
          v101 = v95;
          while (1)
          {
            BYTE8(v106) = 0;
            v107 = 0uLL;
            LODWORD(v108) = 0;
            v109 = 0;
            LOBYTE(v110) = 0;
            BYTE4(v110) = 0;
            BYTE8(v110) = 0;
            BYTE12(v110) = 0;
            LOBYTE(v111) = 0;
            BYTE4(v111) = 0;
            BYTE8(v111) = 0;
            BYTE12(v111) = 0;
            LOBYTE(v112) = 0;
            BYTE4(v112) = 0;
            BYTE8(v112) = 0;
            BYTE12(v112) = 0;
            v113[0] = 0;
            v113[4] = 0;
            v113[8] = 0;
            v113[12] = 0;
            v113[16] = 0;
            v113[20] = 0;
            v22 = *(_DWORD *)(v19 + 12);
            LODWORD(v106) = *(_DWORD *)(v19 + 8);
            BYTE8(v106) = v22;
            v23 = *(unsigned int *)(v19 + 48);
            if ((_DWORD)v23 == -1)
            {
              std::__throw_bad_variant_access[abi:sn180100]();
              __break(1u);
              goto LABEL_111;
            }
            v120 = &v119;
            ((void (*)(__int128 *__return_ptr, char **, uint64_t))off_1E0FD2170[v23])(&v104, &v120, v19 + 16);
            v107 = v104;
            v108 = v105;
            LODWORD(v110) = *(_DWORD *)(v19 + 56);
            BYTE4(v110) = *(_BYTE *)(v19 + 60);
            DWORD2(v110) = *(_DWORD *)(v19 + 80);
            BYTE12(v110) = *(_BYTE *)(v19 + 84);
            if (*(_BYTE *)(v19 + 108))
            {
              v24 = *(unsigned int *)(v19 + 104);
              if ((v24 & 3) != 0)
                goto LABEL_112;
              if (!BYTE4(v111))
                BYTE4(v111) = 1;
              LODWORD(v111) = (v24 + v98) >> 2;
              v25 = v24 + 4;
              if (v25 <= v103)
                LODWORD(v25) = v103;
              v103 = v25;
            }
            v26 = *(_DWORD *)(v19 + 64);
            BYTE12(v111) = *(_BYTE *)(v19 + 68);
            DWORD2(v111) = v26;
            LODWORD(v112) = *(_DWORD *)(v19 + 88);
            BYTE4(v112) = *(_BYTE *)(v19 + 92);
            if (*(_BYTE *)(v19 + 116))
            {
              v27 = *(unsigned int *)(v19 + 112);
              if ((v27 & 3) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x18247CC18);
              }
              if (!BYTE12(v112))
                BYTE12(v112) = 1;
              DWORD2(v112) = ((v27 + v96) >> 2) + 3;
              v28 = v27 + 4;
              if (v28 <= v102)
                LODWORD(v28) = v102;
              v102 = v28;
            }
            v29 = *(_DWORD *)(v19 + 72);
            v113[4] = *(_BYTE *)(v19 + 76);
            *(_DWORD *)v113 = v29;
            v30 = *(_DWORD *)(v19 + 96);
            v113[12] = *(_BYTE *)(v19 + 100);
            *(_DWORD *)&v113[8] = v30;
            if (*(_BYTE *)(v19 + 124))
            {
              v31 = *(unsigned int *)(v19 + 120);
              if ((v31 & 3) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x18247CC38);
              }
              if (!v113[20])
                v113[20] = 1;
              *(_DWORD *)&v113[16] = (v31 + v95) >> 2;
              v32 = v31 + 4;
              if (v32 <= v101)
                LODWORD(v32) = v101;
              v101 = v32;
            }
            v33 = HIDWORD(v116);
            if (HIDWORD(v116) == (_DWORD)v116)
            {
              v34 = WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v115, HIDWORD(v116) + 1, (unint64_t)&v106);
              v35 = HIDWORD(v116);
              v36 = v115;
              v37 = (uint64_t)v115 + 120 * HIDWORD(v116);
              v38 = *(_OWORD *)v34;
              v39 = *(_OWORD *)(v34 + 16);
              *(_QWORD *)(v37 + 32) = *(_QWORD *)(v34 + 32);
              *(_OWORD *)v37 = v38;
              *(_OWORD *)(v37 + 16) = v39;
              v40 = *(_DWORD **)(v34 + 40);
              if (v40)
                *v40 += 2;
              v41 = (uint64_t)v36 + 120 * v35;
              *(_QWORD *)(v41 + 40) = v40;
              *(_OWORD *)(v41 + 48) = *(_OWORD *)(v34 + 48);
              v42 = *(_OWORD *)(v34 + 64);
              v43 = *(_OWORD *)(v34 + 80);
              v44 = *(_OWORD *)(v34 + 96);
              *(_QWORD *)(v41 + 109) = *(_QWORD *)(v34 + 109);
              *(_OWORD *)(v41 + 80) = v43;
              *(_OWORD *)(v41 + 96) = v44;
              *(_OWORD *)(v41 + 64) = v42;
              HIDWORD(v116) = v35 + 1;
              v45 = v109;
              v109 = 0;
              if (!v45)
                goto LABEL_65;
            }
            else
            {
              v46 = v115;
              v47 = (uint64_t)v115 + 120 * HIDWORD(v116);
              v48 = v106;
              v49 = v107;
              *(_QWORD *)(v47 + 32) = v108;
              *(_OWORD *)v47 = v48;
              *(_OWORD *)(v47 + 16) = v49;
              v50 = v109;
              if (v109)
                *v109 += 2;
              v51 = (uint64_t)v46 + 120 * v33;
              *(_QWORD *)(v51 + 40) = v50;
              *(_OWORD *)(v51 + 48) = v110;
              v52 = v111;
              v53 = v112;
              v54 = *(_OWORD *)v113;
              *(_QWORD *)(v51 + 109) = *(_QWORD *)&v113[13];
              *(_OWORD *)(v51 + 80) = v53;
              *(_OWORD *)(v51 + 96) = v54;
              *(_OWORD *)(v51 + 64) = v52;
              HIDWORD(v116) = v33 + 1;
              v45 = v109;
              v109 = 0;
              if (!v45)
                goto LABEL_65;
            }
            if (*v45 != 2)
            {
              *v45 -= 2;
LABEL_65:
              v55 = v19 + 136;
              v19 = v18;
              if (v55 != v18)
                goto LABEL_68;
              goto LABEL_32;
            }
            WTF::StringImpl::destroy();
            v55 = v19 + 136;
            v19 = v18;
            if (v55 != v18)
            {
LABEL_68:
              v19 = v55;
              while (*(_DWORD *)v19 >= 0xFFFFFFFE)
              {
                v19 += 136;
                if (v19 == v18)
                {
                  v19 = v18;
                  break;
                }
              }
            }
LABEL_32:
            if (v19 == v21)
              goto LABEL_75;
          }
        }
      }
      else
      {
        v94 = v13;
      }
      v101 = v95;
      v102 = v96;
      v103 = v98;
LABEL_75:
      v56 = HIDWORD(v118);
      if (HIDWORD(v118) == (_DWORD)v118)
        break;
      v74 = v117;
      v75 = v117 + 24 * HIDWORD(v118);
      *(_DWORD *)v75 = v114;
      v76 = HIDWORD(v116);
      *(_QWORD *)(v75 + 16) = 0;
      *(_DWORD *)(v75 + 20) = v76;
      *(_QWORD *)(v75 + 8) = 0;
      v77 = (uint64_t *)(v75 + 8);
      if (!(_DWORD)v76)
        goto LABEL_91;
      v100 = v74;
      if (v76 >= 0x2222223)
      {
LABEL_112:
        __break(0xC471u);
        JUMPOUT(0x18247CBF8);
      }
      v78 = 120 * v76;
      v79 = WTF::fastMalloc((WTF *)(120 * v76));
      *(_DWORD *)(v100 + 24 * v56 + 16) = v78 / 0x78;
      *v77 = v79;
      v80 = v115;
      if (HIDWORD(v116))
      {
        v81 = (__int128 *)((char *)v115 + 120 * HIDWORD(v116));
        do
        {
          v82 = *v80;
          v83 = v80[1];
          *(_QWORD *)(v79 + 32) = *((_QWORD *)v80 + 4);
          *(_OWORD *)v79 = v82;
          *(_OWORD *)(v79 + 16) = v83;
          v84 = (_DWORD *)*((_QWORD *)v80 + 5);
          if (v84)
            *v84 += 2;
          *(_QWORD *)(v79 + 40) = v84;
          *(_OWORD *)(v79 + 48) = v80[3];
          v85 = v80[4];
          v86 = v80[5];
          v87 = v80[6];
          *(_QWORD *)(v79 + 109) = *(_QWORD *)((char *)v80 + 109);
          *(_OWORD *)(v79 + 80) = v86;
          *(_OWORD *)(v79 + 96) = v87;
          *(_OWORD *)(v79 + 64) = v85;
          v80 = (__int128 *)((char *)v80 + 120);
          v79 += 120;
        }
        while (v80 != v81);
        goto LABEL_91;
      }
      ++HIDWORD(v118);
      v12 = this;
      v91 = v94;
      if (v115)
        goto LABEL_101;
LABEL_102:
      if (*((_BYTE *)v12 + 32))
      {
        v13 = v91 + 1;
        v98 = v103;
        v96 = v102;
        v95 = v101;
        if (v13 < *((unsigned int *)v12 + 7))
          continue;
      }
      goto LABEL_6;
    }
    v57 = WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, HIDWORD(v118) + 1, (unint64_t)&v114);
    v58 = HIDWORD(v118);
    v59 = v117;
    v60 = v117 + 24 * HIDWORD(v118);
    *(_DWORD *)v60 = *(_DWORD *)v57;
    v61 = *(unsigned int *)(v57 + 20);
    *(_QWORD *)(v60 + 16) = 0;
    *(_DWORD *)(v60 + 20) = v61;
    *(_QWORD *)(v60 + 8) = 0;
    v62 = (uint64_t *)(v60 + 8);
    if ((_DWORD)v61)
    {
      v97 = v59;
      v99 = v58;
      if (v61 >= 0x2222223)
      {
LABEL_111:
        __break(0xC471u);
        JUMPOUT(0x18247CC48);
      }
      v63 = 120 * v61;
      v64 = WTF::fastMalloc((WTF *)(120 * v61));
      *(_DWORD *)(v97 + 24 * v99 + 16) = v63 / 0x78;
      *v62 = v64;
      v65 = *(_DWORD *)(v57 + 20);
      if (v65)
      {
        v66 = *(__int128 **)(v57 + 8);
        v67 = (__int128 *)((char *)v66 + 120 * v65);
        do
        {
          v68 = *v66;
          v69 = v66[1];
          *(_QWORD *)(v64 + 32) = *((_QWORD *)v66 + 4);
          *(_OWORD *)v64 = v68;
          *(_OWORD *)(v64 + 16) = v69;
          v70 = (_DWORD *)*((_QWORD *)v66 + 5);
          if (v70)
            *v70 += 2;
          *(_QWORD *)(v64 + 40) = v70;
          *(_OWORD *)(v64 + 48) = v66[3];
          v71 = v66[4];
          v72 = v66[5];
          v73 = v66[6];
          *(_QWORD *)(v64 + 109) = *(_QWORD *)((char *)v66 + 109);
          *(_OWORD *)(v64 + 80) = v72;
          *(_OWORD *)(v64 + 96) = v73;
          *(_OWORD *)(v64 + 64) = v71;
          v66 = (__int128 *)((char *)v66 + 120);
          v64 += 120;
        }
        while (v66 != v67);
      }
    }
LABEL_91:
    ++HIDWORD(v118);
    v80 = v115;
    if (HIDWORD(v116))
    {
      v88 = 120 * HIDWORD(v116);
      v89 = (_DWORD **)v115 + 5;
      v12 = this;
      do
      {
        v90 = *v89;
        *v89 = 0;
        if (v90)
        {
          if (*v90 == 2)
            WTF::StringImpl::destroy();
          else
            *v90 -= 2;
        }
        v89 += 15;
        v88 -= 120;
      }
      while (v88);
      v80 = v115;
      v91 = v94;
      if (!v115)
        goto LABEL_102;
    }
    else
    {
      v12 = this;
      v91 = v94;
      if (!v115)
        goto LABEL_102;
    }
LABEL_101:
    v115 = 0;
    LODWORD(v116) = 0;
    WTF::fastFree((WTF *)v80, v15);
    goto LABEL_102;
  }
LABEL_6:
  result = (WTF *)WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, &v117);
  v6 = v117;
  if (HIDWORD(v118))
  {
    v7 = v117 + 24 * HIDWORD(v118);
    do
    {
      v8 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v8)
      {
        v9 = 120 * v8;
        v10 = (_DWORD **)(*(_QWORD *)(v6 + 8) + 40);
        do
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (*v11 == 2)
              WTF::StringImpl::destroy();
            else
              *v11 -= 2;
          }
          v10 += 15;
          v9 -= 120;
        }
        while (v9);
      }
      result = *(WTF **)(v6 + 8);
      if (result)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        result = (WTF *)WTF::fastFree(result, v5);
      }
      v6 += 24;
    }
    while (v6 != v7);
    v6 = v117;
  }
  if (v6)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    return (WTF *)WTF::fastFree((WTF *)v6, v5);
  }
  return result;
}

void sub_18247CC54(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WGSL::PipelineLayout::~PipelineLayout((WGSL::PipelineLayout *)(v2 - 120), a2);
  _Unwind_Resume(a1);
}

void sub_18247CC6C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  void *v4;

  WGSL::BindGroupLayout::~BindGroupLayout((WGSL::BindGroupLayout *)(v2 - 144), a2);
  WGSL::PipelineLayout::~PipelineLayout((WGSL::PipelineLayout *)(v2 - 120), v4);
  _Unwind_Resume(a1);
}

void sub_18247CC88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_DWORD *a27)
{
  uint64_t v27;
  void *v29;
  void *v30;
  void *v31;

  if (a27)
  {
    if (*a27 == 2)
    {
      WTF::StringImpl::destroy();
      WGSL::BindGroupLayout::~BindGroupLayout((WGSL::BindGroupLayout *)(v27 - 144), v29);
      WGSL::PipelineLayout::~PipelineLayout((WGSL::PipelineLayout *)(v27 - 120), v30);
      _Unwind_Resume(a1);
    }
    *a27 -= 2;
  }
  WGSL::BindGroupLayout::~BindGroupLayout((WGSL::BindGroupLayout *)(v27 - 144), a2);
  WGSL::PipelineLayout::~PipelineLayout((WGSL::PipelineLayout *)(v27 - 120), v31);
  _Unwind_Resume(a1);
}

void WGSL::BindGroupLayout::~BindGroupLayout(WGSL::BindGroupLayout *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = 120 * v3;
    v5 = (_DWORD **)(*((_QWORD *)this + 1) + 40);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v5 += 15;
      v4 -= 120;
    }
    while (v4);
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, a2);
  }
}

_DWORD *WebGPU::ShaderModule::ast(WebGPU::ShaderModule *this)
{
  uint64_t v1;
  _BOOL8 v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 10);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return wgpuShaderModuleReference((_DWORD *)v3);
  }
  else
  {
    v5 = &v4;
    return (_DWORD *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebGPU12ShaderModule3astEvE3__0JZNKS9_3astEvE3__1ZNKS9_3astEvE3__2EEEEEJRKNS0_6__implIJN4WGSL15SuccessfulCheckENSG_11FailedCheckENS_9monostateEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, (char *)this + 8);
  }
}

_DWORD *wgpuShaderModuleReference(_DWORD *result)
{
  ++*result;
  return result;
}

uint64_t wgpuShaderModuleRelease(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  void *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  void *v45;
  uint64_t v46;
  WGSL::Reflection::EntryPointInformation *v47;
  _DWORD *v48;
  void *v49;
  char v50;

  v2 = result;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  v3 = *(_QWORD *)(result + 160);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD ***)(result + 160);
      do
      {
        v6 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WTF::StringImpl::destroy();
            else
              *v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *(_QWORD *)(v2 + 152);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(v2 + 152);
      while (1)
      {
        v10 = *(_DWORD **)v9;
        if (*(_QWORD *)v9 == -1)
          goto LABEL_17;
        v11 = *(_DWORD **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (!v11)
          goto LABEL_22;
        if (*v11 != 2)
          break;
        WTF::StringImpl::destroy();
        v10 = *(_DWORD **)v9;
        *(_QWORD *)v9 = 0;
        if (v10)
        {
LABEL_25:
          if (*v10 == 2)
            WTF::StringImpl::destroy();
          else
            *v10 -= 2;
        }
LABEL_17:
        v9 += 16;
        if (!--v8)
          goto LABEL_27;
      }
      *v11 -= 2;
LABEL_22:
      *(_QWORD *)v9 = 0;
      if (v10)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_27:
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }

  v13 = *(_DWORD **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  if (!v13)
  {
LABEL_31:
    v14 = *(_DWORD **)(v2 + 128);
    *(_QWORD *)(v2 + 128) = 0;
    if (!v14)
      goto LABEL_36;
    goto LABEL_34;
  }
  if (*v13 != 2)
  {
    *v13 -= 2;
    goto LABEL_31;
  }
  WTF::StringImpl::destroy();
  v14 = *(_DWORD **)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0;
  if (!v14)
    goto LABEL_36;
LABEL_34:
  if (*v14 == 2)
  {
    WTF::StringImpl::destroy();
    v15 = *(_DWORD **)(v2 + 120);
    *(_QWORD *)(v2 + 120) = 0;
    if (!v15)
      goto LABEL_41;
    goto LABEL_39;
  }
  *v14 -= 2;
LABEL_36:
  v15 = *(_DWORD **)(v2 + 120);
  *(_QWORD *)(v2 + 120) = 0;
  if (!v15)
  {
LABEL_41:
    v16 = *(_QWORD *)(v2 + 112);
    if (!v16)
      goto LABEL_42;
    goto LABEL_51;
  }
LABEL_39:
  if (*v15 != 2)
  {
    *v15 -= 2;
    goto LABEL_41;
  }
  WTF::StringImpl::destroy();
  v16 = *(_QWORD *)(v2 + 112);
  if (!v16)
  {
LABEL_42:
    v17 = *(_QWORD *)(v2 + 104);
    if (!v17)
      goto LABEL_43;
    goto LABEL_62;
  }
LABEL_51:
  v25 = *(unsigned int *)(v16 - 4);
  if ((_DWORD)v25)
  {
    v26 = v16;
    do
    {
      v27 = *(_DWORD **)v26;
      if (*(_QWORD *)v26 != -1)
      {
        v28 = *(_QWORD *)(v26 + 8);
        if (v28)
        {
          WTF::fastFree((WTF *)(v28 - 16), v12);
          v27 = *(_DWORD **)v26;
        }
        *(_QWORD *)v26 = 0;
        if (v27)
        {
          if (*v27 == 2)
            WTF::StringImpl::destroy();
          else
            *v27 -= 2;
        }
      }
      v26 += 16;
      --v25;
    }
    while (v25);
  }
  WTF::fastFree((WTF *)(v16 - 16), v12);
  v17 = *(_QWORD *)(v2 + 104);
  if (!v17)
  {
LABEL_43:
    v18 = *(_QWORD *)(v2 + 96);
    if (!v18)
      goto LABEL_44;
    goto LABEL_73;
  }
LABEL_62:
  v29 = *(unsigned int *)(v17 - 4);
  if ((_DWORD)v29)
  {
    v30 = v17;
    do
    {
      v31 = *(_DWORD **)v30;
      if (*(_QWORD *)v30 != -1)
      {
        v32 = *(_QWORD *)(v30 + 8);
        if (v32)
        {
          WTF::fastFree((WTF *)(v32 - 16), v12);
          v31 = *(_DWORD **)v30;
        }
        *(_QWORD *)v30 = 0;
        if (v31)
        {
          if (*v31 == 2)
            WTF::StringImpl::destroy();
          else
            *v31 -= 2;
        }
      }
      v30 += 16;
      --v29;
    }
    while (v29);
  }
  WTF::fastFree((WTF *)(v17 - 16), v12);
  v18 = *(_QWORD *)(v2 + 96);
  if (!v18)
  {
LABEL_44:
    v19 = *(_QWORD *)(v2 + 88);
    if (!v19)
      goto LABEL_45;
    goto LABEL_84;
  }
LABEL_73:
  v33 = *(unsigned int *)(v18 - 4);
  if ((_DWORD)v33)
  {
    v34 = v18;
    do
    {
      v35 = *(_DWORD **)v34;
      if (*(_QWORD *)v34 != -1)
      {
        v36 = *(_QWORD *)(v34 + 8);
        if (v36)
        {
          WTF::fastFree((WTF *)(v36 - 16), v12);
          v35 = *(_DWORD **)v34;
        }
        *(_QWORD *)v34 = 0;
        if (v35)
        {
          if (*v35 == 2)
            WTF::StringImpl::destroy();
          else
            *v35 -= 2;
        }
      }
      v34 += 16;
      --v33;
    }
    while (v33);
  }
  WTF::fastFree((WTF *)(v18 - 16), v12);
  v19 = *(_QWORD *)(v2 + 88);
  if (!v19)
  {
LABEL_45:
    v20 = *(_QWORD *)(v2 + 80);
    if (!v20)
      goto LABEL_46;
    goto LABEL_95;
  }
LABEL_84:
  v37 = *(unsigned int *)(v19 - 4);
  if ((_DWORD)v37)
  {
    v38 = v19;
    do
    {
      v39 = *(_DWORD **)v38;
      if (*(_QWORD *)v38 != -1)
      {
        v40 = *(_QWORD *)(v38 + 8);
        if (v40)
        {
          WTF::fastFree((WTF *)(v40 - 16), v12);
          v39 = *(_DWORD **)v38;
        }
        *(_QWORD *)v38 = 0;
        if (v39)
        {
          if (*v39 == 2)
            WTF::StringImpl::destroy();
          else
            *v39 -= 2;
        }
      }
      v38 += 16;
      --v37;
    }
    while (v37);
  }
  WTF::fastFree((WTF *)(v19 - 16), v12);
  v20 = *(_QWORD *)(v2 + 80);
  if (!v20)
  {
LABEL_46:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v2 + 72), v12);

    v22 = *(_QWORD *)(v2 + 56);
    if (!v22)
      goto LABEL_47;
LABEL_109:
    v46 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v46)
    {
      v47 = (WGSL::Reflection::EntryPointInformation *)(v22 + 8);
      do
      {
        if (*((_QWORD *)v47 - 1) != -1)
        {
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v47, v21);
          v48 = (_DWORD *)*((_QWORD *)v47 - 1);
          *((_QWORD *)v47 - 1) = 0;
          if (v48)
          {
            if (*v48 == 2)
              WTF::StringImpl::destroy();
            else
              *v48 -= 2;
          }
        }
        v47 = (WGSL::Reflection::EntryPointInformation *)((char *)v47 + 96);
        --v46;
      }
      while (v46);
    }
    WTF::fastFree((WTF *)(v22 - 16), v21);
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((uint64_t *)(v2 + 48), v49);
    v24 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v24 == -1)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_95:
  v41 = *(unsigned int *)(v20 - 4);
  if ((_DWORD)v41)
  {
    v42 = v20;
    while (1)
    {
      v43 = *(_DWORD **)v42;
      if (*(_QWORD *)v42 == -1)
        goto LABEL_98;
      v44 = *(_DWORD **)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      if (!v44)
        goto LABEL_103;
      if (*v44 != 2)
        break;
      WTF::StringImpl::destroy();
      v43 = *(_DWORD **)v42;
      *(_QWORD *)v42 = 0;
      if (v43)
      {
LABEL_106:
        if (*v43 == 2)
          WTF::StringImpl::destroy();
        else
          *v43 -= 2;
      }
LABEL_98:
      v42 += 16;
      if (!--v41)
        goto LABEL_108;
    }
    *v44 -= 2;
LABEL_103:
    *(_QWORD *)v42 = 0;
    if (v43)
      goto LABEL_106;
    goto LABEL_98;
  }
LABEL_108:
  WTF::fastFree((WTF *)(v20 - 16), v12);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)(v2 + 72), v45);

  v22 = *(_QWORD *)(v2 + 56);
  if (v22)
    goto LABEL_109;
LABEL_47:
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((uint64_t *)(v2 + 48), v21);
  v24 = *(unsigned int *)(v2 + 40);
  if ((_DWORD)v24 != -1)
LABEL_48:
    ((void (*)(char *, uint64_t))off_1E0FD2130[v24])(&v50, v2 + 8);
LABEL_49:
  *(_DWORD *)(v2 + 40) = -1;
  return WTF::fastFree((WTF *)v2, v23);
}

uint64_t wgpuShaderModuleGetCompilationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD v10[2];
  _QWORD *v11;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E0FD21E8;
  v6[1] = a2;
  v6[2] = a3;
  v9 = v6;
  v10[0] = &v9;
  v10[1] = &v9;
  v7 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v7 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v11 = v10;
    ((void (*)(_QWORD **, uint64_t))off_1E0FD21A8[v7])(&v11, a1 + 8);
    result = (uint64_t)v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_18247D364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

_DWORD *wgpuShaderModuleSetLabel(uint64_t a1, char *__s)
{
  void *v3;
  __CFString *v4;
  _DWORD *result;
  _DWORD *v6;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    if (v6)
    {
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      v3 = *(void **)(a1 + 64);
    }
    else
    {
      v4 = &stru_1E0FD9588;
    }
    objc_msgSend(v3, "setLabel:", v4);

  }
  result = v6;
  if (v6)
  {
    if (*v6 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v6 -= 2;
  }
  return result;
}

void sub_18247D438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckENS_9monostateEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  WGSL::ShaderModule *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *result;

  v3 = (WGSL::ShaderModule *)a2[2];
  a2[2] = 0;
  if (v3)
  {
    WGSL::ShaderModule::~ShaderModule(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = (_DWORD **)*a2;
    v8 = 24 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*v9 == 2)
          WTF::StringImpl::destroy();
        else
          *v9 -= 2;
      }
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckENS_9monostateEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *result;

  v3 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)a2[2];
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = (WTF *)a2[2];
  if (v7)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*a2;
    v10 = 24 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WTF::StringImpl::destroy();
        else
          *v11 -= 2;
      }
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 24 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *v15;
  WTF::StringImpl **result;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v6 = *a2;
    if (!*a2)
    {
      v7 = 0;
      v8 = *a3;
      v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = *a3;
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    goto LABEL_6;
LABEL_4:
  v10 = v9 >> 8;
LABEL_7:
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v7;
    v14 = (WTF::StringImpl **)(v6 + 8 * (v10 & v7));
    v15 = *v14;
    if (*v14 == (WTF::StringImpl *)-1)
    {
      v11 = (WTF::StringImpl **)(v6 + 8 * v13);
      goto LABEL_9;
    }
    if (!v15)
    {
      if (v11)
      {
        *v11 = 0;
        --*(_DWORD *)(*a2 - 16);
        v14 = v11;
      }
      v19 = *a3;
      *a3 = 0;
      result = (WTF::StringImpl **)*v14;
      *v14 = v19;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl **)WTF::StringImpl::destroy();
          v20 = *a2;
          if (*a2)
          {
LABEL_21:
            ++*(_DWORD *)(v20 - 12);
            v21 = *a2;
            if (*a2)
              goto LABEL_22;
            goto LABEL_31;
          }
LABEL_30:
          *(_DWORD *)(v20 - 12) = 1;
          v21 = *a2;
          if (*a2)
          {
LABEL_22:
            v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
            v23 = *(unsigned int *)(v21 - 4);
            if (v23 <= 0x400)
              goto LABEL_23;
            goto LABEL_32;
          }
LABEL_31:
          v22 = *(unsigned int *)(v21 - 16);
          v23 = *(unsigned int *)(v21 - 4);
          if (v23 <= 0x400)
          {
LABEL_23:
            if (3 * v23 > 4 * v22)
            {
LABEL_35:
              v25 = v21 + 8 * v23;
              v24 = 1;
              goto LABEL_36;
            }
            if (!(_DWORD)v23)
            {
              result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
              v14 = result;
              v21 = *a2;
              if (!*a2)
              {
LABEL_26:
                v23 = 0;
                goto LABEL_35;
              }
LABEL_34:
              v23 = *(unsigned int *)(v21 - 4);
              goto LABEL_35;
            }
LABEL_33:
            result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), v14);
            v14 = result;
            v21 = *a2;
            if (!*a2)
              goto LABEL_26;
            goto LABEL_34;
          }
LABEL_32:
          if (v23 > 2 * v22)
            goto LABEL_35;
          goto LABEL_33;
        }
        *(_DWORD *)result -= 2;
      }
      v20 = *a2;
      if (*a2)
        goto LABEL_21;
      goto LABEL_30;
    }
    result = (WTF::StringImpl **)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v10 = i + v13;
  }
  v17 = *a2;
  if (*a2)
    v18 = *(unsigned int *)(v17 - 4);
  else
    v18 = 0;
  v24 = 0;
  v25 = v17 + 8 * v18;
LABEL_36:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
          {
            v16 = *(_DWORD *)(v15 - 8);
            v17 = *((_DWORD *)v14 + 4);
            if (v17 >= 0x100)
              goto LABEL_12;
LABEL_14:
            v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            v16 = 0;
            v17 = *((_DWORD *)v14 + 4);
            if (v17 < 0x100)
              goto LABEL_14;
LABEL_12:
            v18 = v17 >> 8;
          }
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 8 * v20));
          v21 = (WTF::StringImpl **)(v15 + 8 * v20);
          *v21 = 0;
          v22 = *v13;
          *v13 = 0;
          *v21 = v22;
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
          goto LABEL_7;
        }
        *v13 = 0;
      }
LABEL_7:
      if (++v11 == v7)
        goto LABEL_25;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_25:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WGSL::ShaderModule *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *result;

  v3 = (WGSL::ShaderModule *)a2[2];
  a2[2] = 0;
  if (v3)
  {
    WGSL::ShaderModule::~ShaderModule(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = (_DWORD **)*a2;
    v8 = 24 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*v9 == 2)
          WTF::StringImpl::destroy();
        else
          *v9 -= 2;
      }
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *result;

  v3 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)a2[2];
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = (WTF *)a2[2];
  if (v7)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*a2;
    v10 = 24 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WTF::StringImpl::destroy();
        else
          *v11 -= 2;
      }
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebGPU::vertexFormatTypeForStructMember(unsigned __int8 *a1)
{
  int v1;
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (!a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18247DD08);
  }
  v1 = *((_DWORD *)a1 + 12);
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1)
      {
        if (!*((_DWORD *)v2 + 12))
        {
          switch(a1[8])
          {
            case 1u:
              goto LABEL_11;
            case 2u:
              v3 = *v2 - 1;
              if (v3 >= 5 || ((0x1Bu >> v3) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x18247DD28);
              }
              return dword_18260F324[(char)v3];
            case 3u:
              v6 = *v2 - 1;
              if (v6 >= 5 || ((0x1Bu >> v6) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x18247DD48);
              }
              return dword_18260F338[(char)v6];
            case 4u:
              v7 = *v2 - 1;
              if (v7 >= 5 || ((0x1Bu >> v7) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x18247DD68);
              }
              return dword_18260F34C[(char)v7];
            default:
              __break(0xC471u);
              JUMPOUT(0x18247DD88);
          }
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x18247DCC8);
  }
  v2 = a1;
LABEL_11:
  v5 = *v2 - 1;
  if (v5 >= 5 || ((0x1Bu >> v5) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x18247DCE8);
  }
  return dword_18260F310[(char)v5];
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_7;
  }
  v12 = a2;
  v13 = (_QWORD *)(v9 + 24);
  do
  {
    *((_DWORD *)v13 - 2) = -1;
    *v13 = 0;
    v13[1] = 0;
    v13 += 3;
    --v12;
  }
  while (v12);
LABEL_7:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (__int128 *)(v6 + 24 * v14);
      if (*(_DWORD *)v16 <= 0xFFFFFFFD)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = 0;
        v20 = 9
            * ((*(_DWORD *)v16 + ~(*(_DWORD *)v16 << 15)) ^ ((*(_DWORD *)v16 + ~(*(_DWORD *)v16 << 15)) >> 10));
        v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
        v22 = v21 ^ HIWORD(v21);
        do
        {
          v23 = v22 & v18;
          v24 = v17 + 24 * v23;
          v22 = ++v19 + v23;
        }
        while (*(_DWORD *)v24 != -1);
        v25 = *v16;
        *(_QWORD *)(v24 + 16) = *((_QWORD *)v16 + 2);
        *(_OWORD *)v24 = v25;
        if (v16 == a3)
          v15 = v24;
      }
      ++v14;
    }
    while (v14 != v7);
  }
  else
  {
    v15 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v15;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned __int8 ***v7;
  WTF *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      while (1)
      {
        v6 = *(_DWORD **)v5;
        if (*(_QWORD *)v5 == -1)
          goto LABEL_5;
        v7 = *(unsigned __int8 ****)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (!v7)
          goto LABEL_10;
        if (*(_DWORD *)v7 != 1)
          break;
        WebGPU::PipelineLayout::~PipelineLayout(v7, a2);
        WTF::fastFree(v8, v9);
        v6 = *(_DWORD **)v5;
        *(_QWORD *)v5 = 0;
        if (v6)
        {
LABEL_11:
          if (*v6 == 2)
            WTF::StringImpl::destroy();
          else
            *v6 -= 2;
        }
LABEL_5:
        v5 += 16;
        if (!--v4)
          goto LABEL_15;
      }
      --*(_DWORD *)v7;
LABEL_10:
      *(_QWORD *)v5 = 0;
      if (v6)
        goto LABEL_11;
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckENS_9monostateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckENS_9monostateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  char v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  if (v2 == 3)
    v4 = 2;
  else
    v4 = v2 == 2;
  v5 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 1) = v3 != 0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  char v3;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 2)
    v3 = 1;
  else
    v3 = 2 * (v2 == 3);
  *(_BYTE *)a2 = v3;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  char v3;
  char v4;
  unsigned int v5;
  BOOL v6;

  v2 = a1[2];
  v3 = 3;
  switch(v2)
  {
    case 0:
    case 1:
      goto LABEL_5;
    case 2:
      v3 = 1;
      v4 = 0;
      v5 = a1[3];
      if (v5 > 6)
        goto LABEL_12;
      goto LABEL_9;
    case 3:
      v3 = 2;
      goto LABEL_8;
    case 4:
      goto LABEL_8;
    case 5:
      v3 = 4;
      v4 = 0;
      v5 = a1[3];
      if (v5 > 6)
        goto LABEL_12;
      goto LABEL_9;
    default:
      if (v2 == 0x7FFFFFFF)
      {
LABEL_5:
        v3 = 0;
        v4 = 0;
        v5 = a1[3];
        if (v5 > 6)
        {
LABEL_12:
          if (v5 == 0x7FFFFFFF)
LABEL_13:
            v4 = 1;
          goto LABEL_16;
        }
      }
      else
      {
LABEL_8:
        v4 = 0;
        v5 = a1[3];
      }
LABEL_9:
      switch(v5)
      {
        case 0u:
        case 2u:
          goto LABEL_13;
        case 1u:
        case 4u:
          break;
        case 3u:
          v4 = 2;
          break;
        case 5u:
          v4 = 4;
          break;
        case 6u:
          v4 = 5;
          break;
        default:
          goto LABEL_12;
      }
LABEL_16:
      v6 = a1[4] != 0;
      *(_BYTE *)a2 = v3;
      *(_BYTE *)(a2 + 1) = v4;
      *(_BYTE *)(a2 + 2) = v6;
      *(_DWORD *)(a2 + 16) = 2;
      return;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  char v2;
  int v3;
  int v4;
  char v5;
  char v6;
  unsigned int v7;

  v2 = 0;
  v3 = a1[2];
  if (v3 <= 2)
  {
    if (v3 == 2)
    {
      v2 = 1;
      goto LABEL_7;
    }
    if (v3)
      goto LABEL_7;
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x18247E2B0);
  }
  if (v3 == 3)
  {
    v2 = 2;
    goto LABEL_7;
  }
  if (v3 == 0x7FFFFFFF)
    goto LABEL_16;
LABEL_7:
  v4 = a1[3] - 12;
  if (v4 <= 0x19)
  {
    v5 = byte_18260F360[v4];
    v6 = 0;
    v7 = a1[4];
    goto LABEL_9;
  }
  v5 = 0;
  v6 = 0;
  v7 = a1[4];
  if (v7 <= 6)
  {
LABEL_9:
    switch(v7)
    {
      case 0u:
      case 2u:
        goto LABEL_14;
      case 1u:
      case 4u:
        goto LABEL_11;
      case 3u:
        v6 = 2;
        goto LABEL_11;
      case 5u:
        *(_BYTE *)a2 = v2;
        *(_BYTE *)(a2 + 1) = v5;
        *(_BYTE *)(a2 + 2) = 4;
        *(_DWORD *)(a2 + 16) = 3;
        break;
      case 6u:
        *(_BYTE *)a2 = v2;
        *(_BYTE *)(a2 + 1) = v5;
        *(_BYTE *)(a2 + 2) = 5;
        *(_DWORD *)(a2 + 16) = 3;
        break;
      default:
        goto LABEL_13;
    }
    return;
  }
LABEL_13:
  if (v7 == 0x7FFFFFFF)
  {
LABEL_14:
    *(_BYTE *)a2 = v2;
    *(_BYTE *)(a2 + 1) = v5;
    *(_BYTE *)(a2 + 2) = 1;
    *(_DWORD *)(a2 + 16) = 3;
  }
  else
  {
LABEL_11:
    *(_BYTE *)a2 = v2;
    *(_BYTE *)(a2 + 1) = v5;
    *(_BYTE *)(a2 + 2) = v6;
    *(_DWORD *)(a2 + 16) = 3;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_0,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_1,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_2,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_3,WebGPU::convertBindingLayout(std::variant<WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGPUBufferBindingLayout,WGPUSamplerBindingLayout,WGPUTextureBindingLayout,WGPUStorageTextureBindingLayout,WGPUExternalTextureBindingLayout> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::ShaderModule::convertCheckResult(std::variant<WGSL::SuccessfulCheck,WGSL::FailedCheck> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::SuccessfulCheck,WGSL::FailedCheck> &&>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v3;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = *(double *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(double *)(a2 + 8) = result;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::ShaderModule::convertCheckResult(std::variant<WGSL::SuccessfulCheck,WGSL::FailedCheck> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::SuccessfulCheck,WGSL::FailedCheck> &&>@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = *(_QWORD *)a1;
  *a1 = 0.0;
  *(_QWORD *)a2 = v2;
  v3 = *((_QWORD *)a1 + 1);
  a1[1] = 0.0;
  *(_QWORD *)(a2 + 8) = v3;
  v4 = *((_QWORD *)a1 + 2);
  a1[2] = 0.0;
  *(_QWORD *)(a2 + 16) = v4;
  result = a1[3];
  a1[3] = 0.0;
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = 1;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebGPU::ShaderModule::ShaderModuleState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebGPU::ShaderModule::ShaderModuleState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_7;
  }
  v12 = a2;
  v13 = v9 + 24;
  do
  {
    *(_QWORD *)(v13 - 8) = 0;
    *(_BYTE *)(v13 + 4) = 0;
    *(_DWORD *)v13 = 0;
    v13 += 16;
    --v12;
  }
  while (v12);
LABEL_7:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = (WTF::StringImpl **)(v6 + 16 * v14);
      v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          v18 = *a1;
          if (*a1)
          {
            v19 = *(_DWORD *)(v18 - 8);
            v20 = *((_DWORD *)v17 + 4);
            if (v20 >= 0x100)
              goto LABEL_15;
LABEL_17:
            v21 = WTF::StringImpl::hashSlowCase(v17);
          }
          else
          {
            v19 = 0;
            v20 = *((_DWORD *)v17 + 4);
            if (v20 < 0x100)
              goto LABEL_17;
LABEL_15:
            v21 = v20 >> 8;
          }
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v21 = ++v22 + v23;
          }
          while (*(_QWORD *)(v18 + 16 * v23));
          v24 = v18 + 16 * v23;
          *(_QWORD *)v24 = 0;
          v25 = *v16;
          *v16 = 0;
          *(_QWORD *)v24 = v25;
          v26 = v6 + 16 * v14;
          v27 = *(_DWORD *)(v26 + 8);
          *(_BYTE *)(v24 + 12) = *(_BYTE *)(v26 + 12);
          *(_DWORD *)(v24 + 8) = v27;
          v28 = *v16;
          *v16 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v16 == a3)
            v15 = v24;
          goto LABEL_10;
        }
        *v16 = 0;
      }
LABEL_10:
      if (++v14 == v7)
        goto LABEL_28;
    }
  }
  v15 = 0;
  result = 0;
  if (v6)
  {
LABEL_28:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v15;
  }
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = 16 * a2;
    v9 = WTF::fastMalloc((WTF *)(v7 + 16));
    v10 = (void *)(v9 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  v6 = 0;
  v7 = 16 * a2;
  v9 = WTF::fastMalloc((WTF *)(v7 + 16));
  v10 = (void *)(v9 + 16);
  if (a2)
LABEL_3:
    bzero(v10, v7);
LABEL_4:
  *a1 = (uint64_t)v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 == (WTF::StringImpl *)-1)
        goto LABEL_7;
      if (v14)
        break;
      v15 = *(_QWORD *)(v4 + 16 * v11 + 8);
      if (v15)
      {
        WTF::fastFree((WTF *)(v15 - 16), v8);
        v14 = *v13;
      }
      *v13 = 0;
      if (!v14)
        goto LABEL_7;
      if (*(_DWORD *)v14 == 2)
      {
LABEL_33:
        WTF::StringImpl::destroy();
        goto LABEL_7;
      }
      *(_DWORD *)v14 -= 2;
LABEL_7:
      if (++v11 == v12)
        goto LABEL_37;
    }
    v16 = *a1;
    if (*a1)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = *((_DWORD *)v14 + 4);
      if (v18 >= 0x100)
      {
LABEL_17:
        v19 = v18 >> 8;
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *((_DWORD *)v14 + 4);
      if (v18 >= 0x100)
        goto LABEL_17;
    }
    v19 = WTF::StringImpl::hashSlowCase(v14);
LABEL_21:
    v20 = 0;
    do
    {
      v21 = v19 & v17;
      v19 = ++v20 + v21;
    }
    while (*(_QWORD *)(v16 + 16 * v21));
    v22 = v16 + 16 * v21;
    v24 = (_QWORD *)(v22 + 8);
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      WTF::fastFree((WTF *)(v23 - 16), v8);
      v25 = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
      if (v25)
      {
        if (*v25 == 2)
          WTF::StringImpl::destroy();
        else
          *v25 -= 2;
      }
    }
    else
    {
      *(_QWORD *)v22 = 0;
    }
    v26 = *v13;
    *v13 = 0;
    *(_QWORD *)v22 = v26;
    v27 = v4 + 16 * v11;
    *v24 = 0;
    v28 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)(v27 + 8) = 0;
    *v24 = v28;
    v29 = *(_QWORD *)(v27 + 8);
    if (v29)
      WTF::fastFree((WTF *)(v29 - 16), v8);
    v30 = *v13;
    *v13 = 0;
    if (!v30)
      goto LABEL_7;
    if (*(_DWORD *)v30 == 2)
      goto LABEL_33;
    *(_DWORD *)v30 -= 2;
    goto LABEL_7;
  }
  if (v4)
LABEL_37:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = 16 * a2;
    v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    v12 = (void *)(v11 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = 0;
  v9 = 16 * a2;
  v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  v12 = (void *)(v11 + 16);
  if (a2)
LABEL_3:
    bzero(v12, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    while (1)
    {
      v16 = (WTF::StringImpl **)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          v19 = *a1;
          if (*a1)
          {
            v20 = *(_DWORD *)(v19 - 8);
            v21 = *((_DWORD *)v17 + 4);
            if (v21 >= 0x100)
              goto LABEL_19;
LABEL_22:
            v22 = WTF::StringImpl::hashSlowCase(v17);
          }
          else
          {
            v20 = 0;
            v21 = *((_DWORD *)v17 + 4);
            if (v21 < 0x100)
              goto LABEL_22;
LABEL_19:
            v22 = v21 >> 8;
          }
          v23 = 0;
          do
          {
            v24 = v22 & v20;
            v22 = ++v23 + v24;
          }
          while (*(_QWORD *)(v19 + 16 * v24));
          v25 = v19 + 16 * v24;
          v27 = (_QWORD *)(v25 + 8);
          v26 = *(_QWORD *)(v25 + 8);
          if (v26)
          {
            WTF::fastFree((WTF *)(v26 - 16), v10);
            v28 = *(_DWORD **)v25;
            *(_QWORD *)v25 = 0;
            if (v28)
            {
              if (*v28 == 2)
                WTF::StringImpl::destroy();
              else
                *v28 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v25 = 0;
          }
          v29 = *v16;
          *v16 = 0;
          *(_QWORD *)v25 = v29;
          v30 = v6 + 16 * v13;
          *v27 = 0;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *v27 = v31;
          v32 = *(_QWORD *)(v30 + 8);
          if (v32)
            WTF::fastFree((WTF *)(v32 - 16), v10);
          v33 = *v16;
          *v16 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v16 == a3)
            v14 = v25;
          goto LABEL_9;
        }
        v18 = *(_QWORD *)(v6 + 16 * v13 + 8);
        if (v18)
        {
          WTF::fastFree((WTF *)(v18 - 16), v10);
          v17 = *v16;
        }
        *v16 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v17 -= 2;
        }
      }
LABEL_9:
      if (++v13 == v15)
        goto LABEL_39;
    }
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_39:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::ShaderModule::getCompilationInfo(WTF::CompletionHandler<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const&)> &&)::$_0,WebGPU::ShaderModule::getCompilationInfo(WTF::CompletionHandler<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const&)> &)::$_1,WebGPU::ShaderModule::getCompilationInfo(WTF::CompletionHandler<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const&)> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::SuccessfulCheck,std::__variant_detail::__base::FailedCheck,std::monostate> const&>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v2;
  double v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  _DWORD *result;
  void *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  _DWORD **v13;
  _QWORD v14[2];
  WTF *v15;
  uint64_t v16;
  int v17;
  WTF *v18;
  unsigned int v19;
  WTF *v20;
  unsigned int v21;

  v2 = *a1;
  v16 = a2;
  v17 = 1;
  LOBYTE(v14[0]) = 0;
  LOBYTE(v15) = 0;
  v3 = WebGPU::convertMessages((double *)&v18, &v16, v14);
  v4 = v19;
  v14[0] = 0;
  v14[1] = v19;
  v5 = v18;
  v15 = v18;
  v6 = **v2;
  **v2 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD *, double))(*(_QWORD *)v6 + 16))(v6, 0, v14, v3);
  result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v9 = v20;
  if (v21)
  {
    v10 = 8 * v21;
    v11 = v20;
    do
    {
      result = *(_DWORD **)v11;
      *(_QWORD *)v11 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
      }
      v11 = (WTF *)((char *)v11 + 8);
      v10 -= 8;
    }
    while (v10);
  }
  if (v9)
    result = (_DWORD *)WTF::fastFree(v9, v8);
  if ((_DWORD)v4)
  {
    v12 = 80 * v4;
    v13 = (_DWORD **)((char *)v5 + 8);
    do
    {
      result = *v13;
      *v13 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
      }
      v13 += 10;
      v12 -= 80;
    }
    while (v12);
  }
  if (v5)
    return (_DWORD *)WTF::fastFree(v5, v8);
  return result;
}

void sub_18247EAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, unsigned int a19)
{
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  WTF *v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD **v28;
  _DWORD *v29;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a19)
  {
    v24 = 8 * a19;
    v25 = a17;
    do
    {
      v26 = *(_DWORD **)v25;
      *(_QWORD *)v25 = 0;
      if (v26)
      {
        if (*v26 == 2)
          WTF::StringImpl::destroy();
        else
          *v26 -= 2;
      }
      v25 = (WTF *)((char *)v25 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  if (a17)
    WTF::fastFree(a17, v23);
  if ((_DWORD)v21)
  {
    v27 = 80 * v21;
    v28 = (_DWORD **)((char *)v19 + 8);
    do
    {
      v29 = *v28;
      *v28 = 0;
      if (v29)
      {
        if (*v29 == 2)
          WTF::StringImpl::destroy();
        else
          *v29 -= 2;
      }
      v28 += 10;
      v27 -= 80;
    }
    while (v27);
  }
  if (v19)
    WTF::fastFree(v19, v23);
  _Unwind_Resume(a1);
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::ShaderModule::getCompilationInfo(WTF::CompletionHandler<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const&)> &&)::$_0,WebGPU::ShaderModule::getCompilationInfo(WTF::CompletionHandler<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const&)> &)::$_1,WebGPU::ShaderModule::getCompilationInfo(WTF::CompletionHandler<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const&)> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::SuccessfulCheck,std::__variant_detail::__base::FailedCheck,std::monostate> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  WTF *v5;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *result;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  WTF *v20;
  unsigned int v21;
  WTF *v22;
  unsigned int v23;

  v2 = *a1;
  v18 = a2;
  v19 = 0;
  v15 = a2 + 16;
  LODWORD(v16) = 1;
  LOBYTE(v17) = 1;
  v3 = WebGPU::convertMessages((double *)&v20, &v18, &v15);
  v4 = v21;
  v15 = 0;
  v16 = v21;
  v5 = v20;
  v17 = v20;
  v6 = *(uint64_t **)(v2 + 8);
  v7 = *v6;
  *v6 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, double))(*(_QWORD *)v7 + 16))(v7, 1, &v15, v3);
  result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v10 = v22;
  if (v23)
  {
    v11 = 8 * v23;
    v12 = v22;
    do
    {
      result = *(_DWORD **)v12;
      *(_QWORD *)v12 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
      }
      v12 = (WTF *)((char *)v12 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  if (v10)
    result = (_DWORD *)WTF::fastFree(v10, v9);
  if ((_DWORD)v4)
  {
    v13 = 80 * v4;
    v14 = (_DWORD **)((char *)v5 + 8);
    do
    {
      result = *v14;
      *v14 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
      }
      v14 += 10;
      v13 -= 80;
    }
    while (v13);
  }
  if (v5)
    return (_DWORD *)WTF::fastFree(v5, v9);
  return result;
}

void sub_18247ED00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, unsigned int a19)
{
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  WTF *v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD **v28;
  _DWORD *v29;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a19)
  {
    v24 = 8 * a19;
    v25 = a17;
    do
    {
      v26 = *(_DWORD **)v25;
      *(_QWORD *)v25 = 0;
      if (v26)
      {
        if (*v26 == 2)
          WTF::StringImpl::destroy();
        else
          *v26 -= 2;
      }
      v25 = (WTF *)((char *)v25 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  if (a17)
    WTF::fastFree(a17, v23);
  if ((_DWORD)v21)
  {
    v27 = 80 * v21;
    v28 = (_DWORD **)((char *)v19 + 8);
    do
    {
      v29 = *v28;
      *v28 = 0;
      if (v29)
      {
        if (*v29 == 2)
          WTF::StringImpl::destroy();
        else
          *v29 -= 2;
      }
      v28 += 10;
      v27 -= 80;
    }
    while (v27);
  }
  if (v19)
    WTF::fastFree(v19, v23);
  _Unwind_Resume(a1);
}

double WebGPU::convertMessages(double *a1, _DWORD *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  double result;
  uint64_t v23[2];
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0.0;
  v6 = *(unsigned int *)(*(_QWORD *)a2 + 12);
  if (!(_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    if (!a3[16])
      goto LABEL_22;
    goto LABEL_13;
  }
  v7 = 0;
  v8 = 0;
  v9 = **(_QWORD ***)a2;
  v10 = 24 * v6;
  do
  {
    while (v8 == LODWORD(v25))
    {
      v11 = (_DWORD **)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, v8 + 1, (unint64_t)v9);
      v12 = HIDWORD(v25);
      v7 = v24;
      v13 = *v11;
      if (*v11)
        *v13 += 2;
      *(_QWORD *)(v7 + 8 * v12) = v13;
      v8 = v12 + 1;
      HIDWORD(v25) = v8;
      v9 += 3;
      v10 -= 24;
      if (!v10)
        goto LABEL_10;
    }
    v14 = (_DWORD *)*v9;
    if (*v9)
      *v14 += 2;
    *(_QWORD *)(v7 + 8 * v8++) = v14;
    HIDWORD(v25) = v8;
    v9 += 3;
    v10 -= 24;
  }
  while (v10);
LABEL_10:
  if (a3[16])
  {
LABEL_13:
    v15 = *(unsigned int *)(*(_QWORD *)a3 + 12);
    if ((_DWORD)v15)
    {
      v16 = **(_QWORD ***)a3;
      v17 = 24 * v15;
      do
      {
        while (v8 == LODWORD(v25))
        {
          v18 = (_DWORD **)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, v8 + 1, (unint64_t)v16);
          v19 = HIDWORD(v25);
          v7 = v24;
          v20 = *v18;
          if (*v18)
            *v20 += 2;
          *(_QWORD *)(v7 + 8 * v19) = v20;
          v8 = v19 + 1;
          HIDWORD(v25) = v8;
          v16 += 3;
          v17 -= 24;
          if (!v17)
            goto LABEL_22;
        }
        v21 = (_DWORD *)*v16;
        if (*v16)
          *v21 += 2;
        *(_QWORD *)(v7 + 8 * v8++) = v21;
        HIDWORD(v25) = v8;
        v16 += 3;
        v17 -= 24;
      }
      while (v17);
    }
  }
LABEL_22:
  v23[0] = (uint64_t)&v26;
  v23[1] = (uint64_t)&v24;
  WebGPU::convertMessages(WebGPU::Messages const&,std::optional<WebGPU::Messages> const&)::$_1::operator()(v23, a2, 0);
  if (a3[16])
    WebGPU::convertMessages(WebGPU::Messages const&,std::optional<WebGPU::Messages> const&)::$_1::operator()(v23, a3, *(unsigned int *)(*(_QWORD *)a2 + 12));
  *(_QWORD *)a1 = v26;
  *((_QWORD *)a1 + 1) = v27;
  *((_QWORD *)a1 + 2) = v24;
  result = v25;
  a1[3] = v25;
  return result;
}

void sub_18247EFC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)va1, v5);
  _Unwind_Resume(a1);
}

uint64_t *WebGPU::convertMessages(WebGPU::Messages const&,std::optional<WebGPU::Messages> const&)::$_1::operator()(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[32];

  v3 = *(uint64_t **)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 12))
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    v9 = 8 * a3;
    while (1)
    {
      v10 = *v3;
      v24 = 0;
      v12 = *v6;
      v11 = v6[1];
      if (a3 + v8 >= *(unsigned int *)(v11 + 12))
        break;
      v13 = *(uint64_t **)(*(_QWORD *)v11 + v9 + 8 * v8);
      if (v13)
        *(_DWORD *)v13 += 2;
      v25 = v13;
      LODWORD(v26) = a2[2];
      v14 = (unsigned int *)(v10 + v7);
      *((_QWORD *)&v26 + 1) = v14[2];
      *(_QWORD *)&v27 = v14[3];
      *((_QWORD *)&v27 + 1) = v14[4];
      *(_QWORD *)v28 = v14[5];
      *(_OWORD *)&v28[8] = v27;
      *(_QWORD *)&v28[24] = *(_QWORD *)v28;
      v15 = *(unsigned int *)(v12 + 12);
      if ((_DWORD)v15 == *(_DWORD *)(v12 + 8))
      {
        v16 = WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v15 + 1, (unint64_t)&v24);
        v17 = *(_QWORD *)v12 + 80 * *(unsigned int *)(v12 + 12);
        *(_QWORD *)v17 = *(_QWORD *)v16;
        v18 = *(_QWORD *)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v17 + 8) = v18;
        v19 = *(_OWORD *)(v16 + 16);
        v20 = *(_OWORD *)(v16 + 32);
        v21 = *(_OWORD *)(v16 + 48);
        v22 = *(_OWORD *)(v16 + 64);
      }
      else
      {
        v17 = *(_QWORD *)v12 + 80 * v15;
        *(_QWORD *)v17 = 0;
        v23 = v25;
        v25 = 0;
        *(_QWORD *)(v17 + 8) = v23;
        v19 = v26;
        v20 = v27;
        v21 = *(_OWORD *)v28;
        v22 = *(_OWORD *)&v28[16];
      }
      *(_OWORD *)(v17 + 48) = v21;
      *(_OWORD *)(v17 + 64) = v22;
      *(_OWORD *)(v17 + 16) = v19;
      *(_OWORD *)(v17 + 32) = v20;
      ++*(_DWORD *)(v12 + 12);
      result = v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (uint64_t *)WTF::StringImpl::destroy();
        else
          *(_DWORD *)result -= 2;
      }
      ++v8;
      v3 = *(uint64_t **)a2;
      v7 += 24;
      if (v8 >= *(unsigned int *)(*(_QWORD *)a2 + 12))
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

void sub_18247F188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    v5 = (_DWORD **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v5 += 10;
      v4 -= 80;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 80 * a2;
      result = WTF::fastMalloc((WTF *)(80 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 80 * v4);
        v9 = v3;
        do
        {
          *(_QWORD *)v7 = *(_QWORD *)v9;
          v10 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *(_QWORD *)(v7 + 8) = v10;
          v11 = *((_OWORD *)v9 + 1);
          v12 = *((_OWORD *)v9 + 2);
          v13 = *((_OWORD *)v9 + 4);
          *(_OWORD *)(v7 + 48) = *((_OWORD *)v9 + 3);
          *(_OWORD *)(v7 + 64) = v13;
          *(_OWORD *)(v7 + 16) = v11;
          *(_OWORD *)(v7 + 32) = v12;
          result = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy();
            else
              *(_DWORD *)result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 80);
          v7 += 80;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x2222223)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 120 * a2;
    v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v3 + 120 * v4);
      v10 = v3;
      do
      {
        v11 = *(_OWORD *)v10;
        v12 = *((_OWORD *)v10 + 1);
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v10 + 4);
        *(_OWORD *)v8 = v11;
        *(_OWORD *)(v8 + 16) = v12;
        v13 = *((_QWORD *)v10 + 5);
        *((_QWORD *)v10 + 5) = 0;
        *(_QWORD *)(v8 + 40) = v13;
        *(_OWORD *)(v8 + 48) = *((_OWORD *)v10 + 3);
        v14 = *((_OWORD *)v10 + 4);
        v15 = *((_OWORD *)v10 + 5);
        v16 = *((_OWORD *)v10 + 6);
        *(_QWORD *)(v8 + 109) = *(_QWORD *)((char *)v10 + 109);
        *(_OWORD *)(v8 + 80) = v15;
        *(_OWORD *)(v8 + 96) = v16;
        *(_OWORD *)(v8 + 64) = v14;
        v17 = (_DWORD *)*((_QWORD *)v10 + 5);
        *((_QWORD *)v10 + 5) = 0;
        if (v17)
        {
          if (*v17 == 2)
            WTF::StringImpl::destroy();
          else
            *v17 -= 2;
        }
        v10 = (WTF *)((char *)v10 + 120);
        v8 += 120;
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  WTF *v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0xAAAAAAB)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v3 + 24 * v4);
      v10 = v3;
      do
      {
        *(_DWORD *)v8 = *(_DWORD *)v10;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        v11 = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        *(_QWORD *)(v8 + 8) = v11;
        LODWORD(v11) = *((_DWORD *)v10 + 4);
        *((_DWORD *)v10 + 4) = 0;
        *(_DWORD *)(v8 + 16) = v11;
        LODWORD(v11) = *((_DWORD *)v10 + 5);
        *((_DWORD *)v10 + 5) = 0;
        *(_DWORD *)(v8 + 20) = v11;
        v12 = *((unsigned int *)v10 + 5);
        if ((_DWORD)v12)
        {
          v13 = 120 * v12;
          v14 = (_DWORD **)(*((_QWORD *)v10 + 1) + 40);
          do
          {
            v15 = *v14;
            *v14 = 0;
            if (v15)
            {
              if (*v15 == 2)
                WTF::StringImpl::destroy();
              else
                *v15 -= 2;
            }
            v14 += 15;
            v13 -= 120;
          }
          while (v13);
        }
        v16 = (WTF *)*((_QWORD *)v10 + 1);
        if (v16)
        {
          *((_QWORD *)v10 + 1) = 0;
          *((_DWORD *)v10 + 4) = 0;
          WTF::fastFree(v16, v7);
        }
        v8 += 24;
        v10 = (WTF *)((char *)v10 + 24);
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::ShaderModule::ast(void)::$_0,WebGPU::ShaderModule::ast(void)::$_1,WebGPU::ShaderModule::ast(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::SuccessfulCheck,std::__variant_detail::_Trait::FailedCheck,std::monostate> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::ShaderModule::ast(void)::$_0,WebGPU::ShaderModule::ast(void)::$_1,WebGPU::ShaderModule::ast(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::SuccessfulCheck,std::__variant_detail::_Trait::FailedCheck,std::monostate> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebGPU::ShaderModule::ast(void)::$_0,WebGPU::ShaderModule::ast(void)::$_1,WebGPU::ShaderModule::ast(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::SuccessfulCheck,std::__variant_detail::_Trait::FailedCheck,std::monostate> const&>()
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<wgpuShaderModuleGetCompilationInfo::$_0,void,WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 8))(a2, a3, *(_QWORD *)(a1 + 16));
}

BOOL WebGPU::Texture::isCompressedFormat(int a1)
{
  _BOOL4 v1;

  v1 = a1 != 0x7FFFFFFF;
  if (!a1)
    v1 = 0;
  return (a1 - 1) >= 0x2B && v1;
}

uint64_t WebGPU::Texture::texelBlockWidth(int a1)
{
  uint64_t result;

  result = 4;
  switch(a1)
  {
    case 0:
      result = 0;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      result = 1;
      break;
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
      return result;
    case 70:
    case 71:
    case 72:
    case 73:
      result = 5;
      break;
    case 74:
    case 75:
    case 76:
    case 77:
      result = 6;
      break;
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
      result = 8;
      break;
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
      result = 10;
      break;
    case 92:
    case 93:
    case 94:
    case 95:
      result = 12;
      break;
    default:
      if (a1 == 0x7FFFFFFF)
        result = 0;
      else
        result = 4;
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::texelBlockHeight(int a1)
{
  uint64_t result;

  result = 4;
  switch(a1)
  {
    case 0:
      result = 0;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      result = 1;
      break;
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
      return result;
    case 72:
    case 73:
    case 74:
    case 75:
    case 78:
    case 79:
    case 84:
    case 85:
      result = 5;
      break;
    case 76:
    case 77:
    case 80:
    case 81:
    case 86:
    case 87:
      result = 6;
      break;
    case 82:
    case 83:
    case 88:
    case 89:
      result = 8;
      break;
    case 90:
    case 91:
    case 92:
    case 93:
      result = 10;
      break;
    case 94:
    case 95:
      result = 12;
      break;
    default:
      if (a1 == 0x7FFFFFFF)
        result = 0;
      else
        result = 4;
      break;
  }
  return result;
}

BOOL WebGPU::Texture::isColorRenderableFormat(int a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;

  if ((a1 - 44) < 0x34)
    return 0;
  result = 1;
  switch(a1)
  {
    case 0:
    case 2:
    case 9:
    case 20:
    case 28:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return 0;
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return result;
    case 27:
      v4 = *(unsigned int *)(a2 + 228);
      if (!(_DWORD)v4)
        return 0;
      v5 = *(int **)(a2 + 216);
      v6 = v4 - 1;
      do
      {
        v7 = *v5++;
        result = v7 == 9;
      }
      while (v7 != 9 && v6-- != 0);
      break;
    default:
      result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

BOOL WebGPU::Texture::isRenderableFormat(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  int v5;

  if ((result - 44) < 0x34)
    return 0;
  if (result > 0x1C)
    return (_DWORD)result != 0x7FFFFFFF;
  if (((1 << result) & 0x10100204) != 0)
    return 0;
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result != 27)
    return (_DWORD)result != 0x7FFFFFFF;
  v2 = *(unsigned int *)(a2 + 228);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(int **)(a2 + 216);
  v4 = v2 - 1;
  do
  {
    v5 = *v3++;
    result = v5 == 9;
  }
  while (v5 != 9 && v4-- != 0);
  return result;
}

uint64_t WebGPU::Texture::renderTargetPixelByteCost(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
    case 2:
    case 9:
    case 20:
    case 28:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      result = 0;
      break;
    case 1:
    case 3:
    case 4:
      return result;
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
      result = 2;
      break;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 21:
    case 22:
      result = 4;
      break;
    case 18:
    case 19:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      result = 8;
      break;
    case 35:
    case 36:
    case 37:
      result = 16;
      break;
    default:
      result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::renderTargetPixelByteAlignment(int a1)
{
  uint64_t result;

  if ((a1 - 38) < 0x3A)
    return 0;
  result = 1;
  switch(a1)
  {
    case 0:
    case 2:
    case 9:
    case 20:
    case 28:
      return 0;
    case 1:
    case 3:
    case 4:
    case 8:
    case 10:
    case 11:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
      return result;
    case 5:
    case 6:
    case 7:
    case 15:
    case 16:
    case 17:
    case 32:
    case 33:
    case 34:
      result = 2;
      break;
    case 12:
    case 13:
    case 14:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 35:
    case 36:
    case 37:
      result = 4;
      break;
    default:
      result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

BOOL WebGPU::Texture::supportsMultisampling(unsigned int a1, int *a2, unsigned int a3)
{
  _BOOL8 result;
  uint64_t v4;
  int v5;

  if (a1 - 44 < 0x34)
    return 0;
  if (a1 > 0x25)
    return a1 != 0x7FFFFFFF;
  if (((1 << a1) & 0x38F0006000) != 0 || !a1)
    return 0;
  if (a1 != 27)
    return a1 != 0x7FFFFFFF;
  if (!a3)
    return 0;
  v4 = a3 - 1;
  do
  {
    v5 = *a2++;
    result = v5 == 9;
  }
  while (v5 != 9 && v4-- != 0);
  return result;
}

uint64_t WebGPU::Texture::supportsResolve(unsigned int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;

  if (a1 - 35 < 0x3D)
    return 0;
  if (a1 > 0x21)
    goto LABEL_15;
  if (((1 << a1) & 0x3F271FE7CLL) != 0 || !a1)
    return 0;
  if (a1 != 27)
  {
LABEL_15:
    if (a1 != 0x7FFFFFFF)
      return 1;
    result = 1405;
    __break(0xC471u);
    return result;
  }
  v3 = *(unsigned int *)(a2 + 228);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(int **)(a2 + 216);
  v5 = v3 - 1;
  do
  {
    v6 = *v4++;
    result = v6 == 9;
  }
  while (v6 != 9 && v5-- != 0);
  return result;
}

BOOL WebGPU::Texture::supportsBlending(unsigned int a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;

  if (a1 - 35 < 0x3D)
    return 0;
  if (a1 > 0x21)
    return a1 != 0x7FFFFFFF;
  if (((1 << a1) & 0x3F271FE7CLL) != 0 || !a1)
    return 0;
  if (a1 != 27)
    return a1 != 0x7FFFFFFF;
  v3 = *(unsigned int *)(a2 + 228);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(int **)(a2 + 216);
  v5 = v3 - 1;
  do
  {
    v6 = *v4++;
    result = v6 == 9;
  }
  while (v6 != 9 && v5-- != 0);
  return result;
}

BOOL WebGPU::Texture::hasStorageBindingCapability(int a1, uint64_t a2, int a3)
{
  _BOOL8 result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;

  result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
    case 19:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      goto LABEL_2;
    case 12:
    case 13:
    case 14:
      return result;
    case 18:
    case 20:
    case 21:
    case 22:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      result = a3 != 3;
      break;
    case 23:
      if (a3 == 3 || (v5 = *(unsigned int *)(a2 + 228), !(_DWORD)v5))
      {
LABEL_2:
        result = 0;
      }
      else
      {
        v6 = *(int **)(a2 + 216);
        v7 = v5 - 1;
        do
        {
          v8 = *v6++;
          result = v8 == 10;
        }
        while (v8 != 10 && v7-- != 0);
      }
      break;
    default:
      result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::removeSRGBSuffix(uint64_t result)
{
  switch((int)result)
  {
    case 0:
      result = 0;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 64:
    case 65:
    case 66:
    case 67:
      return result;
    case 18:
    case 19:
      result = 18;
      break;
    case 23:
    case 24:
      result = 23;
      break;
    case 44:
    case 45:
      result = 44;
      break;
    case 46:
    case 47:
      result = 46;
      break;
    case 48:
    case 49:
      result = 48;
      break;
    case 56:
    case 57:
      result = 56;
      break;
    case 58:
    case 59:
      result = 58;
      break;
    case 60:
    case 61:
      result = 60;
      break;
    case 62:
    case 63:
      result = 62;
      break;
    case 68:
    case 69:
      result = 68;
      break;
    case 70:
    case 71:
      result = 70;
      break;
    case 72:
    case 73:
      result = 72;
      break;
    case 74:
    case 75:
      result = 74;
      break;
    case 76:
    case 77:
      result = 76;
      break;
    case 78:
    case 79:
      result = 78;
      break;
    case 80:
    case 81:
      result = 80;
      break;
    case 82:
    case 83:
      result = 82;
      break;
    case 84:
    case 85:
      result = 84;
      break;
    case 86:
    case 87:
      result = 86;
      break;
    case 88:
    case 89:
      result = 88;
      break;
    case 90:
    case 91:
      result = 90;
      break;
    case 92:
    case 93:
      result = 92;
      break;
    case 94:
    case 95:
      result = 94;
      break;
    default:
      if ((_DWORD)result == 0x7FFFFFFF)
        result = 0;
      else
        result = result;
      break;
  }
  return result;
}

const __CFString *WebGPU::Device::errorValidatingTextureCreation(uint64_t a1, _DWORD *a2, unsigned int **a3)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v11;
  int v12;
  unsigned int v13;
  const __CFString *result;
  unsigned int v15;
  BOOL isCompressedFormat;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  if (!*(_QWORD *)(a1 + 8))
    return CFSTR("createTexture: Device is not valid");
  v4 = a2[4];
  if (!v4)
    return CFSTR("createTexture: descriptor.usage is zero");
  v5 = a2[6];
  if (!v5)
    return CFSTR("createTexture: descriptor.size.width/height/depth is zero");
  v6 = a2[7];
  if (!v6)
    return CFSTR("createTexture: descriptor.size.width/height/depth is zero");
  v7 = a2[8];
  if (!v7)
    return CFSTR("createTexture: descriptor.size.width/height/depth is zero");
  v8 = a2[10];
  if (!v8)
    return CFSTR("createTexture: descriptor.mipLevelCount is zero");
  v11 = a2[11];
  if (v11 != 4 && v11 != 1)
    return CFSTR("createTexture: descriptor.sampleCount is neither 1 nor 4");
  v12 = a2[5];
  if (v12 <= 1)
  {
    if (v12)
    {
      if (v12 == 1)
      {
        v13 = *(_DWORD *)(a1 + 76);
        if (v5 > v13)
          return CFSTR("createTexture: descriptor.size.width is greater than limits().maxTextureDimension2D");
        if (v6 > v13)
          return CFSTR("createTexture: descriptor.size.height is greater than limits().maxTextureDimension2D");
        if (v7 > *(_DWORD *)(a1 + 84))
          return CFSTR("createTexture: descriptor.size.depthOrArrayLayers > limits().maxTextureArrayLayers");
      }
      goto LABEL_42;
    }
    if (v5 > *(_DWORD *)(a1 + 72))
      return CFSTR("createTexture: descriptor.size.width is greater than limits().maxTextureDimension1D");
    if (v6 != 1)
      return CFSTR("createTexture: descriptor.size.height != 1");
    if (v7 != 1)
      return CFSTR("createTexture: descriptor.size.depthOrArrayLayers != 1");
LABEL_39:
    if (v11 != 1)
      return CFSTR("createTexture: descriptor.sampleCount != 1");
    v20 = a2[9];
    isCompressedFormat = WebGPU::Texture::isCompressedFormat(v20);
    result = CFSTR("createTexture: descriptor.format is compressed or a depth stencil format");
    if (isCompressedFormat || (v20 - 38) < 6)
      return result;
    goto LABEL_42;
  }
  if (v12 == 2)
  {
    v15 = *(_DWORD *)(a1 + 80);
    if (v5 > v15)
      return CFSTR("createTexture: descriptor.size.width > limits().maxTextureDimension3D");
    if (v6 > v15)
      return CFSTR("createTexture: descriptor.size.height > limits().maxTextureDimension3D");
    if (v7 > v15)
      return CFSTR("createTexture: descriptor.size.depthOrArrayLayers > limits().maxTextureDimension3D");
    goto LABEL_39;
  }
  if (v12 == 0x7FFFFFFF)
    return CFSTR("createTexture: descriptor.dimension is WGPUTextureDimension_Force32");
LABEL_42:
  v21 = a2[9];
  if (v5 % WebGPU::Texture::texelBlockWidth(v21))
    return CFSTR("createTexture: descriptor.size.width % Texture::texelBlockWidth(descriptor.format)");
  if (v6 % WebGPU::Texture::texelBlockHeight(v21))
    return CFSTR("createTexture: descriptor.size.height % Texture::texelBlockHeight(descriptor.format)");
  if (v11 < 2)
    goto LABEL_52;
  if (v8 != 1)
    return CFSTR("createTexture: descriptor.sampleCount > 1 and descriptor.mipLevelCount != 1");
  if (v7 != 1)
    return CFSTR("createTexture: descriptor.sampleCount > 1 and descriptor.size.depthOrArrayLayers != 1");
  if ((v4 & 0x18) != 0x10)
    return CFSTR("createTexture: descriptor.sampleCount > 1 and (descriptor.usage & WGPUTextureUsage_StorageBinding) || !(descriptor.usage & WGPUTextureUsage_RenderAttachment)");
  if (!WebGPU::Texture::isRenderableFormat(v21, a1))
    return CFSTR("createTexture: descriptor.sampleCount > 1 and !isRenderableFormat(descriptor.format, *this)");
  if (!WebGPU::Texture::supportsMultisampling(v21, *(int **)(a1 + 216), *(_DWORD *)(a1 + 228)))
    return CFSTR("createTexture: descriptor.sampleCount > 1 and !supportsMultisampling(descriptor.format, *this)");
LABEL_52:
  if (v8 > WebGPU::maximumMiplevelCount(v12, *((_QWORD *)a2 + 3), v7))
    return CFSTR("createTexture: descriptor.mipLevelCount > maximumMiplevelCount(descriptor.dimension, descriptor.size)");
  if ((v4 & 0x10) == 0)
    goto LABEL_59;
  if (!WebGPU::Texture::isRenderableFormat(v21, a1))
    return CFSTR("createTexture: descriptor.usage & WGPUTextureUsage_RenderAttachment && !isRenderableFormat(descriptor.format, *this)");
  if (!v12)
    return CFSTR("createTexture: descriptor.usage & WGPUTextureUsage_RenderAttachment && descriptor.dimension == WGPUTextureDimension_1D");
LABEL_59:
  if ((v4 & 8) != 0 && !WebGPU::Texture::hasStorageBindingCapability(v21, a1, 0))
    return CFSTR("createTexture: descriptor.usage & WGPUTextureUsage_StorageBinding && !hasStorageBindingCapability(descriptor.format)");
  v17 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v17)
    return 0;
  v18 = *a3;
  v19 = 4 * v17;
  while (WebGPU::textureViewFormatCompatible(v21, *v18))
  {
    result = 0;
    ++v18;
    v19 -= 4;
    if (!v19)
      return result;
  }
  return CFSTR("createTexture: !textureViewFormatCompatible(descriptor.format, viewFormat)");
}

uint64_t WebGPU::maximumMiplevelCount(int a1, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = HIDWORD(a2);
  if (a1 > 1)
  {
    if (a1 == 2)
    {
      if (a2 > HIDWORD(a2))
        LODWORD(v3) = a2;
      if (v3 <= a3)
        v4 = a3;
      else
        v4 = v3;
    }
    else
    {
      if (a1 == 0x7FFFFFFF)
        return 0;
      v4 = 0;
    }
  }
  else
  {
    if (!a1)
      return 1;
    if (a2 > HIDWORD(a2))
      LODWORD(v3) = a2;
    if (a1 == 1)
      v4 = v3;
    else
      v4 = 0;
  }
  if (v4 >= 0x10000)
    v6 = HIWORD(v4);
  else
    v6 = v4;
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = v6;
  v8 = v7 >> 4;
  if (v7 < 0x10)
    v8 = v7;
  v9 = v8 >> 2;
  if (v8 < 4)
    v9 = v8;
  v10 = v9 > 1;
  if ((v4 & (v4 - 1)) != 0)
  {
    if (v4 < 0x10000)
      v15 = 1;
    else
      v15 = 17;
    if (v6 >= 0x100)
      v15 |= 8u;
    if (v7 >= 0x10)
      v16 = v15 | 4;
    else
      v16 = v15;
    if (v8 >= 4)
      v17 = v16 | 2;
    else
      v17 = v16;
    return (v17 + v10);
  }
  else
  {
    v11 = (v4 & 0xFFFF0000) != 0;
    if (v6 >= 0x100)
      v12 = (16 * v11) | 8;
    else
      v12 = 16 * v11;
    if (v7 >= 0x10)
      v13 = v12 | 4;
    else
      v13 = v12;
    if (v8 >= 4)
      v14 = v13 | 2;
    else
      v14 = v13;
    return (v14 + v10 + 1);
  }
}

BOOL WebGPU::textureViewFormatCompatible(uint64_t a1, uint64_t a2)
{
  int v4;

  if ((_DWORD)a1 == (_DWORD)a2)
    return 1;
  v4 = WebGPU::Texture::removeSRGBSuffix(a1);
  return v4 == WebGPU::Texture::removeSRGBSuffix(a2);
}

uint64_t WebGPU::Texture::pixelFormat(int a1)
{
  uint64_t result;

  result = 10;
  switch(a1)
  {
    case 0:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
      result = 12;
      break;
    case 3:
      result = 13;
      break;
    case 4:
      result = 14;
      break;
    case 5:
      result = 23;
      break;
    case 6:
      result = 24;
      break;
    case 7:
      result = 25;
      break;
    case 8:
      result = 30;
      break;
    case 9:
      result = 32;
      break;
    case 10:
      result = 33;
      break;
    case 11:
      result = 34;
      break;
    case 12:
      result = 55;
      break;
    case 13:
      result = 53;
      break;
    case 14:
      result = 54;
      break;
    case 15:
      result = 63;
      break;
    case 16:
      result = 64;
      break;
    case 17:
      result = 65;
      break;
    case 18:
      result = 70;
      break;
    case 19:
      result = 71;
      break;
    case 20:
      result = 72;
      break;
    case 21:
      result = 73;
      break;
    case 22:
      result = 74;
      break;
    case 23:
      result = 80;
      break;
    case 24:
      result = 81;
      break;
    case 25:
      result = 91;
      break;
    case 26:
      result = 90;
      break;
    case 27:
      result = 92;
      break;
    case 28:
      result = 93;
      break;
    case 29:
      result = 105;
      break;
    case 30:
      result = 103;
      break;
    case 31:
      result = 104;
      break;
    case 32:
      result = 113;
      break;
    case 33:
      result = 114;
      break;
    case 34:
      result = 115;
      break;
    case 35:
      result = 125;
      break;
    case 36:
      result = 123;
      break;
    case 37:
      result = 124;
      break;
    case 38:
      result = 253;
      break;
    case 39:
      result = 250;
      break;
    case 40:
    case 42:
      result = 252;
      break;
    case 41:
    case 43:
      result = 260;
      break;
    case 58:
      result = 180;
      break;
    case 59:
      result = 181;
      break;
    case 60:
      result = 182;
      break;
    case 61:
      result = 183;
      break;
    case 62:
      result = 178;
      break;
    case 63:
      result = 179;
      break;
    case 64:
      result = 170;
      break;
    case 65:
      result = 172;
      break;
    case 66:
      result = 174;
      break;
    case 67:
      result = 176;
      break;
    case 68:
      result = 204;
      break;
    case 69:
      result = 186;
      break;
    case 70:
      result = 205;
      break;
    case 71:
      result = 187;
      break;
    case 72:
      result = 206;
      break;
    case 73:
      result = 188;
      break;
    case 74:
      result = 207;
      break;
    case 75:
      result = 189;
      break;
    case 76:
      result = 208;
      break;
    case 77:
      result = 190;
      break;
    case 78:
      result = 210;
      break;
    case 79:
      result = 192;
      break;
    case 80:
      result = 211;
      break;
    case 81:
      result = 193;
      break;
    case 82:
      result = 212;
      break;
    case 83:
      result = 194;
      break;
    case 84:
      result = 213;
      break;
    case 85:
      result = 195;
      break;
    case 86:
      result = 214;
      break;
    case 87:
      result = 196;
      break;
    case 88:
      result = 215;
      break;
    case 89:
      result = 197;
      break;
    case 90:
      result = 216;
      break;
    case 91:
      result = 198;
      break;
    case 92:
      result = 217;
      break;
    case 93:
      result = 199;
      break;
    case 94:
      result = 218;
      break;
    case 95:
      result = 200;
      break;
    default:
      if (a1 == 0x7FFFFFFF)
        result = 0;
      break;
  }
  return result;
}

unint64_t WebGPU::Texture::bytesPerRow(int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;

  v6 = WebGPU::Texture::texelBlockWidth(a1);
  if (v6 && !(a2 % v6))
    return a2 / v6 * (unint64_t)a3 * WebGPU::Texture::texelBlockSize(a1);
  else
    return 0;
}

uint64_t WebGPU::Texture::texelBlockSize(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
    case 41:
    case 43:
      result = 0;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 38:
      return result;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 39:
      result = 2;
      break;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 40:
    case 42:
      result = 4;
      break;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 44:
    case 45:
    case 50:
    case 51:
    case 58:
    case 59:
    case 60:
    case 61:
    case 64:
    case 65:
      result = 8;
      break;
    case 35:
    case 36:
    case 37:
    case 46:
    case 47:
    case 48:
    case 49:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 62:
    case 63:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      result = 16;
      break;
    default:
      result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::aspectSpecificFormat(uint64_t result, int a2)
{
  int v2;
  unsigned int *v3;

  if (a2 == 0x7FFFFFFF)
    return 0;
  if (a2 == 2)
  {
    v2 = result - 39;
    if ((result - 39) < 5)
    {
      v3 = (unsigned int *)&unk_18260F750;
      return v3[v2];
    }
    return 0;
  }
  if (a2 != 1)
    return result;
  v2 = result - 38;
  if ((result - 38) >= 6)
    return 0;
  v3 = (unsigned int *)&unk_18260F734;
  return v3[v2];
}

WTF *WebGPU::Device::createTexture@<X0>(WTF *result@<X0>, uint64_t a2@<X1>, WebGPU::Texture *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  WTF *v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  WTF *v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  __CFString *v49;
  id v50;
  uint64_t v51;
  void *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF *v55;
  int v56;
  int v57;
  uint64_t v58;

  v3 = (uint64_t)result;
  if (*(_QWORD *)a2 || !*((_QWORD *)result + 1))
    return (WTF *)WebGPU::Texture::createInvalid(a3, (unsigned __int8 **)result);
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v55 = 0;
  v56 = 0;
  v57 = v7;
  if (v7)
  {
    if (v7 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WTF *)WTF::fastMalloc((WTF *)(4 * v7));
    v56 = v7;
    v55 = v8;
    v9 = (v7 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v9 < 7)
    {
      v10 = (int *)v6;
    }
    else
    {
      v10 = (int *)v6;
      if ((unint64_t)v8 - v6 >= 0x20)
      {
        v11 = v9 + 1;
        v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
        v13 = (WTF *)((char *)v8 + v12);
        v10 = (int *)(v6 + v12);
        v14 = (__int128 *)(v6 + 16);
        v15 = (_OWORD *)((char *)v8 + 16);
        v16 = v11 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v14;
          *(v15 - 1) = *(v14 - 1);
          *v15 = v17;
          v14 += 2;
          v15 += 2;
          v16 -= 8;
        }
        while (v16);
        v8 = v13;
        if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_14;
      }
    }
    do
    {
      v18 = *v10++;
      *(_DWORD *)v8 = v18;
      v8 = (WTF *)((char *)v8 + 4);
    }
    while (v10 != (int *)(v6 + 4 * v7));
  }
LABEL_14:
  WebGPU::Device::errorValidatingTextureCreation(v3, (_DWORD *)a2, (unsigned int **)&v55);
  v19 = objc_claimAutoreleasedReturnValue();
  if (v19)
  {
    v20 = (void *)v19;
    MEMORY[0x186DAB230](&v58, v19);
    v21 = *(_QWORD *)(v3 + 32);
    v22 = 32 * *(unsigned int *)(v3 + 44);
    v23 = v21 + v22;
    while (v22)
    {
      v24 = *(_DWORD *)(v23 - 8);
      v23 -= 32;
      v22 -= 32;
      if (!v24)
      {
        v25 = v21 + v22;
        if (!*(_BYTE *)(v25 + 16))
        {
          v26 = v58;
          v58 = 0;
          *(_DWORD *)v25 = 1;
          *(_QWORD *)(v25 + 8) = v26;
          *(_BYTE *)(v25 + 16) = 1;
        }
        goto LABEL_31;
      }
    }
    v33 = *(_QWORD *)(v3 + 24);
    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v33 + 16))(v33, 1, &v58);
      v34 = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    }
LABEL_31:
    v35 = (_DWORD *)v58;
    v58 = 0;
    if (v35)
    {
      if (*v35 == 2)
        WTF::StringImpl::destroy();
      else
        *v35 -= 2;
    }
    WebGPU::Texture::createInvalid(a3, (unsigned __int8 **)v3);
    goto LABEL_82;
  }
  v20 = (void *)objc_opt_new();
  v27 = *(_DWORD *)(a2 + 36);
  v28 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 2) & 7;
  if ((v27 - 38) < 6 || WebGPU::Texture::isCompressedFormat(v27))
    v28 |= 0x10uLL;
  objc_msgSend(v20, "setUsage:", v28);
  v29 = *(_DWORD *)(a2 + 20);
  if (v29 > 1)
  {
    if (v29 != 2)
    {
      if (v29 == 0x7FFFFFFF)
        goto LABEL_78;
      goto LABEL_48;
    }
    objc_msgSend(v20, "setWidth:", *(unsigned int *)(a2 + 24));
    objc_msgSend(v20, "setHeight:", *(unsigned int *)(a2 + 28));
    objc_msgSend(v20, "setDepth:", *(unsigned int *)(a2 + 32));
    v36 = 7;
    goto LABEL_47;
  }
  if (v29)
  {
    if (v29 == 1)
    {
      objc_msgSend(v20, "setWidth:", *(unsigned int *)(a2 + 24));
      objc_msgSend(v20, "setHeight:", *(unsigned int *)(a2 + 28));
      if (*(_DWORD *)(a2 + 32) < 2u)
      {
        v30 = *(_DWORD *)(a2 + 44) > 1u;
        v31 = 2;
        v32 = 4;
      }
      else
      {
        objc_msgSend(v20, "setArrayLength:");
        v30 = *(_DWORD *)(a2 + 44) > 1u;
        v31 = 3;
        v32 = 8;
      }
      if (v30)
        v36 = v32;
      else
        v36 = v31;
      goto LABEL_47;
    }
  }
  else
  {
    objc_msgSend(v20, "setWidth:", *(unsigned int *)(a2 + 24));
    if (*(_DWORD *)(a2 + 32) < 2u)
    {
      v36 = 0;
LABEL_47:
      objc_msgSend(v20, "setTextureType:", v36);
      goto LABEL_48;
    }
    objc_msgSend(v20, "setTextureType:", 1);
    objc_msgSend(v20, "setArrayLength:", *(unsigned int *)(a2 + 32));
  }
LABEL_48:
  objc_msgSend(v20, "setPixelFormat:", WebGPU::Texture::pixelFormat(*(_DWORD *)(a2 + 36)));
  if (objc_msgSend(v20, "pixelFormat"))
  {
    objc_msgSend(v20, "setMipmapLevelCount:", *(unsigned int *)(a2 + 40));
    objc_msgSend(v20, "setSampleCount:", *(unsigned int *)(a2 + 44));
    if ((objc_msgSend(*(id *)(v3 + 8), "hasUnifiedMemory") & (*(_BYTE *)(v3 + 240) != 0)) != 0)
      v37 = 0;
    else
      v37 = 2;
    objc_msgSend(v20, "setStorageMode:", v37);
    v38 = (void *)objc_msgSend(*(id *)(v3 + 8), "newTextureWithDescriptor:", v20);
    if (v38)
    {
      WebGPU::Device::setOwnerWithIdentity(v3, v38);
      if (*(_QWORD *)(a2 + 8))
        strlen(*(const char **)(a2 + 8));
      WTF::String::fromUTF8();
      if (v53)
        v49 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v49 = &stru_1E0FD9588;
      objc_msgSend(v38, "setLabel:", v49);

      if (v53)
      {
        if (*v53 == 2)
          WTF::StringImpl::destroy();
        else
          *v53 -= 2;
      }
      v50 = v38;
      v51 = WTF::fastMalloc((WTF *)0x78);
      WebGPU::Texture::Texture(v51, v50, a2, (uint64_t *)&v55, (unsigned __int8 **)v3);
      *(_QWORD *)a3 = v51;

    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v54 = (_DWORD *)v58;
      WebGPU::Device::generateAnOutOfMemoryError(v3, (uint64_t *)&v54);
      v45 = v54;
      v54 = 0;
      if (v45)
      {
        if (*v45 == 2)
          WTF::StringImpl::destroy();
        else
          *v45 -= 2;
      }
      WebGPU::Texture::createInvalid(a3, (unsigned __int8 **)v3);
    }

    goto LABEL_82;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v39 = v58;
  v54 = (_DWORD *)v58;
  v40 = *(_QWORD *)(v3 + 32);
  v41 = 32 * *(unsigned int *)(v3 + 44);
  v42 = v40 + v41;
  while (v41)
  {
    v43 = *(_DWORD *)(v42 - 8);
    v42 -= 32;
    v41 -= 32;
    if (!v43)
    {
      v44 = v40 + v41;
      if (!*(_BYTE *)(v44 + 16))
      {
        v54 = 0;
        *(_DWORD *)v44 = 1;
        *(_QWORD *)(v44 + 8) = v39;
        *(_BYTE *)(v44 + 16) = 1;
      }
      goto LABEL_66;
    }
  }
  v46 = *(_QWORD *)(v3 + 24);
  if (v46)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v46 + 16))(v46, 1, &v54);
    v47 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
LABEL_66:
  v48 = v54;
  v54 = 0;
  if (v48)
  {
    if (*v48 == 2)
      WTF::StringImpl::destroy();
    else
      *v48 -= 2;
  }
LABEL_78:
  WebGPU::Texture::createInvalid(a3, (unsigned __int8 **)v3);
LABEL_82:

  result = v55;
  if (v55)
    return (WTF *)WTF::fastFree(v55, v52);
  return result;
}

void sub_182480D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, WTF *a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v16;

  if (a11)
  {
    if (*a11 == 2)
      WTF::StringImpl::destroy();
    else
      *a11 -= 2;
  }

  if (a12)
    WTF::fastFree(a12, v16);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::Texture::createInvalid(WebGPU::Texture *this, unsigned __int8 **a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;

  result = WTF::fastMalloc((WTF *)0x78);
  v5 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0x100000000;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  v6 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x186DAB1AC](v6);
LABEL_5:
  ++*((_QWORD *)v6 + 1);
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 64) = a2;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_WORD *)(v5 + 96) = 0;
  *(_QWORD *)this = v5;
  return result;
}

void sub_182480EF0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v4;
  void *v5;

  v4 = *(WTF **)(v2 + 48);
  if (v4)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v4, a2);
  }

  WTF::fastFree((WTF *)v2, v5);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::Texture::Texture(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, unsigned __int8 **a5)
{
  id v9;
  id v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;

  v9 = a2;
  *(_DWORD *)a1 = 1;
  v10 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 24);
  v11 = *(_OWORD *)(a3 + 28);
  *((_QWORD *)&v11 + 1) = *(_QWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 20) = v11;
  v12 = *(_DWORD *)(a3 + 36);
  v14 = *(_DWORD *)(a3 + 16);
  v13 = *(_DWORD *)(a3 + 20);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 36) = v13;
  *(_DWORD *)(a1 + 40) = v12;
  *(_DWORD *)(a1 + 44) = v14;
  *(_QWORD *)(a1 + 56) = 0;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v15;
  LODWORD(v15) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(a1 + 56) = v15;
  LODWORD(v15) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(a1 + 60) = v15;
  v16 = *a5;
  LODWORD(v15) = __ldaxr(*a5);
  if ((_DWORD)v15)
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v16);
LABEL_5:
  ++*((_QWORD *)v16 + 1);
  v17 = __ldxr(v16);
  if (v17 == 1)
  {
    if (!__stlxr(0, v16))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_10:
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;

  return a1;
}

void sub_182481038(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  void *v3;
  WTF **v4;
  WTF *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v6, a2);
  }

  _Unwind_Resume(a1);
}

void WebGPU::Texture::~Texture(WebGPU::Texture *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  WTF *v20;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v9 = *((unsigned int *)this + 23);
  if ((_DWORD)v9)
  {
    v10 = (unsigned int **)*((_QWORD *)this + 10);
    v11 = &v10[v9];
    do
    {
      while (1)
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
            break;
        }
        if (++v10 == v11)
          goto LABEL_19;
      }
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
      ++v10;
    }
    while (v10 != v11);
  }
LABEL_19:
  v15 = (WTF *)*((_QWORD *)this + 10);
  if (v15)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((_QWORD *)this + 9);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (_QWORD *)(v16 + 8);
      do
      {
        if (*((_DWORD *)v18 - 2) != -2 && *v18)
          WTF::fastFree((WTF *)(*v18 - 16), a2);
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 8, a2);
  v20 = (WTF *)*((_QWORD *)this + 6);
  if (v20)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v20, v19);
  }

}

uint64_t WebGPU::Texture::recreateIfNeeded(uint64_t this)
{
  if (*(_BYTE *)(this + 97))
  {
    *(_BYTE *)(this + 96) = 0;
  }
  else
  {
    this = 2983;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebGPU::Texture::waitForCommandBufferCompletion(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 104);
  if (!v2)
  {
    v4 = 0;
    v3 = 0;
LABEL_10:
    v6 = v4;
    v4 = v2 + 8 * v3;
    if (!v2)
    {
      v8 = 0;
      if (v6)
        goto LABEL_17;
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = v2 + 8 * v3;
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_10;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    v6 = *(_QWORD *)(this + 104);
    while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
    {
      v6 += 8;
      v5 -= 8;
      if (!v5)
      {
        v6 = v4;
        break;
      }
    }
LABEL_8:
    v7 = *(unsigned int *)(v2 - 4);
    goto LABEL_14;
  }
  v7 = 0;
  v6 = *(_QWORD *)(this + 104);
LABEL_14:
  v8 = v2 + 8 * v7;
  if (v8 != v6)
  {
LABEL_17:
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v9 = v6 + 8;
      v6 = v4;
      if (v9 != v4)
      {
        v6 = v9;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v8)
      {
        v6 = v8;
        break;
      }
    }
  }
LABEL_24:
  if (v2)
  {
    v10 = v2 + 8 * *(unsigned int *)(v2 - 4);
    if (v6 == v10)
      return this;
  }
  else
  {
    v10 = 0;
    if (!v6)
      return this;
  }
  do
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) + 56);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        this = objc_msgSend(*(id *)(v12 + 32), "status");
        if ((this & 0xFFFFFFFFFFFFFFFELL) == 2)
        {
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WTF::BinarySemaphore::waitUntil();
        }
      }
    }
    v13 = v4;
    if (v6 + 8 != v4)
    {
      v13 = v6 + 8;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 8;
        if (v13 == v4)
        {
          v13 = v4;
          break;
        }
      }
    }
    v6 = v8;
    if (v13 != v8)
    {
      v6 = v13;
      if (!*(_QWORD *)(*(_QWORD *)v13 + 8))
      {
        while (1)
        {
          v14 = v6 + 8;
          v6 = v4;
          if (v14 != v4)
          {
            v6 = v14;
            while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
            {
              v6 += 8;
              if (v6 == v4)
              {
                v6 = v4;
                break;
              }
            }
          }
          if (v6 == v8)
            break;
          if (*(_QWORD *)(*(_QWORD *)v6 + 8))
            goto LABEL_30;
        }
        v6 = v8;
      }
    }
LABEL_30:
    ++*(_DWORD *)(v1 + 112);
  }
  while (v6 != v10);
  return this;
}

const char *WebGPU::Texture::formatToString(int a1)
{
  const char *result;

  result = "undefined";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "r8unorm";
      break;
    case 2:
      result = "r8snorm";
      break;
    case 3:
      result = "r8uint";
      break;
    case 4:
      result = "r8sint";
      break;
    case 5:
      result = "r16uint";
      break;
    case 6:
      result = "r16sint";
      break;
    case 7:
      result = "r16float";
      break;
    case 8:
      result = "rg8unorm";
      break;
    case 9:
      result = "rg8snorm";
      break;
    case 10:
      result = "rg8uint";
      break;
    case 11:
      result = "rg8sint";
      break;
    case 12:
      result = "r32float";
      break;
    case 13:
      result = "r32uint";
      break;
    case 14:
      result = "r32sint";
      break;
    case 15:
      result = "rg16uint";
      break;
    case 16:
      result = "rg16sint";
      break;
    case 17:
      result = "rg16float";
      break;
    case 18:
      result = "rgba8unorm";
      break;
    case 19:
      result = "rgba8unorm-srgb";
      break;
    case 20:
      result = "rgba8snorm";
      break;
    case 21:
      result = "rgba8uint";
      break;
    case 22:
      result = "rgba8sint";
      break;
    case 23:
      result = "bgra8unorm";
      break;
    case 24:
      result = "bgra8unorm-srgb";
      break;
    case 25:
      result = "rgb10a2uint";
      break;
    case 26:
      result = "rgb10a2unorm";
      break;
    case 27:
      result = "rg11b10ufloat";
      break;
    case 28:
      result = "rgb9e5ufloat";
      break;
    case 29:
      result = "rg32float";
      break;
    case 30:
      result = "rg32uint";
      break;
    case 31:
      result = "rg32sint";
      break;
    case 32:
      result = "rgba16uint";
      break;
    case 33:
      result = "rgba16sint";
      break;
    case 34:
      result = "rgba16float";
      break;
    case 35:
      result = "rgba32float";
      break;
    case 36:
      result = "rgba32uint";
      break;
    case 37:
      result = "rgba32sint";
      break;
    case 38:
      result = "stencil8";
      break;
    case 39:
      result = "depth16unorm";
      break;
    case 40:
      result = "depth24plus";
      break;
    case 41:
      result = "depth24plus-stencil8";
      break;
    case 42:
      result = "depth32float";
      break;
    case 43:
      result = "depth32float-stencil8";
      break;
    case 44:
      result = "bc1-rgba-unorm";
      break;
    case 45:
      result = "bc1-rgba-unorm-srgb";
      break;
    case 46:
      result = "bc2-rgba-unorm";
      break;
    case 47:
      result = "bc2-rgba-unorm-srgb";
      break;
    case 48:
      result = "bc3-rgba-unorm";
      break;
    case 49:
      result = "bc3-rgba-unorm-srgb";
      break;
    case 50:
      result = "bc4-r-unorm";
      break;
    case 51:
      result = "bc4-r-snorm";
      break;
    case 52:
      result = "bc5-rg-unorm";
      break;
    case 53:
      result = "bc5-rg-snorm";
      break;
    case 54:
      result = "bc6h-rgb-ufloat";
      break;
    case 55:
      result = "bc6h-rgb-float";
      break;
    case 56:
      result = "bc7-rgba-unorm";
      break;
    case 57:
      result = "bc7-rgba-unorm-srgb";
      break;
    case 58:
      result = "etc2-rgb8unorm";
      break;
    case 59:
      result = "etc2-rgb8unorm-srgb";
      break;
    case 60:
      result = "etc2-rgb8a1unorm";
      break;
    case 61:
      result = "etc2-rgb8a1unorm-srgb";
      break;
    case 62:
      result = "etc2-rgba8unorm";
      break;
    case 63:
      result = "etc2-rgba8unorm-srgb";
      break;
    case 64:
      result = "eac-r11unorm";
      break;
    case 65:
      result = "eac-r11snorm";
      break;
    case 66:
      result = "eac-rg11unorm";
      break;
    case 67:
      result = "eac-rg11snorm";
      break;
    case 68:
      result = "astc-4x4-unorm";
      break;
    case 69:
      result = "astc-4x4-unorm-srgb";
      break;
    case 70:
      result = "astc-5x4-unorm";
      break;
    case 71:
      result = "astc-5x4-unorm-srgb";
      break;
    case 72:
      result = "astc-5x5-unorm";
      break;
    case 73:
      result = "astc-5x5-unorm-srgb";
      break;
    case 74:
      result = "astc-6x5-unorm";
      break;
    case 75:
      result = "astc-6x5-unorm-srgb";
      break;
    case 76:
      result = "astc-6x6-unorm";
      break;
    case 77:
      result = "astc-6x6-unorm-srgb";
      break;
    case 78:
      result = "astc-8x5-unorm";
      break;
    case 79:
      result = "astc-8x5-unorm-srgb";
      break;
    case 80:
      result = "astc-8x6-unorm";
      break;
    case 81:
      result = "astc-8x6-unorm-srgb";
      break;
    case 82:
      result = "astc-8x8-unorm";
      break;
    case 83:
      result = "astc-8x8-unorm-srgb";
      break;
    case 84:
      result = "astc-10x5-unorm";
      break;
    case 85:
      result = "astc-10x5-unorm-srgb";
      break;
    case 86:
      result = "astc-10x6-unorm";
      break;
    case 87:
      result = "astc-10x6-unorm-srgb";
      break;
    case 88:
      result = "astc-10x8-unorm";
      break;
    case 89:
      result = "astc-10x8-unorm-srgb";
      break;
    case 90:
      result = "astc-10x10-unorm";
      break;
    case 91:
      result = "astc-10x10-unorm-srgb";
      break;
    case 92:
      result = "astc-12x10-unorm";
      break;
    case 93:
      result = "astc-12x10-unorm-srgb";
      break;
    case 94:
      result = "astc-12x12-unorm";
      break;
    case 95:
      result = "astc-12x12-unorm-srgb";
      break;
    default:
      result = "invalid format";
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::logicalMiplevelSpecificTextureExtent(uint32x2_t *this, char a2)
{
  __int32 v2;
  unsigned int v3;

  v2 = this[4].i32[1];
  if (v2 == 2 || v2 == 1)
    return (uint64_t)vmax_u32(vshl_u32(this[2], (uint32x2_t)vneg_s32(vdup_n_s32(a2))), (uint32x2_t)0x100000001);
  if (v2)
    return 0;
  if ((unsigned __int32)this[2].i32[0] >> a2 <= 1)
    v3 = 1;
  else
    v3 = (unsigned __int32)this[2].i32[0] >> a2;
  return v3 | 0x100000000;
}

unint64_t WebGPU::Texture::physicalTextureExtent(int a1, int a2, unint64_t a3)
{
  unsigned int v3;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v3 = a3;
  v5 = HIDWORD(a3);
  if (a1 == 2 || a1 == 1)
  {
    v10 = WebGPU::Texture::texelBlockWidth(a2);
    if (v3 % v10)
      v11 = v10 - v3 % v10;
    else
      v11 = 0;
    v8 = v11 + v3;
    v12 = WebGPU::Texture::texelBlockHeight(a2);
    if (v5 % v12)
      v13 = v12 - v5 % v12;
    else
      v13 = 0;
    v9 = (v13 + v5);
  }
  else if (a1)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v6 = WebGPU::Texture::texelBlockWidth(a2);
    if (v3 % v6)
      v7 = v6 - v3 % v6;
    else
      v7 = 0;
    v8 = v7 + v3;
    v9 = 1;
  }
  return v8 | (unint64_t)(v9 << 32);
}

__CFString *WebGPU::Texture::errorValidatingImageCopyTexture(uint64_t a1, unsigned int *a2)
{
  uint32x2_t *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v4 = *(uint32x2_t **)(a1 + 8);
  v5 = v4[5].i32[0];
  v6 = WebGPU::Texture::texelBlockWidth(v5);
  v7 = WebGPU::Texture::texelBlockHeight(v5);
  if (!v4[12].i8[0] && !*(_QWORD *)&v4[1])
    return CFSTR("imageCopyTexture is not valid");
  v8 = *(_DWORD *)(a1 + 16);
  if (v8 >= v4[3].i32[1])
    return CFSTR("imageCopyTexture mip level is greater than or equal to the mipLevelCount in the texture");
  if (*(_DWORD *)(a1 + 20) % v6)
    return CFSTR("imageCopyTexture.origin.x is not a multiple of the texture blockWidth");
  if (*(_DWORD *)(a1 + 24) % v7)
    return CFSTR("imageCopyTexture.origin.y is not a multiple of the texture blockHeight");
  if ((v5 - 38) >= 6 && v4[4].i32[0] < 2u)
    return (__CFString *)0;
  v10 = v4[4].i32[1];
  if (v10 == 2 || v10 == 1)
  {
    v13 = (unint64_t)vmax_u32(vshl_u32(v4[2], (uint32x2_t)vneg_s32(vdup_n_s32(v8))), (uint32x2_t)0x100000001);
  }
  else if (v10)
  {
    v13 = 0;
  }
  else
  {
    v11 = (unsigned __int32)v4[2].i32[0] >> v8;
    if (v11 <= 1)
      v12 = 1;
    else
      v12 = v11;
    v13 = v12 | 0x100000000;
  }
  v14 = WebGPU::Texture::physicalTextureExtent(v10, v5, v13);
  v16 = *a2;
  v17 = a2[1];
  if ((_DWORD)v16 != (_DWORD)v14 || (v18 = 0, v17 >= 2) && (_DWORD)v17 != HIDWORD(v14))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("subresourceSize.width(%u) != copySize.width(%u) || subresourceSize.height(%u) != copySize.height(%u) || subresourceSize.depthOrArrayLayers(%u) != copySize.depthOrArrayLayers(%u)"), v14, v16, HIDWORD(v14), v17, v15, a2[2]);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return (__CFString *)v18;
}

unint64_t WebGPU::Texture::refersToSingleAspect(unsigned int a1, int a2)
{
  if (a2 > 1)
  {
    if (a2 == 2)
    {
      if (a1 - 39 > 4)
        return 0;
    }
    else if (a2 == 0x7FFFFFFF)
    {
      return 0;
    }
    return 1;
  }
  if (!a2)
    return ((a1 - 41) & 0xFFFFFFFD) != 0;
  if (a2 != 1)
    return 1;
  if (a1 >= 0x2C)
    return 0;
  else
    return (0xA4000000000uLL >> a1) & 1;
}

id WebGPU::Texture::errorValidatingTextureCopyRange(uint64_t a1, unsigned int *a2)
{
  uint32x2_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v4 = *(uint32x2_t **)(a1 + 8);
  v5 = v4[5].i32[0];
  v6 = WebGPU::Texture::texelBlockWidth(v5);
  v7 = WebGPU::Texture::texelBlockHeight(v5);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = v4[4].i32[1];
  if (v9 == 2 || v9 == 1)
  {
    v12 = (unint64_t)vmax_u32(vshl_u32(v4[2], (uint32x2_t)vneg_s32(vdup_n_s32(v8))), (uint32x2_t)0x100000001);
  }
  else if (v9)
  {
    v12 = 0;
  }
  else
  {
    v10 = (unsigned __int32)v4[2].i32[0] >> v8;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    v12 = v11 | 0x100000000;
  }
  v13 = WebGPU::Texture::physicalTextureExtent(v9, v5, v12);
  v15 = *(_DWORD *)(a1 + 20);
  v16 = __CFADD__(v15, *a2);
  v17 = v15 + *a2;
  if (v16)
  {
    v17 = 0xFFFFFFFFLL;
LABEL_14:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("endX(%u) > subresourceSize.width(%u)"), v17, v13);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  if (v17 > v13)
    goto LABEL_14;
  v18 = *(_DWORD *)(a1 + 24);
  v19 = a2[1];
  v16 = __CFADD__(v18, v19);
  v20 = v18 + v19;
  if (v16)
  {
    v20 = 0xFFFFFFFFLL;
LABEL_20:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("endY(%u) > subresourceSize.height(%u)"), v20, HIDWORD(v13));
    return (id)objc_claimAutoreleasedReturnValue();
  }
  if (v20 > HIDWORD(v13))
    goto LABEL_20;
  v21 = *(_DWORD *)(a1 + 28);
  v22 = a2[2];
  v16 = __CFADD__(v21, v22);
  v23 = v21 + v22;
  if (v16)
  {
    v23 = 0xFFFFFFFFLL;
LABEL_25:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("endZ(%u) > subresourceSize.depthOrArrayLayers(%u)"), v23, v14);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  if (v23 > v14)
    goto LABEL_25;
  if (*a2 % v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("copySize.width(%u) is not divisible by blockWidth(%u)"), *a2, v6);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  if (v19 % v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("copySize.height(%u) is not divisible by blockHeight(%u)"), a2[1], v7);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

BOOL WebGPU::Texture::validateLinearTextureData(uint64_t a1, unint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL8 result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  _BOOL4 v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v10 = WebGPU::Texture::texelBlockWidth(a3);
  v11 = WebGPU::Texture::texelBlockHeight(a3);
  v12 = WebGPU::Texture::texelBlockSize(a3);
  if (a4 % v10)
    return 0;
  v14 = HIDWORD(a4) / v11;
  if (HIDWORD(a4) % v11)
    return 0;
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 >= 2 && (_DWORD)v15 == -1)
    return 0;
  v16 = a4 / v10 * (unint64_t)v12;
  if (a5 < 2)
  {
    if ((_DWORD)v15 == -1)
    {
      v24 = *(_DWORD *)(a1 + 20);
      if (v24 != -1 && v24 < v14)
        return 0;
    }
    else
    {
      if (v16 > v15)
        return 0;
      v23 = *(_DWORD *)(a1 + 20);
      if (v23 != -1 && v23 < v14)
        return 0;
    }
    v22 = 0;
    if (!a5)
      goto LABEL_34;
    v21 = 0;
LABEL_25:
    if (v14 >= 2)
    {
      v25 = (v14 - 1) * v15;
      v26 = __CFADD__(v22, v25);
      v27 = v22 + v25;
      if (v26)
        v21 = 1;
      if (!v26)
        v22 = v27;
    }
    if (v11 <= HIDWORD(a4))
    {
      v26 = __CFADD__(v22, v16);
      v22 += v16;
      if (v26)
        return 0;
    }
    if (v21)
      return 0;
LABEL_34:
    v28 = *(_QWORD *)(a1 + 8);
    v26 = __CFADD__(v28, v22);
    v29 = v28 + v22;
    if (!v26)
      return v29 <= a2;
    return 0;
  }
  result = 0;
  if ((_DWORD)v15 != -1)
  {
    v17 = *(_DWORD *)(a1 + 20);
    if (v17 != -1 && v16 <= v15 && v17 >= v14)
    {
      v18 = a5 - 1;
      v19 = v17 * (unint64_t)v15;
      v20 = (v19 * (unsigned __int128)v18) >> 64 == 0;
      v21 = !is_mul_ok(v19, v18);
      v22 = v19 * v18;
      if (!v20)
        v22 = 0;
      goto LABEL_25;
    }
  }
  return result;
}

BOOL WebGPU::Texture::previouslyCleared(WebGPU::Texture *this, int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;

  if (*((_BYTE *)this + 96))
    return 1;
  v4 = *((_QWORD *)this + 9);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = *(_DWORD *)(v4 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9 != -1)
    {
      v8 = ((_DWORD)v8 + v10) & v5;
      v9 = *(_DWORD *)(v4 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v4 - 4))
    return 0;
  v11 = *(_QWORD *)(v4 + 16 * v8 + 8);
  if (!v11)
    return 0;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = v12 & (v14 ^ HIWORD(v14));
  v16 = *(_DWORD *)(v11 + 4 * v15);
  if (v16 == a3)
    return 1;
  v17 = 1;
  do
  {
    v18 = v16 != -1;
    if (v16 == -1)
      break;
    v15 = (v15 + v17) & v12;
    v16 = *(_DWORD *)(v11 + 4 * v15);
    ++v17;
  }
  while (v16 != a3);
  return v18;
}

uint64_t *WebGPU::Texture::setPreviouslyCleared(uint64_t *this, int a2, int a3, char a4)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  _DWORD *v64;
  _BYTE v65[28];
  int v66;

  v66 = a3;
  v6 = this + 9;
  v5 = this[9];
  if ((a4 & 1) != 0)
  {
    if (v5)
    {
      v7 = *(_DWORD *)(v5 - 8);
      v8 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
      v10 = v7 & (v9 ^ HIWORD(v9));
      v11 = *(_DWORD *)(v5 + 16 * v10);
      if (v11 == a2)
      {
LABEL_7:
        if (v10 != *(_DWORD *)(v5 - 4))
          return WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)(v5 + 16 * v10 + 8), &v66, (uint64_t)v65);
      }
      else
      {
        v12 = 1;
        while (v11 != -1)
        {
          v10 = ((_DWORD)v10 + v12) & v7;
          v11 = *(_DWORD *)(v5 + 16 * v10);
          ++v12;
          if (v11 == a2)
            goto LABEL_7;
        }
      }
    }
    v64 = 0;
    this = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v64, &v66, (uint64_t)v65);
    v14 = *v6;
    if (*v6
      || (this = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, 8u), (v14 = *v6) != 0))
    {
      v15 = *(_DWORD *)(v14 - 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
    v18 = v15 & (v17 ^ HIWORD(v17));
    v19 = v14 + 16 * v18;
    v20 = *(_DWORD *)v19;
    if (*(_DWORD *)v19 != -1)
    {
      v21 = 0;
      v22 = 1;
      while (v20 != a2)
      {
        if (v20 == -2)
          v21 = v19;
        v18 = (v18 + v22) & v15;
        v19 = v14 + 16 * v18;
        v20 = *(_DWORD *)v19;
        ++v22;
        if (*(_DWORD *)v19 == -1)
        {
          if (v21)
          {
            *(_DWORD *)v21 = -1;
            *(_QWORD *)(v21 + 8) = 0;
            --*(_DWORD *)(*v6 - 16);
            v19 = v21;
          }
          goto LABEL_19;
        }
      }
      goto LABEL_45;
    }
LABEL_19:
    *(_DWORD *)v19 = a2;
    if (!v64 || (v23 = *(v64 - 3), !(_DWORD)v23))
    {
      v33 = 0;
      goto LABEL_32;
    }
    v24 = (v23 - 1) | ((v23 - 1) >> 1) | ((((_DWORD)v23 - 1) | ((v23 - 1) >> 1)) >> 2);
    v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
    v26 = (v25 | HIWORD(v25)) + 1;
    if (v26 > 0x400)
    {
      if (v26 > 2 * v23)
        goto LABEL_62;
    }
    else if (3 * v26 > 4 * v23)
    {
LABEL_60:
      if ((double)v26 * 0.604166667 > (double)v23)
      {
LABEL_64:
        if (v26 <= 8)
          v47 = 8;
        else
          v47 = v26;
        v48 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v47 + 16));
        v33 = v48 + 4;
        this = (uint64_t *)memset(v48 + 4, 255, 4 * v47);
        v48[2] = v47 - 1;
        v48[3] = v47;
        *v48 = 0;
        v48[1] = v23;
        v49 = (uint64_t)v64;
        if (v64)
        {
          v50 = *(v64 - 1);
          v51 = &v64[v50];
          if (!*(v64 - 3))
          {
            v52 = &v64[v50];
            v51 = v52;
LABEL_76:
            v49 = (uint64_t)&v64[*(v64 - 1)];
LABEL_77:
            if ((_DWORD *)v49 != v52)
            {
              do
              {
                v54 = 0;
                v55 = *v52;
                v56 = 9 * ((v55 + ~(v55 << 15)) ^ ((v55 + ~(v55 << 15)) >> 10));
                v57 = ((v56 ^ (v56 >> 6)) + ~((v56 ^ (v56 >> 6)) << 11)) ^ (((v56 ^ (v56 >> 6))
                                                                           + ~((v56 ^ (v56 >> 6)) << 11)) >> 16);
                do
                {
                  v58 = v57 & (v47 - 1);
                  v57 = ++v54 + v58;
                }
                while (v33[v58] != -1);
                v33[v58] = v55;
                v59 = v52 + 1;
                v52 = v51;
                if (v59 != v51)
                {
                  v52 = v59;
                  while (*v52 >= 0xFFFFFFFE)
                  {
                    if (++v52 == v51)
                    {
                      v52 = v51;
                      break;
                    }
                  }
                }
              }
              while (v52 != (_DWORD *)v49);
            }
LABEL_32:
            v34 = *(_QWORD *)(v19 + 8);
            *(_QWORD *)(v19 + 8) = v33;
            if (v34)
              this = (uint64_t *)WTF::fastFree((WTF *)(v34 - 16), v13);
            if (*v6)
            {
              ++*(_DWORD *)(*v6 - 12);
              v35 = *v6;
              if (*v6)
                goto LABEL_36;
            }
            else
            {
              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
              v35 = *v6;
              if (*v6)
              {
LABEL_36:
                v36 = (*(_DWORD *)(v35 - 16) + *(_DWORD *)(v35 - 12));
                v37 = *(unsigned int *)(v35 - 4);
                if (v37 <= 0x400)
                  goto LABEL_37;
                goto LABEL_42;
              }
            }
            v36 = *(unsigned int *)(v35 - 16);
            v37 = *(unsigned int *)(v35 - 4);
            if (v37 <= 0x400)
            {
LABEL_37:
              if (3 * v37 > 4 * v36)
                goto LABEL_45;
              if (!(_DWORD)v37)
              {
                v38 = 8;
LABEL_44:
                this = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, v38);
LABEL_45:
                if (v64)
                  return (uint64_t *)WTF::fastFree((WTF *)(v64 - 4), v13);
                return this;
              }
LABEL_43:
              v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v37));
              goto LABEL_44;
            }
LABEL_42:
            if (v37 > 2 * v36)
              goto LABEL_45;
            goto LABEL_43;
          }
          v52 = v64;
          if ((_DWORD)v50)
          {
            v53 = 4 * v50;
            v52 = v64;
            while (*v52 >= 0xFFFFFFFE)
            {
              ++v52;
              v53 -= 4;
              if (!v53)
              {
                v52 = v51;
                goto LABEL_76;
              }
            }
          }
        }
        else
        {
          v52 = 0;
          v51 = 0;
        }
        if (!v64)
          goto LABEL_77;
        goto LABEL_76;
      }
LABEL_63:
      LODWORD(v26) = 2 * v26;
      goto LABEL_64;
    }
    LODWORD(v26) = 2 * v26;
    if (v26 <= 0x400)
      goto LABEL_60;
LABEL_62:
    if ((double)v26 * 0.416666667 > (double)v23)
      goto LABEL_64;
    goto LABEL_63;
  }
  if (!v5)
    return this;
  v27 = *(_DWORD *)(v5 - 8);
  v28 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
  v30 = v27 & (v29 ^ HIWORD(v29));
  v31 = *(_DWORD *)(v5 + 16 * v30);
  if (v31 == a2)
  {
LABEL_29:
    if (v30 != *(_DWORD *)(v5 - 4))
    {
      v39 = v5 + 16 * v30;
      v41 = *(_QWORD *)(v39 + 8);
      this = (uint64_t *)(v39 + 8);
      v40 = v41;
      if (v41)
      {
        v42 = *(_DWORD *)(v40 - 8);
        v43 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
        v44 = v42 & (((v43 ^ (v43 >> 6)) + ~((v43 ^ (v43 >> 6)) << 11)) ^ (((v43 ^ (v43 >> 6))
                                                                          + ~((v43 ^ (v43 >> 6)) << 11)) >> 16));
        v45 = *(_DWORD *)(v40 + 4 * v44);
        if (v45 == a3)
        {
LABEL_55:
          if (v44 == *(_DWORD *)(v40 - 4))
            return this;
          *(_DWORD *)(v40 + 4 * v44) = -2;
          ++*(_DWORD *)(*this - 16);
          if (*this)
          {
            --*(_DWORD *)(*this - 12);
            v60 = *this;
            if (!*this)
              return this;
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
            v60 = *this;
            if (!*this)
              return this;
          }
          v61 = 6 * *(_DWORD *)(v60 - 12);
          v62 = *(_DWORD *)(v60 - 4);
          if (v61 < v62 && v62 >= 9)
            return (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(this, v62 >> 1, 0);
        }
        else
        {
          v46 = 1;
          while (v45 != -1)
          {
            v44 = ((_DWORD)v44 + v46) & v42;
            v45 = *(_DWORD *)(v40 + 4 * v44);
            ++v46;
            if (v45 == a3)
              goto LABEL_55;
          }
        }
      }
    }
  }
  else
  {
    v32 = 1;
    while (v31 != -1)
    {
      v30 = ((_DWORD)v30 + v32) & v27;
      v31 = *(_DWORD *)(v5 + 16 * v30);
      ++v32;
      if (v31 == a2)
        goto LABEL_29;
    }
  }
  return this;
}

void sub_182482938(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

_DWORD *wgpuTextureReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::Texture *wgpuTextureRelease(WebGPU::Texture *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::Texture::~Texture(result, a2);
    return (WebGPU::Texture *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebGPU::TextureView *wgpuTextureCreateView(uint64_t a1, __int128 *a2)
{
  unsigned __int8 **v3;
  WebGPU::TextureView *v4;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  __CFString *v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  unsigned int v41;
  __CFString *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  unsigned __int8 **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  unsigned __int8 **v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  __CFString *v72;
  _DWORD *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 **v79;
  __CFString *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  WTF *v85;
  void *v86;
  WTF *v87;
  unsigned int **v88;
  unsigned int **v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  _DWORD *v108;
  char *__s[2];
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  char v117;
  __int128 v118;

  if (!*(_QWORD *)a2 && !*(_BYTE *)(a1 + 96))
  {
    v118 = *a2;
    v6 = *((_DWORD *)a2 + 4);
    v7 = *((_DWORD *)a2 + 5);
    v8 = *((unsigned int *)a2 + 6);
    v9 = *((_DWORD *)a2 + 7);
    v10 = *((unsigned int *)a2 + 8);
    v11 = *((_DWORD *)a2 + 9);
    v12 = *((_QWORD *)a2 + 5);
    if (v6)
    {
      if (v9 != -1)
        goto LABEL_45;
    }
    else
    {
      v14 = (int *)(a1 + 40);
      v13 = *(_DWORD *)(a1 + 40);
      if ((_DWORD)v12 == 2)
      {
        switch(v13)
        {
          case '\'':
          case '(':
          case '*':
            v15 = 0;
            v14 = (int *)&v108;
            break;
          case ')':
            v15 = 0;
            v14 = (int *)&v108;
            v13 = 40;
            break;
          case '+':
            v15 = 0;
            v14 = (int *)&v108;
            v13 = 42;
            break;
          default:
            v13 = 0;
            v15 = 0;
            break;
        }
      }
      else if ((_DWORD)v12 == 1)
      {
        if (v13 == 43)
        {
          v15 = 0;
          v14 = (int *)&v108;
          v13 = 38;
        }
        else
        {
          if (v13 == 38)
            v16 = 38;
          else
            v16 = 0;
          if (v13 == 38)
            v14 = (int *)&v108;
          v17 = v13 == 41;
          if (v13 == 41)
            v13 = 38;
          else
            v13 = v16;
          if (v17)
            v14 = (int *)&v108;
          v15 = 0;
        }
      }
      else
      {
        v15 = v13 & 0xFFFFFF00;
        v13 = *(_DWORD *)(a1 + 40);
        if ((_DWORD)v12)
          v13 = 0;
        else
          v14 = (int *)&v108;
        if ((_DWORD)v12)
          v15 = 0;
      }
      LODWORD(v108) = v15 | v13;
      v6 = *v14;
      if (v9 != -1)
        goto LABEL_45;
    }
    v18 = *(_DWORD *)(a1 + 28);
    v19 = v18 >= v8;
    v20 = v18 - v8;
    if (v19)
      v9 = v20;
    else
      v9 = 0;
    if (!v19)
    {
LABEL_40:
      v21 = *(_QWORD *)(a1 + 64);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v22 = *(_QWORD *)(v21 + 32);
      v23 = 32 * *(unsigned int *)(v21 + 44);
      v24 = v22 + v23;
      while (v23)
      {
        v25 = *(_DWORD *)(v24 - 8);
        v24 -= 32;
        v23 -= 32;
        if (!v25)
        {
          v26 = v22 + v23;
          if (!*(_BYTE *)(v26 + 16))
          {
            v27 = v118;
            *(_QWORD *)&v118 = 0;
            *(_DWORD *)v26 = 1;
            *(_QWORD *)(v26 + 8) = v27;
            *(_BYTE *)(v26 + 16) = 1;
          }
          goto LABEL_82;
        }
      }
      v37 = *(_QWORD *)(v21 + 24);
      if (v37)
      {
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v37 + 16))(v37, 1, &v118);
        v38 = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 24) = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      }
LABEL_82:
      v39 = (_DWORD *)v118;
      *(_QWORD *)&v118 = 0;
      if (v39)
      {
        if (*v39 == 2)
          WTF::StringImpl::destroy();
        else
          *v39 -= 2;
      }
LABEL_169:
      v68 = *(unsigned __int8 ***)(a1 + 64);
      v4 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
      WebGPU::TextureView::TextureView(v4, (WebGPU::Texture *)a1, v68);
      return v4;
    }
LABEL_45:
    if (!v7)
    {
      switch(objc_msgSend(*(id *)(a1 + 8), "textureType"))
      {
        case 0:
          v7 = 1;
          break;
        case 1:
          goto LABEL_250;
        case 2:
        case 4:
          v7 = 2;
          break;
        case 3:
        case 8:
          v7 = 3;
          break;
        case 5:
          v7 = 4;
          break;
        case 6:
          v7 = 5;
          break;
        case 7:
          v7 = 6;
          break;
        default:
          v7 = 0;
          break;
      }
    }
    if (v11 != -1)
      goto LABEL_47;
    if (v7 <= 6)
    {
      if (((1 << v7) & 0x46) != 0)
      {
        v11 = 1;
        goto LABEL_47;
      }
      if (((1 << v7) & 0x28) != 0)
      {
        v33 = *(_DWORD *)(a1 + 24);
        v34 = v33 >= v10;
        v35 = v33 - v10;
        if (v34)
          v11 = v35;
        else
          v11 = 0;
        if (!v34)
          goto LABEL_40;
LABEL_47:
        *(_OWORD *)__s = v118;
        v110 = v6;
        v111 = v7;
        v112 = v8;
        v113 = v9;
        v114 = v10;
        v115 = v11;
        v116 = v12;
        v117 = 1;
        if (!*(_BYTE *)(a1 + 96) && !*(_QWORD *)(a1 + 8))
        {
          v31 = CFSTR("GPUTexture.createView: texture is not valid");
          goto LABEL_109;
        }
        v28 = *(_DWORD *)(a1 + 40);
        switch((_DWORD)v12)
        {
          case 2:
            if (v28 - 39 >= 5)
              goto LABEL_78;
            v36 = dword_18260F750[v28 - 39];
            break;
          case 1:
            v31 = CFSTR("GPUTexture.createView: aspect == All and (format != resolveTextureFormat(format, aspect))");
            if (v28 > 0x2B || ((1 << v28) & 0xA4000000000) == 0)
              goto LABEL_109;
            v36 = 38;
            break;
          case 0:
            if (v6 != v28)
            {
              v29 = *(unsigned int *)(a1 + 60);
              if (!(_DWORD)v29)
              {
                v31 = CFSTR("GPUTexture.createView: aspect == all and (format != parentTexture's format and !viewFormats.contains(parentTexture's format))");
                goto LABEL_109;
              }
              v30 = *(int **)(a1 + 48);
              v31 = CFSTR("GPUTexture.createView: aspect == all and (format != parentTexture's format and !viewFormats.contains(parentTexture's format))");
              while (1)
              {
                v32 = *v30++;
                if (v32 == v6)
                  break;
                if (!--v29)
                  goto LABEL_109;
              }
            }
            goto LABEL_74;
          default:
            goto LABEL_78;
        }
        if (v6 == v36)
        {
LABEL_74:
          if (!v9)
          {
            v31 = CFSTR("GPUTexture.createView: !mipLevelCount");
            goto LABEL_109;
          }
          if (__CFADD__((_DWORD)v8, v9) || v8 + v9 > *(_DWORD *)(a1 + 28))
          {
            v31 = CFSTR("GPUTexture.createView: endMipLevel is not valid");
            goto LABEL_109;
          }
          if (!v11)
          {
            v31 = CFSTR("GPUTexture.createView: !arrayLayerCount");
            goto LABEL_109;
          }
          if (__CFADD__((_DWORD)v10, v11)
            || ((v40 = *(_DWORD *)(a1 + 36), v40 != 1) ? (v41 = 1) : (v41 = *(_DWORD *)(a1 + 24)),
                v10 + v11 > v41))
          {
            v31 = CFSTR("GPUTexture.createView: endArrayLayer is not valid");
            goto LABEL_109;
          }
          if (*(_DWORD *)(a1 + 32) >= 2u && v7 != 2)
          {
            v31 = CFSTR("GPUTexture.createView: sampleCount > 1 and dimension != 2D");
            goto LABEL_109;
          }
          v31 = CFSTR("GPUTexture.createView: dimension is undefined");
          switch(v7)
          {
            case 0u:
              break;
            case 1u:
              if (v40)
              {
                v31 = CFSTR("GPUTexture.createView: attempting to create 1D texture view from non-1D base texture");
                break;
              }
              if (v11 == 1)
                goto LABEL_154;
              v31 = CFSTR("GPUTexture.createView: attempting to create 1D texture view with array layers");
              break;
            case 2u:
              if (v40 == 1)
              {
                if (v11 != 1)
                {
                  v31 = CFSTR("GPUTexture.createView: attempting to create 2D texture view with array layers");
                  break;
                }
                goto LABEL_154;
              }
              v31 = CFSTR("GPUTexture.createView: attempting to create 2D texture view from non-2D base texture");
              break;
            case 3u:
              if (v40 == 1)
                goto LABEL_154;
              v31 = CFSTR("GPUTexture.createView: attempting to create 2D texture array view from non-2D parent texture");
              break;
            case 4u:
              if (v40 == 1)
              {
                if (v11 == 6)
                {
                  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a1 + 20))
                  {
                    v31 = CFSTR("GPUTexture.createView: attempting to create cube texture view from non-square parent texture");
                    break;
                  }
                  goto LABEL_154;
                }
                v31 = CFSTR("GPUTexture.createView: attempting to create cube texture view with arrayLayerCount != 6");
              }
              else
              {
                v31 = CFSTR("GPUTexture.createView: attempting to create cube texture view from non-2D parent texture");
              }
              break;
            case 5u:
              if (v40 == 1)
              {
                HIDWORD(v54) = -1431655765 * v11;
                LODWORD(v54) = -1431655765 * v11;
                if ((v54 >> 1) > 0x2AAAAAAA)
                {
                  v31 = CFSTR("GPUTexture.createView: attempting to create cube array texture view with (arrayLayerCount % 6) != 0");
                  break;
                }
                if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a1 + 20))
                {
LABEL_154:
                  v55 = WebGPU::Texture::pixelFormat(v6);
                  if (!v55)
                  {
                    v58 = *(_QWORD *)(a1 + 64);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v59 = *(_QWORD *)(v58 + 32);
                    v60 = 32 * *(unsigned int *)(v58 + 44);
                    v61 = v59 + v60;
                    while (v60)
                    {
                      v62 = *(_DWORD *)(v61 - 8);
                      v61 -= 32;
                      v60 -= 32;
                      if (!v62)
                      {
                        v63 = v59 + v60;
                        if (!*(_BYTE *)(v63 + 16))
                        {
                          v64 = v118;
                          *(_QWORD *)&v118 = 0;
                          *(_DWORD *)v63 = 1;
                          *(_QWORD *)(v63 + 8) = v64;
                          *(_BYTE *)(v63 + 16) = 1;
                        }
                        goto LABEL_165;
                      }
                    }
                    v65 = *(_QWORD *)(v58 + 24);
                    if (v65)
                    {
                      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v65 + 16))(v65, 1, &v118);
                      v66 = *(_QWORD *)(v58 + 24);
                      *(_QWORD *)(v58 + 24) = 0;
                      if (v66)
                        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
                    }
LABEL_165:
                    v67 = (_DWORD *)v118;
                    *(_QWORD *)&v118 = 0;
                    if (v67)
                    {
                      if (*v67 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v67 -= 2;
                    }
                    goto LABEL_169;
                  }
                  v56 = v55;
                  switch(v7)
                  {
                    case 1u:
                      v57 = v11 != 1;
                      goto LABEL_182;
                    case 2u:
                      if (*(_DWORD *)(a1 + 32) <= 1u)
                        v57 = 2;
                      else
                        v57 = 4;
                      goto LABEL_182;
                    case 3u:
                      if (*(_DWORD *)(a1 + 32) <= 1u)
                        v57 = 3;
                      else
                        v57 = 8;
                      goto LABEL_182;
                    case 4u:
                      v57 = 5;
                      goto LABEL_182;
                    case 5u:
                      v57 = 6;
                      goto LABEL_182;
                    case 6u:
                      v57 = 7;
                      goto LABEL_182;
                    default:
                      if (v7 == 0x7FFFFFFF)
                        goto LABEL_169;
                      v57 = 0;
LABEL_182:
                      v69 = *(void **)(a1 + 8);
                      v70 = objc_msgSend(v69, "pixelFormat");
                      v71 = v70;
                      if (v56 != 252)
                      {
                        if (v56 == 253)
                        {
                          if (v70 == 260)
                            v71 = 261;
                        }
                        else
                        {
                          v71 = v56;
                        }
                      }
                      v42 = (__CFString *)objc_msgSend(v69, "newTextureViewWithPixelFormat:textureType:levels:slices:", v71, v57, v8, v9, v10, v11);
                      if (!v42)
                        goto LABEL_121;
                      if (__s[1])
                        strlen(__s[1]);
                      WTF::String::fromUTF8();
                      if (v108)
                        v72 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                      else
                        v72 = &stru_1E0FD9588;
                      -[__CFString setLabel:](v42, "setLabel:", v72);

                      v73 = v108;
                      v108 = 0;
                      if (v73)
                      {
                        if (*v73 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *v73 -= 2;
                      }
                      -[__CFString label](v42, "label");
                      v74 = (void *)objc_claimAutoreleasedReturnValue();
                      v75 = objc_msgSend(v74, "length");

                      if (!v75)
                      {
                        objc_msgSend(*(id *)(a1 + 8), "label");
                        v76 = (void *)objc_claimAutoreleasedReturnValue();
                        -[__CFString setLabel:](v42, "setLabel:", v76);

                      }
                      LOBYTE(v118) = 0;
                      BYTE12(v118) = 0;
                      if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
                      {
                        LODWORD(v77) = *(_DWORD *)(a1 + 16) >> v8;
                        if (v77 <= 1)
                          v77 = 1;
                        else
                          v77 = v77;
                        LODWORD(v78) = *(_DWORD *)(a1 + 20) >> v8;
                        if (v78 <= 1)
                          v78 = 1;
                        else
                          v78 = v78;
                        *(_QWORD *)&v118 = v77 | (v78 << 32);
                        DWORD2(v118) = 1;
                        BYTE12(v118) = 1;
                      }
                      v79 = *(unsigned __int8 ***)(a1 + 64);
                      v80 = v42;
                      v4 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
                      WebGPU::TextureView::TextureView((uint64_t)v4, v80, __s, &v118, (_DWORD *)a1, v79);

                      v81 = *(unsigned int *)(a1 + 92);
                      if ((_DWORD)v81 == *(_DWORD *)(a1 + 88))
                      {
                        v82 = v81 + (v81 >> 2);
                        if (v82 >= 0x10)
                          v83 = v82 + 1;
                        else
                          v83 = 16;
                        if (v83 <= v81 + 1)
                          v84 = v81 + 1;
                        else
                          v84 = v83;
                        if (v84 >> 29)
                        {
LABEL_250:
                          __break(0xC471u);
                          JUMPOUT(0x18248359CLL);
                        }
                        v85 = *(WTF **)(a1 + 80);
                        v87 = (WTF *)WTF::fastMalloc((WTF *)(8 * v84));
                        *(_DWORD *)(a1 + 88) = v84;
                        *(_QWORD *)(a1 + 80) = v87;
                        if ((_DWORD)v81)
                        {
                          v88 = (unsigned int **)((char *)v85 + 8 * v81);
                          v89 = (unsigned int **)v85;
                          do
                          {
                            while (1)
                            {
                              v90 = *v89;
                              *v89 = 0;
                              *(_QWORD *)v87 = v90;
                              v91 = *v89;
                              *v89 = 0;
                              if (v91)
                              {
                                do
                                {
                                  v92 = __ldaxr(v91);
                                  v93 = v92 - 1;
                                }
                                while (__stlxr(v93, v91));
                                if (!v93)
                                  break;
                              }
                              v87 = (WTF *)((char *)v87 + 8);
                              if (++v89 == v88)
                                goto LABEL_225;
                            }
                            atomic_store(1u, v91);
                            WTF::fastFree((WTF *)v91, v86);
                            v87 = (WTF *)((char *)v87 + 8);
                            ++v89;
                          }
                          while (v89 != v88);
LABEL_225:
                          v87 = *(WTF **)(a1 + 80);
                        }
                        if (v85)
                        {
                          if (v87 == v85)
                          {
                            *(_QWORD *)(a1 + 80) = 0;
                            *(_DWORD *)(a1 + 88) = 0;
                          }
                          WTF::fastFree(v85, v86);
                          v87 = *(WTF **)(a1 + 80);
                        }
                        v94 = *(unsigned int *)(a1 + 92);
                        v95 = *((_QWORD *)v4 + 1);
                        if (v95)
                          goto LABEL_235;
                        v95 = WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v95 = 1;
                        *(_QWORD *)(v95 + 8) = v4;
                        v97 = (unsigned int *)*((_QWORD *)v4 + 1);
                        *((_QWORD *)v4 + 1) = v95;
                        if (!v97)
                          goto LABEL_235;
                        do
                        {
                          v98 = __ldaxr(v97);
                          v99 = v98 - 1;
                        }
                        while (__stlxr(v99, v97));
                        if (v99)
                        {
                          v95 = *((_QWORD *)v4 + 1);
                          if (v95)
                            goto LABEL_235;
                        }
                        else
                        {
                          atomic_store(1u, v97);
                          WTF::fastFree((WTF *)v97, v96);
                          v95 = *((_QWORD *)v4 + 1);
                          if (v95)
                          {
                            do
LABEL_235:
                              v100 = __ldaxr((unsigned int *)v95);
                            while (__stlxr(v100 + 1, (unsigned int *)v95));
                          }
                        }
                        *((_QWORD *)v87 + v94) = v95;
                        goto LABEL_244;
                      }
                      v101 = *(_QWORD *)(a1 + 80);
                      v102 = *((_QWORD *)v4 + 1);
                      if (v102)
                        goto LABEL_242;
                      v102 = WTF::fastCompactMalloc((WTF *)0x10);
                      *(_DWORD *)v102 = 1;
                      *(_QWORD *)(v102 + 8) = v4;
                      v104 = (unsigned int *)*((_QWORD *)v4 + 1);
                      *((_QWORD *)v4 + 1) = v102;
                      if (!v104)
                        goto LABEL_242;
                      do
                      {
                        v105 = __ldaxr(v104);
                        v106 = v105 - 1;
                      }
                      while (__stlxr(v106, v104));
                      if (v106)
                      {
                        v102 = *((_QWORD *)v4 + 1);
                        if (!v102)
                          goto LABEL_243;
                      }
                      else
                      {
                        atomic_store(1u, v104);
                        WTF::fastFree((WTF *)v104, v103);
                        v102 = *((_QWORD *)v4 + 1);
                        if (!v102)
                          goto LABEL_243;
                      }
                      do
LABEL_242:
                        v107 = __ldaxr((unsigned int *)v102);
                      while (__stlxr(v107 + 1, (unsigned int *)v102));
LABEL_243:
                      *(_QWORD *)(v101 + 8 * v81) = v102;
LABEL_244:
                      ++*(_DWORD *)(a1 + 92);
LABEL_122:

                      return v4;
                  }
                }
                v31 = CFSTR("GPUTexture.createView: attempting to create cube array texture view from non-square parent texture");
              }
              else
              {
                v31 = CFSTR("GPUTexture.createView: attempting to create cube array texture view from non-2D parent texture");
              }
              break;
            case 6u:
              if (v40 == 2)
              {
                if (v11 == 1)
                  goto LABEL_154;
                v31 = CFSTR("GPUTexture.createView: attempting to create 3D texture view with array layers");
              }
              else
              {
                v31 = CFSTR("GPUTexture.createView: attempting to create 3D texture view from non-3D parent texture");
              }
              break;
            default:
              if (v7 != 0x7FFFFFFF)
                goto LABEL_154;
              v31 = CFSTR("GPUTexture.createView: descriptor.dimension is invalid value");
              break;
          }
LABEL_109:
          v42 = v31;
          v43 = *(_QWORD *)(a1 + 64);
          MEMORY[0x186DAB230](&v118, v42);
          v44 = *(_QWORD *)(v43 + 32);
          v45 = 32 * *(unsigned int *)(v43 + 44);
          v46 = v44 + v45;
          while (v45)
          {
            v47 = *(_DWORD *)(v46 - 8);
            v46 -= 32;
            v45 -= 32;
            if (!v47)
            {
              v48 = v44 + v45;
              if (!*(_BYTE *)(v48 + 16))
              {
                v49 = v118;
                *(_QWORD *)&v118 = 0;
                *(_DWORD *)v48 = 1;
                *(_QWORD *)(v48 + 8) = v49;
                *(_BYTE *)(v48 + 16) = 1;
              }
              goto LABEL_117;
            }
          }
          v50 = *(_QWORD *)(v43 + 24);
          if (v50)
          {
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v50 + 16))(v50, 1, &v118);
            v51 = *(_QWORD *)(v43 + 24);
            *(_QWORD *)(v43 + 24) = 0;
            if (v51)
              (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          }
LABEL_117:
          v52 = (_DWORD *)v118;
          *(_QWORD *)&v118 = 0;
          if (v52)
          {
            if (*v52 == 2)
              WTF::StringImpl::destroy();
            else
              *v52 -= 2;
          }
LABEL_121:
          v53 = *(unsigned __int8 ***)(a1 + 64);
          v4 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
          WebGPU::TextureView::TextureView(v4, (WebGPU::Texture *)a1, v53);
          goto LABEL_122;
        }
LABEL_78:
        v31 = CFSTR("GPUTexture.createView: aspect == All and (format != resolveTextureFormat(format, aspect))");
        goto LABEL_109;
      }
      if (v7 == 4)
      {
        v11 = 6;
        goto LABEL_47;
      }
    }
    v11 = -1;
    if (v7 == 0x7FFFFFFF)
      v7 = 0x7FFFFFFF;
    goto LABEL_47;
  }
  v3 = *(unsigned __int8 ***)(a1 + 64);
  v4 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
  WebGPU::TextureView::TextureView(v4, (WebGPU::Texture *)a1, v3);
  return v4;
}

void sub_1824835E0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1824835F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _DWORD *a19)
{
  if (a19)
  {
    if (*a19 != 2)
    {
      *a19 -= 2;
      _Unwind_Resume(exception_object);
    }
    WTF::StringImpl::destroy();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_182483740(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void wgpuTextureDestroy(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebGPU::TextureView *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebGPU::CommandBuffer *v32;
  uint64_t v33;
  uint64_t v34;

  if (!*(_BYTE *)(a1 + 97))
  {
    v3 = 280;
    if ((*(_DWORD *)(a1 + 40) - 38) < 6)
      v3 = 288;
    objc_storeStrong((id *)(a1 + 8), *(id *)(*(_QWORD *)(a1 + 64) + v3));
  }
  *(_BYTE *)(a1 + 96) = 1;
  v4 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 80);
    v6 = 8 * v4;
    do
    {
      if (*(_QWORD *)v5)
      {
        v7 = *(WebGPU::TextureView **)(*(_QWORD *)v5 + 8);
        if (v7)
          WebGPU::TextureView::destroy(v7);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  if (*(_BYTE *)(a1 + 97))
    goto LABEL_12;
  v15 = *(_QWORD *)(a1 + 104);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    v17 = v15 + 8 * v16;
    if (*(_DWORD *)(v15 - 12))
    {
      if (!(_DWORD)v16)
      {
        v20 = 0;
        v19 = *(_QWORD *)(a1 + 104);
LABEL_52:
        v27 = v15 + 8 * v20;
        if (v27 != v19)
        {
LABEL_55:
          while (!*(_QWORD *)(*(_QWORD *)v19 + 8))
          {
            v28 = v19 + 8;
            v19 = v17;
            if (v28 != v17)
            {
              v19 = v28;
              while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
              {
                v19 += 8;
                if (v19 == v17)
                {
                  v19 = v17;
                  break;
                }
              }
            }
            if (v19 == v27)
            {
              v19 = v27;
              goto LABEL_62;
            }
          }
        }
        goto LABEL_62;
      }
      v18 = 8 * v16;
      v19 = *(_QWORD *)(a1 + 104);
      while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
      {
        v19 += 8;
        v18 -= 8;
        if (!v18)
        {
          v19 = v17;
          break;
        }
      }
LABEL_33:
      v20 = *(unsigned int *)(v15 - 4);
      goto LABEL_52;
    }
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v19 = v17;
  v17 = v15 + 8 * v16;
  if (v15)
    goto LABEL_33;
  v27 = 0;
  if (v19)
    goto LABEL_55;
LABEL_62:
  if (v15)
  {
    v29 = v15 + 8 * *(unsigned int *)(v15 - 4);
    if (v19 == v29)
      goto LABEL_12;
  }
  else
  {
    v29 = 0;
    if (!v19)
      goto LABEL_12;
  }
  do
  {
    v30 = *(_QWORD *)(*(_QWORD *)v19 + 8);
    *(_BYTE *)(v30 + 76) = 1;
    v31 = *(_QWORD *)(v30 + 56);
    if (v31)
    {
      v32 = *(WebGPU::CommandBuffer **)(v31 + 8);
      if (v32)
        WebGPU::CommandBuffer::makeInvalid(v32, *(NSString **)(v30 + 64));
    }
    v33 = v17;
    if (v19 + 8 != v17)
    {
      v33 = v19 + 8;
      while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
      {
        v33 += 8;
        if (v33 == v17)
        {
          v33 = v17;
          break;
        }
      }
    }
    v19 = v27;
    if (v33 != v27)
    {
      v19 = v33;
      if (!*(_QWORD *)(*(_QWORD *)v33 + 8))
      {
        while (1)
        {
          v34 = v19 + 8;
          v19 = v17;
          if (v34 != v17)
          {
            v19 = v34;
            while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
            {
              v19 += 8;
              if (v19 == v17)
              {
                v19 = v17;
                break;
              }
            }
          }
          if (v19 == v27)
            break;
          if (*(_QWORD *)(*(_QWORD *)v19 + 8))
            goto LABEL_68;
        }
        v19 = v27;
      }
    }
LABEL_68:
    ++*(_DWORD *)(a1 + 112);
  }
  while (v19 != v29);
LABEL_12:
  v8 = *(_QWORD *)(a1 + 104);
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = 0;
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = *(unsigned int **)(v8 + 8 * i);
        if (v11 != (unsigned int *)-1)
        {
          *(_QWORD *)(v8 + 8 * i) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
    v14 = *(_QWORD *)(a1 + 104);
    *(_DWORD *)(a1 + 112) = 0;
    if (v14)
    {
      LODWORD(v14) = *(_DWORD *)(v14 - 12);
      if (v14 > 0x7FFFFFFE)
        LODWORD(v14) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 116) = 2 * v14;
    if (!*(_DWORD *)(a1 + 88))
      return;
  }
  else
  {
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 116) = 0;
    if (!*(_DWORD *)(a1 + 88))
      return;
  }
  v21 = *(unsigned int *)(a1 + 92);
  v22 = *(WTF **)(a1 + 80);
  if ((_DWORD)v21)
  {
    v23 = (WTF *)((char *)v22 + 8 * v21);
    do
    {
      while (1)
      {
        v24 = *(unsigned int **)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
            break;
        }
        v22 = (WTF *)((char *)v22 + 8);
        if (v22 == v23)
          goto LABEL_43;
      }
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, a2);
      v22 = (WTF *)((char *)v22 + 8);
    }
    while (v22 != v23);
LABEL_43:
    *(_DWORD *)(a1 + 92) = 0;
    v22 = *(WTF **)(a1 + 80);
  }
  if (v22)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v22, a2);
  }
}

_DWORD *wgpuTextureSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 8), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_182483C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuTextureGetDepthOrArrayLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t wgpuTextureGetDimension(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t wgpuTextureGetFormat(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t wgpuTextureGetHeight(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t wgpuTextureGetWidth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t wgpuTextureGetMipLevelCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t wgpuTextureGetSampleCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t wgpuTextureGetUsage(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v9 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v9 = result + 16;
    if (!a2)
      goto LABEL_7;
  }
  v10 = a2;
  v11 = (_QWORD *)(result + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *v11 = 0;
    v11 += 2;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    while (1)
    {
      v13 = (int *)(v4 + 16 * v12);
      v14 = *v13;
      if (*v13 != -2)
      {
        if (v14 != -1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
          v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            v21 = v20 & v17;
            v20 = ++v18 + v21;
          }
          while (*(_DWORD *)(v16 + 16 * v21) != -1);
          v22 = v16 + 16 * v21;
          v24 = (_QWORD *)(v22 + 8);
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            WTF::fastFree((WTF *)(v23 - 16), v8);
            v14 = *v13;
          }
          *(_DWORD *)v22 = v14;
          v25 = v4 + 16 * v12;
          *v24 = 0;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          *v24 = v26;
          v15 = *(_QWORD *)(v25 + 8);
          if (!v15)
            goto LABEL_9;
LABEL_13:
          WTF::fastFree((WTF *)(v15 - 16), v8);
          goto LABEL_9;
        }
        v15 = *(_QWORD *)(v4 + 16 * v12 + 8);
        if (v15)
          goto LABEL_13;
      }
LABEL_9:
      if (++v12 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebGPU::TextureView::TextureView(uint64_t a1, void *a2, _OWORD *a3, _OWORD *a4, _DWORD *a5, unsigned __int8 **a6)
{
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  unsigned __int8 *v15;
  int v17;

  v11 = a2;
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = v11;
  *(_QWORD *)(a1 + 16) = v12;
  v14 = a3[1];
  v13 = a3[2];
  *(_OWORD *)(a1 + 24) = *a3;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 72) = *a4;
  v15 = *a6;
  if (__ldaxr(*a6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v15);
LABEL_5:
  ++*((_QWORD *)v15 + 1);
  v17 = __ldxr(v15);
  if (v17 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_10:
  ++*a5;
  *(_QWORD *)(a1 + 88) = a6;
  *(_QWORD *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;

  return a1;
}

void sub_182483F84(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v5;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v5);
  _Unwind_Resume(a1);
}

WebGPU::TextureView *WebGPU::TextureView::TextureView(WebGPU::TextureView *this, WebGPU::Texture *a2, unsigned __int8 **a3)
{
  unsigned __int8 *v6;
  int v8;

  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_BYTE *)this + 84) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_BYTE *)this + 72) = 0;
  v6 = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x186DAB1AC](v6);
LABEL_5:
  ++*((_QWORD *)v6 + 1);
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  ++*(_DWORD *)a2;
  *((_QWORD *)this + 11) = a3;
  *((_QWORD *)this + 12) = a2;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  return this;
}

void sub_182484070(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v5 = *(_QWORD *)(v1 + 8);
  if (!v5)
  {
    *v2 = 0;
    _Unwind_Resume(a1);
  }
  *(_QWORD *)(v5 + 8) = 0;
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void WebGPU::TextureView::~TextureView(WebGPU::TextureView *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WebGPU::Texture *v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  void *v17;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v9 = (WebGPU::Texture *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (!v9)
  {
LABEL_14:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 11, a2);

    v11 = *((_QWORD *)this + 1);
    if (v11)
      goto LABEL_15;
LABEL_20:
    *((_QWORD *)this + 1) = 0;
    return;
  }
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
    goto LABEL_14;
  }
  WebGPU::Texture::~Texture(v9, a2);
  WTF::fastFree(v15, v16);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((unsigned __int8 ***)this + 11, v17);

  v11 = *((_QWORD *)this + 1);
  if (!v11)
    goto LABEL_20;
LABEL_15:
  *(_QWORD *)(v11 + 8) = 0;
  v12 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v10);
    }
  }
}

id WebGPU::TextureView::texture(WebGPU::TextureView *this)
{
  uint64_t v1;
  int v2;
  id *v3;

  v1 = *((_QWORD *)this + 12);
  v2 = *(unsigned __int8 *)(v1 + 96);
  v3 = (id *)(v1 + 8);
  if (!v2)
    v3 = (id *)((char *)this + 16);
  return *v3;
}

void WebGPU::TextureView::destroy(WebGPU::TextureView *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebGPU::CommandBuffer *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = 280;
  if ((*((_DWORD *)this + 10) - 38) < 6)
    v2 = 288;
  objc_storeStrong((id *)this + 2, *(id *)(*((_QWORD *)this + 11) + v2));
  if (*(_BYTE *)(*((_QWORD *)this + 12) + 97))
    goto LABEL_4;
  v11 = *((_QWORD *)this + 13);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = v11 + 8 * v12;
    if (*(_DWORD *)(v11 - 12))
    {
      if (!(_DWORD)v12)
      {
        v16 = 0;
        v15 = *((_QWORD *)this + 13);
LABEL_31:
        v17 = v11 + 8 * v16;
        if (v17 != v15)
        {
LABEL_34:
          while (!*(_QWORD *)(*(_QWORD *)v15 + 8))
          {
            v18 = v15 + 8;
            v15 = v13;
            if (v18 != v13)
            {
              v15 = v18;
              while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
              {
                v15 += 8;
                if (v15 == v13)
                {
                  v15 = v13;
                  break;
                }
              }
            }
            if (v15 == v17)
            {
              v15 = v17;
              goto LABEL_41;
            }
          }
        }
        goto LABEL_41;
      }
      v14 = 8 * v12;
      v15 = *((_QWORD *)this + 13);
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 8;
        v14 -= 8;
        if (!v14)
        {
          v15 = v13;
          break;
        }
      }
LABEL_23:
      v16 = *(unsigned int *)(v11 - 4);
      goto LABEL_31;
    }
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v15 = v13;
  v13 = v11 + 8 * v12;
  if (v11)
    goto LABEL_23;
  v17 = 0;
  if (v15)
    goto LABEL_34;
LABEL_41:
  if (v11)
  {
    v19 = v11 + 8 * *(unsigned int *)(v11 - 4);
    if (v15 == v19)
      goto LABEL_4;
  }
  else
  {
    v19 = 0;
    if (!v15)
      goto LABEL_4;
  }
  do
  {
    v20 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    *(_BYTE *)(v20 + 76) = 1;
    v21 = *(_QWORD *)(v20 + 56);
    if (v21)
    {
      v22 = *(WebGPU::CommandBuffer **)(v21 + 8);
      if (v22)
        WebGPU::CommandBuffer::makeInvalid(v22, *(NSString **)(v20 + 64));
    }
    v23 = v13;
    if (v15 + 8 != v13)
    {
      v23 = v15 + 8;
      while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
      {
        v23 += 8;
        if (v23 == v13)
        {
          v23 = v13;
          break;
        }
      }
    }
    v15 = v17;
    if (v23 != v17)
    {
      v15 = v23;
      if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
      {
        while (1)
        {
          v24 = v15 + 8;
          v15 = v13;
          if (v24 != v13)
          {
            v15 = v24;
            while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
            {
              v15 += 8;
              if (v15 == v13)
              {
                v15 = v13;
                break;
              }
            }
          }
          if (v15 == v17)
            break;
          if (*(_QWORD *)(*(_QWORD *)v15 + 8))
            goto LABEL_47;
        }
        v15 = v17;
      }
    }
LABEL_47:
    ++*((_DWORD *)this + 28);
  }
  while (v15 != v19);
LABEL_4:
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 13) = 0;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = *(unsigned int **)(v4 + 8 * i);
        if (v7 != (unsigned int *)-1)
        {
          *(_QWORD *)(v4 + 8 * i) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, v3);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
    v10 = *((_QWORD *)this + 13);
    *((_DWORD *)this + 28) = 0;
    if (v10)
    {
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
      if (v10 > 0x7FFFFFFE)
        LODWORD(v10) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v10) = 0;
    *((_DWORD *)this + 28) = 0;
  }
  *((_DWORD *)this + 29) = 2 * v10;
}

_DWORD *wgpuTextureViewReference(_DWORD *result)
{
  ++*result;
  return result;
}

WebGPU::TextureView *wgpuTextureViewRelease(WebGPU::TextureView *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebGPU::TextureView::~TextureView(result, a2);
    return (WebGPU::TextureView *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuTextureViewSetLabel(uint64_t a1, char *__s)
{
  __CFString *v3;
  _DWORD *result;
  _DWORD *v5;

  if (__s)
    strlen(__s);
  WTF::String::fromUTF8();
  if (v5)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E0FD9588;
  objc_msgSend(*(id *)(a1 + 16), "setLabel:", v3);

  result = v5;
  if (v5)
  {
    if (*v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  return result;
}

void sub_182484614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WGSL::AST::Builder::allocateArena(WGSL::AST::Builder *this)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;

  v2 = (uint64_t *)((char *)this + 16);
  v3 = WTF::fastMalloc((WTF *)0x4000);
  v15 = (WTF *)v3;
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5 == *((_DWORD *)this + 6))
  {
    v6 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v5 + 1, (unint64_t)&v15);
    v5 = *((unsigned int *)this + 7);
    v7 = *((_QWORD *)this + 2);
    v8 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v7 + 8 * v5) = v8;
    v9 = v15;
  }
  else
  {
    v10 = v3;
    v9 = 0;
    v11 = *v2;
    v15 = 0;
    *(_QWORD *)(v11 + 8 * v5) = v10;
  }
  *((_DWORD *)this + 7) = v5 + 1;
  result = WTF::fastFree(v9, v4);
  v13 = *((unsigned int *)this + 7);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v13 - 8);
    *(_QWORD *)this = v14;
    *((_QWORD *)this + 1) = v14 + 0x4000;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::AST::Builder::saveCurrentState(WGSL::AST::Builder *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;

  v2 = *(_QWORD *)this;
  v3 = (uint64_t *)((char *)this + 16);
  v4 = WTF::fastMalloc((WTF *)0x4000);
  v16 = (WTF *)v4;
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6 == *((_DWORD *)this + 6))
  {
    v7 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v6 + 1, (unint64_t)&v16);
    v6 = *((unsigned int *)this + 7);
    v8 = *((_QWORD *)this + 2);
    v9 = *(_QWORD *)v7;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v8 + 8 * v6) = v9;
    v10 = v16;
  }
  else
  {
    v11 = v4;
    v10 = 0;
    v12 = *v3;
    v16 = 0;
    *(_QWORD *)(v12 + 8 * v6) = v11;
  }
  *((_DWORD *)this + 7) = v6 + 1;
  result = WTF::fastFree(v10, v5);
  v14 = *((unsigned int *)this + 7);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v14 - 8);
    *(_QWORD *)this = v15;
    *((_QWORD *)this + 1) = v15 + 0x4000;
    return v2;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

char *WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  WTF **v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27;
  WTF *v28;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v16 = *(WTF **)a1;
        return (char *)v16 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v12 = WTF::fastMalloc((WTF *)(8 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        v14 = 8 * v6;
        do
        {
          v15 = *(_QWORD *)((char *)v5 + v13);
          *(_QWORD *)((char *)v5 + v13) = 0;
          *(_QWORD *)(v12 + v13) = v15;
          WTF::fastFree(*(WTF **)((char *)v5 + v13), v11);
          v13 += 8;
        }
        while (v14 != v13);
        v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v16 = *(WTF **)a1;
        }
        return (char *)v16 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x182484964);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v20 = a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    if (v20 >> 29)
      goto LABEL_35;
    v21 = *(unsigned int *)(a1 + 12);
    v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + 8) = v20;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v21)
    {
      v24 = (WTF **)v22;
      v25 = 8 * v21;
      v26 = (WTF **)v5;
      do
      {
        v27 = *v26;
        *v26 = 0;
        *v24++ = v27;
        v28 = *v26++;
        WTF::fastFree(v28, v23);
        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

uint64_t WGSL::AST::StringDumper::visit(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)(a2 + 80);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5);
      if ((_DWORD)result == 17 && !*(_BYTE *)(v3 + 32))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v7);
      ++v5;
      v6 -= 8;
    }
    while (v6);
    if (*(_DWORD *)(a2 + 92))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 32))(v3 + 40);
      WTF::printInternal();
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 40))(v3 + 40);
    }
  }
  v8 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a2 + 64);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      WGSL::AST::Visitor::visit((_BYTE *)v3, v11);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 32))(v3 + 40);
      WTF::printInternal();
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 40))(v3 + 40);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::BindingAttribute *a2)
{
  char *v4;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::BuiltinAttribute *a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 40;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::GroupAttribute *a2)
{
  char *v4;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::LocationAttribute *a2)
{
  char *v4;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::StageAttribute *a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 40;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::WorkgroupSizeAttribute *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  v5 = *((_QWORD *)a2 + 4);
  if (v5)
  {
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    WGSL::AST::Visitor::visit(this, v5);
    v6 = *((_QWORD *)a2 + 5);
    if (v6)
    {
      (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
      WTF::printInternal();
      (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
      WGSL::AST::Visitor::visit(this, v6);
    }
  }
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Function *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD **v13;
  _DWORD *v14;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (*((_DWORD *)a2 + 21))
  {
    WGSL::AST::Visitor::visit(this, **((_QWORD **)a2 + 9));
    if (*((_DWORD *)a2 + 21) >= 2u)
    {
      v5 = 1;
      while (1)
      {
        (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
        WTF::printInternal();
        (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
        if (v5 >= *((unsigned int *)a2 + 21))
          break;
        WGSL::AST::Visitor::visit(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v5++));
        if (v5 >= *((unsigned int *)a2 + 21))
          goto LABEL_6;
      }
      __break(0xC471u);
LABEL_34:
      JUMPOUT(0x182485420);
    }
LABEL_6:
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    WTF::printInternal();
    (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  }
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (*((_DWORD *)a2 + 17))
  {
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    WGSL::AST::Indent::Indent(&v13, this);
    if (*((_DWORD *)a2 + 17))
    {
      WGSL::AST::StringDumper::visit(this, **((WGSL::AST::Parameter ***)a2 + 7));
      if (*((_DWORD *)a2 + 17) >= 2u)
      {
        v7 = 1;
        do
        {
          (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
          WTF::printInternal();
          (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
          if (v7 >= *((unsigned int *)a2 + 17))
          {
            __break(0xC471u);
            JUMPOUT(0x182485428);
          }
          WGSL::AST::StringDumper::visit(this, *(WGSL::AST::Parameter **)(*((_QWORD *)a2 + 7) + 8 * v7++));
        }
        while (v7 < *((unsigned int *)a2 + 17));
      }
    }
    v8 = v14;
    v14 = 0;
    v9 = *v13;
    *v13 = v8;
    if (v9)
    {
      if (*v9 == 2)
      {
        WTF::StringImpl::destroy();
        v10 = v14;
        v14 = 0;
        if (!v10)
        {
LABEL_22:
          (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
          WTF::printInternal();
          WTF::printInternal();
          (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
          goto LABEL_23;
        }
LABEL_19:
        if (*v10 == 2)
          WTF::StringImpl::destroy();
        else
          *v10 -= 2;
        goto LABEL_22;
      }
      *v9 -= 2;
    }
    v10 = v14;
    v14 = 0;
    if (!v10)
      goto LABEL_22;
    goto LABEL_19;
  }
LABEL_23:
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (*((_QWORD *)a2 + 13))
  {
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
    if (*((_DWORD *)a2 + 25))
    {
      WGSL::AST::Visitor::visit(this, **((_QWORD **)a2 + 11));
      if (*((_DWORD *)a2 + 25) >= 2u)
      {
        v11 = 1;
        while (1)
        {
          (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
          WTF::printInternal();
          (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
          if (v11 >= *((unsigned int *)a2 + 25))
            break;
          WGSL::AST::Visitor::visit(this, *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v11++));
          if (v11 >= *((unsigned int *)a2 + 25))
            goto LABEL_29;
        }
        __break(0xC471u);
        goto LABEL_34;
      }
    }
LABEL_29:
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 13));
  }
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
  return WGSL::AST::StringDumper::visit(this, *((WGSL::AST::CompoundStatement **)a2 + 14));
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::CompoundStatement *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD **v10;
  _DWORD *v11;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (!*((_DWORD *)a2 + 13))
    goto LABEL_17;
  WGSL::AST::Indent::Indent(&v10, this);
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
  if (!*((_DWORD *)a2 + 13) || (WGSL::AST::Visitor::visit(this, **((_QWORD **)a2 + 5)), *((_DWORD *)a2 + 13) < 2u))
  {
LABEL_7:
    v7 = v11;
    v11 = 0;
    v8 = *v10;
    *v10 = v7;
    if (v8)
    {
      if (*v8 == 2)
      {
        WTF::StringImpl::destroy();
        v9 = v11;
        v11 = 0;
        if (!v9)
        {
LABEL_16:
          (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
          WTF::printInternal();
          WTF::printInternal();
          (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
LABEL_17:
          (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
          WTF::printInternal();
          return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
        }
LABEL_13:
        if (*v9 == 2)
          WTF::StringImpl::destroy();
        else
          *v9 -= 2;
        goto LABEL_16;
      }
      *v8 -= 2;
    }
    v9 = v11;
    v11 = 0;
    if (!v9)
      goto LABEL_16;
    goto LABEL_13;
  }
  v5 = 1;
  while (1)
  {
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    result = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
    if (v5 >= *((unsigned int *)a2 + 13))
      break;
    WGSL::AST::Visitor::visit(this, *(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * v5++));
    if (v5 >= *((unsigned int *)a2 + 13))
      goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Structure *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD **v12;
  _DWORD *v13;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (*((_DWORD *)a2 + 17))
  {
    WGSL::AST::Visitor::visit(this, **((_QWORD **)a2 + 7));
    if (*((_DWORD *)a2 + 17) >= 2u)
    {
      v5 = 1;
      while (1)
      {
        (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
        WTF::printInternal();
        (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
        if (v5 >= *((unsigned int *)a2 + 17))
          break;
        WGSL::AST::Visitor::visit(this, *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v5++));
        if (v5 >= *((unsigned int *)a2 + 17))
          goto LABEL_6;
      }
      __break(0xC471u);
LABEL_26:
      JUMPOUT(0x182485960);
    }
LABEL_6:
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    WTF::printInternal();
    (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  }
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    WGSL::AST::Indent::Indent(&v12, this);
    if (*((_DWORD *)a2 + 21))
    {
      WGSL::AST::StringDumper::visit(this, **((WGSL::AST::StructureMember ***)a2 + 9));
      if (*((_DWORD *)a2 + 21) >= 2u)
      {
        v7 = 1;
        while (1)
        {
          (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
          WTF::printInternal();
          (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
          if (v7 >= *((unsigned int *)a2 + 21))
            break;
          WGSL::AST::StringDumper::visit(this, *(WGSL::AST::StructureMember **)(*((_QWORD *)a2 + 9) + 8 * v7++));
          if (v7 >= *((unsigned int *)a2 + 21))
            goto LABEL_13;
        }
        __break(0xC471u);
        goto LABEL_26;
      }
    }
LABEL_13:
    v8 = v13;
    v13 = 0;
    v9 = *v12;
    *v12 = v8;
    if (v9)
    {
      if (*v9 == 2)
      {
        WTF::StringImpl::destroy();
        v10 = v13;
        v13 = 0;
        if (!v10)
        {
LABEL_22:
          (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
          WTF::printInternal();
          WTF::printInternal();
          (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
          goto LABEL_23;
        }
LABEL_19:
        if (*v10 == 2)
          WTF::StringImpl::destroy();
        else
          *v10 -= 2;
        goto LABEL_22;
      }
      *v9 -= 2;
    }
    v10 = v13;
    v13 = 0;
    if (!v10)
      goto LABEL_22;
    goto LABEL_19;
  }
LABEL_23:
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Variable *a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_DWORD *)a2 + 25))
  {
    WGSL::AST::Visitor::visit(this, **((_QWORD **)a2 + 11));
    if (*((_DWORD *)a2 + 25) >= 2u)
    {
      v4 = (char *)this + 40;
      v5 = 1;
      do
      {
        (*(void (**)(char *))(*(_QWORD *)v4 + 32))((char *)this + 40);
        WTF::printInternal();
        (*(void (**)(char *))(*(_QWORD *)v4 + 40))((char *)this + 40);
        if (v5 >= *((unsigned int *)a2 + 25))
        {
          __break(0xC471u);
          JUMPOUT(0x182485D3CLL);
        }
        WGSL::AST::Visitor::visit(this, *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v5++));
      }
      while (v5 < *((unsigned int *)a2 + 25));
    }
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))((char *)this + 40);
  }
  v6 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))((char *)this + 40);
  if (*((_QWORD *)a2 + 13))
  {
    v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 32))((char *)this + 40);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::ASCIILiteral::dump();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::ASCIILiteral::dump();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    WTF::printInternal();
    (*(void (**)(char *))(*(_QWORD *)v6 + 40))((char *)this + 40);
  }
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  (*(void (**)(char *))(*(_QWORD *)v6 + 40))((char *)this + 40);
  if (*((_QWORD *)a2 + 14))
  {
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))((char *)this + 40);
    WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 14));
  }
  if (*((_QWORD *)a2 + 15))
  {
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))((char *)this + 40);
    WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 15));
  }
  (*(void (**)(char *))(*(_QWORD *)v6 + 32))((char *)this + 40);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 40))((char *)this + 40);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::VariableQualifier *a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 40;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::TypeAlias *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  v5 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 7));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::AbstractFloatLiteral *a2)
{
  char *v2;

  v2 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::AbstractIntegerLiteral *a2)
{
  char *v2;

  v2 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::IndexAccessExpression *a2)
{
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))((char *)this + 40);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 9));
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 40))((char *)this + 40);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::BoolLiteral *a2)
{
  char *v2;

  v2 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::CallExpression *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD **v10;
  _DWORD *v11;

  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))((char *)this + 40);
  if (!*((_DWORD *)a2 + 21))
    goto LABEL_16;
  WGSL::AST::Indent::Indent(&v10, this);
  if (!*((_DWORD *)a2 + 21) || (WGSL::AST::Visitor::visit(this, **((_QWORD **)a2 + 9)), *((_DWORD *)a2 + 21) < 2u))
  {
LABEL_7:
    v7 = v11;
    v11 = 0;
    v8 = *v10;
    *v10 = v7;
    if (v8)
    {
      if (*v8 == 2)
      {
        WTF::StringImpl::destroy();
        v9 = v11;
        v11 = 0;
        if (!v9)
        {
LABEL_16:
          (*(void (**)(char *))(*(_QWORD *)v4 + 32))((char *)this + 40);
          WTF::printInternal();
          return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))((char *)this + 40);
        }
LABEL_13:
        if (*v9 == 2)
          WTF::StringImpl::destroy();
        else
          *v9 -= 2;
        goto LABEL_16;
      }
      *v8 -= 2;
    }
    v9 = v11;
    v11 = 0;
    if (!v9)
      goto LABEL_16;
    goto LABEL_13;
  }
  v5 = 1;
  while (1)
  {
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))((char *)this + 40);
    WTF::printInternal();
    result = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))((char *)this + 40);
    if (v5 >= *((unsigned int *)a2 + 21))
      break;
    WGSL::AST::Visitor::visit(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v5++));
    if (v5 >= *((unsigned int *)a2 + 21))
      goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Float32Literal *a2)
{
  char *v2;

  v2 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

_DWORD *WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Float16Literal *a2)
{
  WGSL::AST::StringDumper *v2;
  uint64_t v9;
  _DWORD *result;
  _DWORD *v11;

  v2 = this;
  _H0 = *((_WORD *)a2 + 32);
  __asm { FCVT            S0, H0; float }
  WTF::String::number(this, _S0);
  v9 = *((_QWORD *)v2 + 5);
  v2 = (WGSL::AST::StringDumper *)((char *)v2 + 40);
  (*(void (**)(WGSL::AST::StringDumper *))(v9 + 32))(v2);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(WGSL::AST::StringDumper *))(*(_QWORD *)v2 + 40))(v2);
  result = v11;
  if (v11)
  {
    if (*v11 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *v11 -= 2;
  }
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::IdentifierExpression *a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 40;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Signed32Literal *a2)
{
  char *v2;

  v2 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::FieldAccessExpression *a2)
{
  WGSL::AST::StringDumper *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this;
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
  v3 = *((_QWORD *)v2 + 5);
  v2 = (WGSL::AST::StringDumper *)((char *)v2 + 40);
  v4 = (*(uint64_t (**)(WGSL::AST::StringDumper *))(v3 + 32))(v2);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(WGSL::AST::StringDumper *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Unsigned32Literal *a2)
{
  char *v2;

  v2 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::UnaryExpression *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 40;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  return WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::BinaryExpression *a2)
{
  uint64_t v4;

  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))((char *)this + 40);
  return WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 9));
}

uint64_t WGSL::AST::StringDumper::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 32))(a1 + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit((_BYTE *)a1, *(_QWORD *)(a2 + 64));
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::AssignmentStatement *a2)
{
  char *v4;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 4));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::CallExpression **a2)
{
  WGSL::AST::StringDumper *v2;
  uint64_t v3;

  v2 = this;
  WGSL::AST::StringDumper::visit(this, a2[3]);
  v3 = *((_QWORD *)v2 + 5);
  v2 = (WGSL::AST::StringDumper *)((char *)v2 + 40);
  (*(void (**)(WGSL::AST::StringDumper *))(v3 + 32))(v2);
  WTF::printInternal();
  return (*(uint64_t (**)(WGSL::AST::StringDumper *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::CompoundAssignmentStatement *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  v5 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 4));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::DecrementIncrementStatement *a2)
{
  WGSL::AST::StringDumper *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(v3, *((_QWORD *)a2 + 3));
  LODWORD(v3) = *((unsigned __int8 *)a2 + 32);
  v5 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  v6 = v5;
  if (v3 <= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::IfStatement *a2)
{
  char *v4;
  uint64_t result;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  result = WGSL::AST::StringDumper::visit(this, *((WGSL::AST::CompoundStatement **)a2 + 4));
  if (*((_QWORD *)a2 + 5))
  {
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    WTF::printInternal();
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 5) + 16))(*((_QWORD *)a2 + 5));
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    return WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 5));
  }
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::PhonyAssignmentStatement *a2)
{
  char *v4;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ReturnStatement *a2)
{
  char *v4;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (*((_QWORD *)a2 + 3))
  {
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 3));
  }
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Variable **a2)
{
  char *v4;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  return WGSL::AST::StringDumper::visit(this, a2[3]);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ForStatement *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  v5 = *((_QWORD *)a2 + 3);
  if (v5)
    WGSL::AST::Visitor::visit(this, v5);
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  v6 = *((_QWORD *)a2 + 4);
  if (v6)
    WGSL::AST::Visitor::visit(this, v6);
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
    WGSL::AST::Visitor::visit(this, v7);
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
  return WGSL::AST::StringDumper::visit(this, *((WGSL::AST::CompoundStatement **)a2 + 6));
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ArrayTypeExpression *a2)
{
  char *v4;
  uint64_t result;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  result = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (*((_QWORD *)a2 + 8))
  {
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
    if (*((_QWORD *)a2 + 9))
    {
      (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
      WTF::printInternal();
      (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
      WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 9));
    }
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  }
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ElaboratedTypeExpression *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)this + 40;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  v6 = *((unsigned int *)a2 + 27);
  if ((_DWORD)v6)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 12);
    WGSL::AST::Visitor::visit(this, *v7);
    if ((_DWORD)v6 != 1)
    {
      v8 = v7 + 1;
      v9 = 8 * v6 - 8;
      do
      {
        v10 = *v8++;
        (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
        WTF::printInternal();
        (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
        WGSL::AST::Visitor::visit(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ReferenceTypeExpression *a2)
{
  WGSL::AST::StringDumper *v2;
  uint64_t v3;

  v2 = this;
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
  v3 = *((_QWORD *)v2 + 5);
  v2 = (WGSL::AST::StringDumper *)((char *)v2 + 40);
  (*(void (**)(WGSL::AST::StringDumper *))(v3 + 32))(v2);
  WTF::printInternal();
  return (*(uint64_t (**)(WGSL::AST::StringDumper *))(*(_QWORD *)v2 + 40))(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Parameter *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (!*((_DWORD *)a2 + 21))
    goto LABEL_7;
  WGSL::AST::Visitor::visit(this, **((_QWORD **)a2 + 9));
  if (*((_DWORD *)a2 + 21) < 2u)
  {
LABEL_6:
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
LABEL_7:
    v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    return WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
  }
  v5 = 1;
  while (1)
  {
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    result = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
    if (v5 >= *((unsigned int *)a2 + 21))
      break;
    WGSL::AST::Visitor::visit(this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v5++));
    if (v5 >= *((unsigned int *)a2 + 21))
      goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::StructureMember *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = (char *)this + 40;
  (*(void (**)(char *))(*((_QWORD *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
  if (!*((_DWORD *)a2 + 25))
    goto LABEL_7;
  WGSL::AST::Visitor::visit(this, **((_QWORD **)a2 + 11));
  if (*((_DWORD *)a2 + 25) < 2u)
  {
LABEL_6:
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*(_QWORD *)v4 + 40))(v4);
LABEL_7:
    v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 32))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    WTF::printInternal();
    (*(void (**)(char *))(*((_QWORD *)this + 5) + 40))(v4);
    return WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 13));
  }
  v5 = 1;
  while (1)
  {
    (*(void (**)(char *))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    result = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 40))(v4);
    if (v5 >= *((unsigned int *)a2 + 25))
      break;
    WGSL::AST::Visitor::visit(this, *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v5++));
    if (v5 >= *((unsigned int *)a2 + 25))
      goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

void WGSL::AST::StringDumper::~StringDumper(WGSL::AST::StringDumper *this)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
  {
    if (*v2 == 2)
      WTF::StringImpl::destroy();
    else
      *v2 -= 2;
  }
  WTF::StringPrintStream::~StringPrintStream((WGSL::AST::StringDumper *)((char *)this + 40));
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WTF::StringImpl::destroy();
      else
        *v3 -= 2;
    }
  }
}

{
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
  {
    if (*v2 == 2)
      WTF::StringImpl::destroy();
    else
      *v2 -= 2;
  }
  WTF::StringPrintStream::~StringPrintStream((WGSL::AST::StringDumper *)((char *)this + 40));
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WTF::StringImpl::destroy();
      else
        *v3 -= 2;
    }
  }
  JUMPOUT(0x186DAB2A8);
}

_QWORD *WGSL::AST::Indent::Indent(_QWORD *this, WGSL::AST::StringDumper *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD **v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  _WORD *v8;
  int8x16_t *v9;
  uint64_t v10;
  _WORD *v11;
  unint64_t v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  _WORD *v25;
  int8x16_t *v26;
  __int16 v27;
  uint8x8_t *v28;
  uint16x8_t *v29;
  unint64_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint8x8_t *v34;
  uint16x8_t *v35;
  unint64_t v36;
  uint8x8_t v37;
  _BYTE *v38;
  int8x16_t *v39;
  size_t v40;
  _BYTE *v41;
  unint64_t v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  uint64_t v45;
  size_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  _BYTE *v50;
  int8x16_t *v51;
  char v52;
  _DWORD *v53;
  _DWORD *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  unint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t *v62;
  int8x8_t *v63;
  unint64_t v64;
  int16x8_t v65;
  uint64_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;

  v2 = this;
  v4 = (_DWORD **)((char *)a2 + 200);
  v3 = *((_QWORD *)a2 + 25);
  if (!v3)
  {
    v6 = 4;
    goto LABEL_40;
  }
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5 < 0)
    goto LABEL_88;
  v6 = v5 + 4;
  if (__OFADD__(v5, 4))
    goto LABEL_88;
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
LABEL_40:
    this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v6 + 20));
    v7 = (_DWORD *)v66;
    if (!v66)
      goto LABEL_88;
    v38 = (_BYTE *)(v66 + 20);
    *(_DWORD *)v66 = 2;
    *(_DWORD *)(v66 + 4) = v6;
    *(_QWORD *)(v66 + 8) = v66 + 20;
    *(_DWORD *)(v66 + 16) = 4;
    if (!v3)
    {
      v45 = 0;
LABEL_66:
      *(_DWORD *)&v38[v45] = 538976288;
LABEL_67:
      *v2 = v4;
      v53 = *v4;
      if (*v4)
        *v53 += 2;
      v2[1] = v53;
      v54 = *v4;
      *v4 = v7;
      if (v54)
      {
        if (*v54 == 2)
        {
          WTF::StringImpl::destroy();
          if (!v3)
            return v2;
LABEL_75:
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v3 -= 2;
          return v2;
        }
        *v54 -= 2;
      }
      if (!v3)
        return v2;
      goto LABEL_75;
    }
    v39 = *(int8x16_t **)(v3 + 8);
    v40 = *(unsigned int *)(v3 + 4);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if ((_DWORD)v40)
      {
        if ((_DWORD)v40 == 1)
          *v38 = v39->i8[0];
        else
          memcpy((void *)(v66 + 20), v39, v40);
      }
      goto LABEL_65;
    }
    v41 = &v38[v40];
    if (v40 < 0x10)
    {
      v42 = v66 + 20;
      if (v38 == v41)
      {
LABEL_65:
        v45 = *(unsigned int *)(v3 + 4);
        goto LABEL_66;
      }
    }
    else
    {
      v42 = (unint64_t)&v38[v40 & 0xFFFFFFF0];
      v43 = (unsigned __int128 *)(v66 + 20);
      do
      {
        v44 = (unsigned __int128)vld2q_s8(v39->i8);
        v39 += 2;
        *v43++ = v44;
      }
      while (v43 != (unsigned __int128 *)v42);
      if ((_BYTE *)v42 == v41)
        goto LABEL_65;
    }
    v46 = v66 + v40;
    v47 = v66 + v40 - v42 + 20;
    if (v47 < 8
      || (v42 < (unint64_t)&v39[2].u64[1] + 2 * v46 + -2 * v42
        ? (v48 = (unint64_t)v39 >= v46 + 20)
        : (v48 = 1),
          !v48))
    {
      v50 = (_BYTE *)v42;
      v51 = v39;
      goto LABEL_62;
    }
    if (v47 >= 0x20)
    {
      v49 = v47 & 0xFFFFFFFFFFFFFFE0;
      v55 = v39 + 2;
      v56 = (int8x16_t *)(v42 + 16);
      v57 = v47 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v59 = v55[-2];
        v58 = v55[-1];
        v61 = *v55;
        v60 = v55[1];
        v55 += 4;
        v56[-1] = vuzp1q_s8(v59, v58);
        *v56 = vuzp1q_s8(v61, v60);
        v56 += 2;
        v57 -= 32;
      }
      while (v57);
      if (v47 == v49)
        goto LABEL_65;
      if ((v47 & 0x18) == 0)
      {
        v51 = (int8x16_t *)((char *)v39 + 2 * v49);
        v50 = (_BYTE *)(v42 + v49);
        do
        {
LABEL_62:
          v52 = v51->i8[0];
          v51 = (int8x16_t *)((char *)v51 + 2);
          *v50++ = v52;
        }
        while (v50 != v41);
        goto LABEL_65;
      }
    }
    else
    {
      v49 = 0;
    }
    v50 = (_BYTE *)(v42 + (v47 & 0xFFFFFFFFFFFFFFF8));
    v51 = (int8x16_t *)((char *)v39 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
    v62 = (int16x8_t *)((char *)v39 + 2 * v49);
    v63 = (int8x8_t *)(v42 + v49);
    v64 = v49 - (v47 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v65 = *v62++;
      *v63++ = vmovn_s16(v65);
      v64 += 8;
    }
    while (v64);
    if (v47 == (v47 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_65;
    goto LABEL_62;
  }
  if (v6 <= 0x7FFFFFEF)
  {
    this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(2 * (v5 + 4) + 20));
    v7 = (_DWORD *)v66;
    if (v66)
    {
      v8 = (_WORD *)(v66 + 20);
      *(_DWORD *)v66 = 2;
      *(_DWORD *)(v66 + 4) = v6;
      *(_QWORD *)(v66 + 8) = v66 + 20;
      *(_DWORD *)(v66 + 16) = 0;
      v9 = *(int8x16_t **)(v3 + 8);
      v10 = *(unsigned int *)(v3 + 4);
      if ((*(_BYTE *)(v3 + 16) & 4) == 0)
      {
        if ((_DWORD)v10)
        {
          if ((_DWORD)v10 == 1)
            *v8 = v9->i16[0];
          else
            memcpy((void *)(v66 + 20), v9, 2 * v10);
        }
        goto LABEL_29;
      }
      v11 = &v8[v10];
      if (v10 < 0x40)
      {
        v12 = v66 + 20;
        if (v8 == v11)
        {
LABEL_29:
          *(_QWORD *)&v8[*(unsigned int *)(v3 + 4)] = 0x20002000200020;
          goto LABEL_67;
        }
      }
      else
      {
        v12 = (unint64_t)&v8[v10 & 0xFFFFFFC0];
        v13 = 0uLL;
        v14 = (char *)(v66 + 20);
        do
        {
          v67.val[0] = *v9;
          v15 = v9[1];
          v68.val[0] = v9[2];
          v16 = v9[3];
          v9 += 4;
          v17 = v16;
          v68.val[1] = 0uLL;
          v69.val[0] = v15;
          v67.val[1] = 0uLL;
          v18 = v14;
          vst2q_s8(v18, v67);
          v18 += 32;
          v69.val[1] = 0uLL;
          vst2q_s8(v18, v69);
          v19 = v14 + 64;
          vst2q_s8(v19, v68);
          v20 = v14 + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
          v14 += 128;
        }
        while (v14 != (char *)v12);
        if ((_WORD *)v12 == v11)
          goto LABEL_29;
      }
      v21 = v66 + 2 * v10 - v12 + 18;
      if (v21 < 0xE
        || (v12 < (unint64_t)v9->u64 + (v21 >> 1) + 1
          ? (v22 = (unint64_t)v9 >= (v21 & 0xFFFFFFFFFFFFFFFELL) + v12 + 2)
          : (v22 = 1),
            !v22))
      {
        v25 = (_WORD *)v12;
        v26 = v9;
        goto LABEL_26;
      }
      v23 = (v21 >> 1) + 1;
      if (v21 >= 0x3E)
      {
        v24 = v23 & 0xFFFFFFFFFFFFFFE0;
        v28 = (uint8x8_t *)&v9[1];
        v29 = (uint16x8_t *)(v12 + 32);
        v30 = v23 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v31 = *(uint8x16_t *)v28[-2].i8;
          v32 = vmovl_u8(*v28);
          v33 = vmovl_high_u8(*(uint8x16_t *)v28->i8);
          v29[-2] = vmovl_u8(*(uint8x8_t *)v31.i8);
          v29[-1] = vmovl_high_u8(v31);
          *v29 = v32;
          v29[1] = v33;
          v29 += 4;
          v28 += 4;
          v30 -= 32;
        }
        while (v30);
        if (v23 == v24)
          goto LABEL_29;
        if ((v23 & 0x18) == 0)
        {
          v26 = (int8x16_t *)((char *)v9 + v24);
          v25 = (_WORD *)(v12 + 2 * v24);
          do
          {
LABEL_26:
            v27 = v26->u8[0];
            v26 = (int8x16_t *)((char *)v26 + 1);
            *v25++ = v27;
          }
          while (v25 != v11);
          goto LABEL_29;
        }
      }
      else
      {
        v24 = 0;
      }
      v25 = (_WORD *)(v12 + 2 * (v23 & 0xFFFFFFFFFFFFFFF8));
      v26 = (int8x16_t *)((char *)v9 + (v23 & 0xFFFFFFFFFFFFFFF8));
      v34 = (uint8x8_t *)&v9->i8[v24];
      v35 = (uint16x8_t *)(v12 + 2 * v24);
      v36 = v24 - (v23 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v37 = *v34++;
        *v35++ = vmovl_u8(v37);
        v36 += 8;
      }
      while (v36);
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_29;
      goto LABEL_26;
    }
  }
LABEL_88:
  __break(0xC471u);
  return this;
}

uint64_t WGSL::AST::Visitor::visit(uint64_t result, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v6 = *(_QWORD **)(a2 + 80);
    v7 = 8 * v4 - 8;
LABEL_7:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 24))(v3, *v6);
    while (v7)
    {
      ++v6;
      v7 -= 8;
      if (!v3[32])
        goto LABEL_7;
    }
  }
  v5 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v5 && !v3[32])
  {
    v8 = *(_QWORD **)(a2 + 64);
    v9 = 8 * v5 - 8;
LABEL_12:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 40))(v3, *v8);
    while (v9)
    {
      ++v8;
      v9 -= 8;
      if (!v3[32])
        goto LABEL_12;
    }
  }
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 84);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v5 = *(_QWORD **)(a2 + 72);
    v6 = 8 * v4 - 8;
LABEL_6:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v5);
    while (v6)
    {
      ++v5;
      v6 -= 8;
      if (!v3[32])
        goto LABEL_6;
    }
  }
  if (!v3[32])
    return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *(_QWORD *)(a2 + 64));
  return result;
}

{
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v2)
  {
    v3 = (_BYTE *)result;
    if (!*(_BYTE *)(result + 32))
    {
      v4 = *(_QWORD **)(a2 + 40);
      v5 = 8 * v2 - 8;
LABEL_5:
      result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 360))(v3, *v4);
      while (v5)
      {
        ++v4;
        v5 -= 8;
        if (!v3[32])
          goto LABEL_5;
      }
    }
  }
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 60);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v5 = *(_QWORD **)(a2 + 48);
    v6 = 8 * v4 - 8;
LABEL_7:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v5);
    while (v6)
    {
      ++v5;
      v6 -= 8;
      if (!v3[32])
        goto LABEL_7;
    }
  }
  if (!v3[32])
  {
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *(_QWORD *)(a2 + 24));
    if (!v3[32])
    {
      result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 400))(v3, *(_QWORD *)(a2 + 32));
      if (!v3[32])
      {
        if (*(_QWORD *)(a2 + 40))
          return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 360))(v3);
      }
    }
  }
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v6 = *(_QWORD **)(a2 + 24);
    v7 = 8 * v4 - 8;
LABEL_9:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v6);
    while (v7)
    {
      ++v6;
      v7 -= 8;
      if (!v3[32])
        goto LABEL_9;
    }
  }
  v5 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v5 && !v3[32])
  {
    v8 = *(_QWORD **)(a2 + 40);
    v9 = 8 * v5 - 8;
LABEL_14:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 360))(v3, *v8);
    while (v9)
    {
      ++v8;
      v9 -= 8;
      if (!v3[32])
        goto LABEL_14;
    }
  }
  if (*(_BYTE *)(a2 + 96))
  {
    if (!v3[32])
      return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v3 + 560))(v3, a2 + 56);
  }
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v7 = *(_QWORD **)a2;
    v8 = 8 * v4 - 8;
LABEL_12:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 360))(v3, *v7);
    while (v8)
    {
      ++v7;
      v8 -= 8;
      if (!v3[32])
        goto LABEL_12;
    }
  }
  v5 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v5 && !v3[32])
  {
    v9 = *(_QWORD **)(a2 + 16);
    v10 = 8 * v5 - 8;
LABEL_17:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v9);
    while (v10)
    {
      ++v9;
      v10 -= 8;
      if (!v3[32])
        goto LABEL_17;
    }
  }
  if (*(_QWORD *)(a2 + 32))
    v6 = v3[32] == 0;
  else
    v6 = 0;
  if (v6)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 208))(v3);
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v5 = *(_QWORD **)a2;
    v6 = 8 * v4 - 8;
LABEL_6:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *v5);
    while (v6)
    {
      ++v5;
      v6 -= 8;
      if (!v3[32])
        goto LABEL_6;
    }
  }
  if (!v3[32])
    return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 400))(v3, *(_QWORD *)(a2 + 16));
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v6 = *(_QWORD **)(a2 + 56);
    v7 = 8 * v4 - 8;
LABEL_7:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v6);
    while (v7)
    {
      ++v6;
      v7 -= 8;
      if (!v3[32])
        goto LABEL_7;
    }
  }
  v5 = *(unsigned int *)(a2 + 84);
  if ((_DWORD)v5 && !v3[32])
  {
    v8 = *(_QWORD **)(a2 + 72);
    v9 = 8 * v5 - 8;
LABEL_12:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 536))(v3, *v8);
    while (v9)
    {
      ++v8;
      v9 -= 8;
      if (!v3[32])
        goto LABEL_12;
    }
  }
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 100);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v5 = *(_QWORD **)(a2 + 88);
    v6 = 8 * v4 - 8;
LABEL_6:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v5);
    while (v6)
    {
      ++v5;
      v6 -= 8;
      if (!v3[32])
        goto LABEL_6;
    }
  }
  if (!v3[32])
    return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *(_QWORD *)(a2 + 104));
  return result;
}

{
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a2 + 108);
  if ((_DWORD)v2)
  {
    v3 = (_BYTE *)result;
    if (!*(_BYTE *)(result + 32))
    {
      v4 = *(_QWORD **)(a2 + 96);
      v5 = 8 * v2 - 8;
LABEL_5:
      result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *v4);
      while (v5)
      {
        ++v4;
        v5 -= 8;
        if (!v3[32])
          goto LABEL_5;
      }
    }
  }
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = (_BYTE *)result;
  v4 = *(unsigned int *)(a2 + 100);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v9 = *(_QWORD **)(a2 + 88);
    v10 = 8 * v4 - 8;
LABEL_23:
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v9);
    while (v10)
    {
      ++v9;
      v10 -= 8;
      if (!v3[32])
        goto LABEL_23;
    }
  }
  v5 = v3[32];
  if (*(_QWORD *)(a2 + 104))
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 544))(v3);
    v5 = v3[32];
    if (v3[32])
      v8 = 1;
    else
      v8 = *(_QWORD *)(a2 + 112) == 0;
    if (!v8)
    {
LABEL_18:
      result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 208))(v3);
      if (v3[32])
        return result;
      goto LABEL_19;
    }
  }
  else
  {
    if (v3[32])
      v7 = 1;
    else
      v7 = *(_QWORD *)(a2 + 112) == 0;
    if (!v7)
      goto LABEL_18;
  }
  if (v5)
    return result;
LABEL_19:
  if (*(_QWORD *)(a2 + 120))
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 208))(v3);
  return result;
}

uint64_t WGSL::AST::Visitor::visit(_BYTE *a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result == 17 && !a1[32])
    return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  switch((int)result)
  {
    case 15:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2);
      break;
    case 27:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
      break;
    case 56:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2);
      break;
    case 58:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2);
      break;
    case 62:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2);
      break;
    default:
      return result;
  }
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  switch((int)result)
  {
    case 1:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2);
      break;
    case 2:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2);
      break;
    case 3:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2);
      break;
    case 4:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2);
      break;
    case 5:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
      break;
    case 6:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
      break;
    case 7:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2);
      break;
    case 8:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 152))(a1, a2);
      break;
    case 9:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 160))(a1, a2);
      break;
    case 10:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2);
      break;
    case 11:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a2);
      break;
    case 12:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2);
      break;
    case 13:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2);
      break;
    case 14:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2);
      break;
    default:
      return result;
  }
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  switch((int)result)
  {
    case 18:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 232))(a1, a2);
      break;
    case 19:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2);
      break;
    case 20:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2);
      break;
    case 21:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 264))(a1, a2);
      break;
    case 22:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 288))(a1, a2);
      break;
    case 23:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 296))(a1, a2);
      break;
    case 24:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 304))(a1, a2);
      break;
    case 26:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 328))(a1, a2);
      break;
    case 30:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 216))(a1, a2);
      break;
    case 31:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2);
      break;
    case 32:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 248))(a1, a2);
      break;
    case 33:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 272))(a1, a2);
      break;
    case 34:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 280))(a1, a2);
      break;
    case 35:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 320))(a1, a2);
      break;
    case 36:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 336))(a1, a2);
      break;
    case 59:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 512))(a1, a2);
      break;
    case 60:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 520))(a1, a2);
      break;
    case 61:
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 528))(a1, a2);
      break;
    default:
      return result;
  }
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  switch((int)result)
  {
    case '&':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 368))(a1, a2);
      break;
    case '\'':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 376))(a1, a2);
      break;
    case '(':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 384))(a1, a2);
      break;
    case ')':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 392))(a1, a2);
      break;
    case '*':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 400))(a1, a2);
      break;
    case '+':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 408))(a1, a2);
      break;
    case ',':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 416))(a1, a2);
      break;
    case '-':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 424))(a1, a2);
      break;
    case '.':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 432))(a1, a2);
      break;
    case '/':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 440))(a1, a2);
      break;
    case '0':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 448))(a1, a2);
      break;
    case '1':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2);
      break;
    case '2':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 464))(a1, a2);
      break;
    case '3':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 472))(a1, a2);
      break;
    case '4':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 480))(a1, a2);
      break;
    case '5':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 488))(a1, a2);
      break;
    case '6':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 496))(a1, a2);
      break;
    case '7':
      if (!a1[32])
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 504))(a1, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WGSL::AST::Visitor::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(a2 + 56));
}

{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(a2 + 24));
}

unsigned __int8 *WGSL::AST::Visitor::visit(unsigned __int8 *result, _QWORD *a2)
{
  unsigned __int8 *v3;
  int v4;
  BOOL v5;

  if (!result[32])
  {
    v3 = result;
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)result + 208))(result, a2[3]);
    v4 = v3[32];
    if (v3[32])
      v5 = 1;
    else
      v5 = a2[4] == 0;
    if (!v5)
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 208))(v3);
      v4 = v3[32];
    }
    if (!v4)
    {
      if (a2[5])
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 208))(v3);
    }
  }
  return result;
}

{
  unsigned __int8 *v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v3 = result;
  v4 = result[32];
  if (a2[3])
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 360))(result);
    v4 = v3[32];
    if (v3[32])
      v9 = 1;
    else
      v9 = a2[4] == 0;
    if (!v9)
    {
LABEL_21:
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 208))(v3);
      v4 = v3[32];
      if (v3[32])
        v10 = 1;
      else
        v10 = a2[5] == 0;
      if (!v10)
        goto LABEL_25;
      goto LABEL_15;
    }
  }
  else
  {
    v6 = a2[4];
    if (result[32])
      v7 = 1;
    else
      v7 = v6 == 0;
    if (!v7)
      goto LABEL_21;
  }
  if (v4)
    v8 = 1;
  else
    v8 = a2[5] == 0;
  if (!v8)
  {
LABEL_25:
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 360))(v3);
    if (!v3[32])
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v3 + 400))(v3, a2[6]);
    return result;
  }
LABEL_15:
  if (!v4)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v3 + 400))(v3, a2[6]);
  return result;
}

_BYTE *WGSL::AST::Visitor::visit(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;

  if (!result[32])
  {
    v3 = result;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 64));
    if (!v3[32])
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *(_QWORD *)(a2 + 72));
  }
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 72));
  return result;
}

{
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = result;
  if (result[32])
  {
    v4 = *(unsigned int *)(a2 + 84);
    if (!(_DWORD)v4)
      return result;
  }
  else
  {
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 64));
    v4 = *(unsigned int *)(a2 + 84);
    if (!(_DWORD)v4)
      return result;
  }
  if (!v3[32])
  {
    v5 = *(_QWORD **)(a2 + 72);
    v6 = 8 * v4 - 8;
LABEL_8:
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *v5);
    while (v6)
    {
      ++v5;
      v6 -= 8;
      if (!v3[32])
        goto LABEL_8;
    }
  }
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 64));
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 352))(result, a2 + 64);
  return result;
}

{
  _BYTE *v3;

  if (!result[32])
  {
    v3 = result;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 64));
    if (!v3[32])
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *(_QWORD *)(a2 + 72));
  }
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 64));
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 64));
  return result;
}

{
  _BYTE *v3;

  if (!result[32])
  {
    v3 = result;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 24));
    if (!v3[32])
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *(_QWORD *)(a2 + 32));
  }
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 256))(result, *(_QWORD *)(a2 + 24));
  return result;
}

{
  _BYTE *v3;

  if (!result[32])
  {
    v3 = result;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 24));
    if (!v3[32])
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *(_QWORD *)(a2 + 32));
  }
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a2 + 24));
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 24));
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 24));
  return result;
}

{
  BOOL v2;

  if (*(_QWORD *)(a2 + 24))
    v2 = result[32] == 0;
  else
    v2 = 0;
  if (v2)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 208))(result);
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 24));
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a2 + 24));
  return result;
}

{
  _BYTE *v3;

  if (!result[32])
  {
    v3 = result;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 24));
    if (!v3[32])
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 400))(v3, *(_QWORD *)(a2 + 32));
  }
  return result;
}

{
  if (!result[32])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 64));
  return result;
}

_BYTE *WGSL::AST::Visitor::visit(_BYTE *this, Function *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = this;
  v4 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v4 && !this[32])
  {
    v9 = (_QWORD *)*((_QWORD *)a2 + 9);
    v10 = 8 * v4 - 8;
LABEL_16:
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v9);
    while (v10)
    {
      ++v9;
      v10 -= 8;
      if (!v3[32])
        goto LABEL_16;
    }
  }
  v5 = *((unsigned int *)a2 + 17);
  if ((_DWORD)v5 && !v3[32])
  {
    v11 = (_QWORD *)*((_QWORD *)a2 + 7);
    v12 = 8 * v5 - 8;
LABEL_21:
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 344))(v3, *v11);
    while (v12)
    {
      ++v11;
      v12 -= 8;
      if (!v3[32])
        goto LABEL_21;
    }
  }
  v6 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v6 && !v3[32])
  {
    v13 = (_QWORD *)*((_QWORD *)a2 + 11);
    v14 = 8 * v6 - 8;
LABEL_26:
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v13);
    while (v14)
    {
      ++v13;
      v14 -= 8;
      if (!v3[32])
        goto LABEL_26;
    }
  }
  v7 = v3[32];
  if (*((_QWORD *)a2 + 13))
    v8 = v7 == 0;
  else
    v8 = 0;
  if (v8)
  {
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 208))(v3);
    v7 = v3[32];
  }
  if (!v7)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 400))(v3, *((_QWORD *)a2 + 14));
  return this;
}

unsigned __int8 *WGSL::AST::Visitor::visit(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = result;
  if (result[32])
    goto LABEL_2;
  result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)result + 208))(result, *(_QWORD *)(a2 + 32));
  v4 = v3[32];
  v8 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v8)
  {
    if (v3[32])
    {
LABEL_2:
      v4 = 1;
      goto LABEL_3;
    }
    v9 = *(_QWORD **)(a2 + 40);
    v10 = 8 * v8;
    do
    {
      if (!v3[32])
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v9);
      ++v9;
      v10 -= 8;
    }
    while (v10);
    v4 = v3[32];
  }
LABEL_3:
  v5 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v5)
  {
    if (v4)
      return result;
    v6 = *(_QWORD *)(a2 + 56);
    v7 = 24 * v5;
    do
    {
      if (!v3[32])
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v3 + 552))(v3, v6);
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
    v4 = v3[32];
  }
  if (!v4)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v3 + 552))(v3, a2 + 72);
  return result;
}

{
  unsigned __int8 *v3;
  int v4;
  BOOL v5;
  BOOL v6;

  v3 = result;
  v4 = result[32];
  if (*(_QWORD *)(a2 + 64))
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 208))(result);
    v4 = v3[32];
  }
  if (v4)
    v6 = 1;
  else
    v6 = *(_QWORD *)(a2 + 72) == 0;
  if (!v6)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 208))(v3);
  return result;
}

void WGSL::AST::Visitor::~Visitor(WGSL::AST::Visitor *this)
{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v2 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2)
        WTF::StringImpl::destroy();
      else
        *v2 -= 2;
    }
  }
}

{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v2 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2)
        WTF::StringImpl::destroy();
      else
        *v2 -= 2;
    }
  }
  JUMPOUT(0x186DAB2A8);
}

_BYTE *WGSL::AttributeValidator::visit(WGSL::AttributeValidator *this, Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  WGSL::AttributeValidator *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t i;
  uint64_t v23;
  __int16 v24;
  __int128 *v25;
  WGSL::AttributeValidator *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *result;
  char *v32;
  int v33[4];
  unsigned int v34;
  char v35;
  char v36;

  v4 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v4)
  {
    v32 = (char *)a2 + 128;
    v5 = 8 * v4;
    v6 = (_QWORD *)*((_QWORD *)a2 + 9);
    do
    {
      v7 = *v6;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6) == 11)
      {
        if (*((_QWORD *)a2 + 13))
        {
          if (*((_BYTE *)a2 + 120))
            goto LABEL_59;
        }
        else
        {
          WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (__int128 *)(v7 + 8), "@must_use can only be applied to functions that return a value", 63);
          if (*((_BYTE *)a2 + 120))
            goto LABEL_59;
        }
        *((_BYTE *)a2 + 120) = 1;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) != 13)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) == 14)
          {
            v8 = *(_QWORD *)(v7 + 24);
            if (!v8)
              goto LABEL_30;
            LOBYTE(v33[0]) = 0;
            v35 = 0;
            if (!*(_BYTE *)(v8 + 56))
              goto LABEL_30;
            v34 = -1;
            v9 = *(unsigned int *)(v8 + 48);
            if ((_DWORD)v9 == -1)
            {
              v35 = 1;
              goto LABEL_103;
            }
            ((void (*)(char *, int *, uint64_t))off_1E0FD2AA0[v9])(&v36, v33, v8 + 32);
            v34 = v9;
            v35 = 1;
            switch((_DWORD)v9)
            {
              case 5:
                if (*(uint64_t *)v33 <= 0)
                  goto LABEL_27;
                break;
              case 4:
                if (!v33[0])
                  goto LABEL_27;
                break;
              case 3:
                if (v33[0] <= 0)
                {
LABEL_27:
                  WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (__int128 *)(v8 + 8), "@workgroup_size argument must be at least 1", 44);
                  if (v35)
                  {
                    v9 = v34;
                    if (v34 != -1)
                      break;
                  }
LABEL_30:
                  v14 = *(_QWORD *)(v7 + 32);
                  if (!v14)
                    goto LABEL_44;
                  LOBYTE(v33[0]) = 0;
                  v35 = 0;
                  if (!*(_BYTE *)(v14 + 56))
                    goto LABEL_44;
                  v34 = -1;
                  v15 = *(unsigned int *)(v14 + 48);
                  if ((_DWORD)v15 == -1)
                  {
                    v35 = 1;
LABEL_101:
                    __break(0xC471u);
                    JUMPOUT(0x182489BACLL);
                  }
                  ((void (*)(char *, int *, uint64_t))off_1E0FD2AA0[v15])(&v36, v33, v14 + 32);
                  v34 = v15;
                  v35 = 1;
                  switch((_DWORD)v15)
                  {
                    case 5:
                      if (*(uint64_t *)v33 <= 0)
                        goto LABEL_41;
                      break;
                    case 4:
                      if (!v33[0])
                        goto LABEL_41;
                      break;
                    case 3:
                      if (v33[0] <= 0)
                      {
LABEL_41:
                        WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (__int128 *)(v14 + 8), "@workgroup_size argument must be at least 1", 44);
                        if (v35)
                        {
                          v15 = v34;
                          if (v34 != -1)
                            break;
                        }
LABEL_44:
                        v16 = *(_QWORD *)(v7 + 40);
                        if (!v16)
                          goto LABEL_58;
                        LOBYTE(v33[0]) = 0;
                        v35 = 0;
                        if (!*(_BYTE *)(v16 + 56))
                          goto LABEL_58;
                        v34 = -1;
                        v17 = *(unsigned int *)(v16 + 48);
                        if ((_DWORD)v17 == -1)
                        {
                          v35 = 1;
LABEL_103:
                          __break(0xC471u);
                          JUMPOUT(0x182489B84);
                        }
                        ((void (*)(char *, int *, uint64_t))off_1E0FD2AA0[v17])(&v36, v33, v16 + 32);
                        v34 = v17;
                        v35 = 1;
                        switch((_DWORD)v17)
                        {
                          case 5:
                            if (*(uint64_t *)v33 <= 0)
                              goto LABEL_55;
                            break;
                          case 4:
                            if (!v33[0])
                              goto LABEL_55;
                            break;
                          case 3:
                            if (v33[0] <= 0)
                            {
LABEL_55:
                              WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (__int128 *)(v16 + 8), "@workgroup_size argument must be at least 1", 44);
                              if (v35)
                              {
                                v17 = v34;
                                if (v34 != -1)
                                  break;
                              }
LABEL_58:
                              if (!*((_BYTE *)a2 + 152))
                              {
                                v18 = *(_OWORD *)(v7 + 24);
                                *((_QWORD *)v32 + 2) = *(_QWORD *)(v7 + 40);
                                *(_OWORD *)v32 = v18;
                                *((_BYTE *)a2 + 152) = 1;
                                goto LABEL_4;
                              }
LABEL_59:
                              v10 = (__int128 *)(v7 + 8);
                              v11 = this;
                              v12 = "duplicate attribute";
                              v13 = 20;
LABEL_60:
                              WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v11, v10, v12, v13);
                              goto LABEL_4;
                            }
                            break;
                          default:
                            goto LABEL_103;
                        }
                        ((void (*)(char *, int *))off_1E0FD2A48[v17])(&v36, v33);
                        goto LABEL_58;
                      }
                      break;
                    default:
                      goto LABEL_101;
                  }
                  ((void (*)(char *, int *))off_1E0FD2A48[v15])(&v36, v33);
                  goto LABEL_44;
                }
                break;
              default:
                goto LABEL_103;
            }
            ((void (*)(char *, int *))off_1E0FD2A48[v9])(&v36, v33);
            goto LABEL_30;
          }
          v10 = (__int128 *)(v7 + 8);
          v11 = this;
          v12 = "invalid attribute for function declaration";
          v13 = 43;
          goto LABEL_60;
        }
        if (*((_BYTE *)a2 + 122))
          goto LABEL_59;
        *(_WORD *)((char *)a2 + 121) = *(unsigned __int8 *)(v7 + 24) | 0x100;
      }
LABEL_4:
      ++v6;
      v5 -= 8;
    }
    while (v5);
  }
  if (*((_BYTE *)a2 + 152))
  {
    if (*(unsigned __int16 *)((char *)a2 + 121) < 0x100u || *(_WORD *)((char *)a2 + 121) != 4)
      WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (__int128 *)((char *)a2 + 8), "@workgroup_size must only be applied to compute shader entry point function", 76);
  }
  v20 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v20)
  {
    v21 = (uint64_t *)*((_QWORD *)a2 + 11);
    for (i = 8 * v20; i; i -= 8)
    {
      v23 = *v21;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v21 + 16))(*v21) == 3)
      {
        if (*(unsigned __int16 *)((char *)a2 + 121) <= 0xFFu)
          WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (__int128 *)(v23 + 8), "@builtin is not valid for non-entry point function types", 57);
        if (*((_BYTE *)a2 + 162))
          goto LABEL_81;
        *(_WORD *)((char *)a2 + 161) = *(unsigned __int8 *)(v23 + 24) | 0x100;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23) != 8)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23) == 9)
          {
            if (!*((_BYTE *)a2 + 160))
            {
              *((_BYTE *)a2 + 160) = 1;
              goto LABEL_70;
            }
LABEL_81:
            v25 = (__int128 *)(v23 + 8);
            v26 = this;
            v27 = "duplicate attribute";
            v28 = 20;
          }
          else
          {
            if ((WGSL::AttributeValidator::parseLocation(this, (uint64_t)a2, (uint64_t)a2 + 168, v23, *(unsigned __int8 **)(*((_QWORD *)a2 + 13) + 24)) & 1) != 0)goto LABEL_70;
            v25 = (__int128 *)(v23 + 8);
            v26 = this;
            v27 = "invalid attribute for function return type";
            v28 = 43;
          }
          WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v26, v25, v27, v28);
          goto LABEL_70;
        }
        if (*((_BYTE *)a2 + 165))
          goto LABEL_81;
        v24 = *(_WORD *)(v23 + 24);
        *((_BYTE *)a2 + 165) = 1;
        *(_WORD *)((char *)a2 + 163) = v24;
      }
LABEL_70:
      ++v21;
    }
  }
  v29 = *((_QWORD *)a2 + 13);
  if (v29)
  {
    if ((*(unsigned __int16 *)((char *)a2 + 163) | (*((unsigned __int8 *)a2 + 165) << 16)) >= 0x10000u
      && (unint64_t)*((unsigned __int8 *)a2 + 172) << 32 == 0)
    {
      WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (__int128 *)(v29 + 8), "@interpolate is only allowed on declarations that have a @location attribute", 77);
      v29 = *((_QWORD *)a2 + 13);
    }
    if (*((_BYTE *)a2 + 160)
      && (*(unsigned __int16 *)((char *)a2 + 161) < 0x100u || *(_WORD *)((char *)a2 + 161) != 7))
    {
      WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (__int128 *)(v29 + 8), "@invariant is only allowed on declarations that have a @builtin(position) attribute", 84);
    }
  }
  *((_QWORD *)this + 5) = a2;
  result = WGSL::AST::Visitor::visit(this, a2);
  *((_QWORD *)this + 5) = 0;
  return result;
}

_DWORD *WGSL::AttributeValidator::error<WTF::ASCIILiteral>(_DWORD *result, __int128 *a2, _BYTE *a3, uint64_t a4)
{
  size_t v4;
  _DWORD *v6;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;

  if (a4)
    v4 = a4 - 1;
  else
    v4 = 0;
  if (v4 >> 31)
    goto LABEL_18;
  v6 = result;
  if (!(_DWORD)v4)
  {
    v8 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v14 = v8;
    v15 = *a2;
    v9 = result[17];
    if ((_DWORD)v9 == result[16])
      goto LABEL_11;
    goto LABEL_16;
  }
  WTF::tryFastCompactMalloc((WTF *)(v4 + 20));
  v8 = v14;
  if (!v14)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x182489DA4);
  }
  result = v14 + 5;
  *v14 = 2;
  v8[1] = v4;
  *((_QWORD *)v8 + 1) = v8 + 5;
  v8[4] = 4;
  if ((_DWORD)v4 != 1)
  {
    result = memcpy(result, a3, v4);
    v14 = v8;
    v15 = *a2;
    v9 = v6[17];
    if ((_DWORD)v9 == v6[16])
      goto LABEL_11;
LABEL_16:
    v13 = *((_QWORD *)v6 + 7) + 24 * v9;
    *(_QWORD *)v13 = v8;
    *(_OWORD *)(v13 + 8) = v15;
    ++v6[17];
    return result;
  }
  *(_BYTE *)result = *a3;
  v14 = v8;
  v15 = *a2;
  v9 = v6[17];
  if ((_DWORD)v9 != v6[16])
    goto LABEL_16;
LABEL_11:
  v10 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v6 + 14), v9 + 1, (unint64_t)&v14);
  v11 = *((_QWORD *)v6 + 7) + 24 * v6[17];
  v12 = *(_QWORD *)v10;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)v11 = v12;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
  result = v14;
  ++v6[17];
  v14 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

uint64_t WGSL::AttributeValidator::parseLocation(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  __int128 *v10;
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t result;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  __int128 *v21;
  char *v22;
  _DWORD *v23;
  uint64_t v24;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4) != 10)
    return 0;
  if (a2)
  {
    if (*(unsigned __int16 *)(a2 + 121) <= 0xFFu)
    {
      v10 = (__int128 *)(a4 + 8);
      v11 = "@location is not valid for non-entry point function types";
      v12 = a1;
      v13 = 58;
LABEL_8:
      WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v12, v10, v11, v13);
      goto LABEL_9;
    }
    if (*(_WORD *)(a2 + 121) == 4)
    {
      v10 = (__int128 *)(a4 + 8);
      v11 = "@location may not be used in the compute shader stage";
      v12 = a1;
      v13 = 54;
      goto LABEL_8;
    }
  }
LABEL_9:
  if (!a5)
    goto LABEL_23;
  v15 = a5;
  while (1)
  {
    v16 = *((_DWORD *)v15 + 12);
    if (v16 != 10)
      break;
    v15 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
    if (!v15)
      goto LABEL_16;
  }
  if (!v16 && *v15 < 6u)
    goto LABEL_24;
LABEL_16:
  if (*((_DWORD *)a5 + 12) != 1)
    goto LABEL_23;
  v17 = *(unsigned __int8 **)a5;
  if (!*(_QWORD *)a5)
    goto LABEL_23;
  while (1)
  {
    v18 = *((_DWORD *)v17 + 12);
    if (v18 != 10)
      break;
    v17 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
    if (!v17)
      goto LABEL_23;
  }
  if (v18 || *v17 >= 6u)
LABEL_23:
    WGSL::AttributeValidator::error<WTF::ASCIILiteral>(a1, (__int128 *)(a4 + 8), "@location must only be applied to declarations of numeric scalar or numeric vector type", 88);
LABEL_24:
  v19 = *(_QWORD *)(a4 + 24);
  if (!*(_BYTE *)(v19 + 56))
  {
    WGSL::AttributeValidator::error<WTF::ASCIILiteral>(a1, (__int128 *)(a4 + 8), "@location constant value is missing", 36);
    return 0;
  }
  v20 = *(_DWORD *)(v19 + 48);
  switch(v20)
  {
    case 5:
      v19 = *(_QWORD *)(v19 + 32);
      if ((v19 & 0x8000000000000000) == 0)
      {
LABEL_29:
        if (*(_BYTE *)(a3 + 4))
        {
LABEL_30:
          v21 = (__int128 *)(a4 + 8);
          v22 = "duplicate attribute";
          v23 = a1;
          v24 = 20;
LABEL_34:
          WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v23, v21, v22, v24);
          return 1;
        }
        goto LABEL_36;
      }
LABEL_33:
      v21 = (__int128 *)(a4 + 8);
      v22 = "@location value must be non-negative";
      v23 = a1;
      v24 = 37;
      goto LABEL_34;
    case 4:
      LODWORD(v19) = *(_DWORD *)(v19 + 32);
      if (*(_BYTE *)(a3 + 4))
        goto LABEL_30;
LABEL_36:
      *(_DWORD *)a3 = v19;
      result = 1;
      *(_BYTE *)(a3 + 4) = 1;
      return result;
    case 3:
      v19 = *(int *)(v19 + 32);
      if ((v19 & 0x8000000000000000) == 0)
        goto LABEL_29;
      goto LABEL_33;
  }
  result = 151;
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AttributeValidator::visit(uint64_t this, WGSL::AST::Parameter *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int128 *v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = this;
  v4 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 9);
    for (i = 8 * v4; i; i -= 8)
    {
      v7 = *v5;
      v8 = *(_QWORD *)(v3 + 40);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v5 + 16))(*v5);
      if ((_DWORD)this == 3)
      {
        if (v8 && *(unsigned __int16 *)(v8 + 121) <= 0xFFu)
          this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)(v7 + 8), "@builtin is not valid for non-entry point function types", 57);
        if (*((_BYTE *)a2 + 90))
          goto LABEL_15;
        *(_WORD *)((char *)a2 + 89) = *(unsigned __int8 *)(v7 + 24) | 0x100;
      }
      else
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        if ((_DWORD)this != 8)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
          if ((_DWORD)this == 9)
          {
            if (!*((_BYTE *)a2 + 88))
            {
              *((_BYTE *)a2 + 88) = 1;
              goto LABEL_3;
            }
LABEL_15:
            v10 = (__int128 *)(v7 + 8);
            v11 = (_DWORD *)v3;
            v12 = "duplicate attribute";
            v13 = 20;
          }
          else
          {
            this = WGSL::AttributeValidator::parseLocation((_DWORD *)v3, *(_QWORD *)(v3 + 40), (uint64_t)a2 + 96, v7, *(unsigned __int8 **)(*((_QWORD *)a2 + 8) + 24));
            if ((this & 1) != 0)
              goto LABEL_3;
            v10 = (__int128 *)(v7 + 8);
            v11 = (_DWORD *)v3;
            v12 = "invalid attribute for function parameter";
            v13 = 41;
          }
          this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v11, v10, v12, v13);
          goto LABEL_3;
        }
        if (*((_BYTE *)a2 + 93))
          goto LABEL_15;
        v9 = *(_WORD *)(v7 + 24);
        *((_BYTE *)a2 + 93) = 1;
        *(_WORD *)((char *)a2 + 91) = v9;
      }
LABEL_3:
      ++v5;
    }
  }
  if ((*(unsigned __int16 *)((char *)a2 + 91) | (*((unsigned __int8 *)a2 + 93) << 16)) >= 0x10000u
    && (unint64_t)*((unsigned __int8 *)a2 + 100) << 32 == 0)
  {
    this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)((char *)a2 + 8), "@interpolate is only allowed on declarations that have a @location attribute", 77);
  }
  if (*((_BYTE *)a2 + 88))
  {
    if (*(unsigned __int16 *)((char *)a2 + 89) < 0x100u || *(_WORD *)((char *)a2 + 89) != 7)
      this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)((char *)a2 + 8), "@invariant is only allowed on declarations that have a @builtin(position) attribute", 84);
  }
  v16 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v16 && !*(_BYTE *)(v3 + 32))
  {
    v17 = (_QWORD *)*((_QWORD *)a2 + 9);
    v18 = 8 * v16 - 8;
LABEL_37:
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v17);
    while (v18)
    {
      ++v17;
      v18 -= 8;
      if (!*(_BYTE *)(v3 + 32))
        goto LABEL_37;
    }
  }
  if (!*(_BYTE *)(v3 + 32))
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 208))(v3, *((_QWORD *)a2 + 8));
  return this;
}

_DWORD *WGSL::AttributeValidator::visit(_DWORD *this, WGSL::AST::Variable *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 *v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v3 = (uint64_t)this;
  v4 = *((unsigned __int16 *)a2 + 76);
  v5 = (0x1Au >> v4) & 1;
  if (*((_WORD *)a2 + 76) > 5u)
    LOBYTE(v5) = 1;
  if (v4 >= 0x100)
    v6 = v5;
  else
    v6 = 0;
  v7 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v7)
  {
    v8 = (_QWORD *)*((_QWORD *)a2 + 11);
    v9 = &v8[v7];
    do
    {
      v14 = *v8;
      this = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
      if (v14)
        v15 = (_DWORD)this == 2;
      else
        v15 = 0;
      if (v15)
      {
        if ((v6 & 1) == 0)
          this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)(v14 + 8), "@binding attribute must only be applied to resource variables", 62);
        v18 = *(_QWORD *)(v14 + 24);
        if (*(_BYTE *)(v18 + 56))
        {
          v19 = *(_DWORD *)(v18 + 48);
          switch(v19)
          {
            case 5:
              v18 = *(_QWORD *)(v18 + 32);
              if ((v18 & 0x8000000000000000) == 0)
                goto LABEL_32;
              break;
            case 4:
              LODWORD(v18) = *(_DWORD *)(v18 + 32);
              if (!*((_BYTE *)a2 + 160))
              {
LABEL_44:
                *((_DWORD *)a2 + 39) = v18;
                *((_BYTE *)a2 + 160) = 1;
                goto LABEL_10;
              }
              goto LABEL_63;
            case 3:
              v18 = *(int *)(v18 + 32);
              if ((v18 & 0x8000000000000000) == 0)
              {
LABEL_32:
                if (!*((_BYTE *)a2 + 160))
                  goto LABEL_44;
                goto LABEL_63;
              }
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x18248A6DCLL);
          }
          v10 = (__int128 *)(v14 + 8);
          v11 = (_DWORD *)v3;
          v12 = "@binding value must be non-negative";
          v13 = 36;
        }
        else
        {
          v10 = (__int128 *)(v14 + 8);
          v11 = (_DWORD *)v3;
          v12 = "@binding attribute must only be applied to resource variables";
          v13 = 62;
        }
      }
      else
      {
        this = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        if ((_DWORD)this == 6)
        {
          if ((v6 & 1) == 0)
            this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)(v14 + 8), "@group attribute must only be applied to resource variables", 60);
          v16 = *(_QWORD *)(v14 + 24);
          if (*(_BYTE *)(v16 + 56))
          {
            v17 = *(_DWORD *)(v16 + 48);
            switch(v17)
            {
              case 5:
                v16 = *(_QWORD *)(v16 + 32);
                if ((v16 & 0x8000000000000000) == 0)
                  goto LABEL_23;
                break;
              case 4:
                LODWORD(v16) = *(_DWORD *)(v16 + 32);
                if (!*((_BYTE *)a2 + 168))
                {
LABEL_64:
                  *((_DWORD *)a2 + 41) = v16;
                  *((_BYTE *)a2 + 168) = 1;
                  goto LABEL_10;
                }
                goto LABEL_63;
              case 3:
                v16 = *(int *)(v16 + 32);
                if ((v16 & 0x8000000000000000) == 0)
                {
LABEL_23:
                  if (!*((_BYTE *)a2 + 168))
                    goto LABEL_64;
LABEL_63:
                  v10 = (__int128 *)(v14 + 8);
                  v11 = (_DWORD *)v3;
                  v12 = "duplicate attribute";
                  v13 = 20;
                  goto LABEL_9;
                }
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x18248A6FCLL);
            }
            v10 = (__int128 *)(v14 + 8);
            v11 = (_DWORD *)v3;
            v12 = "@group value must be non-negative";
            v13 = 34;
          }
          else
          {
            v10 = (__int128 *)(v14 + 8);
            v11 = (_DWORD *)v3;
            v12 = "@group attribute must only be applied to resource variables";
            v13 = 60;
          }
        }
        else
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14) == 7)
          {
            v20 = *(_QWORD *)(v14 + 24);
            if (*((_BYTE *)a2 + 128) == 2)
            {
              v21 = (unsigned __int8 *)*((_QWORD *)a2 + 18);
              if (!v21)
                goto LABEL_84;
              while (1)
              {
                v22 = *((_DWORD *)v21 + 12);
                if (v22 != 10)
                  break;
                v21 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
                if (!v21)
                  goto LABEL_84;
              }
              if (v22 || ((v23 = *v21, v23 >= 6) ? (v24 = v23 == 7) : (v24 = 1), !v24))
              {
LABEL_84:
                __break(0xC471u);
                JUMPOUT(0x18248A6BCLL);
              }
            }
            else
            {
              WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)(v14 + 8), "@id attribute must only be applied to override variables", 57);
            }
            if (!*(_BYTE *)(v20 + 56))
            {
LABEL_87:
              __break(0xC471u);
              JUMPOUT(0x18248A69CLL);
            }
            v25 = *(_DWORD *)(v20 + 48);
            if (v25 != 5)
            {
              if (v25 == 4)
              {
                v26 = *(unsigned int *)(v20 + 32);
                if (v26 < 0x10000)
                {
LABEL_68:
                  v27 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 416);
                  if (!v27)
                    goto LABEL_74;
                  v28 = *(_DWORD *)(v27 - 8);
                  v29 = 9 * ((~((_DWORD)v26 << 15) + v26) ^ ((~((_DWORD)v26 << 15) + v26) >> 10));
                  v30 = v28 & (((v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11)) ^ (((v29 ^ (v29 >> 6))
                                                                                    + ~((v29 ^ (v29 >> 6)) << 11)) >> 16));
                  v31 = *(_DWORD *)(v27 + 4 * v30);
                  if (v31 != (_DWORD)v26)
                  {
                    v32 = 1;
                    while (v31 != -1)
                    {
                      v30 = (v30 + v32) & v28;
                      v31 = *(_DWORD *)(v27 + 4 * v30);
                      ++v32;
                      if (v31 == (_DWORD)v26)
                        goto LABEL_73;
                    }
LABEL_74:
                    if (*((_BYTE *)a2 + 176))
                    {
                      WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)(v14 + 8), "duplicate attribute", 20);
                    }
                    else
                    {
                      *((_DWORD *)a2 + 43) = v26;
                      *((_BYTE *)a2 + 176) = 1;
                    }
                    v33 = *(_QWORD *)(v3 + 48);
                    v35 = v26;
                    this = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)(v33 + 416), &v35, (uint64_t)&v34);
                    goto LABEL_10;
                  }
LABEL_73:
                  v10 = (__int128 *)(v14 + 8);
                  v11 = (_DWORD *)v3;
                  v12 = "@id value must be unique";
                  v13 = 25;
                  goto LABEL_9;
                }
              }
              else
              {
                if (v25 != 3)
                  goto LABEL_87;
                v26 = *(int *)(v20 + 32);
                if ((v26 & 0x8000000000000000) != 0)
                {
LABEL_66:
                  v10 = (__int128 *)(v14 + 8);
                  v11 = (_DWORD *)v3;
                  v12 = "@id value must be non-negative";
                  v13 = 31;
                  goto LABEL_9;
                }
LABEL_58:
                if (v26 < 0x10000)
                  goto LABEL_68;
              }
              v10 = (__int128 *)(v14 + 8);
              v11 = (_DWORD *)v3;
              v12 = "@id value must be between 0 and 65535";
              v13 = 38;
              goto LABEL_9;
            }
            v26 = *(_QWORD *)(v20 + 32);
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_66;
            goto LABEL_58;
          }
          v10 = (__int128 *)(v14 + 8);
          v11 = (_DWORD *)v3;
          v12 = "invalid attribute for variable declaration";
          v13 = 43;
        }
      }
LABEL_9:
      this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v11, v10, v12, v13);
LABEL_10:
      ++v8;
    }
    while (v8 != v9);
  }
  if ((v6 & 1) != 0 && (!*((_BYTE *)a2 + 168) || !*((_BYTE *)a2 + 160)))
    return WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)((char *)a2 + 8), "resource variables require @group and @binding attributes", 58);
  return this;
}

uint64_t WGSL::AttributeValidator::visit(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v4 && !*(_BYTE *)(result + 32))
  {
    v23 = *(_QWORD **)(a2 + 56);
    v24 = 8 * v4 - 8;
LABEL_30:
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v23);
    while (v24)
    {
      ++v23;
      v24 -= 8;
      if (!*(_BYTE *)(v3 + 32))
        goto LABEL_30;
    }
  }
  v5 = *(unsigned int *)(v2 + 84);
  if ((_DWORD)v5 && !*(_BYTE *)(v3 + 32))
  {
    v25 = *(_QWORD **)(v2 + 72);
    v26 = 8 * v5 - 8;
LABEL_35:
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 536))(v3, *v25);
    while (v26)
    {
      ++v25;
      v26 -= 8;
      if (!*(_BYTE *)(v3 + 32))
        goto LABEL_35;
    }
  }
  if (!*(_DWORD *)(v3 + 68))
  {
    v6 = *(_BYTE *)(v3 + 72);
    *(_BYTE *)(v3 + 72) = 0;
    *(_BYTE *)(v2 + 120) = v6;
    v7 = *(unsigned int *)(v2 + 84);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v29 = v2;
      v12 = *(uint64_t **)(v2 + 72);
      v13 = 8 * v7;
      while (1)
      {
        v16 = *v12;
        v17 = *(_QWORD *)(*(_QWORD *)(*v12 + 104) + 24);
        if (*(_BYTE *)(*v12 + 128))
        {
          v18 = *(_DWORD *)(v16 + 124);
          v19 = *(unsigned int *)(v17 + 48);
          if ((_DWORD)v19 == -1)
            goto LABEL_46;
        }
        else
        {
          v20 = *(unsigned int *)(v17 + 48);
          if ((_DWORD)v20 == -1
            || (v31 = &v30,
                v18 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type9alignmentEvE3__0JZNKS9_9alignmentEvE3__1ZNKS9_9alignmentEvE3__2ZNKS9_9alignmentEvE3__3ZNKS9_9alignmentEvE3__4ZNKS9_9alignmentEvE3__5ZNKS9_9alignmentEvE3__6ZNKS9_9alignmentEvE3__7ZNKS9_9alignmentEvE3__8ZNKS9_9alignmentEvE3__9ZNKS9_9alignmentEvE4__10ZNKS9_9alignmentEvE4__11ZNKS9_9alignmentEvE4__12ZNKS9_9alignmentEvE4__13ZNKS9_9alignmentEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v20])(&v31, v17), *(_DWORD *)(v16 + 124) = v18, *(_BYTE *)(v16 + 128) = 1, v19 = *(unsigned int *)(v17 + 48), (_DWORD)v19 == -1))
          {
LABEL_46:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_47;
          }
        }
        v31 = &v30;
        result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v31, v17);
        v21 = *(_QWORD *)(v16 + 132);
        if ((v21 & 0xFF00000000) == 0)
        {
          *(_DWORD *)(v16 + 132) = result;
          *(_BYTE *)(v16 + 136) = 1;
          LODWORD(v21) = result;
        }
        v22 = (v18 + (unint64_t)v11 - 1) & -(uint64_t)v18;
        if (v22 >= 0xFFFFFFFF)
          LODWORD(v22) = -1;
        *(_DWORD *)(v16 + 112) = v22;
        if (v10 <= v18)
          v10 = v18;
        v14 = __CFADD__((_DWORD)v22, (_DWORD)v21);
        LODWORD(v21) = v22 + v21;
        if (v14)
          v21 = v11;
        else
          v21 = v21;
        if (v8)
        {
          if (v22 < v9)
            goto LABEL_47;
          *(_DWORD *)(v8 + 116) = v22 - v9;
        }
        v14 = __CFADD__((_DWORD)v22, (_DWORD)result);
        v15 = v22 + result;
        if (v14)
          v9 = v11;
        else
          v9 = v15;
        ++v12;
        v8 = v16;
        v11 = v21;
        v13 -= 8;
        if (!v13)
        {
          v27 = v21 - 1;
          v2 = v29;
          goto LABEL_41;
        }
      }
    }
    v10 = 0;
    v9 = 0;
    v16 = 0;
    v27 = -1;
LABEL_41:
    v28 = (v27 + v10) & -(uint64_t)v10;
    if (v28 >= 0xFFFFFFFF)
      LODWORD(v28) = -1;
    if (v28 < v9)
    {
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x18248A9ACLL);
    }
    *(_DWORD *)(v16 + 116) = v28 - v9;
    *(_DWORD *)(v2 + 132) = v10;
    *(_BYTE *)(v2 + 136) = 1;
    *(_DWORD *)(v2 + 124) = v28;
    *(_BYTE *)(v2 + 128) = 1;
  }
  return result;
}

uint64_t WGSL::AttributeValidator::visit(uint64_t this, WGSL::AST::StructureMember *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;
  __int16 v8;
  __int128 *v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BOOL8 v33;
  WGSL::AST::CompoundStatement *v34;
  unsigned int v35[4];
  int v36;
  char v37;
  char v38;

  v3 = this;
  v4 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 11);
    for (i = 8 * v4; i; i -= 8)
    {
      v7 = *v5;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v5 + 16))(*v5);
      if ((_DWORD)this == 3)
      {
        if (*((_BYTE *)a2 + 141))
          goto LABEL_12;
        *((_WORD *)a2 + 70) = *(unsigned __int8 *)(v7 + 24) | 0x100;
      }
      else
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        if ((_DWORD)this != 8)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
          if ((_DWORD)this == 9)
          {
            if (!*((_BYTE *)a2 + 120))
            {
              *((_BYTE *)a2 + 120) = 1;
              goto LABEL_3;
            }
            goto LABEL_12;
          }
          this = WGSL::AttributeValidator::parseLocation((_DWORD *)v3, 0, (uint64_t)a2 + 144, v7, *(unsigned __int8 **)(*((_QWORD *)a2 + 13) + 24));
          if ((this & 1) != 0)
            goto LABEL_3;
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
          if ((_DWORD)this == 12)
          {
            *(_BYTE *)(v3 + 72) = 1;
            v13 = *(_QWORD *)(v7 + 24);
            if (!*(_BYTE *)(v13 + 56))
            {
              v9 = (__int128 *)(v7 + 8);
              v10 = (_DWORD *)v3;
              v11 = "@size constant value is not found";
              v12 = 34;
              goto LABEL_13;
            }
            v14 = *(_DWORD *)(v13 + 48);
            switch(v14)
            {
              case 5:
                v15 = *(_QWORD *)(v13 + 32);
                if ((v15 & 0x8000000000000000) == 0)
                  goto LABEL_21;
                break;
              case 4:
                v15 = *(unsigned int *)(v13 + 32);
                if (!*(_DWORD *)(v3 + 68))
                  goto LABEL_37;
                goto LABEL_41;
              case 3:
                v15 = *(int *)(v13 + 32);
                if ((v15 & 0x8000000000000000) == 0)
                {
LABEL_21:
                  if (!*(_DWORD *)(v3 + 68))
                  {
LABEL_37:
                    v23 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 13) + 24) + 48);
                    if ((_DWORD)v23 == -1)
                    {
                      v33 = std::__throw_bad_variant_access[abi:sn180100]();
                      return WGSL::AttributeValidator::visit((WGSL::AttributeValidator *)v33, v34);
                    }
                    *(_QWORD *)v35 = &v38;
                    this = ((uint64_t (*)(unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v23])(v35);
                    if (v15 < this)
                    {
                      v19 = (__int128 *)(v7 + 8);
                      v20 = (_DWORD *)v3;
                      v21 = "@size value must be at least the byte-size of the type of the member";
                      v22 = 69;
LABEL_40:
                      this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v20, v19, v21, v22);
                    }
                  }
LABEL_41:
                  if (!*((_BYTE *)a2 + 136))
                  {
                    *((_DWORD *)a2 + 33) = v15;
                    *((_BYTE *)a2 + 136) = 1;
                    goto LABEL_3;
                  }
LABEL_12:
                  v9 = (__int128 *)(v7 + 8);
                  v10 = (_DWORD *)v3;
                  v11 = "duplicate attribute";
                  v12 = 20;
LABEL_13:
                  this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v10, v9, v11, v12);
                  goto LABEL_3;
                }
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x18248AE94);
            }
            v19 = (__int128 *)(v7 + 8);
            v20 = (_DWORD *)v3;
            v21 = "@size value must be non-negative";
            v22 = 33;
            goto LABEL_40;
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) != 1)
          {
            v9 = (__int128 *)(v7 + 8);
            v10 = (_DWORD *)v3;
            v11 = "invalid attribute for structure member";
            v12 = 39;
            goto LABEL_13;
          }
          *(_BYTE *)(v3 + 72) = 1;
          v16 = *(_QWORD *)(v7 + 24);
          LOBYTE(v35[0]) = 0;
          v37 = 0;
          if (!*(_BYTE *)(v16 + 56))
          {
            this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)(v7 + 8), "@align constant value does not exist", 37);
            if (v37)
              goto LABEL_55;
            goto LABEL_3;
          }
          v36 = -1;
          v17 = *(unsigned int *)(v16 + 48);
          if ((_DWORD)v17 == -1)
          {
            v37 = 1;
LABEL_80:
            __break(0xC471u);
            JUMPOUT(0x18248AE74);
          }
          this = ((uint64_t (*)(char *, unsigned int *, uint64_t))off_1E0FD2AA0[v17])(&v38, v35, v16 + 32);
          v36 = v17;
          v37 = 1;
          switch((_DWORD)v17)
          {
            case 5:
              v18 = *(_QWORD *)v35;
              if (*(uint64_t *)v35 <= 0)
                goto LABEL_49;
              break;
            case 4:
              v18 = v35[0];
              if (!v35[0])
                goto LABEL_49;
              break;
            case 3:
              v18 = (int)v35[0];
              if ((int)v35[0] <= 0)
              {
LABEL_49:
                v24 = (__int128 *)(v7 + 8);
                v25 = (_DWORD *)v3;
                v26 = "@align value must be positive";
                v27 = 30;
LABEL_50:
                this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v25, v24, v26, v27);
                goto LABEL_51;
              }
              break;
            default:
              goto LABEL_80;
          }
          if ((v18 & (v18 - 1)) != 0)
          {
            v24 = (__int128 *)(v7 + 8);
            v25 = (_DWORD *)v3;
            v26 = "@align value must be a power of two";
            v27 = 36;
            goto LABEL_50;
          }
LABEL_51:
          if (*((_BYTE *)a2 + 128))
          {
            this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)(v7 + 8), "duplicate attribute", 20);
            if (v37)
              goto LABEL_55;
          }
          else
          {
            *((_DWORD *)a2 + 31) = v18;
            *((_BYTE *)a2 + 128) = 1;
            if (v37)
            {
LABEL_55:
              if (v36 != -1)
                this = ((uint64_t (*)(char *, unsigned int *))off_1E0FD2A48[v36])(&v38, v35);
              goto LABEL_3;
            }
          }
          goto LABEL_3;
        }
        if (*((_BYTE *)a2 + 154))
          goto LABEL_12;
        v8 = *(_WORD *)(v7 + 24);
        *((_BYTE *)a2 + 154) = 1;
        *((_WORD *)a2 + 76) = v8;
      }
LABEL_3:
      ++v5;
    }
  }
  if ((*((unsigned __int16 *)a2 + 76) | (*((unsigned __int8 *)a2 + 154) << 16)) >= 0x10000u
    && (unint64_t)*((unsigned __int8 *)a2 + 148) << 32 == 0)
  {
    this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)((char *)a2 + 8), "@interpolate is only allowed on declarations that have a @location attribute", 77);
  }
  if (*((_BYTE *)a2 + 120))
  {
    if (*((unsigned __int16 *)a2 + 70) < 0x100u || *((_WORD *)a2 + 70) != 7)
      this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)((char *)a2 + 8), "@invariant is only allowed on declarations that have a @builtin(position) attribute", 84);
  }
  v30 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v30 && !*(_BYTE *)(v3 + 32))
  {
    v31 = (_QWORD *)*((_QWORD *)a2 + 11);
    v32 = 8 * v30 - 8;
LABEL_75:
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 88))(v3, *v31);
    while (v32)
    {
      ++v31;
      v32 -= 8;
      if (!*(_BYTE *)(v3 + 32))
        goto LABEL_75;
    }
  }
  if (!*(_BYTE *)(v3 + 32))
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 208))(v3, *((_QWORD *)a2 + 13));
  return this;
}

_DWORD *WGSL::AttributeValidator::visit(_DWORD *this, WGSL::AST::CompoundStatement *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = (uint64_t)this;
  v4 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 + 3);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      this = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5);
      if ((_DWORD)this != 5)
        this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (__int128 *)(v7 + 8), "invalid attribute for compound statement", 41);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v8 && !*(_BYTE *)(v3 + 32))
  {
    v9 = (_QWORD *)*((_QWORD *)a2 + 5);
    v10 = 8 * v8 - 8;
LABEL_10:
    this = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 360))(v3, *v9);
    while (v10)
    {
      ++v9;
      v10 -= 8;
      if (!*(_BYTE *)(v3 + 32))
        goto LABEL_10;
    }
  }
  return this;
}

_QWORD *WGSL::AttributeValidator::validateIO@<X0>(_QWORD *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  _DWORD *v44;
  int v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  size_t v55;
  uint64_t i;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int *v78;
  int v79;
  int *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  _DWORD *v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  int v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  __int128 *v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  char *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v115;
  size_t __len;
  size_t __lena;
  int v118;
  WTF *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;

  v3 = this[6];
  if (!*(_BYTE *)(v3 + 392))
  {
    __break(1u);
LABEL_185:
    __break(0xC471u);
    JUMPOUT(0x18248BC9CLL);
  }
  v4 = (uint64_t)this;
  v5 = *(_DWORD *)(v3 + 372);
  if (v5)
  {
    v6 = *(uint64_t **)(v3 + 360);
    v120 = &v6[3 * v5];
    v122 = (uint64_t)(this + 7);
    do
    {
      v7 = *v6;
      v123 = 0;
      v124 = 0;
      v121 = v7;
      v8 = *(unsigned int *)(v7 + 68);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v121 + 56);
        v10 = v9 + 8 * v8;
        do
        {
          v11 = (__int128 *)(*(_QWORD *)v9 + 8);
          v12 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)v9 + 64) + 24);
          if (*(unsigned __int16 *)(*(_QWORD *)v9 + 89) >= 0x100u)
          {
            this = WGSL::AttributeValidator::validateBuiltinIO((_DWORD *)v4, (__int128 *)(*(_QWORD *)v9 + 8), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v9 + 64) + 24), *((unsigned __int8 *)v6 + 8), *(_WORD *)(*(_QWORD *)v9 + 89), 0, &v124);
          }
          else
          {
            v13 = *(_QWORD *)(*(_QWORD *)v9 + 96);
            if ((v13 & 0xFF00000000) != 0)
            {
              if (*((_BYTE *)v6 + 8) == 4)
              {
                this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)0x3F);
                v14 = v127;
                if (!v127)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18248BCA4);
                }
                *(_OWORD *)(v127 + 20) = *(_OWORD *)"@location cannot be used by compute shaders";
                *(_QWORD *)v14 = 0x2B00000002;
                *(_QWORD *)(v14 + 8) = v14 + 20;
                *(_DWORD *)(v14 + 16) = 4;
                qmemcpy((void *)(v14 + 36), " be used by compute shaders", 27);
                v125 = v14;
                v126 = *v11;
                v15 = *(unsigned int *)(v4 + 68);
                if ((_DWORD)v15 != *(_DWORD *)(v4 + 64))
                  goto LABEL_101;
                v16 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v122, v15 + 1, (unint64_t)&v125);
                v17 = *(_QWORD *)(v4 + 56) + 24 * *(unsigned int *)(v4 + 68);
                v18 = *(_QWORD *)v16;
                *(_QWORD *)v16 = 0;
                *(_QWORD *)v17 = v18;
                *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
                this = (_QWORD *)v125;
                ++*(_DWORD *)(v4 + 68);
                v125 = 0;
                if (this)
                {
                  v19 = *(_DWORD *)this - 2;
                  if (*(_DWORD *)this == 2)
                    goto LABEL_100;
LABEL_16:
                  *(_DWORD *)this = v19;
                }
              }
              else
              {
                if (v12)
                {
                  v63 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)v9 + 64) + 24);
                  while (1)
                  {
                    v64 = *((_DWORD *)v63 + 12);
                    if (v64 != 10)
                      break;
                    v63 = (unsigned __int8 *)*((_QWORD *)v63 + 1);
                    if (!v63)
                      goto LABEL_104;
                  }
                  if (!v64 && *v63 < 6u)
                  {
LABEL_111:
                    v71 = (uint64_t)v123;
                    if (v123)
                      goto LABEL_113;
                    v72 = WTF::fastMalloc((WTF *)0x30);
                    *(_QWORD *)&v73 = -1;
                    *((_QWORD *)&v73 + 1) = -1;
                    *(_OWORD *)(v72 + 16) = v73;
                    *(_OWORD *)(v72 + 32) = v73;
                    this = (_QWORD *)(v72 + 16);
                    v123 = this;
                    *((_DWORD *)this - 1) = 8;
                    *(v123 - 2) = 7;
                    *(v123 - 4) = 0;
                    *(v123 - 3) = 0;
                    v71 = (uint64_t)v123;
                    if (v123)
LABEL_113:
                      v74 = *(_DWORD *)(v71 - 8);
                    else
                      v74 = 0;
                    v75 = 9 * ((~((_DWORD)v13 << 15) + v13) ^ ((~((_DWORD)v13 << 15) + v13) >> 10));
                    v76 = (v75 ^ (v75 >> 6)) + ~((v75 ^ (v75 >> 6)) << 11);
                    v77 = v74 & (v76 ^ HIWORD(v76));
                    v78 = (int *)(v71 + 4 * v77);
                    v79 = *v78;
                    if (*v78 != -1)
                    {
                      v80 = 0;
                      v81 = 1;
                      do
                      {
                        if (v79 == (_DWORD)v13)
                        {
                          this = WGSL::AttributeValidator::error<WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral>((char *)v4, v11, "@location(", 11, v13, ") appears multiple times", 25);
                          goto LABEL_8;
                        }
                        if (v79 == -2)
                          v80 = v78;
                        v77 = (v77 + v81) & v74;
                        v78 = (int *)(v71 + 4 * v77);
                        v79 = *v78;
                        ++v81;
                      }
                      while (*v78 != -1);
                      if (v80)
                      {
                        *v80 = -1;
                        --*(v123 - 4);
                        v78 = v80;
                      }
                    }
                    *v78 = v13;
                    if (v123)
                    {
                      ++*(v123 - 3);
                      v82 = (uint64_t)v123;
                      if (v123)
                      {
                        v83 = (*(v123 - 4) + *(v123 - 3));
                        v84 = *(v123 - 1);
                        if (v84 <= 0x400)
                          goto LABEL_125;
LABEL_132:
                        if (v84 > 2 * v83)
                          goto LABEL_8;
                        goto LABEL_133;
                      }
                    }
                    else
                    {
                      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                      v82 = 0;
                    }
                    v83 = *(unsigned int *)(v82 - 16);
                    v84 = *(unsigned int *)(v82 - 4);
                    if (v84 > 0x400)
                      goto LABEL_132;
LABEL_125:
                    if (3 * v84 > 4 * v83)
                      goto LABEL_8;
                    if ((_DWORD)v84)
LABEL_133:
                      v85 = (_DWORD)v84 << (6 * *(_DWORD *)(v82 - 12) >= (2 * v84));
                    else
                      v85 = 8;
                    this = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v123, v85, v78);
                    goto LABEL_8;
                  }
LABEL_104:
                  if (v12[12] == 1)
                  {
                    v69 = *(unsigned __int8 **)v12;
                    if (*(_QWORD *)v12)
                    {
                      while (1)
                      {
                        v70 = *((_DWORD *)v69 + 12);
                        if (v70 != 10)
                          break;
                        v69 = (unsigned __int8 *)*((_QWORD *)v69 + 1);
                        if (!v69)
                          goto LABEL_128;
                      }
                      if (!v70 && *v69 < 6u)
                        goto LABEL_111;
                    }
                  }
                }
LABEL_128:
                LOBYTE(v125) = 39;
                this = WGSL::AttributeValidator::error<WTF::ASCIILiteral,WGSL::Type const&,char>(v4, v11, "cannot apply @location to declaration of type '", 48, (uint64_t)v12, (char *)&v125);
              }
            }
            else
            {
              if (v12 && v12[12] == 4)
              {
                v20 = *(_QWORD *)v12;
                v21 = *(unsigned int *)(*(_QWORD *)v12 + 84);
                if (!(_DWORD)v21)
                  goto LABEL_8;
                v22 = *((unsigned __int8 *)v6 + 8);
                v23 = *(_QWORD *)(v20 + 72);
                v24 = v23 + 8 * v21;
                while (2)
                {
                  v25 = (__int128 *)(*(_QWORD *)v23 + 8);
                  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v23 + 104) + 24);
                  if (*(unsigned __int16 *)(*(_QWORD *)v23 + 140) >= 0x100u)
                  {
                    this = WGSL::AttributeValidator::validateBuiltinIO((_DWORD *)v4, (__int128 *)(*(_QWORD *)v23 + 8), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v23 + 104) + 24), v22, *(_WORD *)(*(_QWORD *)v23 + 140), 0, &v124);
                  }
                  else
                  {
                    v27 = *(_QWORD *)(*(_QWORD *)v23 + 144);
                    if ((v27 & 0xFF00000000) != 0)
                    {
                      if (v22 == 4)
                      {
                        this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)0x3F);
                        v28 = v127;
                        if (!v127)
                          goto LABEL_185;
                        *(_OWORD *)(v127 + 20) = *(_OWORD *)"@location cannot be used by compute shaders";
                        *(_QWORD *)v28 = 0x2B00000002;
                        *(_QWORD *)(v28 + 8) = v28 + 20;
                        *(_DWORD *)(v28 + 16) = 4;
                        qmemcpy((void *)(v28 + 36), " be used by compute shaders", 27);
                        v125 = v28;
                        v126 = *v25;
                        v29 = *(unsigned int *)(v4 + 68);
                        if ((_DWORD)v29 == *(_DWORD *)(v4 + 64))
                          goto LABEL_28;
LABEL_43:
                        v35 = *(_QWORD *)(v4 + 56) + 24 * v29;
                        *(_QWORD *)v35 = v28;
                        *(_OWORD *)(v35 + 8) = v126;
                        ++*(_DWORD *)(v4 + 68);
                      }
                      else
                      {
                        if (v26)
                        {
                          v33 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)v23 + 104) + 24);
                          while (1)
                          {
                            v34 = *((_DWORD *)v33 + 12);
                            if (v34 != 10)
                              break;
                            v33 = (unsigned __int8 *)*((_QWORD *)v33 + 1);
                            if (!v33)
                              goto LABEL_46;
                          }
                          if (!v34 && *v33 < 6u)
                          {
LABEL_54:
                            v38 = (uint64_t)v123;
                            if (v123)
                              goto LABEL_56;
                            v39 = WTF::fastMalloc((WTF *)0x30);
                            *(_QWORD *)&v40 = -1;
                            *((_QWORD *)&v40 + 1) = -1;
                            *(_OWORD *)(v39 + 16) = v40;
                            *(_OWORD *)(v39 + 32) = v40;
                            this = (_QWORD *)(v39 + 16);
                            v123 = this;
                            *((_DWORD *)this - 1) = 8;
                            *(v123 - 2) = 7;
                            *(v123 - 4) = 0;
                            *(v123 - 3) = 0;
                            v38 = (uint64_t)v123;
                            if (v123)
LABEL_56:
                              v41 = *(_DWORD *)(v38 - 8);
                            else
                              v41 = 0;
                            v42 = 9
                                * ((~((_DWORD)v27 << 15) + v27) ^ ((~((_DWORD)v27 << 15) + v27) >> 10));
                            v43 = v41 & (((v42 ^ (v42 >> 6)) + ~((v42 ^ (v42 >> 6)) << 11)) ^ (((v42 ^ (v42 >> 6))
                                                                                              + ~((v42 ^ (v42 >> 6)) << 11)) >> 16));
                            v44 = (_DWORD *)(v38 + 4 * v43);
                            v45 = *v44;
                            if (*v44 != -1)
                            {
                              v46 = 0;
                              v47 = 1;
                              do
                              {
                                if (v45 == (_DWORD)v27)
                                {
                                  this = WGSL::AttributeValidator::error<WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral>((char *)v4, v25, "@location(", 11, v27, ") appears multiple times", 25);
                                  goto LABEL_22;
                                }
                                if (v45 == -2)
                                  v46 = v44;
                                v43 = (v43 + v47) & v41;
                                v44 = (_DWORD *)(v38 + 4 * v43);
                                v45 = *v44;
                                ++v47;
                              }
                              while (*v44 != -1);
                              if (v46)
                              {
                                *v46 = -1;
                                --*(v123 - 4);
                                v44 = v46;
                              }
                            }
                            *v44 = v27;
                            if (v123)
                            {
                              ++*(v123 - 3);
                              v48 = (uint64_t)v123;
                              if (v123)
                              {
                                v49 = (WTF *)(v123 - 4);
                                v50 = (*(v123 - 4) + *(v123 - 3));
                                v51 = *(v123 - 1);
                                if (v51 <= 0x400)
                                  goto LABEL_68;
LABEL_75:
                                if (v51 > 2 * v50)
                                  goto LABEL_22;
                                goto LABEL_76;
                              }
                            }
                            else
                            {
                              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                              v48 = 0;
                            }
                            v49 = (WTF *)(v48 - 16);
                            v50 = *(unsigned int *)(v48 - 16);
                            v51 = *(unsigned int *)(v48 - 4);
                            if (v51 > 0x400)
                              goto LABEL_75;
LABEL_68:
                            if (3 * v51 > 4 * v50)
                              goto LABEL_22;
                            if (!(_DWORD)v51)
                            {
                              v119 = v49;
                              v118 = *(_DWORD *)(v48 - 12);
                              v52 = 8;
                              __len = 32;
                              v53 = WTF::fastMalloc((WTF *)0x30);
                              v54 = (void *)(v53 + 16);
                              goto LABEL_77;
                            }
LABEL_76:
                            v119 = v49;
                            v118 = *(_DWORD *)(v48 - 12);
                            v52 = (_DWORD)v51 << (6 * v118 >= (2 * v51));
                            __len = 4 * v52;
                            v53 = WTF::fastMalloc((WTF *)(__len + 16));
                            v54 = (void *)(v53 + 16);
                            if (v52)
                            {
LABEL_77:
                              v115 = v53;
                              v55 = __len;
                              __lena = (size_t)v54;
                              memset(v54, 255, v55);
                              v53 = v115;
                              v54 = (void *)__lena;
                            }
                            v123 = v54;
                            *(_DWORD *)(v53 + 12) = v52;
                            *(v123 - 2) = v52 - 1;
                            *(v123 - 4) = 0;
                            *(v123 - 3) = v118;
                            this = v119;
                            if (!(_DWORD)v51)
                              goto LABEL_89;
                            for (i = 0; i != v51; ++i)
                            {
                              v57 = *(_DWORD *)(v48 + 4 * i);
                              if (v57 <= 0xFFFFFFFD)
                              {
                                if (v123)
                                  v58 = *(v123 - 2);
                                else
                                  v58 = 0;
                                v59 = 0;
                                v60 = 9 * ((v57 + ~(v57 << 15)) ^ ((v57 + ~(v57 << 15)) >> 10));
                                v61 = ((v60 ^ (v60 >> 6)) + ~((v60 ^ (v60 >> 6)) << 11)) ^ (((v60 ^ (v60 >> 6))
                                                                                           + ~((v60 ^ (v60 >> 6)) << 11)) >> 16);
                                do
                                {
                                  v62 = v61 & v58;
                                  v61 = ++v59 + v62;
                                }
                                while (v123[v62] != -1);
                                v123[v62] = v57;
                              }
                            }
                            if (v48)
LABEL_89:
                              this = (_QWORD *)WTF::fastFree(v119, a2);
                            goto LABEL_22;
                          }
LABEL_46:
                          if (*(_DWORD *)(v26 + 48) == 1)
                          {
                            v36 = *(unsigned __int8 **)v26;
                            if (*(_QWORD *)v26)
                            {
                              while (1)
                              {
                                v37 = *((_DWORD *)v36 + 12);
                                if (v37 != 10)
                                  break;
                                v36 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
                                if (!v36)
                                  goto LABEL_71;
                              }
                              if (!v37 && *v36 < 6u)
                                goto LABEL_54;
                            }
                          }
                        }
LABEL_71:
                        LOBYTE(v125) = 39;
                        this = WGSL::AttributeValidator::error<WTF::ASCIILiteral,WGSL::Type const&,char>(v4, v25, "cannot apply @location to declaration of type '", 48, v26, (char *)&v125);
                      }
                    }
                    else
                    {
                      if (!v26 || *(_DWORD *)(v26 + 48) != 4)
                      {
                        this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)0x34);
                        v28 = v127;
                        if (!v127)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x18248BCACLL);
                        }
                        *(_QWORD *)v127 = 0x2000000002;
                        *(_QWORD *)(v28 + 8) = v28 + 20;
                        *(_DWORD *)(v28 + 16) = 4;
                        qmemcpy((void *)(v28 + 20), "missing entry point IO attribute", 32);
                        v125 = v28;
                        v126 = *v25;
                        v29 = *(unsigned int *)(v4 + 68);
                        if ((_DWORD)v29 == *(_DWORD *)(v4 + 64))
                          goto LABEL_28;
                        goto LABEL_43;
                      }
                      this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)0x47);
                      v28 = v127;
                      if (!v127)
                        goto LABEL_185;
                      *(_OWORD *)(v127 + 20) = *(_OWORD *)"nested structures cannot be used for entry point IO";
                      *(_QWORD *)v28 = 0x3300000002;
                      *(_QWORD *)(v28 + 8) = v28 + 20;
                      *(_DWORD *)(v28 + 16) = 4;
                      qmemcpy((void *)(v28 + 36), "s cannot be used for entry point IO", 35);
                      v125 = v28;
                      v126 = *v25;
                      v29 = *(unsigned int *)(v4 + 68);
                      if ((_DWORD)v29 != *(_DWORD *)(v4 + 64))
                        goto LABEL_43;
LABEL_28:
                      v30 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v122, v29 + 1, (unint64_t)&v125);
                      v31 = *(_QWORD *)(v4 + 56) + 24 * *(unsigned int *)(v4 + 68);
                      v32 = *(_QWORD *)v30;
                      *(_QWORD *)v30 = 0;
                      *(_QWORD *)v31 = v32;
                      *(_OWORD *)(v31 + 8) = *(_OWORD *)(v30 + 8);
                      this = (_QWORD *)v125;
                      ++*(_DWORD *)(v4 + 68);
                      v125 = 0;
                      if (this)
                      {
                        if (*(_DWORD *)this == 2)
                          this = (_QWORD *)WTF::StringImpl::destroy();
                        else
                          *(_DWORD *)this -= 2;
                      }
                    }
                  }
LABEL_22:
                  v23 += 8;
                  if (v23 == v24)
                    goto LABEL_8;
                  continue;
                }
              }
              this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)0x41);
              v14 = v127;
              if (!v127)
              {
                __break(0xC471u);
                JUMPOUT(0x18248BCB4);
              }
              *(_OWORD *)(v127 + 20) = *(_OWORD *)"missing entry point IO attribute on parameter";
              *(_QWORD *)v14 = 0x2D00000002;
              *(_QWORD *)(v14 + 8) = v14 + 20;
              *(_DWORD *)(v14 + 16) = 4;
              qmemcpy((void *)(v14 + 36), "int IO attribute on parameter", 29);
              v125 = v14;
              v126 = *v11;
              v15 = *(unsigned int *)(v4 + 68);
              if ((_DWORD)v15 != *(_DWORD *)(v4 + 64))
              {
LABEL_101:
                v68 = *(_QWORD *)(v4 + 56) + 24 * v15;
                *(_QWORD *)v68 = v14;
                *(_OWORD *)(v68 + 8) = v126;
                ++*(_DWORD *)(v4 + 68);
                goto LABEL_8;
              }
              v65 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v122, v15 + 1, (unint64_t)&v125);
              v66 = *(_QWORD *)(v4 + 56) + 24 * *(unsigned int *)(v4 + 68);
              v67 = *(_QWORD *)v65;
              *(_QWORD *)v65 = 0;
              *(_QWORD *)v66 = v67;
              *(_OWORD *)(v66 + 8) = *(_OWORD *)(v65 + 8);
              this = (_QWORD *)v125;
              ++*(_DWORD *)(v4 + 68);
              v125 = 0;
              if (this)
              {
                v19 = *(_DWORD *)this - 2;
                if (*(_DWORD *)this == 2)
                {
LABEL_100:
                  this = (_QWORD *)WTF::StringImpl::destroy();
                  goto LABEL_8;
                }
                goto LABEL_16;
              }
            }
          }
LABEL_8:
          v9 += 8;
        }
        while (v9 != v10);
      }
      if (*(_QWORD *)(v121 + 104))
      {
        v86 = v124;
        if (v124)
        {
          v124 = 0;
          this = (_QWORD *)WTF::fastFree((WTF *)(v86 - 16), a2);
        }
        v87 = (uint64_t)v123;
        if (v123)
        {
          v123 = 0;
          this = (_QWORD *)WTF::fastFree((WTF *)(v87 - 16), a2);
        }
        v88 = *(_QWORD *)(v121 + 104);
        v89 = (__int128 *)(v88 + 8);
        v90 = *(_QWORD *)(v88 + 24);
        if (*(unsigned __int16 *)(v121 + 161) >= 0x100u)
        {
          this = WGSL::AttributeValidator::validateBuiltinIO((_DWORD *)v4, v89, (_QWORD *)v90, *((unsigned __int8 *)v6 + 8), *(_WORD *)(v121 + 161), 1, &v124);
        }
        else
        {
          v91 = *(_QWORD *)(v121 + 168);
          if ((v91 & 0xFF00000000) != 0)
          {
            this = WGSL::AttributeValidator::validateLocationIO((char *)v4, v89, v90, *((unsigned __int8 *)v6 + 8), v91, (uint64_t *)&v123);
          }
          else
          {
            if (!v90 || *(_DWORD *)(v90 + 48) != 4)
            {
              v93 = (_DWORD *)v4;
              v92 = (__int128 *)(v88 + 8);
              v98 = "missing entry point IO attribute on return type";
              v99 = 48;
              goto LABEL_156;
            }
            v100 = *(unsigned int *)(*(_QWORD *)v90 + 84);
            if ((_DWORD)v100)
            {
              v101 = *((unsigned __int8 *)v6 + 8);
              v102 = *(_QWORD *)(*(_QWORD *)v90 + 72);
              v103 = 8 * v100;
              do
              {
                v104 = (__int128 *)(*(_QWORD *)v102 + 8);
                v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v102 + 104) + 24);
                if (*(unsigned __int16 *)(*(_QWORD *)v102 + 140) >= 0x100u)
                {
                  this = WGSL::AttributeValidator::validateBuiltinIO((_DWORD *)v4, v104, (_QWORD *)v105, v101, *(_WORD *)(*(_QWORD *)v102 + 140), 1, &v124);
                }
                else
                {
                  v106 = *(_QWORD *)(*(_QWORD *)v102 + 144);
                  if ((v106 & 0xFF00000000) != 0)
                  {
                    this = WGSL::AttributeValidator::validateLocationIO((char *)v4, v104, v105, v101, v106, (uint64_t *)&v123);
                  }
                  else
                  {
                    if (v105 && *(_DWORD *)(v105 + 48) == 4)
                    {
                      v107 = (_DWORD *)v4;
                      v108 = "nested structures cannot be used for entry point IO";
                      v109 = 52;
                    }
                    else
                    {
                      v107 = (_DWORD *)v4;
                      v108 = "missing entry point IO attribute";
                      v109 = 33;
                    }
                    this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v107, v104, v108, v109);
                  }
                }
                v102 += 8;
                v103 -= 8;
              }
              while (v103);
            }
          }
        }
        if (*((_BYTE *)v6 + 8) == 1)
        {
          if (!v124)
            goto LABEL_154;
          v94 = *(_DWORD *)(v124 - 8);
          LODWORD(v95) = v94 & 0xBDFAF04C;
          v96 = *(unsigned __int8 *)(v124 + (v94 & 0xBDFAF04C));
          if (v96 != 7)
          {
            v97 = 1;
            while (v96 != 255)
            {
              v95 = ((_DWORD)v95 + v97) & v94;
              v96 = *(unsigned __int8 *)(v124 + v95);
              ++v97;
              if (v96 == 7)
                goto LABEL_157;
            }
LABEL_154:
            v93 = (_DWORD *)v4;
            v92 = v89;
LABEL_155:
            v98 = "a vertex shader must include the 'position' builtin in its return type";
            v99 = 71;
LABEL_156:
            this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v93, v92, v98, v99);
          }
        }
      }
      else if (*((_BYTE *)v6 + 8) == 1)
      {
        v92 = (__int128 *)(v121 + 8);
        v93 = (_DWORD *)v4;
        goto LABEL_155;
      }
LABEL_157:
      if (v123)
        this = (_QWORD *)WTF::fastFree((WTF *)(v123 - 4), a2);
      if (v124)
        this = (_QWORD *)WTF::fastFree((WTF *)(v124 - 16), a2);
      v6 += 3;
    }
    while (v6 != v120);
  }
  v110 = *(_DWORD *)(v4 + 68);
  if (v110)
  {
    v111 = *(_QWORD *)(v4 + 56);
    v112 = *(_DWORD *)(v4 + 64);
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    v113 = a3;
    *(_QWORD *)a3 = v111;
    *(_DWORD *)(a3 + 8) = v112;
    *(_DWORD *)(a3 + 12) = v110;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    LOBYTE(v110) = 1;
  }
  else
  {
    v113 = a3;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(v113 + 32) = v110;
  return this;
}

_DWORD *WGSL::AttributeValidator::validateBuiltinIO(_DWORD *result, __int128 *a2, _QWORD *a3, int a4, int a5, int a6, uint64_t *a7)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  const char *v44;
  int v45;
  const char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  const char *v96;
  const char *v97;
  __int128 v98;
  const char *v99;
  int v100;
  const char *v101;
  int v102;

  v10 = result;
  switch(a5)
  {
    case 0:
      v11 = *(_QWORD *)(*((_QWORD *)result + 6) + 176);
      if ((_QWORD *)v11 == a3)
      {
        if (a4 == 2 && a6 == 1)
          goto LABEL_73;
        if (a4 == 1)
        {
          v23 = "vertex";
          v24 = 7;
        }
        else if (a4 == 2)
        {
          v23 = "fragment";
          v24 = 9;
        }
        else
        {
          v23 = "compute";
          v24 = 8;
        }
        v61 = "output";
        if (!a6)
          v61 = "input";
        v62 = 6;
        if (a6)
          v62 = 7;
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(result, a2, "@builtin(", 10, "frag_depth", 11, ") cannot be used for ", 22, v23, v24, " shader ", 9, v61, v62);
      }
      else
      {
        LOBYTE(v97) = 39;
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)result, a2, (int8x16_t *)"store type of @builtin(", 24, "frag_depth", 11, ") must be '", 12, v11, (char *)&v97);
      }
    case 1:
      v14 = *(_QWORD **)(*((_QWORD *)result + 6) + 152);
      if (v14 != a3)
      {
        LOBYTE(v97) = 39;
        v91 = v14;
        v15 = "front_facing";
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)result, a2, (int8x16_t *)"store type of @builtin(", 24, v15, 13, ") must be '", 12, (uint64_t)v91, (char *)&v97);
      }
      if (a4 == 2 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v25 = "vertex";
        v26 = 7;
      }
      else if (a4 == 2)
      {
        v25 = "fragment";
        v26 = 9;
      }
      else
      {
        v25 = "compute";
        v26 = 8;
      }
      v63 = "output";
      if (!a6)
        v63 = "input";
      v64 = 6;
      if (a6)
        v64 = 7;
      v92 = (char *)v25;
      v93 = v26;
      v94 = (char *)v63;
      v95 = v64;
      v59 = "front_facing";
      goto LABEL_161;
    case 2:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((_BYTE *)a3 + 8) != 3
        || *a3 != *(_QWORD *)(*((_QWORD *)result + 6) + 168))
      {
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>(result, a2, "store type of @builtin(", 24, "global_invocation_id", 21, ") must be '", 12, "vec3<u32>", 10, 39);
      }
      if (a4 == 4 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v75 = "vertex";
        v76 = 7;
      }
      else if (a4 == 2)
      {
        v75 = "fragment";
        v76 = 9;
      }
      else
      {
        v75 = "compute";
        v76 = 8;
      }
      v85 = "output";
      if (!a6)
        v85 = "input";
      v86 = 6;
      if (a6)
        v86 = 7;
      return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(result, a2, "@builtin(", 10, "global_invocation_id", 21, ") cannot be used for ", 22, v75, v76, " shader ", 9, v85, v86);
    case 3:
      v13 = *(_QWORD *)(*((_QWORD *)result + 6) + 168);
      if ((_QWORD *)v13 != a3)
      {
        LOBYTE(v97) = 39;
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)result, a2, (int8x16_t *)"store type of @builtin(", 24, "instance_index", 15, ") must be '", 12, v13, (char *)&v97);
      }
      if (a4 == 1 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v21 = "vertex";
        v22 = 7;
      }
      else if (a4 == 2)
      {
        v21 = "fragment";
        v22 = 9;
      }
      else
      {
        v21 = "compute";
        v22 = 8;
      }
      v57 = "output";
      if (!a6)
        v57 = "input";
      v58 = 6;
      if (a6)
        v58 = 7;
      v92 = (char *)v21;
      v93 = v22;
      v94 = (char *)v57;
      v95 = v58;
      v59 = "instance_index";
      goto LABEL_128;
    case 4:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((_BYTE *)a3 + 8) != 3
        || *a3 != *(_QWORD *)(*((_QWORD *)result + 6) + 168))
      {
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>(result, a2, "store type of @builtin(", 24, "local_invocation_id", 20, ") must be '", 12, "vec3<u32>", 10, 39);
      }
      if (a4 == 4 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v73 = "vertex";
        v74 = 7;
      }
      else if (a4 == 2)
      {
        v73 = "fragment";
        v74 = 9;
      }
      else
      {
        v73 = "compute";
        v74 = 8;
      }
      v83 = "output";
      if (!a6)
        v83 = "input";
      v84 = 6;
      if (a6)
        v84 = 7;
      return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(result, a2, "@builtin(", 10, "local_invocation_id", 20, ") cannot be used for ", 22, v73, v74, " shader ", 9, v83, v84);
    case 5:
      v16 = *(_QWORD *)(*((_QWORD *)result + 6) + 168);
      if ((_QWORD *)v16 != a3)
      {
        LOBYTE(v97) = 39;
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)result, a2, (int8x16_t *)"store type of @builtin(", 24, "local_invocation_index", 23, ") must be '", 12, v16, (char *)&v97);
      }
      if (a4 == 4 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v27 = "vertex";
        v28 = 7;
      }
      else if (a4 == 2)
      {
        v27 = "fragment";
        v28 = 9;
      }
      else
      {
        v27 = "compute";
        v28 = 8;
      }
      v65 = "output";
      if (!a6)
        v65 = "input";
      v66 = 6;
      if (a6)
        v66 = 7;
      return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(result, a2, "@builtin(", 10, "local_invocation_index", 23, ") cannot be used for ", 22, v27, v28, " shader ", 9, v65, v66);
    case 6:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((_BYTE *)a3 + 8) != 3
        || *a3 != *(_QWORD *)(*((_QWORD *)result + 6) + 168))
      {
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>(result, a2, "store type of @builtin(", 24, "num_workgroups", 15, ") must be '", 12, "vec3<u32>", 10, 39);
      }
      if (a4 == 4 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v79 = "vertex";
        v80 = 7;
      }
      else if (a4 == 2)
      {
        v79 = "fragment";
        v80 = 9;
      }
      else
      {
        v79 = "compute";
        v80 = 8;
      }
      v87 = "output";
      if (!a6)
        v87 = "input";
      v88 = 6;
      if (a6)
        v88 = 7;
      v92 = (char *)v79;
      v93 = v80;
      v94 = (char *)v87;
      v95 = v88;
      v59 = "num_workgroups";
LABEL_128:
      v60 = 15;
      return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(result, a2, "@builtin(", 10, v59, v60, ") cannot be used for ", 22, v92, v93, " shader ", 9, v94, v95);
    case 7:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((_BYTE *)a3 + 8) != 4
        || *a3 != *(_QWORD *)(*((_QWORD *)result + 6) + 176))
      {
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>(result, a2, "store type of @builtin(", 24, "position", 9, ") must be '", 12, "vec4<f32>", 10, 39);
      }
      if (a4 == 1 && a6 == 1 || a4 == 2 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v77 = "vertex";
        v78 = 7;
      }
      else if (a4 == 2)
      {
        v77 = "fragment";
        v78 = 9;
      }
      else
      {
        v77 = "compute";
        v78 = 8;
      }
      v89 = "output";
      if (!a6)
        v89 = "input";
      v90 = 6;
      if (a6)
        v90 = 7;
      return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(result, a2, "@builtin(", 10, "position", 9, ") cannot be used for ", 22, v77, v78, " shader ", 9, v89, v90);
    case 8:
      v17 = *(_QWORD **)(*((_QWORD *)result + 6) + 168);
      if (v17 != a3)
      {
        LOBYTE(v97) = 39;
        v91 = v17;
        v15 = "sample_index";
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)result, a2, (int8x16_t *)"store type of @builtin(", 24, v15, 13, ") must be '", 12, (uint64_t)v91, (char *)&v97);
      }
      if (a4 == 2 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v29 = "vertex";
        v30 = 7;
      }
      else if (a4 == 2)
      {
        v29 = "fragment";
        v30 = 9;
      }
      else
      {
        v29 = "compute";
        v30 = 8;
      }
      v67 = "output";
      if (!a6)
        v67 = "input";
      v68 = 6;
      if (a6)
        v68 = 7;
      v92 = (char *)v29;
      v93 = v30;
      v94 = (char *)v67;
      v95 = v68;
      v59 = "sample_index";
      goto LABEL_161;
    case 9:
      v12 = *(_QWORD *)(*((_QWORD *)result + 6) + 168);
      if ((_QWORD *)v12 != a3)
      {
        LOBYTE(v97) = 39;
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)result, a2, (int8x16_t *)"store type of @builtin(", 24, "sample_mask", 12, ") must be '", 12, v12, (char *)&v97);
      }
      if (a4 == 2)
        goto LABEL_73;
      if (a4 == 1)
      {
        v19 = "vertex";
        v20 = 7;
      }
      else
      {
        v19 = "compute";
        v20 = 8;
      }
      v55 = "output";
      if (!a6)
        v55 = "input";
      v56 = 6;
      if (a6)
        v56 = 7;
      return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(result, a2, "@builtin(", 10, "sample_mask", 12, ") cannot be used for ", 22, v19, v20, " shader ", 9, v55, v56);
    case 10:
      v18 = *(_QWORD **)(*((_QWORD *)result + 6) + 168);
      if (v18 != a3)
      {
        LOBYTE(v97) = 39;
        v91 = v18;
        v15 = "vertex_index";
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)result, a2, (int8x16_t *)"store type of @builtin(", 24, v15, 13, ") must be '", 12, (uint64_t)v91, (char *)&v97);
      }
      if (a4 == 1 && !a6)
        goto LABEL_73;
      if (a4 == 1)
      {
        v53 = "vertex";
        v54 = 7;
      }
      else if (a4 == 2)
      {
        v53 = "fragment";
        v54 = 9;
      }
      else
      {
        v53 = "compute";
        v54 = 8;
      }
      v69 = "output";
      if (!a6)
        v69 = "input";
      v70 = 6;
      if (a6)
        v70 = 7;
      v92 = (char *)v53;
      v93 = v54;
      v94 = (char *)v69;
      v95 = v70;
      v59 = "vertex_index";
      goto LABEL_161;
    case 11:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((_BYTE *)a3 + 8) != 3
        || *a3 != *(_QWORD *)(*((_QWORD *)result + 6) + 168))
      {
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>(result, a2, "store type of @builtin(", 24, "workgroup_id", 13, ") must be '", 12, "vec3<u32>", 10, 39);
      }
      if (a4 == 4 && !a6)
      {
LABEL_73:
        v31 = *a7;
        if (*a7
          || (result = (_DWORD *)WTF::HashTable<WGSL::Builtin,WGSL::Builtin,WTF::IdentityExtractor,WTF::IntHash<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>>::rehash(a7, 8u), (v31 = *a7) != 0))
        {
          v32 = *(_DWORD *)(v31 - 8);
        }
        else
        {
          v32 = 0;
        }
        v33 = 9 * ((~(a5 << 15) + a5) ^ ((~(a5 << 15) + a5) >> 10));
        v34 = v32 & (((v33 ^ (v33 >> 6)) + ~((v33 ^ (v33 >> 6)) << 11)) ^ (((v33 ^ (v33 >> 6))
                                                                          + ~((v33 ^ (v33 >> 6)) << 11)) >> 16));
        v35 = (_BYTE *)(v31 + v34);
        v36 = *(unsigned __int8 *)(v31 + v34);
        if (v36 == 255)
          goto LABEL_84;
        v37 = 0;
        v38 = 1;
        while (a5 != v36)
        {
          if (v36 == 254)
            v37 = v35;
          v34 = ((_DWORD)v34 + v38) & v32;
          v35 = (_BYTE *)(v31 + v34);
          v36 = *(unsigned __int8 *)(v31 + v34);
          ++v38;
          if (v36 == 255)
          {
            if (v37)
            {
              *v37 = -1;
              --*(_DWORD *)(*a7 - 16);
              v35 = v37;
            }
LABEL_84:
            *v35 = a5;
            if (*a7)
            {
              ++*(_DWORD *)(*a7 - 12);
              v39 = *a7;
              if (*a7)
                goto LABEL_86;
LABEL_93:
              v40 = *(unsigned int *)(v39 - 16);
              v41 = *(unsigned int *)(v39 - 4);
              if (v41 > 0x400)
                goto LABEL_94;
LABEL_87:
              if (3 * v41 > 4 * v40)
                return result;
              if (!(_DWORD)v41)
                return (_DWORD *)WTF::HashTable<WGSL::Builtin,WGSL::Builtin,WTF::IdentityExtractor,WTF::IntHash<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>>::rehash(a7, 8u);
            }
            else
            {
              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
              v39 = *a7;
              if (!*a7)
                goto LABEL_93;
LABEL_86:
              v40 = (*(_DWORD *)(v39 - 16) + *(_DWORD *)(v39 - 12));
              v41 = *(unsigned int *)(v39 - 4);
              if (v41 <= 0x400)
                goto LABEL_87;
LABEL_94:
              if (v41 > 2 * v40)
                return result;
            }
            return (_DWORD *)WTF::HashTable<WGSL::Builtin,WGSL::Builtin,WTF::IdentityExtractor,WTF::IntHash<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>>::rehash(a7, (_DWORD)v41 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v41)));
          }
        }
        v42 = a5 - 1;
        if ((a5 - 1) > 0xA)
        {
          v45 = 10;
          v44 = "frag_depth";
        }
        else
        {
          v43 = v42;
          v44 = off_1E0FD2BE8[v42];
          v45 = dword_18260F810[v43];
        }
        v97 = "@builtin(";
        LODWORD(v98) = 9;
        v101 = v44;
        v102 = v45;
        v99 = ") appears multiple times as pipeline input";
        v100 = 42;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v97, (uint64_t)&v101, (uint64_t)&v99, &v96);
        v46 = v96;
        if (!v96)
        {
          __break(0xC471u);
          JUMPOUT(0x18248CC20);
        }
        v96 = 0;
        v97 = v46;
        v98 = *a2;
        v47 = v10[17];
        if ((_DWORD)v47 == v10[16])
        {
          v48 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 14), v47 + 1, (unint64_t)&v97);
          v49 = *((_QWORD *)v10 + 7) + 24 * v10[17];
          v50 = *(_QWORD *)v48;
          *(_QWORD *)v48 = 0;
          *(_QWORD *)v49 = v50;
          *(_OWORD *)(v49 + 8) = *(_OWORD *)(v48 + 8);
          v51 = v97;
          ++v10[17];
          v97 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v51 -= 2;
          }
        }
        else
        {
          v52 = *((_QWORD *)v10 + 7) + 24 * v47;
          *(_QWORD *)v52 = v46;
          *(_OWORD *)(v52 + 8) = v98;
          ++v10[17];
          v97 = 0;
        }
        result = v96;
        v96 = 0;
        if (result)
        {
          if (*result == 2)
            return (_DWORD *)WTF::StringImpl::destroy();
          else
            *result -= 2;
        }
      }
      else
      {
        if (a4 == 1)
        {
          v71 = "vertex";
          v72 = 7;
        }
        else if (a4 == 2)
        {
          v71 = "fragment";
          v72 = 9;
        }
        else
        {
          v71 = "compute";
          v72 = 8;
        }
        v81 = "output";
        if (!a6)
          v81 = "input";
        v82 = 6;
        if (a6)
          v82 = 7;
        v92 = (char *)v71;
        v93 = v72;
        v94 = (char *)v81;
        v95 = v82;
        v59 = "workgroup_id";
LABEL_161:
        v60 = 13;
        return WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(result, a2, "@builtin(", 10, v59, v60, ") cannot be used for ", 22, v92, v93, " shader ", 9, v94, v95);
      }
      return result;
    default:
      goto LABEL_73;
  }
}

uint64_t *WGSL::AttributeValidator::validateLocationIO(char *a1, __int128 *a2, uint64_t a3, int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t *result;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  char v13[28];
  unsigned int v14;

  v14 = a5;
  if (a4 == 4)
    return (uint64_t *)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(a1, a2, "@location cannot be used by compute shaders", 44);
  if (a3)
  {
    v9 = (unsigned __int8 *)a3;
    while (1)
    {
      v10 = *((_DWORD *)v9 + 12);
      if (v10 != 10)
        break;
      v9 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if (!v9)
        goto LABEL_10;
    }
    if (!v10 && *v9 < 6u)
    {
LABEL_17:
      result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(a6, (int *)&v14, (uint64_t)v13);
      if (!v13[16])
        return (uint64_t *)WGSL::AttributeValidator::error<WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral>(a1, a2, "@location(", 11, v14, ") appears multiple times", 25);
      return result;
    }
LABEL_10:
    if (*(_DWORD *)(a3 + 48) == 1)
    {
      v11 = *(unsigned __int8 **)a3;
      if (*(_QWORD *)a3)
      {
        while (1)
        {
          v12 = *((_DWORD *)v11 + 12);
          if (v12 != 10)
            break;
          v11 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
          if (!v11)
            goto LABEL_20;
        }
        if (!v12 && *v11 < 6u)
          goto LABEL_17;
      }
    }
  }
LABEL_20:
  v13[0] = 39;
  return (uint64_t *)WGSL::AttributeValidator::error<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)a1, a2, "cannot apply @location to declaration of type '", 48, a3, v13);
}

_DWORD *WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, _OWORD *a2, int8x16_t *a3, uint64_t a4, _BYTE *a5, uint64_t a6, _BYTE *a7, uint64_t a8, uint64_t a9, char *a10)
{
  uint64_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  __int16 v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _DWORD *v30;
  _DWORD *result;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  size_t v55;
  int8x16_t *v56;
  _BYTE *v57;
  unint64_t v58;
  unsigned __int128 *v59;
  unsigned __int128 v60;
  size_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  int8x16_t *v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _WORD *v73;
  int8x16_t *v74;
  __int16 v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  int8x16_t v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _WORD *v94;
  unsigned __int8 *v95;
  __int16 v96;
  _WORD *v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  int8x16_t v101;
  __int128 v102;
  __int128 v103;
  char *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _WORD *v118;
  unsigned __int8 *v119;
  __int16 v120;
  uint64_t v121;
  int8x16_t *v122;
  _WORD *v123;
  unint64_t v124;
  __int128 v125;
  char *v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  char *v130;
  char *v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _WORD *v144;
  int8x16_t *v145;
  __int16 v146;
  unint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int8x16_t *v158;
  int8x16_t *v159;
  unint64_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int16x8_t *v165;
  int8x8_t *v166;
  unint64_t v167;
  int16x8_t v168;
  uint64_t v169;
  unint64_t v170;
  uint8x8_t *v171;
  uint16x8_t *v172;
  unint64_t v173;
  uint8x16_t v174;
  uint16x8_t v175;
  uint16x8_t v176;
  uint8x8_t *v177;
  uint16x8_t *v178;
  unint64_t v179;
  uint8x8_t v180;
  uint8x8_t *v181;
  uint16x8_t *v182;
  unint64_t v183;
  uint8x16_t v184;
  uint16x8_t v185;
  uint16x8_t v186;
  uint8x8_t *v187;
  uint16x8_t *v188;
  unint64_t v189;
  uint8x8_t v190;
  uint8x8_t *v191;
  uint16x8_t *v192;
  unint64_t v193;
  uint8x16_t v194;
  uint16x8_t v195;
  uint16x8_t v196;
  uint8x8_t *v197;
  uint16x8_t *v198;
  unint64_t v199;
  uint8x8_t v200;
  uint8x8_t *v201;
  uint16x8_t *v202;
  unint64_t v203;
  uint8x16_t v204;
  uint16x8_t v205;
  uint16x8_t v206;
  uint8x8_t *v207;
  uint16x8_t *v208;
  unint64_t v209;
  uint8x8_t v210;
  char v211;
  __int16 v212;
  _OWORD *v213;
  _BYTE *v214;
  uint64_t v216;
  _QWORD v217[15];
  _QWORD *v218;
  _BYTE v219[48];
  unsigned int v220;
  _DWORD *v221;
  __int128 v222;
  uint64_t v223;
  int8x16x2_t v224;
  int8x16x2_t v225;
  int8x16x2_t v226;
  int8x16x2_t v227;
  int8x16x2_t v228;
  int8x16x2_t v229;
  int8x16x2_t v230;
  int8x16x2_t v231;
  int8x16x2_t v232;
  int8x16x2_t v233;
  int8x16x2_t v234;
  int8x16x2_t v235;

  v223 = *MEMORY[0x1E0C80C00];
  v219[0] = 0;
  v220 = -1;
  v17 = *(unsigned int *)(a9 + 48);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *))off_1E0FD2B70[v17])(&v221, v219);
    v220 = v17;
  }
  if (a4)
    v18 = a4 - 1;
  else
    v18 = 0;
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248D8E8);
  }
  v214 = a7;
  if (a6)
    v19 = a6 - 1;
  else
    v19 = 0;
  if (v19 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248D908);
  }
  v20 = a4;
  v21 = a6;
  v216 = a8;
  if (a8)
    v22 = a8 - 1;
  else
    v22 = 0;
  if (v22 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248D928);
  }
  v23 = *a10;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v221);
  v217[0] = &v221;
  v217[1] = &v221;
  v217[2] = &v221;
  v217[3] = &v221;
  v217[4] = &v221;
  v217[5] = &v221;
  v217[6] = &v221;
  v217[7] = &v221;
  v217[8] = &v221;
  v217[9] = &v221;
  v217[10] = &v221;
  v217[11] = &v221;
  v217[12] = &v221;
  v217[13] = &v221;
  v217[14] = &v221;
  if (v220 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v218 = v217;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v220])(&v218, v219);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v221);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v221);
  v25 = v217[0];
  if (v217[0])
  {
    v26 = *(_DWORD *)(v217[0] + 4);
    if (v26 < 0)
      goto LABEL_25;
    v24 = __OFADD__(v26, 1);
    v27 = v26 + 1;
    if (v24)
      goto LABEL_25;
  }
  else
  {
    v27 = 1;
    if (v24)
    {
LABEL_25:
      v30 = 0;
      goto LABEL_26;
    }
  }
  v24 = __OFADD__((_DWORD)v22, v27);
  v28 = v22 + v27;
  if (v24)
    goto LABEL_25;
  v24 = __OFADD__((_DWORD)v19, v28);
  v29 = v19 + v28;
  if (v24)
    goto LABEL_25;
  v213 = a2;
  v38 = (v18 + v29);
  if (__OFADD__((_DWORD)v18, v29))
  {
    v30 = 0;
    a2 = v213;
    goto LABEL_26;
  }
  if (!v217[0] || (v39 = *(_DWORD *)(v217[0] + 16), *(_DWORD *)v217[0] += 2, (v39 & 4) != 0))
  {
    if ((_DWORD)v38)
    {
      if ((v38 & 0x80000000) != 0)
      {
        v30 = 0;
      }
      else
      {
        v211 = v23;
        WTF::tryFastCompactMalloc((WTF *)(v38 + 20));
        v30 = v221;
        if (v221)
        {
          v40 = v221 + 5;
          *v221 = 2;
          v30[1] = v38;
          *((_QWORD *)v30 + 1) = v30 + 5;
          v30[4] = 4;
          if (v25)
            *(_DWORD *)v25 += 2;
          a2 = v213;
          if ((_DWORD)v18)
          {
            if ((_DWORD)v18 == 1)
            {
              *v40 = a3->i8[0];
            }
            else
            {
              memcpy(v30 + 5, a3, v18);
              v40 = v30 + 5;
            }
          }
          if (v25)
            *(_DWORD *)v25 += 2;
          v52 = &v40[v18];
          if ((_DWORD)v19)
          {
            if ((_DWORD)v19 == 1)
              *v52 = *a5;
            else
              memcpy(&v40[v18], a5, v19);
          }
          if (v25)
            *(_DWORD *)v25 += 2;
          v53 = &v52[v19];
          if ((_DWORD)v22)
          {
            if ((_DWORD)v22 == 1)
              *v53 = *v214;
            else
              memcpy(v53, v214, v22);
          }
          v54 = &v53[v22];
          if (!v25)
          {
            *v54 = v211;
            goto LABEL_26;
          }
          v55 = *(unsigned int *)(v25 + 4);
          *(_DWORD *)v25 += 2;
          v56 = *(int8x16_t **)(v25 + 8);
          if ((*(_BYTE *)(v25 + 16) & 4) != 0)
          {
            if ((_DWORD)v55)
            {
              if ((_DWORD)v55 == 1)
                *v54 = v56->i8[0];
              else
                memcpy(v54, v56, v55);
            }
            goto LABEL_113;
          }
          v57 = &v54[v55];
          if (v55 < 0x10)
          {
            v58 = (unint64_t)v54;
          }
          else
          {
            v58 = (unint64_t)&v54[v55 & 0xFFFFFFF0];
            v59 = (unsigned __int128 *)v54;
            do
            {
              v60 = (unsigned __int128)vld2q_s8(v56->i8);
              v56 += 2;
              *v59++ = v60;
            }
            while (v59 != (unsigned __int128 *)v58);
          }
          if ((_BYTE *)v58 == v57)
          {
LABEL_113:
            v54[*(unsigned int *)(v25 + 4)] = v211;
LABEL_214:
            v148 = *(_DWORD *)v25 - 2;
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::destroy();
              v148 = *(_DWORD *)v25;
            }
            else
            {
              *(_DWORD *)v25 = v148;
            }
            v149 = v148 - 2;
            if (v149)
            {
              *(_DWORD *)v25 = v149;
            }
            else
            {
              WTF::StringImpl::destroy();
              v149 = *(_DWORD *)v25;
            }
            v150 = v149 - 2;
            if (v150)
            {
              *(_DWORD *)v25 = v150;
            }
            else
            {
              WTF::StringImpl::destroy();
              v150 = *(_DWORD *)v25;
            }
            v151 = v150 - 2;
            if (v151)
              *(_DWORD *)v25 = v151;
            else
              WTF::StringImpl::destroy();
            goto LABEL_226;
          }
          v61 = (size_t)v30 + v20 + v216 + v21 + v55;
          v62 = v61 - v58 - (v216 != 0) - (v21 != 0) - (v20 != 0) + 20;
          if (v62 < 8)
            goto LABEL_108;
          if (v20)
            v63 = v58 + 1;
          else
            v63 = v58;
          if (v21)
            ++v63;
          if (v216)
          {
            ++v63;
            v64 = v58 + 1;
          }
          else
          {
            v64 = v58;
          }
          if (v21)
            ++v64;
          if (v20)
            ++v64;
          if (v58 < (unint64_t)&v56[2].u64[1] + 2 * v61 + -2 * v64
            && (unint64_t)v56 < v61 - v63 + v58 + 20)
          {
LABEL_108:
            v65 = (_BYTE *)v58;
            v66 = v56;
            goto LABEL_109;
          }
          if (v62 >= 0x20)
          {
            v147 = v62 & 0xFFFFFFFFFFFFFFE0;
            v158 = v56 + 2;
            v159 = (int8x16_t *)(v58 + 16);
            v160 = v62 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v162 = v158[-2];
              v161 = v158[-1];
              v164 = *v158;
              v163 = v158[1];
              v158 += 4;
              v159[-1] = vuzp1q_s8(v162, v161);
              *v159 = vuzp1q_s8(v164, v163);
              v159 += 2;
              v160 -= 32;
            }
            while (v160);
            if (v62 == v147)
              goto LABEL_113;
            if ((v62 & 0x18) == 0)
            {
              v66 = (int8x16_t *)((char *)v56 + 2 * v147);
              v65 = (_BYTE *)(v58 + v147);
              do
              {
LABEL_109:
                v67 = v66->i8[0];
                v66 = (int8x16_t *)((char *)v66 + 2);
                *v65++ = v67;
              }
              while (v65 != v57);
              goto LABEL_113;
            }
          }
          else
          {
            v147 = 0;
          }
          v65 = (_BYTE *)(v58 + (v62 & 0xFFFFFFFFFFFFFFF8));
          v66 = (int8x16_t *)((char *)v56 + 2 * (v62 & 0xFFFFFFFFFFFFFFF8));
          v165 = (int16x8_t *)((char *)v56 + 2 * v147);
          v166 = (int8x8_t *)(v58 + v147);
          v167 = v147 - (v62 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v168 = *v165++;
            *v166++ = vmovn_s16(v168);
            v167 += 8;
          }
          while (v167);
          if (v62 == (v62 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_113;
          goto LABEL_109;
        }
      }
    }
    else
    {
      v30 = (_DWORD *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    a2 = v213;
    if (!v25)
      goto LABEL_26;
    goto LABEL_226;
  }
  if ((_DWORD)v38)
  {
    if (v38 > 0x7FFFFFEF)
    {
      v30 = 0;
      a2 = v213;
      goto LABEL_226;
    }
    v212 = v23;
    WTF::tryFastCompactMalloc((WTF *)(2 * v38 + 20));
    v30 = v221;
    if (v221)
    {
      v41 = (unint64_t)(v221 + 5);
      *v221 = 2;
      v30[1] = v38;
      *((_QWORD *)v30 + 1) = v30 + 5;
      v30[4] = 0;
      *(_DWORD *)v25 += 2;
      v42 = (unint64_t)v30 + 2 * v18 + 20;
      if ((v18 & 0xFFFFFFC0) != 0)
      {
        v43 = v41 + 2 * (v18 & 0xFFFFFFC0);
        v44 = 0uLL;
        v45 = v20;
        do
        {
          v224.val[0] = *a3;
          v46 = a3[1];
          v228.val[0] = a3[2];
          v47 = a3[3];
          a3 += 4;
          v48 = v47;
          v228.val[1] = 0uLL;
          v232.val[0] = v46;
          v224.val[1] = 0uLL;
          v49 = (char *)v41;
          vst2q_s8(v49, v224);
          v49 += 32;
          v232.val[1] = 0uLL;
          vst2q_s8(v49, v232);
          v50 = (char *)(v41 + 64);
          vst2q_s8(v50, v228);
          v51 = (char *)(v41 + 96);
          vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
          v41 += 128;
        }
        while (v41 != v43);
        v41 = v43;
        a2 = v213;
      }
      else
      {
        a2 = v213;
        v45 = v20;
      }
      if (v41 == v42)
      {
LABEL_126:
        *(_DWORD *)v25 += 2;
        v76 = v42 + 2 * v19;
        if ((v19 & 0xFFFFFFC0) != 0)
        {
          v77 = v42 + 2 * (v19 & 0xFFFFFFC0);
          v78 = 0uLL;
          v79 = (unint64_t)v214;
          v80 = (unint64_t)a5;
          do
          {
            v225.val[0] = *(int8x16_t *)v80;
            v81 = *(int8x16_t *)(v80 + 16);
            v229.val[0] = *(int8x16_t *)(v80 + 32);
            v82 = *(_OWORD *)(v80 + 48);
            v80 += 64;
            v83 = v82;
            v229.val[1] = 0uLL;
            v233.val[0] = v81;
            v225.val[1] = 0uLL;
            v84 = (char *)v42;
            vst2q_s8(v84, v225);
            v84 += 32;
            v233.val[1] = 0uLL;
            vst2q_s8(v84, v233);
            v85 = (char *)(v42 + 64);
            vst2q_s8(v85, v229);
            v86 = (char *)(v42 + 96);
            vst2q_s8(v86, *(int8x16x2_t *)(&v78 - 1));
            v42 += 128;
          }
          while (v42 != v77);
          v42 = v77;
        }
        else
        {
          v79 = (unint64_t)v214;
          v80 = (unint64_t)a5;
        }
        if (v42 == v76)
        {
LABEL_148:
          *(_DWORD *)v25 += 2;
          v97 = (_WORD *)(v76 + 2 * v22);
          if ((v22 & 0xFFFFFFC0) != 0)
          {
            v98 = v76 + 2 * (v22 & 0xFFFFFFC0);
            v99 = 0uLL;
            v100 = v216;
            do
            {
              v226.val[0] = *(int8x16_t *)v79;
              v101 = *(int8x16_t *)(v79 + 16);
              v230.val[0] = *(int8x16_t *)(v79 + 32);
              v102 = *(_OWORD *)(v79 + 48);
              v79 += 64;
              v103 = v102;
              v230.val[1] = 0uLL;
              v234.val[0] = v101;
              v226.val[1] = 0uLL;
              v104 = (char *)v76;
              vst2q_s8(v104, v226);
              v104 += 32;
              v234.val[1] = 0uLL;
              vst2q_s8(v104, v234);
              v105 = (char *)(v76 + 64);
              vst2q_s8(v105, v230);
              v106 = (char *)(v76 + 96);
              vst2q_s8(v106, *(int8x16x2_t *)(&v99 - 1));
              v76 += 128;
            }
            while (v76 != v98);
            v76 = v98;
          }
          else
          {
            v100 = v216;
          }
          if ((_WORD *)v76 != v97)
          {
            v107 = (unint64_t)v30 + 2 * v100 + 2 * v21 + 2 * v45 - v76;
            v108 = -2;
            if (v45)
              v109 = -2;
            else
              v109 = 0;
            if (v21)
              v110 = -2;
            else
              v110 = 0;
            v111 = v109 + v110;
            if (v100)
              v112 = -2;
            else
              v112 = 0;
            v113 = v107 + v111 + v112 + 18;
            if (v113 < 0xE)
              goto LABEL_174;
            if (v45)
              v114 = -2;
            else
              v114 = 0;
            if (v21)
              v115 = -2;
            else
              v115 = 0;
            v116 = v114 + v115;
            if (!v100)
              v108 = 0;
            v117 = v107 + v116 + v108 + 18;
            if (v76 < v79 + (v117 >> 1) + 1 && v79 < (v117 & 0xFFFFFFFFFFFFFFFELL) + v76 + 2)
            {
LABEL_174:
              v118 = (_WORD *)v76;
              v119 = (unsigned __int8 *)v79;
              goto LABEL_175;
            }
            v156 = (v113 >> 1) + 1;
            if (v113 >= 0x3E)
            {
              v157 = v156 & 0xFFFFFFFFFFFFFFE0;
              v191 = (uint8x8_t *)(v79 + 16);
              v192 = (uint16x8_t *)(v76 + 32);
              v193 = v156 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v194 = *(uint8x16_t *)v191[-2].i8;
                v195 = vmovl_u8(*v191);
                v196 = vmovl_high_u8(*(uint8x16_t *)v191->i8);
                v192[-2] = vmovl_u8(*(uint8x8_t *)v194.i8);
                v192[-1] = vmovl_high_u8(v194);
                *v192 = v195;
                v192[1] = v196;
                v192 += 4;
                v191 += 4;
                v193 -= 32;
              }
              while (v193);
              if (v156 == v157)
                goto LABEL_176;
              if ((v156 & 0x18) == 0)
              {
                v119 = (unsigned __int8 *)(v79 + v157);
                v118 = (_WORD *)(v76 + 2 * v157);
                do
                {
LABEL_175:
                  v120 = *v119++;
                  *v118++ = v120;
                }
                while (v118 != v97);
                goto LABEL_176;
              }
            }
            else
            {
              v157 = 0;
            }
            v118 = (_WORD *)(v76 + 2 * (v156 & 0xFFFFFFFFFFFFFFF8));
            v119 = (unsigned __int8 *)(v79 + (v156 & 0xFFFFFFFFFFFFFFF8));
            v197 = (uint8x8_t *)(v79 + v157);
            v198 = (uint16x8_t *)(v76 + 2 * v157);
            v199 = v157 - (v156 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v200 = *v197++;
              *v198++ = vmovl_u8(v200);
              v199 += 8;
            }
            while (v199);
            if (v156 != (v156 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_175;
          }
LABEL_176:
          v121 = *(unsigned int *)(v25 + 4);
          *(_DWORD *)v25 += 2;
          v122 = *(int8x16_t **)(v25 + 8);
          if ((*(_BYTE *)(v25 + 16) & 4) == 0)
          {
            if (!(_DWORD)v121)
            {
LABEL_213:
              v97[v121] = v212;
              goto LABEL_214;
            }
            if ((_DWORD)v121 == 1)
            {
              *v97 = v122->i16[0];
              LODWORD(v121) = 1;
              goto LABEL_213;
            }
            memcpy(v97, v122, 2 * v121);
LABEL_212:
            LODWORD(v121) = *(_DWORD *)(v25 + 4);
            goto LABEL_213;
          }
          v123 = &v97[v121];
          if (v121 < 0x40)
          {
            v124 = (unint64_t)v97;
          }
          else
          {
            v124 = (unint64_t)&v97[v121 & 0xFFFFFFC0];
            v125 = 0uLL;
            v126 = (char *)v97;
            do
            {
              v227.val[0] = *v122;
              v127 = v122[1];
              v231.val[0] = v122[2];
              v128 = v122[3];
              v122 += 4;
              v129 = v128;
              v231.val[1] = 0uLL;
              v235.val[0] = v127;
              v227.val[1] = 0uLL;
              v130 = v126;
              vst2q_s8(v130, v227);
              v130 += 32;
              v235.val[1] = 0uLL;
              vst2q_s8(v130, v235);
              v131 = v126 + 64;
              vst2q_s8(v131, v231);
              v132 = v126 + 96;
              vst2q_s8(v132, *(int8x16x2_t *)(&v125 - 1));
              v126 += 128;
            }
            while (v126 != (char *)v124);
          }
          if ((_WORD *)v124 == v123)
            goto LABEL_212;
          v133 = (unint64_t)v30 + 2 * v100 + 2 * v21 + 2 * v45 + 2 * v121 - v124;
          v134 = -2;
          if (v45)
            v135 = -2;
          else
            v135 = 0;
          if (v21)
            v136 = -2;
          else
            v136 = 0;
          v137 = v135 + v136;
          if (v100)
            v138 = -2;
          else
            v138 = 0;
          v139 = v133 + v137 + v138 + 18;
          if (v139 < 0xE)
            goto LABEL_206;
          if (v45)
            v140 = -2;
          else
            v140 = 0;
          if (v21)
            v141 = -2;
          else
            v141 = 0;
          v142 = v140 + v141;
          if (!v100)
            v134 = 0;
          v143 = v133 + v142 + v134 + 18;
          if (v124 < (unint64_t)v122->u64 + (v143 >> 1) + 1
            && (unint64_t)v122 < (v143 & 0xFFFFFFFFFFFFFFFELL) + v124 + 2)
          {
LABEL_206:
            v144 = (_WORD *)v124;
            v145 = v122;
            goto LABEL_207;
          }
          v169 = (v139 >> 1) + 1;
          if (v139 >= 0x3E)
          {
            v170 = v169 & 0xFFFFFFFFFFFFFFE0;
            v201 = (uint8x8_t *)&v122[1];
            v202 = (uint16x8_t *)(v124 + 32);
            v203 = v169 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v204 = *(uint8x16_t *)v201[-2].i8;
              v205 = vmovl_u8(*v201);
              v206 = vmovl_high_u8(*(uint8x16_t *)v201->i8);
              v202[-2] = vmovl_u8(*(uint8x8_t *)v204.i8);
              v202[-1] = vmovl_high_u8(v204);
              *v202 = v205;
              v202[1] = v206;
              v202 += 4;
              v201 += 4;
              v203 -= 32;
            }
            while (v203);
            if (v169 == v170)
              goto LABEL_212;
            if ((v169 & 0x18) == 0)
            {
              v145 = (int8x16_t *)((char *)v122 + v170);
              v144 = (_WORD *)(v124 + 2 * v170);
              do
              {
LABEL_207:
                v146 = v145->u8[0];
                v145 = (int8x16_t *)((char *)v145 + 1);
                *v144++ = v146;
              }
              while (v144 != v123);
              goto LABEL_212;
            }
          }
          else
          {
            v170 = 0;
          }
          v144 = (_WORD *)(v124 + 2 * (v169 & 0xFFFFFFFFFFFFFFF8));
          v145 = (int8x16_t *)((char *)v122 + (v169 & 0xFFFFFFFFFFFFFFF8));
          v207 = (uint8x8_t *)&v122->i8[v170];
          v208 = (uint16x8_t *)(v124 + 2 * v170);
          v209 = v170 - (v169 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v210 = *v207++;
            *v208++ = vmovl_u8(v210);
            v209 += 8;
          }
          while (v209);
          if (v169 == (v169 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_212;
          goto LABEL_207;
        }
        v87 = (unint64_t)v30 + 2 * v21 + 2 * v45 - v42;
        v88 = -2;
        if (v45)
          v89 = -2;
        else
          v89 = 0;
        if (v21)
          v90 = -2;
        else
          v90 = 0;
        v91 = v87 + v89 + v90 + 18;
        if (v91 < 0xE)
          goto LABEL_146;
        if (v45)
          v92 = -2;
        else
          v92 = 0;
        if (!v21)
          v88 = 0;
        v93 = v87 + v92 + v88 + 18;
        if (v42 < v80 + (v93 >> 1) + 1 && v80 < (v93 & 0xFFFFFFFFFFFFFFFELL) + v42 + 2)
        {
LABEL_146:
          v94 = (_WORD *)v42;
          v95 = (unsigned __int8 *)v80;
          goto LABEL_147;
        }
        v154 = (v91 >> 1) + 1;
        if (v91 >= 0x3E)
        {
          v155 = v154 & 0xFFFFFFFFFFFFFFE0;
          v181 = (uint8x8_t *)(v80 + 16);
          v182 = (uint16x8_t *)(v42 + 32);
          v183 = v154 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v184 = *(uint8x16_t *)v181[-2].i8;
            v185 = vmovl_u8(*v181);
            v186 = vmovl_high_u8(*(uint8x16_t *)v181->i8);
            v182[-2] = vmovl_u8(*(uint8x8_t *)v184.i8);
            v182[-1] = vmovl_high_u8(v184);
            *v182 = v185;
            v182[1] = v186;
            v182 += 4;
            v181 += 4;
            v183 -= 32;
          }
          while (v183);
          if (v154 == v155)
            goto LABEL_148;
          if ((v154 & 0x18) == 0)
          {
            v95 = (unsigned __int8 *)(v80 + v155);
            v94 = (_WORD *)(v42 + 2 * v155);
            do
            {
LABEL_147:
              v96 = *v95++;
              *v94++ = v96;
            }
            while (v94 != (_WORD *)v76);
            goto LABEL_148;
          }
        }
        else
        {
          v155 = 0;
        }
        v94 = (_WORD *)(v42 + 2 * (v154 & 0xFFFFFFFFFFFFFFF8));
        v95 = (unsigned __int8 *)(v80 + (v154 & 0xFFFFFFFFFFFFFFF8));
        v187 = (uint8x8_t *)(v80 + v155);
        v188 = (uint16x8_t *)(v42 + 2 * v155);
        v189 = v155 - (v154 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v190 = *v187++;
          *v188++ = vmovl_u8(v190);
          v189 += 8;
        }
        while (v189);
        if (v154 == (v154 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_148;
        goto LABEL_147;
      }
      v68 = (unint64_t)v30 + 2 * v45 - v41;
      v69 = -2;
      if (v45)
        v70 = -2;
      else
        v70 = 0;
      v71 = v68 + v70 + 18;
      if (v71 < 0xE)
        goto LABEL_124;
      if (!v45)
        v69 = 0;
      v72 = v68 + v69 + 18;
      if (v41 < (unint64_t)a3->u64 + (v72 >> 1) + 1
        && (unint64_t)a3 < (v72 & 0xFFFFFFFFFFFFFFFELL) + v41 + 2)
      {
LABEL_124:
        v73 = (_WORD *)v41;
        v74 = a3;
        goto LABEL_125;
      }
      v152 = (v71 >> 1) + 1;
      if (v71 >= 0x3E)
      {
        v153 = v152 & 0xFFFFFFFFFFFFFFE0;
        v171 = (uint8x8_t *)&a3[1];
        v172 = (uint16x8_t *)(v41 + 32);
        v173 = v152 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v174 = *(uint8x16_t *)v171[-2].i8;
          v175 = vmovl_u8(*v171);
          v176 = vmovl_high_u8(*(uint8x16_t *)v171->i8);
          v172[-2] = vmovl_u8(*(uint8x8_t *)v174.i8);
          v172[-1] = vmovl_high_u8(v174);
          *v172 = v175;
          v172[1] = v176;
          v172 += 4;
          v171 += 4;
          v173 -= 32;
        }
        while (v173);
        if (v152 == v153)
          goto LABEL_126;
        if ((v152 & 0x18) == 0)
        {
          v74 = (int8x16_t *)((char *)a3 + v153);
          v73 = (_WORD *)(v41 + 2 * v153);
          do
          {
LABEL_125:
            v75 = v74->u8[0];
            v74 = (int8x16_t *)((char *)v74 + 1);
            *v73++ = v75;
          }
          while (v73 != (_WORD *)v42);
          goto LABEL_126;
        }
      }
      else
      {
        v153 = 0;
      }
      v73 = (_WORD *)(v41 + 2 * (v152 & 0xFFFFFFFFFFFFFFF8));
      v74 = (int8x16_t *)((char *)a3 + (v152 & 0xFFFFFFFFFFFFFFF8));
      v177 = (uint8x8_t *)&a3->i8[v153];
      v178 = (uint16x8_t *)(v41 + 2 * v153);
      v179 = v153 - (v152 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v180 = *v177++;
        *v178++ = vmovl_u8(v180);
        v179 += 8;
      }
      while (v179);
      if (v152 == (v152 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_126;
      goto LABEL_125;
    }
    a2 = v213;
  }
  else
  {
    v30 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    a2 = v213;
  }
LABEL_226:
  if (*(_DWORD *)v25 == 2)
    WTF::StringImpl::destroy();
  else
    *(_DWORD *)v25 -= 2;
LABEL_26:
  result = (_DWORD *)v217[0];
  v217[0] = 0;
  if (!result)
    goto LABEL_29;
  if (*result != 2)
  {
    *result -= 2;
LABEL_29:
    if (v30)
      goto LABEL_30;
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x18248D044);
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  if (!v30)
    goto LABEL_40;
LABEL_30:
  v221 = v30;
  v222 = *a2;
  v32 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v32 != *(_DWORD *)(a1 + 64))
  {
    v37 = *(_QWORD *)(a1 + 56) + 24 * v32;
    *(_QWORD *)v37 = v30;
    *(_OWORD *)(v37 + 8) = v222;
    ++*(_DWORD *)(a1 + 68);
    v221 = 0;
LABEL_36:
    v36 = v220;
    if (v220 == -1)
      return result;
    return (_DWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD2AF8[v36])(v217, v219);
  }
  v33 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v32 + 1, (unint64_t)&v221);
  v34 = *(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 68);
  v35 = *(_QWORD *)v33;
  *(_QWORD *)v33 = 0;
  *(_QWORD *)v34 = v35;
  *(_OWORD *)(v34 + 8) = *(_OWORD *)(v33 + 8);
  result = v221;
  ++*(_DWORD *)(a1 + 68);
  v221 = 0;
  if (!result)
    goto LABEL_36;
  if (*result != 2)
  {
    *result -= 2;
    v36 = v220;
    if (v220 == -1)
      return result;
    return (_DWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD2AF8[v36])(v217, v219);
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  v36 = v220;
  if (v220 != -1)
    return (_DWORD *)((uint64_t (*)(_QWORD, _QWORD))off_1E0FD2AF8[v36])(v217, v219);
  return result;
}

_BYTE *WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(_BYTE *result, __int128 *a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6, _BYTE *a7, uint64_t a8, _BYTE *a9, uint64_t a10, _BYTE *a11, uint64_t a12, _BYTE *a13, uint64_t a14)
{
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD *v27;
  _BYTE *v29;
  _DWORD *v30;
  _DWORD *v31;
  size_t v32;
  __int128 *v33;
  _BYTE *v34;
  _BYTE *v35;
  __int128 *v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t __n;
  _DWORD *v50;
  __int128 v51;

  if (a4)
    v14 = a4 - 1;
  else
    v14 = 0;
  if (v14 >> 31)
    goto LABEL_77;
  if (a6)
    v15 = a6 - 1;
  else
    v15 = 0;
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248DFA4);
  }
  if (a8)
    v16 = a8 - 1;
  else
    v16 = 0;
  if (v16 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248DFC4);
  }
  if (a10)
    v17 = a10 - 1;
  else
    v17 = 0;
  if (v17 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248DFE4);
  }
  if (a12)
    v18 = a12 - 1;
  else
    v18 = 0;
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248E004);
  }
  if (a14)
    v19 = a14 - 1;
  else
    v19 = 0;
  if (v19 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248E024);
  }
  v20 = v18 + v19;
  if (__OFADD__((_DWORD)v18, (_DWORD)v19))
    goto LABEL_77;
  v21 = __OFADD__((_DWORD)v17, v20);
  v22 = v17 + v20;
  if (v21)
    goto LABEL_77;
  v21 = __OFADD__((_DWORD)v16, v22);
  v23 = v16 + v22;
  if (v21)
    goto LABEL_77;
  v21 = __OFADD__((_DWORD)v15, v23);
  v24 = v15 + v23;
  if (v21)
    goto LABEL_77;
  v25 = (v14 + v24);
  if (__OFADD__((_DWORD)v14, v24))
    goto LABEL_77;
  v27 = result;
  if (!(_DWORD)v25)
  {
    v30 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v50 = v30;
    v51 = *a2;
    v39 = *((unsigned int *)result + 17);
    if ((_DWORD)v39 == *((_DWORD *)result + 16))
      goto LABEL_64;
    goto LABEL_68;
  }
  if ((v25 & 0x80000000) != 0
    || (result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v25 + 20)), v29 = a3, (v30 = v50) == 0))
  {
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x18248DF84);
  }
  __n = v18;
  v31 = v27;
  v32 = v19;
  v33 = a2;
  v34 = v50 + 5;
  *v50 = 2;
  v30[1] = v25;
  *((_QWORD *)v30 + 1) = v30 + 5;
  v30[4] = 4;
  if ((_DWORD)v14)
  {
    if ((_DWORD)v14 != 1)
    {
      result = memcpy(v30 + 5, v29, v14);
      v35 = &v34[v14];
      v36 = v33;
      v37 = v32;
      v27 = v31;
      v38 = __n;
      if (!(_DWORD)v15)
        goto LABEL_43;
      goto LABEL_41;
    }
    *v34 = *v29;
  }
  v35 = &v34[v14];
  v36 = v33;
  v37 = v32;
  v27 = v31;
  v38 = __n;
  if (!(_DWORD)v15)
  {
LABEL_43:
    v40 = &v35[v15];
    if (!(_DWORD)v16)
      goto LABEL_48;
    goto LABEL_46;
  }
LABEL_41:
  if ((_DWORD)v15 == 1)
  {
    *v35 = *a5;
    goto LABEL_43;
  }
  result = memcpy(v35, a5, v15);
  v40 = &v35[v15];
  if (!(_DWORD)v16)
    goto LABEL_48;
LABEL_46:
  if ((_DWORD)v16 != 1)
  {
    result = memcpy(v40, a7, v16);
    v41 = &v40[v16];
    if (!(_DWORD)v17)
      goto LABEL_53;
    goto LABEL_51;
  }
  *v40 = *a7;
LABEL_48:
  v41 = &v40[v16];
  if (!(_DWORD)v17)
  {
LABEL_53:
    v42 = &v41[v17];
    if (!(_DWORD)v38)
      goto LABEL_58;
    goto LABEL_56;
  }
LABEL_51:
  if ((_DWORD)v17 == 1)
  {
    *v41 = *a9;
    goto LABEL_53;
  }
  result = memcpy(v41, a9, v17);
  v42 = &v41[v17];
  if (!(_DWORD)v38)
    goto LABEL_58;
LABEL_56:
  if ((_DWORD)v38 != 1)
  {
    result = memcpy(v42, a11, v38);
    if (!(_DWORD)v37)
      goto LABEL_63;
    goto LABEL_61;
  }
  *v42 = *a11;
LABEL_58:
  if (!(_DWORD)v37)
  {
LABEL_63:
    v50 = v30;
    v51 = *v36;
    v39 = v27[17];
    if ((_DWORD)v39 == v27[16])
      goto LABEL_64;
LABEL_68:
    v46 = *((_QWORD *)v27 + 7) + 24 * v39;
    *(_QWORD *)v46 = v30;
    *(_OWORD *)(v46 + 8) = v51;
    ++v27[17];
    return result;
  }
LABEL_61:
  result = &v42[v38];
  if ((_DWORD)v37 == 1)
  {
    *result = *a13;
    goto LABEL_63;
  }
  result = memcpy(result, a13, v37);
  v50 = v30;
  v51 = *v36;
  v39 = v27[17];
  if ((_DWORD)v39 != v27[16])
    goto LABEL_68;
LABEL_64:
  v43 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v27 + 14), v39 + 1, (unint64_t)&v50);
  v44 = *((_QWORD *)v27 + 7) + 24 * v27[17];
  v45 = *(_QWORD *)v43;
  *(_QWORD *)v43 = 0;
  *(_QWORD *)v44 = v45;
  *(_OWORD *)(v44 + 8) = *(_OWORD *)(v43 + 8);
  result = v50;
  ++v27[17];
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (_BYTE *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>(_DWORD *result, __int128 *a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6, _BYTE *a7, uint64_t a8, _BYTE *a9, uint64_t a10, char a11)
{
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  _DWORD *v21;
  _BYTE *v25;
  _DWORD *v26;
  __int128 *v27;
  _BYTE *v28;
  _BYTE *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  char v34;
  _BYTE *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *__src;
  _DWORD *v40;
  __int128 v41;

  if (a4)
    v11 = a4 - 1;
  else
    v11 = 0;
  if (v11 >> 31)
    goto LABEL_55;
  if (a6)
    v12 = a6 - 1;
  else
    v12 = 0;
  if (v12 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248E310);
  }
  if (a8)
    v13 = a8 - 1;
  else
    v13 = 0;
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248E330);
  }
  if (a10)
    v14 = a10 - 1;
  else
    v14 = 0;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248E350);
  }
  v15 = v14 + 1;
  if (__OFADD__((_DWORD)v14, 1))
    goto LABEL_55;
  v16 = __OFADD__((_DWORD)v13, v15);
  v17 = v13 + v15;
  if (v16)
    goto LABEL_55;
  v16 = __OFADD__((_DWORD)v12, v17);
  v18 = v12 + v17;
  if (v16)
    goto LABEL_55;
  v19 = (v11 + v18);
  if (__OFADD__((_DWORD)v11, v18))
    goto LABEL_55;
  v21 = result;
  if (!(_DWORD)v19)
  {
    v26 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v40 = v26;
    v41 = *a2;
    v31 = result[17];
    if ((_DWORD)v31 == result[16])
      goto LABEL_46;
LABEL_30:
    v32 = *((_QWORD *)v21 + 7) + 24 * v31;
    *(_QWORD *)v32 = v26;
    *(_OWORD *)(v32 + 8) = v41;
    ++v21[17];
    return result;
  }
  if ((v19 & 0x80000000) != 0
    || (result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v19 + 20)), v25 = a3, (v26 = v40) == 0))
  {
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x18248E2F0);
  }
  __src = a7;
  v27 = a2;
  v28 = v40 + 5;
  *v40 = 2;
  v26[1] = v19;
  *((_QWORD *)v26 + 1) = v26 + 5;
  v26[4] = 4;
  if (!(_DWORD)v11)
  {
LABEL_27:
    v29 = &v28[v11];
    v30 = v27;
    if (!(_DWORD)v12)
      goto LABEL_34;
    goto LABEL_32;
  }
  if ((_DWORD)v11 == 1)
  {
    *v28 = *v25;
    goto LABEL_27;
  }
  result = memcpy(v26 + 5, v25, v11);
  v29 = &v28[v11];
  v30 = v27;
  if (!(_DWORD)v12)
    goto LABEL_34;
LABEL_32:
  if ((_DWORD)v12 != 1)
  {
    result = memcpy(v29, a5, v12);
    v33 = &v29[v12];
    if (!(_DWORD)v13)
      goto LABEL_39;
    goto LABEL_37;
  }
  *v29 = *a5;
LABEL_34:
  v33 = &v29[v12];
  if (!(_DWORD)v13)
  {
LABEL_39:
    v34 = a11;
    v35 = &v33[v13];
    if (!(_DWORD)v14)
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_37:
  if ((_DWORD)v13 == 1)
  {
    *v33 = *__src;
    goto LABEL_39;
  }
  result = memcpy(v33, __src, v13);
  v34 = a11;
  v35 = &v33[v13];
  if (!(_DWORD)v14)
    goto LABEL_45;
LABEL_42:
  if ((_DWORD)v14 == 1)
    *v35 = *a9;
  else
    result = memcpy(v35, a9, v14);
LABEL_45:
  v35[v14] = v34;
  v40 = v26;
  v41 = *v30;
  v31 = v21[17];
  if ((_DWORD)v31 != v21[16])
    goto LABEL_30;
LABEL_46:
  v36 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v21 + 14), v31 + 1, (unint64_t)&v40);
  v37 = *((_QWORD *)v21 + 7) + 24 * v21[17];
  v38 = *(_QWORD *)v36;
  *(_QWORD *)v36 = 0;
  *(_QWORD *)v37 = v38;
  *(_OWORD *)(v37 + 8) = *(_OWORD *)(v36 + 8);
  result = v40;
  ++v21[17];
  v40 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_DWORD *WGSL::AttributeValidator::error<WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, __int128 *a2, _DWORD *a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v11;
  char v12;
  _DWORD *result;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  __int128 v23;
  char v24;
  _BYTE v25[48];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v25[0] = 0;
  v26 = -1;
  v11 = *(unsigned int *)(a5 + 48);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD2B70[v11])(&v22, v25, a5);
    v26 = v11;
  }
  v12 = *a6;
  v22 = a3;
  *(_QWORD *)&v23 = a4;
  v24 = v12;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,char>((uint64_t)&v22, (uint64_t)v25, &v24, &v21);
  v14 = v21;
  if (!v21)
  {
    __break(0xC471u);
    return result;
  }
  v21 = 0;
  v22 = v14;
  v23 = *a2;
  v15 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 64))
  {
    v20 = *(_QWORD *)(a1 + 56) + 24 * v15;
    *(_QWORD *)v20 = v14;
    *(_OWORD *)(v20 + 8) = v23;
    ++*(_DWORD *)(a1 + 68);
    v22 = 0;
LABEL_10:
    result = v21;
    v21 = 0;
    if (!result)
      goto LABEL_14;
    goto LABEL_11;
  }
  v16 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v15 + 1, (unint64_t)&v22);
  v17 = *(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 68);
  v18 = *(_QWORD *)v16;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)v17 = v18;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
  v19 = v22;
  ++*(_DWORD *)(a1 + 68);
  v22 = 0;
  if (!v19)
    goto LABEL_10;
  if (*v19 != 2)
  {
    *v19 -= 2;
    result = v21;
    v21 = 0;
    if (!result)
      goto LABEL_14;
LABEL_11:
    if (*result == 2)
      result = (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy();
  result = v21;
  v21 = 0;
  if (result)
    goto LABEL_11;
LABEL_14:
  if (v26 != -1)
    return (_DWORD *)((uint64_t (*)(char *, _BYTE *))off_1E0FD2AF8[v26])(&v24, v25);
  return result;
}

char *WGSL::AttributeValidator::error<WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral>(char *result, __int128 *a2, _BYTE *a3, uint64_t a4, unsigned int a5, _BYTE *a6, uint64_t a7)
{
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v11;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  _DWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  _DWORD *v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a4)
    v7 = a4 - 1;
  else
    v7 = 0;
  if (v7 >> 31)
    goto LABEL_47;
  if (a7)
    v8 = a7 - 1;
  else
    v8 = 0;
  v9 = v8 >> 31;
  if (v8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248E8CCLL);
  }
  v11 = a5;
  v14 = result;
  v15 = (uint64_t)(result + 56);
  v16 = a5;
  do
  {
    LODWORD(v9) = v9 + 1;
    v17 = v16 > 9;
    v16 /= 0xAu;
  }
  while (v17);
  if (((v9 | v8) & 0x80000000) != 0)
    goto LABEL_47;
  v18 = __OFADD__((_DWORD)v9, (_DWORD)v8);
  v19 = v9 + v8;
  v20 = v18;
  if ((v7 & 0x80000000) != 0)
    goto LABEL_47;
  if (v20)
    goto LABEL_47;
  v21 = (v7 + v19);
  if (__OFADD__((_DWORD)v7, v19))
    goto LABEL_47;
  if (!(_DWORD)v21)
  {
    v22 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v36 = v22;
    v37 = *a2;
    v26 = *((unsigned int *)result + 17);
    if ((_DWORD)v26 == *((_DWORD *)result + 16))
      goto LABEL_40;
LABEL_38:
    v31 = *((_QWORD *)v14 + 7) + 24 * v26;
    *(_QWORD *)v31 = v22;
    *(_OWORD *)(v31 + 8) = v37;
    ++*((_DWORD *)v14 + 17);
    return result;
  }
  if ((v21 & 0x80000000) != 0 || (result = (char *)WTF::tryFastCompactMalloc((WTF *)(v21 + 20)), (v22 = v36) == 0))
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x18248E8ACLL);
  }
  v35 = a2;
  v23 = a6;
  v24 = v15;
  v25 = v36 + 5;
  *v36 = 2;
  v22[1] = v21;
  *((_QWORD *)v22 + 1) = v22 + 5;
  v22[4] = 4;
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 == 1)
      *v25 = *a3;
    else
      result = (char *)memcpy(v22 + 5, a3, v7);
  }
  v27 = 0;
  v28 = v11;
  do
  {
    *((_BYTE *)&v37 + v27-- + 4) = (v28 % 0xA) | 0x30;
    v17 = v28 > 9;
    v28 /= 0xAu;
  }
  while (v17);
  v29 = &v25[v7];
  if (v27 + 14 <= 13)
    result = (char *)memcpy(v29, (char *)&v37 + v27 + 5, -v27);
  v30 = 0;
  v15 = v24;
  do
  {
    ++v30;
    v17 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v17);
  if (!(_DWORD)v8)
  {
    v36 = v22;
    v37 = *v35;
    v26 = *((unsigned int *)v14 + 17);
    if ((_DWORD)v26 == *((_DWORD *)v14 + 16))
      goto LABEL_40;
    goto LABEL_38;
  }
  result = &v29[v30];
  if ((_DWORD)v8 != 1)
  {
    result = (char *)memcpy(result, v23, v8);
    v36 = v22;
    v37 = *v35;
    v26 = *((unsigned int *)v14 + 17);
    if ((_DWORD)v26 == *((_DWORD *)v14 + 16))
      goto LABEL_40;
    goto LABEL_38;
  }
  *result = *v23;
  v36 = v22;
  v37 = *v35;
  v26 = *((unsigned int *)v14 + 17);
  if ((_DWORD)v26 != *((_DWORD *)v14 + 16))
    goto LABEL_38;
LABEL_40:
  v32 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v26 + 1, (unint64_t)&v36);
  v33 = *((_QWORD *)v14 + 7) + 24 * *((unsigned int *)v14 + 17);
  v34 = *(_QWORD *)v32;
  *(_QWORD *)v32 = 0;
  *(_QWORD *)v33 = v34;
  *(_OWORD *)(v33 + 8) = *(_OWORD *)(v32 + 8);
  result = (char *)v36;
  ++*((_DWORD *)v14 + 17);
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (char *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WGSL::validateAttributes@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  WTF *v14;
  int v15;
  void (**v16)(WGSL::AST::Visitor *__hidden);
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  char v23;

  v3 = result;
  LOBYTE(v17) = 0;
  v18 = 0;
  v16 = &off_1E0FD2810;
  v19 = 0;
  v20 = result;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v5 = *(unsigned int *)(result + 92);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(uint64_t **)(result + 80);
    v8 = 8 * v5;
    do
    {
      if (!v6)
        result = ((uint64_t (*)(_BYTE *, uint64_t))v16[3])(&v16, *v7);
      ++v7;
      v6 = v18;
      v8 -= 8;
    }
    while (v8);
    v9 = v18 == 0;
    v10 = *(unsigned int *)(v3 + 76);
    if (!(_DWORD)v10)
      goto LABEL_15;
  }
  else
  {
    v9 = 1;
    v10 = *(unsigned int *)(result + 76);
    if (!(_DWORD)v10)
      goto LABEL_15;
  }
  if (v9)
  {
    v11 = *(uint64_t **)(v3 + 64);
    v12 = 8 * v10 - 8;
LABEL_11:
    result = ((uint64_t (*)(_BYTE *, uint64_t))v16[5])(&v16, *v11);
    while (v12)
    {
      ++v11;
      v12 -= 8;
      if (!v18)
        goto LABEL_11;
    }
  }
LABEL_15:
  v13 = HIDWORD(v22);
  if (HIDWORD(v22))
  {
    v14 = v21;
    v15 = v22;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)a3 = v14;
    *(_DWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 12) = v13;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    v16 = &off_1E0FD2810;
    result = (uint64_t)v21;
    if (v21)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v16 = &off_1E0FD25C8;
  if (v18)
  {
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy();
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WGSL::AttributeValidator::~AttributeValidator(WGSL::AttributeValidator *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;

  *(_QWORD *)this = &off_1E0FD2810;
  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 7);
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v8 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      if (*v8 == 2)
        WTF::StringImpl::destroy();
      else
        *v8 -= 2;
    }
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;

  *(_QWORD *)this = &off_1E0FD2810;
  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 7);
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v8 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      if (*v8 == 2)
        WTF::StringImpl::destroy();
      else
        *v8 -= 2;
    }
  }
  JUMPOUT(0x186DAB2A8);
}

WTF *WGSL::validateIO@<X0>(WGSL *this@<X0>, WGSL::ShaderModule *a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *result;
  void (**v8)(WGSL::AST::Visitor *__hidden);
  WTF *v9;
  char v10;
  uint64_t v11;
  WGSL *v12;
  WTF *v13;
  uint64_t v14;
  char v15;

  LOBYTE(v9) = 0;
  v10 = 0;
  v8 = &off_1E0FD2810;
  v11 = 0;
  v12 = this;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  WGSL::AttributeValidator::validateIO(&v8, a2, a3);
  v8 = &off_1E0FD2810;
  if (HIDWORD(v14))
  {
    v4 = v13;
    v5 = 24 * HIDWORD(v14);
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  result = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    result = (WTF *)WTF::fastFree(result, v3);
  }
  v8 = &off_1E0FD25C8;
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy();
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  _DWORD *v11;
  _DWORD *v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0xAAAAAAB)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v3 + 24 * v4);
      v10 = v3;
      do
      {
        v11 = *(_DWORD **)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)v8 = v11;
        *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)v10 + 8);
        v12 = *(_DWORD **)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          if (*v12 == 2)
            WTF::StringImpl::destroy();
          else
            *v12 -= 2;
        }
        v10 = (WTF *)((char *)v10 + 24);
        v8 += 24;
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v2 = a2[1];
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (_DWORD **)a2[1];
      do
      {
        v5 = *v4;
        if (*v4 != (_DWORD *)-1)
        {
          *v4 = 0;
          if (v5)
          {
            if (*v5 == 2)
              WTF::StringImpl::destroy();
            else
              *v5 -= 2;
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  _DWORD *result;

  v3 = (WTF *)a2[2];
  a2[2] = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  result = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 40);
  if (result == a2 + 16)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Type const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(a2 + 1, a3 + 1);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  _DWORD *result;
  _QWORD *v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  __int128 v17;
  uint64_t v18;

  v4 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v4 += 2;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
  v5 = *(unsigned int **)(a3 + 16);
  if (v5)
  {
    v6 = v5 + 2;
    v7 = *v5;
    result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v7 + 8));
    *result = v7;
    if ((_DWORD)v7)
    {
      v9 = result + 2;
      v10 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v10 < 7)
      {
        v11 = v5 + 2;
      }
      else
      {
        v11 = v5 + 2;
        if ((unint64_t)((char *)result - (char *)v5) >= 0x20)
        {
          v12 = 0;
          v13 = v10 + 1;
          v14 = 2 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
          v9 = (_QWORD *)((char *)v9 + v14 * 4);
          v11 = &v6[v14];
          v15 = v13 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v16 = &result[v12];
            v17 = *(_OWORD *)&v5[v12 + 6];
            *(_OWORD *)(v16 + 2) = *(_OWORD *)&v5[v12 + 2];
            *(_OWORD *)(v16 + 6) = v17;
            v12 += 8;
            v15 -= 4;
          }
          while (v15);
          if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_10;
        }
      }
      do
      {
        v18 = *(_QWORD *)v11;
        v11 += 2;
        *v9++ = v18;
      }
      while (v11 != &v6[2 * v7]);
    }
LABEL_10:
    *(_QWORD *)(a2 + 16) = result;
    return result;
  }
  result = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v5 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if (!(_DWORD)v5)
    goto LABEL_4;
  if (!(v5 >> 29))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
    memcpy(v6, *(const void **)a3, 8 * *(unsigned int *)(a3 + 12));
LABEL_4:
    v7 = *(_QWORD *)(a3 + 16);
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(a3 + 24);
    *(_QWORD *)(a2 + 16) = v7;
    return;
  }
  __break(0xC471u);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, __int16 *a3)
{
  __int16 v3;

  v3 = *a3;
  *(_BYTE *)(a2 + 2) = *((_BYTE *)a3 + 2);
  *(_WORD *)a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  result = *(_QWORD *)(a3 + 40);
  if (result)
  {
    if (result == a3 + 16)
    {
      *(_QWORD *)(a2 + 40) = a2 + 16;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 40) + 24))(*(_QWORD *)(a3 + 40));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 40) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 40) = 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Type const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400)
      goto LABEL_8;
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3)
LABEL_11:
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * v8 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v10 = (_QWORD *)*a2;
  if (*a2)
  {
    v11 = *((unsigned int *)v10 - 1);
    v12 = (WTF::StringImpl **)&v10[2 * v11];
    if (!*((_DWORD *)v10 - 3))
    {
      v13 = (WTF::StringImpl **)&v10[2 * v11];
      v12 = v13;
      if (!v10)
        goto LABEL_28;
      goto LABEL_25;
    }
    v13 = (WTF::StringImpl **)v10;
    if ((_DWORD)v11)
    {
      v14 = 16 * v11;
      v13 = (WTF::StringImpl **)v10;
      do
      {
        if ((unint64_t)*v13 + 1 > 1)
          goto LABEL_24;
        v13 += 2;
        v14 -= 16;
      }
      while (v14);
      v13 = v12;
      if (!v10)
      {
LABEL_28:
        v15 = 0;
        if (!v13)
          return a1;
        while (1)
        {
LABEL_31:
          v17 = *a1;
          if (*a1)
          {
            v18 = *(_DWORD *)(v17 - 8);
            v19 = *v13;
            v20 = *((_DWORD *)*v13 + 4);
            if (v20 >= 0x100)
              goto LABEL_33;
          }
          else
          {
            v18 = 0;
            v19 = *v13;
            v20 = *((_DWORD *)*v13 + 4);
            if (v20 >= 0x100)
            {
LABEL_33:
              v21 = v20 >> 8;
              goto LABEL_36;
            }
          }
          v21 = WTF::StringImpl::hashSlowCase(v19);
LABEL_36:
          v22 = 0;
          do
          {
            v23 = v21 & v18;
            v21 = ++v22 + v23;
          }
          while (*(_QWORD *)(v17 + 16 * v23));
          v24 = *v13;
          if (*v13)
            *(_DWORD *)v24 += 2;
          v25 = (WTF::StringImpl **)(v17 + 16 * v23);
          *v25 = v24;
          v25[1] = v13[1];
          v26 = v13 + 2;
          v13 = v12;
          if (v26 != v12)
          {
            v13 = v26;
            while ((unint64_t)*v13 + 1 <= 1)
            {
              v13 += 2;
              if (v13 == v12)
              {
                v13 = v12;
                break;
              }
            }
          }
          if (v13 == v15)
            return a1;
        }
      }
      goto LABEL_25;
    }
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
LABEL_24:
  if (!v10)
    goto LABEL_28;
LABEL_25:
  v15 = (WTF::StringImpl **)&v10[2 * *((unsigned int *)v10 - 1)];
  if (v15 != v13)
    goto LABEL_31;
  return a1;
}

uint64_t WTF::HashTable<WGSL::Builtin,WGSL::Builtin,WTF::IdentityExtractor,WTF::IntHash<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  size_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t i;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = a2;
    result = WTF::fastMalloc((WTF *)(a2 + 16));
    v10 = result;
    v11 = (void *)(result + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  v6 = 0;
  v7 = a2;
  result = WTF::fastMalloc((WTF *)(a2 + 16));
  v10 = result;
  v11 = (void *)(result + 16);
  if (a2)
LABEL_3:
    result = (uint64_t)memset(v11, 255, v7);
LABEL_4:
  *a1 = (uint64_t)v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v13 = *(unsigned __int8 *)(v4 + i);
      if (v13 <= 0xFD)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = 0;
        v17 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
        v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
        do
        {
          result = v18 & v15;
          v9 = (void *)*(unsigned __int8 *)(v14 + result);
          v18 = ++v16 + result;
        }
        while ((_DWORD)v9 != 255);
        *(_BYTE *)(v14 + result) = v13;
      }
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v9);
  return result;
}

_DWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  _BYTE *v13;
  size_t v14;
  _BYTE *v15;
  size_t v16;
  _BYTE *v17;
  size_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;

  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 8);
  v7 = 0;
  if (((v6 | v5) & 0x80000000) == 0)
  {
    v8 = result[2];
    v9 = __OFADD__(v5, v6);
    v10 = v5 + v6;
    v11 = v9;
    if ((v8 & 0x80000000) == 0 && !v11)
    {
      v12 = (v8 + v10);
      if (__OFADD__(v8, v10))
        goto LABEL_9;
      if (!(_DWORD)v12)
      {
        v7 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_17;
      }
      if ((v12 & 0x80000000) != 0)
      {
LABEL_9:
        v7 = 0;
      }
      else
      {
        v13 = *(_BYTE **)result;
        v14 = result[2];
        v15 = *(_BYTE **)a2;
        v16 = *(unsigned int *)(a2 + 8);
        v17 = *(_BYTE **)a3;
        v18 = *(unsigned int *)(a3 + 8);
        result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v12 + 20));
        v7 = v21;
        if (v21)
        {
          v19 = (_BYTE *)(v21 + 20);
          *(_DWORD *)v21 = 2;
          *(_DWORD *)(v21 + 4) = v12;
          *(_QWORD *)(v21 + 8) = v21 + 20;
          *(_DWORD *)(v21 + 16) = 4;
          if ((_DWORD)v14)
          {
            if ((_DWORD)v14 == 1)
              *v19 = *v13;
            else
              result = memcpy((void *)(v21 + 20), v13, v14);
          }
          v20 = &v19[v14];
          if ((_DWORD)v16)
          {
            if ((_DWORD)v16 == 1)
              *v20 = *v15;
            else
              result = memcpy(v20, v15, v16);
          }
          if ((_DWORD)v18)
          {
            result = &v20[v16];
            if ((_DWORD)v18 == 1)
              *(_BYTE *)result = *v17;
            else
              result = memcpy(result, v17, v18);
          }
        }
      }
    }
  }
LABEL_17:
  *a4 = v7;
  return result;
}

uint64_t *WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  int8x16_t *v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t *result;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  _BOOL8 v20;
  int v21;
  int8x16_t *v22;
  unsigned int v23;
  uint64_t *v24;
  char v25;
  _QWORD *v26;
  uint64_t v27[15];
  uint64_t *v28;
  _QWORD v29[21];

  v29[20] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 != 0;
  v7 = v5 - 1;
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  if (v8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18248FA0CLL);
  }
  v11 = *(int8x16_t **)a1;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v29);
  v27[0] = (uint64_t)v29;
  v27[1] = (uint64_t)v29;
  v27[2] = (uint64_t)v29;
  v27[3] = (uint64_t)v29;
  v27[4] = (uint64_t)v29;
  v27[5] = (uint64_t)v29;
  v27[6] = (uint64_t)v29;
  v27[7] = (uint64_t)v29;
  v27[8] = (uint64_t)v29;
  v27[9] = (uint64_t)v29;
  v27[10] = (uint64_t)v29;
  v27[11] = (uint64_t)v29;
  v27[12] = (uint64_t)v29;
  v27[13] = (uint64_t)v29;
  v27[14] = (uint64_t)v29;
  v12 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v12 == -1)
  {
    v20 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v20, v21, v22, v23, v24, v25, v26);
  }
  v28 = v27;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v28, a2);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)v29);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v29);
  v14 = *a3;
  result = v28;
  if (v28)
  {
    v16 = *((_DWORD *)v28 + 1);
    if (v16 < 0 || (v13 = __OFADD__(v16, 1), v17 = v16 + 1, v13))
    {
LABEL_14:
      *a4 = 0;
      v28 = 0;
      if (!result)
        return result;
      goto LABEL_25;
    }
  }
  else
  {
    v17 = 1;
    if (v13)
      goto LABEL_14;
  }
  if (__OFADD__((_DWORD)v8, v17))
    goto LABEL_14;
  if (v28)
  {
    v18 = (*((_DWORD *)v28 + 4) >> 2) & 1;
    *(_DWORD *)v28 += 2;
  }
  else
  {
    v18 = 1;
  }
  v27[0] = (uint64_t)result;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>((v8 + v17), v18, v11, v8, v27, v14, v29);
  *a4 = v29[0];
  v29[0] = 0;
  v19 = (_DWORD *)v27[0];
  v27[0] = 0;
  if (v19)
  {
    if (*v19 == 2)
    {
      WTF::StringImpl::destroy();
      result = v28;
      v28 = 0;
      if (!result)
        return result;
      goto LABEL_25;
    }
    *v19 -= 2;
  }
  result = v28;
  v28 = 0;
  if (!result)
    return result;
LABEL_25:
  if (*(_DWORD *)result == 2)
    return (uint64_t *)WTF::StringImpl::destroy();
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  _WORD *v17;
  unint64_t v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  int8x16_t *v31;
  __int16 v32;
  uint64_t v33;
  int8x16_t *v34;
  _WORD *v35;
  unint64_t v36;
  __int128 v37;
  char *v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  size_t v46;
  int8x16_t *v47;
  _BYTE *v48;
  unint64_t v49;
  unsigned __int128 *v50;
  unsigned __int128 v51;
  int v52;
  size_t v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  _BYTE *v57;
  int8x16_t *v58;
  char v59;
  unint64_t v60;
  _WORD *v61;
  int8x16_t *v62;
  __int16 v63;
  int v64;
  uint8x8_t *v65;
  uint16x8_t *v66;
  unint64_t v67;
  uint8x16_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint8x8_t *v71;
  uint16x8_t *v72;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;
  unint64_t v76;
  int8x16_t *v77;
  int8x16_t *v78;
  unint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t *v84;
  int8x8_t *v85;
  unint64_t v86;
  int16x8_t v87;
  uint8x8_t *v88;
  uint16x8_t *v89;
  unint64_t v90;
  uint8x16_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint8x8_t *v94;
  uint16x8_t *v95;
  unint64_t v96;
  uint8x8_t v97;
  uint64_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;

  v11 = result;
  if (!a2)
  {
    if (!(_DWORD)result)
      goto LABEL_13;
    if (result > 0x7FFFFFEF)
      goto LABEL_12;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    v13 = v98;
    if (!v98)
      goto LABEL_82;
    v16 = v98 + 20;
    *(_DWORD *)v98 = 2;
    *(_DWORD *)(v98 + 4) = v11;
    *(_QWORD *)(v98 + 8) = v98 + 20;
    *(_DWORD *)(v98 + 16) = 0;
    v15 = *a5;
    if (v15)
      *(_DWORD *)v15 += 2;
    v17 = (_WORD *)(v16 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v18 = v16 + 2 * (a4 & 0xFFFFFFC0);
      v19 = 0uLL;
      do
      {
        v99.val[0] = *a3;
        v20 = a3[1];
        v101.val[0] = a3[2];
        v21 = a3[3];
        a3 += 4;
        v22 = v21;
        v101.val[1] = 0uLL;
        v103.val[0] = v20;
        v99.val[1] = 0uLL;
        v23 = (char *)v16;
        vst2q_s8(v23, v99);
        v23 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v23, v103);
        v24 = (char *)(v16 + 64);
        vst2q_s8(v24, v101);
        v25 = (char *)(v16 + 96);
        vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
        v16 += 128;
      }
      while (v16 != v18);
      v16 = v18;
    }
    if ((_WORD *)v16 != v17)
    {
      v26 = v98 + 2 * a4 - v16 + 18;
      if (v26 < 0xE
        || (v16 < (unint64_t)a3->u64 + (v26 >> 1) + 1
          ? (v27 = (unint64_t)a3 >= (v26 & 0xFFFFFFFFFFFFFFFELL) + v16 + 2)
          : (v27 = 1),
            !v27))
      {
        v30 = (_WORD *)v16;
        v31 = a3;
        goto LABEL_31;
      }
      v28 = (v26 >> 1) + 1;
      if (v26 >= 0x3E)
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFE0;
        v65 = (uint8x8_t *)&a3[1];
        v66 = (uint16x8_t *)(v16 + 32);
        v67 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v68 = *(uint8x16_t *)v65[-2].i8;
          v69 = vmovl_u8(*v65);
          v70 = vmovl_high_u8(*(uint8x16_t *)v65->i8);
          v66[-2] = vmovl_u8(*(uint8x8_t *)v68.i8);
          v66[-1] = vmovl_high_u8(v68);
          *v66 = v69;
          v66[1] = v70;
          v66 += 4;
          v65 += 4;
          v67 -= 32;
        }
        while (v67);
        if (v28 == v29)
          goto LABEL_32;
        if ((v28 & 0x18) == 0)
        {
          v31 = (int8x16_t *)((char *)a3 + v29);
          v30 = (_WORD *)(v16 + 2 * v29);
          do
          {
LABEL_31:
            v32 = v31->u8[0];
            v31 = (int8x16_t *)((char *)v31 + 1);
            *v30++ = v32;
          }
          while (v30 != v17);
          goto LABEL_32;
        }
      }
      else
      {
        v29 = 0;
      }
      v30 = (_WORD *)(v16 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
      v31 = (int8x16_t *)((char *)a3 + (v28 & 0xFFFFFFFFFFFFFFF8));
      v71 = (uint8x8_t *)&a3->i8[v29];
      v72 = (uint16x8_t *)(v16 + 2 * v29);
      v73 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v74 = *v71++;
        *v72++ = vmovl_u8(v74);
        v73 += 8;
      }
      while (v73);
      if (v28 != (v28 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_31;
    }
LABEL_32:
    if (!v15)
    {
      *v17 = a6;
      goto LABEL_82;
    }
    v33 = *(unsigned int *)(v15 + 4);
    *(_DWORD *)v15 += 2;
    v34 = *(int8x16_t **)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) == 0)
    {
      if (!(_DWORD)v33)
        goto LABEL_79;
      if ((_DWORD)v33 == 1)
      {
        *v17 = v34->i16[0];
        LODWORD(v33) = 1;
        goto LABEL_79;
      }
      result = (uint64_t)memcpy(v17, v34, 2 * v33);
LABEL_78:
      LODWORD(v33) = *(_DWORD *)(v15 + 4);
LABEL_79:
      v17[v33] = a6;
      v52 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 != 2)
      {
LABEL_75:
        *(_DWORD *)v15 = v52;
        v64 = v52 - 2;
        if (v64)
        {
LABEL_76:
          *(_DWORD *)v15 = v64;
          goto LABEL_82;
        }
LABEL_81:
        result = WTF::StringImpl::destroy();
        goto LABEL_82;
      }
LABEL_80:
      result = WTF::StringImpl::destroy();
      v64 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 != 2)
        goto LABEL_76;
      goto LABEL_81;
    }
    v35 = &v17[v33];
    if (v33 < 0x40)
    {
      v36 = (unint64_t)v17;
    }
    else
    {
      v36 = (unint64_t)&v17[v33 & 0xFFFFFFC0];
      v37 = 0uLL;
      v38 = (char *)v17;
      do
      {
        v100.val[0] = *v34;
        v39 = v34[1];
        v102.val[0] = v34[2];
        v40 = v34[3];
        v34 += 4;
        v41 = v40;
        v102.val[1] = 0uLL;
        v104.val[0] = v39;
        v100.val[1] = 0uLL;
        v42 = v38;
        vst2q_s8(v42, v100);
        v42 += 32;
        v104.val[1] = 0uLL;
        vst2q_s8(v42, v104);
        v43 = v38 + 64;
        vst2q_s8(v43, v102);
        v44 = v38 + 96;
        vst2q_s8(v44, *(int8x16x2_t *)(&v37 - 1));
        v38 += 128;
      }
      while (v38 != (char *)v36);
    }
    if ((_WORD *)v36 == v35)
      goto LABEL_78;
    v60 = v98 + 2 * (a4 + v33) - v36 + 18;
    if (v60 < 0xE
      || v36 < (unint64_t)v34->u64 + (v60 >> 1) + 1
      && (unint64_t)v34 < (v60 & 0xFFFFFFFFFFFFFFFELL) + v36 + 2)
    {
      v61 = (_WORD *)v36;
      v62 = v34;
      goto LABEL_71;
    }
    v75 = (v60 >> 1) + 1;
    if (v60 >= 0x3E)
    {
      v76 = v75 & 0xFFFFFFFFFFFFFFE0;
      v88 = (uint8x8_t *)&v34[1];
      v89 = (uint16x8_t *)(v36 + 32);
      v90 = v75 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v91 = *(uint8x16_t *)v88[-2].i8;
        v92 = vmovl_u8(*v88);
        v93 = vmovl_high_u8(*(uint8x16_t *)v88->i8);
        v89[-2] = vmovl_u8(*(uint8x8_t *)v91.i8);
        v89[-1] = vmovl_high_u8(v91);
        *v89 = v92;
        v89[1] = v93;
        v89 += 4;
        v88 += 4;
        v90 -= 32;
      }
      while (v90);
      if (v75 == v76)
        goto LABEL_78;
      if ((v75 & 0x18) == 0)
      {
        v62 = (int8x16_t *)((char *)v34 + v76);
        v61 = (_WORD *)(v36 + 2 * v76);
        do
        {
LABEL_71:
          v63 = v62->u8[0];
          v62 = (int8x16_t *)((char *)v62 + 1);
          *v61++ = v63;
        }
        while (v61 != v35);
        goto LABEL_78;
      }
    }
    else
    {
      v76 = 0;
    }
    v61 = (_WORD *)(v36 + 2 * (v75 & 0xFFFFFFFFFFFFFFF8));
    v62 = (int8x16_t *)((char *)v34 + (v75 & 0xFFFFFFFFFFFFFFF8));
    v94 = (uint8x8_t *)&v34->i8[v76];
    v95 = (uint16x8_t *)(v36 + 2 * v76);
    v96 = v76 - (v75 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v97 = *v94++;
      *v95++ = vmovl_u8(v97);
      v96 += 8;
    }
    while (v96);
    if (v75 == (v75 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_78;
    goto LABEL_71;
  }
  if (!(_DWORD)result)
  {
LABEL_13:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_82;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_12:
    v13 = 0;
    goto LABEL_82;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v13 = v98;
  if (v98)
  {
    v14 = (_BYTE *)(v98 + 20);
    *(_DWORD *)v98 = 2;
    *(_DWORD *)(v98 + 4) = v11;
    *(_QWORD *)(v98 + 8) = v98 + 20;
    *(_DWORD *)(v98 + 16) = 4;
    v15 = *a5;
    if (v15)
      *(_DWORD *)v15 += 2;
    if (a4)
    {
      if (a4 == 1)
        *v14 = a3->i8[0];
      else
        result = (uint64_t)memcpy((void *)(v98 + 20), a3, a4);
    }
    v45 = &v14[a4];
    if (!v15)
    {
      *v45 = a6;
      goto LABEL_82;
    }
    v46 = *(unsigned int *)(v15 + 4);
    *(_DWORD *)v15 += 2;
    v47 = *(int8x16_t **)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      if ((_DWORD)v46)
      {
        if ((_DWORD)v46 == 1)
        {
          *v45 = v47->i8[0];
          v45[*(unsigned int *)(v15 + 4)] = a6;
          v52 = *(_DWORD *)v15 - 2;
          if (*(_DWORD *)v15 != 2)
            goto LABEL_75;
          goto LABEL_80;
        }
        result = (uint64_t)memcpy(&v14[a4], v47, v46);
      }
      goto LABEL_74;
    }
    v48 = &v45[v46];
    if (v46 < 0x10)
    {
      v49 = (unint64_t)&v14[a4];
    }
    else
    {
      v49 = (unint64_t)&v45[v46 & 0xFFFFFFF0];
      v50 = (unsigned __int128 *)&v14[a4];
      do
      {
        v51 = (unsigned __int128)vld2q_s8(v47->i8);
        v47 += 2;
        *v50++ = v51;
      }
      while (v50 != (unsigned __int128 *)v49);
    }
    if ((_BYTE *)v49 != v48)
    {
      v53 = v98 + v46 + a4;
      v54 = v53 - v49 + 20;
      if (v54 < 8
        || (v49 < (unint64_t)&v47[2].u64[1] + 2 * v53 + -2 * v49
          ? (v55 = (unint64_t)v47 >= v53 + 20)
          : (v55 = 1),
            !v55))
      {
        v57 = (_BYTE *)v49;
        v58 = v47;
        goto LABEL_63;
      }
      if (v54 >= 0x20)
      {
        v56 = v54 & 0xFFFFFFFFFFFFFFE0;
        v77 = v47 + 2;
        v78 = (int8x16_t *)(v49 + 16);
        v79 = v54 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v81 = v77[-2];
          v80 = v77[-1];
          v83 = *v77;
          v82 = v77[1];
          v77 += 4;
          v78[-1] = vuzp1q_s8(v81, v80);
          *v78 = vuzp1q_s8(v83, v82);
          v78 += 2;
          v79 -= 32;
        }
        while (v79);
        if (v54 == v56)
          goto LABEL_74;
        if ((v54 & 0x18) == 0)
        {
          v58 = (int8x16_t *)((char *)v47 + 2 * v56);
          v57 = (_BYTE *)(v49 + v56);
          do
          {
LABEL_63:
            v59 = v58->i8[0];
            v58 = (int8x16_t *)((char *)v58 + 2);
            *v57++ = v59;
          }
          while (v57 != v48);
          goto LABEL_74;
        }
      }
      else
      {
        v56 = 0;
      }
      v57 = (_BYTE *)(v49 + (v54 & 0xFFFFFFFFFFFFFFF8));
      v58 = (int8x16_t *)((char *)v47 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
      v84 = (int16x8_t *)((char *)v47 + 2 * v56);
      v85 = (int8x8_t *)(v49 + v56);
      v86 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v87 = *v84++;
        *v85++ = vmovn_s16(v87);
        v86 += 8;
      }
      while (v86);
      if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_63;
    }
LABEL_74:
    v45[*(unsigned int *)(v15 + 4)] = a6;
    v52 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 != 2)
      goto LABEL_75;
    goto LABEL_80;
  }
LABEL_82:
  *a7 = v13;
  return result;
}

double WGSL::BoundsCheckVisitor::visit(WGSL::BoundsCheckVisitor *this, WGSL::AST::IndexAccessExpression *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double result;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL8 v16;
  uint64_t v17;
  WGSL::AST::IndexAccessExpression *v18;
  WGSL::BoundsCheckVisitor *v19;
  WGSL::BoundsCheckVisitor *v20;
  __int128 v21;
  WGSL::AST::IndexAccessExpression **v22;
  WGSL::BoundsCheckVisitor *v23;
  WGSL::AST::IndexAccessExpression *v24;
  WGSL::AST::IndexAccessExpression **v25;
  __int128 *v26;

  if (*((_BYTE *)a2 + 56))
    return result;
  if (*((_BYTE *)this + 32)
    || ((*(void (**)(WGSL::BoundsCheckVisitor *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 8)), *((_BYTE *)this + 32)))
  {
    v19 = this;
    v20 = this;
    v18 = a2;
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 24);
    if (!v4)
      goto LABEL_18;
  }
  else
  {
    (*(void (**)(WGSL::BoundsCheckVisitor *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 9));
    v19 = this;
    v20 = this;
    v18 = a2;
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 24);
    if (!v4)
      goto LABEL_18;
  }
  v5 = *(_DWORD *)(v4 + 48);
  if (v5 == 10)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      goto LABEL_18;
    v5 = *(_DWORD *)(v4 + 48);
  }
  if (v5 != 11)
  {
LABEL_11:
    if (v5 == 2)
    {
      LODWORD(v26) = *(unsigned __int8 *)(v4 + 8);
      v14 = (_QWORD *)(*((_QWORD *)this + 5) + 312);
      v21 = 0uLL;
      v15 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(v14, &v21, (int *)&v26);
      v8 = (uint64_t)v15;
      v15[3] = *(_QWORD *)(*((_QWORD *)this + 5) + 168);
      v9 = (int)v26;
      if (*((_BYTE *)v15 + 56))
      {
        v10 = *((unsigned int *)v15 + 12);
        if ((_DWORD)v10 != -1)
        {
          v11 = v15 + 4;
          if ((_DWORD)v10 == 4)
            goto LABEL_16;
LABEL_24:
          ((void (*)(__int128 *, _DWORD *))off_1E0FD2F78[v10])(&v21, v11);
        }
LABEL_25:
        *(_DWORD *)(v8 + 32) = v9;
        *(_DWORD *)(v8 + 48) = 4;
        goto LABEL_27;
      }
LABEL_26:
      *(_DWORD *)(v8 + 32) = v9;
      *(_DWORD *)(v8 + 48) = 4;
      *(_BYTE *)(v8 + 56) = 1;
      goto LABEL_27;
    }
    if (v5 == 1)
    {
      LODWORD(v26) = *(unsigned __int8 *)(v4 + 8);
      v6 = (_QWORD *)(*((_QWORD *)this + 5) + 312);
      v21 = 0uLL;
      v7 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(v6, &v21, (int *)&v26);
      v8 = (uint64_t)v7;
      v7[3] = *(_QWORD *)(*((_QWORD *)this + 5) + 168);
      v9 = (int)v26;
      if (*((_BYTE *)v7 + 56))
      {
        v10 = *((unsigned int *)v7 + 12);
        if ((_DWORD)v10 != -1)
        {
          v11 = v7 + 4;
          if ((_DWORD)v10 == 4)
          {
LABEL_16:
            *v11 = v9;
LABEL_27:
            *(_QWORD *)&result = WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_4::operator()(&v18, v8).n128_u64[0];
            return result;
          }
          goto LABEL_24;
        }
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    goto LABEL_18;
  }
  v4 = *(_QWORD *)(v4 + 8);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 48);
    goto LABEL_11;
  }
LABEL_18:
  if (*(_DWORD *)(v4 + 48) != 3
    || (v24 = a2,
        v25 = &v18,
        *(_QWORD *)&v21 = &v18,
        *((_QWORD *)&v21 + 1) = &v20,
        v22 = &v18,
        v23 = this,
        v12 = *(unsigned int *)(v4 + 16),
        (_DWORD)v12 == -1))
  {
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    *(_QWORD *)&result = WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_4::operator()((_QWORD *)v16, v17).n128_u64[0];
  }
  else
  {
    v26 = &v21;
    ((void (*)(__int128 **, uint64_t))off_1E0FD3118[v12])(&v26, v4 + 8);
  }
  return result;
}

__n128 WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_4::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  WTF *v13;
  _QWORD *v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  unint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  void (**v45)(WGSL::AST::Expression *__hidden);
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  __n128 *v68;
  int v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  __n128 result;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _BYTE v90[16];
  int v91;
  unsigned __int8 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _BYTE v97[16];
  int v98;
  unsigned __int8 v99;
  __int128 v100;
  _BYTE v101[9];

  v4 = a1[1];
  v5 = *(_QWORD **)(*a1 + 72);
  v6 = *(_QWORD *)(v4 + 40);
  if (v5[3] != *(_QWORD *)(v6 + 168))
  {
    v7 = (_QWORD *)(v6 + 312);
    v87 = 0uLL;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *((_QWORD *)&v94 + 1) = 0;
    *(_QWORD *)&v95 = 0;
    *(_QWORD *)&v94 = &off_1E0FD2F10;
    v8 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v7, &v87, (uint64_t)&v94);
    v9 = (_DWORD *)*((_QWORD *)&v95 + 1);
    *(_QWORD *)&v94 = &off_1E0FD2F10;
    *((_QWORD *)&v95 + 1) = 0;
    if (v9)
    {
      if (*v9 == 2)
        WTF::StringImpl::destroy();
      else
        *v9 -= 2;
    }
    v10 = *(_QWORD *)(v4 + 40);
    v8[3] = *(_QWORD *)(v10 + 120);
    v94 = 0uLL;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    DWORD2(v87) = 1;
    *(_QWORD *)&v87 = v11;
    *v11 = v5;
    HIDWORD(v87) = 1;
    v5 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v10 + 312), &v94, (uint64_t)v8, (uint64_t *)&v87);
    v13 = (WTF *)v87;
    if ((_QWORD)v87)
    {
      *(_QWORD *)&v87 = 0;
      DWORD2(v87) = 0;
      WTF::fastFree(v13, v12);
    }
    v6 = *(_QWORD *)(v4 + 40);
    v5[3] = *(_QWORD *)(v6 + 168);
    *((_BYTE *)v5 + 88) = 1;
  }
  v14 = (_QWORD *)(v6 + 312);
  v87 = 0uLL;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)&v94 + 1) = 0;
  *(_QWORD *)&v95 = 0;
  *(_QWORD *)&v94 = &off_1E0FD2F10;
  v15 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v14, &v87, (uint64_t)&v94);
  v16 = (_DWORD *)*((_QWORD *)&v95 + 1);
  *(_QWORD *)&v94 = &off_1E0FD2F10;
  *((_QWORD *)&v95 + 1) = 0;
  if (v16)
  {
    if (*v16 == 2)
      WTF::StringImpl::destroy();
    else
      *v16 -= 2;
  }
  v17 = *(_QWORD *)(v4 + 40);
  v15[3] = *(_QWORD *)(v17 + 120);
  v94 = 0uLL;
  LODWORD(v87) = 1;
  v18 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>((_QWORD *)(v17 + 312), &v94, (int *)&v87);
  v19 = (uint64_t)v18;
  v20 = *(_QWORD *)(v4 + 40);
  v18[3] = *(_QWORD *)(v20 + 168);
  if (*((_BYTE *)v18 + 56))
  {
    v21 = *((unsigned int *)v18 + 12);
    if ((_DWORD)v21 != -1)
    {
      v22 = v18 + 4;
      if ((_DWORD)v21 == 4)
      {
        *v22 = 1;
        goto LABEL_20;
      }
      ((void (*)(__int128 *, _DWORD *))off_1E0FD2F78[v21])(&v94, v22);
      v20 = *(_QWORD *)(v4 + 40);
    }
    *(_DWORD *)(v19 + 32) = 1;
    *(_DWORD *)(v19 + 48) = 4;
  }
  else
  {
    *((_DWORD *)v18 + 8) = 1;
    *((_DWORD *)v18 + 12) = 4;
    *((_BYTE *)v18 + 56) = 1;
  }
LABEL_20:
  v94 = 0uLL;
  LOBYTE(v87) = 1;
  v23 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>((_QWORD *)(v20 + 312), &v94, a2, v19, (char *)&v87);
  v24 = *(_QWORD *)(v4 + 40);
  v23[3] = *(_QWORD *)(v24 + 168);
  v94 = 0uLL;
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  DWORD2(v87) = 2;
  *(_QWORD *)&v87 = v25;
  *v25 = v5;
  v25[1] = v23;
  HIDWORD(v87) = 2;
  v27 = (unint64_t)WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v24 + 312), &v94, (uint64_t)v15, (uint64_t *)&v87);
  v28 = (WTF *)v87;
  if ((_QWORD)v87)
  {
    *(_QWORD *)&v87 = 0;
    DWORD2(v87) = 0;
    WTF::fastFree(v28, v26);
  }
  *(_QWORD *)(v27 + 24) = v23[3];
  v29 = *(_QWORD *)(v4 + 40);
  v30 = *a1;
  v31 = *(_QWORD *)(*a1 + 64);
  v32 = *(_QWORD *)(v29 + 312);
  if ((unint64_t)(*(_QWORD *)(v29 + 320) - v32) <= 0x4F)
  {
    v75 = WTF::fastMalloc((WTF *)0x4000);
    *(_QWORD *)&v94 = v75;
    v77 = *(unsigned int *)(v29 + 340);
    if ((_DWORD)v77 == *(_DWORD *)(v29 + 336))
    {
      v78 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29 + 328, v77 + 1, (unint64_t)&v94);
      v77 = *(unsigned int *)(v29 + 340);
      v79 = *(_QWORD *)(v29 + 328);
      v80 = *(_QWORD *)v78;
      *(_QWORD *)v78 = 0;
      *(_QWORD *)(v79 + 8 * v77) = v80;
      v81 = (WTF *)v94;
    }
    else
    {
      v82 = v75;
      v81 = 0;
      v83 = *(_QWORD *)(v29 + 328);
      *(_QWORD *)&v94 = 0;
      *(_QWORD *)(v83 + 8 * v77) = v82;
    }
    *(_DWORD *)(v29 + 340) = v77 + 1;
    WTF::fastFree(v81, v76);
    v84 = *(unsigned int *)(v29 + 340);
    if (!(_DWORD)v84)
      goto LABEL_92;
    v32 = *(_QWORD *)(*(_QWORD *)(v29 + 328) + 8 * v84 - 8);
    *(_QWORD *)(v29 + 312) = v32;
    *(_QWORD *)(v29 + 320) = v32 + 0x4000;
  }
  *(_OWORD *)(v32 + 8) = *(_OWORD *)(v30 + 8);
  *(_QWORD *)(v32 + 24) = 0;
  *(_BYTE *)(v32 + 32) = 0;
  *(_BYTE *)(v32 + 56) = 0;
  *(_QWORD *)v32 = off_1E0FD3060;
  *(_QWORD *)(v32 + 64) = v31;
  *(_QWORD *)(v32 + 72) = v27;
  *(_QWORD *)(v29 + 312) += 80;
  v33 = *(unsigned int *)(v29 + 356);
  if ((_DWORD)v33 != *(_DWORD *)(v29 + 352))
  {
    v39 = (_QWORD *)(*(_QWORD *)(v29 + 344) + 8 * v33);
    goto LABEL_37;
  }
  v34 = v33 + (v33 >> 2);
  if (v34 >= 0x10)
    v35 = v34 + 1;
  else
    v35 = 16;
  if (v35 <= v33 + 1)
    v36 = v33 + 1;
  else
    v36 = v35;
  if (v36 >> 29)
  {
LABEL_92:
    __break(0xC471u);
    JUMPOUT(0x182490C5CLL);
  }
  v27 = *(_QWORD *)(v29 + 344);
  v37 = (void *)WTF::fastMalloc((WTF *)(8 * v36));
  *(_DWORD *)(v29 + 352) = v36;
  *(_QWORD *)(v29 + 344) = v37;
  memcpy(v37, (const void *)v27, 8 * v33);
  if (v27)
  {
    if (*(_QWORD *)(v29 + 344) == v27)
    {
      *(_QWORD *)(v29 + 344) = 0;
      *(_DWORD *)(v29 + 352) = 0;
    }
    WTF::fastFree((WTF *)v27, v38);
  }
  v33 = *(unsigned int *)(v29 + 356);
  v39 = (_QWORD *)(*(_QWORD *)(v29 + 344) + 8 * v33);
LABEL_37:
  *v39 = v32;
  *(_DWORD *)(v29 + 356) = v33 + 1;
  v40 = *a1;
  *(_QWORD *)(v32 + 24) = *(_QWORD *)(v40 + 24);
  v41 = *(_QWORD *)(v4 + 40);
  v88 = *(_OWORD *)(v40 + 8);
  *(_QWORD *)&v87 = v40;
  *((_QWORD *)&v87 + 1) = off_1E0FD2EC0;
  v89 = *(_QWORD *)(v40 + 24);
  v90[0] = 0;
  v92 = 0;
  v42 = *(unsigned __int8 *)(v40 + 56);
  if (*(_BYTE *)(v40 + 56))
  {
    v91 = -1;
    v27 = *(unsigned int *)(v40 + 48);
    if ((_DWORD)v27 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD2FD0[v27])(&v94, v90, v40 + 32);
      v91 = v27;
    }
    v92 = 1;
  }
  v43 = (uint64_t *)(v41 + 400);
  *((_QWORD *)&v87 + 1) = off_1E0FD3060;
  v93 = *(_OWORD *)(v40 + 64);
  v44 = *(unsigned int *)(v41 + 412);
  if ((_DWORD)v44 == *(_DWORD *)(v41 + 408))
  {
    v45 = off_1E0FD2EC0;
    v46 = v44 + (v44 >> 2);
    if (v46 >= 0x10)
      v47 = v46 + 1;
    else
      v47 = 16;
    if (v47 <= v44 + 1)
      v48 = v44 + 1;
    else
      v48 = v47;
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v43, v48);
    v49 = *(unsigned int *)(v41 + 412);
    v50 = *(_QWORD *)(v41 + 400);
    v95 = v88;
    v51 = v87;
    v52 = v89;
    *(_QWORD *)&v94 = v87;
    *((_QWORD *)&v94 + 1) = off_1E0FD2EC0;
    v96 = v89;
    v97[0] = 0;
    v99 = 0;
    v85 = v92;
    if (v92)
    {
      v98 = -1;
      LODWORD(v45) = v91;
      if (v91 != -1)
      {
        v53 = v49;
        v54 = v50;
        ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD3078[v91])(v101, v97, v90);
        v50 = v54;
        v49 = v53;
        v98 = (int)v45;
        v51 = v94;
        v52 = v96;
      }
      v55 = 1;
      v99 = 1;
    }
    else
    {
      v55 = 0;
    }
    *((_QWORD *)&v94 + 1) = off_1E0FD3060;
    v100 = v93;
    v60 = v50 + 32 * v49;
    *(_QWORD *)(v60 + 24) = 0;
    v61 = (_QWORD *)(v60 + 24);
    v62 = (char *)operator new(0x60uLL);
    v63 = v62;
    *(_QWORD *)v62 = off_1E0FD30E0;
    *((_QWORD *)v62 + 1) = v51;
    *(_OWORD *)(v62 + 24) = v95;
    *((_QWORD *)v62 + 2) = off_1E0FD2EC0;
    *((_QWORD *)v62 + 5) = v52;
    v62[48] = 0;
    v62[72] = 0;
    if (v85)
    {
      *((_DWORD *)v62 + 16) = -1;
      if ((_DWORD)v45 != -1)
      {
        ((void (*)(_BYTE *, char *, _BYTE *))off_1E0FD3078[v45])(v101, v62 + 48, v97);
        *((_DWORD *)v63 + 16) = (_DWORD)v45;
        v55 = v99;
      }
      v63[72] = 1;
      *((_QWORD *)v63 + 2) = off_1E0FD3060;
      *((_OWORD *)v63 + 5) = v100;
      *v61 = v63;
      *((_QWORD *)&v94 + 1) = off_1E0FD2EC0;
      if (v55 && v98 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E0FD2F78[v98])(v101, v97);
    }
    else
    {
      *((_QWORD *)v62 + 2) = off_1E0FD3060;
      *((_OWORD *)v62 + 5) = v100;
      *v61 = v62;
    }
    ++*(_DWORD *)(v41 + 412);
    v71 = (_OWORD *)(v32 + 8);
    v68 = (__n128 *)(v32 + 64);
    v70 = v40 + 32;
    *((_QWORD *)&v87 + 1) = off_1E0FD2EC0;
    if (!v92)
      goto LABEL_78;
LABEL_76:
    if (v91 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E0FD2F78[v91])(&v94, v90);
    goto LABEL_78;
  }
  v56 = *v43;
  v95 = v88;
  v57 = v87;
  v58 = v89;
  *(_QWORD *)&v94 = v87;
  *((_QWORD *)&v94 + 1) = off_1E0FD2EC0;
  v96 = v89;
  v97[0] = 0;
  v99 = 0;
  if (v42)
  {
    v98 = -1;
    if ((_DWORD)v27 != -1)
    {
      v59 = v56;
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD3078[v27])(v101, v97, v90);
      v56 = v59;
      v98 = v27;
      v57 = v94;
      v58 = v96;
    }
    v86 = 1;
    v99 = 1;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v94 + 1) = off_1E0FD3060;
  v100 = v93;
  v64 = v56 + 32 * v44;
  *(_QWORD *)(v64 + 24) = 0;
  v65 = (_QWORD *)(v64 + 24);
  v66 = (char *)operator new(0x60uLL);
  v67 = v66;
  *(_QWORD *)v66 = off_1E0FD30E0;
  *((_QWORD *)v66 + 1) = v57;
  *(_OWORD *)(v66 + 24) = v95;
  *((_QWORD *)v66 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v66 + 5) = v58;
  v66[48] = 0;
  v66[72] = 0;
  if (v42)
  {
    *((_DWORD *)v66 + 16) = -1;
    v68 = (__n128 *)(v32 + 64);
    v69 = v86;
    if ((_DWORD)v27 != -1)
    {
      ((void (*)(_BYTE *, char *, _BYTE *))off_1E0FD3078[v27])(v101, v66 + 48, v97);
      *((_DWORD *)v67 + 16) = v27;
      v69 = v99;
    }
    v67[72] = 1;
    *((_QWORD *)v67 + 2) = off_1E0FD3060;
    *((_OWORD *)v67 + 5) = v100;
    *v65 = v67;
    *((_QWORD *)&v94 + 1) = off_1E0FD2EC0;
    v70 = v40 + 32;
    if (v69)
    {
      if (v98 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E0FD2F78[v98])(v101, v97);
      v98 = -1;
    }
  }
  else
  {
    *((_QWORD *)v66 + 2) = off_1E0FD3060;
    *((_OWORD *)v66 + 5) = v100;
    *v65 = v66;
    *((_QWORD *)&v94 + 1) = off_1E0FD2EC0;
    v68 = (__n128 *)(v32 + 64);
    v70 = v40 + 32;
  }
  ++*(_DWORD *)(v41 + 412);
  *((_QWORD *)&v87 + 1) = off_1E0FD2EC0;
  v71 = (_OWORD *)(v32 + 8);
  if (v92)
    goto LABEL_76;
LABEL_78:
  *(_QWORD *)v40 = off_1E0FD2EC0;
  if (*(_BYTE *)(v40 + 56))
  {
    v72 = *(unsigned int *)(v40 + 48);
    if ((_DWORD)v72 != -1)
      ((void (*)(__int128 *, uint64_t))off_1E0FD2F78[v72])(&v94, v70);
    *(_DWORD *)(v40 + 48) = -1;
  }
  *(_QWORD *)v40 = &off_1E0FD2EE8;
  *(_OWORD *)(v40 + 8) = *v71;
  *(_QWORD *)v40 = off_1E0FD2EC0;
  *(_QWORD *)(v40 + 24) = *(_QWORD *)(v32 + 24);
  *(_BYTE *)(v40 + 32) = 0;
  *(_BYTE *)(v40 + 56) = 0;
  if (*(_BYTE *)(v32 + 56))
  {
    *(_DWORD *)(v40 + 48) = -1;
    v73 = *(unsigned int *)(v32 + 48);
    if ((_DWORD)v73 != -1)
    {
      ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD2FD0[v73])(&v94, v70, v32 + 32);
      *(_DWORD *)(v40 + 48) = v73;
    }
    *(_BYTE *)(v40 + 56) = 1;
  }
  *(_QWORD *)v40 = off_1E0FD3060;
  result = *v68;
  *(__n128 *)(v40 + 64) = *v68;
  return result;
}

uint64_t WGSL::insertBoundsChecks@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  void (**v12)(WGSL::AST::Visitor *__hidden);
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  v2 = result;
  LOBYTE(v13) = 0;
  v14 = 0;
  v12 = &off_1E0FD2C50;
  v15 = result;
  v4 = *(unsigned int *)(result + 92);
  if (!(_DWORD)v4)
  {
    v9 = *(unsigned int *)(result + 76);
    if (!(_DWORD)v9)
    {
      *a2 = 0;
      a2[32] = 0;
      return result;
    }
    v10 = *(uint64_t **)(result + 64);
    v11 = &v10[v9];
    goto LABEL_12;
  }
  v5 = 0;
  v6 = *(uint64_t **)(result + 80);
  v7 = 8 * v4;
  do
  {
    if (!v5)
      result = ((uint64_t (*)(_BYTE *, uint64_t))v12[3])(&v12, *v6);
    ++v6;
    v5 = v14;
    v7 -= 8;
  }
  while (v7);
  v8 = *(unsigned int *)(v2 + 76);
  if (!(_DWORD)v8)
  {
LABEL_16:
    *a2 = 0;
    a2[32] = 0;
    v12 = &off_1E0FD25C8;
    if (!v5)
      return result;
    goto LABEL_17;
  }
  if (!v14)
  {
    v10 = *(uint64_t **)(v2 + 64);
    v11 = &v10[v8];
LABEL_12:
    v5 = 0;
    do
    {
      if (!v5)
        result = ((uint64_t (*)(_BYTE *, uint64_t))v12[5])(&v12, *v10);
      ++v10;
      v5 = v14;
    }
    while (v10 != v11);
    goto LABEL_16;
  }
  *a2 = 0;
  a2[32] = 0;
  v12 = &off_1E0FD25C8;
LABEL_17:
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy();
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WGSL::BoundsCheckVisitor::~BoundsCheckVisitor(WGSL::BoundsCheckVisitor *this)
{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v2 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2)
        WTF::StringImpl::destroy();
      else
        *v2 -= 2;
    }
  }
}

{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v2 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2)
        WTF::StringImpl::destroy();
      else
        *v2 -= 2;
    }
  }
  JUMPOUT(0x186DAB2A8);
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(_QWORD *this, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x5FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD2E98;
  *(_QWORD *)(v6 + 64) = &off_1E0FD2EE8;
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v6 + 64) = &off_1E0FD2F10;
  v7 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(v6 + 88) = v7;
  *v5 += 96;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::Identifier::~Identifier(WGSL::AST::Identifier *this)
{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E0FD2F10;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (*v2 == 2)
      WTF::StringImpl::destroy();
    else
      *v2 -= 2;
  }
}

{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E0FD2F10;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (*v2 == 2)
      WTF::StringImpl::destroy();
    else
      *v2 -= 2;
  }
  JUMPOUT(0x186DAB2A8);
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(_QWORD *this, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x5FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E0FD2F38;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 64) = a3;
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(v8 + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v8 + 80) = v9;
  LODWORD(v9) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v8 + 84) = v9;
  *(_WORD *)(v8 + 88) = 1792;
  *v7 += 96;
  v10 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v10 != *((_DWORD *)v7 + 10))
  {
    v17 = (_QWORD *)(v7[4] + 8 * v10);
LABEL_17:
    *v17 = v8;
    *((_DWORD *)v7 + 11) = v10 + 1;
    return (_QWORD *)v8;
  }
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (void *)v7[4];
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v7 + 10) = v13;
    v7[4] = v15;
    memcpy(v15, v14, 8 * v10);
    if (v14)
    {
      if ((void *)v7[4] == v14)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
    v10 = *((unsigned int *)v7 + 11);
    v17 = (_QWORD *)(v7[4] + 8 * v10);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(_QWORD *this, _OWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD2F60;
  *(_DWORD *)(v6 + 64) = v7;
  *v5 += 72;
  v8 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v8 != *((_DWORD *)v5 + 10))
  {
    v15 = (_QWORD *)(v5[4] + 8 * v8);
LABEL_17:
    *v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (_QWORD *)v6;
  }
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)v5[4];
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *((unsigned int *)v5 + 11);
    v15 = (_QWORD *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>(_QWORD *this, _OWORD *a2, uint64_t a3, uint64_t a4, char *a5)
{
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;

  v9 = this;
  v10 = *this;
  if (this[1] - *this <= 0x57uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v10 = *v9;
  }
  v11 = *a5;
  *(_OWORD *)(v10 + 8) = *a2;
  *(_QWORD *)(v10 + 24) = 0;
  *(_BYTE *)(v10 + 32) = 0;
  *(_BYTE *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_1E0FD3038;
  *(_QWORD *)(v10 + 64) = a3;
  *(_QWORD *)(v10 + 72) = a4;
  *(_BYTE *)(v10 + 80) = v11;
  *v9 += 88;
  v12 = *((unsigned int *)v9 + 11);
  if ((_DWORD)v12 != *((_DWORD *)v9 + 10))
  {
    v19 = (_QWORD *)(v9[4] + 8 * v12);
LABEL_17:
    *v19 = v10;
    *((_DWORD *)v9 + 11) = v12 + 1;
    return (_QWORD *)v10;
  }
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = (void *)v9[4];
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)v9 + 10) = v15;
    v9[4] = v17;
    memcpy(v17, v16, 8 * v12);
    if (v16)
    {
      if ((void *)v9[4] == v16)
      {
        v9[4] = 0;
        *((_DWORD *)v9 + 10) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
    v12 = *((unsigned int *)v9 + 11);
    v19 = (_QWORD *)(v9[4] + 8 * v12);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::IdentifierExpression::~IdentifierExpression(WGSL::AST::IdentifierExpression *this)
{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  *((_QWORD *)this + 8) = &off_1E0FD2F10;
  v2 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)this = off_1E0FD2EC0;
      if (!*((_BYTE *)this + 56))
        return;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)this = off_1E0FD2EC0;
  if (!*((_BYTE *)this + 56))
    return;
LABEL_7:
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E0FD2F78[v3])(&v4, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
}

{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  *((_QWORD *)this + 8) = &off_1E0FD2F10;
  v2 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)this = off_1E0FD2EC0;
      if (!*((_BYTE *)this + 56))
        goto LABEL_10;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)this = off_1E0FD2EC0;
  if (!*((_BYTE *)this + 56))
    goto LABEL_10;
LABEL_7:
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E0FD2F78[v3])(&v4, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
LABEL_10:
  MEMORY[0x186DAB2A8](this, 0x10F3C400B403FF0);
}

uint64_t WGSL::AST::IdentifierExpression::kind(WGSL::AST::IdentifierExpression *this)
{
  return 22;
}

void WGSL::AST::Expression::~Expression(WGSL::AST::Expression *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40F62AF53DLL);
}

uint64_t WGSL::AST::Node::kind(WGSL::AST::Node *this)
{
  return 0;
}

void WGSL::AST::Node::~Node(WGSL::AST::Node *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::Identifier::kind(WGSL::AST::Identifier *this)
{
  return 29;
}

void WGSL::AST::CallExpression::~CallExpression(WGSL::AST::CallExpression *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  char v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v4 = *((unsigned int *)this + 12);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v4])(&v5, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  WTF *v3;
  uint64_t v4;
  char v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v4 = *((unsigned int *)this + 12);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v4])(&v5, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C4016200FDELL);
}

uint64_t WGSL::AST::CallExpression::kind(WGSL::AST::CallExpression *this)
{
  return 20;
}

void WGSL::AST::Unsigned32Literal::~Unsigned32Literal(WGSL::AST::Unsigned32Literal *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40FA57840CLL);
}

uint64_t WGSL::AST::Unsigned32Literal::kind(WGSL::AST::Unsigned32Literal *this)
{
  return 36;
}

void WGSL::AST::BinaryExpression::~BinaryExpression(WGSL::AST::BinaryExpression *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C4034F99CDCLL);
}

uint64_t WGSL::AST::BinaryExpression::kind(WGSL::AST::BinaryExpression *this)
{
  return 18;
}

void WGSL::AST::IndexAccessExpression::~IndexAccessExpression(WGSL::AST::IndexAccessExpression *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C408065EDEFLL);
}

uint64_t WGSL::AST::IndexAccessExpression::kind(WGSL::AST::IndexAccessExpression *this)
{
  return 24;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD30E0;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD2F78[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD30E0;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD2F78[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C403B4B6AF4);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD30E0;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD2FD0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD3060;
  *((_OWORD *)v3 + 5) = *(_OWORD *)(a1 + 80);
  return v3;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  char v9;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = off_1E0FD30E0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *))off_1E0FD2FD0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD3060;
  result = *(__n128 *)(a1 + 80);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(result + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(result + 72))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD2F78[v2])(&v3, result + 48);
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  char v3;

  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v2 = *((unsigned int *)__p + 16);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD2F78[v2])(&v3, __p + 6);
  }
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 48);
    v4 = v2;
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t))off_1E0FD2F78[v3])(&v7, v2 + 32);
      v4 = *(_QWORD *)(a1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    v2 = v4;
  }
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD3078[v5])(&v8, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD3060;
  result = *(__n128 *)(a1 + 80);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

uint64_t WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 27))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = 32 * v5;
      v10 = v4;
      do
      {
        v11 = (WTF *)*((_QWORD *)v10 + 3);
        if (v11)
        {
          if (v10 != v11)
          {
            *(_QWORD *)(v8 + 24) = v11;
            *((_QWORD *)v10 + 3) = 0;
            goto LABEL_6;
          }
          *(_QWORD *)(v8 + 24) = v8;
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v10 + 3) + 24))(*((_QWORD *)v10 + 3), v8);
          v12 = (WTF *)*((_QWORD *)v10 + 3);
          if (v10 == v12)
            goto LABEL_10;
        }
        else
        {
          *(_QWORD *)(v8 + 24) = 0;
          v12 = (WTF *)*((_QWORD *)v10 + 3);
          if (v10 == v12)
          {
LABEL_10:
            v12 = v10;
            v13 = 4;
LABEL_14:
            (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
            goto LABEL_6;
          }
        }
        if (v12)
        {
          v13 = 5;
          goto LABEL_14;
        }
LABEL_6:
        v8 += 32;
        v10 = (WTF *)((char *)v10 + 32);
        v9 -= 32;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_0,WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_1,WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  WTF *v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(v2 + 40) + 312);
  v28 = 0uLL;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)&v22 + 1) = 0;
  v23 = 0;
  *(_QWORD *)&v22 = &off_1E0FD2F10;
  v4 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v3, &v28, (uint64_t)&v22);
  v5 = v24;
  *(_QWORD *)&v22 = &off_1E0FD2F10;
  v24 = 0;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  v6 = *(_QWORD *)(v2 + 40);
  v4[3] = *(_QWORD *)(v6 + 120);
  v7 = *(_QWORD **)(*(_QWORD *)(v1 + 32) + 64);
  v8 = (char *)v7[3];
  v9 = *((_DWORD *)v8 + 12);
  if (v9 == 10)
  {
    v22 = 0uLL;
    LOBYTE(v28) = 0;
    v7 = WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::UnaryOperation,void>((_QWORD *)(v6 + 312), &v22, (uint64_t)v7, (char *)&v28);
    v10 = *(_QWORD *)(v2 + 40);
    v11 = *((_QWORD *)v8 + 1);
    v12 = v8[1];
    v27 = *v8;
    v26 = v11;
    v25 = v12;
    v13 = (v12 << 16) | ((unint64_t)v27 << 8) | 7;
    *(_QWORD *)&v22 = v13;
    *((_QWORD *)&v22 + 1) = v11;
    v14 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v10 + 112), (unsigned __int8 *)&v22);
    v15 = *(unsigned __int8 **)(v10 + 112);
    if (v15)
      v15 += 24 * *((unsigned int *)v15 - 1);
    if (v15 == v14 || (v16 = *((_QWORD *)v14 + 2)) == 0)
    {
      v16 = WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>(v10 + 96, &v27, &v25, &v26);
      *((_QWORD *)&v28 + 1) = v11;
      v29 = v16;
      *(_QWORD *)&v28 = v13;
      WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v10 + 112), (unsigned __int8 *)&v28, &v29, (uint64_t)&v22);
    }
    v7[3] = v16;
    v9 = *(_DWORD *)(v16 + 48);
  }
  if (v9 == 11)
  {
    v17 = *(_QWORD *)(v2 + 40);
    v22 = 0uLL;
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    DWORD2(v28) = 1;
    *(_QWORD *)&v28 = v18;
    *v18 = v7;
    HIDWORD(v28) = 1;
    v20 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v17 + 312), &v22, (uint64_t)v4, (uint64_t *)&v28);
    v21 = (WTF *)v28;
    if ((_QWORD)v28)
    {
      *(_QWORD *)&v28 = 0;
      DWORD2(v28) = 0;
      WTF::fastFree(v21, v19);
    }
    v20[3] = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 168);
    WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_4::operator()(*(_QWORD **)(v1 + 40), (uint64_t)v20);
  }
  else
  {
    __break(0xC471u);
  }
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_0,WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_1,WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(_QWORD ***a1, int *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  double result;
  __int128 v11;
  int v12;

  v2 = **a1;
  v3 = *(*a1)[1];
  v12 = *a2;
  v4 = (_QWORD *)(*(_QWORD *)(v3 + 40) + 312);
  v11 = 0uLL;
  v5 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(v4, &v11, &v12);
  v6 = (uint64_t)v5;
  v5[3] = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 168);
  v7 = v12;
  if (!*((_BYTE *)v5 + 56))
  {
    *((_DWORD *)v5 + 8) = v12;
    *((_DWORD *)v5 + 12) = 4;
    *((_BYTE *)v5 + 56) = 1;
    goto LABEL_8;
  }
  v8 = *((unsigned int *)v5 + 12);
  if ((_DWORD)v8 == -1)
  {
LABEL_7:
    *(_DWORD *)(v6 + 32) = v7;
    *(_DWORD *)(v6 + 48) = 4;
    goto LABEL_8;
  }
  v9 = v5 + 4;
  if ((_DWORD)v8 != 4)
  {
    ((void (*)(__int128 *, _DWORD *))off_1E0FD2F78[v8])(&v11, v9);
    goto LABEL_7;
  }
  *v9 = v12;
LABEL_8:
  *(_QWORD *)&result = WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_4::operator()(v2, v6).n128_u64[0];
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_0,WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_1,WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(uint64_t a1, uint64_t *a2)
{
  double result;

  *(_QWORD *)&result = WGSL::BoundsCheckVisitor::visit(WGSL::AST::IndexAccessExpression &)::$_4::operator()((_QWORD *)*(_QWORD *)(*(_QWORD *)a1 + 16), *a2).n128_u64[0];
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::UnaryOperation,void>(_QWORD *this, _OWORD *a2, uint64_t a3, char *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x4FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  v9 = *a4;
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E0FD3140;
  *(_QWORD *)(v8 + 64) = a3;
  *(_BYTE *)(v8 + 72) = v9;
  *v7 += 80;
  v10 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v10 != *((_DWORD *)v7 + 10))
  {
    v17 = (_QWORD *)(v7[4] + 8 * v10);
LABEL_17:
    *v17 = v8;
    *((_DWORD *)v7 + 11) = v10 + 1;
    return (_QWORD *)v8;
  }
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (void *)v7[4];
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v7 + 10) = v13;
    v7[4] = v15;
    memcpy(v15, v14, 8 * v10);
    if (v14)
    {
      if ((void *)v7[4] == v14)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
    v10 = *((unsigned int *)v7 + 11);
    v17 = (_QWORD *)(v7[4] + 8 * v10);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::UnaryExpression::~UnaryExpression(WGSL::AST::UnaryExpression *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD2F78[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40B327DD0CLL);
}

uint64_t WGSL::AST::UnaryExpression::kind(WGSL::AST::UnaryExpression *this)
{
  return 26;
}

uint64_t WGSL::CallGraphBuilder::initializeMappings(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _DWORD *v44;
  uint64_t v45;

  v1 = this;
  v2 = *(_QWORD *)(this + 40);
  v3 = *(unsigned int *)(v2 + 76);
  if (!(_DWORD)v3)
    goto LABEL_51;
  v4 = *(uint64_t **)(v2 + 64);
  v5 = (uint64_t *)(this + 64);
  v38 = (_QWORD *)(this + 48);
  v39 = this + 104;
  v40 = (uint64_t *)(this + 64);
  v41 = &v4[v3];
  while (2)
  {
    v6 = *v4;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v4 + 16))(*v4);
    if ((_DWORD)this == 27)
      v8 = v6;
    else
      v8 = 0;
    v45 = v8;
    if (!v8)
      goto LABEL_5;
    v9 = *v5;
    if (!*v5)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, 8u);
      v9 = *v5;
      if (!*v5)
      {
        v10 = 0;
        v11 = *(WTF::StringImpl **)(v8 + 48);
        v12 = *((_DWORD *)v11 + 4);
        if (v12 >= 0x100)
          goto LABEL_13;
LABEL_15:
        v13 = WTF::StringImpl::hashSlowCase(v11);
        goto LABEL_16;
      }
    }
    v10 = *(_DWORD *)(v9 - 8);
    v11 = *(WTF::StringImpl **)(v8 + 48);
    v12 = *((_DWORD *)v11 + 4);
    if (v12 < 0x100)
      goto LABEL_15;
LABEL_13:
    v13 = v12 >> 8;
LABEL_16:
    v14 = 0;
    for (i = 1; ; ++i)
    {
      v16 = v13 & v10;
      v17 = (uint64_t *)(v9 + 16 * (v13 & v10));
      this = *v17;
      if (*v17 == -1)
      {
        v14 = (uint64_t *)(v9 + 16 * v16);
        goto LABEL_18;
      }
      if (!this)
        break;
      this = WTF::equal((WTF *)this, *(const WTF::StringImpl **)(v8 + 48), v7);
      if ((this & 1) != 0)
      {
        v5 = v40;
        goto LABEL_38;
      }
LABEL_18:
      v13 = i + v16;
    }
    v5 = v40;
    if (v14)
    {
      this = 0;
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v40 - 16);
      v17 = v14;
    }
    v18 = *(_DWORD **)(v8 + 48);
    if (v18)
      *v18 += 2;
    *v17 = (uint64_t)v18;
    v6 = v45;
    v17[1] = v45;
    if (*v40)
    {
      ++*(_DWORD *)(*v40 - 12);
      v19 = *v40;
      if (*v40)
        goto LABEL_29;
LABEL_34:
      v20 = *(unsigned int *)(v19 - 16);
      v21 = *(unsigned int *)(v19 - 4);
      if (v21 > 0x400)
        goto LABEL_35;
LABEL_30:
      if (3 * v21 <= 4 * v20)
      {
        if (!(_DWORD)v21)
        {
          v22 = 8;
          goto LABEL_37;
        }
LABEL_36:
        v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
LABEL_37:
        this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v40, v22);
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v19 = *v40;
      if (!*v40)
        goto LABEL_34;
LABEL_29:
      v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
      v21 = *(unsigned int *)(v19 - 4);
      if (v21 <= 0x400)
        goto LABEL_30;
LABEL_35:
      if (v21 <= 2 * v20)
        goto LABEL_36;
    }
LABEL_38:
    v23 = *(unsigned __int16 *)(v6 + 121);
    if (v23 >= 0x100)
    {
      v42 = v6;
      v43 = v23;
      v24 = *(_DWORD **)(v6 + 48);
      if (v24)
        *v24 += 2;
      v44 = v24;
      v25 = *(unsigned int *)(v1 + 60);
      if ((_DWORD)v25 == *(_DWORD *)(v1 + 56))
      {
        v26 = WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v25 + 1, (unint64_t)&v42);
        v27 = *(_QWORD *)(v1 + 48) + 24 * *(unsigned int *)(v1 + 60);
        v28 = *(_QWORD *)v26;
        *(_BYTE *)(v27 + 8) = *(_BYTE *)(v26 + 8);
        *(_QWORD *)v27 = v28;
        v29 = (_QWORD *)(v27 + 16);
        v30 = (uint64_t *)(v26 + 16);
      }
      else
      {
        v31 = *v38 + 24 * v25;
        v32 = v42;
        *(_BYTE *)(v31 + 8) = v43;
        *(_QWORD *)v31 = v32;
        v29 = (_QWORD *)(v31 + 16);
        v30 = (uint64_t *)&v44;
      }
      v33 = *v30;
      *v30 = 0;
      *v29 = v33;
      ++*(_DWORD *)(v1 + 60);
      v34 = v44;
      v44 = 0;
      if (v34)
      {
        if (*v34 == 2)
          WTF::StringImpl::destroy();
        else
          *v34 -= 2;
      }
      this = WTF::Deque<WGSL::AST::Function *,0ul>::append<WGSL::AST::Function *&>(v39, &v45);
    }
LABEL_5:
    if (++v4 != v41)
      continue;
    break;
  }
LABEL_51:
  while (1)
  {
    v37 = *(_QWORD *)(v1 + 104);
    if (v37 == *(_QWORD *)(v1 + 112))
      break;
    v35 = *(_QWORD *)(*(_QWORD *)(v1 + 120) + 8 * v37);
    if (v37 == *(unsigned int *)(v1 + 128) - 1)
      v36 = 0;
    else
      v36 = v37 + 1;
    *(_QWORD *)(v1 + 104) = v36;
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 48))(v1, v35);
  }
  return this;
}

uint64_t WTF::Deque<WGSL::AST::Function *,0ul>::append<WGSL::AST::Function *&>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_18;
    LODWORD(v5) = *(_DWORD *)(result + 24);
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_18;
    }
    else if ((_DWORD)v5)
    {
      goto LABEL_18;
    }
  }
  v6 = v5;
  v7 = v5 + ((unint64_t)v5 >> 2);
  if (v7 <= 0xF)
    v7 = 15;
  if (v7 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v8 = *(char **)(result + 16);
  v9 = v7 + 1;
  v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
  *(_DWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 16) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 > v11)
  {
    memcpy(v10, v8, 8 * v11);
    v12 = *(_QWORD *)v3 - v6 + *(unsigned int *)(v3 + 24);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v12), &v8[8 * *(_QWORD *)v3], 8 * v6 - 8 * *(_QWORD *)v3);
    *(_QWORD *)v3 = v12;
    if (!v8)
      goto LABEL_18;
LABEL_15:
    if (*(char **)(v3 + 16) == v8)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v8, v13);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy(&v10[8 * *(_QWORD *)v3], &v8[8 * *(_QWORD *)v3], 8 * v11 - 8 * *(_QWORD *)v3);
  if (v8)
    goto LABEL_15;
LABEL_18:
  v14 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v14) = *a2;
  if (v14 == *(unsigned int *)(v3 + 24) - 1)
    v15 = 0;
  else
    v15 = v14 + 1;
  *(_QWORD *)(v3 + 8) = v15;
  return result;
}

uint64_t WGSL::CallGraphBuilder::visit(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  Function *v12;
  uint64_t *v13;
  int v14;
  WTF *v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;

  v3 = this;
  v5 = (uint64_t *)(this + 72);
  v4 = *(_QWORD *)(this + 72);
  if (v4
    || (this = (uint64_t)WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)(this + 72), 8u, 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (uint64_t *)(v4 + 24 * v10);
  v12 = (Function *)*v11;
  if (!*v11)
  {
LABEL_12:
    *v11 = a2;
    v16 = (WTF **)(v11 + 1);
    v15 = (WTF *)v11[1];
    v17 = *((unsigned int *)v11 + 5);
    if ((_DWORD)v17)
    {
      v18 = 24 * v17;
      v19 = (char *)v15 + 8;
      do
      {
        v20 = *(WTF **)v19;
        if (*(_QWORD *)v19)
        {
          *(_QWORD *)v19 = 0;
          *((_DWORD *)v19 + 2) = 0;
          WTF::fastFree(v20, (void *)a2);
        }
        v19 += 24;
        v18 -= 24;
      }
      while (v18);
      v15 = *v16;
    }
    if (v15)
    {
      v11[1] = 0;
      *((_DWORD *)v11 + 4) = 0;
      WTF::fastFree(v15, (void *)a2);
    }
    *v16 = 0;
    v11[2] = 0;
    if (*v5)
    {
      ++*(_DWORD *)(*v5 - 12);
      v21 = *v5;
      if (*v5)
        goto LABEL_22;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v21 = *v5;
      if (*v5)
      {
LABEL_22:
        v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
        v23 = *(unsigned int *)(v21 - 4);
        if (v23 <= 0x400)
          goto LABEL_23;
        goto LABEL_28;
      }
    }
    v22 = *(unsigned int *)(v21 - 16);
    v23 = *(unsigned int *)(v21 - 4);
    if (v23 <= 0x400)
    {
LABEL_23:
      if (3 * v23 <= 4 * v22)
      {
        if (!(_DWORD)v23)
        {
          v24 = 8;
LABEL_30:
          v11 = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v5, v24, v11);
          goto LABEL_31;
        }
LABEL_29:
        v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23));
        goto LABEL_30;
      }
LABEL_31:
      *(_QWORD *)(v3 + 88) = v11 + 1;
      *(_QWORD *)(v3 + 96) = a2;
      this = (uint64_t)WGSL::AST::Visitor::visit((_BYTE *)v3, (Function *)a2);
      v26 = *(_QWORD *)(v3 + 80);
      if (v26)
      {
        *(_QWORD *)(v3 + 80) = 0;
        this = WTF::fastFree((WTF *)(v26 - 16), v25);
      }
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 96) = 0;
      return this;
    }
LABEL_28:
    if (v23 <= 2 * v22)
      goto LABEL_29;
    goto LABEL_31;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != (Function *)a2)
  {
    if (v12 == (Function *)-1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (uint64_t *)(v4 + 24 * v10);
    v12 = (Function *)*v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return this;
}

uint64_t WGSL::CallGraphBuilder::visit(WGSL::CallGraphBuilder *this, WGSL::AST::CallExpression *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl **v8;
  uint64_t result;
  const WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  int v24;
  WTF *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  WTF **v30;
  WTF *v31;
  WTF **v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF **v53;
  WTF *v54[2];
  int v55;
  int v56;

  v4 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 9);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      WGSL::AST::Visitor::visit(this, v7);
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (const WTF::StringImpl **)*((_QWORD *)a2 + 8);
  result = (*((uint64_t (**)(const WTF::StringImpl **))*v8 + 2))(v8);
  if ((_DWORD)result == 22)
  {
    v11 = *((_QWORD *)this + 8);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = v8[11];
      v14 = *((_DWORD *)v13 + 4);
      v15 = v14 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v14 >> 8;
      for (i = 0; ; v15 = i + v17)
      {
        v17 = v15 & v12;
        result = *(_QWORD *)(v11 + 16 * v17);
        if (result != -1)
        {
          if (!result)
            return result;
          result = WTF::equal((WTF *)result, v8[11], v10);
          if ((result & 1) != 0)
            break;
        }
        ++i;
      }
      v18 = v11 + 16 * v17;
      v19 = *((_QWORD *)this + 8);
      if (!v19 || v18 != v19 + 16 * *(unsigned int *)(v19 - 4))
      {
        v20 = (_QWORD *)(v18 + 8);
        result = WTF::Deque<WGSL::AST::Function *,0ul>::append<WGSL::AST::Function *&>((uint64_t)this + 104, (_QWORD *)(v18 + 8));
        v21 = *((_QWORD *)this + 10);
        v22 = (uint64_t *)((char *)this + 80);
        v23 = *(_DWORD *)(*((_QWORD *)this + 11) + 12);
        if (v21
          || (result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)this + 10, 8u), (v21 = *v22) != 0))
        {
          v24 = *(_DWORD *)(v21 - 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = (WTF *)*v20;
        v26 = ~(*v20 << 32) + *v20;
        v27 = 9
            * (((v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13)) ^ (((v26 ^ (v26 >> 22))
                                                                      + ~((v26 ^ (v26 >> 22)) << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        v29 = v24 & ((v28 >> 31) ^ v28);
        v30 = (WTF **)(v21 + 16 * v29);
        v31 = *v30;
        if (*v30)
        {
          v32 = 0;
          v33 = 1;
          while (v31 != v25)
          {
            if (v31 == (WTF *)-1)
              v32 = v30;
            v29 = (v29 + v33) & v24;
            v30 = (WTF **)(v21 + 16 * v29);
            v31 = *v30;
            ++v33;
            if (!*v30)
            {
              if (v32)
              {
                *v32 = 0;
                v32[1] = 0;
                --*(_DWORD *)(*v22 - 16);
                v25 = (WTF *)*v20;
                v30 = v32;
              }
              goto LABEL_29;
            }
          }
          v38 = *((_QWORD *)this + 11);
          v39 = *((_DWORD *)v30 + 2);
          if (*(_DWORD *)(v38 + 12) <= v39)
          {
            __break(0xC471u);
            return result;
          }
          v40 = *(_QWORD *)v38 + 24 * v39;
          v41 = (unsigned int *)(v40 + 8);
          v54[0] = *((WTF **)this + 12);
          v54[1] = a2;
          v42 = *(unsigned int *)(v40 + 20);
          if ((_DWORD)v42 == *(_DWORD *)(v40 + 16))
          {
            result = WTF::Vector<std::tuple<WGSL::AST::Function *,WGSL::AST::CallExpression *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)v54);
            v42 = v41[3];
            v43 = *(_QWORD *)v41;
            v44 = *(_OWORD *)result;
          }
          else
          {
            v43 = *(_QWORD *)v41;
            v44 = *(_OWORD *)v54;
          }
          *(_OWORD *)(v43 + 16 * v42) = v44;
          goto LABEL_49;
        }
LABEL_29:
        *v30 = v25;
        *((_DWORD *)v30 + 2) = v23;
        if (*v22)
        {
          ++*(_DWORD *)(*v22 - 12);
          v34 = *v22;
          if (*v22)
            goto LABEL_31;
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          v34 = *v22;
          if (*v22)
          {
LABEL_31:
            v35 = (*(_DWORD *)(v34 - 16) + *(_DWORD *)(v34 - 12));
            v36 = *(unsigned int *)(v34 - 4);
            if (v36 <= 0x400)
              goto LABEL_32;
            goto LABEL_40;
          }
        }
        v35 = *(unsigned int *)(v34 - 16);
        v36 = *(unsigned int *)(v34 - 4);
        if (v36 <= 0x400)
        {
LABEL_32:
          if (3 * v36 <= 4 * v35)
          {
            if (!(_DWORD)v36)
            {
              v37 = 8;
LABEL_42:
              WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)this + 10, v37);
              goto LABEL_43;
            }
LABEL_41:
            v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v36));
            goto LABEL_42;
          }
LABEL_43:
          v45 = (WTF *)*v20;
          v54[0] = *(WTF **)v20;
          v41 = (unsigned int *)*((_QWORD *)this + 11);
          v46 = *((_QWORD *)this + 12);
          result = WTF::fastMalloc((WTF *)0x10);
          v55 = 1;
          v54[1] = (WTF *)result;
          *(_QWORD *)result = v46;
          *(_QWORD *)(result + 8) = a2;
          v56 = 1;
          v47 = v41[3];
          if ((_DWORD)v47 == v41[2])
          {
            v48 = WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v47 + 1, (unint64_t)v54);
            v50 = *(_QWORD *)v41 + 24 * v41[3];
            v51 = *(_QWORD *)v48;
            *(_QWORD *)(v50 + 8) = 0;
            *(_QWORD *)(v50 + 16) = 0;
            *(_QWORD *)v50 = v51;
            v52 = *(_QWORD *)(v48 + 8);
            *(_QWORD *)(v48 + 8) = 0;
            *(_QWORD *)(v50 + 8) = v52;
            LODWORD(v52) = *(_DWORD *)(v48 + 16);
            *(_DWORD *)(v48 + 16) = 0;
            *(_DWORD *)(v50 + 16) = v52;
            LODWORD(v52) = *(_DWORD *)(v48 + 20);
            *(_DWORD *)(v48 + 20) = 0;
            *(_DWORD *)(v50 + 20) = v52;
            result = (uint64_t)v54[1];
            ++v41[3];
            if (result)
            {
              v54[1] = 0;
              v55 = 0;
              return WTF::fastFree((WTF *)result, v49);
            }
            return result;
          }
          v53 = (WTF **)(*(_QWORD *)v41 + 24 * v47);
          *v53 = v45;
          v53[1] = (WTF *)result;
          v53[2] = (WTF *)0x100000001;
LABEL_49:
          ++v41[3];
          return result;
        }
LABEL_40:
        if (v36 <= 2 * v35)
          goto LABEL_41;
        goto LABEL_43;
      }
    }
  }
  return result;
}

void WGSL::buildCallGraph(WGSL *this, WGSL::ShaderModule *a2)
{
  void *v2;
  WGSL *v3;
  unsigned int *v4;
  WTF *v5;
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;
  void (**v9)(WGSL::AST::Visitor *__hidden);
  _DWORD *v10;
  char v11;
  WGSL *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  WTF *v17[2];
  uint64_t v18;

  LOBYTE(v10) = 0;
  v11 = 0;
  v9 = &off_1E0FD3168;
  v12 = this;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v17 = 0u;
  v18 = 0;
  WGSL::CallGraphBuilder::initializeMappings((uint64_t)&v9);
  v3 = v12;
  v4 = (unsigned int *)((char *)v12 + 360);
  if (*((_BYTE *)v12 + 392))
  {
    WGSL::CallGraph::operator=(v4, (uint64_t *)&v13);
    v9 = &off_1E0FD3168;
    v5 = v17[1];
    if (!v17[1])
      goto LABEL_4;
    goto LABEL_3;
  }
  *((_QWORD *)v12 + 45) = v13;
  v7 = *((_QWORD *)&v13 + 1);
  v13 = 0uLL;
  *((_QWORD *)v3 + 46) = v7;
  v8 = v14;
  v14 = 0uLL;
  *((_OWORD *)v4 + 1) = v8;
  *((_BYTE *)v3 + 392) = 1;
  v9 = &off_1E0FD3168;
  v5 = v17[1];
  if (v17[1])
  {
LABEL_3:
    v17[1] = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v5, v2);
  }
LABEL_4:
  if ((_QWORD)v15)
    WTF::fastFree((WTF *)(v15 - 16), v2);
  WGSL::CallGraph::~CallGraph((WGSL::CallGraph *)&v13, v2);
  v9 = &off_1E0FD25C8;
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*v6 == 2)
        WTF::StringImpl::destroy();
      else
        *v6 -= 2;
    }
  }
}

void WGSL::CallGraphBuilder::~CallGraphBuilder(WGSL::CallGraphBuilder *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E0FD3168;
  v3 = (WTF *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  WGSL::CallGraph::~CallGraph((WGSL::CallGraphBuilder *)((char *)this + 48), a2);
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*v5 == 2)
        WTF::StringImpl::destroy();
      else
        *v5 -= 2;
    }
  }
}

{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E0FD3168;
  v3 = (WTF *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  WGSL::CallGraph::~CallGraph((WGSL::CallGraphBuilder *)((char *)this + 48), a2);
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*v5 == 2)
        WTF::StringImpl::destroy();
      else
        *v5 -= 2;
    }
  }
  JUMPOUT(0x186DAB2A8);
}

unsigned int *WGSL::CallGraph::operator=(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  WTF *v26;

  v4 = a1[3];
  if ((_DWORD)v4)
  {
    v5 = 24 * v4;
    v6 = (_DWORD **)(*(_QWORD *)a1 + 16);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*v7 == 2)
          WTF::StringImpl::destroy();
        else
          *v7 -= 2;
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v8 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  a1[2] = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  a1[3] = v9;
  v10 = a2[2];
  a2[2] = 0;
  v11 = (_DWORD **)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  if (v11)
  {
    v12 = *((unsigned int *)v11 - 1);
    if ((_DWORD)v12)
    {
      v13 = v11;
      do
      {
        v14 = *v13;
        if (*v13 != (_DWORD *)-1)
        {
          *v13 = 0;
          if (v14)
          {
            if (*v14 == 2)
              WTF::StringImpl::destroy();
            else
              *v14 -= 2;
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 2), a2);
  }
  v15 = a2[3];
  a2[3] = 0;
  v16 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v15;
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)(v16 + 24 * i) != -1)
        {
          v19 = v16 + 24 * i;
          v22 = *(WTF **)(v19 + 8);
          v21 = v19 + 8;
          v20 = v22;
          v23 = *(unsigned int *)(v21 + 12);
          if ((_DWORD)v23)
          {
            v24 = 24 * v23;
            v25 = (char *)v20 + 8;
            do
            {
              v26 = *(WTF **)v25;
              if (*(_QWORD *)v25)
              {
                *(_QWORD *)v25 = 0;
                *((_DWORD *)v25 + 2) = 0;
                WTF::fastFree(v26, a2);
              }
              v25 += 24;
              v24 -= 24;
            }
            while (v24);
            v20 = *(WTF **)v21;
          }
          if (v20)
          {
            *(_QWORD *)v21 = 0;
            *(_DWORD *)(v16 + 24 * i + 16) = 0;
            WTF::fastFree(v20, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  return a1;
}

void WGSL::CallGraph::~CallGraph(WGSL::CallGraph *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -1)
        {
          v6 = v3 + 24 * i;
          v9 = *(WTF **)(v6 + 8);
          v8 = v6 + 8;
          v7 = v9;
          v10 = *(unsigned int *)(v8 + 12);
          if ((_DWORD)v10)
          {
            v11 = 24 * v10;
            v12 = (char *)v7 + 8;
            do
            {
              v13 = *(WTF **)v12;
              if (*(_QWORD *)v12)
              {
                *(_QWORD *)v12 = 0;
                *((_DWORD *)v12 + 2) = 0;
                WTF::fastFree(v13, a2);
              }
              v12 += 24;
              v11 -= 24;
            }
            while (v11);
            v7 = *(WTF **)v8;
          }
          if (v7)
          {
            *(_QWORD *)v8 = 0;
            *(_DWORD *)(v3 + 24 * i + 16) = 0;
            WTF::fastFree(v7, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = (_DWORD **)*((_QWORD *)this + 2);
      do
      {
        v17 = *v16;
        if (*v16 != (_DWORD *)-1)
        {
          *v16 = 0;
          if (v17)
          {
            if (*v17 == 2)
              WTF::StringImpl::destroy();
            else
              *v17 -= 2;
          }
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  v18 = *((unsigned int *)this + 3);
  if ((_DWORD)v18)
  {
    v19 = 24 * v18;
    v20 = (_DWORD **)(*(_QWORD *)this + 16);
    do
    {
      v21 = *v20;
      *v20 = 0;
      if (v21)
      {
        if (*v21 == 2)
          WTF::StringImpl::destroy();
        else
          *v21 -= 2;
      }
      v20 += 3;
      v19 -= 24;
    }
    while (v19);
  }
  v22 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v22, a2);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  WTF::StringImpl *v20;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
          {
            v13 = *(_DWORD *)(v12 - 8);
            v14 = *((_DWORD *)v11 + 4);
            if (v14 >= 0x100)
              goto LABEL_12;
LABEL_14:
            v15 = WTF::StringImpl::hashSlowCase(v11);
          }
          else
          {
            v13 = 0;
            v14 = *((_DWORD *)v11 + 4);
            if (v14 < 0x100)
              goto LABEL_14;
LABEL_12:
            v15 = v14 >> 8;
          }
          v16 = 0;
          do
          {
            v17 = v15 & v13;
            v15 = ++v16 + v17;
          }
          while (*(_QWORD *)(v12 + 16 * v17));
          v18 = (_QWORD *)(v12 + 16 * v17);
          *v18 = 0;
          v19 = *(_OWORD *)v10;
          *v10 = 0;
          *(_OWORD *)v18 = v19;
          v20 = *v10;
          *v10 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v20 -= 2;
          }
          goto LABEL_7;
        }
        *v10 = 0;
      }
LABEL_7:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unint64_t WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_BYTE *)(v7 + 8) = *((_BYTE *)v9 + 8);
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          *(_QWORD *)(v7 + 16) = v11;
          result = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy();
            else
              *(_DWORD *)result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 24;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  char *v48;
  WTF *v49;
  uint64_t *result;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v55;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v51 = v4;
    v52 = v5;
    while (1)
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v55 = v10;
          v24 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v23 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = (uint64_t *)(v22 + 24 * v27);
            v27 = (v27 + v28++) & v23;
          }
          while (*v30);
          v31 = v29;
          v32 = v22 + 24 * v29;
          v35 = *(WTF **)(v32 + 8);
          v34 = v32 + 8;
          v33 = v35;
          v36 = *(unsigned int *)(v34 + 12);
          if ((_DWORD)v36)
          {
            v37 = 24 * v36;
            v38 = (char *)v33 + 8;
            do
            {
              v39 = *(WTF **)v38;
              if (*(_QWORD *)v38)
              {
                *(_QWORD *)v38 = 0;
                *((_DWORD *)v38 + 2) = 0;
                WTF::fastFree(v39, v8);
              }
              v38 += 24;
              v37 -= 24;
            }
            while (v37);
            v33 = *(WTF **)v34;
            v4 = v51;
          }
          if (v33)
          {
            *(_QWORD *)v34 = 0;
            *(_DWORD *)(v22 + 24 * v31 + 16) = 0;
            WTF::fastFree(v33, v8);
          }
          *v30 = *v12;
          v40 = v4 + 24 * v9;
          *(_QWORD *)v34 = 0;
          *(_QWORD *)(v34 + 8) = 0;
          v42 = *(_QWORD *)(v40 + 8);
          v41 = v40 + 8;
          *(_QWORD *)v41 = 0;
          *(_QWORD *)v34 = v42;
          v43 = *(_DWORD *)(v41 + 8);
          *(_DWORD *)(v41 + 8) = 0;
          *(_DWORD *)(v22 + 24 * v31 + 16) = v43;
          v44 = *(_DWORD *)(v41 + 12);
          *(_DWORD *)(v41 + 12) = 0;
          *(_DWORD *)(v34 + 12) = v44;
          v45 = *(unsigned int *)(v41 + 12);
          v46 = *(WTF **)v41;
          if ((_DWORD)v45)
          {
            v47 = 24 * v45;
            v48 = (char *)v46 + 8;
            v10 = v55;
            do
            {
              v49 = *(WTF **)v48;
              if (*(_QWORD *)v48)
              {
                *(_QWORD *)v48 = 0;
                *((_DWORD *)v48 + 2) = 0;
                WTF::fastFree(v49, v8);
              }
              v48 += 24;
              v47 -= 24;
            }
            while (v47);
            v46 = *(WTF **)v41;
            if (!*(_QWORD *)v41)
              goto LABEL_6;
LABEL_40:
            *(_QWORD *)v41 = 0;
            *(_DWORD *)(v41 + 8) = 0;
            WTF::fastFree(v46, v8);
          }
          else
          {
            v10 = v55;
            if (v46)
              goto LABEL_40;
          }
LABEL_6:
          v11 = v52;
          if (v12 == a3)
            v10 = v30;
          goto LABEL_8;
        }
        v14 = v4 + 24 * v9;
        v17 = *(WTF **)(v14 + 8);
        v16 = v14 + 8;
        v15 = v17;
        v18 = *(unsigned int *)(v16 + 12);
        if ((_DWORD)v18)
        {
          v19 = 24 * v18;
          v20 = (char *)v15 + 8;
          do
          {
            v21 = *(WTF **)v20;
            if (*(_QWORD *)v20)
            {
              *(_QWORD *)v20 = 0;
              *((_DWORD *)v20 + 2) = 0;
              WTF::fastFree(v21, v8);
            }
            v20 += 24;
            v19 -= 24;
          }
          while (v19);
          v15 = *(WTF **)v16;
        }
        if (v15)
        {
          *(_QWORD *)v16 = 0;
          *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
          WTF::fastFree(v15, v8);
        }
      }
LABEL_8:
      if (++v9 == v11)
        goto LABEL_42;
    }
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

uint64_t WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 16 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (~(*v10 << 32) + *v10) ^ ((~(*v10 << 32) + *v10) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          v18 = v16;
          v19 = *(_QWORD *)(v11 + 16 * v16);
          v16 = (v16 + v17++) & v12;
        }
        while (v19);
        *(_OWORD *)(v11 + 16 * v18) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 24 * v4;
        v9 = (_DWORD *)((char *)v3 + 16);
        do
        {
          v10 = *((_QWORD *)v9 - 2);
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *v9;
          *v9 = 0;
          v7[4] = v11;
          LODWORD(v11) = v9[1];
          v9[1] = 0;
          v7[5] = v11;
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          if (result)
          {
            *((_QWORD *)v9 - 1) = 0;
            *v9 = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 6;
          v7 += 6;
          v8 -= 24;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<std::tuple<WGSL::AST::Function *,WGSL::AST::CallExpression *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  __int128 v24;

  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 16 * v6 <= a3))
  {
    v15 = *(unsigned int *)(a1 + 8);
    v16 = v15 + (v15 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= a2)
      v18 = a2;
    else
      v18 = v17;
    if (v18 > v15)
    {
      if (v18 >> 28)
        goto LABEL_35;
      v19 = *(unsigned int *)(a1 + 12);
      v20 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v18));
      *(_DWORD *)(a1 + 8) = v18;
      *(_QWORD *)a1 = v20;
      if ((_DWORD)v19)
      {
        v22 = 16 * v19;
        v23 = v5;
        do
        {
          v24 = *(_OWORD *)v23;
          v23 = (WTF *)((char *)v23 + 16);
          *v20++ = v24;
          v22 -= 16;
        }
        while (v22);
      }
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v21);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 28))
    {
      v11 = WTF::fastMalloc((WTF *)(16 * v10));
      v13 = 0;
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      do
      {
        *(_OWORD *)(v11 + v13) = *(_OWORD *)((char *)v5 + v13);
        v13 += 16;
      }
      while (16 * v6 != v13);
      v14 = *(WTF **)a1;
      if (v5)
      {
        if (v14 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v14 = *(WTF **)a1;
      }
      return (unint64_t)v14 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1824940BCLL);
  }
  v14 = *(WTF **)a1;
  return (unint64_t)v14 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
}

WTF *WGSL::ShaderModule::revertReplacements(WTF *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (uint64_t)this;
  LODWORD(v3) = *((_DWORD *)this + 103);
  if ((int)v3 - 1 < 0)
  {
LABEL_5:
    if (!*(_DWORD *)(v2 + 408))
      return this;
    v5 = *(unsigned int *)(v2 + 412);
    v6 = *(WTF **)(v2 + 400);
    if (!(_DWORD)v5)
    {
LABEL_15:
      if (v6)
      {
        *(_QWORD *)(v2 + 400) = 0;
        *(_DWORD *)(v2 + 408) = 0;
        return (WTF *)WTF::fastFree(v6, a2);
      }
      return this;
    }
    v7 = 32 * v5;
    while (1)
    {
      this = (WTF *)*((_QWORD *)v6 + 3);
      if (v6 == this)
      {
        this = v6;
        v8 = 4;
      }
      else
      {
        if (!this)
          goto LABEL_10;
        v8 = 5;
      }
      this = (WTF *)(*(uint64_t (**)(void))(*(_QWORD *)this + 8 * v8))();
LABEL_10:
      v6 = (WTF *)((char *)v6 + 32);
      v7 -= 32;
      if (!v7)
      {
        *(_DWORD *)(v2 + 412) = 0;
        v6 = *(WTF **)(v2 + 400);
        goto LABEL_15;
      }
    }
  }
  while (1)
  {
    v3 = (v3 - 1);
    if (*(_DWORD *)(v2 + 412) <= v3)
      break;
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 400) + 32 * v3 + 24);
    if (!v4)
    {
      this = (WTF *)std::__throw_bad_function_call[abi:sn180100]();
      break;
    }
    this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    if ((int)v3 <= 0)
      goto LABEL_5;
  }
  __break(0xC471u);
  return this;
}

uint64_t std::__throw_bad_function_call[abi:sn180100]()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return WGSL::ConstantArray::operator[](v0, v1, v2);
}

uint64_t WGSL::ConstantArray::operator[]@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (**(_DWORD **)result <= a2)
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)result + 24 * a2;
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = -1;
    v5 = *(unsigned int *)(v4 + 24);
    if ((_DWORD)v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v5])(&v6, a3, v4 + 8);
      *(_DWORD *)(a3 + 16) = v5;
    }
  }
  return result;
}

void WGSL::ConstantMatrix::operator[](uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  char v17;

  v4 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v4)
  {
    v7 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v4 + 8));
    *v7 = v4;
    bzero(v7 + 2, 24 * ((24 * v4 - 24) / 0x18uLL) + 24);
    LODWORD(v8) = *(_DWORD *)(a1 + 4);
    *a3 = v7;
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = v7 + 6;
      do
      {
        while (1)
        {
          v11 = v9 + v8 * a2;
          v12 = *(unsigned int **)(a1 + 8);
          if (*v12 <= v11 || v9 >= *v7)
          {
            __break(0xC471u);
            JUMPOUT(0x1824943D8);
          }
          v13 = (uint64_t)&v12[6 * v11 + 2];
          v14 = *v10;
          v15 = *(unsigned int *)(v13 + 16);
          if ((_DWORD)v14 != -1)
            break;
          if ((_DWORD)v15 != -1)
            goto LABEL_5;
LABEL_6:
          ++v9;
          v8 = *(unsigned int *)(a1 + 4);
          v10 += 6;
          if (v9 >= v8)
            return;
        }
        if ((_DWORD)v15 != -1)
        {
LABEL_5:
          v16 = v10 - 4;
          ((void (*)(_DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRSC_SI_EEEDcmSK_DpOT0____fdiagonal[v15])(&v16);
          goto LABEL_6;
        }
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v14])(&v17, v10 - 4);
        *v10 = -1;
        v10 += 6;
        ++v9;
        v8 = *(unsigned int *)(a1 + 4);
      }
      while (v9 < v8);
    }
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t WGSL::ConstantValue::dump(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  float *v5;
  _QWORD v6[11];
  _QWORD *v7;

  v6[0] = a2;
  v6[1] = a2;
  v6[2] = a2;
  v6[3] = a2;
  v6[4] = a2;
  v6[5] = a2;
  v6[6] = a2;
  v6[7] = a2;
  v6[8] = a2;
  v6[9] = a2;
  v6[10] = a2;
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>((WTF::String *)v4, v5);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL13ConstantValue4dumpERNS6_11PrintStreamEE3__0JZNKS9_4dumpESB_E3__1ZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10EEEEEJRKNS0_6__implIJfDhdijxbNS8_13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v7, a1);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(WTF::String *a1, float *a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _DWORD *v7;

  v2 = *(_QWORD *)a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  WTF::String::number(a1, *a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  result = (uint64_t)v7;
  if (!v7)
  {
LABEL_4:
    if ((LODWORD(v3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      return result;
    goto LABEL_5;
  }
  if (*v7 != 2)
  {
    *v7 -= 2;
    goto LABEL_4;
  }
  result = WTF::StringImpl::destroy();
  if ((LODWORD(v3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return result;
LABEL_5:
  v6 = *(_QWORD *)(v2 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(WTF::String *a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v12;
  _DWORD *v13;

  v2 = *(_QWORD *)a1;
  _H8 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  __asm { FCVT            S0, H8; float }
  WTF::String::number(a1, _S0);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  result = (uint64_t)v13;
  if (v13)
  {
    if (*v13 == 2)
      result = WTF::StringImpl::destroy();
    else
      *v13 -= 2;
  }
  __asm { FCVT            D0, H8 }
  if (((_D0 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE || (_D0 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    v12 = *(_QWORD *)(v2 + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(WTF::String *a1, double *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;

  v2 = **(_QWORD **)a1;
  WTF::String::number(a1, *a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  result = (uint64_t)v4;
  if (v4)
  {
    if (*v4 == 2)
      return WTF::StringImpl::destroy();
    else
      *v4 -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  WTF::String::number((WTF::String *)*a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  result = (uint64_t)v4;
  if (v4)
  {
    if (*v4 == 2)
      return WTF::StringImpl::destroy();
    else
      *v4 -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  WTF::String::number((WTF::String *)*a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  result = (uint64_t)v4;
  if (v4)
  {
    if (*v4 == 2)
      return WTF::StringImpl::destroy();
    else
      *v4 -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(uint64_t a1, WTF::String **a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  WTF::String::number(*a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  result = (uint64_t)v4;
  if (v4)
  {
    if (*v4 == 2)
      return WTF::StringImpl::destroy();
    else
      *v4 -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = *a2;
  v6 = (uint64_t)(*a2 + 2);
  if (*a2)
    v7 = (uint64_t)(*a2 + 2);
  else
    v7 = 0;
  if (v5)
  {
    v8 = v6 + 24 * *v5;
    if (v7 == v8)
      goto LABEL_12;
  }
  else
  {
    v8 = 0;
    if (!v7)
      goto LABEL_12;
  }
  v9 = *(_QWORD *)(v3 + 56);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v19 = v18;
  v20 = v18;
  v21 = v18;
  v22 = v18;
  v23 = v18;
  v24 = v18;
  v25 = v18;
  v26 = v18;
  v27 = v18;
  v28 = v18;
  v10 = *(unsigned int *)(v7 + 16);
  if ((_DWORD)v10 != -1)
  {
    v29 = &v18;
    ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL13ConstantValue4dumpERNS6_11PrintStreamEE3__0JZNKS9_4dumpESB_E3__1ZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10EEEEEJRKNS0_6__implIJfDhdijxbNS8_13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v29, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    for (i = v7 + 24; i != v8; i += 24)
    {
      v12 = *(_QWORD *)(v3 + 56);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      WTF::printInternal();
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      v13 = *(_QWORD *)(v3 + 56);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      v19 = v18;
      v20 = v18;
      v21 = v18;
      v22 = v18;
      v23 = v18;
      v24 = v18;
      v25 = v18;
      v26 = v18;
      v27 = v18;
      v28 = v18;
      v14 = *(unsigned int *)(i + 16);
      if ((_DWORD)v14 == -1)
        goto LABEL_13;
      v29 = &v18;
      ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL13ConstantValue4dumpERNS6_11PrintStreamEE3__0JZNKS9_4dumpESB_E3__1ZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10EEEEEJRKNS0_6__implIJfDhdijxbNS8_13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v29, i);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    }
LABEL_12:
    v15 = *(_QWORD *)(v3 + 56);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
LABEL_13:
  v17 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(v17);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 64);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = *a2;
  v6 = (uint64_t)(*a2 + 2);
  if (*a2)
    v7 = (uint64_t)(*a2 + 2);
  else
    v7 = 0;
  if (v5)
  {
    v8 = v6 + 24 * *v5;
    if (v7 == v8)
      goto LABEL_12;
  }
  else
  {
    v8 = 0;
    if (!v7)
      goto LABEL_12;
  }
  v9 = *(_QWORD *)(v3 + 64);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v19 = v18;
  v20 = v18;
  v21 = v18;
  v22 = v18;
  v23 = v18;
  v24 = v18;
  v25 = v18;
  v26 = v18;
  v27 = v18;
  v28 = v18;
  v10 = *(unsigned int *)(v7 + 16);
  if ((_DWORD)v10 != -1)
  {
    v29 = &v18;
    ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL13ConstantValue4dumpERNS6_11PrintStreamEE3__0JZNKS9_4dumpESB_E3__1ZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10EEEEEJRKNS0_6__implIJfDhdijxbNS8_13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v29, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    for (i = v7 + 24; i != v8; i += 24)
    {
      v12 = *(_QWORD *)(v3 + 64);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      WTF::printInternal();
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      v13 = *(_QWORD *)(v3 + 64);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      v19 = v18;
      v20 = v18;
      v21 = v18;
      v22 = v18;
      v23 = v18;
      v24 = v18;
      v25 = v18;
      v26 = v18;
      v27 = v18;
      v28 = v18;
      v14 = *(unsigned int *)(i + 16);
      if ((_DWORD)v14 == -1)
        goto LABEL_13;
      v29 = &v18;
      ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL13ConstantValue4dumpERNS6_11PrintStreamEE3__0JZNKS9_4dumpESB_E3__1ZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10EEEEEJRKNS0_6__implIJfDhdijxbNS8_13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v29, i);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    }
LABEL_12:
    v15 = *(_QWORD *)(v3 + 64);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
LABEL_13:
  v17 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(v17);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = *(unsigned int **)(a2 + 8);
  if (v5)
    v6 = v5 + 2;
  else
    v6 = 0;
  if (v5)
  {
    v7 = (uint64_t)&v5[6 * *v5 + 2];
    if (v6 == (unsigned int *)v7)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    if (!v6)
      goto LABEL_12;
  }
  v8 = *(_QWORD *)(v3 + 72);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v18 = v17;
  v19 = v17;
  v20 = v17;
  v21 = v17;
  v22 = v17;
  v23 = v17;
  v24 = v17;
  v25 = v17;
  v26 = v17;
  v27 = v17;
  v9 = v6[4];
  if ((_DWORD)v9 != -1)
  {
    v28 = &v17;
    ((void (*)(uint64_t **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL13ConstantValue4dumpERNS6_11PrintStreamEE3__0JZNKS9_4dumpESB_E3__1ZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10EEEEEJRKNS0_6__implIJfDhdijxbNS8_13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v28, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    for (i = v6 + 6; i != (unsigned int *)v7; i += 6)
    {
      v11 = *(_QWORD *)(v3 + 72);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      WTF::printInternal();
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      v12 = *(_QWORD *)(v3 + 72);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      v18 = v17;
      v19 = v17;
      v20 = v17;
      v21 = v17;
      v22 = v17;
      v23 = v17;
      v24 = v17;
      v25 = v17;
      v26 = v17;
      v27 = v17;
      v13 = i[4];
      if ((_DWORD)v13 == -1)
        goto LABEL_13;
      v28 = &v17;
      ((void (*)(uint64_t **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL13ConstantValue4dumpERNS6_11PrintStreamEE3__0JZNKS9_4dumpESB_E3__1ZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10EEEEEJRKNS0_6__implIJfDhdijxbNS8_13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v28, i);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    }
LABEL_12:
    v14 = *(_QWORD *)(v3 + 72);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  }
LABEL_13:
  v16 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(v16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ConstantValue::dump(WTF::PrintStream &)::$_0,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_1,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_2,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_3,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_4,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_5,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_6,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_7,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_8,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_9,WGSL::ConstantValue::dump(WTF::PrintStream &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v19;
  unsigned int v20;
  _QWORD v21[11];
  _QWORD *v22;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 80);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = *a2;
  if (!*a2)
  {
    v8 = 0;
    v7 = 0;
    goto LABEL_10;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = v5 + 32 * v6;
  if (*(_DWORD *)(v5 - 12))
  {
    v8 = *a2;
    if ((_DWORD)v6)
    {
      v9 = 32 * v6;
      v8 = v5;
      while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
      {
        v8 += 32;
        v9 -= 32;
        if (!v9)
        {
          v8 = v7;
          if (v5)
            goto LABEL_11;
          goto LABEL_14;
        }
      }
    }
LABEL_10:
    if (v5)
      goto LABEL_11;
    goto LABEL_14;
  }
  v8 = v5 + 32 * v6;
  v7 = v8;
  if (v5)
  {
LABEL_11:
    v10 = v5 + 32 * *(unsigned int *)(v5 - 4);
    if (v10 == v8)
      goto LABEL_25;
    goto LABEL_15;
  }
LABEL_14:
  v10 = 0;
  if (!v8)
  {
LABEL_25:
    v17 = *(_QWORD *)(v3 + 80);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  }
LABEL_15:
  v11 = 1;
  while (1)
  {
    if ((v11 & 1) == 0)
    {
      v12 = *(_QWORD *)(v3 + 80);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      WTF::printInternal();
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    }
    v13 = *(_QWORD *)(v3 + 80);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    WTF::printInternal();
    WTF::printInternal();
    v21[0] = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    v21[4] = v14;
    v21[5] = v14;
    v21[6] = v14;
    v21[7] = v14;
    v21[8] = v14;
    v21[9] = v14;
    v21[10] = v14;
    v15 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v15 == -1)
      break;
    v22 = v21;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL13ConstantValue4dumpERNS6_11PrintStreamEE3__0JZNKS9_4dumpESB_E3__1ZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10EEEEEJRKNS0_6__implIJfDhdijxbNS8_13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v22, v8 + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    v16 = v8 + 32;
    v8 = v7;
    if (v16 != v7)
    {
      v8 = v16;
      while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
      {
        v8 += 32;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
    v11 = 0;
    if (v8 == v10)
      goto LABEL_25;
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return WGSL::satisfies(v19, v20);
}

uint64_t WGSL::satisfies(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  if (!a2)
    return 1;
  v2 = a1;
  if (!a1)
    return 0;
  while (1)
  {
    v3 = *(_DWORD *)(v2 + 48);
    if (v3 != 10)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  result = 0;
  if (!v3)
  {
    switch(*(_BYTE *)v2)
    {
      case 0:
        result = a2 > 1;
        break;
      case 1:
        result = (a2 >> 2) & 1;
        break;
      case 2:
        result = (a2 >> 3) & 1;
        break;
      case 3:
        result = (a2 & 0x70) != 0;
        break;
      case 4:
        result = (a2 >> 6) & 1;
        break;
      case 5:
        result = (a2 >> 5) & 1;
        break;
      case 7:
        result = a2 & 1;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t WGSL::satisfyOrPromote(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = result;
  if (a2)
  {
    if (result)
    {
      while (1)
      {
        v4 = *(_DWORD *)(v3 + 48);
        if (v4 != 10)
          break;
        v3 = *(_QWORD *)(v3 + 8);
        if (!v3)
          return 0;
      }
      result = 0;
      if (!v4)
      {
        switch(*(_BYTE *)v3)
        {
          case 0:
            if (a2 < 2)
              return 0;
            result = v3;
            if ((a2 & 2) == 0)
            {
              if ((a2 & 4) != 0)
              {
                return a3[8];
              }
              else if ((a2 & 8) != 0)
              {
                return a3[9];
              }
              else if ((a2 & 0x10) != 0)
              {
                return a3[5];
              }
              else
              {
                if ((a2 & 0x20) != 0)
                  return a3[10];
                if ((a2 & 0x40) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182495328);
                }
                return a3[11];
              }
            }
            return result;
          case 1:
            v5 = (a2 & 4) == 0;
            goto LABEL_24;
          case 2:
            v5 = (a2 & 8) == 0;
            goto LABEL_24;
          case 3:
            if (a2 < 0x10)
              return 0;
            result = v3;
            if ((a2 & 0x10) == 0)
            {
              if ((a2 & 0x20) != 0)
              {
                return a3[10];
              }
              else
              {
                if ((a2 & 0x40) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182495308);
                }
                return a3[11];
              }
            }
            return result;
          case 4:
            v5 = (a2 & 0x40) == 0;
            goto LABEL_24;
          case 5:
            v5 = (a2 & 0x20) == 0;
            goto LABEL_24;
          case 7:
            v5 = (a2 & 1) == 0;
LABEL_24:
            if (v5)
              result = 0;
            else
              result = v3;
            break;
          default:
            return result;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t ***a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t result;

  v1 = ***a1;
  if (!v1)
    return 0;
  v2 = (*a1)[1];
  while (1)
  {
    v3 = *(_DWORD *)(v1 + 48);
    if (v3 != 10)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  result = 0;
  if (!v3)
  {
    switch(*(_BYTE *)v1)
    {
      case 0:
        result = v2[8];
        break;
      case 1:
      case 2:
      case 4:
      case 5:
      case 7:
        result = v1;
        break;
      case 3:
        result = v2[10];
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BOOL8 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned __int8 v27;
  _QWORD v28[2];
  uint64_t v29;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  v29 = *(_QWORD *)a2;
  v15 = &v29;
  v16 = v4;
  v17 = v4;
  v18 = v4;
  v19 = v4;
  v20 = &v29;
  v21 = v4;
  v22 = &v29;
  v23 = &v29;
  v24 = &v29;
  v25 = &v29;
  v5 = *(unsigned int *)(v29 + 48);
  if ((_DWORD)v5 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v14);
  }
  else
  {
    v28[0] = &v15;
    v6 = ((uint64_t (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(v28);
    if (!v6)
      return 0;
    v7 = v6;
    v8 = *(_QWORD *)(v3 + 16);
    v27 = *(_BYTE *)(a2 + 8);
    v26 = v6;
    v9 = ((unint64_t)v27 << 8) | 1;
    v15 = (uint64_t *)v9;
    v16 = v6;
    v10 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v8 + 16), (unsigned __int8 *)&v15);
    v11 = *(unsigned __int8 **)(v8 + 16);
    if (v11)
      v11 += 24 * *((unsigned int *)v11 - 1);
    if (v11 == v10 || (v12 = *((_QWORD *)v10 + 2)) == 0)
    {
      v12 = WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>(v8, &v26, (char *)&v27);
      v28[1] = v7;
      v29 = v12;
      v28[0] = v9;
      WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v8 + 16), (unsigned __int8 *)v28, &v29, (uint64_t)&v15);
    }
    return v12;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BOOL8 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29;
  _QWORD v30[2];
  uint64_t v31;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 24);
  v31 = *(_QWORD *)a2;
  v16 = &v31;
  v17 = v4;
  v18 = v4;
  v19 = v4;
  v20 = v4;
  v21 = &v31;
  v22 = v4;
  v23 = &v31;
  v24 = &v31;
  v25 = &v31;
  v26 = &v31;
  v5 = *(unsigned int *)(v31 + 48);
  if ((_DWORD)v5 == -1)
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v15);
  }
  else
  {
    v30[0] = &v16;
    v6 = ((uint64_t (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(v30);
    if (!v6)
      return 0;
    v7 = v6;
    v8 = *(_QWORD *)(v3 + 24);
    v9 = *(unsigned __int8 *)(a2 + 9);
    v29 = *(_BYTE *)(a2 + 8);
    v28 = v9;
    v27 = v6;
    v10 = (v9 << 16) | ((unint64_t)v29 << 8) | 2;
    v16 = (uint64_t *)v10;
    v17 = v6;
    v11 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v8 + 16), (unsigned __int8 *)&v16);
    v12 = *(unsigned __int8 **)(v8 + 16);
    if (v12)
      v12 += 24 * *((unsigned int *)v12 - 1);
    if (v12 == v11 || (v13 = *((_QWORD *)v11 + 2)) == 0)
    {
      v13 = WGSL::TypeStore::allocateType<WGSL::Types::Matrix,WGSL::Type const*&,unsigned char &,unsigned char &>(v8, &v27, (char *)&v29, &v28);
      v30[1] = v7;
      v31 = v13;
      v30[0] = v10;
      WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v8 + 16), (unsigned __int8 *)v30, &v31, (uint64_t)&v16);
    }
    return v13;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BOOL8 v7;
  uint64_t v8;
  _QWORD v9[11];
  _QWORD *v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 32);
  v8 = *a2;
  v9[0] = &v8;
  v9[1] = v4;
  v9[2] = v4;
  v9[3] = v4;
  v9[4] = v4;
  v9[5] = &v8;
  v9[6] = v4;
  v9[7] = &v8;
  v9[8] = &v8;
  v9[9] = &v8;
  v9[10] = &v8;
  v5 = *(unsigned int *)(v8 + 48);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v7);
  }
  else
  {
    v10 = v9;
    result = ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v10);
    if (result)
      return WGSL::TypeStore::arrayType(*(_QWORD *)(v3 + 32), result, a2[1], a2[2]);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1)
{
  return **(_QWORD **)(*(_QWORD *)a1 + 40);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WGSL::Type *v14;
  const WGSL::Type *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const WGSL::Type *v25;
  const WGSL::Type *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v39;

  v2 = *result;
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v3 == 2)
    return **(uint64_t ***)(v2 + 56);
  if (v3 != 1)
  {
    if (*(_BYTE *)(a2 + 8))
      return result;
    v5 = *(_QWORD *)(a2 + 16);
    if (!*(_DWORD *)v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1824958D8);
    }
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v2 + 48);
    v27 = v6;
    v28 = &v27;
    v29 = v7;
    v30 = v7;
    v31 = v7;
    v32 = v7;
    v33 = &v27;
    v34 = v7;
    v35 = &v27;
    v36 = &v27;
    v37 = &v27;
    v38 = &v27;
    v8 = *(unsigned int *)(v6 + 48);
    if ((_DWORD)v8 != -1)
    {
      v39 = &v28;
      v9 = ((uint64_t (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v39);
      v10 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)v10 <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1824958F8);
      }
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v2 + 48);
      v27 = v11;
      v28 = &v27;
      v29 = v12;
      v30 = v12;
      v31 = v12;
      v32 = v12;
      v33 = &v27;
      v34 = v12;
      v35 = &v27;
      v36 = &v27;
      v37 = &v27;
      v38 = &v27;
      v13 = *(unsigned int *)(v11 + 48);
      if ((_DWORD)v13 != -1)
      {
        v14 = (const WGSL::Type *)v9;
        v39 = &v28;
        v15 = (const WGSL::Type *)((uint64_t (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v39);
        result = 0;
        if (v14)
        {
          if (v15)
            return (uint64_t *)WGSL::TypeStore::frexpResultType(*(WGSL::TypeStore **)(v2 + 48), v14, v15);
        }
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
  }
  v16 = *(_QWORD *)(a2 + 16);
  if (!*(_DWORD *)v16)
  {
    __break(0xC471u);
    JUMPOUT(0x182495918);
  }
  v17 = *(_QWORD *)(v16 + 8);
  v18 = *(_QWORD *)(v2 + 48);
  v27 = v17;
  v28 = &v27;
  v29 = v18;
  v30 = v18;
  v31 = v18;
  v32 = v18;
  v33 = &v27;
  v34 = v18;
  v35 = &v27;
  v36 = &v27;
  v37 = &v27;
  v38 = &v27;
  v19 = *(unsigned int *)(v17 + 48);
  if ((_DWORD)v19 == -1)
    goto LABEL_24;
  v39 = &v28;
  v20 = ((uint64_t (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v39);
  v21 = *(_QWORD *)(a2 + 16);
  if (*(_DWORD *)v21 <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x182495938);
  }
  v22 = *(_QWORD *)(v21 + 16);
  v23 = *(_QWORD *)(v2 + 48);
  v27 = v22;
  v28 = &v27;
  v29 = v23;
  v30 = v23;
  v31 = v23;
  v32 = v23;
  v33 = &v27;
  v34 = v23;
  v35 = &v27;
  v36 = &v27;
  v37 = &v27;
  v38 = &v27;
  v24 = *(unsigned int *)(v22 + 48);
  if ((_DWORD)v24 == -1)
    goto LABEL_24;
  v25 = (const WGSL::Type *)v20;
  v39 = &v28;
  v26 = (const WGSL::Type *)((uint64_t (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v24])(&v39);
  result = 0;
  if (v25 && v26)
    return (uint64_t *)WGSL::TypeStore::modfResultType(*(WGSL::TypeStore **)(v2 + 48), v25, v26);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1)
{
  return **(_QWORD **)(*(_QWORD *)a1 + 64);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1)
{
  return **(_QWORD **)(*(_QWORD *)a1 + 80);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_0,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_1,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_2,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_3,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_4,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_5,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_6,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_7,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_8,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_9,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_10,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_11,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_12,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_13,WGSL::concretize(WGSL::Type const*,WGSL::TypeStore &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1)
{
  return **(_QWORD **)(*(_QWORD *)a1 + 72);
}

_QWORD *WGSL::EntryPointRewriter::rewrite(WGSL::EntryPointRewriter *this)
{
  BOOL v1;
  WGSL::EntryPointRewriter *v2;
  uint64_t v3;
  int v4;
  int v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int v13;
  _BOOL4 v14;
  uint64_t **v15;
  _DWORD *v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  WTF *v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  WTF *v41;
  _DWORD *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  WTF **v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  int v60;
  WTF *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  _DWORD *v73;
  _QWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  _DWORD *v104;
  _QWORD *v105;
  void *v106;
  _QWORD *v107;
  WTF *v108;
  WTF *v109;
  _DWORD *v110;
  _QWORD *v111;
  _DWORD *v112;
  _QWORD *v113;
  _DWORD *v114;
  uint64_t v115;
  void *v116;
  uint64_t **v117;
  uint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t *v125;
  __int16 v126;
  uint64_t v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  void *v136;
  void *v137;
  void *v138;
  uint64_t **v139;
  void *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  WTF *v145;
  uint64_t **v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  size_t v150;
  WGSL::EntryPointRewriter *v151;
  unint64_t v152;
  void *v153;
  unint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  unint64_t v157;
  void *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  void *v169;
  void *v170;
  void *v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  void *v175;
  void *v176;
  int v177;
  _QWORD *v178;
  _DWORD *v179;
  void *v180;
  _QWORD *v181;
  uint64_t v182;
  void *v183;
  uint64_t **v184;
  uint64_t v185;
  uint64_t **v186;
  uint64_t *v187;
  _QWORD *v188;
  _DWORD *v189;
  _QWORD *v190;
  _DWORD *v191;
  _QWORD *v192;
  _DWORD *v193;
  void *v194;
  _QWORD *v195;
  WTF *v196;
  _DWORD *v197;
  uint64_t v198;
  uint64_t v199;
  const void **v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  void *v210;
  void *v211;
  unint64_t v212;
  _QWORD *v213;
  unint64_t v214;
  uint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  __int128 *v219;
  _OWORD *v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  _QWORD *result;
  uint64_t v232;
  uint64_t v233;
  WGSL::AST::Builder *v234;
  uint64_t v235;
  WGSL::EntryPointRewriter *v236;
  unint64_t v237;
  void (**v238)(WGSL::AST::Identifier *__hidden);
  __int128 v239;
  _DWORD *v240;
  uint64_t v241;
  WTF *v242;
  int v243;
  int v244;
  char v245;
  _DWORD *v246;
  _QWORD *v247;
  WTF *v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;

  v2 = this;
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)v3 += 2;
    if (v4 < 0)
      goto LABEL_322;
    v1 = __OFADD__(v4, 4);
    v5 = v4 + 4;
    if (v1)
      goto LABEL_322;
  }
  else
  {
    v5 = 4;
    if (v1)
      goto LABEL_322;
  }
  if (__OFADD__(v5, 2))
  {
LABEL_322:
    v238 = 0;
    goto LABEL_340;
  }
  v6 = !v3 || (*(_BYTE *)(v3 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v5 + 2), v6, (int8x16_t *)"__", 2u, v3, (int8x16_t *)"_inT", 4u, &v238);
  v8 = (uint64_t **)v238;
  if (!v238)
    goto LABEL_340;
  v238 = 0;
  v9 = (_DWORD *)*((_QWORD *)v2 + 10);
  *((_QWORD *)v2 + 10) = v8;
  if (v9)
  {
    v7 = __OFSUB__(*v9, 2);
    if (*v9 != 2)
    {
      *v9 -= 2;
      v238 = 0;
      if (!v3)
        goto LABEL_21;
      goto LABEL_18;
    }
    WTF::StringImpl::destroy();
    v10 = (uint64_t **)v238;
    v238 = 0;
    if (v10)
    {
      v7 = __OFSUB__(*(_DWORD *)v10, 2);
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy();
        if (!v3)
          goto LABEL_21;
        goto LABEL_18;
      }
      *(_DWORD *)v10 -= 2;
    }
  }
  if (!v3)
    goto LABEL_21;
LABEL_18:
  v7 = __OFSUB__(*(_DWORD *)v3, 2);
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy();
  else
    *(_DWORD *)v3 -= 2;
LABEL_21:
  v11 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 48);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 4);
    *(_DWORD *)v11 += 2;
    if (v12 < 0)
      goto LABEL_326;
    v1 = __OFADD__(v12, 3);
    v13 = v12 + 3;
    if (v1)
      goto LABEL_326;
  }
  else
  {
    v13 = 3;
    if (v7)
      goto LABEL_326;
  }
  if (__OFADD__(v13, 2))
  {
LABEL_326:
    v238 = 0;
    goto LABEL_327;
  }
  v14 = !v11 || (*(_BYTE *)(v11 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v13 + 2), v14, (int8x16_t *)"__", 2u, v11, (int8x16_t *)"_in", 3u, &v238);
  v15 = (uint64_t **)v238;
  if (!v238)
  {
LABEL_327:
    __break(0xC471u);
    JUMPOUT(0x182496CCCLL);
  }
  v238 = 0;
  v16 = (_DWORD *)*((_QWORD *)v2 + 11);
  *((_QWORD *)v2 + 11) = v15;
  if (v16)
  {
    if (*v16 != 2)
    {
      *v16 -= 2;
      v238 = 0;
      if (!v11)
        goto LABEL_41;
      goto LABEL_38;
    }
    WTF::StringImpl::destroy();
    v17 = (uint64_t **)v238;
    v238 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy();
        if (!v11)
          goto LABEL_41;
        goto LABEL_38;
      }
      *(_DWORD *)v17 -= 2;
    }
  }
  if (!v11)
    goto LABEL_41;
LABEL_38:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy();
  else
    *(_DWORD *)v11 -= 2;
LABEL_41:
  v18 = *((_QWORD *)v2 + 2);
  v19 = *(uint64_t **)(v18 + 56);
  v20 = *(unsigned int *)(v18 + 68);
  if ((_DWORD)v20)
  {
    v21 = &v19[v20];
    while (1)
    {
      v22 = *v19;
      v251 = 0uLL;
      v239 = *(_OWORD *)(v22 + 40);
      v238 = &off_1E0FD2F10;
      v23 = *(_DWORD **)(v22 + 56);
      if (v23)
        *v23 += 2;
      v24 = *(_QWORD *)(v22 + 64);
      v240 = v23;
      v241 = v24;
      v25 = *(unsigned int *)(v22 + 84);
      v242 = 0;
      v243 = 0;
      v244 = v25;
      if ((_DWORD)v25)
      {
        if (v25 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182496D10);
        }
        v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v25));
        v243 = v25;
        v242 = v26;
        v27 = *(unsigned int *)(v22 + 84);
        if ((_DWORD)v27)
        {
          v28 = *(_QWORD *)(v22 + 72);
          v29 = (v27 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v29 < 3)
          {
            v30 = *(uint64_t **)(v22 + 72);
LABEL_56:
            v38 = (uint64_t *)(v28 + 8 * v27);
            do
            {
              v39 = *v30++;
              *(_QWORD *)v26 = v39;
              v26 = (WTF *)((char *)v26 + 8);
            }
            while (v30 != v38);
            goto LABEL_58;
          }
          v30 = *(uint64_t **)(v22 + 72);
          if ((unint64_t)v26 - v28 < 0x20)
            goto LABEL_56;
          v31 = v29 + 1;
          v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
          v33 = (WTF *)((char *)v26 + v32);
          v30 = (uint64_t *)(v28 + v32);
          v34 = (__int128 *)(v28 + 16);
          v35 = (_OWORD *)((char *)v26 + 16);
          v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v37 = *v34;
            *(v35 - 1) = *(v34 - 1);
            *v35 = v37;
            v34 += 2;
            v35 += 2;
            v36 -= 4;
          }
          while (v36);
          v26 = v33;
          if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_56;
        }
      }
LABEL_58:
      WGSL::EntryPointRewriter::visit((uint64_t)v2, (uint64_t)&v251, (unint64_t)&v238);
      v41 = v242;
      if (v242)
      {
        v242 = 0;
        v243 = 0;
        WTF::fastFree(v41, v40);
      }
      v42 = v240;
      v238 = &off_1E0FD2F10;
      v240 = 0;
      if (!v42)
        goto LABEL_63;
      if (*v42 != 2)
      {
        *v42 -= 2;
LABEL_63:
        v43 = HIDWORD(v251);
        v44 = (WTF *)v251;
        if (HIDWORD(v251))
          goto LABEL_66;
        goto LABEL_72;
      }
      WTF::StringImpl::destroy();
      v43 = HIDWORD(v251);
      v44 = (WTF *)v251;
      if (HIDWORD(v251))
      {
LABEL_66:
        v45 = 8 * v43;
        v46 = v44;
        do
        {
          v47 = *(_DWORD **)v46;
          *(_QWORD *)v46 = 0;
          if (v47)
          {
            if (*v47 == 2)
              WTF::StringImpl::destroy();
            else
              *v47 -= 2;
          }
          v46 = (WTF *)((char *)v46 + 8);
          v45 -= 8;
        }
        while (v45);
      }
LABEL_72:
      if (v44)
        WTF::fastFree(v44, v40);
      if (++v19 == v21)
      {
        v18 = *((_QWORD *)v2 + 2);
        v19 = *(uint64_t **)(v18 + 56);
        v48 = *(_DWORD *)(v18 + 68);
        goto LABEL_76;
      }
    }
  }
  v48 = 0;
LABEL_76:
  v49 = *((_QWORD *)v2 + 1);
  *(_QWORD *)(v18 + 56) = 0;
  v50 = (WTF **)(v18 + 56);
  v51 = *(_DWORD *)(v18 + 64);
  *(_QWORD *)(v18 + 64) = 0;
  v52 = *(unsigned int *)(v49 + 412);
  if ((_DWORD)v52 == *(_DWORD *)(v49 + 408))
  {
    v53 = v52 + (v52 >> 2);
    if (v53 >= 0x10)
      v54 = v53 + 1;
    else
      v54 = 16;
    if (v54 <= v52 + 1)
      v55 = v52 + 1;
    else
      v55 = v54;
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v49 + 400, v55);
    v56 = *(unsigned int *)(v49 + 412);
    v57 = *(_QWORD *)(v49 + 400) + 32 * v56;
    v58 = operator new(0x20uLL);
    *v58 = &off_1E0FD3698;
    v58[1] = v50;
    v58[2] = v19;
    *((_DWORD *)v58 + 6) = v51;
    *((_DWORD *)v58 + 7) = v48;
    *(_QWORD *)(v57 + 24) = v58;
    v60 = *(_DWORD *)(v18 + 64);
    *(_DWORD *)(v49 + 412) = v56 + 1;
    if (v60)
    {
      if (*(_DWORD *)(v18 + 68))
        *(_DWORD *)(v18 + 68) = 0;
      v61 = *v50;
      if (*v50)
      {
        *(_QWORD *)(v18 + 56) = 0;
        *(_DWORD *)(v18 + 64) = 0;
        WTF::fastFree(v61, v59);
      }
    }
    if (*(_BYTE *)v2 == 4)
      goto LABEL_183;
  }
  else
  {
    v62 = *(_QWORD *)(v49 + 400) + 32 * v52;
    v63 = operator new(0x20uLL);
    *v63 = &off_1E0FD3698;
    v63[1] = v50;
    v63[2] = v19;
    *((_DWORD *)v63 + 6) = v51;
    *((_DWORD *)v63 + 7) = v48;
    *(_QWORD *)(v62 + 24) = v63;
    *(_DWORD *)(v49 + 412) = v52 + 1;
    if (*(_BYTE *)v2 == 4)
      goto LABEL_183;
  }
  v64 = *(_QWORD **)(*((_QWORD *)v2 + 2) + 104);
  if (v64 && (*(unsigned int (**)(_QWORD *))(*v64 + 16))(v64) == 22)
  {
    v247 = v64;
    v65 = v64[3];
    if (v65 && *(_DWORD *)(v65 + 48) == 4)
    {
      *(_QWORD *)&v251 = v64[3];
      v238 = (void (**)(WGSL::AST::Identifier *__hidden))&v251;
      *(_QWORD *)&v239 = v2;
      *((_QWORD *)&v239 + 1) = &v247;
      if (*(_BYTE *)v2 == 2)
        WGSL::EntryPointRewriter::checkReturnType(void)::$_0::operator()((uint64_t ***)&v238, 8, (int8x16_t *)"FragmentOutput", 15);
      else
        WGSL::EntryPointRewriter::checkReturnType(void)::$_0::operator()((uint64_t ***)&v238, 4, (int8x16_t *)"VertexOutput", 13);
      goto LABEL_183;
    }
    if (*(_BYTE *)v2 == 2)
    {
      v66 = *((_QWORD *)v2 + 2);
      v67 = *(unsigned __int16 *)(v66 + 161);
      if (v67 >= 0x100)
      {
        v68 = *(_QWORD *)(v66 + 48);
        if (v68)
        {
          v69 = *(_DWORD *)(v68 + 4);
          *(_DWORD *)v68 += 2;
          if (v69 < 0)
            goto LABEL_330;
          v1 = __OFADD__(v69, 15);
          v70 = v69 + 15;
          if (v1)
            goto LABEL_330;
        }
        else
        {
          v70 = 15;
          if (__OFSUB__(v67, 256))
            goto LABEL_330;
        }
        v71 = (v70 + 2);
        if (!__OFADD__(v70, 2))
        {
          if (v68)
          {
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v71, (*(_BYTE *)(v68 + 16) & 4) != 0, (int8x16_t *)"__", 2u, v68, (int8x16_t *)"_FragmentOutput", 0xFu, &v246);
            if (v246)
            {
              if (*(_DWORD *)v68 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v68 -= 2;
LABEL_116:
              v72 = (_QWORD *)(*((_QWORD *)v2 + 1) + 312);
              v251 = 0uLL;
              v73 = (_DWORD *)v64[11];
              if (v73)
                *v73 += 2;
              v238 = &off_1E0FD2F10;
              v239 = 0uLL;
              v240 = v73;
              v74 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v72, &v251, (uint64_t)&v238);
              v75 = v240;
              v238 = &off_1E0FD2F10;
              v240 = 0;
              if (v75)
              {
                if (*v75 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v75 -= 2;
              }
              v74[3] = v64[3];
              v76 = *((_QWORD *)v2 + 1);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v77 = (uint64_t **)v238;
              v78 = *((_QWORD *)v2 + 2);
              v79 = *(unsigned int *)(v78 + 100);
              if ((_DWORD)v79)
              {
                if (v79 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182496D50);
                }
                v80 = WTF::fastMalloc((WTF *)(8 * v79));
                v81 = *(unsigned int *)(v78 + 100);
                if (!(_DWORD)v81)
                  goto LABEL_135;
                v82 = *(_QWORD *)(v78 + 88);
                v83 = (v81 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                if (v83 < 3)
                {
                  v84 = (_QWORD *)v80;
                  v85 = *(uint64_t **)(v78 + 88);
                }
                else
                {
                  v84 = (_QWORD *)v80;
                  v85 = *(uint64_t **)(v78 + 88);
                  if ((unint64_t)(v80 - v82) >= 0x20)
                  {
                    v86 = 0;
                    v87 = v83 + 1;
                    v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
                    v84 = (_QWORD *)(v80 + v88);
                    v85 = (uint64_t *)(v82 + v88);
                    v89 = v87 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v90 = (_OWORD *)(v80 + v86);
                      v91 = *(_OWORD *)(v82 + v86 + 16);
                      *v90 = *(_OWORD *)(v82 + v86);
                      v90[1] = v91;
                      v86 += 32;
                      v89 -= 4;
                    }
                    while (v89);
                    if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_135;
                  }
                }
                v92 = (uint64_t *)(v82 + 8 * v81);
                do
                {
                  v93 = *v85++;
                  *v84++ = v93;
                }
                while (v85 != v92);
              }
              else
              {
                v80 = 0;
              }
LABEL_135:
              v94 = *(_QWORD *)(v76 + 312);
              if ((unint64_t)(*(_QWORD *)(v76 + 320) - v94) <= 0x9F)
              {
                v233 = v76;
                v234 = (WGSL::AST::Builder *)(v76 + 312);
                v235 = v80;
                WGSL::AST::Builder::allocateArena(v234);
                v80 = v235;
                v94 = *(_QWORD *)v234;
                v76 = v233;
              }
              *(_QWORD *)v94 = &off_1E0FD3850;
              *(_QWORD *)(v94 + 8) = 0;
              *(_QWORD *)(v94 + 32) = 0;
              *(_QWORD *)(v94 + 40) = 0;
              *(_QWORD *)(v94 + 16) = 0;
              *(_QWORD *)(v94 + 24) = &off_1E0FD2F10;
              *(_QWORD *)(v94 + 64) = 0;
              *(_QWORD *)(v94 + 72) = 0;
              *(_QWORD *)(v94 + 48) = v77;
              *(_QWORD *)(v94 + 56) = &off_1E0FD2F10;
              if (v77)
                *(_DWORD *)v77 += 2;
              *(_QWORD *)(v94 + 80) = v77;
              *(_QWORD *)(v94 + 88) = v80;
              *(_DWORD *)(v94 + 96) = v79;
              *(_DWORD *)(v94 + 100) = v79;
              *(_BYTE *)(v94 + 124) = 0;
              *(_BYTE *)(v94 + 128) = 0;
              *(_BYTE *)(v94 + 132) = 0;
              *(_BYTE *)(v94 + 136) = 0;
              *(_WORD *)(v94 + 140) = 0;
              *(_BYTE *)(v94 + 144) = 0;
              *(_BYTE *)(v94 + 148) = 0;
              *(_BYTE *)(v94 + 152) = 0;
              *(_BYTE *)(v94 + 154) = 0;
              *(_QWORD *)(v94 + 104) = v74;
              *(_QWORD *)(v94 + 112) = 0;
              *(_BYTE *)(v94 + 120) = 0;
              *(_QWORD *)(v76 + 312) += 160;
              v95 = *(unsigned int *)(v76 + 356);
              if ((_DWORD)v95 != *(_DWORD *)(v76 + 352))
              {
                v102 = (_QWORD *)(*(_QWORD *)(v76 + 344) + 8 * v95);
LABEL_153:
                *v102 = v94;
                *(_DWORD *)(v76 + 356) = v95 + 1;
                v103 = (_QWORD *)(*((_QWORD *)v2 + 1) + 312);
                v251 = 0uLL;
                v104 = v246;
                if (v246)
                  *v246 += 2;
                v238 = &off_1E0FD2F10;
                v239 = 0uLL;
                v240 = v104;
                v105 = (_QWORD *)WTF::fastMalloc((WTF *)8);
                DWORD2(v250) = 1;
                *(_QWORD *)&v250 = v105;
                *v105 = v94;
                HIDWORD(v250) = 1;
                v248 = 0;
                v249 = 0;
                v245 = 9;
                v107 = WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(v103, &v251, (uint64_t)&v238, (uint64_t *)&v250, (uint64_t *)&v248, &v245);
                v108 = v248;
                if (v248)
                {
                  v248 = 0;
                  LODWORD(v249) = 0;
                  WTF::fastFree(v108, v106);
                }
                v109 = (WTF *)v250;
                if ((_QWORD)v250)
                {
                  *(_QWORD *)&v250 = 0;
                  DWORD2(v250) = 0;
                  WTF::fastFree(v109, v106);
                }
                v110 = v240;
                v238 = &off_1E0FD2F10;
                v240 = 0;
                if (v110)
                {
                  if (*v110 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v110 -= 2;
                }
                WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(*((_QWORD **)v2 + 1), *((_QWORD *)v2 + 1) + 64, (uint64_t)v107);
                v111 = (_QWORD *)(*((_QWORD *)v2 + 1) + 312);
                v251 = 0uLL;
                v112 = v246;
                if (v246)
                  *v246 += 2;
                v238 = &off_1E0FD2F10;
                v239 = 0uLL;
                v240 = v112;
                v113 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v111, &v251, (uint64_t)&v238);
                v114 = v240;
                v238 = &off_1E0FD2F10;
                v240 = 0;
                if (v114)
                {
                  if (*v114 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v114 -= 2;
                }
                v115 = *((_QWORD *)v2 + 1) + 96;
                v238 = 0;
                v113[3] = WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>(v115, (uint64_t)v107, &v238);
                v117 = (uint64_t **)v238;
                if (v238)
                {
                  v118 = *((unsigned int *)v238 - 1);
                  if ((_DWORD)v118)
                  {
                    v119 = (uint64_t **)v238;
                    do
                    {
                      v120 = *v119;
                      if (*v119 != (uint64_t *)-1)
                      {
                        *v119 = 0;
                        if (v120)
                        {
                          if (*(_DWORD *)v120 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v120 -= 2;
                        }
                      }
                      v119 += 2;
                      --v118;
                    }
                    while (v118);
                  }
                  WTF::fastFree((WTF *)(v117 - 2), v116);
                }
                WGSL::ShaderModule::replace<WGSL::AST::IdentifierExpression const,WGSL::AST::IdentifierExpression>(*((_QWORD *)v2 + 1), (uint64_t)v64, (uint64_t)v113);
                v121 = v246;
                v246 = 0;
                if (v121)
                {
                  if (*v121 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v121 -= 2;
                }
                goto LABEL_183;
              }
              v96 = v95 + (v95 >> 2);
              if (v96 >= 0x10)
                v97 = v96 + 1;
              else
                v97 = 16;
              if (v97 <= v95 + 1)
                v98 = v95 + 1;
              else
                v98 = v97;
              if (!(v98 >> 29))
              {
                v99 = *(void **)(v76 + 344);
                v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
                *(_DWORD *)(v76 + 352) = v98;
                *(_QWORD *)(v76 + 344) = v100;
                memcpy(v100, v99, 8 * v95);
                if (v99)
                {
                  if (*(void **)(v76 + 344) == v99)
                  {
                    *(_QWORD *)(v76 + 344) = 0;
                    *(_DWORD *)(v76 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v99, v101);
                }
                v95 = *(unsigned int *)(v76 + 356);
                v102 = (_QWORD *)(*(_QWORD *)(v76 + 344) + 8 * v95);
                goto LABEL_153;
              }
LABEL_340:
              __break(0xC471u);
              JUMPOUT(0x182496CB4);
            }
          }
          else
          {
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v71, 1, (int8x16_t *)"__", 2u, 0, (int8x16_t *)"_FragmentOutput", 0xFu, &v246);
            if (v246)
              goto LABEL_116;
          }
          __break(0xC471u);
          JUMPOUT(0x182496D48);
        }
LABEL_330:
        v246 = 0;
        __break(0xC471u);
        JUMPOUT(0x182496CE4);
      }
    }
  }
LABEL_183:
  v122 = *((unsigned int *)v2 + 9);
  if ((_DWORD)v122)
  {
    v123 = v122 << 6;
    v124 = (unsigned __int8 *)(*((_QWORD *)v2 + 3) + 56);
    do
    {
      v127 = *((_QWORD *)v2 + 1);
      v128 = (_DWORD *)*((_QWORD *)v124 - 4);
      if (v128)
        *v128 += 2;
      v129 = *((_QWORD *)v124 - 3);
      v130 = *(_QWORD *)(v127 + 312);
      if ((unint64_t)(*(_QWORD *)(v127 + 320) - v130) <= 0x67)
      {
        v139 = (uint64_t **)WTF::fastMalloc((WTF *)0x4000);
        v238 = (void (**)(WGSL::AST::Identifier *__hidden))v139;
        v141 = *(unsigned int *)(v127 + 340);
        if ((_DWORD)v141 == *(_DWORD *)(v127 + 336))
        {
          v142 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v127 + 328, v141 + 1, (unint64_t)&v238);
          v141 = *(unsigned int *)(v127 + 340);
          v143 = *(_QWORD *)(v127 + 328);
          v144 = *(_QWORD *)v142;
          *(_QWORD *)v142 = 0;
          *(_QWORD *)(v143 + 8 * v141) = v144;
          v145 = (WTF *)v238;
        }
        else
        {
          v146 = v139;
          v145 = 0;
          v147 = *(_QWORD *)(v127 + 328);
          v238 = 0;
          *(_QWORD *)(v147 + 8 * v141) = v146;
        }
        *(_DWORD *)(v127 + 340) = v141 + 1;
        WTF::fastFree(v145, v140);
        v148 = *(unsigned int *)(v127 + 340);
        if (!(_DWORD)v148)
        {
          __break(0xC471u);
          JUMPOUT(0x182496D30);
        }
        v130 = *(_QWORD *)(*(_QWORD *)(v127 + 328) + 8 * v148 - 8);
        *(_QWORD *)(v127 + 312) = v130;
        *(_QWORD *)(v127 + 320) = v130 + 0x4000;
      }
      *(_QWORD *)(v130 + 8) = 0;
      *(_QWORD *)(v130 + 16) = 0;
      *(_QWORD *)v130 = &off_1E0FD35E0;
      *(_BYTE *)(v130 + 24) = 0;
      *(_QWORD *)(v130 + 32) = &off_1E0FD2F10;
      *(_QWORD *)(v130 + 40) = 0;
      *(_QWORD *)(v130 + 48) = 0;
      *(_QWORD *)(v130 + 56) = v128;
      *(_QWORD *)(v130 + 72) = 0;
      *(_QWORD *)(v130 + 80) = 0;
      *(_QWORD *)(v130 + 64) = v129;
      v131 = *((_QWORD *)v124 - 2);
      *((_QWORD *)v124 - 2) = 0;
      *(_QWORD *)(v130 + 72) = v131;
      LODWORD(v131) = *((_DWORD *)v124 - 2);
      *((_DWORD *)v124 - 2) = 0;
      *(_DWORD *)(v130 + 80) = v131;
      LODWORD(v131) = *((_DWORD *)v124 - 1);
      *((_DWORD *)v124 - 1) = 0;
      *(_BYTE *)(v130 + 93) = 0;
      *(_BYTE *)(v130 + 96) = 0;
      *(_BYTE *)(v130 + 100) = 0;
      *(_DWORD *)(v130 + 84) = v131;
      *(_DWORD *)(v130 + 88) = 0;
      *(_QWORD *)(v127 + 312) += 104;
      v132 = *(unsigned int *)(v127 + 356);
      if ((_DWORD)v132 == *(_DWORD *)(v127 + 352))
      {
        v133 = v132 + (v132 >> 2);
        if (v133 >= 0x10)
          v134 = v133 + 1;
        else
          v134 = 16;
        if (v134 <= v132 + 1)
          v135 = v132 + 1;
        else
          v135 = v134;
        if (v135 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182496D18);
        }
        v136 = *(void **)(v127 + 344);
        v137 = (void *)WTF::fastMalloc((WTF *)(8 * v135));
        *(_DWORD *)(v127 + 352) = v135;
        *(_QWORD *)(v127 + 344) = v137;
        memcpy(v137, v136, 8 * v132);
        if (v136)
        {
          if (*(void **)(v127 + 344) == v136)
          {
            *(_QWORD *)(v127 + 344) = 0;
            *(_DWORD *)(v127 + 352) = 0;
          }
          WTF::fastFree((WTF *)v136, v138);
        }
        v132 = *(unsigned int *)(v127 + 356);
        v125 = (uint64_t *)(*(_QWORD *)(v127 + 344) + 8 * v132);
      }
      else
      {
        v125 = (uint64_t *)(*(_QWORD *)(v127 + 344) + 8 * v132);
      }
      *v125 = v130;
      *(_DWORD *)(v127 + 356) = v132 + 1;
      v126 = *v124;
      v124 += 64;
      *(_WORD *)(v130 + 89) = v126 | 0x100;
      WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(*((_QWORD **)v2 + 1), *((_QWORD *)v2 + 2) + 56, v130);
      v123 -= 64;
    }
    while (v123);
  }
  v149 = *((unsigned int *)v2 + 13);
  if ((_DWORD)v149)
  {
    v150 = 0;
    v151 = v2;
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v251 = 0uLL;
    v236 = v151;
    v155 = 56 * v149;
    v156 = (_DWORD *)(*((_QWORD *)v151 + 5) + 52);
    do
    {
      v159 = v152;
      v160 = *((_QWORD *)v236 + 1);
      v161 = *(_QWORD *)(v156 - 5);
      v162 = *(_QWORD *)(v160 + 312);
      if ((unint64_t)(*(_QWORD *)(v160 + 320) - v162) <= 0x9F)
      {
        WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v160 + 312));
        v162 = *(_QWORD *)(v160 + 312);
      }
      v237 = v154;
      *(_QWORD *)v162 = &off_1E0FD3850;
      *(_QWORD *)(v162 + 8) = 0;
      *(_QWORD *)(v162 + 16) = 0;
      *(_QWORD *)(v162 + 24) = &off_1E0FD2EE8;
      *(_OWORD *)(v162 + 32) = *(_OWORD *)(v156 - 11);
      *(_QWORD *)(v162 + 24) = &off_1E0FD2F10;
      v163 = *(_DWORD **)(v156 - 7);
      *(_QWORD *)(v156 - 7) = 0;
      *(_OWORD *)(v162 + 64) = *(_OWORD *)(v162 + 32);
      *(_QWORD *)(v162 + 48) = v163;
      *(_QWORD *)(v162 + 56) = &off_1E0FD2F10;
      if (v163)
        *v163 += 2;
      *(_QWORD *)(v162 + 88) = 0;
      *(_QWORD *)(v162 + 96) = 0;
      *(_QWORD *)(v162 + 80) = v163;
      v164 = *(_QWORD *)(v156 - 3);
      *(_QWORD *)(v156 - 3) = 0;
      *(_QWORD *)(v162 + 88) = v164;
      LODWORD(v164) = *(v156 - 1);
      *(v156 - 1) = 0;
      *(_DWORD *)(v162 + 96) = v164;
      LODWORD(v164) = *v156;
      *v156 = 0;
      *(_DWORD *)(v162 + 100) = v164;
      *(_BYTE *)(v162 + 124) = 0;
      *(_BYTE *)(v162 + 128) = 0;
      *(_BYTE *)(v162 + 132) = 0;
      *(_BYTE *)(v162 + 136) = 0;
      *(_WORD *)(v162 + 140) = 0;
      *(_BYTE *)(v162 + 144) = 0;
      *(_BYTE *)(v162 + 148) = 0;
      *(_BYTE *)(v162 + 152) = 0;
      *(_BYTE *)(v162 + 154) = 0;
      *(_BYTE *)(v162 + 120) = 0;
      *(_QWORD *)(v162 + 104) = v161;
      *(_QWORD *)(v162 + 112) = 0;
      *(_QWORD *)(v160 + 312) += 160;
      v165 = *(unsigned int *)(v160 + 356);
      if ((_DWORD)v165 == *(_DWORD *)(v160 + 352))
      {
        v166 = v165 + (v165 >> 2);
        if (v166 >= 0x10)
          v167 = v166 + 1;
        else
          v167 = 16;
        if (v167 <= v165 + 1)
          v168 = v165 + 1;
        else
          v168 = v167;
        if (v168 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182496D20);
        }
        v169 = *(void **)(v160 + 344);
        v170 = (void *)WTF::fastMalloc((WTF *)(8 * v168));
        *(_DWORD *)(v160 + 352) = v168;
        *(_QWORD *)(v160 + 344) = v170;
        memcpy(v170, v169, 8 * v165);
        if (v169)
        {
          if (*(void **)(v160 + 344) == v169)
          {
            *(_QWORD *)(v160 + 344) = 0;
            *(_DWORD *)(v160 + 352) = 0;
          }
          WTF::fastFree((WTF *)v169, v171);
        }
        v165 = *(unsigned int *)(v160 + 356);
        v172 = (_QWORD *)(*(_QWORD *)(v160 + 344) + 8 * v165);
      }
      else
      {
        v172 = (_QWORD *)(*(_QWORD *)(v160 + 344) + 8 * v165);
      }
      *v172 = v162;
      *(_DWORD *)(v160 + 356) = v165 + 1;
      v152 = v159 + 1;
      v154 = v237;
      if (v159 == v237)
      {
        v173 = v159 + (v159 >> 2);
        if (v173 >= 0x10)
          v174 = v173 + 1;
        else
          v174 = 16;
        if (v174 <= v152)
          v154 = v159 + 1;
        else
          v154 = v174;
        if (v154 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182496D28);
        }
        v175 = (void *)WTF::fastMalloc((WTF *)(8 * v154));
        v154 = v154;
        memcpy(v175, v153, v150);
        if (v153)
        {
          if (v175 == v153)
            v157 = 0;
          else
            v157 = v154;
          if (v175 == v153)
            v158 = 0;
          else
            v158 = v175;
          WTF::fastFree((WTF *)v153, v176);
          v153 = v158;
          v154 = v157;
        }
        else
        {
          v153 = v175;
        }
      }
      *((_QWORD *)v153 + v159) = v162;
      v150 += 8;
      v156 += 14;
      v155 -= 56;
    }
    while (v155);
    *((_QWORD *)&v251 + 1) = __PAIR64__(v152, v154);
    *(_QWORD *)&v251 = v153;
    LOBYTE(v247) = 0;
    v2 = v236;
    v177 = *(unsigned __int8 *)v236;
    if (v177 == 1)
    {
      LOBYTE(v247) = 1;
      v178 = (_QWORD *)(*((_QWORD *)v236 + 1) + 312);
      v250 = 0uLL;
      v179 = (_DWORD *)*((_QWORD *)v236 + 10);
      if (!v179)
        goto LABEL_253;
      goto LABEL_252;
    }
    if (v177 != 2)
    {
      if (v177 != 4)
        goto LABEL_251;
      LOBYTE(v177) = 3;
    }
    LOBYTE(v247) = v177;
LABEL_251:
    v178 = (_QWORD *)(*((_QWORD *)v236 + 1) + 312);
    v250 = 0uLL;
    v179 = (_DWORD *)*((_QWORD *)v236 + 10);
    if (!v179)
    {
LABEL_253:
      v238 = &off_1E0FD2F10;
      v239 = 0uLL;
      v240 = v179;
      v248 = 0;
      v249 = 0;
      v181 = WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(v178, &v250, (uint64_t)&v238, (uint64_t *)&v251, (uint64_t *)&v248, (char *)&v247);
      if (v248)
        WTF::fastFree(v248, v180);
      if (v240)
      {
        if (*v240 == 2)
          WTF::StringImpl::destroy();
        else
          *v240 -= 2;
      }
      WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(*((_QWORD **)v236 + 1), *((_QWORD *)v236 + 1) + 64, (uint64_t)v181);
      v182 = *((_QWORD *)v236 + 1) + 96;
      v238 = 0;
      *((_QWORD *)v236 + 9) = WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>(v182, (uint64_t)v181, &v238);
      v184 = (uint64_t **)v238;
      if (v238)
      {
        v185 = *((unsigned int *)v238 - 1);
        if ((_DWORD)v185)
        {
          v186 = (uint64_t **)v238;
          do
          {
            v187 = *v186;
            if (*v186 != (uint64_t *)-1)
            {
              *v186 = 0;
              if (v187)
              {
                if (*(_DWORD *)v187 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v187 -= 2;
              }
            }
            v186 += 2;
            --v185;
          }
          while (v185);
        }
        WTF::fastFree((WTF *)(v184 - 2), v183);
      }
      if ((_QWORD)v251)
        WTF::fastFree((WTF *)v251, v183);
      v188 = (_QWORD *)(*((_QWORD *)v236 + 1) + 312);
      v251 = 0uLL;
      v189 = (_DWORD *)*((_QWORD *)v236 + 10);
      if (v189)
        *v189 += 2;
      v238 = &off_1E0FD2F10;
      v239 = 0uLL;
      v240 = v189;
      v190 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v188, &v251, (uint64_t)&v238);
      v191 = v240;
      v238 = &off_1E0FD2F10;
      v240 = 0;
      if (v191)
      {
        if (*v191 == 2)
          WTF::StringImpl::destroy();
        else
          *v191 -= 2;
      }
      v190[3] = *((_QWORD *)v236 + 9);
      v192 = (_QWORD *)(*((_QWORD *)v236 + 1) + 312);
      v251 = 0uLL;
      v193 = (_DWORD *)*((_QWORD *)v236 + 11);
      if (v193)
        *v193 += 2;
      v238 = &off_1E0FD2F10;
      v239 = 0uLL;
      v240 = v193;
      v250 = 0uLL;
      LOBYTE(v248) = 1;
      v195 = WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>(v192, &v251, (uint64_t)&v238, (uint64_t)v190, (uint64_t *)&v250, (char *)&v248);
      v196 = (WTF *)v250;
      if ((_QWORD)v250)
      {
        *(_QWORD *)&v250 = 0;
        DWORD2(v250) = 0;
        WTF::fastFree(v196, v194);
      }
      v197 = v240;
      v238 = &off_1E0FD2F10;
      v240 = 0;
      if (v197)
      {
        if (*v197 == 2)
          WTF::StringImpl::destroy();
        else
          *v197 -= 2;
      }
      WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(*((_QWORD **)v236 + 1), *((_QWORD *)v236 + 2) + 56, (uint64_t)v195);
      goto LABEL_286;
    }
LABEL_252:
    *v179 += 2;
    goto LABEL_253;
  }
LABEL_286:
  v198 = *((_QWORD *)v2 + 1);
  v199 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 112);
  v200 = (const void **)(v199 + 40);
  v201 = *((_QWORD *)v2 + 7);
  v202 = *((unsigned int *)v2 + 17);
  v203 = *(unsigned int *)(v199 + 48);
  v204 = *(unsigned int *)(v199 + 52);
  v205 = v204 + v202;
  if (v204 + v202 > v203)
  {
    v206 = v203 + (v203 >> 2);
    if (v206 >= 0x10)
      v207 = v206 + 1;
    else
      v207 = 16;
    if (v207 <= v205)
      v208 = v204 + v202;
    else
      v208 = v207;
    if (v208 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x182496D40);
    }
    v209 = (void *)*v200;
    v210 = (void *)WTF::fastMalloc((WTF *)(8 * v208));
    *(_DWORD *)(v199 + 48) = v208;
    *(_QWORD *)(v199 + 40) = v210;
    memcpy(v210, v209, 8 * v204);
    if (v209)
    {
      if (*v200 == v209)
      {
        *(_QWORD *)(v199 + 40) = 0;
        *(_DWORD *)(v199 + 48) = 0;
      }
      WTF::fastFree((WTF *)v209, v211);
    }
  }
  v212 = *(unsigned int *)(v199 + 52);
  if (v205 < v212)
  {
    __break(0xC471u);
    JUMPOUT(0x182496D38);
  }
  v213 = *v200;
  memmove((char *)*v200 + 8 * v202, *v200, 8 * v212);
  if ((_DWORD)v202)
  {
    v214 = (v202 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v214 < 3)
    {
      v215 = (uint64_t *)v201;
    }
    else
    {
      v215 = (uint64_t *)v201;
      if ((unint64_t)v213 - v201 >= 0x20)
      {
        v216 = v214 + 1;
        v217 = v216 & 0x3FFFFFFFFFFFFFFCLL;
        v218 = &v213[v217];
        v215 = (uint64_t *)(v201 + v217 * 8);
        v219 = (__int128 *)(v201 + 16);
        v220 = v213 + 2;
        v221 = v216 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v222 = *v219;
          *(v220 - 1) = *(v219 - 1);
          *v220 = v222;
          v219 += 2;
          v220 += 2;
          v221 -= 4;
        }
        while (v221);
        v213 = v218;
        if (v216 == (v216 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_308;
      }
    }
    do
    {
      v223 = *v215++;
      *v213++ = v223;
    }
    while (v215 != (uint64_t *)(v201 + 8 * v202));
  }
LABEL_308:
  *(_DWORD *)(v199 + 52) = v205;
  v224 = (_QWORD *)(v198 + 400);
  v225 = *((unsigned int *)v2 + 17);
  v226 = *(unsigned int *)(v198 + 412);
  if ((_DWORD)v226 == *(_DWORD *)(v198 + 408))
  {
    v227 = v226 + (v226 >> 2);
    if (v227 >= 0x10)
      v228 = v227 + 1;
    else
      v228 = 16;
    if (v228 <= v226 + 1)
      v229 = v226 + 1;
    else
      v229 = v228;
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v224, v229);
    v226 = *(unsigned int *)(v198 + 412);
    v230 = *(_QWORD *)(v198 + 400) + 32 * v226;
    result = operator new(0x20uLL);
    *result = &off_1E0FD3650;
    result[1] = v200;
    result[2] = 0;
    result[3] = v225;
    *(_QWORD *)(v230 + 24) = result;
  }
  else
  {
    v232 = *v224 + 32 * v226;
    result = operator new(0x20uLL);
    *result = &off_1E0FD3650;
    result[1] = v200;
    result[2] = 0;
    result[3] = v225;
    *(_QWORD *)(v232 + 24) = result;
  }
  *(_DWORD *)(v198 + 412) = v226 + 1;
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>(_QWORD *this, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6)
{
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;

  v11 = this;
  v12 = *this;
  if (this[1] - *this <= 0x67uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v12 = *v11;
  }
  v13 = *a6;
  *(_OWORD *)(v12 + 8) = *a2;
  *(_QWORD *)v12 = &off_1E0FD35E0;
  *(_BYTE *)(v12 + 24) = v13;
  *(_QWORD *)(v12 + 32) = &off_1E0FD2EE8;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v12 + 32) = &off_1E0FD2F10;
  v14 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(v12 + 56) = v14;
  *(_QWORD *)(v12 + 64) = a4;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  v15 = *a5;
  *a5 = 0;
  *(_QWORD *)(v12 + 72) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v12 + 80) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_BYTE *)(v12 + 93) = 0;
  *(_BYTE *)(v12 + 96) = 0;
  *(_BYTE *)(v12 + 100) = 0;
  *(_DWORD *)(v12 + 84) = v15;
  *(_DWORD *)(v12 + 88) = 0;
  *v11 += 104;
  v16 = *((unsigned int *)v11 + 11);
  if ((_DWORD)v16 != *((_DWORD *)v11 + 10))
  {
    v23 = (_QWORD *)(v11[4] + 8 * v16);
LABEL_17:
    *v23 = v12;
    *((_DWORD *)v11 + 11) = v16 + 1;
    return (_QWORD *)v12;
  }
  v17 = v16 + (v16 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v16 + 1)
    v19 = v16 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = (void *)v11[4];
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *((_DWORD *)v11 + 10) = v19;
    v11[4] = v21;
    memcpy(v21, v20, 8 * v16);
    if (v20)
    {
      if ((void *)v11[4] == v20)
      {
        v11[4] = 0;
        *((_DWORD *)v11 + 10) = 0;
      }
      WTF::fastFree((WTF *)v20, v22);
    }
    v16 = *((unsigned int *)v11 + 11);
    v23 = (_QWORD *)(v11[4] + 8 * v16);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  v5 = result;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6 + 1)
      v9 = v6 + 1;
    else
      v9 = v8;
    if (v9 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v10 = *(void **)a2;
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a2 + 8) = v9;
    *(_QWORD *)a2 = v11;
    memcpy(v11, v10, 8 * v6);
    if (v10)
    {
      if (*(void **)a2 == v10)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v10, v12);
    }
    v6 = *(unsigned int *)(a2 + 12);
    v13 = (_QWORD *)(*(_QWORD *)a2 + 8 * v6);
  }
  else
  {
    v13 = (_QWORD *)(*(_QWORD *)a2 + 8 * v6);
  }
  *v13 = a3;
  *(_DWORD *)(a2 + 12) = v6 + 1;
  result = v5 + 50;
  v14 = *((unsigned int *)v5 + 103);
  if ((_DWORD)v14 == *((_DWORD *)v5 + 102))
  {
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v14 + 1)
      v17 = v14 + 1;
    else
      v17 = v16;
    result = (_QWORD *)WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)result, v17);
    v14 = *((unsigned int *)v5 + 103);
    v18 = (_QWORD *)(v5[50] + 32 * v14);
  }
  else
  {
    v18 = (_QWORD *)(*result + 32 * v14);
  }
  *v18 = &off_1E0FD3608;
  v18[1] = a2;
  v18[3] = v18;
  *((_DWORD *)v5 + 103) = v14 + 1;
  return result;
}

int *WGSL::EntryPointRewriter::visit(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int *result;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  WTF::String *v33;
  int v34;
  unint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _DWORD *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  _DWORD *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  WTF *v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t *v80;
  uint64_t v81;
  void *v82;
  WTF *v83;
  int *v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  WTF *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 v100;
  _DWORD *v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  WTF *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  WTF *v125;
  uint64_t v126;
  int *v127;
  int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  unint64_t v134;
  __int128 v135;
  uint64_t v136;
  WTF *v137;
  uint64_t v138;
  void (**v139)(WGSL::AST::Identifier *__hidden);
  __int128 v140;
  int *v141;
  uint64_t v142;
  WTF *v143;
  int v144;
  int v145;
  char v146;
  uint64_t v147;
  int *v148;

  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_DWORD **)(v6 + 24);
  if (!v7 || v7[12] != 4)
  {
    v20 = *(unsigned int *)(a3 + 52);
    if (!(_DWORD)v20)
    {
LABEL_26:
      result = WGSL::EntryPointRewriter::materialize(a1, a2, a3, 0, 0);
      v25 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v25 == *(_DWORD *)(a1 + 48))
      {
        result = (int *)WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 40, v25 + 1, a3);
        v26 = *(_QWORD *)(a1 + 40) + 56 * *(unsigned int *)(a1 + 52);
        *(_QWORD *)v26 = &off_1E0FD2EE8;
        *(_OWORD *)(v26 + 8) = *(_OWORD *)(result + 2);
        *(_QWORD *)v26 = &off_1E0FD2F10;
        v27 = *(_OWORD *)(result + 6);
        *((_QWORD *)result + 3) = 0;
        *(_OWORD *)(v26 + 24) = v27;
        *(_QWORD *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        v28 = *((_QWORD *)result + 5);
        *((_QWORD *)result + 5) = 0;
        *(_QWORD *)(v26 + 40) = v28;
        LODWORD(v28) = result[12];
        result[12] = 0;
        *(_DWORD *)(v26 + 48) = v28;
        v29 = result[13];
        result[13] = 0;
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 40) + 56 * v25;
        *(_QWORD *)v26 = &off_1E0FD2EE8;
        *(_OWORD *)(v26 + 8) = *(_OWORD *)(a3 + 8);
        *(_QWORD *)v26 = &off_1E0FD2F10;
        v30 = *(_OWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
        *(_OWORD *)(v26 + 24) = v30;
        *(_QWORD *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        v31 = *(_QWORD *)(a3 + 40);
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(v26 + 40) = v31;
        LODWORD(v31) = *(_DWORD *)(a3 + 48);
        *(_DWORD *)(a3 + 48) = 0;
        *(_DWORD *)(v26 + 48) = v31;
        v29 = *(_DWORD *)(a3 + 52);
        *(_DWORD *)(a3 + 52) = 0;
      }
      *(_DWORD *)(v26 + 52) = v29;
      ++*(_DWORD *)(a1 + 52);
      return result;
    }
    v21 = *(_QWORD **)(a3 + 40);
    v22 = 8 * v20;
    while (1)
    {
      v23 = *v21;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v21 + 16))(*v21) == 3)
        break;
      ++v21;
      v22 -= 8;
      if (!v22)
        goto LABEL_26;
    }
    v32 = *(_BYTE *)(v23 + 24);
    if (*(_DWORD *)(a2 + 12))
    {
      v33 = (WTF::String *)*(unsigned int *)(a1 + 96);
      *(_DWORD *)(a1 + 96) = (_DWORD)v33 + 1;
      WTF::String::number(v33);
      if (v147)
      {
        v34 = *(_DWORD *)(v147 + 4);
        if (v34 < 0 || (v35 = (v34 + 9), __OFADD__(v34, 9)))
        {
          v148 = 0;
          goto LABEL_156;
        }
        v36 = (*(unsigned __int8 *)(v147 + 16) >> 2) & 1;
      }
      else
      {
        v36 = 1;
        v35 = 9;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v35, v36, (int8x16_t *)"__builtin", 9u, v147, &v148);
      if (v148)
      {
        v101 = (_DWORD *)v147;
        v147 = 0;
        if (v101)
        {
          if (*v101 == 2)
            WTF::StringImpl::destroy();
          else
            *v101 -= 2;
        }
        WGSL::EntryPointRewriter::materialize(a1, a2, a3, 1, &v148);
        v102 = v148;
        if (v148)
          *v148 += 2;
        v139 = &off_1E0FD2F10;
        v140 = 0uLL;
        v141 = v102;
        v103 = *(_QWORD *)(a3 + 32);
        v104 = *(unsigned int *)(a3 + 52);
        v143 = 0;
        v144 = 0;
        v142 = v103;
        v145 = v104;
        if (!(_DWORD)v104)
        {
          v105 = 0;
          goto LABEL_130;
        }
        if (v104 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182497B4CLL);
        }
        v105 = (WTF *)WTF::fastMalloc((WTF *)(8 * v104));
        v144 = v104;
        v143 = v105;
        v106 = *(unsigned int *)(a3 + 52);
        if ((_DWORD)v106)
        {
          v107 = *(_QWORD *)(a3 + 40);
          v108 = (v106 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v108 < 3)
          {
            v109 = v105;
            v110 = *(uint64_t **)(a3 + 40);
          }
          else
          {
            v109 = v105;
            v110 = *(uint64_t **)(a3 + 40);
            if ((unint64_t)v105 - v107 >= 0x20)
            {
              v111 = 0;
              v112 = v108 + 1;
              v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
              v109 = (WTF *)((char *)v105 + v113);
              v110 = (uint64_t *)(v107 + v113);
              v114 = v112 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v115 = (_OWORD *)((char *)v105 + v111);
                v116 = *(_OWORD *)(v107 + v111 + 16);
                *v115 = *(_OWORD *)(v107 + v111);
                v115[1] = v116;
                v111 += 32;
                v114 -= 4;
              }
              while (v114);
              if (v112 == (v112 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_130;
            }
          }
          v117 = (uint64_t *)(v107 + 8 * v106);
          do
          {
            v118 = *v110++;
            *(_QWORD *)v109 = v118;
            v109 = (WTF *)((char *)v109 + 8);
          }
          while (v110 != v117);
        }
LABEL_130:
        v146 = v32;
        v119 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v119 == *(_DWORD *)(a1 + 32))
        {
          v120 = WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v119 + 1, (unint64_t)&v139);
          v122 = *(_QWORD *)(a1 + 24) + ((unint64_t)*(unsigned int *)(a1 + 36) << 6);
          *(_QWORD *)v122 = &off_1E0FD2EE8;
          *(_OWORD *)(v122 + 8) = *(_OWORD *)(v120 + 8);
          *(_QWORD *)v122 = &off_1E0FD2F10;
          v123 = *(_OWORD *)(v120 + 24);
          *(_QWORD *)(v120 + 24) = 0;
          *(_OWORD *)(v122 + 24) = v123;
          *(_QWORD *)(v122 + 40) = 0;
          *(_QWORD *)(v122 + 48) = 0;
          v124 = *(_QWORD *)(v120 + 40);
          *(_QWORD *)(v120 + 40) = 0;
          *(_QWORD *)(v122 + 40) = v124;
          LODWORD(v124) = *(_DWORD *)(v120 + 48);
          *(_DWORD *)(v120 + 48) = 0;
          *(_DWORD *)(v122 + 48) = v124;
          LODWORD(v124) = *(_DWORD *)(v120 + 52);
          *(_DWORD *)(v120 + 52) = 0;
          *(_DWORD *)(v122 + 52) = v124;
          *(_BYTE *)(v122 + 56) = *(_BYTE *)(v120 + 56);
          v125 = v143;
          ++*(_DWORD *)(a1 + 36);
          if (v125)
          {
            v143 = 0;
            v144 = 0;
            WTF::fastFree(v125, v121);
          }
        }
        else
        {
          v126 = *(_QWORD *)(a1 + 24) + (v119 << 6);
          *(_OWORD *)(v126 + 8) = v140;
          *(_QWORD *)v126 = &off_1E0FD2F10;
          v141 = 0;
          *(_QWORD *)(v126 + 24) = v102;
          *(_QWORD *)(v126 + 32) = v103;
          v143 = 0;
          *(_QWORD *)(v126 + 40) = v105;
          v144 = 0;
          *(_DWORD *)(v126 + 48) = v104;
          v145 = 0;
          *(_DWORD *)(v126 + 52) = v104;
          *(_BYTE *)(v126 + 56) = v32;
          ++*(_DWORD *)(a1 + 36);
        }
        v127 = v141;
        v139 = &off_1E0FD2F10;
        v141 = 0;
        if (v127)
        {
          if (*v127 == 2)
          {
            WTF::StringImpl::destroy();
            result = v148;
            v148 = 0;
            if (!result)
              return result;
LABEL_140:
            v128 = *result - 2;
            if (*result != 2)
              goto LABEL_141;
            return (int *)WTF::StringImpl::destroy();
          }
          *v127 -= 2;
        }
        result = v148;
        v148 = 0;
        if (!result)
          return result;
        goto LABEL_140;
      }
LABEL_156:
      __break(0xC471u);
      JUMPOUT(0x182497B2CLL);
    }
    v140 = *(_OWORD *)(a3 + 8);
    v139 = &off_1E0FD2F10;
    v86 = *(int **)(a3 + 24);
    if (v86)
      *v86 += 2;
    v87 = *(_QWORD *)(a3 + 32);
    v141 = v86;
    v142 = v87;
    v88 = *(unsigned int *)(a3 + 52);
    v143 = 0;
    v144 = 0;
    v145 = v88;
    if (!(_DWORD)v88)
    {
      v89 = 0;
      goto LABEL_145;
    }
    if (v88 >> 29)
    {
      __break(0xC471u);
LABEL_162:
      JUMPOUT(0x182497B18);
    }
    v89 = (WTF *)WTF::fastMalloc((WTF *)(8 * v88));
    v144 = v88;
    v143 = v89;
    v90 = *(unsigned int *)(a3 + 52);
    if ((_DWORD)v90)
    {
      v91 = *(_QWORD *)(a3 + 40);
      v92 = (v90 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v92 < 3)
      {
        v93 = v89;
        v94 = *(uint64_t **)(a3 + 40);
      }
      else
      {
        v93 = v89;
        v94 = *(uint64_t **)(a3 + 40);
        if ((unint64_t)v89 - v91 >= 0x20)
        {
          v95 = 0;
          v96 = v92 + 1;
          v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
          v93 = (WTF *)((char *)v89 + v97);
          v94 = (uint64_t *)(v91 + v97);
          v98 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v99 = (_OWORD *)((char *)v89 + v95);
            v100 = *(_OWORD *)(v91 + v95 + 16);
            *v99 = *(_OWORD *)(v91 + v95);
            v99[1] = v100;
            v95 += 32;
            v98 -= 4;
          }
          while (v98);
          if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_145;
        }
      }
      v129 = (uint64_t *)(v91 + 8 * v90);
      do
      {
        v130 = *v94++;
        *(_QWORD *)v93 = v130;
        v93 = (WTF *)((char *)v93 + 8);
      }
      while (v94 != v129);
    }
LABEL_145:
    v146 = v32;
    v131 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v131 == *(_DWORD *)(a1 + 32))
    {
      v132 = WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v131 + 1, (unint64_t)&v139);
      v134 = *(_QWORD *)(a1 + 24) + ((unint64_t)*(unsigned int *)(a1 + 36) << 6);
      *(_QWORD *)v134 = &off_1E0FD2EE8;
      *(_OWORD *)(v134 + 8) = *(_OWORD *)(v132 + 8);
      *(_QWORD *)v134 = &off_1E0FD2F10;
      v135 = *(_OWORD *)(v132 + 24);
      *(_QWORD *)(v132 + 24) = 0;
      *(_OWORD *)(v134 + 24) = v135;
      *(_QWORD *)(v134 + 40) = 0;
      *(_QWORD *)(v134 + 48) = 0;
      v136 = *(_QWORD *)(v132 + 40);
      *(_QWORD *)(v132 + 40) = 0;
      *(_QWORD *)(v134 + 40) = v136;
      LODWORD(v136) = *(_DWORD *)(v132 + 48);
      *(_DWORD *)(v132 + 48) = 0;
      *(_DWORD *)(v134 + 48) = v136;
      LODWORD(v136) = *(_DWORD *)(v132 + 52);
      *(_DWORD *)(v132 + 52) = 0;
      *(_DWORD *)(v134 + 52) = v136;
      *(_BYTE *)(v134 + 56) = *(_BYTE *)(v132 + 56);
      v137 = v143;
      ++*(_DWORD *)(a1 + 36);
      if (v137)
      {
        v143 = 0;
        v144 = 0;
        WTF::fastFree(v137, v133);
      }
    }
    else
    {
      v138 = *(_QWORD *)(a1 + 24) + (v131 << 6);
      *(_OWORD *)(v138 + 8) = v140;
      *(_QWORD *)v138 = &off_1E0FD2F10;
      v141 = 0;
      *(_QWORD *)(v138 + 24) = v86;
      *(_QWORD *)(v138 + 32) = v87;
      v143 = 0;
      *(_QWORD *)(v138 + 40) = v89;
      v144 = 0;
      *(_DWORD *)(v138 + 48) = v88;
      v145 = 0;
      *(_DWORD *)(v138 + 52) = v88;
      *(_BYTE *)(v138 + 56) = v32;
      ++*(_DWORD *)(a1 + 36);
    }
    result = v141;
    v139 = &off_1E0FD2F10;
    v141 = 0;
    if (!result)
      return result;
    v128 = *result - 2;
    if (*result != 2)
    {
LABEL_141:
      *result = v128;
      return result;
    }
    return (int *)WTF::StringImpl::destroy();
  }
  v8 = *(_QWORD *)(a1 + 8);
  v139 = 0;
  *(_QWORD *)&v140 = 0;
  v9 = *(_DWORD **)(a3 + 24);
  if (v9)
    *v9 += 2;
  v10 = (uint64_t *)(v8 + 312);
  v11 = *(_QWORD *)(v8 + 312);
  if ((unint64_t)(*(_QWORD *)(v8 + 320) - v11) <= 0xB7)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v8 + 312));
    v11 = *v10;
  }
  *(_QWORD *)v11 = &off_1E0FD38A0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = &off_1E0FD2F10;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 48) = v9;
  *(_QWORD *)(v11 + 56) = &off_1E0FD2F10;
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v11 + 80) = v9;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = v6;
  *(_QWORD *)(v11 + 120) = 0;
  *(_WORD *)(v11 + 128) = 3;
  *(_BYTE *)(v11 + 160) = 0;
  *(_BYTE *)(v11 + 164) = 0;
  *(_BYTE *)(v11 + 168) = 0;
  *(_BYTE *)(v11 + 172) = 0;
  *(_BYTE *)(v11 + 176) = 0;
  *(_QWORD *)(v11 + 149) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 144) = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v8 + 312) += 184;
  v12 = *(unsigned int *)(v8 + 356);
  if ((_DWORD)v12 == *(_DWORD *)(v8 + 352))
  {
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v12 + 1)
      v15 = v12 + 1;
    else
      v15 = v14;
    if (v15 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x182497B34);
    }
    v16 = *(void **)(v8 + 344);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(v8 + 352) = v15;
    *(_QWORD *)(v8 + 344) = v17;
    memcpy(v17, v16, 8 * v12);
    v10 = (uint64_t *)(v8 + 312);
    if (v16)
    {
      if (*(void **)(v8 + 344) == v16)
      {
        *(_QWORD *)(v8 + 344) = 0;
        *(_DWORD *)(v8 + 352) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
    v12 = *(unsigned int *)(v8 + 356);
    v19 = (uint64_t *)(*(_QWORD *)(v8 + 344) + 8 * v12);
  }
  else
  {
    v19 = (uint64_t *)(*(_QWORD *)(v8 + 344) + 8 * v12);
  }
  *v19 = v11;
  *(_DWORD *)(v8 + 356) = v12 + 1;
  v37 = WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>(v10, &v139, v11);
  v38 = v37;
  v39 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v39 != *(_DWORD *)(a1 + 64))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v39) = v37;
    *(_DWORD *)(a1 + 68) = v39 + 1;
    v47 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v47 != *(_DWORD *)(a2 + 8))
      goto LABEL_49;
LABEL_54:
    v53 = v47 + (v47 >> 2);
    if (v53 >= 0x10)
      v54 = v53 + 1;
    else
      v54 = 16;
    if (v54 <= v47 + 1)
      v55 = v47 + 1;
    else
      v55 = v54;
    if (v55 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x182497B44);
    }
    v56 = *(_QWORD **)a2;
    v57 = (void *)WTF::fastMalloc((WTF *)(8 * v55));
    *(_DWORD *)(a2 + 8) = v55;
    *(_QWORD *)a2 = v57;
    memcpy(v57, v56, 8 * v47);
    if (v56)
    {
      if (*(_QWORD **)a2 == v56)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v56, v58);
    }
    v59 = *(unsigned int *)(a2 + 12);
    v60 = *(_QWORD **)a2;
    v61 = *(_DWORD **)(a3 + 24);
    if (v61)
      *v61 += 2;
    v60[v59] = v61;
    v50 = v59 + 1;
    *(_DWORD *)(a2 + 12) = v59 + 1;
    v51 = *(_QWORD *)v7;
    v52 = *(unsigned int *)(*(_QWORD *)v7 + 84);
    if (!(_DWORD)v52)
      goto LABEL_91;
    goto LABEL_68;
  }
  v40 = v39 + (v39 >> 2);
  if (v40 >= 0x10)
    v41 = v40 + 1;
  else
    v41 = 16;
  if (v41 <= v39 + 1)
    v42 = v39 + 1;
  else
    v42 = v41;
  if (v42 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x182497B3CLL);
  }
  v43 = *(void **)(a1 + 56);
  v44 = (void *)WTF::fastMalloc((WTF *)(8 * v42));
  *(_DWORD *)(a1 + 64) = v42;
  *(_QWORD *)(a1 + 56) = v44;
  memcpy(v44, v43, 8 * v39);
  if (v43)
  {
    if (*(void **)(a1 + 56) == v43)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
    }
    WTF::fastFree((WTF *)v43, v45);
  }
  v46 = *(unsigned int *)(a1 + 68);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v46) = v38;
  *(_DWORD *)(a1 + 68) = v46 + 1;
  v47 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v47 == *(_DWORD *)(a2 + 8))
    goto LABEL_54;
LABEL_49:
  v48 = *(_QWORD **)a2;
  v49 = *(_DWORD **)(a3 + 24);
  if (v49)
    *v49 += 2;
  v48[v47] = v49;
  v50 = v47 + 1;
  *(_DWORD *)(a2 + 12) = v47 + 1;
  v51 = *(_QWORD *)v7;
  v52 = *(unsigned int *)(*(_QWORD *)v7 + 84);
  if ((_DWORD)v52)
  {
LABEL_68:
    v62 = *(uint64_t **)(v51 + 72);
    v63 = &v62[v52];
    while (1)
    {
      v64 = *v62;
      v140 = *(_OWORD *)(*v62 + 32);
      v139 = &off_1E0FD2F10;
      v65 = *(int **)(v64 + 48);
      if (v65)
        *v65 += 2;
      v66 = *(_QWORD *)(v64 + 104);
      v141 = v65;
      v142 = v66;
      v67 = *(unsigned int *)(v64 + 100);
      v143 = 0;
      v144 = 0;
      v145 = v67;
      if ((_DWORD)v67)
      {
        if (v67 >> 29)
        {
          __break(0xC471u);
          goto LABEL_162;
        }
        v68 = (WTF *)WTF::fastMalloc((WTF *)(8 * v67));
        v144 = v67;
        v143 = v68;
        v69 = *(unsigned int *)(v64 + 100);
        if ((_DWORD)v69)
        {
          v70 = *(_QWORD *)(v64 + 88);
          v71 = (v69 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v71 < 3)
          {
            v72 = *(uint64_t **)(v64 + 88);
          }
          else
          {
            v72 = *(uint64_t **)(v64 + 88);
            if ((unint64_t)v68 - v70 >= 0x20)
            {
              v73 = v71 + 1;
              v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
              v75 = (WTF *)((char *)v68 + v74);
              v72 = (uint64_t *)(v70 + v74);
              v76 = (__int128 *)(v70 + 16);
              v77 = (_OWORD *)((char *)v68 + 16);
              v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              v68 = v75;
              if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_85;
            }
          }
          v80 = (uint64_t *)(v70 + 8 * v69);
          do
          {
            v81 = *v72++;
            *(_QWORD *)v68 = v81;
            v68 = (WTF *)((char *)v68 + 8);
          }
          while (v72 != v80);
        }
      }
LABEL_85:
      WGSL::EntryPointRewriter::visit(a1, a2, &v139);
      v83 = v143;
      if (v143)
      {
        v143 = 0;
        v144 = 0;
        WTF::fastFree(v83, v82);
      }
      v84 = v141;
      v139 = &off_1E0FD2F10;
      v141 = 0;
      if (v84)
      {
        if (*v84 == 2)
          WTF::StringImpl::destroy();
        else
          *v84 -= 2;
      }
      if (++v62 == v63)
      {
        v50 = *(_DWORD *)(a2 + 12);
        break;
      }
    }
  }
LABEL_91:
  if (!v50)
  {
    __break(0xC471u);
    JUMPOUT(0x182497B20);
  }
  v85 = v50 - 1;
  result = *(int **)(*(_QWORD *)a2 + 8 * v85);
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v85) = 0;
  if (!result)
    goto LABEL_95;
  if (*result != 2)
  {
    *result -= 2;
LABEL_95:
    *(_DWORD *)(a2 + 12) = v85;
    return result;
  }
  result = (int *)WTF::StringImpl::destroy();
  *(_DWORD *)(a2 + 12) = v85;
  return result;
}

_DWORD *WGSL::EntryPointRewriter::checkReturnType(void)::$_0::operator()(uint64_t ***a1, char a2, int8x16_t *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  void (**v15)(WGSL::AST::Identifier *__hidden);
  _WORD *v16;
  int8x16_t *v17;
  uint64_t v18;
  _BYTE *v19;
  int8x16_t *v20;
  size_t v21;
  _BYTE *v22;
  unint64_t v23;
  unsigned __int128 *v24;
  unsigned __int128 v25;
  _BYTE *v26;
  _WORD *v27;
  unint64_t v28;
  __int128 v29;
  char *v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  size_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  _BYTE *v41;
  int8x16_t *v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  _WORD *v48;
  int8x16_t *v49;
  __int16 v50;
  _BYTE *v51;
  uint64_t v52;
  _WORD *v53;
  unint64_t v54;
  _WORD *v55;
  unint64_t v56;
  __int128 v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  _WORD *v65;
  int8x16_t *v66;
  __int16 v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  WTF *v81;
  __int128 *v82;
  _OWORD *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  void (**v92)(WGSL::AST::Identifier *__hidden);
  uint64_t v93;
  void *v94;
  void (**v95)(WGSL::AST::Identifier *__hidden);
  uint64_t v96;
  void (**v97)(WGSL::AST::Identifier *__hidden);
  void (*v98)(WGSL::AST::Identifier *__hidden);
  _DWORD *result;
  uint64_t v100;
  unint64_t v101;
  uint8x8_t *v102;
  uint16x8_t *v103;
  unint64_t v104;
  uint8x16_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  uint8x8_t *v108;
  uint16x8_t *v109;
  unint64_t v110;
  uint8x8_t v111;
  int8x16_t *v112;
  int8x16_t *v113;
  unint64_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int16x8_t *v119;
  int8x8_t *v120;
  unint64_t v121;
  int16x8_t v122;
  uint8x8_t *v123;
  uint16x8_t *v124;
  unint64_t v125;
  uint8x16_t v126;
  uint16x8_t v127;
  uint16x8_t v128;
  uint8x8_t *v129;
  uint16x8_t *v130;
  unint64_t v131;
  uint8x8_t v132;
  WTF *v133[2];
  WTF *v134;
  int v135;
  int v136;
  void (**v137)(WGSL::AST::Identifier *__hidden);
  uint64_t v138;
  uint64_t v139;
  void (**v140)(WGSL::AST::Identifier *__hidden);
  __int128 v141;
  char v142;
  int8x16x2_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;
  int8x16x2_t v147;
  int8x16x2_t v148;

  v142 = a2;
  v6 = a1[1];
  v7 = *(_QWORD *)(***a1 + 48);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    if (a4)
      v8 = a4 - 1;
    else
      v8 = 0;
    if (v8 >> 31)
      goto LABEL_161;
    LODWORD(v9) = *(_DWORD *)(v7 + 4);
  }
  else
  {
    if (a4)
      v8 = a4 - 1;
    else
      v8 = 0;
    v9 = v8 >> 31;
    if (v8 >> 31)
      goto LABEL_161;
  }
  v10 = v8 + 1;
  v11 = __OFADD__((_DWORD)v8, 1);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_160;
  if (v11)
    goto LABEL_160;
  v12 = __OFADD__((_DWORD)v9, v10);
  v13 = v9 + v10;
  if (v12)
    goto LABEL_160;
  v14 = (v13 + 2);
  if (__OFADD__(v13, 2))
    goto LABEL_160;
  if (!v7 || (*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if (v13 == -2)
    {
      v15 = (void (**)(WGSL::AST::Identifier *__hidden))MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_85;
    }
    if ((v14 & 0x80000000) != 0)
      goto LABEL_160;
    WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
    v15 = v137;
    if (!v137)
      goto LABEL_160;
    *(_DWORD *)v137 = 2;
    *((_DWORD *)v15 + 1) = v14;
    *((_WORD *)v15 + 10) = 24415;
    v15[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v15 + 20);
    *((_DWORD *)v15 + 4) = 4;
    v19 = (char *)v15 + 22;
    if (!v7)
    {
      *v19 = 95;
      v26 = (char *)v15 + 23;
      if (!(_DWORD)v8)
        goto LABEL_85;
      goto LABEL_71;
    }
    v20 = *(int8x16_t **)(v7 + 8);
    v21 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == 1)
          *v19 = v20->i8[0];
        else
          memcpy((char *)v15 + 22, v20, v21);
      }
LABEL_70:
      v51 = &v19[*(unsigned int *)(v7 + 4)];
      *v51 = 95;
      v26 = v51 + 1;
      if (!(_DWORD)v8)
        goto LABEL_85;
LABEL_71:
      if ((_DWORD)v8 == 1)
        *v26 = a3->i8[0];
      else
        memcpy(v26, a3, v8);
      goto LABEL_85;
    }
    v22 = &v19[v21];
    if (v21 < 0x10)
    {
      v23 = (unint64_t)v15 + 22;
      if (v19 == v22)
        goto LABEL_70;
    }
    else
    {
      v23 = (unint64_t)&v19[v21 & 0xFFFFFFF0];
      v24 = (unsigned __int128 *)((char *)v15 + 22);
      do
      {
        v25 = (unsigned __int128)vld2q_s8(v20->i8);
        v20 += 2;
        *v24++ = v25;
      }
      while (v24 != (unsigned __int128 *)v23);
      if ((_BYTE *)v23 == v22)
        goto LABEL_70;
    }
    v37 = (size_t)v15 + v21;
    v38 = (unint64_t)v15 + v21 - v23 + 22;
    if (v38 < 8
      || (v23 < (unint64_t)&v20[2].u64[1] + 2 * v37 + -2 * v23 + 4
        ? (v39 = (unint64_t)v20 >= v37 + 22)
        : (v39 = 1),
          !v39))
    {
      v41 = (_BYTE *)v23;
      v42 = v20;
      goto LABEL_54;
    }
    if (v38 >= 0x20)
    {
      v40 = v38 & 0xFFFFFFFFFFFFFFE0;
      v112 = v20 + 2;
      v113 = (int8x16_t *)(v23 + 16);
      v114 = v38 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v116 = v112[-2];
        v115 = v112[-1];
        v118 = *v112;
        v117 = v112[1];
        v112 += 4;
        v113[-1] = vuzp1q_s8(v116, v115);
        *v113 = vuzp1q_s8(v118, v117);
        v113 += 2;
        v114 -= 32;
      }
      while (v114);
      if (v38 == v40)
        goto LABEL_70;
      if ((v38 & 0x18) == 0)
      {
        v42 = (int8x16_t *)((char *)v20 + 2 * v40);
        v41 = (_BYTE *)(v23 + v40);
        goto LABEL_54;
      }
    }
    else
    {
      v40 = 0;
    }
    v41 = (_BYTE *)(v23 + (v38 & 0xFFFFFFFFFFFFFFF8));
    v42 = (int8x16_t *)((char *)v20 + 2 * (v38 & 0xFFFFFFFFFFFFFFF8));
    v119 = (int16x8_t *)((char *)v20 + 2 * v40);
    v120 = (int8x8_t *)(v23 + v40);
    v121 = v40 - (v38 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v122 = *v119++;
      *v120++ = vmovn_s16(v122);
      v121 += 8;
    }
    while (v121);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_70;
    do
    {
LABEL_54:
      v43 = v42->i8[0];
      v42 = (int8x16_t *)((char *)v42 + 2);
      *v41++ = v43;
    }
    while (v41 != v22);
    goto LABEL_70;
  }
  if (v13 != -2)
  {
    if (v14 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v14 + 20));
      v15 = v137;
      if (v137)
      {
        *(_DWORD *)v137 = 2;
        *((_DWORD *)v15 + 1) = v14;
        v15[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v15 + 20);
        v15[2] = (void (*)(WGSL::AST::Identifier *__hidden))0x5F005F00000000;
        v16 = v15 + 3;
        v17 = *(int8x16_t **)(v7 + 8);
        v18 = *(unsigned int *)(v7 + 4);
        if ((*(_BYTE *)(v7 + 16) & 4) == 0)
        {
          if ((_DWORD)v18)
          {
            if ((_DWORD)v18 == 1)
              *v16 = v17->i16[0];
            else
              memcpy(v15 + 3, v17, 2 * v18);
          }
LABEL_75:
          v52 = *(unsigned int *)(v7 + 4);
          v53 = &v16[v52];
          *v53 = 95;
          v54 = (unint64_t)(v53 + 1);
          v55 = (_WORD *)(v54 + 2 * v8);
          if ((v8 & 0xFFFFFFC0) != 0)
          {
            v56 = v54 + 2 * (v8 & 0xFFFFFFC0);
            v57 = 0uLL;
            do
            {
              v144.val[0] = *a3;
              v58 = a3[1];
              v146.val[0] = a3[2];
              v59 = a3[3];
              a3 += 4;
              v60 = v59;
              v146.val[1] = 0uLL;
              v148.val[0] = v58;
              v144.val[1] = 0uLL;
              v61 = (char *)v54;
              vst2q_s8(v61, v144);
              v61 += 32;
              v148.val[1] = 0uLL;
              vst2q_s8(v61, v148);
              v62 = (char *)(v54 + 64);
              vst2q_s8(v62, v146);
              v63 = (char *)(v54 + 96);
              vst2q_s8(v63, *(int8x16x2_t *)(&v57 - 1));
              v54 += 128;
            }
            while (v54 != v56);
            v54 = v56;
          }
          if ((_WORD *)v54 != v55)
          {
            v64 = (unint64_t)v15 + 2 * v8 + 2 * v52 - v54 + 24;
            if (v64 < 0xE
              || v54 < (unint64_t)a3->u64 + (v64 >> 1) + 1
              && (unint64_t)a3 < (v64 & 0xFFFFFFFFFFFFFFFELL) + v54 + 2)
            {
              v65 = (_WORD *)v54;
              v66 = a3;
              goto LABEL_84;
            }
            v100 = (v64 >> 1) + 1;
            if (v64 >= 0x3E)
            {
              v101 = v100 & 0xFFFFFFFFFFFFFFE0;
              v102 = (uint8x8_t *)&a3[1];
              v103 = (uint16x8_t *)(v54 + 32);
              v104 = v100 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v105 = *(uint8x16_t *)v102[-2].i8;
                v106 = vmovl_u8(*v102);
                v107 = vmovl_high_u8(*(uint8x16_t *)v102->i8);
                v103[-2] = vmovl_u8(*(uint8x8_t *)v105.i8);
                v103[-1] = vmovl_high_u8(v105);
                *v103 = v106;
                v103[1] = v107;
                v103 += 4;
                v102 += 4;
                v104 -= 32;
              }
              while (v104);
              if (v100 == v101)
                goto LABEL_85;
              if ((v100 & 0x18) == 0)
              {
                v66 = (int8x16_t *)((char *)a3 + v101);
                v65 = (_WORD *)(v54 + 2 * v101);
                do
                {
LABEL_84:
                  v67 = v66->u8[0];
                  v66 = (int8x16_t *)((char *)v66 + 1);
                  *v65++ = v67;
                }
                while (v65 != v55);
                goto LABEL_85;
              }
            }
            else
            {
              v101 = 0;
            }
            v65 = (_WORD *)(v54 + 2 * (v100 & 0xFFFFFFFFFFFFFFF8));
            v66 = (int8x16_t *)((char *)a3 + (v100 & 0xFFFFFFFFFFFFFFF8));
            v108 = (uint8x8_t *)&a3->i8[v101];
            v109 = (uint16x8_t *)(v54 + 2 * v101);
            v110 = v101 - (v100 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v111 = *v108++;
              *v109++ = vmovl_u8(v111);
              v110 += 8;
            }
            while (v110);
            if (v100 != (v100 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_84;
          }
LABEL_85:
          if (!v7)
            goto LABEL_89;
          goto LABEL_86;
        }
        v27 = &v16[v18];
        if (v18 < 0x40)
        {
          v28 = (unint64_t)(v15 + 3);
        }
        else
        {
          v28 = (unint64_t)&v16[v18 & 0xFFFFFFC0];
          v29 = 0uLL;
          v30 = (char *)(v15 + 3);
          do
          {
            v143.val[0] = *v17;
            v31 = v17[1];
            v145.val[0] = v17[2];
            v32 = v17[3];
            v17 += 4;
            v33 = v32;
            v145.val[1] = 0uLL;
            v147.val[0] = v31;
            v143.val[1] = 0uLL;
            v34 = v30;
            vst2q_s8(v34, v143);
            v34 += 32;
            v147.val[1] = 0uLL;
            vst2q_s8(v34, v147);
            v35 = v30 + 64;
            vst2q_s8(v35, v145);
            v36 = v30 + 96;
            vst2q_s8(v36, *(int8x16x2_t *)(&v29 - 1));
            v30 += 128;
          }
          while (v30 != (char *)v28);
        }
        if ((_WORD *)v28 == v27)
          goto LABEL_75;
        v44 = (unint64_t)v15 + 2 * v18 - v28 + 22;
        if (v44 < 0xE
          || (v28 < (unint64_t)v17->u64 + (v44 >> 1) + 1
            ? (v45 = (unint64_t)v17 >= (v44 & 0xFFFFFFFFFFFFFFFELL) + v28 + 2)
            : (v45 = 1),
              !v45))
        {
          v48 = (_WORD *)v28;
          v49 = v17;
          goto LABEL_67;
        }
        v46 = (v44 >> 1) + 1;
        if (v44 >= 0x3E)
        {
          v47 = v46 & 0xFFFFFFFFFFFFFFE0;
          v123 = (uint8x8_t *)&v17[1];
          v124 = (uint16x8_t *)(v28 + 32);
          v125 = v46 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v126 = *(uint8x16_t *)v123[-2].i8;
            v127 = vmovl_u8(*v123);
            v128 = vmovl_high_u8(*(uint8x16_t *)v123->i8);
            v124[-2] = vmovl_u8(*(uint8x8_t *)v126.i8);
            v124[-1] = vmovl_high_u8(v126);
            *v124 = v127;
            v124[1] = v128;
            v124 += 4;
            v123 += 4;
            v125 -= 32;
          }
          while (v125);
          if (v46 == v47)
            goto LABEL_75;
          if ((v46 & 0x18) == 0)
          {
            v49 = (int8x16_t *)((char *)v17 + v47);
            v48 = (_WORD *)(v28 + 2 * v47);
            goto LABEL_67;
          }
        }
        else
        {
          v47 = 0;
        }
        v48 = (_WORD *)(v28 + 2 * (v46 & 0xFFFFFFFFFFFFFFF8));
        v49 = (int8x16_t *)((char *)v17 + (v46 & 0xFFFFFFFFFFFFFFF8));
        v129 = (uint8x8_t *)&v17->i8[v47];
        v130 = (uint16x8_t *)(v28 + 2 * v47);
        v131 = v47 - (v46 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v132 = *v129++;
          *v130++ = vmovl_u8(v132);
          v131 += 8;
        }
        while (v131);
        if (v46 == (v46 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_75;
        do
        {
LABEL_67:
          v50 = v49->u8[0];
          v49 = (int8x16_t *)((char *)v49 + 1);
          *v48++ = v50;
        }
        while (v48 != v27);
        goto LABEL_75;
      }
    }
LABEL_160:
    __break(0xC471u);
    JUMPOUT(0x1824983F8);
  }
  v15 = (void (**)(WGSL::AST::Identifier *__hidden))MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_86:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy();
  else
    *(_DWORD *)v7 -= 2;
LABEL_89:
  v70 = v6[1];
  v69 = (uint64_t *)(v6 + 1);
  v68 = v70;
  v141 = 0uLL;
  *(_DWORD *)v15 += 2;
  v137 = &off_1E0FD2F10;
  v138 = 0;
  v139 = 0;
  v140 = v15;
  v71 = **a1;
  v72 = *v71;
  v73 = *(unsigned int *)(*v71 + 84);
  v134 = 0;
  v135 = 0;
  v136 = v73;
  if (!(_DWORD)v73)
    goto LABEL_101;
  if (v73 >> 29)
  {
LABEL_161:
    __break(0xC471u);
    JUMPOUT(0x1824983F0);
  }
  v74 = (WTF *)WTF::fastMalloc((WTF *)(8 * v73));
  v135 = v73;
  v134 = v74;
  v75 = *(unsigned int *)(v72 + 84);
  if (!(_DWORD)v75)
    goto LABEL_101;
  v76 = *(_QWORD *)(v72 + 72);
  v77 = (v75 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v77 < 3)
  {
    v78 = *(uint64_t **)(v72 + 72);
LABEL_99:
    v86 = (uint64_t *)(v76 + 8 * v75);
    do
    {
      v87 = *v78++;
      *(_QWORD *)v74 = v87;
      v74 = (WTF *)((char *)v74 + 8);
    }
    while (v78 != v86);
    goto LABEL_101;
  }
  v78 = *(uint64_t **)(v72 + 72);
  if ((unint64_t)v74 - v76 < 0x20)
    goto LABEL_99;
  v79 = v77 + 1;
  v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
  v81 = (WTF *)((char *)v74 + v80);
  v78 = (uint64_t *)(v76 + v80);
  v82 = (__int128 *)(v76 + 16);
  v83 = (_OWORD *)((char *)v74 + 16);
  v84 = v79 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v85 = *v82;
    *(v83 - 1) = *(v82 - 1);
    *v83 = v85;
    v82 += 2;
    v83 += 2;
    v84 -= 4;
  }
  while (v84);
  v74 = v81;
  if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_99;
LABEL_101:
  v133[0] = 0;
  v133[1] = 0;
  v89 = WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(v68 + 39, &v141, (uint64_t)&v137, (uint64_t *)&v134, (uint64_t *)v133, &v142);
  if (v133[0])
    WTF::fastFree(v133[0], v88);
  if (v134)
    WTF::fastFree(v134, v88);
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v140 -= 2;
  }
  WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>((_QWORD *)*v69, *v69 + 64, (uint64_t)v89);
  v90 = (_QWORD *)(*v69 + 312);
  v141 = 0uLL;
  *(_DWORD *)v15 += 2;
  v137 = &off_1E0FD2F10;
  v138 = 0;
  v139 = 0;
  v140 = v15;
  v91 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v90, &v141, (uint64_t)&v137);
  v92 = v140;
  v137 = &off_1E0FD2F10;
  v140 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v92 -= 2;
  }
  v93 = *v69 + 96;
  v137 = 0;
  v91[3] = WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>(v93, (uint64_t)v89, &v137);
  v95 = v137;
  if (v137)
  {
    v96 = *((unsigned int *)v137 - 1);
    if ((_DWORD)v96)
    {
      v97 = v137;
      do
      {
        v98 = *v97;
        if (*v97 != (void (*)(WGSL::AST::Identifier *__hidden))-1)
        {
          *v97 = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v98 -= 2;
          }
        }
        v97 += 2;
        --v96;
      }
      while (v96);
    }
    WTF::fastFree((WTF *)(v95 - 2), v94);
  }
  result = WGSL::ShaderModule::replace<WGSL::AST::IdentifierExpression const,WGSL::AST::IdentifierExpression>(*v69, (uint64_t)*a1[2], (uint64_t)v91);
  if (*(_DWORD *)v15 == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *(_DWORD *)v15 -= 2;
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(_QWORD *this, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;

  v11 = this;
  v12 = *this;
  if (this[1] - *this <= 0x8FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v12 = *v11;
  }
  v13 = *a6;
  *(_OWORD *)(v12 + 8) = *a2;
  *(_QWORD *)v12 = &off_1E0FD36E0;
  *(_QWORD *)(v12 + 24) = &off_1E0FD2EE8;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v12 + 24) = &off_1E0FD2F10;
  v14 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 48) = v14;
  v15 = *a5;
  *a5 = 0;
  *(_QWORD *)(v12 + 56) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v12 + 64) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(v12 + 68) = v15;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(v12 + 72) = v16;
  LODWORD(v16) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v12 + 80) = v16;
  LODWORD(v16) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v12 + 84) = v16;
  *(_BYTE *)(v12 + 88) = v13;
  *(_BYTE *)(v12 + 124) = 0;
  *(_BYTE *)(v12 + 128) = 0;
  *(_BYTE *)(v12 + 132) = 0;
  *(_BYTE *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_BYTE *)(v12 + 120) = 0;
  *v11 += 144;
  v17 = *((unsigned int *)v11 + 11);
  if ((_DWORD)v17 != *((_DWORD *)v11 + 10))
  {
    v24 = (_QWORD *)(v11[4] + 8 * v17);
LABEL_17:
    *v24 = v12;
    *((_DWORD *)v11 + 11) = v17 + 1;
    return (_QWORD *)v12;
  }
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v17 + 1)
    v20 = v17 + 1;
  else
    v20 = v19;
  if (!(v20 >> 29))
  {
    v21 = (void *)v11[4];
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *((_DWORD *)v11 + 10) = v20;
    v11[4] = v22;
    memcpy(v22, v21, 8 * v17);
    if (v21)
    {
      if ((void *)v11[4] == v21)
      {
        v11[4] = 0;
        *((_DWORD *)v11 + 10) = 0;
      }
      WTF::fastFree((WTF *)v21, v23);
    }
    v17 = *((unsigned int *)v11 + 11);
    v24 = (_QWORD *)(v11[4] + 8 * v17);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  v5 = result;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6 + 1)
      v9 = v6 + 1;
    else
      v9 = v8;
    if (v9 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v10 = *(void **)a2;
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a2 + 8) = v9;
    *(_QWORD *)a2 = v11;
    memcpy(v11, v10, 8 * v6);
    if (v10)
    {
      if (*(void **)a2 == v10)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v10, v12);
    }
    v6 = *(unsigned int *)(a2 + 12);
    v13 = (_QWORD *)(*(_QWORD *)a2 + 8 * v6);
  }
  else
  {
    v13 = (_QWORD *)(*(_QWORD *)a2 + 8 * v6);
  }
  *v13 = a3;
  *(_DWORD *)(a2 + 12) = v6 + 1;
  result = v5 + 50;
  v14 = *((unsigned int *)v5 + 103);
  if ((_DWORD)v14 == *((_DWORD *)v5 + 102))
  {
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v14 + 1)
      v17 = v14 + 1;
    else
      v17 = v16;
    result = (_QWORD *)WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)result, v17);
    v14 = *((unsigned int *)v5 + 103);
    v18 = (_QWORD *)(v5[50] + 32 * v14);
  }
  else
  {
    v18 = (_QWORD *)(*result + 32 * v14);
  }
  *v18 = &off_1E0FD3710;
  v18[1] = a2;
  v18[3] = v18;
  *((_DWORD *)v5 + 103) = v14 + 1;
  return result;
}

_DWORD *WGSL::ShaderModule::replace<WGSL::AST::IdentifierExpression const,WGSL::AST::IdentifierExpression>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  _DWORD *v39;
  _DWORD *result;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[16];
  int v51;
  unsigned __int8 v52;
  void (**v53)(WGSL::AST::Identifier *__hidden);
  __int128 v54;
  _DWORD *v55;
  uint64_t v56;
  void (**v57)(WGSL::AST::IdentifierExpression *__hidden);
  __int128 v58;
  uint64_t v59;
  _BYTE v60[16];
  int v61;
  unsigned __int8 v62;
  void (**v63)(WGSL::AST::Identifier *__hidden);
  __int128 v64;
  _DWORD *v65;
  _BYTE v66[9];

  v48 = *(_OWORD *)(a2 + 8);
  v49 = *(_QWORD *)(a2 + 24);
  v6 = a2 + 32;
  v50[0] = 0;
  v52 = 0;
  v7 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v51 = -1;
    v3 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E0FD37E8[v3])(&v56, v50, v6);
      v51 = v3;
    }
    v52 = 1;
  }
  v54 = *(_OWORD *)(a2 + 72);
  v53 = &off_1E0FD2F10;
  v8 = *(_DWORD **)(a2 + 88);
  if (v8)
    *v8 += 2;
  v9 = (uint64_t *)(a1 + 400);
  v55 = v8;
  v10 = *(unsigned int *)(a1 + 412);
  v45 = v6;
  if ((_DWORD)v10 != *(_DWORD *)(a1 + 408))
  {
    v22 = *v9;
    v58 = v48;
    v23 = a2;
    v24 = v49;
    v56 = a2;
    v57 = off_1E0FD2EC0;
    v59 = v49;
    v60[0] = 0;
    v62 = 0;
    if (v7)
    {
      v61 = -1;
      if ((_DWORD)v3 != -1)
      {
        v25 = v22;
        ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD3748[v3])(v66, v60, v50);
        v22 = v25;
        v61 = v3;
        v8 = v55;
        v23 = v56;
        v24 = v59;
      }
      v62 = 1;
    }
    v64 = v54;
    v57 = off_1E0FD2E98;
    v63 = &off_1E0FD2F10;
    v55 = 0;
    v65 = v8;
    v26 = v22 + 32 * v10;
    *(_QWORD *)(v26 + 24) = 0;
    v27 = (_QWORD *)(v26 + 24);
    v28 = (char *)operator new(0x70uLL);
    v29 = v28;
    *(_QWORD *)v28 = off_1E0FD37B0;
    *((_QWORD *)v28 + 1) = v23;
    *(_OWORD *)(v28 + 24) = v58;
    *((_QWORD *)v28 + 2) = off_1E0FD2EC0;
    *((_QWORD *)v28 + 5) = v24;
    v28[48] = 0;
    v28[72] = 0;
    v30 = v45;
    if (v7)
    {
      *((_DWORD *)v28 + 16) = -1;
      v31 = v61;
      if (v61 != -1)
      {
        ((void (*)(_BYTE *, char *, _BYTE *))off_1E0FD3748[v61])(v66, v28 + 48, v60);
        *((_DWORD *)v29 + 16) = v31;
      }
      v29[72] = 1;
    }
    *((_QWORD *)v29 + 2) = off_1E0FD2E98;
    *(_OWORD *)(v29 + 88) = v64;
    *((_QWORD *)v29 + 10) = &off_1E0FD2F10;
    v32 = v65;
    v65 = 0;
    *((_QWORD *)v29 + 13) = v32;
    *v27 = v29;
    v33 = v65;
    v63 = &off_1E0FD2F10;
    v65 = 0;
    if (v33)
    {
      if (*v33 == 2)
      {
        WTF::StringImpl::destroy();
        v57 = off_1E0FD2EC0;
        if (!v62)
        {
LABEL_43:
          ++*(_DWORD *)(a1 + 412);
          goto LABEL_44;
        }
LABEL_41:
        if (v61 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E0FD3578[v61])(v66, v60);
        goto LABEL_43;
      }
      *v33 -= 2;
    }
    v57 = off_1E0FD2EC0;
    if (!v62)
      goto LABEL_43;
    goto LABEL_41;
  }
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v9, v13);
  v14 = *(unsigned int *)(a1 + 412);
  v15 = *(_QWORD *)(a1 + 400);
  v58 = v48;
  v16 = a2;
  v17 = v49;
  v56 = a2;
  v57 = off_1E0FD2EC0;
  v59 = v49;
  v60[0] = 0;
  v62 = 0;
  v18 = v52;
  if (v52)
  {
    v61 = -1;
    v7 = v51;
    if (v51 != -1)
    {
      v19 = v14;
      v20 = v15;
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD3748[v51])(v66, v60, v50);
      v15 = v20;
      v14 = v19;
      v61 = v7;
      v16 = v56;
      v17 = v59;
    }
    v21 = 1;
    v62 = 1;
  }
  else
  {
    v21 = 0;
  }
  v64 = v54;
  v57 = off_1E0FD2E98;
  v63 = &off_1E0FD2F10;
  v34 = v55;
  v55 = 0;
  v65 = v34;
  v35 = v15 + 32 * v14;
  *(_QWORD *)(v35 + 24) = 0;
  v36 = (_QWORD *)(v35 + 24);
  v37 = (char *)operator new(0x70uLL);
  v38 = v37;
  *(_QWORD *)v37 = off_1E0FD37B0;
  *((_QWORD *)v37 + 1) = v16;
  *(_OWORD *)(v37 + 24) = v58;
  *((_QWORD *)v37 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v37 + 5) = v17;
  v37[48] = 0;
  v37[72] = 0;
  if (v18)
  {
    *((_DWORD *)v37 + 16) = -1;
    if (v7 != -1)
    {
      ((void (*)(_BYTE *, char *, _BYTE *))off_1E0FD3748[v7])(v66, v37 + 48, v60);
      *((_DWORD *)v38 + 16) = v7;
      v34 = v65;
      v21 = v62;
    }
    v38[72] = 1;
  }
  *((_QWORD *)v38 + 2) = off_1E0FD2E98;
  *(_OWORD *)(v38 + 88) = v64;
  *((_QWORD *)v38 + 10) = &off_1E0FD2F10;
  *((_QWORD *)v38 + 13) = v34;
  *v36 = v38;
  v65 = 0;
  v63 = &off_1E0FD2F10;
  v57 = off_1E0FD2EC0;
  if (v21 && v61 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E0FD3578[v61])(v66, v60);
  ++*(_DWORD *)(a1 + 412);
  v30 = v45;
LABEL_44:
  v39 = v55;
  v53 = &off_1E0FD2F10;
  v55 = 0;
  if (!v39)
    goto LABEL_47;
  if (*v39 != 2)
  {
    *v39 -= 2;
LABEL_47:
    if (!v52)
      goto LABEL_52;
    goto LABEL_50;
  }
  WTF::StringImpl::destroy();
  if (!v52)
    goto LABEL_52;
LABEL_50:
  if (v51 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD3578[v51])(&v56, v50);
LABEL_52:
  *(_QWORD *)(a2 + 64) = &off_1E0FD2F10;
  result = *(_DWORD **)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  if (!result)
    goto LABEL_55;
  if (*result != 2)
  {
    *result -= 2;
LABEL_55:
    v41 = (_OWORD *)(a2 + 8);
    *(_QWORD *)a2 = off_1E0FD2EC0;
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_61;
    goto LABEL_58;
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  v41 = (_OWORD *)(a2 + 8);
  *(_QWORD *)a2 = off_1E0FD2EC0;
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_61;
LABEL_58:
  v42 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v42 != -1)
    result = (_DWORD *)((uint64_t (*)(uint64_t *, uint64_t))off_1E0FD3578[v42])(&v56, v30);
  *(_DWORD *)(a2 + 48) = -1;
LABEL_61:
  *(_QWORD *)a2 = &off_1E0FD2EE8;
  *v41 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)a2 = off_1E0FD2EC0;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (*(_BYTE *)(a3 + 56))
  {
    *(_DWORD *)(a2 + 48) = -1;
    v43 = *(unsigned int *)(a3 + 48);
    if ((_DWORD)v43 != -1)
    {
      result = (_DWORD *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E0FD37E8[v43])(&v56, v30, a3 + 32);
      *(_DWORD *)(a2 + 48) = v43;
    }
    *(_BYTE *)(a2 + 56) = 1;
  }
  *(_QWORD *)a2 = off_1E0FD2E98;
  *(_QWORD *)(a2 + 64) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 64) = &off_1E0FD2F10;
  v44 = *(_DWORD **)(a3 + 88);
  if (v44)
    *v44 += 2;
  *(_QWORD *)(a2 + 88) = v44;
  return result;
}

_DWORD *WGSL::EntryPointRewriter::materialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int **a5)
{
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  int *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int **v17;
  void *v18;
  void *v19;
  int **v20;
  int *v21;
  int *v22;
  _QWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  int *v33;
  _QWORD *v34;
  int *v35;
  _QWORD *v36;
  int *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _DWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  _DWORD *result;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  _DWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  _QWORD *v92;
  __int128 v93;
  uint64_t v94;
  int *v95;
  __int128 v96;

  v8 = *(_QWORD *)(a1 + 8);
  if (a4 != 1)
  {
    v96 = 0uLL;
    v22 = *(int **)(a1 + 88);
    if (v22)
      *v22 += 2;
    *(_QWORD *)&v93 = &off_1E0FD2F10;
    *((_QWORD *)&v93 + 1) = 0;
    v94 = 0;
    v95 = v22;
    v23 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v8 + 312), &v96, (uint64_t)&v93);
    v24 = *(_DWORD **)(a3 + 24);
    if (v24)
      *v24 += 2;
    v10 = *(_QWORD **)(v8 + 312);
    if (*(_QWORD *)(v8 + 320) - (_QWORD)v10 <= 0x87uLL)
    {
      WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v8 + 312));
      v10 = *(_QWORD **)(v8 + 312);
    }
    *((_BYTE *)v10 + 56) = 0;
    v10[2] = 0;
    v10[3] = 0;
    *((_BYTE *)v10 + 32) = 0;
    *v10 = off_1E0FD3878;
    v10[1] = 0;
    v10[10] = 0;
    v10[11] = 0;
    v10[8] = v23;
    v10[9] = &off_1E0FD2F10;
    v10[14] = 0;
    v10[15] = 0;
    v10[12] = v24;
    v10[13] = &off_1E0FD2F10;
    if (v24)
      *v24 += 2;
    v10[16] = v24;
    *(_QWORD *)(v8 + 312) += 136;
    v25 = *(unsigned int *)(v8 + 356);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 352))
    {
      v26 = v25 + (v25 >> 2);
      if (v26 >= 0x10)
        v27 = v26 + 1;
      else
        v27 = 16;
      if (v27 <= v25 + 1)
        v28 = v25 + 1;
      else
        v28 = v27;
      if (v28 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x182499610);
      }
      v29 = *(void **)(v8 + 344);
      v30 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
      *(_DWORD *)(v8 + 352) = v28;
      *(_QWORD *)(v8 + 344) = v30;
      memcpy(v30, v29, 8 * v25);
      if (v29)
      {
        if (*(void **)(v8 + 344) == v29)
        {
          *(_QWORD *)(v8 + 344) = 0;
          *(_DWORD *)(v8 + 352) = 0;
        }
        WTF::fastFree((WTF *)v29, v31);
      }
      v25 = *(unsigned int *)(v8 + 356);
      v32 = (_QWORD *)(*(_QWORD *)(v8 + 344) + 8 * v25);
    }
    else
    {
      v32 = (_QWORD *)(*(_QWORD *)(v8 + 344) + 8 * v25);
    }
    *v32 = v10;
    *(_DWORD *)(v8 + 356) = v25 + 1;
    v11 = v95;
    *(_QWORD *)&v93 = &off_1E0FD2F10;
    v95 = 0;
    if (v11)
    {
      v12 = *v11 - 2;
      if (*v11 != 2)
        goto LABEL_6;
      goto LABEL_80;
    }
LABEL_7:
    v13 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v13)
      goto LABEL_8;
    goto LABEL_81;
  }
  v96 = 0uLL;
  v9 = *a5;
  if (*a5)
    *v9 += 2;
  *(_QWORD *)&v93 = &off_1E0FD2F10;
  *((_QWORD *)&v93 + 1) = 0;
  v94 = 0;
  v95 = v9;
  v10 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v8 + 312), &v96, (uint64_t)&v93);
  v11 = v95;
  *(_QWORD *)&v93 = &off_1E0FD2F10;
  v95 = 0;
  if (!v11)
    goto LABEL_7;
  v12 = *v11 - 2;
  if (*v11 != 2)
  {
LABEL_6:
    *v11 = v12;
    goto LABEL_7;
  }
LABEL_80:
  WTF::StringImpl::destroy();
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13)
  {
LABEL_8:
    if ((_DWORD)v13 == *(_DWORD *)(a2 + 8))
    {
      v14 = v13 + (v13 >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v15;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1824995F8);
      }
      v17 = *(int ***)a2;
      v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
      *(_DWORD *)(a2 + 8) = v16;
      *(_QWORD *)a2 = v18;
      memcpy(v18, v17, 8 * v13);
      if (v17)
      {
        if (*(int ***)a2 == v17)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v17, v19);
      }
      v13 = *(unsigned int *)(a2 + 12);
      v20 = *(int ***)a2;
      v21 = *(int **)(a3 + 24);
      if (v21)
        *v21 += 2;
      v20[v13] = v21;
    }
    else
    {
      v20 = *(int ***)a2;
      v33 = *(int **)(a3 + 24);
      if (v33)
        *v33 += 2;
      v20[v13] = v33;
    }
    v96 = 0uLL;
    *(_DWORD *)(a2 + 12) = v13 + 1;
    if ((_DWORD)v13 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1824995E8);
    }
    v34 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 312);
    v35 = *v20;
    if (v35)
      *v35 += 2;
    *(_QWORD *)&v93 = &off_1E0FD2F10;
    *((_QWORD *)&v93 + 1) = 0;
    v94 = 0;
    v95 = v35;
    v36 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v34, &v96, (uint64_t)&v93);
    v37 = v95;
    *(_QWORD *)&v93 = &off_1E0FD2F10;
    v95 = 0;
    if (v37)
    {
      if (*v37 == 2)
      {
        WTF::StringImpl::destroy();
        LODWORD(v38) = *(_DWORD *)(a2 + 12);
        if (v38 >= 2)
        {
LABEL_54:
          v92 = v10;
          v39 = 1;
          do
          {
            v41 = *(_QWORD *)(a1 + 8);
            v42 = *(_DWORD **)(*(_QWORD *)a2 + 8 * v39);
            if (v42)
              *v42 += 2;
            v43 = *(_QWORD **)(v41 + 312);
            if (*(_QWORD *)(v41 + 320) - (_QWORD)v43 <= 0x87uLL)
            {
              WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v41 + 312));
              v43 = *(_QWORD **)(v41 + 312);
            }
            *((_BYTE *)v43 + 56) = 0;
            v43[2] = 0;
            v43[3] = 0;
            *((_BYTE *)v43 + 32) = 0;
            *v43 = off_1E0FD3878;
            v43[1] = 0;
            v43[10] = 0;
            v43[11] = 0;
            v43[8] = v36;
            v43[9] = &off_1E0FD2F10;
            v43[14] = 0;
            v43[15] = 0;
            v43[12] = v42;
            v43[13] = &off_1E0FD2F10;
            if (v42)
              *v42 += 2;
            v43[16] = v42;
            *(_QWORD *)(v41 + 312) += 136;
            v44 = *(unsigned int *)(v41 + 356);
            if ((_DWORD)v44 == *(_DWORD *)(v41 + 352))
            {
              v45 = v44 + (v44 >> 2);
              if (v45 >= 0x10)
                v46 = v45 + 1;
              else
                v46 = 16;
              if (v46 <= v44 + 1)
                v47 = v44 + 1;
              else
                v47 = v46;
              if (v47 >> 29)
                goto LABEL_165;
              v48 = *(void **)(v41 + 344);
              v49 = (void *)WTF::fastMalloc((WTF *)(8 * v47));
              *(_DWORD *)(v41 + 352) = v47;
              *(_QWORD *)(v41 + 344) = v49;
              memcpy(v49, v48, 8 * v44);
              if (v48)
              {
                if (*(void **)(v41 + 344) == v48)
                {
                  *(_QWORD *)(v41 + 344) = 0;
                  *(_DWORD *)(v41 + 352) = 0;
                }
                WTF::fastFree((WTF *)v48, v50);
              }
              v44 = *(unsigned int *)(v41 + 356);
              v40 = (_QWORD *)(*(_QWORD *)(v41 + 344) + 8 * v44);
            }
            else
            {
              v40 = (_QWORD *)(*(_QWORD *)(v41 + 344) + 8 * v44);
            }
            ++v39;
            *v40 = v43;
            *(_DWORD *)(v41 + 356) = v44 + 1;
            v38 = *(unsigned int *)(a2 + 12);
            v36 = v43;
          }
          while (v39 < v38);
          v10 = v92;
LABEL_105:
          if (!(_DWORD)v38)
          {
            __break(0xC471u);
            JUMPOUT(0x1824995F0);
          }
          v64 = v38 - 1;
          result = *(_DWORD **)(*(_QWORD *)a2 + 8 * v64);
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v64) = 0;
          if (result)
          {
            if (*result == 2)
            {
              result = (_DWORD *)WTF::StringImpl::destroy();
              *(_DWORD *)(a2 + 12) = v64;
              v66 = *(_QWORD *)(a1 + 8);
              v67 = *(_QWORD **)(v66 + 312);
              if (*(_QWORD *)(v66 + 320) - (_QWORD)v67 > 0x27uLL)
                goto LABEL_110;
              goto LABEL_139;
            }
            *result -= 2;
          }
          *(_DWORD *)(a2 + 12) = v64;
          v66 = *(_QWORD *)(a1 + 8);
          v67 = *(_QWORD **)(v66 + 312);
          if (*(_QWORD *)(v66 + 320) - (_QWORD)v67 > 0x27uLL)
            goto LABEL_110;
LABEL_139:
          result = (_DWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v66 + 312));
          v67 = *(_QWORD **)(v66 + 312);
LABEL_110:
          *v67 = &off_1E0FD38F8;
          v67[1] = 0;
          v67[2] = 0;
          v67[3] = v43;
          v67[4] = v10;
          *(_QWORD *)(v66 + 312) += 40;
          v68 = *(unsigned int *)(v66 + 356);
          if ((_DWORD)v68 == *(_DWORD *)(v66 + 352))
          {
            v69 = v68 + (v68 >> 2);
            if (v69 >= 0x10)
              v70 = v69 + 1;
            else
              v70 = 16;
            if (v70 <= v68 + 1)
              v71 = v68 + 1;
            else
              v71 = v70;
            if (v71 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182499600);
            }
            v72 = *(void **)(v66 + 344);
            v73 = (void *)WTF::fastMalloc((WTF *)(8 * v71));
            *(_DWORD *)(v66 + 352) = v71;
            *(_QWORD *)(v66 + 344) = v73;
            result = memcpy(v73, v72, 8 * v68);
            if (v72)
            {
              if (*(void **)(v66 + 344) == v72)
              {
                *(_QWORD *)(v66 + 344) = 0;
                *(_DWORD *)(v66 + 352) = 0;
              }
              result = (_DWORD *)WTF::fastFree((WTF *)v72, v74);
            }
            v75 = *(unsigned int *)(v66 + 356);
            *(_QWORD *)(*(_QWORD *)(v66 + 344) + 8 * v75) = v67;
            *(_DWORD *)(v66 + 356) = v75 + 1;
            v76 = *(unsigned int *)(a1 + 68);
            if ((_DWORD)v76 != *(_DWORD *)(a1 + 64))
              goto LABEL_123;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v66 + 344) + 8 * v68) = v67;
            *(_DWORD *)(v66 + 356) = v68 + 1;
            v76 = *(unsigned int *)(a1 + 68);
            if ((_DWORD)v76 != *(_DWORD *)(a1 + 64))
            {
LABEL_123:
              v77 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v76);
LABEL_137:
              *v77 = v67;
              goto LABEL_156;
            }
          }
          v78 = v76 + (v76 >> 2);
          if (v78 >= 0x10)
            v79 = v78 + 1;
          else
            v79 = 16;
          if (v79 <= v76 + 1)
            v80 = v76 + 1;
          else
            v80 = v79;
          if (v80 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182499608);
          }
          v81 = *(void **)(a1 + 56);
          v82 = (void *)WTF::fastMalloc((WTF *)(8 * v80));
          *(_DWORD *)(a1 + 64) = v80;
          *(_QWORD *)(a1 + 56) = v82;
          result = memcpy(v82, v81, 8 * v76);
          if (v81)
          {
            if (*(void **)(a1 + 56) == v81)
            {
              *(_QWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 64) = 0;
            }
            result = (_DWORD *)WTF::fastFree((WTF *)v81, v83);
          }
          v76 = *(unsigned int *)(a1 + 68);
          v77 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v76);
          goto LABEL_137;
        }
LABEL_104:
        v43 = v36;
        goto LABEL_105;
      }
      *v37 -= 2;
    }
    LODWORD(v38) = *(_DWORD *)(a2 + 12);
    if (v38 >= 2)
      goto LABEL_54;
    goto LABEL_104;
  }
LABEL_81:
  v51 = *(_QWORD *)(a1 + 8);
  v93 = 0uLL;
  v52 = *(_DWORD **)(a3 + 24);
  if (v52)
    *v52 += 2;
  v53 = *(_QWORD **)(a3 + 32);
  v54 = *(_QWORD *)(v51 + 312);
  if ((unint64_t)(*(_QWORD *)(v51 + 320) - v54) <= 0xB7)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v51 + 312));
    v54 = *(_QWORD *)(v51 + 312);
  }
  *(_QWORD *)v54 = &off_1E0FD38A0;
  *(_QWORD *)(v54 + 8) = 0;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 40) = 0;
  *(_QWORD *)(v54 + 16) = 0;
  *(_QWORD *)(v54 + 24) = &off_1E0FD2F10;
  *(_QWORD *)(v54 + 64) = 0;
  *(_QWORD *)(v54 + 72) = 0;
  *(_QWORD *)(v54 + 48) = v52;
  *(_QWORD *)(v54 + 56) = &off_1E0FD2F10;
  if (v52)
    *v52 += 2;
  *(_QWORD *)(v54 + 80) = v52;
  *(_QWORD *)(v54 + 88) = 0;
  *(_QWORD *)(v54 + 96) = 0;
  *(_QWORD *)(v54 + 104) = 0;
  *(_QWORD *)(v54 + 112) = v53;
  *(_QWORD *)(v54 + 120) = v10;
  *(_WORD *)(v54 + 128) = 3;
  *(_BYTE *)(v54 + 160) = 0;
  *(_BYTE *)(v54 + 164) = 0;
  *(_BYTE *)(v54 + 168) = 0;
  *(_BYTE *)(v54 + 172) = 0;
  *(_BYTE *)(v54 + 176) = 0;
  if (v53)
    v55 = v53;
  else
    v55 = v10;
  *(_QWORD *)(v54 + 149) = 0;
  *(_QWORD *)(v54 + 136) = 0;
  *(_QWORD *)(v54 + 144) = 0;
  *(_QWORD *)(v54 + 144) = v55[3];
  *(_QWORD *)(v51 + 312) += 184;
  v56 = *(unsigned int *)(v51 + 356);
  if ((_DWORD)v56 == *(_DWORD *)(v51 + 352))
  {
    v57 = v56 + (v56 >> 2);
    if (v57 >= 0x10)
      v58 = v57 + 1;
    else
      v58 = 16;
    if (v58 <= v56 + 1)
      v59 = v56 + 1;
    else
      v59 = v58;
    if (v59 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x182499618);
    }
    v60 = *(void **)(v51 + 344);
    v61 = (void *)WTF::fastMalloc((WTF *)(8 * v59));
    *(_DWORD *)(v51 + 352) = v59;
    *(_QWORD *)(v51 + 344) = v61;
    memcpy(v61, v60, 8 * v56);
    if (v60)
    {
      if (*(void **)(v51 + 344) == v60)
      {
        *(_QWORD *)(v51 + 344) = 0;
        *(_DWORD *)(v51 + 352) = 0;
      }
      WTF::fastFree((WTF *)v60, v62);
    }
    v56 = *(unsigned int *)(v51 + 356);
    v63 = (uint64_t *)(*(_QWORD *)(v51 + 344) + 8 * v56);
  }
  else
  {
    v63 = (uint64_t *)(*(_QWORD *)(v51 + 344) + 8 * v56);
  }
  *v63 = v54;
  *(_DWORD *)(v51 + 356) = v56 + 1;
  result = WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>((_QWORD *)(v51 + 312), &v93, v54);
  v84 = result;
  v76 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v76 == *(_DWORD *)(a1 + 64))
  {
    v85 = v76 + (v76 >> 2);
    if (v85 >= 0x10)
      v86 = v85 + 1;
    else
      v86 = 16;
    if (v86 <= v76 + 1)
      v87 = v76 + 1;
    else
      v87 = v86;
    if (v87 >> 29)
    {
LABEL_165:
      __break(0xC471u);
      JUMPOUT(0x1824995E0);
    }
    v88 = *(void **)(a1 + 56);
    v89 = (void *)WTF::fastMalloc((WTF *)(8 * v87));
    *(_DWORD *)(a1 + 64) = v87;
    *(_QWORD *)(a1 + 56) = v89;
    result = memcpy(v89, v88, 8 * v76);
    if (v88)
    {
      if (*(void **)(a1 + 56) == v88)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
      }
      result = (_DWORD *)WTF::fastFree((WTF *)v88, v90);
    }
    v76 = *(unsigned int *)(a1 + 68);
    v91 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v76);
  }
  else
  {
    v91 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v76);
  }
  *v91 = v84;
LABEL_156:
  *(_DWORD *)(a1 + 68) = v76 + 1;
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>(_QWORD *this, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD38D0;
  *(_QWORD *)(v6 + 24) = a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::rewriteEntryPoints(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  int i;
  int v14;
  WTF *v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  if (*(_BYTE *)(a1 + 392))
  {
    v4 = *(_DWORD *)(a1 + 372);
    if (v4)
    {
      v6 = *a2;
      if (*a2)
      {
        v7 = *(uint64_t **)(a1 + 360);
        v8 = &v7[3 * v4];
LABEL_5:
        v9 = *(_DWORD *)(v6 - 8);
        v10 = (WTF::StringImpl *)v7[2];
        v11 = *((_DWORD *)v10 + 4);
        if (v11 < 0x100)
          v12 = WTF::StringImpl::hashSlowCase(v10);
        else
          v12 = v11 >> 8;
        for (i = 0; ; v12 = i + v14)
        {
          v14 = v12 & v9;
          v15 = *(WTF **)(v6 + 16 * (v12 & v9));
          if (v15 != (WTF *)-1)
          {
            if (!v15)
              goto LABEL_14;
            if ((WTF::equal(v15, (const WTF::StringImpl *)v7[2], a3) & 1) != 0)
              break;
          }
          ++i;
        }
        v16 = *v7;
        v18[0] = *((_BYTE *)v7 + 8);
        v19 = a1;
        v20 = v16;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        WGSL::EntryPointRewriter::rewrite((WGSL::EntryPointRewriter *)v18);
        WGSL::EntryPointRewriter::~EntryPointRewriter((WGSL::EntryPointRewriter *)v18, v17);
LABEL_14:
        while (1)
        {
          v7 += 3;
          if (v7 == v8)
            break;
          v6 = *a2;
          if (*a2)
            goto LABEL_5;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t WGSL::AST::Structure::name(WGSL::AST::Structure *this)
{
  return (uint64_t)this + 24;
}

void WGSL::EntryPointRewriter::~EntryPointRewriter(WGSL::EntryPointRewriter *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  _DWORD *v16;
  WTF *v17;

  v3 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*v3 == 2)
    {
      WTF::StringImpl::destroy();
      v4 = (_DWORD *)*((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (!v4)
        goto LABEL_9;
      goto LABEL_7;
    }
    *v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v4)
  {
LABEL_9:
    v5 = (WTF *)*((_QWORD *)this + 7);
    if (!v5)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_7:
  if (*v4 != 2)
  {
    *v4 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy();
  v5 = (WTF *)*((_QWORD *)this + 7);
  if (v5)
  {
LABEL_10:
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
LABEL_11:
  v6 = *((unsigned int *)this + 13);
  if ((_DWORD)v6)
  {
    v7 = 56 * v6;
    v8 = *((_QWORD *)this + 5) + 24;
    do
    {
      v9 = *(WTF **)(v8 + 16);
      if (v9)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v9, a2);
      }
      *(_QWORD *)(v8 - 24) = &off_1E0FD2F10;
      v10 = *(_DWORD **)v8;
      *(_QWORD *)v8 = 0;
      if (v10)
      {
        if (*v10 == 2)
          WTF::StringImpl::destroy();
        else
          *v10 -= 2;
      }
      v8 += 56;
      v7 -= 56;
    }
    while (v7);
  }
  v11 = (WTF *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((unsigned int *)this + 9);
  if ((_DWORD)v12)
  {
    v13 = v12 << 6;
    v14 = *((_QWORD *)this + 3) + 24;
    do
    {
      v15 = *(WTF **)(v14 + 16);
      if (v15)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        WTF::fastFree(v15, a2);
      }
      *(_QWORD *)(v14 - 24) = &off_1E0FD2F10;
      v16 = *(_DWORD **)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
      {
        if (*v16 == 2)
          WTF::StringImpl::destroy();
        else
          *v16 -= 2;
      }
      v14 += 64;
      v13 -= 64;
    }
    while (v13);
  }
  v17 = (WTF *)*((_QWORD *)this + 3);
  if (v17)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v17, a2);
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  int8x16_t *v19;
  size_t v20;
  _BYTE *v21;
  unint64_t v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  unint64_t v25;
  _WORD *v26;
  unint64_t v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  _WORD *v39;
  int8x16_t *v40;
  __int16 v41;
  int8x16_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  size_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  _BYTE *v60;
  int8x16_t *v61;
  char v62;
  unint64_t v63;
  _WORD *v64;
  int8x16_t *v65;
  __int16 v66;
  unint64_t v67;
  _WORD *v68;
  unint64_t v69;
  __int128 v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  _WORD *v81;
  int8x16_t *v82;
  __int16 v83;
  uint8x8_t *v84;
  uint16x8_t *v85;
  unint64_t v86;
  uint8x16_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint8x8_t *v90;
  uint16x8_t *v91;
  unint64_t v92;
  uint8x8_t v93;
  uint8x8_t *v94;
  uint16x8_t *v95;
  unint64_t v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x8_t *v100;
  uint16x8_t *v101;
  unint64_t v102;
  uint8x8_t v103;
  uint64_t v104;
  unint64_t v105;
  int8x16_t *v106;
  int8x16_t *v107;
  unint64_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int16x8_t *v113;
  int8x8_t *v114;
  unint64_t v115;
  int16x8_t v116;
  uint8x8_t *v117;
  uint16x8_t *v118;
  unint64_t v119;
  uint8x16_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint8x8_t *v123;
  uint16x8_t *v124;
  unint64_t v125;
  uint8x8_t v126;
  uint64_t v127;
  int8x16x2_t v128;
  int8x16x2_t v129;
  int8x16x2_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v127;
        if (!v127)
          goto LABEL_18;
        v16 = (_BYTE *)(v127 + 20);
        *(_DWORD *)v127 = 2;
        *(_DWORD *)(v127 + 4) = v13;
        *(_QWORD *)(v127 + 8) = v127 + 20;
        *(_DWORD *)(v127 + 16) = 4;
        if (a4)
        {
          if (a4 != 1)
          {
            result = (uint64_t)memcpy((void *)(v127 + 20), a3, a4);
            v17 = a4;
            v18 = &v16[a4];
            if (a5)
            {
LABEL_9:
              v19 = *(int8x16_t **)(a5 + 8);
              v20 = *(unsigned int *)(a5 + 4);
              if ((*(_BYTE *)(a5 + 16) & 4) != 0)
              {
                if ((_DWORD)v20)
                {
                  if ((_DWORD)v20 == 1)
                    *v18 = v19->i8[0];
                  else
                    result = (uint64_t)memcpy(v18, v19, v20);
                }
                goto LABEL_72;
              }
              v21 = &v18[v20];
              if (v20 < 0x10)
              {
                v22 = (unint64_t)v18;
              }
              else
              {
                v22 = (unint64_t)&v18[v20 & 0xFFFFFFF0];
                v23 = (unsigned __int128 *)v18;
                do
                {
                  v24 = (unsigned __int128)vld2q_s8(v19->i8);
                  v19 += 2;
                  *v23++ = v24;
                }
                while (v23 != (unsigned __int128 *)v22);
              }
              if ((_BYTE *)v22 == v21)
              {
LABEL_72:
                v44 = *(unsigned int *)(a5 + 4);
LABEL_73:
                if (a7)
                {
                  result = (uint64_t)&v18[v44];
                  if (a7 == 1)
                    *(_BYTE *)result = a6->i8[0];
                  else
                    result = (uint64_t)memcpy((void *)result, a6, a7);
                }
                goto LABEL_18;
              }
              v56 = v127 + v20 + v17;
              v57 = v56 - v22 + 20;
              if (v57 < 8
                || (v22 < (unint64_t)&v19[2].u64[1] + 2 * v56 + -2 * v22
                  ? (v58 = (unint64_t)v19 >= v56 + 20)
                  : (v58 = 1),
                    !v58))
              {
                v60 = (_BYTE *)v22;
                v61 = v19;
                goto LABEL_61;
              }
              if (v57 >= 0x20)
              {
                v59 = v57 & 0xFFFFFFFFFFFFFFE0;
                v106 = v19 + 2;
                v107 = (int8x16_t *)(v22 + 16);
                v108 = v57 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v110 = v106[-2];
                  v109 = v106[-1];
                  v112 = *v106;
                  v111 = v106[1];
                  v106 += 4;
                  v107[-1] = vuzp1q_s8(v110, v109);
                  *v107 = vuzp1q_s8(v112, v111);
                  v107 += 2;
                  v108 -= 32;
                }
                while (v108);
                if (v57 == v59)
                  goto LABEL_72;
                if ((v57 & 0x18) == 0)
                {
                  v61 = (int8x16_t *)((char *)v19 + 2 * v59);
                  v60 = (_BYTE *)(v22 + v59);
                  do
                  {
LABEL_61:
                    v62 = v61->i8[0];
                    v61 = (int8x16_t *)((char *)v61 + 2);
                    *v60++ = v62;
                  }
                  while (v60 != v21);
                  goto LABEL_72;
                }
              }
              else
              {
                v59 = 0;
              }
              v60 = (_BYTE *)(v22 + (v57 & 0xFFFFFFFFFFFFFFF8));
              v61 = (int8x16_t *)((char *)v19 + 2 * (v57 & 0xFFFFFFFFFFFFFFF8));
              v113 = (int16x8_t *)((char *)v19 + 2 * v59);
              v114 = (int8x8_t *)(v22 + v59);
              v115 = v59 - (v57 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v116 = *v113++;
                *v114++ = vmovn_s16(v116);
                v115 += 8;
              }
              while (v115);
              if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_72;
              goto LABEL_61;
            }
LABEL_41:
            v44 = 0;
            goto LABEL_73;
          }
          *v16 = a3->i8[0];
        }
        v17 = a4;
        v18 = &v16[a4];
        if (a5)
          goto LABEL_9;
        goto LABEL_41;
      }
LABEL_16:
      v15 = 0;
      goto LABEL_18;
    }
LABEL_17:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_18;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_16;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v127;
  if (!v127)
    goto LABEL_18;
  v25 = v127 + 20;
  *(_DWORD *)v127 = 2;
  *(_DWORD *)(v127 + 4) = v13;
  *(_QWORD *)(v127 + 8) = v127 + 20;
  *(_DWORD *)(v127 + 16) = 0;
  v26 = (_WORD *)(v127 + 20 + 2 * a4);
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v27 = v25 + 2 * (a4 & 0xFFFFFFC0);
    v28 = 0uLL;
    do
    {
      v128.val[0] = *a3;
      v29 = a3[1];
      v131.val[0] = a3[2];
      v30 = a3[3];
      a3 += 4;
      v31 = v30;
      v131.val[1] = 0uLL;
      v134.val[0] = v29;
      v128.val[1] = 0uLL;
      v32 = (char *)v25;
      vst2q_s8(v32, v128);
      v32 += 32;
      v134.val[1] = 0uLL;
      vst2q_s8(v32, v134);
      v33 = (char *)(v25 + 64);
      vst2q_s8(v33, v131);
      v34 = (char *)(v25 + 96);
      vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
      v25 += 128;
    }
    while (v25 != v27);
    v25 = v27;
  }
  if ((_WORD *)v25 != v26)
  {
    v35 = v127 + 2 * a4 - v25 + 18;
    if (v35 < 0xE
      || (v25 < (unint64_t)a3->u64 + (v35 >> 1) + 1
        ? (v36 = (unint64_t)a3 >= (v35 & 0xFFFFFFFFFFFFFFFELL) + v25 + 2)
        : (v36 = 1),
          !v36))
    {
      v39 = (_WORD *)v25;
      v40 = a3;
      goto LABEL_34;
    }
    v37 = (v35 >> 1) + 1;
    if (v35 >= 0x3E)
    {
      v38 = v37 & 0xFFFFFFFFFFFFFFE0;
      v84 = (uint8x8_t *)&a3[1];
      v85 = (uint16x8_t *)(v25 + 32);
      v86 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v87 = *(uint8x16_t *)v84[-2].i8;
        v88 = vmovl_u8(*v84);
        v89 = vmovl_high_u8(*(uint8x16_t *)v84->i8);
        v85[-2] = vmovl_u8(*(uint8x8_t *)v87.i8);
        v85[-1] = vmovl_high_u8(v87);
        *v85 = v88;
        v85[1] = v89;
        v85 += 4;
        v84 += 4;
        v86 -= 32;
      }
      while (v86);
      if (v37 == v38)
        goto LABEL_35;
      if ((v37 & 0x18) == 0)
      {
        v40 = (int8x16_t *)((char *)a3 + v38);
        v39 = (_WORD *)(v25 + 2 * v38);
        do
        {
LABEL_34:
          v41 = v40->u8[0];
          v40 = (int8x16_t *)((char *)v40 + 1);
          *v39++ = v41;
        }
        while (v39 != v26);
        goto LABEL_35;
      }
    }
    else
    {
      v38 = 0;
    }
    v39 = (_WORD *)(v25 + 2 * (v37 & 0xFFFFFFFFFFFFFFF8));
    v40 = (int8x16_t *)((char *)a3 + (v37 & 0xFFFFFFFFFFFFFFF8));
    v90 = (uint8x8_t *)&a3->i8[v38];
    v91 = (uint16x8_t *)(v25 + 2 * v38);
    v92 = v38 - (v37 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v93 = *v90++;
      *v91++ = vmovl_u8(v93);
      v92 += 8;
    }
    while (v92);
    if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
  }
LABEL_35:
  if (!a5)
  {
    v45 = 0;
    goto LABEL_79;
  }
  v42 = *(int8x16_t **)(a5 + 8);
  v43 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) == 0)
  {
    if ((_DWORD)v43)
    {
      if ((_DWORD)v43 == 1)
        *v26 = v42->i16[0];
      else
        result = (uint64_t)memcpy(v26, v42, 2 * v43);
    }
    goto LABEL_78;
  }
  v46 = &v26[v43];
  if (v43 < 0x40)
  {
    v47 = v127 + 20 + 2 * a4;
  }
  else
  {
    v47 = (unint64_t)&v26[v43 & 0xFFFFFFC0];
    v48 = 0uLL;
    v49 = v127 + 20 + 2 * a4;
    do
    {
      v129.val[0] = *v42;
      v50 = v42[1];
      v132.val[0] = v42[2];
      v51 = v42[3];
      v42 += 4;
      v52 = v51;
      v132.val[1] = 0uLL;
      v135.val[0] = v50;
      v129.val[1] = 0uLL;
      v53 = (char *)v49;
      vst2q_s8(v53, v129);
      v53 += 32;
      v135.val[1] = 0uLL;
      vst2q_s8(v53, v135);
      v54 = (char *)(v49 + 64);
      vst2q_s8(v54, v132);
      v55 = (char *)(v49 + 96);
      vst2q_s8(v55, *(int8x16x2_t *)(&v48 - 1));
      v49 += 128;
    }
    while (v49 != v47);
  }
  if ((_WORD *)v47 != v46)
  {
    v63 = v127 + 2 * (a4 + v43) - v47 + 18;
    if (v63 < 0xE
      || v47 < (unint64_t)v42->u64 + (v63 >> 1) + 1
      && (unint64_t)v42 < (v63 & 0xFFFFFFFFFFFFFFFELL) + v47 + 2)
    {
      v64 = (_WORD *)v47;
      v65 = v42;
      goto LABEL_69;
    }
    v104 = (v63 >> 1) + 1;
    if (v63 >= 0x3E)
    {
      v105 = v104 & 0xFFFFFFFFFFFFFFE0;
      v117 = (uint8x8_t *)&v42[1];
      v118 = (uint16x8_t *)(v47 + 32);
      v119 = v104 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v120 = *(uint8x16_t *)v117[-2].i8;
        v121 = vmovl_u8(*v117);
        v122 = vmovl_high_u8(*(uint8x16_t *)v117->i8);
        v118[-2] = vmovl_u8(*(uint8x8_t *)v120.i8);
        v118[-1] = vmovl_high_u8(v120);
        *v118 = v121;
        v118[1] = v122;
        v118 += 4;
        v117 += 4;
        v119 -= 32;
      }
      while (v119);
      if (v104 == v105)
        goto LABEL_78;
      if ((v104 & 0x18) == 0)
      {
        v65 = (int8x16_t *)((char *)v42 + v105);
        v64 = (_WORD *)(v47 + 2 * v105);
        do
        {
LABEL_69:
          v66 = v65->u8[0];
          v65 = (int8x16_t *)((char *)v65 + 1);
          *v64++ = v66;
        }
        while (v64 != v46);
        goto LABEL_78;
      }
    }
    else
    {
      v105 = 0;
    }
    v64 = (_WORD *)(v47 + 2 * (v104 & 0xFFFFFFFFFFFFFFF8));
    v65 = (int8x16_t *)((char *)v42 + (v104 & 0xFFFFFFFFFFFFFFF8));
    v123 = (uint8x8_t *)&v42->i8[v105];
    v124 = (uint16x8_t *)(v47 + 2 * v105);
    v125 = v105 - (v104 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v126 = *v123++;
      *v124++ = vmovl_u8(v126);
      v125 += 8;
    }
    while (v125);
    if (v104 == (v104 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_78;
    goto LABEL_69;
  }
LABEL_78:
  v45 = *(unsigned int *)(a5 + 4);
LABEL_79:
  v67 = (unint64_t)&v26[v45];
  v68 = (_WORD *)(v67 + 2 * a7);
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    v69 = v67 + 2 * (a7 & 0xFFFFFFC0);
    v70 = 0uLL;
    do
    {
      v130.val[0] = *a6;
      v71 = a6[1];
      v133.val[0] = a6[2];
      v72 = a6[3];
      a6 += 4;
      v73 = v72;
      v133.val[1] = 0uLL;
      v136.val[0] = v71;
      v130.val[1] = 0uLL;
      v74 = (char *)v67;
      vst2q_s8(v74, v130);
      v74 += 32;
      v136.val[1] = 0uLL;
      vst2q_s8(v74, v136);
      v75 = (char *)(v67 + 64);
      vst2q_s8(v75, v133);
      v76 = (char *)(v67 + 96);
      vst2q_s8(v76, *(int8x16x2_t *)(&v70 - 1));
      v67 += 128;
    }
    while (v67 != v69);
    v67 = v69;
  }
  if ((_WORD *)v67 != v68)
  {
    v77 = v127 + 2 * (v45 + a4 + a7) - v67 + 18;
    if (v77 < 0xE
      || (v67 < (unint64_t)a6->u64 + (v77 >> 1) + 1
        ? (v78 = (unint64_t)a6 >= (v77 & 0xFFFFFFFFFFFFFFFELL) + v67 + 2)
        : (v78 = 1),
          !v78))
    {
      v81 = (_WORD *)v67;
      v82 = a6;
      goto LABEL_93;
    }
    v79 = (v77 >> 1) + 1;
    if (v77 >= 0x3E)
    {
      v80 = v79 & 0xFFFFFFFFFFFFFFE0;
      v94 = (uint8x8_t *)&a6[1];
      v95 = (uint16x8_t *)(v67 + 32);
      v96 = v79 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v97 = *(uint8x16_t *)v94[-2].i8;
        v98 = vmovl_u8(*v94);
        v99 = vmovl_high_u8(*(uint8x16_t *)v94->i8);
        v95[-2] = vmovl_u8(*(uint8x8_t *)v97.i8);
        v95[-1] = vmovl_high_u8(v97);
        *v95 = v98;
        v95[1] = v99;
        v95 += 4;
        v94 += 4;
        v96 -= 32;
      }
      while (v96);
      if (v79 == v80)
        goto LABEL_18;
      if ((v79 & 0x18) == 0)
      {
        v82 = (int8x16_t *)((char *)a6 + v80);
        v81 = (_WORD *)(v67 + 2 * v80);
        goto LABEL_93;
      }
    }
    else
    {
      v80 = 0;
    }
    v81 = (_WORD *)(v67 + 2 * (v79 & 0xFFFFFFFFFFFFFFF8));
    v82 = (int8x16_t *)((char *)a6 + (v79 & 0xFFFFFFFFFFFFFFF8));
    v100 = (uint8x8_t *)&a6->i8[v80];
    v101 = (uint16x8_t *)(v67 + 2 * v80);
    v102 = v80 - (v79 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v103 = *v100++;
      *v101++ = vmovl_u8(v103);
      v102 += 8;
    }
    while (v102);
    if (v79 == (v79 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_18;
    do
    {
LABEL_93:
      v83 = v82->u8[0];
      v82 = (int8x16_t *)((char *)v82 + 1);
      *v81++ = v83;
    }
    while (v81 != v68);
  }
LABEL_18:
  *a8 = v15;
  return result;
}

void WGSL::AST::Parameter::~Parameter(WGSL::AST::Parameter *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 4) = &off_1E0FD2F10;
  v4 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WTF::StringImpl::destroy();
    else
      *v4 -= 2;
  }
}

{
  WTF *v3;
  _DWORD *v4;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 4) = &off_1E0FD2F10;
  v4 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WTF::StringImpl::destroy();
    else
      *v4 -= 2;
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::Parameter::kind(WGSL::AST::Parameter *this)
{
  return 28;
}

void std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Parameter &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

_QWORD *std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Parameter &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FD3608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Parameter &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FD3608;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Parameter &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_DWORD *)(v1 + 12);
  if (v2)
    *(_DWORD *)(v1 + 12) = v2 - 1;
  else
    __break(0xC471u);
  return result;
}

void std::__function::__func<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 std::__function::__func<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E0FD3650;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E0FD3650;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *result;

  v1 = a1[1];
  v2 = a1[3];
  v3 = (char *)(*(_QWORD *)v1 + 8 * a1[2]);
  result = memmove(v3, &v3[8 * v2], *(_QWORD *)v1 + 8 * *(unsigned int *)(v1 + 12) - (_QWORD)&v3[8 * v2]);
  *(_DWORD *)(v1 + 12) -= v2;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = &off_1E0FD3698;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = &off_1E0FD3698;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  JUMPOUT(0x186DAB2A8);
}

_QWORD *std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;

  result = operator new(0x20uLL);
  v3 = result;
  v4 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FD3698;
  result[1] = v4;
  v5 = *(unsigned int *)(a1 + 28);
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 7) = v5;
  if (!(_DWORD)v5)
    return v3;
  if (!(v5 >> 29))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *((_DWORD *)v3 + 6) = v5;
    v3[2] = v6;
    v7 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v9 < 3)
      {
        v10 = *(uint64_t **)(a1 + 16);
      }
      else
      {
        v10 = *(uint64_t **)(a1 + 16);
        if ((unint64_t)v6 - v8 >= 0x20)
        {
          v11 = v9 + 1;
          v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          v13 = &v6[v12];
          v10 = (uint64_t *)(v8 + v12 * 8);
          v14 = (__int128 *)(v8 + 16);
          v15 = v6 + 2;
          v16 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v17 = *v14;
            *(v15 - 1) = *(v14 - 1);
            *v15 = v17;
            v14 += 2;
            v15 += 2;
            v16 -= 4;
          }
          while (v16);
          v6 = v13;
          if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
            return v3;
        }
      }
      v18 = (uint64_t *)(v8 + 8 * v7);
      do
      {
        v19 = *v10++;
        *v6++ = v19;
      }
      while (v10 != v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E0FD3698;
  *(_QWORD *)(a2 + 8) = v2;
  v3 = *(unsigned int *)(result + 28);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v5 = result;
    result = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 16) = result;
    v6 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(v5 + 16);
      v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v8 < 3)
      {
        v9 = *(uint64_t **)(v5 + 16);
      }
      else
      {
        v9 = *(uint64_t **)(v5 + 16);
        if ((unint64_t)(result - v7) >= 0x20)
        {
          v10 = v8 + 1;
          v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
          v12 = result + v11;
          v9 = (uint64_t *)(v7 + v11);
          v13 = (__int128 *)(v7 + 16);
          v14 = (_OWORD *)(result + 16);
          v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v16 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *v14 = v16;
            v13 += 2;
            v14 += 2;
            v15 -= 4;
          }
          while (v15);
          result = v12;
          if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
      }
      v17 = (uint64_t *)(v7 + 8 * v6);
      do
      {
        v18 = *v9++;
        *(_QWORD *)result = v18;
        result += 8;
      }
      while (v9 != v17);
    }
  }
  return result;
}

WTF *std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1, void *a2)
{
  WTF *result;

  result = *(WTF **)(a1 + 16);
  if (result)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(_QWORD *__p, void *a2)
{
  WTF *v3;

  v3 = (WTF *)__p[2];
  if (v3)
  {
    __p[2] = 0;
    *((_DWORD *)__p + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result, void *a2)
{
  const void **v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;

  v2 = (const void **)(result + 16);
  v3 = *(_QWORD *)(result + 8);
  if (result + 16 != v3)
  {
    v4 = result;
    v5 = *(_DWORD *)(v3 + 12);
    v6 = *(_DWORD *)(result + 28);
    if (v5 <= v6)
    {
      v9 = *(_DWORD *)(v3 + 8);
      if (v6 > v9)
      {
        if (v9)
        {
          if (v5)
            *(_DWORD *)(v3 + 12) = 0;
          result = *(_QWORD *)v3;
          if (*(_QWORD *)v3)
          {
            *(_QWORD *)v3 = 0;
            *(_DWORD *)(v3 + 8) = 0;
            result = WTF::fastFree((WTF *)result, a2);
            v9 = *(_DWORD *)(v3 + 8);
          }
        }
        v10 = *(unsigned int *)(v4 + 28);
        if (v9 < v10)
        {
          if (v10 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v11 = *(void **)v3;
          v12 = *(unsigned int *)(v3 + 12);
          v13 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
          *(_DWORD *)(v3 + 8) = v10;
          *(_QWORD *)v3 = v13;
          memcpy(v13, v11, 8 * v12);
          if (v11)
          {
            if (*(void **)v3 == v11)
            {
              *(_QWORD *)v3 = 0;
              *(_DWORD *)(v3 + 8) = 0;
            }
            WTF::fastFree((WTF *)v11, v14);
          }
        }
      }
      v6 = *(_DWORD *)(v3 + 12);
      result = *(_QWORD *)v3;
      if (v6)
      {
LABEL_4:
        memmove((void *)result, *v2, 8 * v6);
        v7 = *(_DWORD *)(v3 + 12);
        result = *(_QWORD *)v3;
        v8 = *(unsigned int *)(v4 + 28);
        if (v7 == (_DWORD)v8)
          goto LABEL_28;
        goto LABEL_20;
      }
    }
    else
    {
      *(_DWORD *)(v3 + 12) = v6;
      result = *(_QWORD *)v3;
      if (v6)
        goto LABEL_4;
    }
    v7 = 0;
    v8 = *(unsigned int *)(v4 + 28);
    if (!(_DWORD)v8)
    {
LABEL_28:
      *(_DWORD *)(v3 + 12) = v7;
      return result;
    }
LABEL_20:
    v15 = *(_QWORD *)(v4 + 16);
    v16 = 8 * v7;
    v17 = (_QWORD *)(result + v16);
    v18 = (uint64_t *)(v15 + v16);
    v19 = 8 * v8 - v16 - 8;
    if (v19 < 0x48)
      goto LABEL_25;
    if ((unint64_t)(result - v15) < 0x20)
      goto LABEL_25;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = (_QWORD *)((char *)v17 + v21);
    v18 = (uint64_t *)((char *)v18 + v21);
    v22 = v16 + 16;
    v23 = (__int128 *)(v15 + v16 + 16);
    v24 = (_OWORD *)(result + v22);
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v23;
      *(v24 - 1) = *(v23 - 1);
      *v24 = v26;
      v23 += 2;
      v24 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_25:
      v27 = (uint64_t *)(v15 + 8 * v8);
      do
      {
        v28 = *v18++;
        *v17++ = v28;
      }
      while (v18 != v27);
    }
    v7 = *(_DWORD *)(v4 + 28);
    goto LABEL_28;
  }
  return result;
}

void WGSL::AST::Structure::~Structure(WGSL::AST::Structure *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  _DWORD *v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
}

{
  WTF *v3;
  WTF *v4;
  _DWORD *v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::Structure::kind(WGSL::AST::Structure *this)
{
  return 56;
}

void std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Declaration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Structure &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

_QWORD *std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Declaration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Structure &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FD3710;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Declaration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Structure &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FD3710;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Declaration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Structure &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_DWORD *)(v1 + 12);
  if (v2)
    *(_DWORD *)(v1 + 12) = v2 - 1;
  else
    __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v4;
  char v5;

  *(_QWORD *)a1 = off_1E0FD37B0;
  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return a1;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return a1;
LABEL_7:
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3578[v4])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_1E0FD37B0;
  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return MEMORY[0x186DAB2A8](a1, 0x10F3C40815FE5B7);
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return MEMORY[0x186DAB2A8](a1, 0x10F3C40815FE5B7);
LABEL_7:
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3578[v3])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40815FE5B7);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char v8;

  v2 = (char *)operator new(0x70uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD37B0;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD37E8[v5])(&v8, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD2E98;
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v3 + 10) = &off_1E0FD2F10;
  v6 = *(_DWORD **)(a1 + 104);
  if (v6)
    *v6 += 2;
  *((_QWORD *)v3 + 13) = v6;
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  char v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD37B0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD37E8[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD2E98;
  *(_QWORD *)(a2 + 80) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(v3 + 88);
  *(_QWORD *)(a2 + 80) = &off_1E0FD2F10;
  v8 = *(_DWORD **)(v3 + 104);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 104) = v8;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  result = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (result)
  {
    if (*result == 2)
    {
      result = (_DWORD *)WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return result;
      goto LABEL_7;
    }
    *result -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return result;
LABEL_7:
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E0FD3578[v3])(&v4, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  __p[10] = &off_1E0FD2F10;
  v2 = (_DWORD *)__p[13];
  __p[13] = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      __p[2] = off_1E0FD2EC0;
      if (!*((_BYTE *)__p + 72))
        goto LABEL_5;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  __p[2] = off_1E0FD2EC0;
  if (!*((_BYTE *)__p + 72))
  {
LABEL_5:
    operator delete(__p);
    return;
  }
LABEL_7:
  v3 = *((unsigned int *)__p + 16);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  ((void (*)(char *, _QWORD *))off_1E0FD3578[v3])(&v4, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  char v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 64) = &off_1E0FD2F10;
  v3 = *(_DWORD **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (!v3)
  {
LABEL_4:
    *(_QWORD *)v2 = off_1E0FD2EC0;
    if (!*(_BYTE *)(v2 + 56))
      goto LABEL_10;
    goto LABEL_7;
  }
  if (*v3 != 2)
  {
    *v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (!*(_BYTE *)(v2 + 56))
    goto LABEL_10;
LABEL_7:
  v4 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3578[v4])(&v9, v2 + 32);
  *(_DWORD *)(v2 + 48) = -1;
LABEL_10:
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = &off_1E0FD2EE8;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v5 = off_1E0FD2EC0;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v5 + 48) = -1;
    v6 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD3748[v6])(&v10, v5 + 32, a1 + 48);
      *(_DWORD *)(v5 + 48) = v6;
    }
    *(_BYTE *)(v5 + 56) = 1;
  }
  *(_QWORD *)v5 = off_1E0FD2E98;
  *(_QWORD *)(v5 + 64) = &off_1E0FD2EE8;
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v5 + 72) = result;
  *(_QWORD *)(v5 + 64) = &off_1E0FD2F10;
  v8 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(v5 + 88) = v8;
  return result;
}

void WGSL::AST::StructureMember::~StructureMember(WGSL::AST::StructureMember *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 7) = &off_1E0FD2F10;
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *((_QWORD *)this + 3) = &off_1E0FD2F10;
      v5 = (_DWORD *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (!v5)
        return;
      goto LABEL_9;
    }
    *v4 -= 2;
  }
  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v5)
    return;
LABEL_9:
  if (*v5 == 2)
    WTF::StringImpl::destroy();
  else
    *v5 -= 2;
}

{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 7) = &off_1E0FD2F10;
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *((_QWORD *)this + 3) = &off_1E0FD2F10;
      v5 = (_DWORD *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (!v5)
        goto LABEL_12;
LABEL_9:
      if (*v5 == 2)
        WTF::StringImpl::destroy();
      else
        *v5 -= 2;
LABEL_12:
      JUMPOUT(0x186DAB2A8);
    }
    *v4 -= 2;
  }
  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v5)
    goto LABEL_12;
  goto LABEL_9;
}

uint64_t WGSL::AST::StructureMember::kind(WGSL::AST::StructureMember *this)
{
  return 57;
}

void WGSL::AST::FieldAccessExpression::~FieldAccessExpression(WGSL::AST::FieldAccessExpression *this)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  char v5;

  *((_QWORD *)this + 13) = &off_1E0FD2F10;
  v2 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (!v2)
  {
LABEL_4:
    *((_QWORD *)this + 9) = &off_1E0FD2F10;
    v3 = (_DWORD *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (!v3)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *((_QWORD *)this + 9) = &off_1E0FD2F10;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (!v3)
    goto LABEL_9;
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    *(_QWORD *)this = off_1E0FD2EC0;
    if (!*((_BYTE *)this + 56))
      return;
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  *(_QWORD *)this = off_1E0FD2EC0;
  if (!*((_BYTE *)this + 56))
    return;
LABEL_12:
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E0FD3578[v4])(&v5, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
}

{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  char v5;

  *((_QWORD *)this + 13) = &off_1E0FD2F10;
  v2 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (!v2)
  {
LABEL_4:
    *((_QWORD *)this + 9) = &off_1E0FD2F10;
    v3 = (_DWORD *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (!v3)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *((_QWORD *)this + 9) = &off_1E0FD2F10;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (!v3)
    goto LABEL_9;
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    *(_QWORD *)this = off_1E0FD2EC0;
    if (!*((_BYTE *)this + 56))
      goto LABEL_15;
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  *(_QWORD *)this = off_1E0FD2EC0;
  if (!*((_BYTE *)this + 56))
    goto LABEL_15;
LABEL_12:
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E0FD3578[v4])(&v5, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
LABEL_15:
  MEMORY[0x186DAB2A8](this, 0x10F3C402962E6BCLL);
}

uint64_t WGSL::AST::FieldAccessExpression::kind(WGSL::AST::FieldAccessExpression *this)
{
  return 21;
}

void WGSL::AST::Variable::~Variable(WGSL::AST::Variable *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 7) = &off_1E0FD2F10;
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *((_QWORD *)this + 3) = &off_1E0FD2F10;
      v5 = (_DWORD *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (!v5)
        return;
      goto LABEL_9;
    }
    *v4 -= 2;
  }
  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v5)
    return;
LABEL_9:
  if (*v5 == 2)
    WTF::StringImpl::destroy();
  else
    *v5 -= 2;
}

{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 7) = &off_1E0FD2F10;
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *((_QWORD *)this + 3) = &off_1E0FD2F10;
      v5 = (_DWORD *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (!v5)
        goto LABEL_12;
LABEL_9:
      if (*v5 == 2)
        WTF::StringImpl::destroy();
      else
        *v5 -= 2;
LABEL_12:
      JUMPOUT(0x186DAB2A8);
    }
    *v4 -= 2;
  }
  *((_QWORD *)this + 3) = &off_1E0FD2F10;
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v5)
    goto LABEL_12;
  goto LABEL_9;
}

uint64_t WGSL::AST::Variable::kind(WGSL::AST::Variable *this)
{
  return 62;
}

uint64_t WGSL::AST::Variable::name(WGSL::AST::Variable *this)
{
  return (uint64_t)this + 24;
}

void WGSL::AST::VariableStatement::~VariableStatement(WGSL::AST::VariableStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::VariableStatement::kind(WGSL::AST::VariableStatement *this)
{
  return 54;
}

void WGSL::AST::AssignmentStatement::~AssignmentStatement(WGSL::AST::AssignmentStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::AssignmentStatement::kind(WGSL::AST::AssignmentStatement *this)
{
  return 38;
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  int8x16_t *v27;
  __int16 v28;
  int8x16_t *v29;
  uint64_t v30;
  size_t v31;
  _BYTE *v32;
  unint64_t v33;
  unsigned __int128 v34;
  size_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  _WORD *v39;
  unint64_t v40;
  __int128 v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  _WORD *v49;
  int8x16_t *v50;
  __int16 v51;
  _BYTE *v52;
  int8x16_t *v53;
  char v54;
  uint8x8_t *v55;
  uint16x8_t *v56;
  unint64_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint8x8_t *v61;
  uint16x8_t *v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  unint64_t v66;
  int8x16_t *v67;
  int8x16_t *v68;
  unint64_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int16x8_t *v74;
  int8x8_t *v75;
  unint64_t v76;
  int16x8_t v77;
  uint8x8_t *v78;
  uint16x8_t *v79;
  unint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint8x8_t *v84;
  uint16x8_t *v85;
  unint64_t v86;
  uint8x8_t v87;
  uint64_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;

  v9 = result;
  if (!a2)
  {
    if (!(_DWORD)result)
      goto LABEL_11;
    if (result > 0x7FFFFFEF)
      goto LABEL_10;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    v11 = v88;
    if (!v88)
      goto LABEL_12;
    v13 = v88 + 20;
    *(_DWORD *)v88 = 2;
    *(_DWORD *)(v88 + 4) = v9;
    *(_QWORD *)(v88 + 8) = v88 + 20;
    *(_DWORD *)(v88 + 16) = 0;
    result = v88 + 20 + 2 * a4;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v14 = v13 + 2 * (a4 & 0xFFFFFFC0);
      v15 = 0uLL;
      do
      {
        v89.val[0] = *a3;
        v16 = a3[1];
        v91.val[0] = a3[2];
        v17 = a3[3];
        a3 += 4;
        v18 = v17;
        v91.val[1] = 0uLL;
        v93.val[0] = v16;
        v89.val[1] = 0uLL;
        v19 = (char *)v13;
        vst2q_s8(v19, v89);
        v19 += 32;
        v93.val[1] = 0uLL;
        vst2q_s8(v19, v93);
        v20 = (char *)(v13 + 64);
        vst2q_s8(v20, v91);
        v21 = (char *)(v13 + 96);
        vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
        v13 += 128;
      }
      while (v13 != v14);
      v13 = v14;
    }
    if (v13 != result)
    {
      v22 = v88 + 2 * a4 - v13 + 18;
      if (v22 < 0xE
        || (v13 < (unint64_t)a3->u64 + (v22 >> 1) + 1
          ? (v23 = (unint64_t)a3 >= (v22 & 0xFFFFFFFFFFFFFFFELL) + v13 + 2)
          : (v23 = 1),
            !v23))
      {
        v26 = (_WORD *)v13;
        v27 = a3;
        goto LABEL_28;
      }
      v24 = (v22 >> 1) + 1;
      if (v22 >= 0x3E)
      {
        v25 = v24 & 0xFFFFFFFFFFFFFFE0;
        v55 = (uint8x8_t *)&a3[1];
        v56 = (uint16x8_t *)(v13 + 32);
        v57 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v58 = *(uint8x16_t *)v55[-2].i8;
          v59 = vmovl_u8(*v55);
          v60 = vmovl_high_u8(*(uint8x16_t *)v55->i8);
          v56[-2] = vmovl_u8(*(uint8x8_t *)v58.i8);
          v56[-1] = vmovl_high_u8(v58);
          *v56 = v59;
          v56[1] = v60;
          v56 += 4;
          v55 += 4;
          v57 -= 32;
        }
        while (v57);
        if (v24 == v25)
          goto LABEL_29;
        if ((v24 & 0x18) == 0)
        {
          v27 = (int8x16_t *)((char *)a3 + v25);
          v26 = (_WORD *)(v13 + 2 * v25);
          do
          {
LABEL_28:
            v28 = v27->u8[0];
            v27 = (int8x16_t *)((char *)v27 + 1);
            *v26++ = v28;
          }
          while (v26 != (_WORD *)result);
          goto LABEL_29;
        }
      }
      else
      {
        v25 = 0;
      }
      v26 = (_WORD *)(v13 + 2 * (v24 & 0xFFFFFFFFFFFFFFF8));
      v27 = (int8x16_t *)((char *)a3 + (v24 & 0xFFFFFFFFFFFFFFF8));
      v61 = (uint8x8_t *)&a3->i8[v25];
      v62 = (uint16x8_t *)(v13 + 2 * v25);
      v63 = v25 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v64 = *v61++;
        *v62++ = vmovl_u8(v64);
        v63 += 8;
      }
      while (v63);
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
    }
LABEL_29:
    if (!a5)
      goto LABEL_12;
    v29 = *(int8x16_t **)(a5 + 8);
    v30 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) == 0)
    {
      if (!(_DWORD)v30)
        goto LABEL_12;
      if ((_DWORD)v30 == 1)
      {
        *(_WORD *)result = v29->i16[0];
        goto LABEL_12;
      }
      v31 = 2 * v30;
LABEL_68:
      result = (unint64_t)memcpy((void *)result, v29, v31);
      goto LABEL_12;
    }
    v39 = (_WORD *)(result + 2 * v30);
    if (v30 >= 0x40)
    {
      v40 = result + 2 * (v30 & 0xFFFFFFC0);
      v41 = 0uLL;
      do
      {
        v90.val[0] = *v29;
        v42 = v29[1];
        v92.val[0] = v29[2];
        v43 = v29[3];
        v29 += 4;
        v44 = v43;
        v92.val[1] = 0uLL;
        v94.val[0] = v42;
        v90.val[1] = 0uLL;
        v45 = (char *)result;
        vst2q_s8(v45, v90);
        v45 += 32;
        v94.val[1] = 0uLL;
        vst2q_s8(v45, v94);
        v46 = (char *)(result + 64);
        vst2q_s8(v46, v92);
        v47 = (char *)(result + 96);
        vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
        result += 128;
      }
      while (result != v40);
      result = v40;
    }
    if ((_WORD *)result == v39)
      goto LABEL_12;
    v48 = v88 + 2 * (a4 + v30) - result + 18;
    if (v48 < 0xE
      || result < (unint64_t)v29->u64 + (v48 >> 1) + 1
      && (unint64_t)v29 < (v48 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
    {
      v49 = (_WORD *)result;
      v50 = v29;
      goto LABEL_62;
    }
    v65 = (v48 >> 1) + 1;
    if (v48 >= 0x3E)
    {
      v66 = v65 & 0xFFFFFFFFFFFFFFE0;
      v78 = (uint8x8_t *)&v29[1];
      v79 = (uint16x8_t *)(result + 32);
      v80 = v65 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v81 = *(uint8x16_t *)v78[-2].i8;
        v82 = vmovl_u8(*v78);
        v83 = vmovl_high_u8(*(uint8x16_t *)v78->i8);
        v79[-2] = vmovl_u8(*(uint8x8_t *)v81.i8);
        v79[-1] = vmovl_high_u8(v81);
        *v79 = v82;
        v79[1] = v83;
        v79 += 4;
        v78 += 4;
        v80 -= 32;
      }
      while (v80);
      if (v65 == v66)
        goto LABEL_12;
      if ((v65 & 0x18) == 0)
      {
        v50 = (int8x16_t *)((char *)v29 + v66);
        v49 = (_WORD *)(result + 2 * v66);
        goto LABEL_62;
      }
    }
    else
    {
      v66 = 0;
    }
    v49 = (_WORD *)(result + 2 * (v65 & 0xFFFFFFFFFFFFFFF8));
    v50 = (int8x16_t *)((char *)v29 + (v65 & 0xFFFFFFFFFFFFFFF8));
    v84 = (uint8x8_t *)&v29->i8[v66];
    v85 = (uint16x8_t *)(result + 2 * v66);
    v86 = v66 - (v65 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v87 = *v84++;
      *v85++ = vmovl_u8(v87);
      v86 += 8;
    }
    while (v86);
    if (v65 == (v65 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_12;
    do
    {
LABEL_62:
      v51 = v50->u8[0];
      v50 = (int8x16_t *)((char *)v50 + 1);
      *v49++ = v51;
    }
    while (v49 != v39);
    goto LABEL_12;
  }
  if (!(_DWORD)result)
  {
LABEL_11:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_10:
    v11 = 0;
    goto LABEL_12;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v11 = v88;
  if (!v88)
    goto LABEL_12;
  v12 = (_BYTE *)(v88 + 20);
  *(_DWORD *)v88 = 2;
  *(_DWORD *)(v88 + 4) = v9;
  *(_QWORD *)(v88 + 8) = v88 + 20;
  *(_DWORD *)(v88 + 16) = 4;
  if (a4)
  {
    if (a4 == 1)
      *v12 = a3->i8[0];
    else
      result = (unint64_t)memcpy((void *)(v88 + 20), a3, a4);
  }
  if (!a5)
    goto LABEL_12;
  result = (unint64_t)&v12[a4];
  v29 = *(int8x16_t **)(a5 + 8);
  v31 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) != 0)
  {
    if (!(_DWORD)v31)
      goto LABEL_12;
    if ((_DWORD)v31 == 1)
    {
      *(_BYTE *)result = v29->i8[0];
      goto LABEL_12;
    }
    goto LABEL_68;
  }
  v32 = (_BYTE *)(result + v31);
  if (v31 >= 0x10)
  {
    v33 = result + (v31 & 0xFFFFFFF0);
    do
    {
      v34 = (unsigned __int128)vld2q_s8(v29->i8);
      v29 += 2;
      *(_OWORD *)result = v34;
      result += 16;
    }
    while (result != v33);
    result = v33;
  }
  if ((_BYTE *)result != v32)
  {
    v35 = v88 + v31 + a4;
    v36 = v35 - result + 20;
    if (v36 < 8
      || (result < (unint64_t)&v29[2].u64[1] + 2 * v35 + -2 * result
        ? (v37 = (unint64_t)v29 >= v35 + 20)
        : (v37 = 1),
          !v37))
    {
      v52 = (_BYTE *)result;
      v53 = v29;
      goto LABEL_65;
    }
    if (v36 >= 0x20)
    {
      v38 = v36 & 0xFFFFFFFFFFFFFFE0;
      v67 = v29 + 2;
      v68 = (int8x16_t *)(result + 16);
      v69 = v36 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v71 = v67[-2];
        v70 = v67[-1];
        v73 = *v67;
        v72 = v67[1];
        v67 += 4;
        v68[-1] = vuzp1q_s8(v71, v70);
        *v68 = vuzp1q_s8(v73, v72);
        v68 += 2;
        v69 -= 32;
      }
      while (v69);
      if (v36 == v38)
        goto LABEL_12;
      if ((v36 & 0x18) == 0)
      {
        v53 = (int8x16_t *)((char *)v29 + 2 * v38);
        v52 = (_BYTE *)(result + v38);
        do
        {
LABEL_65:
          v54 = v53->i8[0];
          v53 = (int8x16_t *)((char *)v53 + 2);
          *v52++ = v54;
        }
        while (v52 != v32);
        goto LABEL_12;
      }
    }
    else
    {
      v38 = 0;
    }
    v52 = (_BYTE *)(result + (v36 & 0xFFFFFFFFFFFFFFF8));
    v53 = (int8x16_t *)((char *)v29 + 2 * (v36 & 0xFFFFFFFFFFFFFFF8));
    v74 = (int16x8_t *)((char *)v29 + 2 * v38);
    v75 = (int8x8_t *)(result + v38);
    v76 = v38 - (v36 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v77 = *v74++;
      *v75++ = vmovn_s16(v77);
      v76 += 8;
    }
    while (v76);
    if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_65;
  }
LABEL_12:
  *a6 = v11;
  return result;
}

unint64_t WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  WTF *v14;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 0;
        v9 = v5 << 6;
        do
        {
          v10 = v7 + v8;
          v11 = (char *)v4 + v8;
          *(_QWORD *)v10 = &off_1E0FD2EE8;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)((char *)v4 + v8 + 8);
          *(_QWORD *)v10 = &off_1E0FD2F10;
          v12 = *(_OWORD *)((char *)v4 + v8 + 24);
          *((_QWORD *)v11 + 3) = 0;
          *(_OWORD *)(v10 + 24) = v12;
          *(_QWORD *)(v10 + 40) = 0;
          *(_QWORD *)(v10 + 48) = 0;
          v13 = *(_QWORD *)((char *)v4 + v8 + 40);
          *((_QWORD *)v11 + 5) = 0;
          *(_QWORD *)(v10 + 40) = v13;
          LODWORD(v13) = *(_DWORD *)((char *)v4 + v8 + 48);
          *((_DWORD *)v11 + 12) = 0;
          *(_DWORD *)(v10 + 48) = v13;
          LODWORD(v13) = *(_DWORD *)((char *)v4 + v8 + 52);
          *((_DWORD *)v11 + 13) = 0;
          *(_DWORD *)(v10 + 52) = v13;
          *(_BYTE *)(v10 + 56) = *((_BYTE *)v4 + v8 + 56);
          v14 = *(WTF **)((char *)v4 + v8 + 40);
          if (v14)
          {
            *((_QWORD *)v11 + 5) = 0;
            *((_DWORD *)v11 + 12) = 0;
            WTF::fastFree(v14, v6);
          }
          *(_QWORD *)v11 = &off_1E0FD2F10;
          result = *((_QWORD *)v11 + 3);
          *((_QWORD *)v11 + 3) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy();
            else
              *(_DWORD *)result -= 2;
          }
          v8 += 64;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  WTF *v11;
  WTF *v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 56 * a2;
      result = WTF::fastMalloc((WTF *)(56 * a2));
      *(_DWORD *)(v2 + 8) = v5 / 0x38;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 56 * v4;
        v9 = (char *)v3 + 40;
        do
        {
          *(_QWORD *)v7 = &off_1E0FD2EE8;
          *(_OWORD *)(v7 + 8) = *((_OWORD *)v9 - 2);
          *(_QWORD *)v7 = &off_1E0FD2F10;
          v10 = *((_OWORD *)v9 - 1);
          *((_QWORD *)v9 - 2) = 0;
          *(_OWORD *)(v7 + 24) = v10;
          *(_QWORD *)(v7 + 40) = 0;
          *(_QWORD *)(v7 + 48) = 0;
          v11 = *(WTF **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v7 + 40) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          *(_DWORD *)(v7 + 48) = (_DWORD)v11;
          LODWORD(v11) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          *(_DWORD *)(v7 + 52) = (_DWORD)v11;
          v12 = *(WTF **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            WTF::fastFree(v12, v6);
          }
          *((_QWORD *)v9 - 5) = &off_1E0FD2F10;
          result = *((_QWORD *)v9 - 2);
          *((_QWORD *)v9 - 2) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy();
            else
              *(_DWORD *)result -= 2;
          }
          v9 += 56;
          v7 += 56;
          v8 -= 56;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WTF *WGSL::GraphBuilder::visit(WGSL::GraphBuilder *this, const WTF::StringImpl **a2)
{
  WTF *result;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  _BYTE v8[24];

  result = WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::add<WGSL::Empty const&>((uint64_t)v8, (uint64_t *)(*((_QWORD *)this + 5) + 8), a2 + 7);
  v5 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v5 && !*((_BYTE *)this + 32))
  {
    v6 = a2[9];
    v7 = 8 * v5 - 8;
LABEL_6:
    result = (WTF *)(*(uint64_t (**)(WGSL::GraphBuilder *, _QWORD))(*(_QWORD *)this + 88))(this, *(_QWORD *)v6);
    while (v7)
    {
      v6 = (const WTF::StringImpl *)((char *)v6 + 8);
      v7 -= 8;
      if (!*((_BYTE *)this + 32))
        goto LABEL_6;
    }
  }
  if (!*((_BYTE *)this + 32))
    return (WTF *)(*(uint64_t (**)(WGSL::GraphBuilder *, const WTF::StringImpl *))(*(_QWORD *)this + 208))(this, a2[8]);
  return result;
}

WTF *WGSL::GraphBuilder::visit(WGSL::GraphBuilder *this, WGSL::AST::VariableStatement *a2)
{
  WTF *result;
  _BYTE v5[24];

  result = WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::add<WGSL::Empty const&>((uint64_t)v5, (uint64_t *)(*((_QWORD *)this + 5) + 8), (const WTF::StringImpl **)(*((_QWORD *)a2 + 3) + 48));
  if (!*((_BYTE *)this + 32))
    return (WTF *)(*(uint64_t (**)(WGSL::GraphBuilder *, _QWORD))(*(_QWORD *)this + 56))(this, *((_QWORD *)a2 + 3));
  return result;
}

_DWORD *WGSL::GraphBuilder::visit(WGSL::GraphBuilder *this, WGSL::AST::Expression *a2)
{
  int v4;
  _DWORD *result;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  __int128 v12;

  v4 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = v4 + 1;
  if ((v4 + 1) < 0x201)
  {
    result = (_DWORD *)WGSL::AST::Visitor::visit(this, (uint64_t)a2);
LABEL_3:
    *((_DWORD *)this + 24) = v4;
    return result;
  }
  WTF::String::number((WTF::String *)0x200);
  WTF::makeString<WTF::ASCIILiteral,WTF::String>(&v10, (uint64_t)v9);
  v6 = v10;
  v10 = 0;
  v11 = v6;
  v12 = *(_OWORD *)((char *)a2 + 8);
  WGSL::AST::Visitor::setError((uint64_t)this, (uint64_t)&v11);
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*v7 == 2)
      WTF::StringImpl::destroy();
    else
      *v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*v8 == 2)
      WTF::StringImpl::destroy();
    else
      *v8 -= 2;
  }
  result = v9;
  if (!v9)
    goto LABEL_3;
  if (*v9 == 2)
    result = (_DWORD *)WTF::StringImpl::destroy();
  else
    *v9 -= 2;
  *((_DWORD *)this + 24) = v4;
  return result;
}

_DWORD *WGSL::AST::Visitor::setError(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *result;
  _DWORD *v4;
  __int128 v5;
  char v6;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  v5 = *(_OWORD *)(a2 + 8);
  v4 = v2;
  v6 = 1;
  result = (_DWORD *)std::optional<WGSL::CompilationMessage>::swap[abi:sn180100]((uint64_t)&v4, a1 + 8);
  if (v6)
  {
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WTF::StringImpl::destroy();
      else
        *result -= 2;
    }
  }
  return result;
}

unint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String>(_QWORD *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  int v6;
  unint64_t result;

  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 < 0 || (v5 = (v4 + 36), __OFADD__(v4, 36)))
    {
      *a1 = 0;
      __break(0xC471u);
      goto LABEL_10;
    }
    v6 = (*(unsigned __int8 *)(a2 + 16) >> 2) & 1;
  }
  else
  {
    v6 = 1;
    v5 = 36;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v5, v6, (int8x16_t *)"reached maximum expression depth of ", 0x24u, a2, a1);
  if (!*a1)
  {
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x18249C144);
  }
  return result;
}

uint64_t WGSL::GraphBuilder::visit(uint64_t this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  int j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int k;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51[3];

  v4 = this;
  v5 = *(_QWORD **)(this + 40);
  while (2)
  {
    v6 = v5[1];
    if (!v6)
      goto LABEL_3;
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
    v9 = *((_DWORD *)v8 + 4);
    if (v9 < 0x100)
      v10 = WTF::StringImpl::hashSlowCase(v8);
    else
      v10 = v9 >> 8;
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v7;
      this = *(_QWORD *)(v6 + 16 * v12);
      if (this == -1)
        goto LABEL_9;
      if (!this)
        break;
      this = WTF::equal((WTF *)this, *((const WTF::StringImpl **)a2 + 11), a3);
      if ((this & 1) != 0)
      {
        v13 = v5[1];
        if (!v13)
          return this;
        v14 = v6 + 16 * v12;
        v15 = *(unsigned int *)(v13 - 4);
        goto LABEL_2;
      }
LABEL_9:
      ++i;
    }
    v13 = v5[1];
    if (!v13)
      goto LABEL_3;
    v15 = *(unsigned int *)(v13 - 4);
    v14 = v13 + 16 * v15;
LABEL_2:
    if (v14 != v13 + 16 * v15)
      return this;
LABEL_3:
    v5 = (_QWORD *)*v5;
    if (v5)
      continue;
    break;
  }
  v16 = *(_QWORD *)(v4 + 80);
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
    v20 = *((_DWORD *)v19 + 4);
    v21 = v20 < 0x100 ? WTF::StringImpl::hashSlowCase(v19) : v20 >> 8;
    for (j = 0; ; v21 = j + v23)
    {
      v23 = v21 & v18;
      this = *(_QWORD *)(v17 + 16 * v23);
      if (this != -1)
      {
        if (!this)
          return this;
        this = WTF::equal((WTF *)this, *((const WTF::StringImpl **)a2 + 11), a3);
        if ((this & 1) != 0)
          break;
      }
      ++j;
    }
    v24 = v17 + 16 * v23;
    v25 = *(_QWORD *)(v16 + 8);
    if (!v25 || v24 != v25 + 16 * *(unsigned int *)(v25 - 4))
    {
      v26 = *(_QWORD *)(v24 + 8);
      if (v26)
      {
        v28 = *(_QWORD *)(v4 + 80);
        v27 = *(_QWORD *)(v4 + 88);
        v30 = (uint64_t *)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 16);
        if (v29
          || (WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(v30, 8u, 0), (v29 = *v30) != 0))
        {
          v31 = *(_DWORD *)(v29 - 8);
        }
        else
        {
          v31 = 0;
        }
        v32 = 0;
        v33 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
        v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
        v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
        v36 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
        v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
        v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
        v39 = (0xD7862706ELL
             * (unint64_t)(95187966 * ((v38 >> 31) ^ v38)
                                + 277951225 * ((v35 >> 31) ^ v35))) >> 4;
        for (k = 1; ; ++k)
        {
          v41 = v39 & v31;
          v42 = (_QWORD *)(v29 + 8 * v41);
          v43 = (_QWORD *)*v42;
          if (*v42 == -1)
          {
            v32 = (_QWORD *)(v29 + 8 * v41);
          }
          else
          {
            if (!v43)
            {
              if (v32)
              {
                *v32 = 0;
                --*(_DWORD *)(*v30 - 16);
                v42 = v32;
              }
              v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v45 = v27;
              v45[1] = v26;
              v45[2] = 0;
              v45[3] = 0;
              *v42 = v45;
              if (*v30)
              {
                ++*(_DWORD *)(*v30 - 12);
                v46 = *v30;
                if (*v30)
                  goto LABEL_49;
LABEL_54:
                v47 = *(unsigned int *)(v46 - 16);
                v48 = *(unsigned int *)(v46 - 4);
                if (v48 > 0x400)
                  goto LABEL_55;
LABEL_50:
                if (3 * v48 <= 4 * v47)
                {
                  if (!(_DWORD)v48)
                  {
                    v49 = 8;
                    goto LABEL_57;
                  }
LABEL_56:
                  v49 = (_DWORD)v48 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v48));
LABEL_57:
                  v42 = WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(v30, v49, (_QWORD **)v42);
                  v45 = (_QWORD *)*v42;
                }
              }
              else
              {
                MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                v46 = *v30;
                if (!*v30)
                  goto LABEL_54;
LABEL_49:
                v47 = (*(_DWORD *)(v46 - 16) + *(_DWORD *)(v46 - 12));
                v48 = *(unsigned int *)(v46 - 4);
                if (v48 <= 0x400)
                  goto LABEL_50;
LABEL_55:
                if (v48 <= 2 * v47)
                  goto LABEL_56;
              }
              v50 = *(_QWORD *)(v28 + 32);
              v45[2] = v50;
              v45[3] = 0;
              if (!v50)
                v50 = v28;
              *(_QWORD *)(v50 + 24) = v45;
              *(_QWORD *)(v28 + 32) = v45;
              v43 = (_QWORD *)*v42;
LABEL_61:
              WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::add(v51, (uint64_t *)(v27 + 40), v43);
              return (uint64_t)WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::add(v51, (uint64_t *)(v26 + 16), v43);
            }
            if (*v43 == v27 && v43[1] == v26)
              goto LABEL_61;
          }
          LODWORD(v39) = k + v41;
        }
      }
    }
  }
  return this;
}

uint64_t WGSL::reorderGlobals@<X0>(WGSL *this@<X0>, WGSL::ShaderModule *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  int v26;
  int i;
  uint64_t v28;
  WTF *v29;
  char *v30;
  char *v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  char *v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  char *v39;
  const WTF::StringImpl *v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned int v46;
  char *v47;
  int j;
  unsigned int v49;
  char *v50;
  WTF *v51;
  _DWORD *v52;
  WTF *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  WTF **v57;
  WTF *v58;
  _QWORD *v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  char **v80;
  char *v81;
  char **v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  char *v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD *v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  uint64_t v110;
  WTF *v111;
  _DWORD *v112;
  WTF *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  WTF *v117;
  WTF *v118;
  uint64_t v119;
  WTF *v120;
  WTF *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  _DWORD *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t result;
  BOOL v136;
  uint64_t v137;
  int v138;
  int v139;
  _BOOL4 v140;
  uint64_t v141;
  int v142;
  int v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _DWORD *v148;
  _QWORD **v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  __int128 v158;
  int v159;
  char v160;
  WTF *v161;
  uint64_t v162;
  WTF *v163[5];
  uint64_t v164;
  const char *v165;
  int v166;
  __int128 v167;
  __int128 v168;
  char v169;
  _BYTE v170[24];
  _QWORD v171[4];
  int v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 19);
  if (!(_DWORD)v3)
  {
    memset(v163, 0, sizeof(v163));
    v161 = 0;
    v162 = 0;
    goto LABEL_64;
  }
  v5 = (WTF *)WTF::fastMalloc((WTF *)(((unint64_t)*((unsigned int *)this + 19) << 6) | 8));
  v6 = 0;
  *(_DWORD *)v5 = v3;
  do
  {
    v7 = (char *)v5 + v6;
    *((_QWORD *)v7 + 8) = 0;
    *((_OWORD *)v7 + 2) = 0uLL;
    *((_OWORD *)v7 + 3) = 0uLL;
    *((_OWORD *)v7 + 1) = 0uLL;
    v6 += 64;
  }
  while (v3 << 6 != v6);
  v8 = *((unsigned int *)this + 19);
  v162 = 0;
  v163[0] = v5;
  memset(&v163[1], 0, 32);
  v161 = 0;
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
LABEL_241:
      __break(0xC471u);
      JUMPOUT(0x18249D3A0);
    }
    v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v162) = v8;
    v161 = v9;
    v10 = *((unsigned int *)this + 19);
    if ((_DWORD)v10)
    {
      v11 = v9;
      v12 = 0;
      v13 = (_QWORD **)*((_QWORD *)this + 8);
      v151 = &v13[v10];
LABEL_10:
      v17 = *v13;
      *(_QWORD *)&v167 = 0;
      v18 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
      if (v18 == 15)
        goto LABEL_22;
      v19 = (*(uint64_t (**)(_QWORD *))(*v17 + 24))(v17);
      v21 = v163[1];
      if (!v163[1])
        goto LABEL_22;
      v22 = v19;
      v23 = *((_DWORD *)v163[1] - 2);
      v24 = *(WTF::StringImpl **)(v19 + 24);
      v25 = *((_DWORD *)v24 + 4);
      v26 = v25 < 0x100 ? WTF::StringImpl::hashSlowCase(v24) : v25 >> 8;
      for (i = 0; ; v26 = i + v28)
      {
        v28 = v26 & v23;
        v29 = (WTF *)*((_QWORD *)v21 + 2 * v28);
        if (v29 != (WTF *)-1)
        {
          if (!v29)
            goto LABEL_22;
          if ((WTF::equal(v29, *(const WTF::StringImpl **)(v22 + 24), v20) & 1) != 0)
            break;
        }
        ++i;
      }
      if (v163[1] && (char *)v21 + 16 * v28 == (char *)v163[1] + 16 * *((unsigned int *)v163[1] - 1))
      {
LABEL_22:
        if (v12 >= *(unsigned int *)v163[0])
        {
          __break(0xC471u);
          goto LABEL_244;
        }
        v30 = (char *)v163[0] + 8;
        v31 = (char *)v163[0] + 64 * v12 + 8;
        *(_DWORD *)v31 = v12;
        v33 = *((_QWORD *)v31 + 2);
        v32 = (WTF *)*((_QWORD *)v31 + 3);
        *((_QWORD *)v31 + 1) = v17;
        *((_QWORD *)v31 + 2) = 0;
        *((_QWORD *)v31 + 3) = 0;
        *((_QWORD *)v31 + 4) = 0;
        if (v32)
        {
          do
          {
            v34 = (WTF *)*((_QWORD *)v32 + 3);
            WTF::fastFree(v32, a2);
            v32 = v34;
          }
          while (v34);
        }
        if (v33)
          WTF::fastFree((WTF *)(v33 - 16), a2);
        v35 = &v30[64 * v12];
        v37 = *((_QWORD *)v35 + 5);
        v36 = (WTF *)*((_QWORD *)v35 + 6);
        *((_QWORD *)v35 + 5) = 0;
        *((_QWORD *)v35 + 6) = 0;
        *((_QWORD *)v35 + 7) = 0;
        if (v36)
        {
          do
          {
            v38 = (WTF *)*((_QWORD *)v36 + 3);
            WTF::fastFree(v36, a2);
            v36 = v38;
          }
          while (v38);
        }
        if (v37)
          WTF::fastFree((WTF *)(v37 - 16), a2);
        if (v12 >= *(unsigned int *)v163[0])
        {
          __break(0xC471u);
          JUMPOUT(0x18249D358);
        }
        v39 = (char *)v163[0] + 64 * v12 + 8;
        if (v18 == 15)
          goto LABEL_61;
        v41 = (*(uint64_t (**)(_QWORD *))(*v17 + 24))(v17);
        v42 = v163[1];
        if (v163[1]
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v163[1], 8u), (v42 = v163[1]) != 0))
        {
          v43 = *((_DWORD *)v42 - 2);
          v44 = *(WTF::StringImpl **)(v41 + 24);
          v45 = *((_DWORD *)v44 + 4);
          if (v45 >= 0x100)
          {
LABEL_36:
            v46 = v45 >> 8;
LABEL_39:
            v47 = 0;
            for (j = 1; ; ++j)
            {
              v49 = v46 & v43;
              v50 = (char *)v42 + 16 * (v46 & v43);
              v51 = *(WTF **)v50;
              if (*(_QWORD *)v50 == -1)
              {
                v47 = (char *)v42 + 16 * v49;
              }
              else
              {
                if (!v51)
                {
                  if (v47)
                  {
                    *(_QWORD *)v47 = 0;
                    *((_QWORD *)v47 + 1) = 0;
                    --*((_DWORD *)v163[1] - 4);
                    v50 = v47;
                  }
                  v52 = *(_DWORD **)(v41 + 24);
                  if (v52)
                    *v52 += 2;
                  *(_QWORD *)v50 = v52;
                  *((_QWORD *)v50 + 1) = v39;
                  if (v163[1])
                  {
                    ++*((_DWORD *)v163[1] - 3);
                    v53 = v163[1];
                    if (v163[1])
                    {
                      v54 = (*((_DWORD *)v163[1] - 4) + *((_DWORD *)v163[1] - 3));
                      v55 = *((unsigned int *)v163[1] - 1);
                      if (v55 <= 0x400)
                        goto LABEL_53;
LABEL_58:
                      if (v55 <= 2 * v54)
                      {
LABEL_59:
                        v56 = (_DWORD)v55 << (6 * *((_DWORD *)v53 - 3) >= (2 * v55));
                        goto LABEL_60;
                      }
                      goto LABEL_61;
                    }
                  }
                  else
                  {
                    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                    v53 = 0;
                  }
                  v54 = *((unsigned int *)v53 - 4);
                  v55 = *((unsigned int *)v53 - 1);
                  if (v55 > 0x400)
                    goto LABEL_58;
LABEL_53:
                  if (3 * v55 <= 4 * v54)
                  {
                    if ((_DWORD)v55)
                      goto LABEL_59;
                    v56 = 8;
LABEL_60:
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v163[1], v56);
                  }
LABEL_61:
                  *(_QWORD *)&v167 = v39;
                  v15 = HIDWORD(v162);
                  if (HIDWORD(v162) == (_DWORD)v162)
                  {
                    v14 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, HIDWORD(v162) + 1, (unint64_t)&v167);
                    v15 = HIDWORD(v162);
                    v11 = v161;
                    *((_QWORD *)v161 + HIDWORD(v162)) = *v14;
                  }
                  else
                  {
                    v11 = v161;
                    *((_QWORD *)v161 + HIDWORD(v162)) = v39;
                  }
                  ++v12;
                  v16 = (v15 + 1);
                  HIDWORD(v162) = v16;
                  if (++v13 != v151)
                    goto LABEL_10;
                  if ((_DWORD)v16)
                  {
                    v68 = 0;
                    v69 = 8 * v16;
                    while (1)
                    {
                      v70 = *(_QWORD *)((char *)v11 + v68);
                      *(_QWORD *)&v167 = &off_1E0FD25C8;
                      BYTE8(v167) = 0;
                      v169 = 0;
                      memset(v170, 0, sizeof(v170));
                      WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v171, (uint64_t)v170);
                      *(_QWORD *)&v167 = &off_1E0FD3920;
                      v171[2] = v163;
                      v171[3] = v70;
                      v172 = 0;
                      WGSL::AST::Visitor::visit(&v167, *(_QWORD *)(v70 + 8));
                      if (v169)
                        break;
                      WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor((uint64_t)&v167, v71);
                      v68 += 8;
                      if (v69 == v68)
                        goto LABEL_64;
                    }
                    v137 = *((_QWORD *)&v167 + 1);
                    if (*((_QWORD *)&v167 + 1))
                    {
                      **((_DWORD **)&v167 + 1) += 2;
                      v158 = v168;
                      WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor((uint64_t)&v167, v71);
                      *(_DWORD *)v137 += 2;
                      v167 = v158;
                      v141 = WTF::fastMalloc((WTF *)0x18);
                      *(_DWORD *)v137 += 2;
                    }
                    else
                    {
                      v158 = v168;
                      WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor((uint64_t)&v167, v71);
                      v167 = v158;
                      v141 = WTF::fastMalloc((WTF *)0x18);
                    }
                    *(_QWORD *)v141 = v137;
                    *(_OWORD *)(v141 + 8) = v167;
                    v152 = (_QWORD *)v141;
                    v153 = 0x100000001;
                    v154 = 0;
                    v155 = 0;
                    v156 = 1;
                    if (!v137)
                      goto LABEL_158;
                    v142 = *(_DWORD *)v137 - 2;
                    if (*(_DWORD *)v137 == 2)
                    {
                      WTF::StringImpl::destroy();
                      v143 = *(_DWORD *)v137 - 2;
                      if (*(_DWORD *)v137 == 2)
                        goto LABEL_218;
                    }
                    else
                    {
                      *(_DWORD *)v137 = v142;
                      v143 = v142 - 2;
                      if (!v143)
                        goto LABEL_218;
                    }
                    goto LABEL_230;
                  }
                  goto LABEL_64;
                }
                if ((WTF::equal(v51, *(const WTF::StringImpl **)(v41 + 24), v40) & 1) != 0)
                  goto LABEL_61;
              }
              v46 = j + v49;
            }
          }
        }
        else
        {
          v43 = 0;
          v44 = *(WTF::StringImpl **)(v41 + 24);
          v45 = *((_DWORD *)v44 + 4);
          if (v45 >= 0x100)
            goto LABEL_36;
        }
        v46 = WTF::StringImpl::hashSlowCase(v44);
        goto LABEL_39;
      }
      *(_QWORD *)&v167 = 0;
      v137 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v17 + 24))(v17) + 24);
      if (v137)
      {
        v138 = *(_DWORD *)(v137 + 4);
        *(_DWORD *)v137 += 2;
        if (v138 < 0)
          goto LABEL_237;
        v136 = __OFADD__(v138, 1);
        v139 = v138 + 1;
        if (v136)
          goto LABEL_237;
      }
      else
      {
        v139 = 1;
        if (v136)
          goto LABEL_237;
      }
      if (!__OFADD__(v139, 18))
      {
        v140 = !v137 || (*(_BYTE *)(v137 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<char,void>>((v139 + 18), v140, (int8x16_t *)"redeclaration of '", 0x12u, v137, 39, &v158);
        v144 = (_DWORD *)v158;
        if ((_QWORD)v158)
        {
          v145 = v17[1];
          v146 = v17[2];
          *(_QWORD *)&v158 = 0;
          v147 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v144 += 2;
          *v147 = v144;
          v147[1] = v145;
          v147[2] = v146;
          v152 = v147;
          v153 = 0x100000001;
          v154 = 0;
          v155 = 0;
          v156 = 1;
          if (*v144 == 2)
            WTF::StringImpl::destroy();
          else
            *v144 -= 2;
          v148 = (_DWORD *)v158;
          *(_QWORD *)&v158 = 0;
          if (v148)
          {
            if (*v148 == 2)
              WTF::StringImpl::destroy();
            else
              *v148 -= 2;
          }
          if (!v137)
            goto LABEL_158;
          v143 = *(_DWORD *)v137 - 2;
          if (*(_DWORD *)v137 == 2)
          {
LABEL_218:
            WTF::StringImpl::destroy();
            goto LABEL_158;
          }
LABEL_230:
          *(_DWORD *)v137 = v143;
          goto LABEL_158;
        }
LABEL_238:
        __break(0xC471u);
        JUMPOUT(0x18249D370);
      }
LABEL_237:
      *(_QWORD *)&v158 = 0;
      goto LABEL_238;
    }
  }
LABEL_64:
  v57 = (WTF **)((char *)this + 64);
  if (*((_DWORD *)this + 18))
  {
    if (*((_DWORD *)this + 19))
      *((_DWORD *)this + 19) = 0;
    v58 = *v57;
    if (*v57)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v58, a2);
    }
  }
  v59 = operator new(0x20uLL);
  *v59 = &off_1E0FD3B68;
  v59[1] = v57;
  v59[2] = v163;
  v59[3] = &v167;
  *((_QWORD *)&v168 + 1) = v59;
  if (v163[0])
    v61 = (char *)v163[0] + 8;
  else
    v61 = 0;
  if (v163[0])
    v62 = (char *)v163[0] + 64 * (unint64_t)*(unsigned int *)v163[0] + 8;
  else
    v62 = 0;
  while (v61 != v62)
  {
    v63 = *((_QWORD *)v61 + 5);
    if (!v63 || !*(_DWORD *)(v63 - 12))
    {
      LODWORD(v158) = *(_DWORD *)v61;
      if (!*((_QWORD *)&v168 + 1))
      {
        std::__throw_bad_function_call[abi:sn180100]();
        goto LABEL_241;
      }
      (*(void (**)(_QWORD, char *, __int128 *))(**((_QWORD **)&v168 + 1) + 48))(*((_QWORD *)&v168 + 1), v61, &v158);
    }
    v61 += 64;
  }
  if (!v163[2] || !*((_DWORD *)v163[2] - 3))
  {
    LOBYTE(v152) = 0;
    v156 = 0;
    v66 = (__int128 *)*((_QWORD *)&v168 + 1);
    if (*((__int128 **)&v168 + 1) != &v167)
      goto LABEL_154;
    goto LABEL_89;
  }
  if (v163[0])
    v64 = (char *)v163[0] + 8;
  else
    v64 = 0;
  if (v163[0])
    v65 = (char *)v163[0] + 64 * (unint64_t)*(unsigned int *)v163[0] + 8;
  else
    v65 = 0;
  while (v64 != v65)
  {
    v72 = *((_QWORD *)v64 + 5);
    if (v72 && *(_DWORD *)(v72 - 12))
      goto LABEL_102;
    v64 += 64;
  }
  v64 = 0;
LABEL_102:
  v73 = 0;
  v158 = 0uLL;
  v159 = 0;
  v160 = 1;
  v157 = 0;
  while (1)
  {
    do
    {
      if (v73
        || (WTF::HashTable<WGSL::Graph::Node *,WGSL::Graph::Node *,WTF::IdentityExtractor,WTF::DefaultHash<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>>::rehash(&v157, 8u), (v73 = v157) != 0))
      {
        v74 = *(_DWORD *)(v73 - 8);
        v75 = v73;
      }
      else
      {
        v75 = 0;
        v74 = 0;
      }
      v76 = (unint64_t)&v64[~((_QWORD)v64 << 32)] ^ ((unint64_t)&v64[~((_QWORD)v64 << 32)] >> 22);
      v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
      v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
      v79 = v74 & ((v78 >> 31) ^ v78);
      v80 = (char **)(v75 + 8 * v79);
      v81 = *v80;
      if (*v80)
      {
        v82 = 0;
        v83 = 1;
        while (v81 != v64)
        {
          if (v81 == (char *)-1)
            v82 = v80;
          v79 = (v79 + v83) & v74;
          v80 = (char **)(v75 + 8 * v79);
          v81 = *v80;
          ++v83;
          if (!*v80)
          {
            if (v82)
            {
              *v82 = 0;
              --*(_DWORD *)(v157 - 16);
              v80 = v82;
            }
            goto LABEL_114;
          }
        }
LABEL_121:
        v64 = *(char **)(*((_QWORD *)v64 + 6) + 8);
        break;
      }
LABEL_114:
      *v80 = v64;
      v75 = v157;
      if (v157)
      {
        v84 = *(_DWORD *)(v157 - 16);
        v85 = *(_DWORD *)(v157 - 12) + 1;
        *(_DWORD *)(v157 - 12) = v85;
        v86 = (v84 + v85);
        v87 = *(unsigned int *)(v75 - 4);
        if (v87 > 0x400)
          goto LABEL_120;
      }
      else
      {
        v85 = 1;
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v86 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
        v87 = MEMORY[0xFFFFFFFFFFFFFFFC];
        if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u)
        {
LABEL_120:
          if (v87 > 2 * v86)
            goto LABEL_121;
          goto LABEL_122;
        }
      }
      if (3 * v87 > 4 * v86)
        goto LABEL_121;
      if (!(_DWORD)v87)
      {
        v88 = 8;
        goto LABEL_123;
      }
LABEL_122:
      v88 = (_DWORD)v87 << (6 * v85 >= (2 * v87));
LABEL_123:
      WTF::HashTable<WGSL::Graph::Node *,WGSL::Graph::Node *,WTF::IdentityExtractor,WTF::DefaultHash<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>>::rehash(&v157, v88);
      v73 = 0;
      v75 = v157;
      v64 = *(char **)(*((_QWORD *)v64 + 6) + 8);
    }
    while (!v157);
    v89 = *(_DWORD *)(v75 - 8);
    v90 = (unint64_t)&v64[~((_QWORD)v64 << 32)] ^ ((unint64_t)&v64[~((_QWORD)v64 << 32)] >> 22);
    v91 = 9 * ((v90 + ~(v90 << 13)) ^ ((v90 + ~(v90 << 13)) >> 8));
    v92 = (v91 ^ (v91 >> 15)) + ~((v91 ^ (v91 >> 15)) << 27);
    v93 = v89 & ((v92 >> 31) ^ v92);
    v94 = *(char **)(v75 + 8 * v93);
    if (v94 == v64)
      break;
    v95 = 1;
    while (v94)
    {
      v93 = (v93 + v95) & v89;
      v94 = *(char **)(v75 + 8 * v93);
      ++v95;
      if (v94 == v64)
        goto LABEL_131;
    }
    v73 = v75;
  }
LABEL_131:
  v96 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v64 + 1) + 24))(*((_QWORD *)v64 + 1));
  v166 = 32;
  v164 = *(_QWORD *)(v96 + 24);
  v165 = "encountered a dependency cycle: ";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>((WTF::StringBuilder *)&v158, (unint64_t *)&v165, &v164);
  v97 = v64;
  do
  {
    v97 = *(char **)(*((_QWORD *)v97 + 6) + 8);
    v98 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v97 + 1) + 24))(*((_QWORD *)v97 + 1));
    v166 = 4;
    v164 = *(_QWORD *)(v98 + 24);
    v165 = " -> ";
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>((WTF::StringBuilder *)&v158, (unint64_t *)&v165, &v164);
  }
  while (v97 != v64);
  v99 = (_DWORD *)v158;
  if ((_QWORD)v158
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v158),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v158),
        (v99 = (_DWORD *)v158) != 0))
  {
    *v99 += 2;
  }
  v100 = *((_QWORD *)v64 + 1);
  v101 = *(_QWORD *)(v100 + 8);
  v102 = *(_QWORD *)(v100 + 16);
  v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  if (v99)
    *v99 += 2;
  *v103 = v99;
  v103[1] = v101;
  v103[2] = v102;
  v152 = v103;
  v153 = 0x100000001;
  v154 = 0;
  v155 = 0;
  v156 = 1;
  if (!v99)
  {
LABEL_141:
    v104 = v157;
    if (!v157)
      goto LABEL_143;
    goto LABEL_142;
  }
  if (*v99 != 2)
  {
    *v99 -= 2;
    goto LABEL_141;
  }
  WTF::StringImpl::destroy();
  v104 = v157;
  if (v157)
LABEL_142:
    WTF::fastFree((WTF *)(v104 - 16), v60);
LABEL_143:
  v105 = (_DWORD *)*((_QWORD *)&v158 + 1);
  *((_QWORD *)&v158 + 1) = 0;
  if (!v105)
    goto LABEL_146;
  if (*v105 == 2)
  {
    WTF::StringImpl::destroy();
    v106 = (_DWORD *)v158;
    *(_QWORD *)&v158 = 0;
    if (!v106)
      goto LABEL_153;
  }
  else
  {
    *v105 -= 2;
LABEL_146:
    v106 = (_DWORD *)v158;
    *(_QWORD *)&v158 = 0;
    if (!v106)
    {
LABEL_153:
      v66 = (__int128 *)*((_QWORD *)&v168 + 1);
      if (*((__int128 **)&v168 + 1) != &v167)
        goto LABEL_154;
LABEL_89:
      v67 = 4;
      v66 = &v167;
LABEL_156:
      (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
      goto LABEL_157;
    }
  }
  if (*v106 != 2)
  {
    *v106 -= 2;
    goto LABEL_153;
  }
  WTF::StringImpl::destroy();
  v66 = (__int128 *)*((_QWORD *)&v168 + 1);
  if (*((__int128 **)&v168 + 1) == &v167)
    goto LABEL_89;
LABEL_154:
  if (v66)
  {
    v67 = 5;
    goto LABEL_156;
  }
LABEL_157:
  v11 = v161;
LABEL_158:
  if (v11)
  {
    v161 = 0;
    LODWORD(v162) = 0;
    WTF::fastFree(v11, v60);
  }
  v107 = v163[3];
  if (v163[3])
  {
    do
    {
      v108 = (WTF *)*((_QWORD *)v107 + 3);
      WTF::fastFree(v107, v60);
      v107 = v108;
    }
    while (v108);
  }
  if (v163[2])
    WTF::fastFree((WTF *)((char *)v163[2] - 16), v60);
  v109 = v163[1];
  if (v163[1])
  {
    v110 = *((unsigned int *)v163[1] - 1);
    if ((_DWORD)v110)
    {
      v111 = v163[1];
      do
      {
        v112 = *(_DWORD **)v111;
        if (*(_QWORD *)v111 != -1)
        {
          *(_QWORD *)v111 = 0;
          if (v112)
          {
            if (*v112 == 2)
              WTF::StringImpl::destroy();
            else
              *v112 -= 2;
          }
        }
        v111 = (WTF *)((char *)v111 + 16);
        --v110;
      }
      while (v110);
    }
    WTF::fastFree((WTF *)((char *)v109 - 16), v60);
  }
  v113 = v163[0];
  v163[0] = 0;
  if (v113)
  {
    v115 = (_QWORD *)((char *)v113 + 8);
    v114 = *(unsigned int *)v113;
    if ((_DWORD)v114)
    {
      v116 = &v115[8 * v114];
      do
      {
        v117 = (WTF *)v115[6];
        if (v117)
        {
          do
          {
            v118 = (WTF *)*((_QWORD *)v117 + 3);
            WTF::fastFree(v117, v60);
            v117 = v118;
          }
          while (v118);
        }
        v119 = v115[5];
        if (v119)
          WTF::fastFree((WTF *)(v119 - 16), v60);
        v120 = (WTF *)v115[3];
        if (v120)
        {
          do
          {
            v121 = (WTF *)*((_QWORD *)v120 + 3);
            WTF::fastFree(v120, v60);
            v120 = v121;
          }
          while (v121);
        }
        v122 = v115[2];
        if (v122)
          WTF::fastFree((WTF *)(v122 - 16), v60);
        v115 += 8;
      }
      while (v115 != v116);
    }
    WTF::fastFree(v113, v60);
  }
  if (v156)
  {
    v123 = HIDWORD(v153);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v123;
    if ((_DWORD)v123)
    {
      if (v123 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x18249D3A8);
      }
      v124 = 24 * v123;
      v125 = WTF::fastMalloc((WTF *)(24 * v123));
      *(_DWORD *)(a3 + 8) = (v124 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a3 = v125;
      if (HIDWORD(v153))
      {
        v126 = v152;
        v127 = &v152[3 * HIDWORD(v153)];
        do
        {
          v128 = (_DWORD *)*v126;
          if (*v126)
            *v128 += 2;
          *(_QWORD *)v125 = v128;
          *(_OWORD *)(v125 + 8) = *(_OWORD *)(v126 + 1);
          v126 += 3;
          v125 += 24;
        }
        while (v126 != v127);
      }
    }
    v129 = HIDWORD(v155);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = v129;
    if ((_DWORD)v129)
    {
      if (v129 < 0xAAAAAAB)
      {
        v130 = 24 * v129;
        v131 = WTF::fastMalloc((WTF *)(24 * v129));
        *(_DWORD *)(a3 + 24) = (v130 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)(a3 + 16) = v131;
        if (HIDWORD(v155))
        {
          v132 = v154;
          v133 = v154 + 24 * HIDWORD(v155);
          do
          {
            v134 = *(_DWORD **)v132;
            if (*(_QWORD *)v132)
              *v134 += 2;
            *(_QWORD *)v131 = v134;
            *(_OWORD *)(v131 + 8) = *(_OWORD *)(v132 + 8);
            v132 += 24;
            v131 += 24;
          }
          while (v132 != v133);
        }
        goto LABEL_202;
      }
      __break(0xC471u);
LABEL_244:
      JUMPOUT(0x18249D338);
    }
LABEL_202:
    *(_BYTE *)(a3 + 32) = 1;
    return std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v152, v60);
  }
  else
  {
    result = std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v152, v60);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

void WGSL::GraphBuilder::~GraphBuilder(WGSL::GraphBuilder *this, void *a2)
{
  WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor((uint64_t)this, a2);
  JUMPOUT(0x186DAB2A8);
}

_BYTE *WGSL::AST::ScopedVisitor<WGSL::Empty>::visit(_BYTE *a1, Function *a2)
{
  _BYTE *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  _QWORD v15[2];

  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v15, (uint64_t)(a1 + 40));
  result = WGSL::AST::Visitor::visit(a1, a2);
  v6 = v15[0];
  *(_QWORD *)v15[0] = v15[1];
  v7 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v7)
  {
    v8 = v7 - 1;
    v9 = *(_QWORD *)(v6 + 8);
    v10 = *(_QWORD *)(v9 + 8 * v8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(unsigned int *)(v11 - 4);
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD ***)(v10 + 8);
          do
          {
            v14 = *v13;
            if (*v13 != (_DWORD *)-1)
            {
              *v13 = 0;
              if (v14)
              {
                if (*v14 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v14 -= 2;
              }
            }
            v13 += 2;
            --v12;
          }
          while (v12);
        }
        WTF::fastFree((WTF *)(v11 - 16), v5);
      }
      result = (_BYTE *)MEMORY[0x186DAB2A8](v10, 0x72C404B2EE363);
    }
    *(_DWORD *)(v6 + 20) = v8;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WGSL::AST::ScopedVisitor<WGSL::Empty>::visit(_BYTE *a1, uint64_t a2)
{
  _QWORD *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[2];

  result = WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v18, (uint64_t)(a1 + 40));
  v6 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v6 && !a1[32])
  {
    v16 = *(_QWORD **)(a2 + 40);
    v17 = 8 * v6 - 8;
LABEL_18:
    result = (_QWORD *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 360))(a1, *v16);
    while (v17)
    {
      ++v16;
      v17 -= 8;
      if (!a1[32])
        goto LABEL_18;
    }
  }
  v7 = v18[0];
  *(_QWORD *)v18[0] = v18[1];
  v8 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v8)
  {
    v9 = v8 - 1;
    v10 = *(_QWORD *)(v7 + 8);
    v11 = *(_QWORD *)(v10 + 8 * v9);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(unsigned int *)(v12 - 4);
        if ((_DWORD)v13)
        {
          v14 = *(_DWORD ***)(v11 + 8);
          do
          {
            v15 = *v14;
            if (*v14 != (_DWORD *)-1)
            {
              *v14 = 0;
              if (v15)
              {
                if (*v15 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v15 -= 2;
              }
            }
            v14 += 2;
            --v13;
          }
          while (v13);
        }
        WTF::fastFree((WTF *)(v12 - 16), v5);
      }
      result = (_QWORD *)MEMORY[0x186DAB2A8](v11, 0x72C404B2EE363);
    }
    *(_DWORD *)(v7 + 20) = v9;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

{
  uint64_t v4;
  _QWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[2];
  _QWORD v32[2];

  v4 = (uint64_t)(a1 + 40);
  result = WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v32, (uint64_t)(a1 + 40));
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7 && !a1[32])
  {
    v27 = *(_QWORD **)(a2 + 24);
    v28 = 8 * v7 - 8;
LABEL_38:
    result = (_QWORD *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 88))(a1, *v27);
    while (v28)
    {
      ++v27;
      v28 -= 8;
      if (!a1[32])
        goto LABEL_38;
    }
  }
  v8 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v8 && !a1[32])
  {
    v29 = *(_QWORD **)(a2 + 40);
    v30 = 8 * v8 - 8;
LABEL_43:
    result = (_QWORD *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 360))(a1, *v29);
    while (v30)
    {
      ++v29;
      v30 -= 8;
      if (!a1[32])
        goto LABEL_43;
    }
  }
  if (*(_BYTE *)(a2 + 96))
  {
    result = WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v31, v4);
    if (!*(_BYTE *)(a2 + 96))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (!a1[32])
      result = (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 560))(a1, a2 + 56);
    v9 = v31[0];
    *(_QWORD *)v31[0] = v31[1];
    v10 = *(unsigned int *)(v9 + 20);
    if (!(_DWORD)v10)
    {
LABEL_48:
      __break(0xC471u);
      JUMPOUT(0x18249D9DCLL);
    }
    v11 = v10 - 1;
    v12 = *(_QWORD *)(v9 + 8);
    v13 = *(_QWORD *)(v12 + 8 * v11);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(unsigned int *)(v14 - 4);
        if ((_DWORD)v15)
        {
          v16 = *(_DWORD ***)(v13 + 8);
          do
          {
            v17 = *v16;
            if (*v16 != (_DWORD *)-1)
            {
              *v16 = 0;
              if (v17)
              {
                if (*v17 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v17 -= 2;
              }
            }
            v16 += 2;
            --v15;
          }
          while (v15);
        }
        WTF::fastFree((WTF *)(v14 - 16), v6);
      }
      result = (_QWORD *)MEMORY[0x186DAB2A8](v13, 0x72C404B2EE363);
    }
    *(_DWORD *)(v9 + 20) = v11;
  }
  v18 = v32[0];
  *(_QWORD *)v32[0] = v32[1];
  v19 = *(unsigned int *)(v18 + 20);
  if (!(_DWORD)v19)
    goto LABEL_48;
  v20 = v19 - 1;
  v21 = *(_QWORD *)(v18 + 8);
  v22 = *(_QWORD *)(v21 + 8 * v20);
  *(_QWORD *)(v21 + 8 * v20) = 0;
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      v24 = *(unsigned int *)(v23 - 4);
      if ((_DWORD)v24)
      {
        v25 = *(_DWORD ***)(v22 + 8);
        do
        {
          v26 = *v25;
          if (*v25 != (_DWORD *)-1)
          {
            *v25 = 0;
            if (v26)
            {
              if (*v26 == 2)
                WTF::StringImpl::destroy();
              else
                *v26 -= 2;
            }
          }
          v25 += 2;
          --v24;
        }
        while (v24);
      }
      WTF::fastFree((WTF *)(v23 - 16), v6);
    }
    result = (_QWORD *)MEMORY[0x186DAB2A8](v22, 0x72C404B2EE363);
  }
  *(_DWORD *)(v18 + 20) = v20;
  return result;
}

_QWORD *WGSL::AST::ScopedVisitor<WGSL::Empty>::visit(unsigned __int8 *a1, _QWORD *a2)
{
  _QWORD *result;
  int v5;
  BOOL v6;
  void *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  _QWORD v19[2];

  result = WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v19, (uint64_t)(a1 + 40));
  v5 = a1[32];
  if (a2[3])
    v6 = v5 == 0;
  else
    v6 = 0;
  if (!v6)
  {
    v7 = (void *)a2[4];
    if (a1[32])
      v8 = 1;
    else
      v8 = v7 == 0;
    if (!v8)
      goto LABEL_16;
LABEL_10:
    if (v5)
      goto LABEL_19;
    goto LABEL_17;
  }
  result = (_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 360))(a1);
  v5 = a1[32];
  v7 = (void *)a2[4];
  if (a1[32])
    v9 = 1;
  else
    v9 = v7 == 0;
  if (v9)
    goto LABEL_10;
LABEL_16:
  result = (_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 208))(a1);
  v5 = a1[32];
  if (a1[32])
    goto LABEL_19;
LABEL_17:
  v7 = (void *)a2[5];
  if (v7)
  {
    result = (_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 360))(a1);
    v5 = a1[32];
  }
LABEL_19:
  if (!v5)
    result = (_QWORD *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 400))(a1, a2[6]);
  v10 = v19[0];
  *(_QWORD *)v19[0] = v19[1];
  v11 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v11)
  {
    v12 = v11 - 1;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_QWORD *)(v13 + 8 * v12);
    *(_QWORD *)(v13 + 8 * v12) = 0;
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(unsigned int *)(v15 - 4);
        if ((_DWORD)v16)
        {
          v17 = *(_DWORD ***)(v14 + 8);
          do
          {
            v18 = *v17;
            if (*v17 != (_DWORD *)-1)
            {
              *v17 = 0;
              if (v18)
              {
                if (*v18 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v18 -= 2;
              }
            }
            v17 += 2;
            --v16;
          }
          while (v16);
        }
        WTF::fastFree((WTF *)(v15 - 16), v7);
      }
      result = (_QWORD *)MEMORY[0x186DAB2A8](v14, 0x72C404B2EE363);
    }
    *(_DWORD *)(v10 + 20) = v12;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  _DWORD *v21;

  v2 = *(_QWORD *)(result + 64);
  *(_QWORD *)v2 = *(_QWORD *)(result + 72);
  v3 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3)
  {
    v4 = result;
    v5 = v3 - 1;
    v6 = *(_QWORD *)(v2 + 8);
    v7 = *(_QWORD *)(v6 + 8 * v5);
    *(_QWORD *)(v6 + 8 * v5) = 0;
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(unsigned int *)(v8 - 4);
        if ((_DWORD)v9)
        {
          v10 = *(_DWORD ***)(v7 + 8);
          do
          {
            v11 = *v10;
            if (*v10 != (_DWORD *)-1)
            {
              *v10 = 0;
              if (v11)
              {
                if (*v11 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v11 -= 2;
              }
            }
            v10 += 2;
            --v9;
          }
          while (v9);
        }
        WTF::fastFree((WTF *)(v8 - 16), a2);
      }
      MEMORY[0x186DAB2A8](v7, 0x72C404B2EE363);
    }
    *(_DWORD *)(v2 + 20) = v5;
    v12 = *(unsigned int *)(v4 + 60);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(v4 + 48);
      v14 = &v13[v12];
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
          {
            v17 = *(unsigned int *)(v16 - 4);
            if ((_DWORD)v17)
            {
              v18 = *(_DWORD ***)(v15 + 8);
              do
              {
                v19 = *v18;
                if (*v18 != (_DWORD *)-1)
                {
                  *v18 = 0;
                  if (v19)
                  {
                    if (*v19 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v19 -= 2;
                  }
                }
                v18 += 2;
                --v17;
              }
              while (v17);
            }
            WTF::fastFree((WTF *)(v16 - 16), a2);
          }
          MEMORY[0x186DAB2A8](v15, 0x72C404B2EE363);
        }
        ++v13;
      }
      while (v13 != v14);
    }
    v20 = *(WTF **)(v4 + 48);
    if (v20)
    {
      *(_QWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 56) = 0;
      WTF::fastFree(v20, a2);
    }
    *(_QWORD *)v4 = &off_1E0FD25C8;
    if (*(_BYTE *)(v4 + 32))
    {
      v21 = *(_DWORD **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v21)
      {
        if (*v21 == 2)
          WTF::StringImpl::destroy();
        else
          *v21 -= 2;
      }
    }
    return v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  *a1 = a2;
  a1[1] = *(_QWORD *)a2;
  result = (_QWORD *)operator new();
  *result = a1[1];
  result[1] = 0;
  v17 = result;
  v5 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v5 == *(_DWORD *)(a2 + 16))
  {
    result = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 8, v5 + 1, (unint64_t)&v17);
    v7 = *(unsigned int *)(a2 + 20);
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *result;
    *result = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    v10 = v17;
    *(_DWORD *)(a2 + 20) = v7 + 1;
    v17 = 0;
    if (v10)
    {
      v11 = v10[1];
      if (v11)
      {
        v12 = *(unsigned int *)(v11 - 4);
        if ((_DWORD)v12)
        {
          v13 = (_DWORD **)v10[1];
          do
          {
            v14 = *v13;
            if (*v13 != (_DWORD *)-1)
            {
              *v13 = 0;
              if (v14)
              {
                if (*v14 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v14 -= 2;
              }
            }
            v13 += 2;
            --v12;
          }
          while (v12);
        }
        WTF::fastFree((WTF *)(v11 - 16), v6);
      }
      result = (_QWORD *)MEMORY[0x186DAB2A8](v10, 0x72C404B2EE363);
      v15 = (_QWORD *)*a1;
      v16 = *(unsigned int *)(*a1 + 20);
      if (!(_DWORD)v16)
        goto LABEL_17;
LABEL_14:
      *v15 = *(_QWORD *)(v15[1] + 8 * v16 - 8);
      return a1;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5) = result;
    *(_DWORD *)(a2 + 20) = v5 + 1;
  }
  v15 = (_QWORD *)*a1;
  v16 = *(unsigned int *)(*a1 + 20);
  if ((_DWORD)v16)
    goto LABEL_14;
LABEL_17:
  __break(0xC471u);
  return result;
}

uint64_t std::optional<WGSL::CompilationMessage>::swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;

  v3 = result;
  if ((*(_BYTE *)(result + 24) != 0) == (*(_BYTE *)(a2 + 24) != 0))
  {
    if (!*(_BYTE *)(result + 24))
      return result;
    v5 = *(_DWORD **)result;
    *(_QWORD *)result = 0;
    v6 = (_OWORD *)(result + 8);
    v11 = *(_OWORD *)(result + 8);
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v8 = *(_DWORD **)result;
    *(_QWORD *)v3 = v7;
    if (v8)
    {
      if (*v8 == 2)
      {
        WTF::StringImpl::destroy();
        v9 = (_OWORD *)(a2 + 8);
        *v6 = *(_OWORD *)(a2 + 8);
        result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v5;
        if (!result)
        {
LABEL_24:
          *v9 = v11;
          return result;
        }
LABEL_21:
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy();
        else
          *(_DWORD *)result -= 2;
        goto LABEL_24;
      }
      *v8 -= 2;
    }
    v9 = (_OWORD *)(a2 + 8);
    *v6 = *(_OWORD *)(a2 + 8);
    result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (!result)
      goto LABEL_24;
    goto LABEL_21;
  }
  if (*(_BYTE *)(result + 24))
  {
    v4 = *(_DWORD **)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)a2 = v4;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
    *(_BYTE *)(a2 + 24) = 1;
    if (*(_BYTE *)(result + 24))
    {
      result = *(_QWORD *)result;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy();
          *(_BYTE *)(v3 + 24) = 0;
          return result;
        }
        *(_DWORD *)result -= 2;
      }
      *(_BYTE *)(v3 + 24) = 0;
    }
  }
  else
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v10;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(result + 24) = 1;
    if (*(_BYTE *)(a2 + 24))
    {
      result = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy();
          *(_BYTE *)(a2 + 24) = 0;
          return result;
        }
        *(_DWORD *)result -= 2;
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  return result;
}

uint64_t **WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::add(uint64_t **result, uint64_t *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  int v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int i;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t ***v27;
  uint64_t *v28;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = a3[1];
  v10 = ~(*a3 << 32) + *a3;
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (0xD7862706ELL
       * (unint64_t)(277951225
                          * (((v12 + ~(v12 << 27)) >> 31) ^ ((_DWORD)v12 + ~((_DWORD)v12 << 27)))
                          + 95187966 * ((v15 >> 31) ^ v15))) >> 4;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v7;
    v19 = (uint64_t **)(v6 + 8 * (v16 & v7));
    v20 = *v19;
    if (*v19 == (uint64_t *)-1)
    {
      v8 = (uint64_t **)(v6 + 8 * v18);
      goto LABEL_6;
    }
    if (!v20)
      break;
    if (*v20 == *a3 && v20[1] == v9)
    {
      *v5 = a2;
      v5[1] = v20;
      *((_BYTE *)v5 + 16) = 0;
      return result;
    }
LABEL_6:
    LODWORD(v16) = i + v18;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*a2 - 16);
    v19 = v8;
  }
  result = (uint64_t **)WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)result = *(_OWORD *)a3;
  result[2] = 0;
  result[3] = 0;
  *v19 = (uint64_t *)result;
  if (*a2)
  {
    ++*(_DWORD *)(*a2 - 12);
    v22 = *a2;
    if (*a2)
      goto LABEL_19;
LABEL_24:
    v23 = *(unsigned int *)(v22 - 16);
    v24 = *(unsigned int *)(v22 - 4);
    if (v24 > 0x400)
      goto LABEL_25;
LABEL_20:
    if (3 * v24 <= 4 * v23)
    {
      if (!(_DWORD)v24)
      {
        v25 = 8;
        goto LABEL_27;
      }
LABEL_26:
      v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24));
LABEL_27:
      v19 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(a2, v25, v19);
      result = (uint64_t **)*v19;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v22 = *a2;
    if (!*a2)
      goto LABEL_24;
LABEL_19:
    v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
    v24 = *(unsigned int *)(v22 - 4);
    if (v24 <= 0x400)
      goto LABEL_20;
LABEL_25:
    if (v24 <= 2 * v23)
      goto LABEL_26;
  }
  v26 = a2[2];
  result[2] = (uint64_t *)v26;
  result[3] = 0;
  if (v26)
    v27 = (uint64_t ***)(v26 + 24);
  else
    v27 = (uint64_t ***)(a2 + 1);
  *v27 = result;
  a2[2] = (uint64_t)result;
  v28 = *v19;
  *v5 = a2;
  v5[1] = v28;
  *((_BYTE *)v5 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = ~(*v14 << 32) + *v14;
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = ~(v14[1] << 32) + v14[1];
        v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
        v10 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
        LODWORD(v10) = v16 & ((0xD7862706ELL
                             * (unint64_t)(277951225
                                                * (((v19 + ~(v19 << 27)) >> 31) ^ ((_DWORD)v19
                                                                                               + ~((_DWORD)v19 << 27)))
                                                + 95187966
                                                * (((v10 + ~(v10 << 27)) >> 31) ^ ((_DWORD)v10
                                                                                               + ~((_DWORD)v10 << 27))))) >> 4);
        v22 = 1;
        do
        {
          v23 = v10;
          v24 = *(_QWORD *)(v15 + 8 * v10);
          v10 = ((_DWORD)v10 + v22++) & v16;
        }
        while (v24);
        v25 = (_QWORD *)(v15 + 8 * v23);
        *v25 = v14;
        if (v13 == a3)
          v12 = v25;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), (void *)v10);
  return v12;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  int8x16_t *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  unint64_t v23;
  _WORD *v24;
  unint64_t v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  _WORD *v37;
  int8x16_t *v38;
  __int16 v39;
  int8x16_t *v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  size_t v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  _BYTE *v57;
  int8x16_t *v58;
  char v59;
  unint64_t v60;
  _WORD *v61;
  int8x16_t *v62;
  __int16 v63;
  uint8x8_t *v64;
  uint16x8_t *v65;
  unint64_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint8x8_t *v70;
  uint16x8_t *v71;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  unint64_t v75;
  int8x16_t *v76;
  int8x16_t *v77;
  unint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int16x8_t *v83;
  int8x8_t *v84;
  unint64_t v85;
  int16x8_t v86;
  uint8x8_t *v87;
  uint16x8_t *v88;
  unint64_t v89;
  uint8x16_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint8x8_t *v93;
  uint16x8_t *v94;
  unint64_t v95;
  uint8x8_t v96;
  uint64_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;

  v11 = result;
  if (!a2)
  {
    if (!(_DWORD)result)
      goto LABEL_17;
    if (result > 0x7FFFFFEF)
      goto LABEL_16;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    v13 = v97;
    if (!v97)
      goto LABEL_75;
    v23 = v97 + 20;
    *(_DWORD *)v97 = 2;
    *(_DWORD *)(v97 + 4) = v11;
    *(_QWORD *)(v97 + 8) = v97 + 20;
    *(_DWORD *)(v97 + 16) = 0;
    v24 = (_WORD *)(v97 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v25 = v23 + 2 * (a4 & 0xFFFFFFC0);
      v26 = 0uLL;
      do
      {
        v98.val[0] = *a3;
        v27 = a3[1];
        v100.val[0] = a3[2];
        v28 = a3[3];
        a3 += 4;
        v29 = v28;
        v100.val[1] = 0uLL;
        v102.val[0] = v27;
        v98.val[1] = 0uLL;
        v30 = (char *)v23;
        vst2q_s8(v30, v98);
        v30 += 32;
        v102.val[1] = 0uLL;
        vst2q_s8(v30, v102);
        v31 = (char *)(v23 + 64);
        vst2q_s8(v31, v100);
        v32 = (char *)(v23 + 96);
        vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
        v23 += 128;
      }
      while (v23 != v25);
      v23 = v25;
    }
    if ((_WORD *)v23 != v24)
    {
      v33 = v97 + 2 * a4 - v23 + 18;
      if (v33 < 0xE
        || (v23 < (unint64_t)a3->u64 + (v33 >> 1) + 1
          ? (v34 = (unint64_t)a3 >= (v33 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
          : (v34 = 1),
            !v34))
      {
        v37 = (_WORD *)v23;
        v38 = a3;
        goto LABEL_33;
      }
      v35 = (v33 >> 1) + 1;
      if (v33 >= 0x3E)
      {
        v36 = v35 & 0xFFFFFFFFFFFFFFE0;
        v64 = (uint8x8_t *)&a3[1];
        v65 = (uint16x8_t *)(v23 + 32);
        v66 = v35 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v67 = *(uint8x16_t *)v64[-2].i8;
          v68 = vmovl_u8(*v64);
          v69 = vmovl_high_u8(*(uint8x16_t *)v64->i8);
          v65[-2] = vmovl_u8(*(uint8x8_t *)v67.i8);
          v65[-1] = vmovl_high_u8(v67);
          *v65 = v68;
          v65[1] = v69;
          v65 += 4;
          v64 += 4;
          v66 -= 32;
        }
        while (v66);
        if (v35 == v36)
          goto LABEL_34;
        if ((v35 & 0x18) == 0)
        {
          v38 = (int8x16_t *)((char *)a3 + v36);
          v37 = (_WORD *)(v23 + 2 * v36);
          do
          {
LABEL_33:
            v39 = v38->u8[0];
            v38 = (int8x16_t *)((char *)v38 + 1);
            *v37++ = v39;
          }
          while (v37 != v24);
          goto LABEL_34;
        }
      }
      else
      {
        v36 = 0;
      }
      v37 = (_WORD *)(v23 + 2 * (v35 & 0xFFFFFFFFFFFFFFF8));
      v38 = (int8x16_t *)((char *)a3 + (v35 & 0xFFFFFFFFFFFFFFF8));
      v70 = (uint8x8_t *)&a3->i8[v36];
      v71 = (uint16x8_t *)(v23 + 2 * v36);
      v72 = v36 - (v35 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v73 = *v70++;
        *v71++ = vmovl_u8(v73);
        v72 += 8;
      }
      while (v72);
      if (v35 != (v35 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_33;
    }
LABEL_34:
    if (!a5)
    {
      v42 = 0;
LABEL_74:
      v24[v42] = a6;
      goto LABEL_75;
    }
    v40 = *(int8x16_t **)(a5 + 8);
    v41 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) == 0)
    {
      if ((_DWORD)v41)
      {
        if ((_DWORD)v41 == 1)
          *v24 = v40->i16[0];
        else
          result = (uint64_t)memcpy((void *)(v97 + 20 + 2 * a4), v40, 2 * v41);
      }
      goto LABEL_73;
    }
    v43 = &v24[v41];
    if (v41 < 0x40)
    {
      v44 = v97 + 20 + 2 * a4;
    }
    else
    {
      v44 = (unint64_t)&v24[v41 & 0xFFFFFFC0];
      v45 = 0uLL;
      v46 = v97 + 20 + 2 * a4;
      do
      {
        v99.val[0] = *v40;
        v47 = v40[1];
        v101.val[0] = v40[2];
        v48 = v40[3];
        v40 += 4;
        v49 = v48;
        v101.val[1] = 0uLL;
        v103.val[0] = v47;
        v99.val[1] = 0uLL;
        v50 = (char *)v46;
        vst2q_s8(v50, v99);
        v50 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v50, v103);
        v51 = (char *)(v46 + 64);
        vst2q_s8(v51, v101);
        v52 = (char *)(v46 + 96);
        vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
        v46 += 128;
      }
      while (v46 != v44);
    }
    if ((_WORD *)v44 == v43)
    {
LABEL_73:
      v42 = *(unsigned int *)(a5 + 4);
      goto LABEL_74;
    }
    v60 = v97 + 2 * (a4 + v41) - v44 + 18;
    if (v60 < 0xE
      || v44 < (unint64_t)v40->u64 + (v60 >> 1) + 1
      && (unint64_t)v40 < (v60 & 0xFFFFFFFFFFFFFFFELL) + v44 + 2)
    {
      v61 = (_WORD *)v44;
      v62 = v40;
      goto LABEL_68;
    }
    v74 = (v60 >> 1) + 1;
    if (v60 >= 0x3E)
    {
      v75 = v74 & 0xFFFFFFFFFFFFFFE0;
      v87 = (uint8x8_t *)&v40[1];
      v88 = (uint16x8_t *)(v44 + 32);
      v89 = v74 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v90 = *(uint8x16_t *)v87[-2].i8;
        v91 = vmovl_u8(*v87);
        v92 = vmovl_high_u8(*(uint8x16_t *)v87->i8);
        v88[-2] = vmovl_u8(*(uint8x8_t *)v90.i8);
        v88[-1] = vmovl_high_u8(v90);
        *v88 = v91;
        v88[1] = v92;
        v88 += 4;
        v87 += 4;
        v89 -= 32;
      }
      while (v89);
      if (v74 == v75)
        goto LABEL_73;
      if ((v74 & 0x18) == 0)
      {
        v62 = (int8x16_t *)((char *)v40 + v75);
        v61 = (_WORD *)(v44 + 2 * v75);
        do
        {
LABEL_68:
          v63 = v62->u8[0];
          v62 = (int8x16_t *)((char *)v62 + 1);
          *v61++ = v63;
        }
        while (v61 != v43);
        goto LABEL_73;
      }
    }
    else
    {
      v75 = 0;
    }
    v61 = (_WORD *)(v44 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
    v62 = (int8x16_t *)((char *)v40 + (v74 & 0xFFFFFFFFFFFFFFF8));
    v93 = (uint8x8_t *)&v40->i8[v75];
    v94 = (uint16x8_t *)(v44 + 2 * v75);
    v95 = v75 - (v74 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v96 = *v93++;
      *v94++ = vmovl_u8(v96);
      v95 += 8;
    }
    while (v95);
    if (v74 == (v74 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_73;
    goto LABEL_68;
  }
  if (!(_DWORD)result)
  {
LABEL_17:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_75;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_16:
    v13 = 0;
    goto LABEL_75;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v13 = v97;
  if (v97)
  {
    v14 = (_BYTE *)(v97 + 20);
    *(_DWORD *)v97 = 2;
    *(_DWORD *)(v97 + 4) = v11;
    *(_QWORD *)(v97 + 8) = v97 + 20;
    *(_DWORD *)(v97 + 16) = 4;
    if (a4)
    {
      if (a4 != 1)
      {
        result = (uint64_t)memcpy((void *)(v97 + 20), a3, a4);
        v15 = a4;
        v16 = &v14[a4];
        if (a5)
        {
LABEL_9:
          v17 = *(int8x16_t **)(a5 + 8);
          v18 = *(unsigned int *)(a5 + 4);
          if ((*(_BYTE *)(a5 + 16) & 4) != 0)
          {
            if ((_DWORD)v18)
            {
              if ((_DWORD)v18 == 1)
                *v16 = v17->i8[0];
              else
                result = (uint64_t)memcpy(v16, v17, v18);
            }
            goto LABEL_71;
          }
          v19 = &v16[v18];
          if (v18 < 0x10)
          {
            v20 = (unint64_t)v16;
          }
          else
          {
            v20 = (unint64_t)&v16[v18 & 0xFFFFFFF0];
            v21 = (unsigned __int128 *)v16;
            do
            {
              v22 = (unsigned __int128)vld2q_s8(v17->i8);
              v17 += 2;
              *v21++ = v22;
            }
            while (v21 != (unsigned __int128 *)v20);
          }
          if ((_BYTE *)v20 == v19)
          {
LABEL_71:
            v16[*(unsigned int *)(a5 + 4)] = a6;
            goto LABEL_75;
          }
          v53 = v97 + v18 + v15;
          v54 = v53 - v20 + 20;
          if (v54 < 8
            || (v20 < (unint64_t)&v17[2].u64[1] + 2 * v53 + -2 * v20
              ? (v55 = (unint64_t)v17 >= v53 + 20)
              : (v55 = 1),
                !v55))
          {
            v57 = (_BYTE *)v20;
            v58 = v17;
            goto LABEL_60;
          }
          if (v54 >= 0x20)
          {
            v56 = v54 & 0xFFFFFFFFFFFFFFE0;
            v76 = v17 + 2;
            v77 = (int8x16_t *)(v20 + 16);
            v78 = v54 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v80 = v76[-2];
              v79 = v76[-1];
              v82 = *v76;
              v81 = v76[1];
              v76 += 4;
              v77[-1] = vuzp1q_s8(v80, v79);
              *v77 = vuzp1q_s8(v82, v81);
              v77 += 2;
              v78 -= 32;
            }
            while (v78);
            if (v54 == v56)
              goto LABEL_71;
            if ((v54 & 0x18) == 0)
            {
              v58 = (int8x16_t *)((char *)v17 + 2 * v56);
              v57 = (_BYTE *)(v20 + v56);
              do
              {
LABEL_60:
                v59 = v58->i8[0];
                v58 = (int8x16_t *)((char *)v58 + 2);
                *v57++ = v59;
              }
              while (v57 != v19);
              goto LABEL_71;
            }
          }
          else
          {
            v56 = 0;
          }
          v57 = (_BYTE *)(v20 + (v54 & 0xFFFFFFFFFFFFFFF8));
          v58 = (int8x16_t *)((char *)v17 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
          v83 = (int16x8_t *)((char *)v17 + 2 * v56);
          v84 = (int8x8_t *)(v20 + v56);
          v85 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v86 = *v83++;
            *v84++ = vmovn_s16(v86);
            v85 += 8;
          }
          while (v85);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_71;
          goto LABEL_60;
        }
        goto LABEL_40;
      }
      *v14 = a3->i8[0];
    }
    v15 = a4;
    v16 = &v14[a4];
    if (a5)
      goto LABEL_9;
LABEL_40:
    *v16 = a6;
  }
LABEL_75:
  *a7 = v13;
  return result;
}

void std::__function::__func<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0,std::allocator<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0>,void ()(WGSL::Graph::Node &,unsigned int)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 std::__function::__func<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0,std::allocator<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0>,void ()(WGSL::Graph::Node &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E0FD3B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0,std::allocator<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0>,void ()(WGSL::Graph::Node &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E0FD3B68;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0,std::allocator<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0>,void ()(WGSL::Graph::Node &,unsigned int)>::operator()(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void **i;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v4 = result;
  v5 = *a3;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v8 == *(_DWORD *)(v6 + 8))
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8 + 1)
      v11 = v8 + 1;
    else
      v11 = v10;
    if (v11 >> 29)
    {
LABEL_24:
      __break(0xC471u);
    }
    else
    {
      v12 = *(void **)v6;
      v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(v6 + 8) = v11;
      *(_QWORD *)v6 = v13;
      result = (uint64_t)memcpy(v13, v12, 8 * v8);
      if (v12)
      {
        if (*(void **)v6 == v12)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v12, v14);
      }
      v15 = *(unsigned int *)(v6 + 12);
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v15) = v7;
      *(_DWORD *)(v6 + 12) = v15 + 1;
      for (i = *(void ***)(a2 + 24); i; i = (void **)i[3])
      {
LABEL_19:
        v17 = *i;
        v18 = i[1];
        WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::remove((uint64_t *)*i + 5, *i, v18);
        result = (uint64_t)WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::remove((uint64_t *)(*(_QWORD *)(v4 + 16) + 16), v17, v18);
        v19 = v17[5];
        if ((!v19 || !*(_DWORD *)(v19 - 12)) && *(_DWORD *)v17 < v5)
        {
          v20 = *(_QWORD *)(v4 + 24);
          v22 = v5;
          v21 = *(_QWORD *)(v20 + 24);
          if (!v21)
          {
            result = std::__throw_bad_function_call[abi:sn180100]();
            goto LABEL_24;
          }
          result = (*(uint64_t (**)(uint64_t, _QWORD *, unsigned int *))(*(_QWORD *)v21 + 48))(v21, v17, &v22);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v8) = v7;
    *(_DWORD *)(v6 + 12) = v8 + 1;
    i = *(void ***)(a2 + 24);
    if (i)
      goto LABEL_19;
  }
  return result;
}

uint64_t *WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::remove(uint64_t *result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  void **v15;
  void *v16;
  void *v17;
  WTF *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int j;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t *v40;

  v3 = *result;
  if (*result)
  {
    v4 = result;
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v5 & ((0xD7862706ELL
               * (unint64_t)(277951225 * ((v8 >> 31) ^ v8)
                                  + 95187966 * ((v11 >> 31) ^ v11))) >> 4);
    for (i = 1; ; ++i)
    {
      v14 = v12;
      v15 = *(void ***)(v3 + 8 * v12);
      if (v15 != (void **)-1)
      {
        if (!v15)
          return result;
        v17 = *v15;
        v16 = v15[1];
        if (v17 == a2 && v16 == a3)
          break;
      }
      v12 = (v14 + i) & v5;
    }
    if (*(_DWORD *)(v3 - 4) != v14)
    {
      v19 = *(WTF **)(v3 + 8 * v14);
      if (v19)
      {
        v20 = *(_DWORD *)(v3 - 8);
        v21 = *((_QWORD *)v19 + 1);
        v22 = ~(*(_QWORD *)v19 << 32) + *(_QWORD *)v19;
        v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
        v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
        v25 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v20 & ((0xD7862706ELL
                    * (unint64_t)(277951225
                                       * (((v24 + ~(v24 << 27)) >> 31) ^ ((_DWORD)v24
                                                                                      + ~((_DWORD)v24 << 27)))
                                       + 95187966 * ((v27 >> 31) ^ v27))) >> 4);
        for (j = 1; ; ++j)
        {
          v30 = v28;
          v31 = *(uint64_t **)(v3 + 8 * v28);
          if (v31 != (uint64_t *)-1)
          {
            if (!v31)
              goto LABEL_38;
            v33 = *v31;
            v32 = v31[1];
            if (v33 == *(_QWORD *)v19 && v32 == v21)
              break;
          }
          v28 = (v30 + j) & v20;
        }
        if (*(_DWORD *)(v3 - 4) == v30)
          goto LABEL_38;
        *(_QWORD *)(v3 + 8 * v30) = -1;
        ++*(_DWORD *)(*result - 16);
        if (*result)
        {
          --*(_DWORD *)(*result - 12);
          v35 = *result;
          if (!*result)
            goto LABEL_38;
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
          v35 = *result;
          if (!*result)
          {
LABEL_38:
            v39 = *((_QWORD *)v19 + 2);
            v40 = (uint64_t *)*((_QWORD *)v19 + 3);
            if (v39)
            {
              *(_QWORD *)(v39 + 24) = v40;
              v40 = (uint64_t *)*((_QWORD *)v19 + 3);
            }
            else
            {
              v4[1] = (uint64_t)v40;
            }
            if (!v40)
              v40 = v4;
            v40[2] = v39;
            return (uint64_t *)WTF::fastFree(v19, a2);
          }
        }
        v36 = 6 * *(_DWORD *)(v35 - 12);
        v37 = *(_DWORD *)(v35 - 4);
        if (v36 < v37 && v37 >= 9)
          WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(result, v37 >> 1, 0);
        goto LABEL_38;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WGSL::Graph::Node *,WGSL::Graph::Node *,WTF::IdentityExtractor,WTF::DefaultHash<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = *(_QWORD *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          result = v16;
          v8 = *(void **)(v11 + 8 * v16);
          v16 = ((_DWORD)v16 + v17++) & v12;
        }
        while (v8);
        *(_QWORD *)(v11 + 8 * result) = v10;
      }
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(WTF::StringBuilder *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unsigned __int8 *v31;
  __int16 v32;
  int8x16_t *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  int8x16_t *v46;
  __int16 v47;
  size_t v48;
  char *v49;
  char *v50;
  unsigned __int128 v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  int8x16_t *v57;
  char v58;
  uint8x8_t *v59;
  uint16x8_t *v60;
  unint64_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x8_t *v65;
  uint16x8_t *v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  unint64_t v70;
  uint8x8_t *v71;
  uint16x8_t *v72;
  unint64_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint8x8_t *v77;
  uint16x8_t *v78;
  unint64_t v79;
  uint8x8_t v80;
  int8x16_t *v81;
  int8x16_t *v82;
  unint64_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int16x8_t *v88;
  int8x8_t *v89;
  unint64_t v90;
  int16x8_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;

  v5 = *a3;
  if (*a3)
  {
    v6 = *((_QWORD *)a1 + 1);
    if (!v6)
    {
LABEL_5:
      v6 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_7;
    }
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    goto LABEL_9;
LABEL_7:
  if (v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
LABEL_9:
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (!result)
      return result;
    v8 = result;
    v10 = *a2;
    v9 = a2[1];
    v11 = *a3;
    result += 2 * v9;
    if ((v9 & 0xFFFFFFC0) != 0)
    {
      v12 = (unint64_t)&v8[2 * (a2[1] & 0xFFFFFFC0)];
      v13 = 0uLL;
      v14 = v8;
      do
      {
        v92.val[0] = *(int8x16_t *)v10;
        v15 = *(int8x16_t *)(v10 + 16);
        v94.val[0] = *(int8x16_t *)(v10 + 32);
        v16 = *(_OWORD *)(v10 + 48);
        v10 += 64;
        v17 = v16;
        v94.val[1] = 0uLL;
        v96.val[0] = v15;
        v92.val[1] = 0uLL;
        v18 = v14;
        vst2q_s8(v18, v92);
        v18 += 32;
        v96.val[1] = 0uLL;
        vst2q_s8(v18, v96);
        v19 = v14 + 64;
        vst2q_s8(v19, v94);
        v20 = v14 + 96;
        vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
        v14 += 128;
      }
      while (v14 != (char *)v12);
      v9 = v9;
      if ((char *)v12 == result)
      {
LABEL_32:
        if (!v11)
          return result;
        v33 = *(int8x16_t **)(v11 + 8);
        v34 = *(unsigned int *)(v11 + 4);
        if ((*(_BYTE *)(v11 + 16) & 4) == 0)
        {
          if ((_DWORD)v34)
          {
            if ((_DWORD)v34 == 1)
            {
              *(_WORD *)result = v33->i16[0];
              return result;
            }
            v48 = 2 * v34;
            return (char *)memcpy(result, v33, v48);
          }
          return result;
        }
        v35 = &result[2 * v34];
        if (v34 >= 0x40)
        {
          v36 = &result[2 * (v34 & 0xFFFFFFC0)];
          v37 = 0uLL;
          do
          {
            v93.val[0] = *v33;
            v38 = v33[1];
            v95.val[0] = v33[2];
            v39 = v33[3];
            v33 += 4;
            v40 = v39;
            v95.val[1] = 0uLL;
            v97.val[0] = v38;
            v93.val[1] = 0uLL;
            v41 = result;
            vst2q_s8(v41, v93);
            v41 += 32;
            v97.val[1] = 0uLL;
            vst2q_s8(v41, v97);
            v42 = result + 64;
            vst2q_s8(v42, v95);
            v43 = result + 96;
            vst2q_s8(v43, *(int8x16x2_t *)(&v37 - 1));
            result += 128;
          }
          while (result != v36);
          result = v36;
        }
        if (result == v35)
          return result;
        v44 = &v8[2 * v9 + 2 * v34] - result - 2;
        if (v44 < 0xE
          || result < &v33->i8[(v44 >> 1) + 1] && v33 < (int8x16_t *)&result[(v44 & 0xFFFFFFFFFFFFFFFELL) + 2])
        {
          v45 = result;
          v46 = v33;
          goto LABEL_46;
        }
        v69 = (v44 >> 1) + 1;
        if (v44 >= 0x3E)
        {
          v70 = v69 & 0xFFFFFFFFFFFFFFE0;
          v71 = (uint8x8_t *)&v33[1];
          v72 = (uint16x8_t *)(result + 32);
          v73 = v69 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v74 = *(uint8x16_t *)v71[-2].i8;
            v75 = vmovl_u8(*v71);
            v76 = vmovl_high_u8(*(uint8x16_t *)v71->i8);
            v72[-2] = vmovl_u8(*(uint8x8_t *)v74.i8);
            v72[-1] = vmovl_high_u8(v74);
            *v72 = v75;
            v72[1] = v76;
            v72 += 4;
            v71 += 4;
            v73 -= 32;
          }
          while (v73);
          if (v69 == v70)
            return result;
          if ((v69 & 0x18) == 0)
          {
            v46 = (int8x16_t *)((char *)v33 + v70);
            v45 = &result[2 * v70];
            goto LABEL_46;
          }
        }
        else
        {
          v70 = 0;
        }
        v45 = &result[2 * (v69 & 0xFFFFFFFFFFFFFFF8)];
        v46 = (int8x16_t *)((char *)v33 + (v69 & 0xFFFFFFFFFFFFFFF8));
        v77 = (uint8x8_t *)&v33->i8[v70];
        v78 = (uint16x8_t *)&result[2 * v70];
        v79 = v70 - (v69 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v80 = *v77++;
          *v78++ = vmovl_u8(v80);
          v79 += 8;
        }
        while (v79);
        if (v69 == (v69 & 0xFFFFFFFFFFFFFFF8))
          return result;
        do
        {
LABEL_46:
          v47 = v46->u8[0];
          v46 = (int8x16_t *)((char *)v46 + 1);
          *(_WORD *)v45 = v47;
          v45 += 2;
        }
        while (v45 != v35);
        return result;
      }
    }
    else
    {
      v12 = (unint64_t)v8;
      v9 = a2[1];
      if (v8 == result)
        goto LABEL_32;
    }
    v26 = (unint64_t)&v8[2 * v9 - v12 - 2];
    if (v26 < 0xE
      || (v12 < v10 + (v26 >> 1) + 1 ? (v27 = v10 >= (v26 & 0xFFFFFFFFFFFFFFFELL) + v12 + 2) : (v27 = 1), !v27))
    {
      v30 = (char *)v12;
      v31 = (unsigned __int8 *)v10;
      goto LABEL_31;
    }
    v28 = (v26 >> 1) + 1;
    if (v26 >= 0x3E)
    {
      v29 = v28 & 0xFFFFFFFFFFFFFFE0;
      v59 = (uint8x8_t *)(v10 + 16);
      v60 = (uint16x8_t *)(v12 + 32);
      v61 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v62 = *(uint8x16_t *)v59[-2].i8;
        v63 = vmovl_u8(*v59);
        v64 = vmovl_high_u8(*(uint8x16_t *)v59->i8);
        v60[-2] = vmovl_u8(*(uint8x8_t *)v62.i8);
        v60[-1] = vmovl_high_u8(v62);
        *v60 = v63;
        v60[1] = v64;
        v60 += 4;
        v59 += 4;
        v61 -= 32;
      }
      while (v61);
      if (v28 == v29)
        goto LABEL_32;
      if ((v28 & 0x18) == 0)
      {
        v31 = (unsigned __int8 *)(v10 + v29);
        v30 = (char *)(v12 + 2 * v29);
        goto LABEL_31;
      }
    }
    else
    {
      v29 = 0;
    }
    v30 = (char *)(v12 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
    v31 = (unsigned __int8 *)(v10 + (v28 & 0xFFFFFFFFFFFFFFF8));
    v65 = (uint8x8_t *)(v10 + v29);
    v66 = (uint16x8_t *)(v12 + 2 * v29);
    v67 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v68 = *v65++;
      *v66++ = vmovl_u8(v68);
      v67 += 8;
    }
    while (v67);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_32;
    do
    {
LABEL_31:
      v32 = *v31++;
      *(_WORD *)v30 = v32;
      v30 += 2;
    }
    while (v30 != result);
    goto LABEL_32;
  }
  result = (char *)MEMORY[0x186DAB068]();
  if (!result)
    return result;
  v21 = result;
  v22 = a2[1];
  v23 = v22;
  v24 = *a3;
  if (!(_DWORD)v22)
    goto LABEL_19;
  v25 = (char *)*a2;
  if ((_DWORD)v22 == 1)
  {
    *result = *v25;
LABEL_19:
    if (!v24)
      return result;
    goto LABEL_49;
  }
  result = (char *)memcpy(result, v25, a2[1]);
  if (!v24)
    return result;
LABEL_49:
  result = (char *)v21 + v23;
  v33 = *(int8x16_t **)(v24 + 8);
  v48 = *(unsigned int *)(v24 + 4);
  if ((*(_BYTE *)(v24 + 16) & 4) == 0)
  {
    v49 = &result[v48];
    if (v48 >= 0x10)
    {
      v50 = &result[v48 & 0xFFFFFFF0];
      do
      {
        v51 = (unsigned __int128)vld2q_s8(v33->i8);
        v33 += 2;
        *(_OWORD *)result = v51;
        result += 16;
      }
      while (result != v50);
      result = v50;
    }
    if (result == v49)
      return result;
    v52 = (unint64_t)v21 + v48 + v23;
    v53 = v52 - (_QWORD)result;
    if (v52 - (unint64_t)result < 8
      || (result < &v33->i8[2 * v53] ? (v54 = (unint64_t)v33 >= v52) : (v54 = 1), !v54))
    {
      v56 = result;
      v57 = v33;
      goto LABEL_69;
    }
    if (v53 >= 0x20)
    {
      v55 = v53 & 0xFFFFFFFFFFFFFFE0;
      v81 = v33 + 2;
      v82 = (int8x16_t *)(result + 16);
      v83 = v53 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v85 = v81[-2];
        v84 = v81[-1];
        v87 = *v81;
        v86 = v81[1];
        v81 += 4;
        v82[-1] = vuzp1q_s8(v85, v84);
        *v82 = vuzp1q_s8(v87, v86);
        v82 += 2;
        v83 -= 32;
      }
      while (v83);
      if (v53 == v55)
        return result;
      if ((v53 & 0x18) == 0)
      {
        v57 = (int8x16_t *)((char *)v33 + 2 * v55);
        v56 = &result[v55];
        goto LABEL_69;
      }
    }
    else
    {
      v55 = 0;
    }
    v56 = &result[v53 & 0xFFFFFFFFFFFFFFF8];
    v57 = (int8x16_t *)((char *)v33 + 2 * (v53 & 0xFFFFFFFFFFFFFFF8));
    v88 = (int16x8_t *)((char *)v33 + 2 * v55);
    v89 = (int8x8_t *)&result[v55];
    v90 = v55 - (v53 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v91 = *v88++;
      *v89++ = vmovn_s16(v91);
      v90 += 8;
    }
    while (v90);
    if (v53 == (v53 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_69:
      v58 = v57->i8[0];
      v57 = (int8x16_t *)((char *)v57 + 2);
      *v56++ = v58;
    }
    while (v56 != v49);
    return result;
  }
  if ((_DWORD)v48)
  {
    if ((_DWORD)v48 == 1)
    {
      *result = v33->i8[0];
      return result;
    }
    return (char *)memcpy(result, v33, v48);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v3)
    {
      v4 = *(_DWORD ***)(a1 + 16);
      v5 = 24 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*v6 == 2)
            WTF::StringImpl::destroy();
          else
            *v6 -= 2;
        }
        v4 += 3;
        v5 -= 24;
      }
      while (v5);
    }
    v7 = *(WTF **)(a1 + 16);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v7, a2);
    }
    v8 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(WTF **)a1;
      v10 = 24 * v8;
      do
      {
        v11 = *(_DWORD **)v9;
        *(_QWORD *)v9 = 0;
        if (v11)
        {
          if (*v11 == 2)
            WTF::StringImpl::destroy();
          else
            *v11 -= 2;
        }
        v9 = (WTF *)((char *)v9 + 24);
        v10 -= 24;
      }
      while (v10);
    }
    v12 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v12, a2);
    }
  }
  return a1;
}

WTF *WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::add<WGSL::Empty const&>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *result;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Empty>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Empty>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v6 = *a2;
    if (!*a2)
    {
      v7 = 0;
      v8 = *a3;
      v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = *a3;
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    goto LABEL_6;
LABEL_4:
  v10 = v9 >> 8;
LABEL_7:
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v7;
    v14 = (WTF::StringImpl **)(v6 + 16 * (v10 & v7));
    result = *v14;
    if (*v14 == (WTF::StringImpl *)-1)
    {
      v11 = (WTF::StringImpl **)(v6 + 16 * v13);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v11)
      {
        result = 0;
        *v11 = 0;
        --*(_DWORD *)(*a2 - 16);
        v14 = v11;
      }
      v18 = *a3;
      if (*a3)
        *(_DWORD *)v18 += 2;
      *v14 = v18;
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        v19 = *a2;
        if (*a2)
          goto LABEL_21;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v19 = *a2;
        if (*a2)
        {
LABEL_21:
          v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
          v21 = *(unsigned int *)(v19 - 4);
          if (v21 <= 0x400)
            goto LABEL_22;
          goto LABEL_30;
        }
      }
      v20 = *(unsigned int *)(v19 - 16);
      v21 = *(unsigned int *)(v19 - 4);
      if (v21 <= 0x400)
      {
LABEL_22:
        if (3 * v21 > 4 * v20)
        {
LABEL_33:
          v23 = v19 + 16 * v21;
          v22 = 1;
          goto LABEL_34;
        }
        if (!(_DWORD)v21)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Empty>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Empty>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
          v14 = (WTF::StringImpl **)result;
          v19 = *a2;
          if (!*a2)
          {
LABEL_25:
            v21 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v21 = *(unsigned int *)(v19 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Empty>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Empty>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21)), v14);
        v14 = (WTF::StringImpl **)result;
        v19 = *a2;
        if (!*a2)
          goto LABEL_25;
        goto LABEL_32;
      }
LABEL_30:
      if (v21 > 2 * v20)
        goto LABEL_33;
      goto LABEL_31;
    }
    result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v10 = i + v13;
  }
  v16 = *a2;
  if (*a2)
    v17 = *(unsigned int *)(v16 - 4);
  else
    v17 = 0;
  v22 = 0;
  v23 = v16 + 16 * v17;
LABEL_34:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Empty>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Empty>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v11 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  if (a2 == 1)
  {
    v12 = 0;
LABEL_10:
    v15 = a2 - v12;
    v16 = (_QWORD *)(v9 + 16 * v12 + 16);
    do
    {
      *v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_12;
  }
  v12 = a2 & 0xFFFFFFFE;
  v13 = (_QWORD *)(v9 + 32);
  v14 = v12;
  do
  {
    *(v13 - 2) = 0;
    *v13 = 0;
    v13 += 4;
    v14 -= 2;
  }
  while (v14);
  if (v12 != a2)
    goto LABEL_10;
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = (WTF::StringImpl **)(v6 + 16 * v17);
      v20 = *v19;
      if (*v19 != (WTF::StringImpl *)-1)
      {
        if (v20)
        {
          v21 = *a1;
          if (*a1)
          {
            v22 = *(_DWORD *)(v21 - 8);
            v23 = *((_DWORD *)v20 + 4);
            if (v23 >= 0x100)
              goto LABEL_20;
LABEL_22:
            v24 = WTF::StringImpl::hashSlowCase(v20);
          }
          else
          {
            v22 = 0;
            v23 = *((_DWORD *)v20 + 4);
            if (v23 < 0x100)
              goto LABEL_22;
LABEL_20:
            v24 = v23 >> 8;
          }
          v25 = 0;
          do
          {
            v26 = v24 & v22;
            v24 = ++v25 + v26;
          }
          while (*(_QWORD *)(v21 + 16 * v26));
          v27 = (WTF::StringImpl **)(v21 + 16 * v26);
          *v27 = 0;
          v28 = *v19;
          *v19 = 0;
          *v27 = v28;
          v29 = *v19;
          *v19 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v19 == a3)
            v18 = v27;
          goto LABEL_15;
        }
        *v19 = 0;
      }
LABEL_15:
      if (++v17 == v7)
        goto LABEL_33;
    }
  }
  v18 = 0;
  result = 0;
  if (v6)
  {
LABEL_33:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v18;
  }
  return result;
}

WTF *WGSL::RewriteGlobalVariables::collectGlobals@<X0>(WGSL::RewriteGlobalVariables *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _OWORD *v9;
  int v10;
  uint64_t v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _DWORD *v16;
  int v17;
  char v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  int8x8_t v24;
  int8x8_t v25;
  int32x2_t v26;
  int8x8_t v27;
  int32x2_t v28;
  unsigned int v29;
  int32x2_t *v30;
  unsigned int v31;
  unsigned int v32;
  int32x2_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int v44;
  int *v45;
  int v46;
  WTF *v47;
  WTF **v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD **v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  _DWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  int v67;
  WGSL::Type *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  _DWORD *v74;
  _QWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  uint64_t v79;
  _DWORD *v80;
  _QWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _DWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  _DWORD *v98;
  uint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  int v117;
  _DWORD *v118;
  _DWORD *v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  char *v125;
  int v126;
  _DWORD *v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned __int8 *v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  void *v165;
  void *v166;
  void *v167;
  uint64_t *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  char *v189;
  char *v190;
  _OWORD *v191;
  _OWORD *v192;
  int v193;
  uint64_t v194;
  _QWORD *v195;
  char *v196;
  char *v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unsigned __int8 *v209;
  unsigned __int8 *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  BOOL v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF *v222;
  uint64_t *v223;
  uint64_t v224;
  int v225;
  int v226;
  _BOOL4 v227;
  _DWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  _DWORD *v231;
  uint64_t v232;
  __int128 v233;
  _QWORD *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  void *v239;
  void *v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  _DWORD *v246;
  uint64_t v247;
  int v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int *v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  unsigned __int8 *v257;
  unsigned __int8 *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _DWORD *v284;
  _DWORD *v285;
  uint64_t v286;
  uint64_t v287;
  WTF *result;
  int v289;
  uint64_t v290;
  BOOL v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  BOOL v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  uint64_t v303;
  char *v304;
  unsigned int v305;
  char *v306;
  int v307;
  int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  _OWORD *v317;
  int v318;
  int v319;
  _OWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v330;
  uint64_t *v331;
  unsigned int v332;
  uint64_t *v333;
  __int128 *v334;
  WTF *v335;
  __int128 v336;
  WTF *v337;
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;
  _BYTE v342[16];
  unsigned int v343;
  unsigned __int8 v344;
  _BYTE v345[24];
  _DWORD *v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  _BYTE v350[16];
  int v351;
  unsigned __int8 v352;
  _BYTE v353[24];
  _DWORD *v354;
  __int16 v355;
  uint64_t v356;
  unsigned __int8 v357;
  __int128 v358;
  __int128 v359;
  uint64_t v360;
  _BYTE v361[16];
  int v362;
  unsigned __int8 v363;
  _BYTE v364[24];
  _DWORD *v365;
  uint64_t v366;

  v366 = *MEMORY[0x1E0C80C00];
  v337 = 0;
  v338 = 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 5) + 76);
  if (!(_DWORD)v4)
  {
LABEL_305:
    v211 = *((_QWORD *)this + 8);
    if (v211)
    {
      v212 = *(unsigned int *)(v211 - 4);
      v213 = v211 + 24 * v212;
      if (*(_DWORD *)(v211 - 12))
      {
        v214 = *((_QWORD *)this + 8);
        if ((_DWORD)v212)
        {
          v215 = 24 * v212;
          v214 = *((_QWORD *)this + 8);
          while (*(_DWORD *)v214 >= 0xFFFFFFFE)
          {
            v214 += 24;
            v215 -= 24;
            if (!v215)
            {
              v214 = v213;
              break;
            }
          }
        }
LABEL_315:
        if (v211)
        {
          v216 = v211 + 24 * *(unsigned int *)(v211 - 4);
          v217 = __OFSUB__(v216, v214);
          if (v216 == v214)
            goto LABEL_329;
        }
        else
        {
          v216 = 0;
          v217 = __OFSUB__(0, v214);
          if (!v214)
          {
LABEL_329:
            if (!HIDWORD(v338))
            {
LABEL_429:
              *(_BYTE *)a3 = 0;
              *(_BYTE *)(a3 + 24) = 0;
              result = v337;
              if (!v337)
                return result;
              return (WTF *)WTF::fastFree(result, a2);
            }
            v222 = v337;
            v335 = (WTF *)((char *)v337 + 16 * HIDWORD(v338));
            v223 = (uint64_t *)((char *)this + 208);
            while (1)
            {
              v224 = *(_QWORD *)(*(_QWORD *)v222 + 48);
              if (v224)
              {
                v225 = *(_DWORD *)(v224 + 4);
                *(_DWORD *)v224 += 2;
                if (v225 < 0)
                  goto LABEL_470;
                v217 = __OFADD__(v225, 12);
                v226 = v225 + 12;
                if (v217)
                  goto LABEL_470;
              }
              else
              {
                v226 = 12;
                if (v217)
                  goto LABEL_470;
              }
              if (__OFADD__(v226, 2))
                goto LABEL_470;
              v227 = !v224 || (*(_BYTE *)(v224 + 16) & 4) != 0;
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v226 + 2), v227, (int8x16_t *)"__", 2u, v224, (int8x16_t *)"_ArrayLength", 0xCu, &v358);
              v228 = (_DWORD *)v358;
              if (!(_QWORD)v358)
                goto LABEL_471;
              *((_QWORD *)&v347 + 1) = 0;
              *(_QWORD *)&v348 = 0;
              *(_QWORD *)&v347 = &off_1E0FD2F10;
              *((_QWORD *)&v348 + 1) = v358;
              *(_QWORD *)&v358 = 0;
              if (v224)
              {
                if (*(_DWORD *)v224 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v224 -= 2;
              }
              v229 = *((_QWORD *)this + 5);
              *v228 += 2;
              v336 = 0uLL;
              v230 = (_QWORD *)*((_QWORD *)this + 27);
              if (!v230)
              {
                v339 = 0uLL;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *((_QWORD *)&v358 + 1) = 0;
                *(_QWORD *)&v359 = 0;
                *(_QWORD *)&v358 = &off_1E0FD2F10;
                v230 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v229 + 312), &v339, (uint64_t)&v358);
                *((_QWORD *)this + 27) = v230;
                v231 = (_DWORD *)*((_QWORD *)&v359 + 1);
                *(_QWORD *)&v358 = &off_1E0FD2F10;
                *((_QWORD *)&v359 + 1) = 0;
                if (v231)
                {
                  if (*v231 == 2)
                  {
                    WTF::StringImpl::destroy();
                    v230 = (_QWORD *)*((_QWORD *)this + 27);
                  }
                  else
                  {
                    *v231 -= 2;
                  }
                }
                v230[3] = *(_QWORD *)(*((_QWORD *)this + 5) + 168);
              }
              v232 = *(_QWORD *)(v229 + 312);
              if ((unint64_t)(*(_QWORD *)(v229 + 320) - v232) <= 0xB7)
              {
                WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v229 + 312));
                v232 = *(_QWORD *)(v229 + 312);
              }
              *(_QWORD *)v232 = &off_1E0FD38A0;
              *(_QWORD *)(v232 + 8) = 0;
              *(_QWORD *)(v232 + 16) = 0;
              v233 = v336;
              *(_OWORD *)(v232 + 32) = v336;
              *(_QWORD *)(v232 + 24) = &off_1E0FD2F10;
              *(_OWORD *)(v232 + 64) = v233;
              *(_QWORD *)(v232 + 48) = v228;
              *(_QWORD *)(v232 + 56) = &off_1E0FD2F10;
              *v228 += 2;
              *(_QWORD *)(v232 + 80) = v228;
              *(_QWORD *)(v232 + 88) = 0;
              *(_QWORD *)(v232 + 96) = 0;
              *(_QWORD *)(v232 + 104) = 0;
              *(_QWORD *)(v232 + 112) = v230;
              *(_QWORD *)(v232 + 120) = 0;
              *(_WORD *)(v232 + 128) = 3;
              *(_QWORD *)(v232 + 136) = 0;
              v234 = (_QWORD *)(v232 + 136);
              *(_BYTE *)(v232 + 160) = 0;
              *(_BYTE *)(v232 + 164) = 0;
              *(_BYTE *)(v232 + 168) = 0;
              *(_BYTE *)(v232 + 172) = 0;
              *(_BYTE *)(v232 + 176) = 0;
              *(_QWORD *)(v232 + 144) = 0;
              *(_QWORD *)(v232 + 149) = 0;
              *(_QWORD *)(v232 + 144) = v230[3];
              *(_QWORD *)(v229 + 312) += 184;
              v235 = *(unsigned int *)(v229 + 356);
              if ((_DWORD)v235 == *(_DWORD *)(v229 + 352))
              {
                v236 = v235 + (v235 >> 2);
                if (v236 >= 0x10)
                  v237 = v236 + 1;
                else
                  v237 = 16;
                if (v237 <= v235 + 1)
                  v238 = v235 + 1;
                else
                  v238 = v237;
                if (v238 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824A1D24);
                }
                v239 = *(void **)(v229 + 344);
                v240 = (void *)WTF::fastMalloc((WTF *)(8 * v238));
                *(_DWORD *)(v229 + 352) = v238;
                *(_QWORD *)(v229 + 344) = v240;
                memcpy(v240, v239, 8 * v235);
                if (v239)
                {
                  if (*(void **)(v229 + 344) == v239)
                  {
                    *(_QWORD *)(v229 + 344) = 0;
                    *(_DWORD *)(v229 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v239, v241);
                }
                v242 = *(unsigned int *)(v229 + 356);
                *(_QWORD *)(*(_QWORD *)(v229 + 344) + 8 * v242) = v232;
                *(_DWORD *)(v229 + 356) = v242 + 1;
                v243 = *((_QWORD *)this + 28);
                if (v243)
                {
LABEL_372:
                  *v234 = v243;
                  v247 = *((_QWORD *)this + 8);
                  if (!v247)
                    goto LABEL_386;
                  goto LABEL_373;
                }
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v229 + 344) + 8 * v235) = v232;
                *(_DWORD *)(v229 + 356) = v235 + 1;
                v243 = *((_QWORD *)this + 28);
                if (v243)
                  goto LABEL_372;
              }
              v244 = (_QWORD *)(*((_QWORD *)this + 5) + 312);
              v336 = 0uLL;
              v245 = (_QWORD *)*((_QWORD *)this + 27);
              if (!v245)
              {
                v339 = 0uLL;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *((_QWORD *)&v358 + 1) = 0;
                *(_QWORD *)&v359 = 0;
                *(_QWORD *)&v358 = &off_1E0FD2F10;
                v245 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v244, &v339, (uint64_t)&v358);
                *((_QWORD *)this + 27) = v245;
                v246 = (_DWORD *)*((_QWORD *)&v359 + 1);
                *(_QWORD *)&v358 = &off_1E0FD2F10;
                *((_QWORD *)&v359 + 1) = 0;
                if (v246)
                {
                  if (*v246 == 2)
                  {
                    WTF::StringImpl::destroy();
                    v245 = (_QWORD *)*((_QWORD *)this + 27);
                  }
                  else
                  {
                    *v246 -= 2;
                  }
                }
                v245[3] = *(_QWORD *)(*((_QWORD *)this + 5) + 168);
              }
              *((_QWORD *)this + 28) = WGSL::AST::Builder::construct<WGSL::AST::ReferenceTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression &,void>(v244, &v336, (uint64_t)v245);
              v255 = *((_QWORD *)this + 5);
              v256 = *(_QWORD *)(v255 + 168);
              v357 = 1;
              v356 = v256;
              v355 = 0;
              *(_QWORD *)&v358 = 262;
              *((_QWORD *)&v358 + 1) = v256;
              v257 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v255 + 112), (unsigned __int8 *)&v358);
              v258 = *(unsigned __int8 **)(v255 + 112);
              if (v258)
                v258 += 24 * *((unsigned int *)v258 - 1);
              if (v258 == v257 || (v259 = *((_QWORD *)v257 + 2)) == 0)
              {
                v286 = WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(v255 + 96, &v357, (char *)&v355 + 1, &v356, (char *)&v355);
                *(_QWORD *)&v336 = v286;
                *(_QWORD *)&v339 = 262;
                *((_QWORD *)&v339 + 1) = v256;
                WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v255 + 112), (unsigned __int8 *)&v339, (uint64_t *)&v336, (uint64_t)&v358);
                v287 = *((_QWORD *)this + 28);
                *(_QWORD *)(v287 + 24) = v286;
                *v234 = v287;
                v247 = *((_QWORD *)this + 8);
                if (!v247)
                {
LABEL_386:
                  v252 = 0;
                  goto LABEL_387;
                }
              }
              else
              {
                v260 = *((_QWORD *)this + 28);
                *(_QWORD *)(v260 + 24) = v259;
                *v234 = v260;
                v247 = *((_QWORD *)this + 8);
                if (!v247)
                  goto LABEL_386;
              }
LABEL_373:
              v248 = *(_DWORD *)(v247 - 8);
              v249 = *((_DWORD *)v222 + 2);
              v250 = 9 * ((v249 + ~(v249 << 15)) ^ ((v249 + ~(v249 << 15)) >> 10));
              v251 = (((v250 ^ (v250 >> 6)) + ~((v250 ^ (v250 >> 6)) << 11)) ^ (((v250 ^ (v250 >> 6))
                                                                               + ~((v250 ^ (v250 >> 6)) << 11)) >> 16)) & v248;
              v252 = (int *)(v247 + 24 * v251);
              v253 = *v252;
              if (*v252 != v249)
              {
                v254 = 1;
                while (v253 != -1)
                {
                  v251 = (v251 + v254) & v248;
                  v252 = (int *)(v247 + 24 * v251);
                  v253 = *v252;
                  ++v254;
                  if (*v252 == v249)
                    goto LABEL_387;
                }
                v252 = (int *)(v247 + 24 * *(unsigned int *)(v247 - 4));
              }
LABEL_387:
              v261 = v252[5];
              if (!(_DWORD)v261)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A1D0CLL);
              }
              v262 = (*(_DWORD *)(*((_QWORD *)v252 + 1) + 16 * v261 - 16) + 1);
              *(_QWORD *)&v339 = *((unsigned int *)v222 + 2) | (unint64_t)(v262 << 32);
              BYTE8(v339) = 1;
              *(_QWORD *)&v340 = v232;
              WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::add<WGSL::RewriteGlobalVariables::Global>((uint64_t)&v358, (uint64_t *)this + 6, (const WTF::StringImpl **)&v348 + 1, &v339);
              v263 = *v223;
              if (*v223
                || (WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)this + 26, 8u), (v263 = *v223) != 0))
              {
                v264 = *(_DWORD *)(v263 - 8);
              }
              else
              {
                v264 = 0;
              }
              v265 = *(_QWORD *)v222;
              v266 = ~(*(_QWORD *)v222 << 32) + *(_QWORD *)v222;
              v267 = (v266 ^ (v266 >> 22)) + ~((v266 ^ (v266 >> 22)) << 13);
              v268 = (9 * (v267 ^ (v267 >> 8))) ^ ((9 * (v267 ^ (v267 >> 8))) >> 15);
              v269 = v264 & (((v268 + ~(v268 << 27)) >> 31) ^ (v268 + ~((_DWORD)v268 << 27)));
              v270 = (_QWORD *)(v263 + 16 * v269);
              v271 = *v270;
              if (!*v270)
              {
LABEL_399:
                *v270 = v265;
                v270[1] = v232;
                if (*v223)
                {
                  ++*(_DWORD *)(*v223 - 12);
                  v274 = *v223;
                  if (*v223)
                    goto LABEL_401;
LABEL_406:
                  v275 = *(unsigned int *)(v274 - 16);
                  v276 = *(unsigned int *)(v274 - 4);
                  if (v276 > 0x400)
                    goto LABEL_407;
LABEL_402:
                  if (3 * v276 > 4 * v275)
                    goto LABEL_410;
                  if (!(_DWORD)v276)
                  {
                    v277 = 8;
LABEL_409:
                    WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)this + 26, v277);
                    goto LABEL_410;
                  }
                }
                else
                {
                  MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                  v274 = *v223;
                  if (!*v223)
                    goto LABEL_406;
LABEL_401:
                  v275 = (*(_DWORD *)(v274 - 16) + *(_DWORD *)(v274 - 12));
                  v276 = *(unsigned int *)(v274 - 4);
                  if (v276 <= 0x400)
                    goto LABEL_402;
LABEL_407:
                  if (v276 > 2 * v275)
                    goto LABEL_410;
                }
                v277 = (_DWORD)v276 << (6 * *(_DWORD *)(v274 - 12) >= (2 * v276));
                goto LABEL_409;
              }
              v272 = 0;
              v273 = 1;
              while (v271 != v265)
              {
                if (v271 == -1)
                  v272 = v270;
                v269 = (v269 + v273) & v264;
                v270 = (_QWORD *)(v263 + 16 * v269);
                v271 = *v270;
                ++v273;
                if (!*v270)
                {
                  if (v272)
                  {
                    *v272 = 0;
                    v272[1] = 0;
                    --*(_DWORD *)(*v223 - 16);
                    v265 = *(_QWORD *)v222;
                    v270 = v272;
                  }
                  goto LABEL_399;
                }
              }
LABEL_410:
              LODWORD(v339) = v262;
              v278 = *((_QWORD *)&v348 + 1);
              if (*((_QWORD *)&v348 + 1))
                **((_DWORD **)&v348 + 1) += 2;
              *((_QWORD *)&v339 + 1) = v278;
              v279 = v252[5];
              if ((_DWORD)v279 == v252[4])
              {
                v280 = WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v252 + 2), v279 + 1, (unint64_t)&v339);
                v279 = v252[5];
                v281 = *((_QWORD *)v252 + 1) + 16 * v279;
                *(_DWORD *)v281 = *(_DWORD *)v280;
                v282 = *(_QWORD *)(v280 + 8);
                *(_QWORD *)(v280 + 8) = 0;
                *(_QWORD *)(v281 + 8) = v282;
              }
              else
              {
                v283 = *((_QWORD *)v252 + 1) + 16 * v279;
                *(_DWORD *)v283 = v262;
                *((_QWORD *)&v339 + 1) = 0;
                *(_QWORD *)(v283 + 8) = v278;
              }
              v252[5] = v279 + 1;
              v284 = (_DWORD *)*((_QWORD *)&v339 + 1);
              *((_QWORD *)&v339 + 1) = 0;
              if (!v284)
                goto LABEL_418;
              if (*v284 != 2)
              {
                *v284 -= 2;
LABEL_418:
                v285 = (_DWORD *)*((_QWORD *)&v348 + 1);
                if (*((_QWORD *)&v348 + 1))
                  goto LABEL_421;
                goto LABEL_332;
              }
              WTF::StringImpl::destroy();
              v285 = (_DWORD *)*((_QWORD *)&v348 + 1);
              if (*((_QWORD *)&v348 + 1))
              {
LABEL_421:
                if (*v285 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v285 -= 2;
              }
LABEL_332:
              v222 = (WTF *)((char *)v222 + 16);
              v217 = __OFSUB__(v222, v335);
              if (v222 == v335)
                goto LABEL_429;
            }
          }
        }
        do
        {
          v218 = *(unsigned int *)(v214 + 20);
          v219 = 126 - 2 * __clz(v218);
          if ((_DWORD)v218)
            v220 = v219;
          else
            v220 = 0;
          std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *,false>(*(_QWORD *)(v214 + 8), *(_QWORD *)(v214 + 8) + 16 * v218, v220, 1);
          v221 = v214 + 24;
          v214 = v213;
          if (v221 != v213)
          {
            v214 = v221;
            while (*(_DWORD *)v214 >= 0xFFFFFFFE)
            {
              v214 += 24;
              if (v214 == v213)
              {
                v214 = v213;
                break;
              }
            }
          }
          v217 = __OFSUB__(v214, v216);
        }
        while (v214 != v216);
        goto LABEL_329;
      }
      v214 = v211 + 24 * v212;
    }
    else
    {
      v214 = 0;
      LODWORD(v212) = 0;
    }
    v213 = v211 + 24 * v212;
    goto LABEL_315;
  }
  v5 = 0;
  v6 = 0;
  v7 = (uint64_t *)((char *)this + 48);
  v8 = (uint64_t *)((char *)this + 56);
  v333 = (uint64_t *)((char *)this + 64);
  v334 = &xmmword_18260F000;
  v330 = (uint64_t *)((char *)this + 48);
  v331 = (uint64_t *)((char *)this + 56);
  v328 = *(unsigned int *)(*((_QWORD *)this + 5) + 76);
  while (1)
  {
    v11 = *((_QWORD *)this + 5);
    if (v6 >= *(unsigned int *)(v11 + 76))
    {
      __break(0xC471u);
      JUMPOUT(0x1824A1D14);
    }
    v12 = *(int32x2_t *)(*(_QWORD *)(v11 + 64) + 8 * v6);
    if ((*(unsigned int (**)(int32x2_t))(**(_QWORD **)&v12 + 16))(v12) != 62)
      goto LABEL_5;
    v13 = *(_QWORD *)(*(_QWORD *)&v12 + 164);
    v14 = v13 & 0xFF00000000;
    if ((v13 & 0xFF00000000) == 0)
    {
      v18 = 0;
      LOBYTE(v13) = 0;
      v15 = v334;
      goto LABEL_20;
    }
    v15 = *(__int128 **)(*(_QWORD *)&v12 + 156);
    if (((unint64_t)v15 & 0xFF00000000) == 0)
      goto LABEL_477;
    v16 = (_DWORD *)*((_QWORD *)this + 5);
    v17 = *((unsigned __int8 *)this + 184);
    if (v17 == 1)
    {
      v5 = v16[10];
      if (v5 <= v13)
        break;
      goto LABEL_19;
    }
    if (v17 == 2)
    {
      v5 = v16[11];
      if (v5 <= v13)
        break;
      goto LABEL_19;
    }
    if (v17 != 4)
      break;
    v5 = v16[12];
    if (v5 <= v13)
      break;
LABEL_19:
    v5 = v13 >> 8;
    v18 = 1;
LABEL_20:
    v19 = v13 | (v5 << 8);
    v334 = v15;
    *(_QWORD *)&v358 = v19 | ((_QWORD)v15 << 32);
    v20 = (_DWORD **)(*(_QWORD *)&v12 + 48);
    BYTE8(v358) = v18;
    *(int32x2_t *)&v359 = v12;
    WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::add<WGSL::RewriteGlobalVariables::Global>((uint64_t)&v336, v7, (const WTF::StringImpl **)(*(_QWORD *)&v12 + 48), &v358);
    if (v14)
    {
      v21 = *v8;
      if (*v8
        || (WTF::HashTable<std::tuple<unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>>::rehash(v8, 8u), (v21 = *v8) != 0))
      {
        v22 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        v22 = 0;
      }
      v23 = vadd_s32((int32x2_t)__PAIR64__(v334, v19), (int32x2_t)0x100000001);
      v24 = (int8x8_t)vsub_s32((int32x2_t)__PAIR64__(v334, v19), vshl_n_s32(v23, 0xFuLL));
      v25 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v24, 0xAuLL), v24), (int32x2_t)0x900000009);
      v26 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v25, 6uLL), v25);
      v27 = (int8x8_t)vadd_s32(v26, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v26, 0xBuLL)));
      v28 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v27, 0x10uLL), v27), (int32x2_t)0x5AC73FE109132F9);
      v29 = v22 & ((0xD7862706ELL * (unint64_t)vadd_s32(v28, vdup_lane_s32(v28, 1)).u32[0]) >> 4);
      v30 = (int32x2_t *)(v21 + 16 * v29);
      v31 = v30->i32[0];
      v32 = v30->u32[1];
      if (*v30)
      {
        v33 = 0;
        v34 = 1;
        while (__PAIR64__(v32, v31) != *(_QWORD *)&v23)
        {
          if (v31 == -1)
            v33 = v30;
          v29 = (v29 + v34) & v22;
          v30 = (int32x2_t *)(v21 + 16 * v29);
          v31 = v30->i32[0];
          v32 = v30->u32[1];
          ++v34;
          if (!*(_QWORD *)v30)
          {
            if (v33)
            {
              *v33 = 0;
              v33[1] = 0;
              --*(_DWORD *)(*v8 - 16);
              v30 = v33;
            }
            goto LABEL_33;
          }
        }
LABEL_44:
        v39 = *v333;
        v332 = v5;
        if (*v333
          || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v333, 8u, 0), (v39 = *v333) != 0))
        {
          v40 = *(_DWORD *)(v39 - 8);
        }
        else
        {
          v40 = 0;
        }
        v41 = 9 * ((v19 + ~((_DWORD)v19 << 15)) ^ ((v19 + ~((_DWORD)v19 << 15)) >> 10));
        v42 = v40 & (((v41 ^ (v41 >> 6)) + ~((v41 ^ (v41 >> 6)) << 11)) ^ (((v41 ^ (v41 >> 6))
                                                                          + ~((v41 ^ (v41 >> 6)) << 11)) >> 16));
        v43 = (int *)(v39 + 24 * v42);
        v44 = *v43;
        if (*v43 == -1)
        {
LABEL_56:
          v47 = (WTF *)*((_QWORD *)v43 + 1);
          v45 = v43;
          *v43 = v19;
          v48 = (WTF **)(v43 + 2);
          v49 = v43[5];
          if (!(_DWORD)v49)
            goto LABEL_64;
        }
        else
        {
          v45 = 0;
          v46 = 1;
          do
          {
            if (v44 == (_DWORD)v19)
            {
              v53 = (int)v334;
              goto LABEL_79;
            }
            if (v44 == -2)
              v45 = v43;
            v42 = (v42 + v46) & v40;
            v43 = (int *)(v39 + 24 * v42);
            v44 = *v43;
            ++v46;
          }
          while (*v43 != -1);
          if (!v45)
            goto LABEL_56;
          v47 = 0;
          *v45 = -1;
          *((_QWORD *)v45 + 1) = 0;
          *((_QWORD *)v45 + 2) = 0;
          --*(_DWORD *)(*v333 - 16);
          *v45 = v19;
          v48 = (WTF **)(v45 + 2);
          v49 = v45[5];
          if (!(_DWORD)v49)
          {
LABEL_64:
            if (v47)
            {
              *((_QWORD *)v45 + 1) = 0;
              v45[4] = 0;
              WTF::fastFree(v47, a2);
            }
            *v48 = 0;
            v48[1] = 0;
            if (*v333)
            {
              ++*(_DWORD *)(*v333 - 12);
              v53 = (int)v334;
              v54 = *v333;
              if (*v333)
                goto LABEL_68;
            }
            else
            {
              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
              v53 = (int)v334;
              v54 = *v333;
              if (*v333)
              {
LABEL_68:
                v55 = (*(_DWORD *)(v54 - 16) + *(_DWORD *)(v54 - 12));
                v56 = *(unsigned int *)(v54 - 4);
                if (v56 <= 0x400)
                  goto LABEL_69;
                goto LABEL_75;
              }
            }
            v55 = *(unsigned int *)(v54 - 16);
            v56 = *(unsigned int *)(v54 - 4);
            if (v56 <= 0x400)
            {
LABEL_69:
              if (3 * v56 <= 4 * v55)
              {
                if (!(_DWORD)v56)
                {
                  v57 = 8;
LABEL_78:
                  v43 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v333, v57, v45);
LABEL_79:
                  LODWORD(v358) = v53;
                  v58 = *v20;
                  v8 = v331;
                  if (*v20)
                    *v58 += 2;
                  v59 = v43 + 2;
                  *((_QWORD *)&v358 + 1) = v58;
                  v60 = v43[5];
                  if ((_DWORD)v60 == v43[4])
                  {
                    v61 = WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v358);
                    v60 = v43[5];
                    v62 = *((_QWORD *)v43 + 1) + 16 * v60;
                    *(_DWORD *)v62 = *(_DWORD *)v61;
                    v63 = *(_QWORD *)(v61 + 8);
                    *(_QWORD *)(v61 + 8) = 0;
                    *(_QWORD *)(v62 + 8) = v63;
                  }
                  else
                  {
                    v64 = *v59 + 16 * v60;
                    *(_DWORD *)v64 = v53;
                    *((_QWORD *)&v358 + 1) = 0;
                    *(_QWORD *)(v64 + 8) = v58;
                  }
                  v43[5] = v60 + 1;
                  v65 = (_DWORD *)*((_QWORD *)&v358 + 1);
                  *((_QWORD *)&v358 + 1) = 0;
                  v5 = v332;
                  if (v65)
                  {
                    if (*v65 == 2)
                    {
                      WTF::StringImpl::destroy();
                      v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v12 + 112) + 24);
                      if (!v66)
                        goto LABEL_216;
LABEL_90:
                      v67 = *(_DWORD *)(v66 + 48);
                      if (v67 != 4)
                      {
                        if (v67 == 3)
                        {
                          v68 = *(WGSL::Type **)v66;
                          if (*(_QWORD *)v66 && *((_DWORD *)v68 + 12) == 4)
                          {
                            v69 = WGSL::RewriteGlobalVariables::packStructType((uint64_t)this, (uint64_t)v68);
                            if (v69)
                            {
                              v70 = *((_QWORD *)this + 5);
                              *(_WORD *)(v70 + 9) = 257;
                              v71 = WGSL::TypeStore::arrayType(v70 + 96, v69, *(_QWORD *)(v66 + 8), *(_QWORD *)(v66 + 16));
                              if (v71)
                              {
                                if (*(_DWORD *)(v71 + 48) != 3
                                  || (v72 = *(_DWORD **)v71, v73 = *((_QWORD *)this + 5), v347 = 0uLL, v72[12] != 4))
                                {
LABEL_469:
                                  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_470:
                                  *(_QWORD *)&v358 = 0;
LABEL_471:
                                  __break(0xC471u);
                                  JUMPOUT(0x1824A1D04);
                                }
                                v322 = v71;
                                v74 = *(_DWORD **)(*(_QWORD *)v72 + 48);
                                if (v74)
                                  *v74 += 2;
                                *((_QWORD *)&v358 + 1) = 0;
                                *(_QWORD *)&v359 = 0;
                                *(_QWORD *)&v358 = &off_1E0FD2F10;
                                *((_QWORD *)&v359 + 1) = v74;
                                v75 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v73 + 312), &v347, (uint64_t)&v358);
                                v76 = (_DWORD *)*((_QWORD *)&v359 + 1);
                                *(_QWORD *)&v358 = &off_1E0FD2F10;
                                *((_QWORD *)&v359 + 1) = 0;
                                if (v76)
                                {
                                  if (*v76 == 2)
                                    WTF::StringImpl::destroy();
                                  else
                                    *v76 -= 2;
                                }
                                v75[3] = v72;
                                v156 = *(_QWORD *)(*(_QWORD *)&v12 + 112);
                                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v156 + 16))(v156) != 59)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1824A1CD0);
                                }
                                v157 = *((_QWORD *)this + 5);
                                v158 = *(_QWORD *)(v156 + 72);
                                v159 = *(_QWORD *)(v157 + 312);
                                if ((unint64_t)(*(_QWORD *)(v157 + 320) - v159) <= 0x4F)
                                {
                                  WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v157 + 312));
                                  v159 = *(_QWORD *)(v157 + 312);
                                }
                                v160 = (__int128 *)(v156 + 8);
                                *(_OWORD *)(v159 + 8) = *(_OWORD *)(v156 + 8);
                                v317 = (_OWORD *)(v159 + 8);
                                *(_QWORD *)(v159 + 24) = 0;
                                *(_BYTE *)(v159 + 32) = 0;
                                v315 = v159 + 32;
                                *(_BYTE *)(v159 + 56) = 0;
                                *(_QWORD *)v159 = off_1E0FD43C0;
                                *(_QWORD *)(v159 + 64) = v75;
                                v320 = (_OWORD *)(v159 + 64);
                                *(_QWORD *)(v159 + 72) = v158;
                                *(_QWORD *)(v157 + 312) += 80;
                                v161 = *(unsigned int *)(v157 + 356);
                                v327 = v159;
                                if ((_DWORD)v161 == *(_DWORD *)(v157 + 352))
                                {
                                  v162 = v161 + (v161 >> 2);
                                  if (v162 >= 0x10)
                                    v163 = v162 + 1;
                                  else
                                    v163 = 16;
                                  if (v163 <= v161 + 1)
                                    v164 = v161 + 1;
                                  else
                                    v164 = v163;
                                  if (v164 >> 29)
                                  {
LABEL_477:
                                    __break(0xC471u);
                                    JUMPOUT(0x1824A1C70);
                                  }
                                  v165 = *(void **)(v157 + 344);
                                  v166 = (void *)WTF::fastMalloc((WTF *)(8 * v164));
                                  *(_DWORD *)(v157 + 352) = v164;
                                  *(_QWORD *)(v157 + 344) = v166;
                                  memcpy(v166, v165, 8 * v161);
                                  if (v165)
                                  {
                                    if (*(void **)(v157 + 344) == v165)
                                    {
                                      *(_QWORD *)(v157 + 344) = 0;
                                      *(_DWORD *)(v157 + 352) = 0;
                                    }
                                    WTF::fastFree((WTF *)v165, v167);
                                  }
                                  v161 = *(unsigned int *)(v157 + 356);
                                  v168 = (uint64_t *)(*(_QWORD *)(v157 + 344) + 8 * v161);
                                  v159 = v327;
                                  v160 = (__int128 *)(v156 + 8);
                                }
                                else
                                {
                                  v168 = (uint64_t *)(*(_QWORD *)(v157 + 344) + 8 * v161);
                                }
                                *v168 = v159;
                                *(_DWORD *)(v157 + 356) = v161 + 1;
                                *(_QWORD *)(v159 + 24) = v322;
                                v169 = *((_QWORD *)this + 5);
                                v340 = *v160;
                                *(_QWORD *)&v339 = v156;
                                *((_QWORD *)&v339 + 1) = off_1E0FD2EC0;
                                v341 = *(_QWORD *)(v156 + 24);
                                v342[0] = 0;
                                v344 = 0;
                                v170 = *(unsigned __int8 *)(v156 + 56);
                                v323 = v169;
                                if (*(_BYTE *)(v156 + 56))
                                {
                                  v343 = -1;
                                  v171 = *(unsigned int *)(v156 + 48);
                                  if ((_DWORD)v171 != -1)
                                  {
                                    v172 = v170;
                                    ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v171])(&v358, v342, v156 + 32);
                                    v170 = v172;
                                    v169 = v323;
                                    v343 = v171;
                                  }
                                  v344 = 1;
                                }
                                else
                                {
                                  v171 = 0;
                                }
                                v173 = (uint64_t *)(v169 + 400);
                                *((_QWORD *)&v339 + 1) = off_1E0FD43C0;
                                *(_OWORD *)v345 = *(_OWORD *)(v156 + 64);
                                v174 = *(unsigned int *)(v169 + 412);
                                if ((_DWORD)v174 == *(_DWORD *)(v169 + 408))
                                {
                                  v175 = v174 + (v174 >> 2);
                                  if (v175 >= 0x10)
                                    v176 = v175 + 1;
                                  else
                                    v176 = 16;
                                  if (v176 <= v174 + 1)
                                    v177 = v174 + 1;
                                  else
                                    v177 = v176;
                                  WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v173, v177);
                                  v178 = *(unsigned int *)(v323 + 412);
                                  v179 = *(_QWORD *)(v323 + 400);
                                  v359 = v340;
                                  v180 = v339;
                                  v181 = v341;
                                  *(_QWORD *)&v358 = v339;
                                  *((_QWORD *)&v358 + 1) = off_1E0FD2EC0;
                                  v360 = v341;
                                  v361[0] = 0;
                                  v363 = 0;
                                  v312 = v344;
                                  if (v344)
                                  {
                                    v362 = -1;
                                    v310 = v343;
                                    if (v343 != -1)
                                    {
                                      v182 = v178;
                                      ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E0FD3EE0[v343])(&v356, v361, v342);
                                      v178 = v182;
                                      v362 = v310;
                                      v180 = v358;
                                      v181 = v360;
                                    }
                                    v308 = 1;
                                    v363 = 1;
                                  }
                                  else
                                  {
                                    v310 = 0;
                                    v308 = 0;
                                  }
                                  *((_QWORD *)&v358 + 1) = off_1E0FD43C0;
                                  *(_OWORD *)v364 = *(_OWORD *)v345;
                                  v187 = v179 + 32 * v178;
                                  *(_QWORD *)(v187 + 24) = 0;
                                  v188 = (_QWORD *)(v187 + 24);
                                  v189 = (char *)operator new(0x60uLL);
                                  v190 = v189;
                                  *(_QWORD *)v189 = off_1E0FD43E8;
                                  *((_QWORD *)v189 + 1) = v180;
                                  *(_OWORD *)(v189 + 24) = v359;
                                  *((_QWORD *)v189 + 2) = off_1E0FD2EC0;
                                  *((_QWORD *)v189 + 5) = v181;
                                  v189[48] = 0;
                                  v189[72] = 0;
                                  if (v312)
                                  {
                                    *((_DWORD *)v189 + 16) = -1;
                                    v192 = v317;
                                    v191 = v320;
                                    v193 = v308;
                                    if (v310 != 0xFFFFFFFFLL)
                                    {
                                      ((void (*)(uint64_t *, char *, _BYTE *))off_1E0FD3EE0[v310])(&v356, v189 + 48, v361);
                                      *((_DWORD *)v190 + 16) = v310;
                                      v193 = v363;
                                    }
                                    v190[72] = 1;
                                    *((_QWORD *)v190 + 2) = off_1E0FD43C0;
                                    *((_OWORD *)v190 + 5) = *(_OWORD *)v364;
                                    *v188 = v190;
                                    *((_QWORD *)&v358 + 1) = off_1E0FD2EC0;
                                    if (v193 && v362 != -1)
                                      ((void (*)(uint64_t *, _BYTE *))off_1E0FD3E30[v362])(&v356, v361);
                                  }
                                  else
                                  {
                                    *((_QWORD *)v189 + 2) = off_1E0FD43C0;
                                    *((_OWORD *)v189 + 5) = *(_OWORD *)v364;
                                    *v188 = v189;
                                    v192 = v317;
                                    v191 = v320;
                                  }
                                  ++*(_DWORD *)(v323 + 412);
                                  *((_QWORD *)&v339 + 1) = off_1E0FD2EC0;
                                  if (!v344)
                                    goto LABEL_289;
                                }
                                else
                                {
                                  v183 = *v173;
                                  v348 = v340;
                                  v184 = v339;
                                  v185 = v341;
                                  *(_QWORD *)&v347 = v339;
                                  *((_QWORD *)&v347 + 1) = off_1E0FD2EC0;
                                  v349 = v341;
                                  v350[0] = 0;
                                  v352 = 0;
                                  v313 = v170;
                                  if (v170)
                                  {
                                    v351 = -1;
                                    if (v171 != 0xFFFFFFFFLL)
                                    {
                                      v186 = v183;
                                      ((void (*)(__int128 *, _BYTE *, _BYTE *))off_1E0FD3EE0[v171])(&v358, v350, v342);
                                      v183 = v186;
                                      v351 = v171;
                                      v184 = v347;
                                      v185 = v349;
                                    }
                                    v311 = v185;
                                    v309 = 1;
                                    v352 = 1;
                                  }
                                  else
                                  {
                                    v311 = v341;
                                    v309 = 0;
                                  }
                                  *((_QWORD *)&v347 + 1) = off_1E0FD43C0;
                                  *(_OWORD *)v353 = *(_OWORD *)v345;
                                  v194 = v183 + 32 * v174;
                                  *(_QWORD *)(v194 + 24) = 0;
                                  v195 = (_QWORD *)(v194 + 24);
                                  v196 = (char *)operator new(0x60uLL);
                                  v197 = v196;
                                  *(_QWORD *)v196 = off_1E0FD43E8;
                                  *((_QWORD *)v196 + 1) = v184;
                                  *(_OWORD *)(v196 + 24) = v348;
                                  *((_QWORD *)v196 + 2) = off_1E0FD2EC0;
                                  *((_QWORD *)v196 + 5) = v311;
                                  v196[48] = 0;
                                  v196[72] = 0;
                                  if (v313)
                                  {
                                    *((_DWORD *)v196 + 16) = -1;
                                    v198 = v309;
                                    if (v171 != 0xFFFFFFFFLL)
                                    {
                                      ((void (*)(__int128 *, char *, _BYTE *))off_1E0FD3EE0[v171])(&v358, v196 + 48, v350);
                                      *((_DWORD *)v197 + 16) = v171;
                                      v198 = v352;
                                    }
                                    v197[72] = 1;
                                    *((_QWORD *)v197 + 2) = off_1E0FD43C0;
                                    *((_OWORD *)v197 + 5) = *(_OWORD *)v353;
                                    *v195 = v197;
                                    *((_QWORD *)&v347 + 1) = off_1E0FD2EC0;
                                    v192 = v317;
                                    v191 = v320;
                                    v199 = v323;
                                    if (v198)
                                    {
                                      if (v351 != -1)
                                      {
                                        ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v351])(&v358, v350);
                                        v199 = v323;
                                      }
                                      v351 = -1;
                                    }
                                  }
                                  else
                                  {
                                    *((_QWORD *)v196 + 2) = off_1E0FD43C0;
                                    *((_OWORD *)v196 + 5) = *(_OWORD *)v353;
                                    *v195 = v196;
                                    *((_QWORD *)&v347 + 1) = off_1E0FD2EC0;
                                    v192 = v317;
                                    v191 = v320;
                                    v199 = v323;
                                  }
                                  ++*(_DWORD *)(v199 + 412);
                                  *((_QWORD *)&v339 + 1) = off_1E0FD2EC0;
                                  if (!v344)
                                    goto LABEL_289;
                                }
                                if (v343 != -1)
                                  ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v343])(&v358, v342);
LABEL_289:
                                (**(void (***)(uint64_t))v156)(v156);
                                *(_QWORD *)v156 = &off_1E0FD2EE8;
                                *(_OWORD *)(v156 + 8) = *v192;
                                *(_QWORD *)v156 = off_1E0FD2EC0;
                                *(_QWORD *)(v156 + 24) = *(_QWORD *)(v327 + 24);
                                *(_BYTE *)(v156 + 32) = 0;
                                *(_BYTE *)(v156 + 56) = 0;
                                if (*(_BYTE *)(v327 + 56))
                                {
                                  *(_DWORD *)(v156 + 48) = -1;
                                  v200 = *(unsigned int *)(v327 + 48);
                                  if ((_DWORD)v200 != -1)
                                  {
                                    ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v200])(&v358, v156 + 32, v315);
                                    *(_DWORD *)(v156 + 48) = v200;
                                  }
                                  *(_BYTE *)(v156 + 56) = 1;
                                }
                                *(_QWORD *)v156 = off_1E0FD43C0;
                                *(_OWORD *)(v156 + 64) = *v191;
                                v132 = *(_QWORD **)(*(_QWORD *)&v12 + 136);
                                if ((*(unsigned int (**)(_QWORD *))(*v132 + 16))(v132) != 61)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1824A1CF0);
                                }
                                v201 = v132[3];
                                if (v201)
                                {
                                  if (*(_DWORD *)(v201 + 48) == 10)
                                    v202 = (unsigned __int8 *)v132[3];
                                  else
                                    v202 = 0;
                                }
                                else
                                {
                                  v202 = 0;
                                }
                                v203 = (_QWORD *)(*((_QWORD *)this + 5) + 312);
                                v358 = 0uLL;
                                v204 = WGSL::AST::Builder::construct<WGSL::AST::ReferenceTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression &,void>(v203, &v358, v327);
                                v205 = *((_QWORD *)this + 5);
                                v206 = *(_QWORD *)(v327 + 24);
                                v207 = v202[1];
                                v357 = *v202;
                                v356 = v206;
                                HIBYTE(v355) = v207;
                                LOBYTE(v355) = 0;
                                v208 = (v207 << 16) | ((unint64_t)v357 << 8) | 6;
                                *(_QWORD *)&v358 = v208;
                                *((_QWORD *)&v358 + 1) = v206;
                                v209 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v205 + 112), (unsigned __int8 *)&v358);
                                v210 = *(unsigned __int8 **)(v205 + 112);
                                v324 = v204;
                                if (v210)
                                  v210 += 24 * *((unsigned int *)v210 - 1);
                                if (v210 == v209 || (v144 = *((_QWORD *)v209 + 2)) == 0)
                                {
                                  v144 = WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(v205 + 96, &v357, (char *)&v355 + 1, &v356, (char *)&v355);
                                  *(_QWORD *)&v339 = v144;
                                  *(_QWORD *)&v347 = v208;
                                  *((_QWORD *)&v347 + 1) = v206;
                                  WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v205 + 112), (unsigned __int8 *)&v347, (uint64_t *)&v339, (uint64_t)&v358);
                                }
                                v145 = (uint64_t)v324;
LABEL_206:
                                *(_QWORD *)(v145 + 24) = v144;
                                WGSL::ShaderModule::replace<WGSL::AST::ReferenceTypeExpression,WGSL::AST::ReferenceTypeExpression>(*((_QWORD *)this + 5), (uint64_t)v132, v145);
                                v146 = *((_QWORD *)this + 5);
                                v84 = *(_QWORD *)&v12 + 129;
                                v85 = *(unsigned __int8 *)(*(_QWORD *)&v12 + 129);
                                *(_BYTE *)(*(_QWORD *)&v12 + 129) = 1;
                                v147 = (_QWORD *)(v146 + 400);
                                v87 = (_DWORD *)(v146 + 412);
                                v148 = *(unsigned int *)(v146 + 412);
                                if ((_DWORD)v148 == *(_DWORD *)(v146 + 408))
                                {
                                  v149 = v148 + (v148 >> 2);
                                  if (v149 >= 0x10)
                                    v150 = v149 + 1;
                                  else
                                    v150 = 16;
                                  if (v150 <= v148 + 1)
                                    v151 = v148 + 1;
                                  else
                                    v151 = v150;
                                  WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v147, v151);
                                  v148 = *v87;
                                }
                                v92 = (_QWORD *)(*v147 + 32 * v148);
                                v4 = v328;
                                v7 = v330;
LABEL_215:
                                *v92 = &off_1E0FD4378;
                                v92[1] = v84;
                                v92[2] = v85;
                                v92[3] = v92;
                                ++*v87;
                                v8 = v331;
                                v5 = v332;
                                goto LABEL_216;
                              }
                            }
                          }
                          else if ((WGSL::Type::packing(*(WGSL::Type **)v66) & 0x10) != 0)
                          {
                            *(_BYTE *)(*((_QWORD *)this + 5) + 30) = 1;
                          }
                          if ((WGSL::Type::packing(*(WGSL::Type **)v66) & 0x10) != 0)
                          {
                            v83 = *((_QWORD *)this + 5);
                            v84 = *(_QWORD *)&v12 + 129;
                            v85 = *(unsigned __int8 *)(*(_QWORD *)&v12 + 129);
                            *(_BYTE *)(*(_QWORD *)&v12 + 129) = 1;
                            v86 = (_QWORD *)(v83 + 400);
                            v87 = (_DWORD *)(v83 + 412);
                            v88 = *(unsigned int *)(v83 + 412);
                            if ((_DWORD)v88 == *(_DWORD *)(v83 + 408))
                            {
                              v89 = v88 + (v88 >> 2);
                              if (v89 >= 0x10)
                                v90 = v89 + 1;
                              else
                                v90 = 16;
                              if (v90 <= v88 + 1)
                                v91 = v88 + 1;
                              else
                                v91 = v90;
                              WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v86, v91);
                              v88 = *v87;
                            }
                            v92 = (_QWORD *)(*v86 + 32 * v88);
                            goto LABEL_215;
                          }
                        }
LABEL_216:
                        if (!*((_QWORD *)this + 18))
                          goto LABEL_227;
                        v152 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)&v12 + 136) + 24);
                        if (v152)
                        {
                          while (1)
                          {
                            while (1)
                            {
                              v153 = *((_DWORD *)v152 + 12);
                              if (v153 != 4)
                                break;
                              v154 = *v152;
                              v155 = *(unsigned int *)(*v152 + 84);
                              if (!(_DWORD)v155)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1824A1D1CLL);
                              }
                              v152 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154 + 72) + 8 * v155 - 8) + 104)
                                                 + 24);
                              if (!v152)
                                goto LABEL_5;
                            }
                            if (v153 != 10)
                              break;
                            v152 = (uint64_t *)v152[1];
                            if (!v152)
                              goto LABEL_5;
                          }
                          if (v153 == 3 && !*((_DWORD *)v152 + 4))
                          {
LABEL_227:
                            *(int32x2_t *)&v358 = v12;
                            DWORD2(v358) = v19;
                            v10 = HIDWORD(v338);
                            if (HIDWORD(v338) == (_DWORD)v338)
                            {
                              v9 = (_OWORD *)WTF::Vector<std::tuple<WGSL::AST::Function *,WGSL::AST::CallExpression *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v337, HIDWORD(v338) + 1, (unint64_t)&v358);
                              v10 = HIDWORD(v338);
                              *((_OWORD *)v337 + HIDWORD(v338)) = *v9;
                            }
                            else
                            {
                              *((_OWORD *)v337 + HIDWORD(v338)) = v358;
                            }
                            HIDWORD(v338) = v10 + 1;
                          }
                        }
                        goto LABEL_5;
                      }
                      v77 = (_DWORD *)WGSL::RewriteGlobalVariables::packStructType((uint64_t)this, v66);
                      if (!v77)
                        goto LABEL_216;
                      v78 = v77;
                      v79 = *((_QWORD *)this + 5);
                      v347 = 0uLL;
                      if (v77[12] != 4)
                        goto LABEL_469;
                      v80 = *(_DWORD **)(*(_QWORD *)v77 + 48);
                      if (v80)
                        *v80 += 2;
                      *((_QWORD *)&v358 + 1) = 0;
                      *(_QWORD *)&v359 = 0;
                      *(_QWORD *)&v358 = &off_1E0FD2F10;
                      *((_QWORD *)&v359 + 1) = v80;
                      v81 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v79 + 312), &v347, (uint64_t)&v358);
                      v82 = (_DWORD *)*((_QWORD *)&v359 + 1);
                      *(_QWORD *)&v358 = &off_1E0FD2F10;
                      *((_QWORD *)&v359 + 1) = 0;
                      if (v82)
                      {
                        if (*v82 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *v82 -= 2;
                      }
                      v81[3] = v78;
                      v93 = *(_QWORD *)(*(_QWORD *)&v12 + 112);
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93) != 22)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824A1C90);
                      }
                      v325 = v81;
                      v94 = *((_QWORD *)this + 5);
                      v340 = *(_OWORD *)(v93 + 8);
                      *(_QWORD *)&v339 = v93;
                      *((_QWORD *)&v339 + 1) = off_1E0FD2EC0;
                      v341 = *(_QWORD *)(v93 + 24);
                      v342[0] = 0;
                      v344 = 0;
                      v95 = *(unsigned __int8 *)(v93 + 56);
                      if (*(_BYTE *)(v93 + 56))
                      {
                        v343 = -1;
                        v96 = *(unsigned int *)(v93 + 48);
                        if ((_DWORD)v96 != -1)
                        {
                          v97 = v95;
                          ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v96])(&v358, v342, v93 + 32);
                          v95 = v97;
                          v343 = v96;
                        }
                        v344 = 1;
                      }
                      else
                      {
                        v96 = 0;
                      }
                      *(_OWORD *)&v345[8] = *(_OWORD *)(v93 + 72);
                      *((_QWORD *)&v339 + 1) = off_1E0FD2E98;
                      *(_QWORD *)v345 = &off_1E0FD2F10;
                      v98 = *(_DWORD **)(v93 + 88);
                      if (v98)
                        *v98 += 2;
                      v99 = (uint64_t *)(v94 + 400);
                      v346 = v98;
                      v100 = *(unsigned int *)(v94 + 412);
                      v321 = v94;
                      if ((_DWORD)v100 == *(_DWORD *)(v94 + 408))
                      {
                        v101 = v100 + (v100 >> 2);
                        if (v101 >= 0x10)
                          v102 = v101 + 1;
                        else
                          v102 = 16;
                        if (v102 <= v100 + 1)
                          v103 = v100 + 1;
                        else
                          v103 = v102;
                        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v99, v103);
                        v104 = *(unsigned int *)(v94 + 412);
                        v105 = *(_QWORD *)(v94 + 400);
                        v359 = v340;
                        v106 = v339;
                        v107 = v341;
                        *(_QWORD *)&v358 = v339;
                        *((_QWORD *)&v358 + 1) = off_1E0FD2EC0;
                        v360 = v341;
                        v361[0] = 0;
                        v363 = 0;
                        v318 = v344;
                        if (v344)
                        {
                          v362 = -1;
                          v314 = v343;
                          if (v343 != -1)
                          {
                            v108 = v104;
                            ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E0FD3EE0[v343])(&v356, v361, v342);
                            v104 = v108;
                            v362 = v314;
                            v106 = v358;
                            v107 = v360;
                          }
                          v316 = 1;
                          v363 = 1;
                        }
                        else
                        {
                          v316 = 0;
                          v314 = 0;
                        }
                        *(_OWORD *)&v364[8] = *(_OWORD *)&v345[8];
                        *((_QWORD *)&v358 + 1) = off_1E0FD2E98;
                        *(_QWORD *)v364 = &off_1E0FD2F10;
                        v121 = v346;
                        v346 = 0;
                        v365 = v121;
                        v122 = v105 + 32 * v104;
                        *(_QWORD *)(v122 + 24) = 0;
                        v123 = (_QWORD *)(v122 + 24);
                        v124 = (char *)operator new(0x70uLL);
                        v125 = v124;
                        *(_QWORD *)v124 = off_1E0FD4330;
                        *((_QWORD *)v124 + 1) = v106;
                        *(_OWORD *)(v124 + 24) = v359;
                        *((_QWORD *)v124 + 2) = off_1E0FD2EC0;
                        *((_QWORD *)v124 + 5) = v107;
                        v124[48] = 0;
                        v124[72] = 0;
                        if (v318)
                        {
                          *((_DWORD *)v124 + 16) = -1;
                          v120 = (uint64_t)v325;
                          v126 = v316;
                          if (v314 != 0xFFFFFFFFLL)
                          {
                            ((void (*)(uint64_t *, char *, _BYTE *))off_1E0FD3EE0[v314])(&v356, v124 + 48, v361);
                            *((_DWORD *)v125 + 16) = v314;
                            v121 = v365;
                            v126 = v363;
                          }
                          v125[72] = 1;
                        }
                        else
                        {
                          v120 = (uint64_t)v325;
                          v126 = v316;
                        }
                        *((_QWORD *)v125 + 2) = off_1E0FD2E98;
                        *(_OWORD *)(v125 + 88) = *(_OWORD *)&v364[8];
                        *((_QWORD *)v125 + 10) = &off_1E0FD2F10;
                        *((_QWORD *)v125 + 13) = v121;
                        *v123 = v125;
                        v365 = 0;
                        *(_QWORD *)v364 = &off_1E0FD2F10;
                        *((_QWORD *)&v358 + 1) = off_1E0FD2EC0;
                        if (v126 && v362 != -1)
                          ((void (*)(uint64_t *, _BYTE *))off_1E0FD3E30[v362])(&v356, v361);
                        v116 = v93 + 32;
                        ++*(_DWORD *)(v321 + 412);
LABEL_171:
                        v127 = v346;
                        *(_QWORD *)v345 = &off_1E0FD2F10;
                        v346 = 0;
                        if (v127)
                        {
                          if (*v127 == 2)
                          {
                            WTF::StringImpl::destroy();
                            *((_QWORD *)&v339 + 1) = off_1E0FD2EC0;
                            if (!v344)
                              goto LABEL_179;
LABEL_177:
                            if (v343 != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v343])(&v358, v342);
LABEL_179:
                            *(_QWORD *)(v93 + 64) = &off_1E0FD2F10;
                            v128 = *(_DWORD **)(v93 + 88);
                            *(_QWORD *)(v93 + 88) = 0;
                            if (v128)
                            {
                              if (*v128 == 2)
                              {
                                WTF::StringImpl::destroy();
                                *(_QWORD *)v93 = off_1E0FD2EC0;
                                if (!*(_BYTE *)(v93 + 56))
                                {
LABEL_188:
                                  *(_QWORD *)v93 = &off_1E0FD2EE8;
                                  *(_OWORD *)(v93 + 8) = *(_OWORD *)(v120 + 8);
                                  *(_QWORD *)v93 = off_1E0FD2EC0;
                                  *(_QWORD *)(v93 + 24) = *(_QWORD *)(v120 + 24);
                                  *(_BYTE *)(v93 + 32) = 0;
                                  *(_BYTE *)(v93 + 56) = 0;
                                  if (*(_BYTE *)(v120 + 56))
                                  {
                                    *(_DWORD *)(v93 + 48) = -1;
                                    v130 = *(unsigned int *)(v120 + 48);
                                    if ((_DWORD)v130 != -1)
                                    {
                                      ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v130])(&v358, v116, v120 + 32);
                                      *(_DWORD *)(v93 + 48) = v130;
                                    }
                                    *(_BYTE *)(v93 + 56) = 1;
                                  }
                                  *(_QWORD *)v93 = off_1E0FD2E98;
                                  *(_QWORD *)(v93 + 64) = &off_1E0FD2EE8;
                                  *(_OWORD *)(v93 + 72) = *(_OWORD *)(v120 + 72);
                                  *(_QWORD *)(v93 + 64) = &off_1E0FD2F10;
                                  v131 = *(_DWORD **)(v120 + 88);
                                  if (v131)
                                    *v131 += 2;
                                  *(_QWORD *)(v93 + 88) = v131;
                                  v132 = *(_QWORD **)(*(_QWORD *)&v12 + 136);
                                  if ((*(unsigned int (**)(_QWORD *))(*v132 + 16))(v132) != 61)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1824A1CB0);
                                  }
                                  v133 = v132[3];
                                  if (v133)
                                  {
                                    if (*(_DWORD *)(v133 + 48) == 10)
                                      v134 = (unsigned __int8 *)v132[3];
                                    else
                                      v134 = 0;
                                  }
                                  else
                                  {
                                    v134 = 0;
                                  }
                                  v135 = (_QWORD *)(*((_QWORD *)this + 5) + 312);
                                  v358 = 0uLL;
                                  v136 = WGSL::AST::Builder::construct<WGSL::AST::ReferenceTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression &,void>(v135, &v358, v120);
                                  v137 = v120;
                                  v138 = *((_QWORD *)this + 5);
                                  v139 = *(_QWORD *)(v137 + 24);
                                  v140 = v134[1];
                                  v357 = *v134;
                                  v356 = v139;
                                  HIBYTE(v355) = v140;
                                  LOBYTE(v355) = 0;
                                  v141 = (v140 << 16) | ((unint64_t)v357 << 8) | 6;
                                  *(_QWORD *)&v358 = v141;
                                  *((_QWORD *)&v358 + 1) = v139;
                                  v142 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v138 + 112), (unsigned __int8 *)&v358);
                                  v143 = *(unsigned __int8 **)(v138 + 112);
                                  v326 = v136;
                                  if (v143)
                                    v143 += 24 * *((unsigned int *)v143 - 1);
                                  if (v143 == v142 || (v144 = *((_QWORD *)v142 + 2)) == 0)
                                  {
                                    v144 = WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(v138 + 96, &v357, (char *)&v355 + 1, &v356, (char *)&v355);
                                    *(_QWORD *)&v339 = v144;
                                    *(_QWORD *)&v347 = v141;
                                    *((_QWORD *)&v347 + 1) = v139;
                                    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v138 + 112), (unsigned __int8 *)&v347, (uint64_t *)&v339, (uint64_t)&v358);
                                  }
                                  v145 = (uint64_t)v326;
                                  goto LABEL_206;
                                }
LABEL_185:
                                v129 = *(unsigned int *)(v93 + 48);
                                if ((_DWORD)v129 != -1)
                                  ((void (*)(__int128 *, uint64_t))off_1E0FD3E30[v129])(&v358, v116);
                                *(_DWORD *)(v93 + 48) = -1;
                                goto LABEL_188;
                              }
                              *v128 -= 2;
                            }
                            *(_QWORD *)v93 = off_1E0FD2EC0;
                            if (!*(_BYTE *)(v93 + 56))
                              goto LABEL_188;
                            goto LABEL_185;
                          }
                          *v127 -= 2;
                        }
                        *((_QWORD *)&v339 + 1) = off_1E0FD2EC0;
                        if (!v344)
                          goto LABEL_179;
                        goto LABEL_177;
                      }
                      v109 = *v99;
                      v348 = v340;
                      v110 = v339;
                      v111 = v341;
                      *(_QWORD *)&v347 = v339;
                      *((_QWORD *)&v347 + 1) = off_1E0FD2EC0;
                      v349 = v341;
                      v350[0] = 0;
                      v352 = 0;
                      v319 = v95;
                      if (v95)
                      {
                        v351 = -1;
                        if (v96 != 0xFFFFFFFFLL)
                        {
                          ((void (*)(__int128 *, _BYTE *, _BYTE *))off_1E0FD3EE0[v96])(&v358, v350, v342);
                          v351 = v96;
                          v98 = v346;
                          v110 = v347;
                          v111 = v349;
                        }
                        v352 = 1;
                      }
                      *(_OWORD *)&v353[8] = *(_OWORD *)&v345[8];
                      *((_QWORD *)&v347 + 1) = off_1E0FD2E98;
                      *(_QWORD *)v353 = &off_1E0FD2F10;
                      v346 = 0;
                      v354 = v98;
                      v112 = v109 + 32 * v100;
                      *(_QWORD *)(v112 + 24) = 0;
                      v113 = (_QWORD *)(v112 + 24);
                      v114 = (char *)operator new(0x70uLL);
                      v115 = v114;
                      *(_QWORD *)v114 = off_1E0FD4330;
                      *((_QWORD *)v114 + 1) = v110;
                      *(_OWORD *)(v114 + 24) = v348;
                      *((_QWORD *)v114 + 2) = off_1E0FD2EC0;
                      *((_QWORD *)v114 + 5) = v111;
                      v114[48] = 0;
                      v114[72] = 0;
                      v116 = v93 + 32;
                      if (v319)
                      {
                        *((_DWORD *)v114 + 16) = -1;
                        v117 = v351;
                        if (v351 != -1)
                        {
                          ((void (*)(__int128 *, char *, _BYTE *))off_1E0FD3EE0[v351])(&v358, v114 + 48, v350);
                          *((_DWORD *)v115 + 16) = v117;
                        }
                        v115[72] = 1;
                      }
                      *((_QWORD *)v115 + 2) = off_1E0FD2E98;
                      *(_OWORD *)(v115 + 88) = *(_OWORD *)&v353[8];
                      *((_QWORD *)v115 + 10) = &off_1E0FD2F10;
                      v118 = v354;
                      v354 = 0;
                      *((_QWORD *)v115 + 13) = v118;
                      *v113 = v115;
                      v119 = v354;
                      *(_QWORD *)v353 = &off_1E0FD2F10;
                      v354 = 0;
                      v120 = (uint64_t)v325;
                      if (v119)
                      {
                        if (*v119 == 2)
                        {
                          WTF::StringImpl::destroy();
                          *((_QWORD *)&v347 + 1) = off_1E0FD2EC0;
                          if (!v352)
                          {
LABEL_170:
                            ++*(_DWORD *)(v321 + 412);
                            goto LABEL_171;
                          }
LABEL_168:
                          if (v351 != -1)
                            ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v351])(&v358, v350);
                          goto LABEL_170;
                        }
                        *v119 -= 2;
                      }
                      *((_QWORD *)&v347 + 1) = off_1E0FD2EC0;
                      if (!v352)
                        goto LABEL_170;
                      goto LABEL_168;
                    }
                    *v65 -= 2;
                  }
                  v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v12 + 112) + 24);
                  if (!v66)
                    goto LABEL_216;
                  goto LABEL_90;
                }
LABEL_77:
                v57 = (_DWORD)v56 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v56));
                goto LABEL_78;
              }
LABEL_76:
              v43 = v45;
              goto LABEL_79;
            }
LABEL_75:
            if (v56 <= 2 * v55)
              goto LABEL_77;
            goto LABEL_76;
          }
        }
        v50 = 16 * v49;
        v51 = (_DWORD **)((char *)v47 + 8);
        do
        {
          v52 = *v51;
          *v51 = 0;
          if (v52)
          {
            if (*v52 == 2)
              WTF::StringImpl::destroy();
            else
              *v52 -= 2;
          }
          v51 += 2;
          v50 -= 16;
        }
        while (v50);
        v47 = *v48;
        v7 = v330;
        goto LABEL_64;
      }
LABEL_33:
      *v30 = v23;
      v30[1] = v12;
      if (*v8)
      {
        ++*(_DWORD *)(*v8 - 12);
        v35 = *v8;
        if (*v8)
          goto LABEL_35;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v35 = *v8;
        if (*v8)
        {
LABEL_35:
          v36 = (*(_DWORD *)(v35 - 16) + *(_DWORD *)(v35 - 12));
          v37 = *(unsigned int *)(v35 - 4);
          if (v37 <= 0x400)
            goto LABEL_36;
          goto LABEL_41;
        }
      }
      v36 = *(unsigned int *)(v35 - 16);
      v37 = *(unsigned int *)(v35 - 4);
      if (v37 <= 0x400)
      {
LABEL_36:
        if (3 * v37 > 4 * v36)
          goto LABEL_44;
        if (!(_DWORD)v37)
        {
          v38 = 8;
LABEL_43:
          WTF::HashTable<std::tuple<unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>>::rehash(v8, v38);
          goto LABEL_44;
        }
LABEL_42:
        v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v37));
        goto LABEL_43;
      }
LABEL_41:
      if (v37 > 2 * v36)
        goto LABEL_44;
      goto LABEL_42;
    }
LABEL_5:
    if (++v6 == v4)
      goto LABEL_305;
  }
  v289 = 0;
  v290 = *(_QWORD *)(*(_QWORD *)&v12 + 164);
  do
  {
    ++v289;
    v291 = v290 > 9;
    LODWORD(v290) = v290 / 0xA;
  }
  while (v291);
  v292 = 0;
  v293 = v5;
  do
  {
    ++v292;
    v291 = v293 > 9;
    v293 /= 0xAu;
  }
  while (v291);
  if (v292 < 0)
    goto LABEL_476;
  v217 = __OFADD__(v292, 15);
  v294 = v292 + 15;
  if (v217)
    goto LABEL_476;
  v217 = __OFADD__(v294, 44);
  v295 = v294 + 44;
  v296 = v217;
  if (v289 < 0)
    goto LABEL_476;
  if (v296)
    goto LABEL_476;
  v217 = __OFADD__(v289, v295);
  v297 = v289 + v295;
  if (v217)
    goto LABEL_476;
  v298 = (v297 + 24);
  if (__OFADD__(v297, 24))
    goto LABEL_476;
  if (v297 == -24)
  {
    v299 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_462;
  }
  if ((v298 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v298 + 20)), (v299 = v358) == 0))
  {
LABEL_476:
    __break(0xC471u);
    JUMPOUT(0x1824A1D2CLL);
  }
  v300 = 0;
  *(_DWORD *)v358 = 2;
  *(_DWORD *)(v299 + 4) = v298;
  *(_QWORD *)(v299 + 8) = v299 + 20;
  *(_DWORD *)(v299 + 16) = 4;
  qmemcpy((void *)(v299 + 20), "global has buffer index ", 24);
  v301 = v13;
  do
  {
    *((_BYTE *)&v358 + v300-- + 12) = (v301 % 0xA) | 0x30;
    v291 = v301 > 9;
    v301 /= 0xAu;
  }
  while (v291);
  if (v300 + 14 <= 13)
    memcpy((void *)(v299 + 44), (char *)&v358 + v300 + 13, -v300);
  v302 = 0;
  do
  {
    ++v302;
    v291 = v13 > 9;
    LODWORD(v13) = v13 / 0xA;
  }
  while (v291);
  v303 = 0;
  v304 = (char *)(v299 + 44 + v302);
  qmemcpy(v304, " which exceeds the max allowed buffer index ", 44);
  v305 = v5;
  do
  {
    *((_BYTE *)&v358 + v303-- + 12) = (v305 % 0xA) | 0x30;
    v291 = v305 > 9;
    v305 /= 0xAu;
  }
  while (v291);
  v306 = v304 + 44;
  if (v303 + 14 <= 13)
    memcpy(v306, (char *)&v358 + v303 + 13, -v303);
  v307 = 0;
  do
  {
    ++v307;
    v291 = v5 > 9;
    v5 /= 0xAu;
  }
  while (v291);
  qmemcpy(&v306[v307], " for this stage", 15);
LABEL_462:
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = v299;
  *(_BYTE *)(a3 + 24) = 1;
  result = v337;
  if (v337)
    return (WTF *)WTF::fastFree(result, a2);
  return result;
}

uint64_t WGSL::RewriteGlobalVariables::visitEntryPoint@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  _DWORD *v27;
  _OWORD *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  _DWORD *v33;
  unint64_t v34;
  WTF *v35;
  _DWORD *v36;
  WTF *v37;
  _DWORD *v38;
  WTF *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD **v45;
  _DWORD *v46;
  WTF *v47;
  _DWORD *v48;
  unint64_t k;
  _DWORD *v50;
  uint64_t v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  void *v61;
  _DWORD **v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  _DWORD *v89;
  int v90;
  int v91;
  _DWORD *v92;
  int v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  void *v101;
  unsigned int v102;
  uint64_t j;
  uint64_t v104;
  int *v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  _DWORD *v120;
  WTF *v121;
  uint64_t v122;
  unint64_t v123;
  size_t v124;
  _DWORD *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  WTF *v131;
  char v132;
  unint64_t v133;
  _QWORD *v134;
  unsigned int v135;
  unsigned int v136;
  unint64_t v137;
  int v138;
  unsigned int v139;
  WTF *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  uint64_t v148;
  WTF *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  int v155;
  _QWORD *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  WTF *v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  WTF *v172;
  int v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  size_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  BOOL v195;
  int v196;
  uint64_t v197;
  int v198;
  unsigned int v199;
  BOOL v200;
  int v201;
  WTF::StringImpl *v202;
  WTF::String *v203;
  uint64_t v204;
  _DWORD *v205;
  uint64_t v206;
  _DWORD *v207;
  uint64_t *v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  _OWORD *v213;
  uint64_t v214;
  _OWORD *v215;
  WTF *v216;
  _DWORD *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  BOOL v232;
  int v233;
  unsigned int v234;
  BOOL v235;
  int v236;
  int v237;
  BOOL v238;
  int v239;
  int v240;
  BOOL v241;
  int v242;
  int v243;
  BOOL v244;
  int v245;
  int v246;
  BOOL v247;
  int v248;
  uint64_t v249;
  _WORD *v250;
  int8x16_t *v251;
  uint64_t v252;
  _BYTE *v253;
  _BYTE *v254;
  unint64_t v255;
  unsigned __int128 *v256;
  unsigned __int128 v257;
  double v258;
  double v259;
  double v260;
  unsigned int v261;
  uint64_t v262;
  _DWORD *v263;
  _DWORD *v264;
  unint64_t v265;
  _DWORD *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  uint64_t v275;
  _DWORD *v276;
  uint64_t *v277;
  _DWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _DWORD *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _DWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  _DWORD *v293;
  uint64_t v294;
  _DWORD *v295;
  _DWORD *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  uint64_t v304;
  _DWORD *v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  unint64_t v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  int v316;
  uint64_t v317;
  _QWORD *v318;
  unint64_t v319;
  int v320;
  WTF::StringImpl *v321;
  uint64_t v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  int v327;
  int v328;
  uint64_t v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  int m;
  int v334;
  WTF **v335;
  uint64_t v336;
  unsigned int v337;
  unsigned int v338;
  int v339;
  int n;
  uint64_t v341;
  WTF *v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  void *v354;
  void *v355;
  void *v356;
  _QWORD *v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  void *v366;
  void *v367;
  void *v368;
  _QWORD *v369;
  uint64_t v370;
  _DWORD *v371;
  _QWORD *v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  void *v377;
  void *v378;
  void *v379;
  _QWORD *v380;
  int v381;
  _OWORD *v382;
  uint64_t v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  int v389;
  int v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  WTF *v398;
  uint64_t v399;
  WTF *v400;
  _DWORD **v401;
  _DWORD *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  _DWORD *v406;
  uint64_t v407;
  unsigned int v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  unsigned int v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  int v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unsigned int v432;
  uint64_t v433;
  _QWORD *v434;
  int v435;
  uint64_t v436;
  int v437;
  int v438;
  uint64_t v439;
  unint64_t v440;
  unsigned int v441;
  uint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  __int128 v456;
  uint64_t v457;
  uint64_t v458;
  __int128 v459;
  __int128 v460;
  uint64_t v461;
  __int128 v462;
  __int128 v463;
  _DWORD *v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  _DWORD *v468;
  unsigned int *v469;
  unsigned int *v470;
  unint64_t v471;
  unsigned int *v472;
  unsigned int v473;
  unsigned int v474;
  unint64_t v475;
  unsigned int *v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  uint64_t v480;
  unsigned int *v481;
  uint64_t v482;
  unsigned int v483;
  _WORD *v484;
  unint64_t v485;
  __int128 v486;
  char *v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  char *v491;
  char *v492;
  char *v493;
  unsigned int *v494;
  __n128 v495;
  __n128 v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _DWORD *v500;
  int v501;
  uint64_t v502;
  unsigned int v503;
  unsigned int v504;
  uint64_t v505;
  WTF *v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  void *v513;
  void *v514;
  uint64_t v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  WTF *v523;
  WTF *v524;
  int v525;
  uint64_t v526;
  int8x16_t v527;
  int8x16_t v528;
  WTF *v529;
  _WORD *v530;
  int8x16_t *v531;
  uint64_t v532;
  uint64_t v533;
  __int128 v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  void *v539;
  void *v540;
  void *v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  int v545;
  int v546;
  unsigned int v547;
  int *v548;
  int v549;
  int v550;
  int v552;
  uint64_t v554;
  unint64_t v555;
  unint64_t v556;
  void *v557;
  void *v558;
  void *v559;
  _QWORD *v560;
  unsigned __int8 *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  WTF *v565;
  unsigned __int8 *v566;
  unsigned __int8 *v567;
  WTF *v568;
  uint64_t v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  void *v574;
  void *v575;
  void *v576;
  uint64_t v577;
  uint64_t *v578;
  uint64_t v579;
  uint64_t v580;
  int v581;
  unint64_t v582;
  unint64_t v583;
  unint64_t v584;
  unint64_t v585;
  void *v586;
  void *v587;
  void *v588;
  _QWORD *v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  _QWORD *v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  unint64_t v598;
  void *v599;
  void *v600;
  void *v601;
  unint64_t *v602;
  uint64_t v603;
  _DWORD *v604;
  unint64_t v605;
  uint64_t v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  void *v612;
  void *v613;
  void *v614;
  uint64_t *v615;
  _QWORD *v616;
  uint64_t v617;
  WTF *v618;
  unint64_t v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  void *v623;
  void *v624;
  void *v625;
  WTF **v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  _QWORD *v631;
  _QWORD *v632;
  unint64_t v633;
  unint64_t v634;
  unint64_t v635;
  unint64_t v636;
  WTF *v637;
  WTF *v638;
  uint64_t v639;
  WTF *v640;
  WTF *v641;
  uint64_t v642;
  _QWORD *v643;
  uint64_t v644;
  uint64_t v645;
  unint64_t v646;
  char *v647;
  int8x16_t v648;
  int8x16_t v649;
  char *v650;
  char *v651;
  char *v652;
  _WORD *v653;
  unint64_t v654;
  BOOL v655;
  int8x16_t v656;
  int8x16_t v657;
  uint64_t v658;
  unint64_t v659;
  _WORD *v660;
  int8x16_t *v661;
  __int16 v662;
  size_t v663;
  uint8x8_t *v664;
  uint16x8_t *v665;
  unint64_t v666;
  uint8x16_t v667;
  uint16x8_t v668;
  uint16x8_t v669;
  uint8x8_t *v670;
  uint16x8_t *v671;
  unint64_t v672;
  uint8x8_t v673;
  WTF *v674;
  void *v675;
  uint64_t v676;
  char *v677;
  uint64_t v678;
  uint64_t v679;
  WTF *v680;
  WTF *v681;
  void *v682;
  uint64_t v683;
  char *v684;
  uint64_t v685;
  uint64_t v686;
  WTF *v687;
  WTF *v688;
  uint64_t v689;
  uint64_t v690;
  WTF *v691;
  uint64_t v692;
  uint64_t v693;
  WTF *v694;
  void *v695;
  uint64_t v696;
  char *v697;
  uint64_t v698;
  uint64_t v699;
  WTF *v700;
  WTF *v701;
  void *v702;
  uint64_t v703;
  char *v704;
  uint64_t v705;
  uint64_t v706;
  WTF *v707;
  WTF *v708;
  void *v709;
  uint64_t v710;
  char *v711;
  uint64_t v712;
  uint64_t v713;
  WTF *v714;
  WTF *v715;
  uint64_t v716;
  uint64_t v717;
  WTF *v718;
  uint64_t v719;
  uint64_t v720;
  WTF *v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  unsigned __int128 *v725;
  unsigned __int128 v726;
  _BYTE *v727;
  char *v728;
  unint64_t v729;
  BOOL v730;
  unint64_t v731;
  _BYTE *v732;
  int8x16_t *v733;
  char v734;
  int v735;
  int v736;
  unsigned int *v737;
  void *v738;
  uint64_t v739;
  char *v740;
  uint64_t v741;
  uint64_t v742;
  WTF *v743;
  int8x16_t *v744;
  int8x16_t *v745;
  unint64_t v746;
  int8x16_t v747;
  int8x16_t v748;
  int8x16_t v749;
  int8x16_t v750;
  int16x8_t *v751;
  int8x8_t *v752;
  unint64_t v753;
  int16x8_t v754;
  unsigned int *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  WTF *v759;
  uint64_t v760;
  uint64_t v761;
  WTF *v762;
  unint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  _QWORD *v767;
  uint64_t v768;
  _QWORD *v769;
  WTF *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  _QWORD *v774;
  _QWORD *v775;
  _QWORD *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v780;
  uint64_t v781;
  _DWORD *v782;
  _QWORD *v783;
  _DWORD *v784;
  _QWORD *v785;
  _QWORD *v786;
  _DWORD *v787;
  uint64_t v788;
  void *v789;
  _QWORD *v790;
  WTF *v791;
  uint64_t v792;
  WTF *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  _QWORD *v797;
  _QWORD *v798;
  _QWORD *v799;
  unint64_t v800;
  unint64_t v801;
  unint64_t v802;
  unint64_t v803;
  _QWORD *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  _QWORD *v808;
  _QWORD *v810;
  _DWORD *v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  unint64_t v815;
  unint64_t v816;
  unint64_t v817;
  void *v818;
  void *v819;
  void *v820;
  _QWORD *v821;
  uint64_t v822;
  unsigned int *v823;
  void *v824;
  WTF *v825;
  _DWORD *v826;
  int *v827;
  int v828;
  uint64_t v829;
  _QWORD *v830;
  _DWORD *v831;
  uint64_t v832;
  _QWORD *v833;
  uint64_t v834;
  _QWORD *v835;
  uint64_t v836;
  void *v837;
  _QWORD *v838;
  WTF *v839;
  uint64_t v840;
  WTF *v841;
  unint64_t v842;
  unint64_t v843;
  unint64_t v844;
  unint64_t v845;
  void *v846;
  void *v847;
  void *v848;
  WTF **v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  _QWORD *v853;
  _QWORD *v854;
  _QWORD *v855;
  unint64_t v856;
  unint64_t v857;
  unint64_t v858;
  unint64_t v859;
  _QWORD *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  _QWORD *v867;
  unint64_t v868;
  BOOL v869;
  uint64_t v870;
  unint64_t v871;
  _WORD *v872;
  int8x16_t *v873;
  __int16 v874;
  _WORD *v875;
  char *v876;
  int8x16_t *v877;
  uint64_t v878;
  uint64_t v879;
  char *v880;
  unint64_t v881;
  __int128 v882;
  char *v883;
  int8x16_t v884;
  int8x16_t v885;
  int8x16_t v886;
  char *v887;
  char *v888;
  char *v889;
  unint64_t v890;
  char *v891;
  int8x16_t *v892;
  __int16 v893;
  uint64_t v894;
  char *v895;
  char *v896;
  int8x16_t *v897;
  uint64_t v898;
  uint64_t v899;
  char *v900;
  unint64_t v901;
  __int128 v902;
  char *v903;
  int8x16_t v904;
  int8x16_t v905;
  int8x16_t v906;
  char *v907;
  char *v908;
  char *v909;
  unint64_t v910;
  BOOL v911;
  uint64_t v912;
  unint64_t v913;
  char *v914;
  int8x16_t *v915;
  __int16 v916;
  uint64_t v917;
  char *v918;
  uint64_t v919;
  uint64_t v920;
  unsigned int v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  _WORD *v925;
  unint64_t v926;
  uint64_t v927;
  _WORD *v928;
  unint64_t v929;
  uint8x8_t *v930;
  uint16x8_t *v931;
  unint64_t v932;
  uint8x16_t v933;
  uint16x8_t v934;
  uint16x8_t v935;
  uint16x8_t *v936;
  unint64_t v937;
  char *v938;
  unint64_t v939;
  unint64_t v940;
  BOOL v941;
  unint64_t v942;
  _BYTE *v943;
  char *v944;
  char v945;
  _BYTE *v946;
  _BYTE *v947;
  _BYTE *v948;
  unint64_t v949;
  unsigned __int128 *v950;
  unsigned __int128 v951;
  uint64_t v952;
  unint64_t v953;
  unint64_t v954;
  BOOL v955;
  unint64_t v956;
  _BYTE *v957;
  char *v958;
  char v959;
  _DWORD *v960;
  _BYTE *v961;
  _BYTE *v962;
  unint64_t v963;
  unsigned __int128 *v964;
  unsigned __int128 v965;
  uint64_t v966;
  unint64_t v967;
  unint64_t v968;
  BOOL v969;
  unint64_t v970;
  _BYTE *v971;
  char *v972;
  char v973;
  uint64_t v974;
  char *v975;
  unsigned int v976;
  char *v977;
  int v978;
  uint64_t v979;
  char *v980;
  unsigned int v981;
  void *v982;
  unsigned int v983;
  uint64_t v984;
  unint64_t v985;
  uint8x8_t *v986;
  uint16x8_t *v987;
  unint64_t v988;
  uint8x16_t v989;
  uint16x8_t v990;
  uint16x8_t v991;
  uint8x8_t *v992;
  uint16x8_t *v993;
  unint64_t v994;
  uint8x8_t v995;
  uint8x8_t *v996;
  uint16x8_t *v997;
  unint64_t v998;
  uint8x16_t v999;
  uint16x8_t v1000;
  uint16x8_t v1001;
  uint8x8_t *v1002;
  uint16x8_t *v1003;
  unint64_t v1004;
  uint8x8_t v1005;
  uint8x8_t *v1006;
  uint16x8_t *v1007;
  unint64_t v1008;
  uint8x16_t v1009;
  uint16x8_t v1010;
  uint16x8_t v1011;
  uint8x8_t *v1012;
  uint16x8_t *v1013;
  unint64_t v1014;
  uint8x8_t v1015;
  unsigned int v1016;
  uint64_t v1017;
  _WORD *v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  size_t v1022;
  _WORD *v1023;
  unint64_t v1024;
  uint64_t v1025;
  _WORD *v1026;
  uint64_t v1027;
  unint64_t v1028;
  uint8x8_t *v1029;
  uint16x8_t *v1030;
  unint64_t v1031;
  uint8x16_t v1032;
  uint16x8_t v1033;
  uint16x8_t v1034;
  uint16x8_t *v1035;
  unint64_t v1036;
  char *v1037;
  int v1038;
  WTF *v1039;
  int8x16_t *v1040;
  int8x16_t *v1041;
  unint64_t v1042;
  int8x16_t v1043;
  int8x16_t v1044;
  int8x16_t v1045;
  int8x16_t v1046;
  int16x8_t *v1047;
  int8x8_t *v1048;
  unint64_t v1049;
  int16x8_t v1050;
  int8x16_t *v1051;
  int8x16_t *v1052;
  unint64_t v1053;
  int8x16_t v1054;
  int8x16_t v1055;
  int8x16_t v1056;
  int8x16_t v1057;
  int16x8_t *v1058;
  int8x8_t *v1059;
  unint64_t v1060;
  int16x8_t v1061;
  int8x16_t *v1062;
  int8x16_t *v1063;
  unint64_t v1064;
  int8x16_t v1065;
  int8x16_t v1066;
  int8x16_t v1067;
  int8x16_t v1068;
  int16x8_t *v1069;
  int8x8_t *v1070;
  unint64_t v1071;
  int16x8_t v1072;
  unint64_t v1073;
  WTF *v1074;
  WTF *v1075;
  int v1076;
  unint64_t v1077;
  WTF *v1078;
  WTF *v1079;
  void *v1080;
  uint64_t v1081;
  char *v1082;
  uint64_t v1083;
  uint64_t v1084;
  WTF *v1085;
  WTF *v1086;
  void *v1087;
  uint64_t v1088;
  char *v1089;
  uint64_t v1090;
  uint64_t v1091;
  WTF *v1092;
  WTF *v1093;
  uint64_t v1094;
  uint64_t v1095;
  WTF *v1096;
  uint64_t v1097;
  uint64_t v1098;
  _DWORD *v1099;
  uint64_t v1100;
  uint64_t *v1102;
  unint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  unsigned int v1108;
  uint64_t v1109;
  int v1110;
  uint64_t v1111;
  uint64_t v1112;
  unsigned int v1113;
  uint64_t *v1114;
  uint64_t v1115;
  unsigned int v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  int v1121;
  WTF *v1122;
  unint64_t v1123;
  WTF *v1124;
  uint64_t v1125;
  unsigned int v1126;
  unint64_t v1127;
  _QWORD *v1128;
  uint64_t v1129;
  uint64_t *v1130;
  int v1131;
  unint64_t v1132;
  unsigned int v1133;
  __n128 v1134;
  __n128 v1135;
  int8x16_t v1136;
  int8x16_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  __n128 v1140;
  __n128 v1141;
  int8x16_t v1142;
  int8x16_t v1143;
  _DWORD *v1144;
  WTF *v1145;
  unsigned int v1146;
  unsigned int v1147;
  uint64_t v1148;
  __int128 v1149;
  int v1150;
  unsigned int v1151;
  uint64_t v1152;
  uint64_t *v1153;
  uint64_t v1154;
  uint64_t v1155;
  WTF *v1156[2];
  unsigned int v1157;
  WTF *v1158;
  uint64_t v1159;
  WTF *v1160[2];
  __int128 v1161;
  uint64_t v1162;
  _DWORD *v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  _BYTE v1167[21];
  unint64_t v1168;
  __int128 v1169;
  uint64_t *v1170;
  uint64_t **v1171;
  uint64_t *v1172;
  uint64_t **v1173;
  uint64_t *v1174;
  uint64_t **v1175;
  uint64_t *v1176;
  uint64_t **v1177;
  uint64_t *v1178;
  unsigned int *v1179;
  _QWORD v1180[3];
  int8x16x2_t v1181;
  int8x16x2_t v1182;
  int8x16x2_t v1183;
  int8x16x2_t v1184;
  int8x16x2_t v1185;
  int8x16x2_t v1186;
  int8x16x2_t v1187;
  int8x16x2_t v1188;
  int8x16x2_t v1189;
  int8x16x2_t v1190;
  int8x16x2_t v1191;
  int8x16x2_t v1192;
  int8x16x2_t v1193;

  v4 = a2;
  v5 = result;
  v1180[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(result + 192);
  v7 = *v6;
  if (!*v6)
  {
LABEL_15:
    v14 = 0;
    v15 = **(_QWORD **)(v5 + 192);
    if (!v15)
      goto LABEL_17;
    goto LABEL_16;
  }
  v8 = *(_DWORD *)(v7 - 8);
  v9 = (WTF::StringImpl *)a2[2];
  v10 = *((_DWORD *)v9 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(v9);
  else
    v11 = v10 >> 8;
  for (i = 0; ; v11 = i + v13)
  {
    v13 = v11 & v8;
    result = *(_QWORD *)(v7 + 16 * v13);
    if (result == -1)
      goto LABEL_6;
    if (!result)
      break;
    result = WTF::equal((WTF *)result, (const WTF::StringImpl *)v4[2], a3);
    if ((result & 1) != 0)
    {
      v14 = v7 + 16 * v13;
      v15 = **(_QWORD **)(v5 + 192);
      if (v15)
        goto LABEL_16;
      goto LABEL_17;
    }
LABEL_6:
    ++i;
  }
  if (!*v6)
    goto LABEL_15;
  v14 = *v6 + 16 * *(unsigned int *)(*v6 - 4);
  v15 = **(_QWORD **)(v5 + 192);
  if (v15)
LABEL_16:
    v15 += 16 * *(unsigned int *)(v15 - 4);
LABEL_17:
  if (v15 == v14)
  {
LABEL_218:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    return result;
  }
  v16 = *(WTF **)(v5 + 96);
  while (v16)
  {
    v26 = v16;
    v16 = (WTF *)*((_QWORD *)v16 + 2);
    v27 = *(_DWORD **)v26;
    *(_QWORD *)v26 = 0;
    if (v27)
    {
      if (*v27 == 2)
        WTF::StringImpl::destroy();
      else
        *v27 -= 2;
    }
    WTF::fastFree(v26, a2);
  }
  v17 = *(_QWORD *)(v5 + 88);
  if (v17)
  {
    *(_QWORD *)(v5 + 88) = 0;
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  v18 = *(_QWORD *)(v5 + 72);
  if (v18)
  {
    *(_QWORD *)(v5 + 72) = 0;
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  v19 = *(_QWORD *)(v5 + 240);
  if (v19)
  {
    *(_QWORD *)(v5 + 240) = 0;
    WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  v20 = *(_QWORD *)(v5 + 200);
  LOBYTE(v1162) = 0;
  DWORD2(v1165) = 0;
  *(_QWORD *)&v1166 = 0;
  v1160[0] = 0;
  v1160[1] = 0;
  LOBYTE(v1161) = 0;
  v1163 = 0;
  LOBYTE(v1164) = 0;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v20, 8u, 0), (v21 = *(_QWORD *)v20) != 0))
  {
    v22 = *(_DWORD *)(v21 - 8);
    v23 = (WTF::StringImpl *)v4[2];
    v24 = *((_DWORD *)v23 + 4);
    v1130 = (uint64_t *)v5;
    if (v24 >= 0x100)
      goto LABEL_28;
LABEL_35:
    v25 = WTF::StringImpl::hashSlowCase(v23);
  }
  else
  {
    v22 = 0;
    v23 = (WTF::StringImpl *)v4[2];
    v24 = *((_DWORD *)v23 + 4);
    v1130 = (uint64_t *)v5;
    if (v24 < 0x100)
      goto LABEL_35;
LABEL_28:
    v25 = v24 >> 8;
  }
  v28 = 0;
  v29 = 1;
  while (2)
  {
    v30 = v25 & v22;
    v31 = v21 + 96 * (v25 & v22);
    v32 = *(WTF **)v31;
    if (*(_QWORD *)v31 == -1)
    {
      v28 = (_OWORD *)(v21 + 96 * v30);
LABEL_38:
      v25 = v29 + v30;
      ++v29;
      continue;
    }
    break;
  }
  if (v32)
  {
    if ((WTF::equal(v32, (const WTF::StringImpl *)v4[2], a3) & 1) != 0)
    {
      WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)v1160, a2);
      __break(0xC471u);
      JUMPOUT(0x1824A1F90);
    }
    goto LABEL_38;
  }
  if (v28)
  {
    v28[4] = 0u;
    v28[5] = 0u;
    v28[2] = 0u;
    v28[3] = 0u;
    *v28 = 0u;
    v28[1] = 0u;
    --*(_DWORD *)(*(_QWORD *)v20 - 16);
    v31 = (uint64_t)v28;
  }
  v33 = (_DWORD *)v4[2];
  v34 = (unint64_t)v1130;
  if (v33)
    *v33 += 2;
  *(_QWORD *)v31 = v33;
  v35 = v1160[0];
  v1160[0] = 0;
  v36 = *(_DWORD **)(v31 + 8);
  *(_QWORD *)(v31 + 8) = v35;
  if (!v36)
  {
LABEL_50:
    v37 = v1160[1];
    v1160[1] = 0;
    v38 = *(_DWORD **)(v31 + 16);
    *(_QWORD *)(v31 + 16) = v37;
    if (v38)
      goto LABEL_53;
LABEL_55:
    if (!*(_BYTE *)(v31 + 40))
      goto LABEL_74;
    goto LABEL_56;
  }
  if (*v36 != 2)
  {
    *v36 -= 2;
    goto LABEL_50;
  }
  WTF::StringImpl::destroy();
  v39 = v1160[1];
  v1160[1] = 0;
  v38 = *(_DWORD **)(v31 + 16);
  *(_QWORD *)(v31 + 16) = v39;
  if (!v38)
    goto LABEL_55;
LABEL_53:
  if (*v38 != 2)
  {
    *v38 -= 2;
    goto LABEL_55;
  }
  WTF::StringImpl::destroy();
  if (*(_BYTE *)(v31 + 40))
  {
LABEL_56:
    v40 = *(_DWORD *)(v31 + 36);
    v41 = *(_QWORD *)(v31 + 24);
    if (v40)
    {
      v42 = v41 + 24 * v40;
      do
      {
        v43 = *(unsigned int *)(v41 + 20);
        if ((_DWORD)v43)
        {
          v44 = 120 * v43;
          v45 = (_DWORD **)(*(_QWORD *)(v41 + 8) + 40);
          do
          {
            v46 = *v45;
            *v45 = 0;
            if (v46)
            {
              if (*v46 == 2)
                WTF::StringImpl::destroy();
              else
                *v46 -= 2;
            }
            v45 += 15;
            v44 -= 120;
          }
          while (v44);
        }
        v47 = *(WTF **)(v41 + 8);
        if (v47)
        {
          *(_QWORD *)(v41 + 8) = 0;
          *(_DWORD *)(v41 + 16) = 0;
          WTF::fastFree(v47, a2);
        }
        v41 += 24;
      }
      while (v41 != v42);
      v41 = *(_QWORD *)(v31 + 24);
    }
    if (v41)
    {
      *(_QWORD *)(v31 + 24) = 0;
      *(_DWORD *)(v31 + 32) = 0;
      WTF::fastFree((WTF *)v41, a2);
    }
    *(_BYTE *)(v31 + 40) = 0;
    v34 = (unint64_t)v1130;
    v48 = v1163;
    v1163 = 0;
    k = *(_QWORD *)(v31 + 48);
    *(_QWORD *)(v31 + 48) = v48;
    if (!k)
      goto LABEL_89;
LABEL_75:
    v51 = *(unsigned int *)(k - 4);
    if (!(_DWORD)v51)
    {
LABEL_88:
      WTF::fastFree((WTF *)(k - 16), a2);
      goto LABEL_89;
    }
    v52 = k;
    while (1)
    {
      v53 = *(_DWORD **)v52;
      if (*(_QWORD *)v52 == -1)
        goto LABEL_78;
      v54 = *(_DWORD **)(v52 + 8);
      *(_QWORD *)(v52 + 8) = 0;
      if (!v54)
        goto LABEL_83;
      if (*v54 != 2)
        break;
      WTF::StringImpl::destroy();
      v53 = *(_DWORD **)v52;
      *(_QWORD *)v52 = 0;
      if (v53)
      {
LABEL_86:
        if (*v53 == 2)
          WTF::StringImpl::destroy();
        else
          *v53 -= 2;
      }
LABEL_78:
      v52 += 32;
      if (!--v51)
        goto LABEL_88;
    }
    *v54 -= 2;
LABEL_83:
    *(_QWORD *)v52 = 0;
    if (v53)
      goto LABEL_86;
    goto LABEL_78;
  }
LABEL_74:
  v50 = v1163;
  v1163 = 0;
  k = *(_QWORD *)(v31 + 48);
  *(_QWORD *)(v31 + 48) = v50;
  if (k)
    goto LABEL_75;
LABEL_89:
  v55 = v1164;
  v56 = v1165;
  *(_QWORD *)(v31 + 88) = v1166;
  *(_OWORD *)(v31 + 72) = v56;
  *(_OWORD *)(v31 + 56) = v55;
  if (*(_QWORD *)v20)
  {
    ++*(_DWORD *)(*(_QWORD *)v20 - 12);
    v57 = *(_QWORD *)v20;
    if (*(_QWORD *)v20)
      goto LABEL_91;
LABEL_96:
    v58 = *(unsigned int *)(v57 - 16);
    v59 = *(unsigned int *)(v57 - 4);
    if (v59 > 0x400)
      goto LABEL_97;
LABEL_92:
    if (3 * v59 <= 4 * v58)
    {
      if (!(_DWORD)v59)
      {
        v60 = 8;
        goto LABEL_99;
      }
LABEL_98:
      v60 = (_DWORD)v59 << (6 * *(_DWORD *)(v57 - 12) >= (2 * v59));
LABEL_99:
      v31 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v20, v60, (WTF::StringImpl **)v31);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v57 = *(_QWORD *)v20;
    if (!*(_QWORD *)v20)
      goto LABEL_96;
LABEL_91:
    v58 = (*(_DWORD *)(v57 - 16) + *(_DWORD *)(v57 - 12));
    v59 = *(unsigned int *)(v57 - 4);
    if (v59 <= 0x400)
      goto LABEL_92;
LABEL_97:
    if (v59 <= 2 * v58)
      goto LABEL_98;
  }
  WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)v1160, a2);
  *(_BYTE *)(v34 + 184) = *((_BYTE *)v4 + 8);
  v62 = (_DWORD **)(v31 + 8);
  *(_QWORD *)(v34 + 128) = v31 + 8;
  v63 = (_DWORD *)v4[2];
  if (v63)
    *v63 += 2;
  v64 = *v62;
  *v62 = v63;
  if (!v64)
  {
LABEL_105:
    v65 = *(_QWORD *)(v34 + 128);
    v66 = *(_DWORD **)(*v4 + 48);
    if (!v66)
      goto LABEL_107;
    goto LABEL_106;
  }
  if (*v64 != 2)
  {
    *v64 -= 2;
    goto LABEL_105;
  }
  WTF::StringImpl::destroy();
  v65 = *(_QWORD *)(v34 + 128);
  v66 = *(_DWORD **)(*v4 + 48);
  if (v66)
LABEL_106:
    *v66 += 2;
LABEL_107:
  v67 = *(_DWORD **)(v65 + 8);
  *(_QWORD *)(v65 + 8) = v66;
  if (!v67)
    goto LABEL_110;
  if (*v67 == 2)
  {
    WTF::StringImpl::destroy();
    v68 = *(unsigned __int8 *)(v34 + 184);
    if (v68 != 1)
      goto LABEL_111;
    goto LABEL_121;
  }
  *v67 -= 2;
LABEL_110:
  v68 = *(unsigned __int8 *)(v34 + 184);
  if (v68 == 1)
  {
LABEL_121:
    v71 = *(_QWORD *)(v34 + 128);
    if (*(_DWORD *)(v71 + 72))
      *(_DWORD *)(v71 + 72) = 0;
    *(_BYTE *)(v71 + 48) = 0;
    goto LABEL_129;
  }
LABEL_111:
  if (v68 == 2)
  {
    v72 = *(_QWORD *)(v34 + 128);
    if (*(_DWORD *)(v72 + 72) != 1)
    {
      v73 = 1;
      goto LABEL_128;
    }
  }
  else if (v68 == 4)
  {
    v69 = *(unsigned int *)(*v4 + 84);
    if ((_DWORD)v69)
    {
      k = *(_QWORD *)(*v4 + 72);
      v70 = 8 * v69;
      while (1)
      {
        v20 = *(_QWORD *)k;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)k + 16))(*(_QWORD *)k) == 14)
          break;
        k += 8;
        v70 -= 8;
        if (!v70)
          goto LABEL_129;
      }
      v74 = *(_QWORD *)(v20 + 40);
      v72 = *(_QWORD *)(v34 + 128);
      v75 = *(_DWORD *)(v72 + 72);
      *(_OWORD *)(v72 + 48) = *(_OWORD *)(v20 + 24);
      *(_QWORD *)(v72 + 64) = v74;
      if (v75 != 2)
      {
        v73 = 2;
LABEL_128:
        *(_DWORD *)(v72 + 72) = v73;
      }
    }
  }
LABEL_129:
  v76 = *(uint64_t **)(v14 + 8);
  v1102 = v4;
  v1119 = v14;
  if (v76)
  {
    *(_QWORD *)(v34 + 144) = 0;
    v77 = *((_DWORD *)v76 + 3);
    if (v77)
    {
      LODWORD(k) = 0;
      v78 = *v76;
      v1120 = *v76 + 24 * v77;
      while (1)
      {
        v1125 = v78;
        v79 = *(_DWORD *)(v78 + 20);
        k = (k + 1);
        if (v79)
          break;
LABEL_132:
        v78 = v1125 + 24;
        if (v1125 + 24 == v1120)
          goto LABEL_209;
      }
      v80 = *(_QWORD *)(v78 + 8);
      v4 = (uint64_t *)(v80 + 120 * v79);
      while (2)
      {
        v81 = *(unsigned __int8 *)(v34 + 184);
        if ((*(_BYTE *)(v80 + 8) & v81) == 0)
        {
LABEL_136:
          v80 += 120;
          if ((uint64_t *)v80 == v4)
            goto LABEL_132;
          continue;
        }
        break;
      }
      switch(v81)
      {
        case 4:
          v82 = (uint64_t *)(v80 + 96);
          break;
        case 2:
          v82 = (uint64_t *)(v80 + 72);
          break;
        case 1:
          v82 = (uint64_t *)(v80 + 48);
          break;
        default:
LABEL_145:
          switch(v81)
          {
            case 4:
              v83 = *(_QWORD *)(v80 + 112);
              if ((v83 & 0xFF00000000) == 0)
                goto LABEL_136;
              break;
            case 2:
              v83 = *(_QWORD *)(v80 + 88);
              if ((v83 & 0xFF00000000) == 0)
                goto LABEL_136;
              break;
            case 1:
              v83 = *(_QWORD *)(v80 + 64);
              if ((v83 & 0xFF00000000) == 0)
                goto LABEL_136;
              break;
            default:
              goto LABEL_136;
          }
          if ((v20 & 0xFF00000000) == 0)
            goto LABEL_775;
          v84 = *(_QWORD *)(v34 + 240);
          if (v84
            || (v85 = WTF::fastZeroedMalloc((WTF *)0x70),
                *(_QWORD *)(v34 + 240) = v85 + 16,
                *(_DWORD *)(v85 + 12) = 8,
                *(_DWORD *)(*(_QWORD *)(v34 + 240) - 8) = 7,
                *(_DWORD *)(*(_QWORD *)(v34 + 240) - 16) = 0,
                *(_DWORD *)(*(_QWORD *)(v34 + 240) - 12) = 0,
                (v84 = *(_QWORD *)(v34 + 240)) != 0))
          {
            v86 = *(_DWORD *)(v84 - 8);
          }
          else
          {
            v86 = 0;
          }
          v87 = v20 + 1;
          v88 = v86 & ((0xD7862706ELL * (unint64_t)(277951225 * k + 95187966 * (v20 + 1))) >> 4);
          v89 = (_DWORD *)(v84 + 12 * v88);
          v90 = *v89;
          v91 = v89[1];
          if (*(_QWORD *)v89)
          {
            v92 = 0;
            v93 = 1;
            while (v90 != (_DWORD)k || v91 != v87)
            {
              if (v90 == -1)
                v92 = v89;
              v88 = (v88 + v93) & v86;
              v89 = (_DWORD *)(v84 + 12 * v88);
              v90 = *v89;
              v91 = v89[1];
              ++v93;
              if (!*(_QWORD *)v89)
              {
                if (v92)
                {
                  v92[2] = 0;
                  *(_QWORD *)v92 = 0;
                  --*(_DWORD *)(*(_QWORD *)(v34 + 240) - 16);
                  v89 = v92;
                }
                goto LABEL_167;
              }
            }
            goto LABEL_136;
          }
LABEL_167:
          *v89 = k;
          v89[1] = v87;
          v89[2] = v83;
          v94 = *(_QWORD *)(v34 + 240);
          if (v94)
          {
            ++*(_DWORD *)(v94 - 12);
            v20 = *(_QWORD *)(v34 + 240);
            if (v20)
              goto LABEL_169;
LABEL_174:
            v95 = (WTF *)(v20 - 16);
            v96 = *(unsigned int *)(v20 - 16);
            v97 = *(unsigned int *)(v20 - 4);
            if (v97 > 0x400)
              goto LABEL_175;
LABEL_170:
            if (3 * v97 > 4 * v96)
              goto LABEL_136;
            if (!(_DWORD)v97)
            {
              v98 = *(_DWORD *)(v20 - 12);
              v99 = 8;
LABEL_177:
              v100 = WTF::fastZeroedMalloc((WTF *)(12 * v99 + 16));
              v1130[30] = v100 + 16;
              *(_DWORD *)(v100 + 12) = v99;
              v102 = v99 - 1;
              v34 = (unint64_t)v1130;
              *(_DWORD *)(v1130[30] - 8) = v102;
              *(_DWORD *)(v1130[30] - 16) = 0;
              *(_DWORD *)(v1130[30] - 12) = v98;
              if ((_DWORD)v97)
              {
                for (j = 0; j != v97; ++j)
                {
                  v105 = (int *)(v20 + 12 * j);
                  v106 = *v105;
                  if (*v105 != -1)
                  {
                    v107 = v105[1];
                    if (v106 | v107)
                    {
                      v108 = v1130[30];
                      if (v108)
                        v109 = *(_DWORD *)(v108 - 8);
                      else
                        v109 = 0;
                      v110 = v109 & ((0xD7862706ELL
                                    * (unint64_t)(277951225 * v106 + 95187966 * v107)) >> 4);
                      v111 = 1;
                      do
                      {
                        v112 = v108 + 12 * v110;
                        v110 = (v110 + v111++) & v109;
                      }
                      while (*(_QWORD *)v112);
                      v104 = *(_QWORD *)v105;
                      *(_DWORD *)(v112 + 8) = v105[2];
                      *(_QWORD *)v112 = v104;
                    }
                  }
                }
              }
              WTF::fastFree(v95, v101);
              goto LABEL_136;
            }
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
            v20 = *(_QWORD *)(v34 + 240);
            if (!v20)
              goto LABEL_174;
LABEL_169:
            v95 = (WTF *)(v20 - 16);
            v96 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
            v97 = *(unsigned int *)(v20 - 4);
            if (v97 <= 0x400)
              goto LABEL_170;
LABEL_175:
            if (v97 > 2 * v96)
              goto LABEL_136;
          }
          v98 = *(_DWORD *)(v20 - 12);
          v99 = (_DWORD)v97 << (6 * v98 >= (2 * v97));
          goto LABEL_177;
      }
      v20 = *v82;
      goto LABEL_145;
    }
  }
  else
  {
    v113 = *(_QWORD *)(v34 + 128);
    k = v113 + 16;
    if (*(_BYTE *)(v113 + 32))
    {
      v114 = *(_DWORD *)(v113 + 28);
      v115 = *(_QWORD *)(v113 + 16);
      if (v114)
      {
        v116 = v115 + 24 * v114;
        do
        {
          v117 = *(unsigned int *)(v115 + 20);
          if ((_DWORD)v117)
          {
            v118 = 120 * v117;
            v119 = (_DWORD **)(*(_QWORD *)(v115 + 8) + 40);
            do
            {
              v120 = *v119;
              *v119 = 0;
              if (v120)
              {
                if (*v120 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v120 -= 2;
              }
              v119 += 15;
              v118 -= 120;
            }
            while (v118);
          }
          v121 = *(WTF **)(v115 + 8);
          if (v121)
          {
            *(_QWORD *)(v115 + 8) = 0;
            *(_DWORD *)(v115 + 16) = 0;
            WTF::fastFree(v121, v61);
          }
          v115 += 24;
        }
        while (v115 != v116);
        v115 = *(_QWORD *)k;
        v34 = (unint64_t)v1130;
      }
      if (v115)
      {
        *(_QWORD *)(v113 + 16) = 0;
        *(_DWORD *)(v113 + 24) = 0;
        WTF::fastFree((WTF *)v115, v61);
      }
      *(_QWORD *)k = 0;
      *(_QWORD *)(v113 + 24) = 0;
      v122 = *(_QWORD *)(v34 + 128);
      if (!*(_BYTE *)(v122 + 32))
        goto LABEL_775;
    }
    else
    {
      *(_QWORD *)k = 0;
      *(_QWORD *)(v113 + 24) = 0;
      *(_BYTE *)(v113 + 32) = 1;
      v122 = *(_QWORD *)(v34 + 128);
      if (!*(_BYTE *)(v122 + 32))
        goto LABEL_775;
    }
    *(_QWORD *)(v34 + 144) = v122 + 16;
  }
LABEL_209:
  v4 = v1102;
  result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, *v1102);
  if (*(_BYTE *)(v34 + 32))
  {
    v125 = *(_DWORD **)(v34 + 8);
    if (v125)
      *v125 += 2;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(v34 + 16);
    *(_QWORD *)a4 = v125;
    *(_BYTE *)(a4 + 24) = 1;
    return result;
  }
  v126 = *(_QWORD *)(v34 + 88);
  if (!v126 || !*(_DWORD *)(v126 - 12))
  {
    result = WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded(v34, (_OWORD *)(*v1102 + 8), *v1102);
    goto LABEL_218;
  }
  v1111 = *v1102;
  v1160[0] = 0;
  v1160[1] = 0;
  *(_QWORD *)&v1161 = 0;
  v127 = *(unsigned int *)(*(_QWORD *)(v34 + 40) + 52);
  v128 = *(_QWORD *)(v34 + 96);
  if (!v128)
  {
    LOBYTE(v1121) = 0;
    v1116 = 0;
    LOBYTE(v1131) = 0;
    v1126 = 0;
    v129 = v1119;
    goto LABEL_221;
  }
  v1126 = 0;
  v1131 = 0;
  v1116 = 0;
  v1121 = 0;
  v129 = v1119;
LABEL_257:
  while (2)
  {
    k = *(_QWORD *)(v34 + 48);
    if (!k)
    {
LABEL_1576:
      __break(0xC471u);
      JUMPOUT(0x1824A7DE4);
    }
    v145 = *(_DWORD *)(k - 8);
    v146 = *(_DWORD *)(*(_QWORD *)v128 + 16);
    if (v146 < 0x100)
      v147 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v128);
    else
      v147 = v146 >> 8;
    v133 = 0;
    while (2)
    {
      v148 = v147 & v145;
      v149 = *(WTF **)(k + 32 * v148);
      if (v149 == (WTF *)-1)
      {
LABEL_262:
        v133 = (v133 + 1);
        v147 = v133 + v148;
        continue;
      }
      break;
    }
    if (v149)
    {
      if ((WTF::equal(v149, *(const WTF::StringImpl **)v128, (const WTF::StringImpl *)v124) & 1) != 0)
      {
        v150 = k + 32 * v148;
        v151 = *(_QWORD *)(v34 + 48);
        if (v151)
        {
          v152 = *(unsigned int *)(v151 - 4);
          goto LABEL_270;
        }
        goto LABEL_271;
      }
      goto LABEL_262;
    }
    v151 = *(_QWORD *)(v34 + 48);
    if (!v151)
      goto LABEL_1576;
    v152 = *(unsigned int *)(v151 - 4);
    v150 = v151 + 32 * v152;
LABEL_270:
    if (v150 == v151 + 32 * v152)
      goto LABEL_1576;
LABEL_271:
    v130 = v150 + 8;
    v4 = *(uint64_t **)(v150 + 24);
    v153 = *((unsigned __int8 *)v4 + 128);
    if (v153 < 2 || v153 == 3)
    {
      if (*(_BYTE *)(v150 + 16))
        goto LABEL_285;
      v1168 = v150 + 8;
      v155 = DWORD1(v1161);
      if (DWORD1(v1161) == (_DWORD)v1161)
      {
        v156 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1160[1], DWORD1(v1161) + 1, (unint64_t)&v1168);
        v157 = DWORD1(v1161);
        *((_QWORD *)v1160[1] + DWORD1(v1161)) = *v156;
        DWORD1(v1161) = v157 + 1;
        v158 = v4[13];
        if (!v158)
          goto LABEL_340;
      }
      else
      {
        *((_QWORD *)v1160[1] + DWORD1(v1161)) = v130;
        DWORD1(v1161) = v155 + 1;
        v158 = v4[13];
        if (!v158)
          goto LABEL_340;
      }
      if (*(_BYTE *)(v158 + 24) == 5)
      {
        v192 = *(unsigned int *)(v4[18] + 48);
        if ((_DWORD)v192 == -1)
          goto LABEL_1566;
        v1168 = (unint64_t)&v1148;
        v193 = ((uint64_t (*)(unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v192])(&v1168);
        v194 = v1116;
        v195 = __CFADD__(v1116, v193);
        if (!__CFADD__(v1116, v193))
          v194 = v1116 + v193;
        v1116 = v194;
        v196 = v1121;
        if (v195)
          v196 = 1;
        v1121 = v196;
        v4 = v1102;
        v128 = *(_QWORD *)(v128 + 16);
        if (v128)
          continue;
        goto LABEL_221;
      }
LABEL_340:
      v197 = *(unsigned int *)(v4[18] + 48);
      if ((_DWORD)v197 == -1)
        goto LABEL_1566;
      v1168 = (unint64_t)&v1148;
      v198 = ((uint64_t (*)(unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v197])(&v1168);
      v199 = v1126;
      v200 = __CFADD__(v1126, v198);
      if (!__CFADD__(v1126, v198))
        v199 = v1126 + v198;
      v1126 = v199;
      v201 = v1131;
      if (v200)
        v201 = 1;
      v1131 = v201;
      v4 = v1102;
      v128 = *(_QWORD *)(v128 + 16);
      if (v128)
        continue;
LABEL_221:
      if ((_BYTE)v1131 || v1126 > 0x2000)
      {
        WTF::String::number((WTF::String *)0x2000);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"The combined byte size of all variables in the private address space exceeds ", 78, (uint64_t *)v1156, (int8x16_t *)" bytes", 7, &v1168);
        v1074 = *(WTF **)(v1111 + 8);
        v1073 = *(_QWORD *)(v1111 + 16);
        v128 = v1168;
        v1148 = v1168;
        *(_QWORD *)&v1149 = v1074;
        v131 = v1074;
        *((_QWORD *)&v1149 + 1) = v1073;
        v1150 = 1;
        v1168 = 0;
        v1075 = v1156[0];
        v1156[0] = 0;
        k = HIDWORD(v1073);
        if (!v1075)
          goto LABEL_1561;
        v1076 = *(_DWORD *)v1075 - 2;
        if (*(_DWORD *)v1075 == 2)
          goto LABEL_1560;
      }
      else
      {
        if (!(_BYTE)v1121 && v1116 <= v127)
        {
          v130 = 0;
          v128 = (unint64_t)v1160[0];
          v131 = v1160[1];
          v1160[0] = 0;
          v1160[1] = 0;
          v1148 = v128;
          *(_QWORD *)&v1149 = v131;
          *((_QWORD *)&v1149 + 1) = v1161;
          LODWORD(v1127) = DWORD1(v1161);
          v132 = 1;
          v1150 = 0;
          goto LABEL_227;
        }
        WTF::String::number((WTF::String *)v127);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"The combined byte size of all variables in the workgroup address space exceeds ", 80, (uint64_t *)v1156, (int8x16_t *)" bytes", 7, &v1168);
        v1078 = *(WTF **)(v1111 + 8);
        v1077 = *(_QWORD *)(v1111 + 16);
        v128 = v1168;
        v1148 = v1168;
        *(_QWORD *)&v1149 = v1078;
        v131 = v1078;
        *((_QWORD *)&v1149 + 1) = v1077;
        v1150 = 1;
        v1168 = 0;
        v1075 = v1156[0];
        v1156[0] = 0;
        k = HIDWORD(v1077);
        if (!v1075)
        {
LABEL_1561:
          v132 = 0;
          v130 = 1;
          LODWORD(v1127) = k;
          v4 = v1102;
          v1039 = v1160[1];
          if (v1160[1])
            goto LABEL_226;
          goto LABEL_227;
        }
        v1076 = *(_DWORD *)v1075 - 2;
        if (*(_DWORD *)v1075 == 2)
        {
LABEL_1560:
          WTF::StringImpl::destroy();
          goto LABEL_1561;
        }
      }
      *(_DWORD *)v1075 = v1076;
      goto LABEL_1561;
    }
    break;
  }
  if (v153 == 2)
  {
    v159 = v4[18];
    if (*(_DWORD *)(v159 + 48))
      goto LABEL_1566;
    v160 = 0;
    switch(*(_BYTE *)v159)
    {
      case 0:
      case 3:
      case 6:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        __break(0xC471u);
        JUMPOUT(0x1824A7E04);
      case 1:
        v160 = 2;
        break;
      case 2:
        v160 = 3;
        break;
      case 4:
        v160 = 4;
        break;
      case 5:
        v160 = 1;
        break;
      default:
        break;
    }
    v202 = (WTF::StringImpl *)v4[10];
    if (v202)
      *(_DWORD *)v202 += 2;
    v203 = *(WTF::String **)((char *)v4 + 172);
    v1108 = v160;
    if (((unint64_t)v203 & 0xFF00000000) != 0)
    {
      WTF::String::number(v203);
      v204 = v1168;
      v1168 = 0;
      if (v202)
      {
        if (*(_DWORD *)v202 == 2)
        {
          WTF::StringImpl::destroy();
          v205 = (_DWORD *)v1168;
          v1168 = 0;
          if (v205)
          {
            if (*v205 == 2)
              WTF::StringImpl::destroy();
            else
              *v205 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v202 -= 2;
        }
      }
      v202 = (WTF::StringImpl *)v204;
    }
    v1113 = v127;
    v206 = v1130[16];
    v207 = (_DWORD *)v4[6];
    if (v207)
      *v207 += 2;
    v208 = (uint64_t *)(v206 + 40);
    v1105 = v4[15];
    v209 = *(_QWORD *)(v206 + 40);
    if (v209
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::SpecializationConstant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::SpecializationConstant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v208, 8u), (v209 = *v208) != 0))
    {
      v210 = *(_DWORD *)(v209 - 8);
      v211 = *((_DWORD *)v202 + 4);
      if (v211 >= 0x100)
        goto LABEL_369;
LABEL_371:
      v212 = WTF::StringImpl::hashSlowCase(v202);
    }
    else
    {
      v210 = 0;
      v211 = *((_DWORD *)v202 + 4);
      if (v211 < 0x100)
        goto LABEL_371;
LABEL_369:
      v212 = v211 >> 8;
    }
    v213 = 0;
    for (k = 1; ; k = (k + 1))
    {
      v214 = v212 & v210;
      v215 = (_OWORD *)(v209 + 32 * v214);
      v216 = *(WTF **)v215;
      if (*(_QWORD *)v215 == -1)
      {
        v213 = (_OWORD *)(v209 + 32 * v214);
      }
      else
      {
        if (!v216)
        {
          if (v213)
          {
            *v213 = 0u;
            v213[1] = 0u;
            --*(_DWORD *)(*v208 - 16);
            v215 = v213;
          }
          v129 = v1119;
          if (v202)
            *(_DWORD *)v202 += 2;
          *(_QWORD *)v215 = v202;
          v217 = (_DWORD *)*((_QWORD *)v215 + 1);
          *((_QWORD *)v215 + 1) = v207;
          k = v1108;
          if (v217)
          {
            if (*v217 == 2)
              WTF::StringImpl::destroy();
            else
              *v217 -= 2;
          }
          *((_BYTE *)v215 + 16) = v1108;
          *((_QWORD *)v215 + 3) = v1105;
          v218 = *v208;
          if (*v208)
            v219 = *(_DWORD *)(v218 - 12) + 1;
          else
            v219 = 1;
          *(_DWORD *)(v218 - 12) = v219;
          v220 = *v208;
          if (*v208)
            v221 = *(_DWORD *)(v220 - 12);
          else
            v221 = 0;
          v222 = (*(_DWORD *)(v220 - 16) + v221);
          v223 = *(unsigned int *)(v220 - 4);
          if (v223 > 0x400)
          {
            if (v223 > 2 * v222)
              goto LABEL_403;
          }
          else
          {
            if (3 * v223 > 4 * v222)
              goto LABEL_403;
            if (!(_DWORD)v223)
            {
              v224 = 8;
LABEL_401:
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::SpecializationConstant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::SpecializationConstant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v208, v224);
              goto LABEL_403;
            }
          }
          v224 = (_DWORD)v223 << (6 * *(_DWORD *)(v220 - 12) >= (2 * v223));
          goto LABEL_401;
        }
        if (WTF::equal(v216, v202, (const WTF::StringImpl *)v124))
        {
          v129 = v1119;
          if (v207)
          {
            if (*v207 == 2)
              WTF::StringImpl::destroy();
            else
              *v207 -= 2;
          }
LABEL_403:
          if (!v202)
          {
            v34 = (unint64_t)v1130;
            v4 = v1102;
            v127 = v1113;
            v128 = *(_QWORD *)(v128 + 16);
            if (!v128)
              goto LABEL_221;
            goto LABEL_257;
          }
          v4 = v1102;
          v127 = v1113;
          if (*(_DWORD *)v202 != 2)
          {
            *(_DWORD *)v202 -= 2;
            v34 = (unint64_t)v1130;
            v128 = *(_QWORD *)(v128 + 16);
            if (!v128)
              goto LABEL_221;
            goto LABEL_257;
          }
          WTF::StringImpl::destroy();
          goto LABEL_256;
        }
      }
      v212 = k + v214;
    }
  }
  if (!*(_BYTE *)(v150 + 16))
    goto LABEL_775;
LABEL_285:
  v161 = *(_DWORD *)(v150 + 8);
  k = *(unsigned int *)(v150 + 12);
  v162 = v1160[0];
  if (v1160[0]
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)v1160, 8u, 0), (v162 = v1160[0]) != 0))
  {
    v163 = *((_DWORD *)v162 - 2);
  }
  else
  {
    v163 = 0;
  }
  v164 = 9 * ((v161 + ~(v161 << 15)) ^ ((v161 + ~(v161 << 15)) >> 10));
  v165 = (v164 ^ (v164 >> 6)) + ~((v164 ^ (v164 >> 6)) << 11);
  v166 = v163 & (v165 ^ HIWORD(v165));
  v167 = (uint64_t)v162 + 16 * v166;
  v168 = *(_DWORD *)v167;
  if (*(_DWORD *)v167 == -1)
  {
LABEL_296:
    *(_DWORD *)v167 = v161;
    v171 = *(_QWORD *)(v167 + 8);
    *(_QWORD *)(v167 + 8) = 0;
    if (v171)
      WTF::fastFree((WTF *)(v171 - 16), (void *)v123);
    v172 = v1160[0];
    if (v1160[0])
    {
      v173 = *((_DWORD *)v1160[0] - 4);
      v174 = *((_DWORD *)v1160[0] - 3) + 1;
      *((_DWORD *)v1160[0] - 3) = v174;
      v175 = (v173 + v174);
      v176 = *((unsigned int *)v172 - 1);
      if (v176 <= 0x400)
        goto LABEL_300;
    }
    else
    {
      v174 = 1;
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v175 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
      v176 = MEMORY[0xFFFFFFFFFFFFFFFC];
      if (MEMORY[0xFFFFFFFFFFFFFFFC] <= 0x400u)
      {
LABEL_300:
        if (3 * v176 > 4 * v175)
          goto LABEL_307;
        if (!(_DWORD)v176)
        {
          v177 = 8;
LABEL_306:
          v167 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)v1160, v177, (int *)v167);
          goto LABEL_307;
        }
LABEL_305:
        v177 = (_DWORD)v176 << (6 * v174 >= (2 * v176));
        goto LABEL_306;
      }
    }
    if (v176 > 2 * v175)
      goto LABEL_307;
    goto LABEL_305;
  }
  v169 = 0;
  v170 = 1;
  while (v168 != v161)
  {
    if (v168 == -2)
      v169 = v167;
    v166 = (v166 + v170) & v163;
    v167 = (uint64_t)v162 + 16 * v166;
    v168 = *(_DWORD *)v167;
    ++v170;
    if (*(_DWORD *)v167 == -1)
    {
      if (v169)
      {
        *(_DWORD *)v169 = -1;
        *(_QWORD *)(v169 + 8) = 0;
        --*((_DWORD *)v1160[0] - 4);
        v167 = v169;
      }
      goto LABEL_296;
    }
  }
LABEL_307:
  v180 = *(_QWORD *)(v167 + 8);
  v179 = (uint64_t *)(v167 + 8);
  v178 = v180;
  if (v180
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WGSL::RewriteGlobalVariables::Global *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v179, 8u), (v178 = *v179) != 0))
  {
    v181 = *(_DWORD *)(v178 - 8);
  }
  else
  {
    v181 = 0;
  }
  v182 = 9 * ((k + ~((_DWORD)k << 15)) ^ ((k + ~((_DWORD)k << 15)) >> 10));
  v183 = (v182 ^ (v182 >> 6)) + ~((v182 ^ (v182 >> 6)) << 11);
  v184 = v181 & (v183 ^ HIWORD(v183));
  v124 = v178 + 16 * v184;
  v185 = *(_DWORD *)v124;
  if (*(_DWORD *)v124 == -1)
    goto LABEL_318;
  v186 = 0;
  v187 = 1;
  while (2)
  {
    if (v185 != (_DWORD)k)
    {
      if (v185 == -2)
        v186 = v124;
      v184 = (v184 + v187) & v181;
      v124 = v178 + 16 * v184;
      v185 = *(_DWORD *)v124;
      ++v187;
      if (*(_DWORD *)v124 != -1)
        continue;
      if (v186)
      {
        *(_DWORD *)v186 = -1;
        *(_QWORD *)(v186 + 8) = 0;
        --*(_DWORD *)(*v179 - 16);
        v124 = v186;
      }
LABEL_318:
      *(_DWORD *)v124 = k;
      *(_QWORD *)(v124 + 8) = v130;
      v4 = v1102;
      if (!*v179)
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v188 = *v179;
        if (!*v179)
          goto LABEL_325;
LABEL_320:
        v189 = (*(_DWORD *)(v188 - 16) + *(_DWORD *)(v188 - 12));
        v190 = *(unsigned int *)(v188 - 4);
        if (v190 <= 0x400)
          goto LABEL_321;
LABEL_326:
        if (v190 <= 2 * v189)
          goto LABEL_327;
        goto LABEL_256;
      }
      ++*(_DWORD *)(*v179 - 12);
      v188 = *v179;
      if (*v179)
        goto LABEL_320;
LABEL_325:
      v189 = *(unsigned int *)(v188 - 16);
      v190 = *(unsigned int *)(v188 - 4);
      if (v190 > 0x400)
        goto LABEL_326;
LABEL_321:
      if (3 * v190 > 4 * v189)
      {
LABEL_256:
        v34 = (unint64_t)v1130;
        v128 = *(_QWORD *)(v128 + 16);
        if (!v128)
          goto LABEL_221;
      }
      else
      {
        if (!(_DWORD)v190)
        {
          v191 = 8;
          goto LABEL_328;
        }
LABEL_327:
        v191 = (_DWORD)v190 << (6 * *(_DWORD *)(v188 - 12) >= (2 * v190));
LABEL_328:
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WGSL::RewriteGlobalVariables::Global *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v179, v191);
        v34 = (unint64_t)v1130;
        v128 = *(_QWORD *)(v128 + 16);
        if (!v128)
          goto LABEL_221;
      }
      goto LABEL_257;
    }
    break;
  }
  v225 = *(_QWORD *)v1130[16];
  if (v225)
    *(_DWORD *)v225 += 2;
  v226 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v124 + 8) + 16) + 80);
  if (v226)
    *(_DWORD *)v226 += 2;
  v34 = v4[10];
  if (v34)
    *(_DWORD *)v34 += 2;
  if (v225)
  {
    v227 = *(_DWORD *)(v225 + 4);
    if (v226)
      goto LABEL_417;
LABEL_420:
    v228 = 0;
    if (!v34)
      goto LABEL_421;
LABEL_418:
    v229 = *(_DWORD *)(v34 + 4);
  }
  else
  {
    v227 = 0;
    if (!v226)
      goto LABEL_420;
LABEL_417:
    v228 = *(_DWORD *)(v226 + 4);
    if (v34)
      goto LABEL_418;
LABEL_421:
    v229 = 0;
  }
  v230 = 0;
  v231 = v161;
  do
  {
    ++v230;
    v232 = v231 > 9;
    v231 /= 0xAu;
  }
  while (v232);
  v233 = 0;
  v234 = k;
  do
  {
    ++v233;
    v232 = v234 > 9;
    v234 /= 0xAu;
  }
  while (v232);
  if (v233 < 0)
    goto LABEL_1596;
  v235 = __OFADD__(v233, 1);
  v236 = v233 + 1;
  if (v235)
    goto LABEL_1596;
  v235 = __OFADD__(v236, 11);
  v237 = v236 + 11;
  v238 = v235;
  if (v230 < 0)
    goto LABEL_1596;
  if (v238)
    goto LABEL_1596;
  v235 = __OFADD__(v230, v237);
  v239 = v230 + v237;
  if (v235)
    goto LABEL_1596;
  v235 = __OFADD__(v239, 52);
  v240 = v239 + 52;
  v241 = v235;
  if (v229 < 0)
    goto LABEL_1596;
  if (v241)
    goto LABEL_1596;
  v235 = __OFADD__(v229, v240);
  v242 = v229 + v240;
  if (v235)
    goto LABEL_1596;
  v235 = __OFADD__(v242, 7);
  v243 = v242 + 7;
  v244 = v235;
  if (v228 < 0)
    goto LABEL_1596;
  if (v244)
    goto LABEL_1596;
  v235 = __OFADD__(v228, v243);
  v245 = v228 + v243;
  if (v235)
    goto LABEL_1596;
  v235 = __OFADD__(v245, 18);
  v246 = v245 + 18;
  v247 = v235;
  if (v227 < 0)
    goto LABEL_1596;
  if (v247)
    goto LABEL_1596;
  v235 = __OFADD__(v227, v246);
  v248 = v227 + v246;
  if (v235)
    goto LABEL_1596;
  v249 = (v248 + 13);
  if (__OFADD__(v248, 13))
    goto LABEL_1596;
  if ((!v225 || (*(_BYTE *)(v225 + 16) & 4) != 0)
    && (!v226 || (*(_BYTE *)(v226 + 16) & 4) != 0)
    && (!v34 || (*(_BYTE *)(v34 + 16) & 4) != 0))
  {
    if (v248 == -13)
      goto LABEL_476;
    if ((v249 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v249 + 20));
      v128 = v1168;
      if (v1168)
      {
        *(_DWORD *)v1168 = 2;
        *(_DWORD *)(v128 + 4) = v249;
        qmemcpy((void *)(v128 + 20), "entry point '", 13);
        *(_QWORD *)(v128 + 8) = v128 + 20;
        *(_DWORD *)(v128 + 16) = 4;
        v253 = (_BYTE *)(v128 + 33);
        if (!v225)
        {
          v812 = 0;
          goto LABEL_1397;
        }
        v123 = *(_QWORD *)(v225 + 8);
        v124 = *(unsigned int *)(v225 + 4);
        if ((*(_BYTE *)(v225 + 16) & 4) != 0)
        {
          if ((_DWORD)v124)
          {
            if ((_DWORD)v124 == 1)
              *v253 = *(_BYTE *)v123;
            else
              memcpy((void *)(v128 + 33), (const void *)v123, v124);
          }
          goto LABEL_1396;
        }
        v254 = &v253[v124];
        if (v124 < 0x10)
        {
          v255 = v128 + 33;
        }
        else
        {
          v255 = (unint64_t)&v253[v124 & 0xFFFFFFF0];
          v256 = (unsigned __int128 *)(v128 + 33);
          do
          {
            v257 = (unsigned __int128)vld2q_s8((const char *)v123);
            v123 += 32;
            *v256++ = v257;
          }
          while (v256 != (unsigned __int128 *)v255);
        }
        if ((_BYTE *)v255 == v254)
        {
LABEL_1396:
          v812 = *(unsigned int *)(v225 + 4);
LABEL_1397:
          v946 = &v253[v812];
          *(_OWORD *)v946 = *(_OWORD *)"' uses variables '";
          *((_WORD *)v946 + 8) = 10016;
          v947 = &v253[v812 + 18];
          if (!v226)
          {
            v952 = 0;
            goto LABEL_1422;
          }
          v123 = *(_QWORD *)(v226 + 8);
          v124 = *(unsigned int *)(v226 + 4);
          if ((*(_BYTE *)(v226 + 16) & 4) != 0)
          {
            if ((_DWORD)v124)
            {
              if ((_DWORD)v124 == 1)
                *v947 = *(_BYTE *)v123;
              else
                memcpy(v947, (const void *)v123, v124);
            }
            goto LABEL_1421;
          }
          v948 = &v947[v124];
          if (v124 < 0x10)
          {
            v949 = (unint64_t)v947;
          }
          else
          {
            v949 = (unint64_t)&v947[v124 & 0xFFFFFFF0];
            v950 = (unsigned __int128 *)v947;
            do
            {
              v951 = (unsigned __int128)vld2q_s8((const char *)v123);
              v123 += 32;
              *v950++ = v951;
            }
            while (v950 != (unsigned __int128 *)v949);
          }
          if ((_BYTE *)v949 == v948)
          {
LABEL_1421:
            v952 = *(unsigned int *)(v226 + 4);
LABEL_1422:
            v960 = &v947[v952];
            *(_DWORD *)((char *)v960 + 3) = 656434286;
            *v960 = 1851858983;
            v961 = &v947[v952 + 7];
            if (!v34)
            {
              v966 = 0;
              goto LABEL_1447;
            }
            v123 = *(_QWORD *)(v34 + 8);
            v124 = *(unsigned int *)(v34 + 4);
            if ((*(_BYTE *)(v34 + 16) & 4) != 0)
            {
              if ((_DWORD)v124)
              {
                if ((_DWORD)v124 == 1)
                  *v961 = *(_BYTE *)v123;
                else
                  memcpy(v961, (const void *)v123, v124);
              }
              goto LABEL_1446;
            }
            v962 = &v961[v124];
            if (v124 < 0x10)
            {
              v963 = (unint64_t)v961;
            }
            else
            {
              v963 = (unint64_t)&v961[v124 & 0xFFFFFFF0];
              v964 = (unsigned __int128 *)v961;
              do
              {
                v965 = (unsigned __int128)vld2q_s8((const char *)v123);
                v123 += 32;
                *v964++ = v965;
              }
              while (v964 != (unsigned __int128 *)v963);
            }
            if ((_BYTE *)v963 == v962)
            {
LABEL_1446:
              v966 = *(unsigned int *)(v34 + 4);
LABEL_1447:
              v974 = 0;
              v975 = &v961[v966];
              qmemcpy(v975, "', both which use the same resource binding: @group(", 52);
              v976 = v161;
              do
              {
                *((_BYTE *)&v1169 + v974-- + 4) = (v976 % 0xA) | 0x30;
                v232 = v976 > 9;
                v976 /= 0xAu;
              }
              while (v232);
              v977 = v975 + 52;
              if (v974 + 14 <= 13)
                memcpy(v977, (char *)&v1169 + v974 + 5, -v974);
              v978 = 0;
              do
              {
                ++v978;
                v232 = v161 > 9;
                v161 /= 0xAu;
              }
              while (v232);
              v979 = 0;
              v980 = &v977[v978];
              *(_QWORD *)v980 = *(_QWORD *)") @binding(";
              *(_DWORD *)(v980 + 7) = 677867113;
              v981 = k;
              do
              {
                *((_BYTE *)&v1169 + v979-- + 4) = (v981 % 0xA) | 0x30;
                v232 = v981 > 9;
                v981 /= 0xAu;
              }
              while (v232);
              v982 = v980 + 11;
              if (v979 + 14 <= 13)
                memcpy(v982, (char *)&v1169 + v979 + 5, -v979);
              v983 = 0;
              do
              {
                ++v983;
                v232 = k > 9;
                LODWORD(k) = k / 0xA;
              }
              while (v232);
              *((_BYTE *)v982 + v983) = 41;
              goto LABEL_1510;
            }
            v967 = v812 + v952 + v128 + v124 - v963 + 58;
            if (v967 < 8
              || ((v968 = v952 + v812 + v128 + v124, v963 < v123 - 2 * v963 + 2 * v968 + 116)
                ? (v969 = v123 >= v968 + 58)
                : (v969 = 1),
                  !v969))
            {
              v971 = (_BYTE *)v963;
              v972 = (char *)v123;
              goto LABEL_1443;
            }
            if (v967 >= 0x20)
            {
              v970 = v967 & 0xFFFFFFFFFFFFFFE0;
              v1062 = (int8x16_t *)(v123 + 32);
              v1063 = (int8x16_t *)(v963 + 16);
              v1064 = v967 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v1066 = v1062[-2];
                v1065 = v1062[-1];
                v1068 = *v1062;
                v1067 = v1062[1];
                v1062 += 4;
                v1063[-1] = vuzp1q_s8(v1066, v1065);
                *v1063 = vuzp1q_s8(v1068, v1067);
                v1063 += 2;
                v1064 -= 32;
              }
              while (v1064);
              if (v967 == v970)
                goto LABEL_1446;
              if ((v967 & 0x18) == 0)
              {
                v972 = (char *)(v123 + 2 * v970);
                v971 = (_BYTE *)(v963 + v970);
                do
                {
LABEL_1443:
                  v973 = *v972;
                  v972 += 2;
                  *v971++ = v973;
                }
                while (v971 != v962);
                goto LABEL_1446;
              }
            }
            else
            {
              v970 = 0;
            }
            v971 = (_BYTE *)(v963 + (v967 & 0xFFFFFFFFFFFFFFF8));
            v972 = (char *)(v123 + 2 * (v967 & 0xFFFFFFFFFFFFFFF8));
            v1069 = (int16x8_t *)(v123 + 2 * v970);
            v1070 = (int8x8_t *)(v963 + v970);
            v1071 = v970 - (v967 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v1072 = *v1069++;
              *v1070++ = vmovn_s16(v1072);
              v1071 += 8;
            }
            while (v1071);
            if (v967 == (v967 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_1446;
            goto LABEL_1443;
          }
          v953 = v812 + v128 + v124;
          v954 = v953 - v949 + 51;
          if (v954 < 8 || (v949 < v123 - 2 * v949 + 2 * v953 + 102 ? (v955 = v123 >= v953 + 51) : (v955 = 1), !v955))
          {
            v957 = (_BYTE *)v949;
            v958 = (char *)v123;
            goto LABEL_1418;
          }
          if (v954 >= 0x20)
          {
            v956 = v954 & 0xFFFFFFFFFFFFFFE0;
            v1051 = (int8x16_t *)(v123 + 32);
            v1052 = (int8x16_t *)(v949 + 16);
            v1053 = v954 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v1055 = v1051[-2];
              v1054 = v1051[-1];
              v1057 = *v1051;
              v1056 = v1051[1];
              v1051 += 4;
              v1052[-1] = vuzp1q_s8(v1055, v1054);
              *v1052 = vuzp1q_s8(v1057, v1056);
              v1052 += 2;
              v1053 -= 32;
            }
            while (v1053);
            if (v954 == v956)
              goto LABEL_1421;
            if ((v954 & 0x18) == 0)
            {
              v958 = (char *)(v123 + 2 * v956);
              v957 = (_BYTE *)(v949 + v956);
              do
              {
LABEL_1418:
                v959 = *v958;
                v958 += 2;
                *v957++ = v959;
              }
              while (v957 != v948);
              goto LABEL_1421;
            }
          }
          else
          {
            v956 = 0;
          }
          v957 = (_BYTE *)(v949 + (v954 & 0xFFFFFFFFFFFFFFF8));
          v958 = (char *)(v123 + 2 * (v954 & 0xFFFFFFFFFFFFFFF8));
          v1058 = (int16x8_t *)(v123 + 2 * v956);
          v1059 = (int8x8_t *)(v949 + v956);
          v1060 = v956 - (v954 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v1061 = *v1058++;
            *v1059++ = vmovn_s16(v1061);
            v1060 += 8;
          }
          while (v1060);
          if (v954 == (v954 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_1421;
          goto LABEL_1418;
        }
        v939 = v128 + v124;
        v940 = v128 + v124 - v255 + 33;
        if (v940 < 8 || (v255 < v123 - 2 * v255 + 2 * v939 + 66 ? (v941 = v123 >= v939 + 33) : (v941 = 1), !v941))
        {
          v943 = (_BYTE *)v255;
          v944 = (char *)v123;
          goto LABEL_1393;
        }
        if (v940 >= 0x20)
        {
          v942 = v940 & 0xFFFFFFFFFFFFFFE0;
          v1040 = (int8x16_t *)(v123 + 32);
          v1041 = (int8x16_t *)(v255 + 16);
          v1042 = v940 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v1044 = v1040[-2];
            v1043 = v1040[-1];
            v1046 = *v1040;
            v1045 = v1040[1];
            v1040 += 4;
            v1041[-1] = vuzp1q_s8(v1044, v1043);
            *v1041 = vuzp1q_s8(v1046, v1045);
            v1041 += 2;
            v1042 -= 32;
          }
          while (v1042);
          if (v940 == v942)
            goto LABEL_1396;
          if ((v940 & 0x18) == 0)
          {
            v944 = (char *)(v123 + 2 * v942);
            v943 = (_BYTE *)(v255 + v942);
            do
            {
LABEL_1393:
              v945 = *v944;
              v944 += 2;
              *v943++ = v945;
            }
            while (v943 != v254);
            goto LABEL_1396;
          }
        }
        else
        {
          v942 = 0;
        }
        v943 = (_BYTE *)(v255 + (v940 & 0xFFFFFFFFFFFFFFF8));
        v944 = (char *)(v123 + 2 * (v940 & 0xFFFFFFFFFFFFFFF8));
        v1047 = (int16x8_t *)(v123 + 2 * v942);
        v1048 = (int8x8_t *)(v255 + v942);
        v1049 = v942 - (v940 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v1050 = *v1047++;
          *v1048++ = vmovn_s16(v1050);
          v1049 += 8;
        }
        while (v1049);
        if (v940 == (v940 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_1396;
        goto LABEL_1393;
      }
    }
LABEL_1596:
    __break(0xC471u);
    JUMPOUT(0x1824A7E9CLL);
  }
  if (v248 == -13)
  {
LABEL_476:
    v128 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_1510;
  }
  if (v249 > 0x7FFFFFEF)
    goto LABEL_1596;
  WTF::tryFastCompactMalloc((WTF *)(2 * v249 + 20));
  v128 = v1168;
  if (!v1168)
    goto LABEL_1596;
  *(_DWORD *)v1168 = 2;
  *(_DWORD *)(v128 + 4) = v249;
  *(_OWORD *)(v128 + 20) = xmmword_18260F870;
  *(_QWORD *)(v128 + 8) = v128 + 20;
  *(_DWORD *)(v128 + 16) = 0;
  v250 = (_WORD *)(v128 + 46);
  *(_QWORD *)(v128 + 36) = 0x200074006E0069;
  *(_WORD *)(v128 + 44) = 39;
  if (!v225)
  {
    v308 = 0;
    goto LABEL_1322;
  }
  v251 = *(int8x16_t **)(v225 + 8);
  v252 = *(unsigned int *)(v225 + 4);
  if ((*(_BYTE *)(v225 + 16) & 4) != 0)
  {
    v484 = &v250[v252];
    if (v252 < 0x40)
    {
      v485 = v128 + 46;
    }
    else
    {
      v485 = (unint64_t)&v250[v252 & 0xFFFFFFC0];
      v486 = 0uLL;
      v487 = (char *)(v128 + 46);
      do
      {
        v1182.val[0] = *v251;
        v488 = v251[1];
        v1186.val[0] = v251[2];
        v489 = v251[3];
        v251 += 4;
        v490 = v489;
        v1186.val[1] = 0uLL;
        v1190.val[0] = v488;
        v1182.val[1] = 0uLL;
        v491 = v487;
        vst2q_s8(v491, v1182);
        v491 += 32;
        v1190.val[1] = 0uLL;
        vst2q_s8(v491, v1190);
        v492 = v487 + 64;
        vst2q_s8(v492, v1186);
        v493 = v487 + 96;
        vst2q_s8(v493, *(int8x16x2_t *)(&v486 - 1));
        v487 += 128;
      }
      while (v487 != (char *)v485);
    }
    if ((_WORD *)v485 == v484)
      goto LABEL_1321;
    v868 = v128 + 2 * v252 - v485 + 44;
    if (v868 < 0xE
      || (v485 < (unint64_t)v251->u64 + (v868 >> 1) + 1
        ? (v869 = (unint64_t)v251 >= (v868 & 0xFFFFFFFFFFFFFFFELL) + v485 + 2)
        : (v869 = 1),
          !v869))
    {
      v872 = (_WORD *)v485;
      v873 = v251;
      goto LABEL_1318;
    }
    v870 = (v868 >> 1) + 1;
    if (v868 >= 0x3E)
    {
      v871 = v870 & 0xFFFFFFFFFFFFFFE0;
      v996 = (uint8x8_t *)&v251[1];
      v997 = (uint16x8_t *)(v485 + 32);
      v998 = v870 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v999 = *(uint8x16_t *)v996[-2].i8;
        v1000 = vmovl_u8(*v996);
        v1001 = vmovl_high_u8(*(uint8x16_t *)v996->i8);
        v997[-2] = vmovl_u8(*(uint8x8_t *)v999.i8);
        v997[-1] = vmovl_high_u8(v999);
        *v997 = v1000;
        v997[1] = v1001;
        v997 += 4;
        v996 += 4;
        v998 -= 32;
      }
      while (v998);
      if (v870 == v871)
        goto LABEL_1321;
      if ((v870 & 0x18) == 0)
      {
        v873 = (int8x16_t *)((char *)v251 + v871);
        v872 = (_WORD *)(v485 + 2 * v871);
        goto LABEL_1318;
      }
    }
    else
    {
      v871 = 0;
    }
    v872 = (_WORD *)(v485 + 2 * (v870 & 0xFFFFFFFFFFFFFFF8));
    v873 = (int8x16_t *)((char *)v251 + (v870 & 0xFFFFFFFFFFFFFFF8));
    v1002 = (uint8x8_t *)&v251->i8[v871];
    v1003 = (uint16x8_t *)(v485 + 2 * v871);
    v1004 = v871 - (v870 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v1005 = *v1002++;
      *v1003++ = vmovl_u8(v1005);
      v1004 += 8;
    }
    while (v1004);
    if (v870 == (v870 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_1321;
    do
    {
LABEL_1318:
      v874 = v873->u8[0];
      v873 = (int8x16_t *)((char *)v873 + 1);
      *v872++ = v874;
    }
    while (v872 != v484);
    goto LABEL_1321;
  }
  if ((_DWORD)v252)
  {
    if ((_DWORD)v252 == 1)
      *v250 = v251->i16[0];
    else
      memcpy((void *)(v128 + 46), v251, 2 * v252);
  }
LABEL_1321:
  v308 = *(unsigned int *)(v225 + 4);
LABEL_1322:
  v875 = &v250[v308];
  *(_OWORD *)v875 = xmmword_18260F880;
  *((_OWORD *)v875 + 1) = xmmword_18260F890;
  *((_DWORD *)v875 + 8) = 2555936;
  v876 = (char *)(v875 + 18);
  if (!v226)
  {
    v879 = 0;
    goto LABEL_1342;
  }
  v877 = *(int8x16_t **)(v226 + 8);
  v878 = *(unsigned int *)(v226 + 4);
  if ((*(_BYTE *)(v226 + 16) & 4) != 0)
  {
    v880 = &v876[2 * v878];
    if (v878 < 0x40)
    {
      v881 = (unint64_t)v876;
    }
    else
    {
      v881 = (unint64_t)&v876[2 * (v878 & 0xFFFFFFC0)];
      v882 = 0uLL;
      v883 = v876;
      do
      {
        v1184.val[0] = *v877;
        v884 = v877[1];
        v1188.val[0] = v877[2];
        v885 = v877[3];
        v877 += 4;
        v886 = v885;
        v1188.val[1] = 0uLL;
        v1192.val[0] = v884;
        v1184.val[1] = 0uLL;
        v887 = v883;
        vst2q_s8(v887, v1184);
        v887 += 32;
        v1192.val[1] = 0uLL;
        vst2q_s8(v887, v1192);
        v888 = v883 + 64;
        vst2q_s8(v888, v1188);
        v889 = v883 + 96;
        vst2q_s8(v889, *(int8x16x2_t *)(&v882 - 1));
        v883 += 128;
      }
      while (v883 != (char *)v881);
    }
    if ((char *)v881 == v880)
      goto LABEL_1341;
    v890 = v128 + 2 * (v308 + v878) - v881 + 80;
    if (v890 < 0xE
      || v881 < (unint64_t)v877->u64 + (v890 >> 1) + 1
      && (unint64_t)v877 < (v890 & 0xFFFFFFFFFFFFFFFELL) + v881 + 2)
    {
      v891 = (char *)v881;
      v892 = v877;
      goto LABEL_1338;
    }
    v984 = (v890 >> 1) + 1;
    if (v890 >= 0x3E)
    {
      v985 = v984 & 0xFFFFFFFFFFFFFFE0;
      v986 = (uint8x8_t *)&v877[1];
      v987 = (uint16x8_t *)(v881 + 32);
      v988 = v984 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v989 = *(uint8x16_t *)v986[-2].i8;
        v990 = vmovl_u8(*v986);
        v991 = vmovl_high_u8(*(uint8x16_t *)v986->i8);
        v987[-2] = vmovl_u8(*(uint8x8_t *)v989.i8);
        v987[-1] = vmovl_high_u8(v989);
        *v987 = v990;
        v987[1] = v991;
        v987 += 4;
        v986 += 4;
        v988 -= 32;
      }
      while (v988);
      if (v984 == v985)
        goto LABEL_1341;
      if ((v984 & 0x18) == 0)
      {
        v892 = (int8x16_t *)((char *)v877 + v985);
        v891 = (char *)(v881 + 2 * v985);
        goto LABEL_1338;
      }
    }
    else
    {
      v985 = 0;
    }
    v891 = (char *)(v881 + 2 * (v984 & 0xFFFFFFFFFFFFFFF8));
    v892 = (int8x16_t *)((char *)v877 + (v984 & 0xFFFFFFFFFFFFFFF8));
    v992 = (uint8x8_t *)&v877->i8[v985];
    v993 = (uint16x8_t *)(v881 + 2 * v985);
    v994 = v985 - (v984 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v995 = *v992++;
      *v993++ = vmovl_u8(v995);
      v994 += 8;
    }
    while (v994);
    if (v984 == (v984 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_1341;
    do
    {
LABEL_1338:
      v893 = v892->u8[0];
      v892 = (int8x16_t *)((char *)v892 + 1);
      *(_WORD *)v891 = v893;
      v891 += 2;
    }
    while (v891 != v880);
    goto LABEL_1341;
  }
  if ((_DWORD)v878)
  {
    if ((_DWORD)v878 == 1)
    {
      *(_WORD *)v876 = v877->i16[0];
    }
    else
    {
      v894 = v308;
      memcpy(v876, v877, 2 * v878);
      v308 = v894;
    }
  }
LABEL_1341:
  v879 = *(unsigned int *)(v226 + 4);
LABEL_1342:
  v895 = &v876[2 * v879];
  *(_QWORD *)v895 = 0x6E006100200027;
  *((_DWORD *)v895 + 2) = 2097252;
  *((_WORD *)v895 + 6) = 39;
  v896 = v895 + 14;
  if (!v34)
  {
    v899 = 0;
    goto LABEL_1367;
  }
  v897 = *(int8x16_t **)(v34 + 8);
  v898 = *(unsigned int *)(v34 + 4);
  if ((*(_BYTE *)(v34 + 16) & 4) != 0)
  {
    v900 = &v896[2 * v898];
    if (v898 < 0x40)
    {
      v901 = (unint64_t)v896;
    }
    else
    {
      v901 = (unint64_t)&v896[2 * (v898 & 0xFFFFFFC0)];
      v902 = 0uLL;
      v903 = v896;
      do
      {
        v1185.val[0] = *v897;
        v904 = v897[1];
        v1189.val[0] = v897[2];
        v905 = v897[3];
        v897 += 4;
        v906 = v905;
        v1189.val[1] = 0uLL;
        v1193.val[0] = v904;
        v1185.val[1] = 0uLL;
        v907 = v903;
        vst2q_s8(v907, v1185);
        v907 += 32;
        v1193.val[1] = 0uLL;
        vst2q_s8(v907, v1193);
        v908 = v903 + 64;
        vst2q_s8(v908, v1189);
        v909 = v903 + 96;
        vst2q_s8(v909, *(int8x16x2_t *)(&v902 - 1));
        v903 += 128;
      }
      while (v903 != (char *)v901);
    }
    if ((char *)v901 == v900)
      goto LABEL_1366;
    v910 = v128 + 2 * (v308 + v879 + v898) - v901 + 94;
    if (v910 < 0xE
      || (v901 < (unint64_t)v897->u64 + (v910 >> 1) + 1
        ? (v911 = (unint64_t)v897 >= (v910 & 0xFFFFFFFFFFFFFFFELL) + v901 + 2)
        : (v911 = 1),
          !v911))
    {
      v914 = (char *)v901;
      v915 = v897;
      goto LABEL_1363;
    }
    v912 = (v910 >> 1) + 1;
    if (v910 >= 0x3E)
    {
      v913 = v912 & 0xFFFFFFFFFFFFFFE0;
      v1006 = (uint8x8_t *)&v897[1];
      v1007 = (uint16x8_t *)(v901 + 32);
      v1008 = v912 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v1009 = *(uint8x16_t *)v1006[-2].i8;
        v1010 = vmovl_u8(*v1006);
        v1011 = vmovl_high_u8(*(uint8x16_t *)v1006->i8);
        v1007[-2] = vmovl_u8(*(uint8x8_t *)v1009.i8);
        v1007[-1] = vmovl_high_u8(v1009);
        *v1007 = v1010;
        v1007[1] = v1011;
        v1007 += 4;
        v1006 += 4;
        v1008 -= 32;
      }
      while (v1008);
      if (v912 == v913)
        goto LABEL_1366;
      if ((v912 & 0x18) == 0)
      {
        v915 = (int8x16_t *)((char *)v897 + v913);
        v914 = (char *)(v901 + 2 * v913);
        goto LABEL_1363;
      }
    }
    else
    {
      v913 = 0;
    }
    v914 = (char *)(v901 + 2 * (v912 & 0xFFFFFFFFFFFFFFF8));
    v915 = (int8x16_t *)((char *)v897 + (v912 & 0xFFFFFFFFFFFFFFF8));
    v1012 = (uint8x8_t *)&v897->i8[v913];
    v1013 = (uint16x8_t *)(v901 + 2 * v913);
    v1014 = v913 - (v912 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v1015 = *v1012++;
      *v1013++ = vmovl_u8(v1015);
      v1014 += 8;
    }
    while (v1014);
    if (v912 == (v912 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_1366;
    do
    {
LABEL_1363:
      v916 = v915->u8[0];
      v915 = (int8x16_t *)((char *)v915 + 1);
      *(_WORD *)v914 = v916;
      v914 += 2;
    }
    while (v914 != v900);
    goto LABEL_1366;
  }
  if ((_DWORD)v898)
  {
    if ((_DWORD)v898 == 1)
    {
      *(_WORD *)v896 = v897->i16[0];
    }
    else
    {
      v1139 = v308;
      memcpy(v896, v897, 2 * v898);
      v308 = v1139;
    }
  }
LABEL_1366:
  v899 = *(unsigned int *)(v34 + 4);
LABEL_1367:
  v917 = 0;
  v918 = &v896[2 * v899];
  *(_WORD *)v918 = 39;
  *(_OWORD *)(v918 + 2) = xmmword_18260F8A0;
  *(_OWORD *)(v918 + 18) = xmmword_18260F8B0;
  *(_OWORD *)(v918 + 34) = xmmword_18260F8C0;
  *(_OWORD *)(v918 + 50) = xmmword_18260F8D0;
  *(_OWORD *)(v918 + 66) = xmmword_18260F8E0;
  v919 = 13;
  *(_DWORD *)(v918 + 98) = 7340149;
  v920 = 1;
  *((_WORD *)v918 + 51) = 40;
  v921 = v161;
  *(_OWORD *)(v918 + 82) = xmmword_18260F8F0;
  do
  {
    v922 = v919;
    v923 = v917;
    v924 = v920;
    --v919;
    *((_BYTE *)&v1168 + v919) = (v921 % 0xA) | 0x30;
    ++v917;
    ++v920;
    v232 = v921 > 9;
    v921 /= 0xAu;
  }
  while (v232);
  v925 = v918 + 104;
  if (v922 <= 13)
  {
    v926 = v923 + 1;
    if ((unint64_t)(v923 + 1) < 8)
    {
      v927 = v919;
      v928 = v925;
      goto LABEL_1487;
    }
    if (v926 >= 0x20)
    {
      v929 = v926 & 0xFFFFFFFFFFFFFFE0;
      v930 = (uint8x8_t *)((char *)&v1168 - v923 + 28);
      v931 = (uint16x8_t *)(2 * v899 + 2 * v879 + 2 * v308 + v128 + 232);
      v932 = v924 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v933 = *(uint8x16_t *)v930[-2].i8;
        v934 = vmovl_u8(*v930);
        v935 = vmovl_high_u8(*(uint8x16_t *)v930->i8);
        v931[-2] = vmovl_u8(*(uint8x8_t *)v933.i8);
        v931[-1] = vmovl_high_u8(v933);
        *v931 = v934;
        v931[1] = v935;
        v931 += 4;
        v930 += 4;
        v932 -= 32;
      }
      while (v932);
      if (v926 != v929)
      {
        if ((v926 & 0x18) == 0)
        {
          v928 = &v925[v929];
          v927 = v919 + v929;
          goto LABEL_1487;
        }
        goto LABEL_1378;
      }
    }
    else
    {
      v929 = 0;
LABEL_1378:
      v927 = v919 + (v926 & 0xFFFFFFFFFFFFFFF8);
      v928 = &v925[v926 & 0xFFFFFFFFFFFFFFF8];
      v936 = (uint16x8_t *)(2 * v899 + 2 * v879 + 2 * v308 + 2 * v929 + v128 + 200);
      v937 = v929 - (v924 & 0xFFFFFFFFFFFFFFF8);
      v938 = (char *)&v1168 + v929;
      do
      {
        *v936++ = vmovl_u8(*(uint8x8_t *)&v938[v919]);
        v938 += 8;
        v937 += 8;
      }
      while (v937);
      if (v926 != (v926 & 0xFFFFFFFFFFFFFFF8))
      {
        do
LABEL_1487:
          *v928++ = *((unsigned __int8 *)&v1168 + v927++);
        while (v927 != 13);
      }
    }
  }
  v1016 = 0;
  do
  {
    ++v1016;
    v232 = v161 > 9;
    v161 /= 0xAu;
  }
  while (v232);
  v1017 = 0;
  v1018 = &v925[v1016];
  *v1018 = 41;
  *(_OWORD *)(v1018 + 1) = xmmword_18260F900;
  v1019 = 13;
  *(_DWORD *)(v1018 + 9) = 2621543;
  v124 = 1;
  LODWORD(v123) = k;
  do
  {
    v1020 = v1019;
    v1021 = v1017;
    v1022 = v124;
    --v1019;
    *((_BYTE *)&v1168 + v1019) = (v123 % 0xA) | 0x30;
    ++v1017;
    ++v124;
    v232 = v123 > 9;
    v123 = v123 / 0xAuLL;
  }
  while (v232);
  v1023 = v1018 + 11;
  if (v1020 <= 13)
  {
    v1024 = v1021 + 1;
    if ((unint64_t)(v1021 + 1) < 8)
    {
      v1025 = v1019;
      v1026 = v1023;
      goto LABEL_1506;
    }
    v1027 = 2 * v899;
    if (v1024 >= 0x20)
    {
      v1028 = v1024 & 0xFFFFFFFFFFFFFFE0;
      v1029 = (uint8x8_t *)((char *)&v1168 - v1021 + 28);
      v1030 = (uint16x8_t *)(v1027 + 2 * v879 + 2 * v308 + v128 + 2 * v1016 + 254);
      v1031 = v1022 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v1032 = *(uint8x16_t *)v1029[-2].i8;
        v1033 = vmovl_u8(*v1029);
        v1034 = vmovl_high_u8(*(uint8x16_t *)v1029->i8);
        v1030[-2] = vmovl_u8(*(uint8x8_t *)v1032.i8);
        v1030[-1] = vmovl_high_u8(v1032);
        *v1030 = v1033;
        v1030[1] = v1034;
        v1030 += 4;
        v1029 += 4;
        v1031 -= 32;
      }
      while (v1031);
      if (v1024 != v1028)
      {
        if ((v1024 & 0x18) == 0)
        {
          v1026 = &v1023[v1028];
          v1025 = v1019 + v1028;
          goto LABEL_1506;
        }
        goto LABEL_1501;
      }
    }
    else
    {
      v1028 = 0;
LABEL_1501:
      v1025 = v1019 + (v1024 & 0xFFFFFFFFFFFFFFF8);
      v1026 = &v1023[v1024 & 0xFFFFFFFFFFFFFFF8];
      v1035 = (uint16x8_t *)(v1027 + 2 * v879 + 2 * v308 + 2 * v1028 + v128 + 2 * v1016 + 222);
      v1036 = v1028 - (v1022 & 0xFFFFFFFFFFFFFFF8);
      v1037 = (char *)&v1168 + v1028;
      do
      {
        *v1035++ = vmovl_u8(*(uint8x8_t *)&v1037[v1019]);
        v1037 += 8;
        v1036 += 8;
      }
      while (v1036);
      if (v1024 != (v1024 & 0xFFFFFFFFFFFFFFF8))
      {
        do
LABEL_1506:
          *v1026++ = *((unsigned __int8 *)&v1168 + v1025++);
        while (v1025 != 13);
      }
    }
  }
  v1038 = 0;
  do
  {
    ++v1038;
    v232 = k > 9;
    LODWORD(k) = k / 0xA;
  }
  while (v232);
  v1023[v1038] = 41;
LABEL_1510:
  v131 = (WTF *)v4[1];
  k = v4[2];
  v1148 = v128;
  *(_QWORD *)&v1149 = v131;
  *((_QWORD *)&v1149 + 1) = k;
  v1150 = 1;
  v4 = v1102;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v34 -= 2;
  }
  v1127 = HIDWORD(k);
  if (v226)
  {
    if (*(_DWORD *)v226 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v226 -= 2;
  }
  if (v225)
  {
    if (*(_DWORD *)v225 != 2)
    {
      v132 = 0;
      *(_DWORD *)v225 -= 2;
      v130 = 1;
      v1039 = v1160[1];
      if (!v1160[1])
        goto LABEL_227;
LABEL_226:
      WTF::fastFree(v1039, (void *)v123);
      goto LABEL_227;
    }
    WTF::StringImpl::destroy();
  }
  v132 = 0;
  v130 = 1;
  v1039 = v1160[1];
  if (v1160[1])
    goto LABEL_226;
LABEL_227:
  v133 = (unint64_t)v1160[0];
  if (v1160[0])
  {
    v34 = *((unsigned int *)v1160[0] - 1);
    if ((_DWORD)v34)
    {
      v134 = (_QWORD *)((char *)v1160[0] + 8);
      do
      {
        if (*((_DWORD *)v134 - 2) != -2 && *v134)
          WTF::fastFree((WTF *)(*v134 - 16), (void *)v123);
        v134 += 2;
        --v34;
      }
      while (v34);
    }
    WTF::fastFree((WTF *)(v133 - 16), (void *)v123);
  }
  if ((v132 & 1) == 0)
  {
    WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded((uint64_t)v1130, (_OWORD *)(*v4 + 8), *v4);
    if ((v130 & 1) == 0)
      goto LABEL_1566;
    if (v128)
      *(_DWORD *)v128 += 2;
    *(_QWORD *)a4 = v128;
    *(_OWORD *)(a4 + 8) = v1149;
    v138 = 1;
    *(_BYTE *)(a4 + 24) = 1;
    return ((uint64_t (*)(WTF **, uint64_t *))off_1E0FD4168[v138])(v1160, &v1148);
  }
  v1144 = 0;
  if (!v128 || (v130 = *(unsigned int *)(v128 - 12), !(_DWORD)v130))
  {
    v34 = 0;
    v1145 = 0;
    v1146 = 0;
    v139 = v1127;
    v1147 = v1127;
    if (!(_DWORD)v1127)
      goto LABEL_548;
LABEL_246:
    if (v139 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1824A7EE4);
    }
    v140 = (WTF *)WTF::fastMalloc((WTF *)(8 * v139));
    v1146 = v139;
    v1145 = v140;
    memcpy(v140, v131, 8 * v139);
    k = (unint64_t)v1130;
    if (!v1130[18])
      goto LABEL_549;
    goto LABEL_248;
  }
  v135 = (v130 - 1) | ((v130 - 1) >> 1) | ((((_DWORD)v130 - 1) | ((v130 - 1) >> 1)) >> 2);
  v136 = v135 | (v135 >> 4) | ((v135 | (v135 >> 4)) >> 8);
  v137 = (v136 | HIWORD(v136)) + 1;
  if (v137 > 0x400)
  {
    if (v137 <= 2 * v130)
      goto LABEL_479;
  }
  else
  {
    if (3 * v137 > 4 * v130)
    {
LABEL_480:
      v258 = (double)v130;
      v259 = (double)v137;
      v260 = 0.604166667;
      goto LABEL_482;
    }
LABEL_479:
    LODWORD(v137) = 2 * v137;
    if (v137 <= 0x400)
      goto LABEL_480;
  }
  v258 = (double)v130;
  v259 = (double)v137;
  v260 = 0.416666667;
LABEL_482:
  if (v259 * v260 <= v258)
    LODWORD(v137) = 2 * v137;
  v1122 = v131;
  if (v137 <= 8)
    v261 = 8;
  else
    v261 = v137;
  v262 = 16 * v261;
  v263 = (_DWORD *)WTF::fastMalloc((WTF *)(v262 + 16));
  v264 = v263;
  v265 = 0;
  v34 = (unint64_t)(v263 + 4);
  do
  {
    v266 = &v263[v265 / 4];
    v266[4] = -1;
    *((_QWORD *)v266 + 3) = 0;
    v265 += 16;
  }
  while (v262 != v265);
  v1144 = v263 + 4;
  v263[2] = v261 - 1;
  v263[3] = v261;
  *v263 = 0;
  v263[1] = v130;
  v267 = *(unsigned int *)(v128 - 4);
  v268 = v128 + 16 * v267;
  v269 = v268;
  if (*(_DWORD *)(v128 - 12))
  {
    v269 = v128;
    if ((_DWORD)v267)
    {
      v270 = 16 * v267;
      v269 = v128;
      while (*(_DWORD *)v269 >= 0xFFFFFFFE)
      {
        v269 += 16;
        v270 -= 16;
        if (!v270)
        {
          v269 = v268;
          break;
        }
      }
    }
  }
  v130 = v128 + 16 * *(unsigned int *)(v128 - 4);
  if (v130 != v269)
  {
    v128 = 0xFFFFFFFFLL;
    v1132 = v130;
    do
    {
      v271 = 0;
      v272 = *(_DWORD *)v269;
      v273 = 9 * ((v272 + ~(v272 << 15)) ^ ((v272 + ~(v272 << 15)) >> 10));
      v274 = ((v273 ^ (v273 >> 6)) + ~((v273 ^ (v273 >> 6)) << 11)) ^ (((v273 ^ (v273 >> 6))
                                                                      + ~((v273 ^ (v273 >> 6)) << 11)) >> 16);
      do
      {
        v275 = v274 & v264[2];
        v274 = ++v271 + v275;
      }
      while (*(_DWORD *)(v34 + 16 * v275) != -1);
      v276 = (_DWORD *)(v34 + 16 * v275);
      *v276 = v272;
      v277 = (uint64_t *)(v276 + 2);
      v278 = *(_DWORD **)(v269 + 8);
      if (v278)
      {
        v279 = v129;
        v280 = *(v278 - 3);
        if ((_DWORD)v280)
        {
          v281 = (v280 - 1) | ((v280 - 1) >> 1) | ((((_DWORD)v280 - 1) | ((v280 - 1) >> 1)) >> 2);
          v282 = v281 | (v281 >> 4) | ((v281 | (v281 >> 4)) >> 8);
          v283 = (v282 | HIWORD(v282)) + 1;
          if (v283 > 0x400)
          {
            if (v283 <= 2 * v280)
              goto LABEL_507;
          }
          else
          {
            if (3 * v283 > 4 * v280)
            {
LABEL_508:
              if ((double)v283 * 0.604166667 > (double)v280)
              {
LABEL_512:
                if (v283 <= 8)
                  v284 = 8;
                else
                  v284 = v283;
                v285 = 16 * v284;
                v286 = (_DWORD *)WTF::fastMalloc((WTF *)(v285 + 16));
                v287 = 0;
                v278 = v286 + 4;
                v288 = v284 & 0xFFFFFFFE;
                v289 = v285 & 0xFFFFFFFE0;
                do
                {
                  v290 = &v286[v287 / 4];
                  v290[4] = -1;
                  v290[8] = -1;
                  *((_QWORD *)v290 + 3) = 0;
                  *((_QWORD *)v290 + 5) = 0;
                  v287 += 32;
                }
                while (v289 != v287);
                v291 = v284 - v288;
                if (v284 != v288)
                {
                  v292 = (_QWORD *)((char *)v286 + v289 + 24);
                  do
                  {
                    *((_DWORD *)v292 - 2) = -1;
                    *v292 = 0;
                    v292 += 2;
                    --v291;
                  }
                  while (v291);
                }
                v286[2] = v284 - 1;
                v286[3] = v284;
                *v286 = 0;
                v286[1] = v280;
                v293 = *(_DWORD **)(v269 + 8);
                v130 = v1132;
                if (!v293)
                {
                  v296 = 0;
                  v129 = v279;
                  v295 = 0;
                  goto LABEL_528;
                }
                v294 = *(v293 - 1);
                v295 = &v293[4 * v294];
                v129 = v279;
                if (*(v293 - 3))
                {
                  v296 = *(_DWORD **)(v269 + 8);
                  if ((_DWORD)v294)
                  {
                    v297 = 16 * v294;
                    v296 = *(_DWORD **)(v269 + 8);
                    while (*v296 >= 0xFFFFFFFE)
                    {
                      v296 += 4;
                      v297 -= 16;
                      if (!v297)
                      {
                        v296 = v295;
                        goto LABEL_529;
                      }
                    }
                  }
LABEL_528:
                  if (v293)
LABEL_529:
                    v293 += 4 * *(v293 - 1);
                  while (v296 != v293)
                  {
                    v300 = 0;
                    v301 = *v296 + ~(*v296 << 15);
                    v302 = (9 * (v301 ^ (v301 >> 10))) ^ ((9 * (v301 ^ (v301 >> 10))) >> 6);
                    v303 = (v302 + ~(v302 << 11)) ^ ((v302 + ~(v302 << 11)) >> 16);
                    do
                    {
                      v304 = v303 & ((_DWORD)v284 - 1);
                      v303 = ++v300 + v304;
                    }
                    while (v278[4 * v304] != -1);
                    *(_OWORD *)&v278[4 * v304] = *(_OWORD *)v296;
                    v305 = v296 + 4;
                    v296 = v295;
                    if (v305 != v295)
                    {
                      v296 = v305;
                      while (*v296 >= 0xFFFFFFFE)
                      {
                        v296 += 4;
                        if (v296 == v295)
                        {
                          v296 = v295;
                          break;
                        }
                      }
                    }
                  }
                  goto LABEL_531;
                }
                v296 = &v293[4 * v294];
                v295 = v296;
                goto LABEL_529;
              }
LABEL_511:
              LODWORD(v283) = 2 * v283;
              goto LABEL_512;
            }
LABEL_507:
            LODWORD(v283) = 2 * v283;
            if (v283 <= 0x400)
              goto LABEL_508;
          }
          if ((double)v283 * 0.416666667 > (double)v280)
            goto LABEL_512;
          goto LABEL_511;
        }
        v278 = 0;
        v129 = v279;
      }
LABEL_531:
      v298 = *v277;
      *v277 = (uint64_t)v278;
      if (v298)
        WTF::fastFree((WTF *)(v298 - 16), (void *)v123);
      v299 = v269 + 16;
      v269 = v268;
      v4 = v1102;
      if (v299 != v268)
      {
        v269 = v299;
        while (*(_DWORD *)v269 >= 0xFFFFFFFE)
        {
          v269 += 16;
          if (v269 == v268)
          {
            v269 = v268;
            break;
          }
        }
      }
    }
    while (v269 != v130);
  }
  v131 = v1122;
  v139 = v1127;
  v1145 = 0;
  v1146 = 0;
  v1147 = v1127;
  if ((_DWORD)v1127)
    goto LABEL_246;
LABEL_548:
  v140 = 0;
  k = (unint64_t)v1130;
  if (!v1130[18])
  {
LABEL_549:
    WGSL::RewriteGlobalVariables::insertStructs((uint64_t)&v1168, (_QWORD *)k, **(const WTF::StringImpl ***)(v129 + 8), *(_DWORD *)(*(_QWORD *)(v129 + 8) + 12), (uint64_t *)&v1144);
    v133 = *v4;
    if (!(_DWORD)v1170)
    {
      v472 = (unsigned int *)v1168;
      v473 = DWORD1(v1169);
      *(_OWORD *)v1156 = *(_OWORD *)(v133 + 8);
      if (DWORD1(v1169))
        goto LABEL_778;
      goto LABEL_798;
    }
    WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded(k, (_OWORD *)(v133 + 8), *v4);
    if ((_DWORD)v1170 != 1)
      goto LABEL_1566;
    v306 = v1168;
    if (v1168)
      *(_DWORD *)v1168 += 2;
    *(_QWORD *)a4 = v306;
    *(_OWORD *)(a4 + 8) = v1169;
    v307 = 1;
    *(_BYTE *)(a4 + 24) = 1;
    goto LABEL_1291;
  }
LABEL_248:
  v1179 = 0;
  v1180[0] = 0;
  v141 = *(_QWORD *)(k + 64);
  if (v141)
  {
    v142 = *(unsigned int *)(v141 - 4);
    v143 = v141 + 24 * v142;
    if (*(_DWORD *)(v141 - 12))
    {
      v133 = v141;
      if ((_DWORD)v142)
      {
        v144 = 24 * v142;
        v133 = v141;
        while (*(_DWORD *)v133 >= 0xFFFFFFFE)
        {
          v133 += 24;
          v144 -= 24;
          if (!v144)
          {
            v133 = v143;
            goto LABEL_557;
          }
        }
      }
      goto LABEL_557;
    }
    v133 = v141 + 24 * v142;
  }
  else
  {
    v133 = 0;
    LODWORD(v142) = 0;
  }
  v143 = v141 + 24 * v142;
LABEL_557:
  if (v141)
    v309 = v141 + 24 * *(unsigned int *)(v141 - 4);
  else
    v309 = 0;
  if (v309 == v133)
    goto LABEL_776;
  if (!v34)
  {
    while (1)
    {
      v475 = v133 + 24;
      v133 = v143;
      if (v475 != v143)
      {
        v133 = v475;
        do
        {
          if (*(_DWORD *)v133 < 0xFFFFFFFE)
            goto LABEL_769;
          v133 += 24;
        }
        while (v133 != v143);
        v133 = v143;
      }
LABEL_769:
      if (v133 == v309)
        goto LABEL_776;
    }
  }
  v1114 = v1130 + 17;
  v1103 = v309;
  v1106 = v143;
LABEL_564:
  v310 = *(_DWORD *)(v34 - 8);
  v311 = *(_DWORD *)v133;
  v312 = 9 * ((v311 + ~(v311 << 15)) ^ ((v311 + ~(v311 << 15)) >> 10));
  v313 = (v312 ^ (v312 >> 6)) + ~((v312 ^ (v312 >> 6)) << 11);
  v314 = (v313 ^ HIWORD(v313)) & v310;
  v315 = *(_DWORD *)(v34 + 16 * v314);
  if (v315 != *(_DWORD *)v133)
  {
    v316 = 1;
    do
    {
      if (v315 == -1)
        goto LABEL_762;
      v314 = ((_DWORD)v314 + v316) & v310;
      v315 = *(_DWORD *)(v34 + 16 * v314);
      ++v316;
    }
    while (v315 != v311);
  }
  if (v314 == *(_DWORD *)(v34 - 4))
    goto LABEL_762;
  v1156[0] = 0;
  v1156[1] = 0;
  v1152 = 0;
  v317 = *(unsigned int *)(v133 + 20);
  if (!(_DWORD)v317)
    goto LABEL_758;
  v1133 = 0;
  v318 = (_QWORD *)(v34 + 16 * v314 + 8);
  v128 = *(_QWORD *)(v133 + 8);
  v319 = v128 + 16 * v317;
  k = (unint64_t)v1130;
  v1123 = v319;
  v1128 = v318;
  while (1)
  {
    v320 = *(_DWORD *)v128;
    v321 = *(WTF::StringImpl **)(v128 + 8);
    if (v321)
      *(_DWORD *)v321 += 2;
    v1151 = 0;
    v1151 = *(_DWORD *)v133;
    v322 = *v318;
    if (*v318)
    {
      v323 = *(_DWORD *)(v322 - 8);
      v324 = 9 * ((v320 + ~(v320 << 15)) ^ ((v320 + ~(v320 << 15)) >> 10));
      v325 = (v324 ^ (v324 >> 6)) + ~((v324 ^ (v324 >> 6)) << 11);
      v326 = v323 & (v325 ^ HIWORD(v325));
      v327 = *(_DWORD *)(v322 + 16 * v326);
      if (v327 != v320)
      {
        v328 = 1;
        do
        {
          if (v327 == -1)
            goto LABEL_749;
          v326 = (v326 + v328) & v323;
          v327 = *(_DWORD *)(v322 + 16 * v326);
          ++v328;
        }
        while (v327 != v320);
      }
      v329 = *(_QWORD *)(k + 88);
      if (v329)
        break;
    }
LABEL_749:
    if (v321)
    {
      if (*(_DWORD *)v321 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v321 -= 2;
    }
    v128 += 16;
    if (v128 == v319)
    {
      v309 = v1103;
      v143 = v1106;
      if (HIDWORD(v1156[1]))
      {
        if (HIDWORD(v1180[0]) == LODWORD(v1180[0]))
        {
          v469 = (unsigned int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1179, HIDWORD(v1180[0]) + 1, v133);
          v470 = &v1179[HIDWORD(v1180[0])];
        }
        else
        {
          v470 = &v1179[HIDWORD(v1180[0])];
          v469 = (unsigned int *)v133;
        }
        *v470 = *v469;
        ++HIDWORD(v1180[0]);
        WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct((uint64_t)v1130, *(_DWORD *)v133, (uint64_t)v1156);
      }
LABEL_758:
      if (v1152)
        WTF::fastFree((WTF *)(v1152 - 16), (void *)v123);
      if (v1156[0])
        WTF::fastFree(v1156[0], (void *)v123);
      while (1)
      {
LABEL_762:
        v471 = v133 + 24;
        v133 = v143;
        if (v471 != v143)
        {
          v133 = v471;
          while (*(_DWORD *)v133 >= 0xFFFFFFFE)
          {
            v133 += 24;
            if (v133 == v143)
            {
              v133 = v143;
              break;
            }
          }
        }
        if (v133 == v309)
          break;
        v34 = (unint64_t)v1144;
        if (v1144)
          goto LABEL_564;
      }
      v472 = v1179;
      v474 = v1180[0];
      v473 = HIDWORD(v1180[0]);
      goto LABEL_777;
    }
  }
  v330 = *(_DWORD *)(v329 - 8);
  v331 = *((_DWORD *)v321 + 4);
  if (v331 < 0x100)
    v332 = WTF::StringImpl::hashSlowCase(v321);
  else
    v332 = v331 >> 8;
  for (m = 0; ; v332 = m + v334)
  {
    v334 = v332 & v330;
    v335 = *(WTF ***)(v329 + 8 * (v332 & v330));
    if (v335 != (WTF **)-1)
    {
      if (!v335)
      {
        v318 = v1128;
        k = (unint64_t)v1130;
        v319 = v1123;
        goto LABEL_749;
      }
      if ((WTF::equal(*v335, v321, (const WTF::StringImpl *)v124) & 1) != 0)
        break;
    }
    ++m;
  }
  v336 = v1130[6];
  if (!v336)
    goto LABEL_1575;
  v337 = *(_DWORD *)(v336 - 8);
  v338 = *((_DWORD *)v321 + 4);
  v339 = v338 < 0x100 ? WTF::StringImpl::hashSlowCase(v321) : v338 >> 8;
  for (n = 0; ; v339 = ++n + v341)
  {
    v341 = v339 & v337;
    v342 = *(WTF **)(v336 + 32 * v341);
    if (v342 == (WTF *)-1)
      continue;
    if (!v342)
      break;
    if ((WTF::equal(v342, v321, (const WTF::StringImpl *)v124) & 1) != 0)
    {
      v343 = v336 + 32 * v341;
      v344 = v1130;
      v345 = v1130[6];
      if (v345)
      {
        v346 = *(unsigned int *)(v345 - 4);
        goto LABEL_605;
      }
      goto LABEL_606;
    }
  }
  v344 = v1130;
  v345 = v1130[6];
  if (!v345)
    goto LABEL_1575;
  v346 = *(unsigned int *)(v345 - 4);
  v343 = v345 + 32 * v346;
LABEL_605:
  if (v343 == v345 + 32 * v346)
  {
LABEL_1575:
    __break(0xC471u);
    JUMPOUT(0x1824A7DC4);
  }
LABEL_606:
  v347 = *(_QWORD *)(v343 + 24);
  v1117 = *(_QWORD *)(v347 + 136);
  v1119 = v343;
  v348 = v344[5];
  v349 = *(_QWORD *)(v348 + 312);
  if ((unint64_t)(*(_QWORD *)(v348 + 320) - v349) <= 0x47)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v348 + 312));
    v349 = *(_QWORD *)(v348 + 312);
  }
  *(_OWORD *)(v349 + 8) = *(_OWORD *)(v347 + 8);
  *(_QWORD *)(v349 + 24) = 0;
  *(_BYTE *)(v349 + 32) = 0;
  *(_BYTE *)(v349 + 56) = 0;
  *(_QWORD *)v349 = off_1E0FD44C0;
  *(_QWORD *)(v349 + 64) = v1133;
  *(_QWORD *)(v348 + 312) += 72;
  v350 = *(unsigned int *)(v348 + 356);
  if ((_DWORD)v350 == *(_DWORD *)(v348 + 352))
  {
    v351 = v350 + (v350 >> 2);
    if (v351 >= 0x10)
      v352 = v351 + 1;
    else
      v352 = 16;
    if (v352 <= v350 + 1)
      v353 = v350 + 1;
    else
      v353 = v352;
    if (v353 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1824A7EB4);
    }
    v354 = *(void **)(v348 + 344);
    v355 = (void *)WTF::fastMalloc((WTF *)(8 * v353));
    *(_DWORD *)(v348 + 352) = v353;
    *(_QWORD *)(v348 + 344) = v355;
    memcpy(v355, v354, 8 * v350);
    if (v354)
    {
      if (*(void **)(v348 + 344) == v354)
      {
        *(_QWORD *)(v348 + 344) = 0;
        *(_DWORD *)(v348 + 352) = 0;
      }
      WTF::fastFree((WTF *)v354, v356);
    }
    v350 = *(unsigned int *)(v348 + 356);
    v357 = (_QWORD *)(*(_QWORD *)(v348 + 344) + 8 * v350);
    v358 = *(unsigned __int8 *)(v349 + 56);
  }
  else
  {
    v358 = 0;
    v357 = (_QWORD *)(*(_QWORD *)(v348 + 344) + 8 * v350);
  }
  *v357 = v349;
  *(_DWORD *)(v348 + 356) = v350 + 1;
  v359 = v1130[5];
  *(_QWORD *)(v349 + 24) = *(_QWORD *)(v359 + 128);
  if (v358)
  {
    v360 = *(unsigned int *)(v349 + 48);
    if ((_DWORD)v360 != -1)
    {
      if ((_DWORD)v360 == 4)
      {
        *(_DWORD *)(v349 + 32) = v1133;
        goto LABEL_629;
      }
      ((void (*)(WTF **, uint64_t))off_1E0FD3E30[v360])(v1160, v349 + 32);
      v359 = v1130[5];
    }
    *(_DWORD *)(v349 + 32) = v1133;
    *(_DWORD *)(v349 + 48) = 4;
  }
  else
  {
    *(_DWORD *)(v349 + 32) = v1133;
    *(_DWORD *)(v349 + 48) = 4;
    *(_BYTE *)(v349 + 56) = 1;
  }
LABEL_629:
  v361 = *(_QWORD *)(v359 + 312);
  if ((unint64_t)(*(_QWORD *)(v359 + 320) - v361) <= 0x1F)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v359 + 312));
    v361 = *(_QWORD *)(v359 + 312);
  }
  *(_OWORD *)(v361 + 8) = *(_OWORD *)(v347 + 8);
  *(_QWORD *)v361 = &off_1E0FD4588;
  *(_QWORD *)(v361 + 24) = v349;
  *(_QWORD *)(v359 + 312) += 32;
  v362 = *(unsigned int *)(v359 + 356);
  if ((_DWORD)v362 == *(_DWORD *)(v359 + 352))
  {
    v363 = v362 + (v362 >> 2);
    if (v363 >= 0x10)
      v364 = v363 + 1;
    else
      v364 = 16;
    if (v364 <= v362 + 1)
      v365 = v362 + 1;
    else
      v365 = v364;
    if (v365 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1824A7EBCLL);
    }
    v366 = *(void **)(v359 + 344);
    v367 = (void *)WTF::fastMalloc((WTF *)(8 * v365));
    *(_DWORD *)(v359 + 352) = v365;
    *(_QWORD *)(v359 + 344) = v367;
    memcpy(v367, v366, 8 * v362);
    if (v366)
    {
      if (*(void **)(v359 + 344) == v366)
      {
        *(_QWORD *)(v359 + 344) = 0;
        *(_DWORD *)(v359 + 352) = 0;
      }
      WTF::fastFree((WTF *)v366, v368);
    }
    v362 = *(unsigned int *)(v359 + 356);
    v369 = (_QWORD *)(*(_QWORD *)(v359 + 344) + 8 * v362);
  }
  else
  {
    v369 = (_QWORD *)(*(_QWORD *)(v359 + 344) + 8 * v362);
  }
  *v369 = v361;
  *(_DWORD *)(v359 + 356) = v362 + 1;
  v370 = v1130[5];
  v371 = *(_DWORD **)(v347 + 48);
  if (v371)
    *v371 += 2;
  v372 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v372 = v361;
  v373 = *(_QWORD *)(v370 + 312);
  if ((unint64_t)(*(_QWORD *)(v370 + 320) - v373) <= 0x9F)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v370 + 312));
    v373 = *(_QWORD *)(v370 + 312);
  }
  *(_OWORD *)(v373 + 8) = *(_OWORD *)(v347 + 8);
  *(_QWORD *)v373 = &off_1E0FD3850;
  *(_QWORD *)(v373 + 24) = &off_1E0FD2F10;
  *(_QWORD *)(v373 + 32) = 0;
  *(_QWORD *)(v373 + 40) = 0;
  *(_QWORD *)(v373 + 48) = v371;
  *(_QWORD *)(v373 + 64) = 0;
  *(_QWORD *)(v373 + 72) = 0;
  *(_QWORD *)(v373 + 56) = &off_1E0FD2F10;
  if (v371)
    *v371 += 2;
  *(_QWORD *)(v373 + 80) = v371;
  *(_QWORD *)(v373 + 88) = v372;
  *(_QWORD *)(v373 + 96) = 0x100000001;
  *(_BYTE *)(v373 + 124) = 0;
  *(_BYTE *)(v373 + 128) = 0;
  *(_BYTE *)(v373 + 132) = 0;
  *(_BYTE *)(v373 + 136) = 0;
  *(_WORD *)(v373 + 140) = 0;
  *(_BYTE *)(v373 + 144) = 0;
  *(_BYTE *)(v373 + 148) = 0;
  *(_BYTE *)(v373 + 152) = 0;
  *(_BYTE *)(v373 + 154) = 0;
  *(_QWORD *)(v373 + 104) = v1117;
  *(_QWORD *)(v373 + 112) = 0;
  *(_BYTE *)(v373 + 120) = 0;
  *(_QWORD *)(v370 + 312) += 160;
  v130 = *(unsigned int *)(v370 + 356);
  if ((_DWORD)v130 == *(_DWORD *)(v370 + 352))
  {
    v374 = v130 + (v130 >> 2);
    if (v374 >= 0x10)
      v375 = v374 + 1;
    else
      v375 = 16;
    if (v375 <= v130 + 1)
      v376 = v130 + 1;
    else
      v376 = v375;
    v34 = v1119;
    if (v376 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1824A7EC4);
    }
    v377 = *(void **)(v370 + 344);
    v378 = (void *)WTF::fastMalloc((WTF *)(8 * v376));
    *(_DWORD *)(v370 + 352) = v376;
    *(_QWORD *)(v370 + 344) = v378;
    memcpy(v378, v377, 8 * v130);
    k = (unint64_t)v1130;
    if (v377)
    {
      if (*(void **)(v370 + 344) == v377)
      {
        *(_QWORD *)(v370 + 344) = 0;
        *(_DWORD *)(v370 + 352) = 0;
      }
      WTF::fastFree((WTF *)v377, v379);
    }
    v130 = *(unsigned int *)(v370 + 356);
    v380 = (_QWORD *)(*(_QWORD *)(v370 + 344) + 8 * v130);
  }
  else
  {
    v380 = (_QWORD *)(*(_QWORD *)(v370 + 344) + 8 * v130);
    k = (unint64_t)v1130;
    v34 = v1119;
  }
  *v380 = v373;
  *(_DWORD *)(v370 + 356) = v130 + 1;
  LODWORD(v1160[0]) = v1133;
  v1160[1] = (WTF *)v373;
  v381 = HIDWORD(v1156[1]);
  if (HIDWORD(v1156[1]) == LODWORD(v1156[1]))
  {
    v382 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1156, HIDWORD(v1156[1]) + 1, (unint64_t)v1160);
    v381 = HIDWORD(v1156[1]);
    *((_OWORD *)v1156[0] + HIDWORD(v1156[1])) = *v382;
  }
  else
  {
    *((_OWORD *)v1156[0] + HIDWORD(v1156[1])) = *(_OWORD *)v1160;
  }
  v4 = v1102;
  HIDWORD(v1156[1]) = v381 + 1;
  v383 = *v1114;
  if (!*v1114)
  {
LABEL_674:
    v1168 = *(unsigned int *)(*(_QWORD *)(k + 144) + 12);
    WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>(v1114, (int *)&v1151, (uint64_t *)&v1168, (uint64_t)v1160);
    v392 = *(_QWORD *)(k + 144);
    LODWORD(v1160[0]) = v1151;
    v1160[1] = 0;
    *(_QWORD *)&v1161 = 0;
    v393 = *(unsigned int *)(v392 + 12);
    if ((_DWORD)v393 == *(_DWORD *)(v392 + 8))
    {
      v394 = WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v392, v393 + 1, (unint64_t)v1160);
      v395 = *(_QWORD *)v392 + 24 * *(unsigned int *)(v392 + 12);
      *(_DWORD *)v395 = *(_DWORD *)v394;
      *(_QWORD *)(v395 + 8) = 0;
      *(_QWORD *)(v395 + 16) = 0;
      v396 = *(_QWORD *)(v394 + 8);
      *(_QWORD *)(v394 + 8) = 0;
      *(_QWORD *)(v395 + 8) = v396;
      LODWORD(v396) = *(_DWORD *)(v394 + 16);
      *(_DWORD *)(v394 + 16) = 0;
      *(_DWORD *)(v395 + 16) = v396;
      LODWORD(v396) = *(_DWORD *)(v394 + 20);
      *(_DWORD *)(v394 + 20) = 0;
      *(_DWORD *)(v395 + 20) = v396;
      ++*(_DWORD *)(v392 + 12);
      v397 = DWORD1(v1161);
      v398 = v1160[1];
      if (!DWORD1(v1161))
        goto LABEL_685;
    }
    else
    {
      v399 = *(_QWORD *)v392 + 24 * v393;
      *(_DWORD *)v399 = v1151;
      *(_QWORD *)(v399 + 8) = 0;
      *(_QWORD *)(v399 + 16) = 0;
      v400 = v1160[1];
      v1160[1] = 0;
      *(_QWORD *)(v399 + 8) = v400;
      LODWORD(v400) = v1161;
      LODWORD(v1161) = 0;
      *(_DWORD *)(v399 + 16) = (_DWORD)v400;
      LODWORD(v400) = DWORD1(v1161);
      DWORD1(v1161) = 0;
      *(_DWORD *)(v399 + 20) = (_DWORD)v400;
      ++*(_DWORD *)(v392 + 12);
      v397 = DWORD1(v1161);
      v398 = v1160[1];
      if (!DWORD1(v1161))
        goto LABEL_685;
    }
    v130 = 120 * v397;
    v401 = (_DWORD **)((char *)v398 + 40);
    do
    {
      v402 = *v401;
      *v401 = 0;
      if (v402)
      {
        if (*v402 == 2)
          WTF::StringImpl::destroy();
        else
          *v402 -= 2;
      }
      v401 += 15;
      v130 -= 120;
    }
    while (v130);
    v398 = v1160[1];
LABEL_685:
    if (v398)
    {
      v1160[1] = 0;
      LODWORD(v1161) = 0;
      WTF::fastFree(v398, v391);
    }
    v1151 = v1168;
    LODWORD(v1160[0]) = v1133;
    if (*(_BYTE *)(v34 + 16))
      goto LABEL_691;
    goto LABEL_775;
  }
  v384 = *(_DWORD *)(v383 - 8);
  v385 = *(_DWORD *)v133;
  v386 = 9 * ((v385 + ~(v385 << 15)) ^ ((v385 + ~(v385 << 15)) >> 10));
  v387 = (v386 ^ (v386 >> 6)) + ~((v386 ^ (v386 >> 6)) << 11);
  v388 = (v387 ^ HIWORD(v387)) & v384;
  v389 = *(_DWORD *)(v383 + 8 * v388);
  if (v389 != *(_DWORD *)v133)
  {
    v390 = 1;
    while (v389 != -1)
    {
      v388 = ((_DWORD)v388 + v390) & v384;
      v389 = *(_DWORD *)(v383 + 8 * v388);
      ++v390;
      if (v389 == v385)
        goto LABEL_673;
    }
    goto LABEL_674;
  }
LABEL_673:
  if (v388 == *(_DWORD *)(v383 - 4))
    goto LABEL_674;
  v1151 = *(_DWORD *)(v383 + 8 * v388 + 4);
  LODWORD(v1160[0]) = v1133;
  if (*(_BYTE *)(v34 + 16))
  {
LABEL_691:
    HIDWORD(v1160[0]) = *(_DWORD *)(v34 + 12);
    LOBYTE(v1160[1]) = *(_BYTE *)(k + 184);
    v403 = *(_QWORD *)(v34 + 24);
    v404 = *(_QWORD *)(v403 + 136);
    v1154 = *(_QWORD *)(v403 + 144);
    v1155 = v404;
    v1153 = &v1155;
    v1168 = (unint64_t)&v1153;
    *(_QWORD *)&v1169 = &v1154;
    *((_QWORD *)&v1169 + 1) = &v1153;
    v1170 = &v1154;
    v1171 = &v1153;
    v1172 = &v1154;
    v1173 = &v1153;
    v1174 = &v1154;
    v1175 = &v1153;
    v1176 = &v1154;
    v1177 = &v1153;
    v1178 = &v1154;
    v405 = *(unsigned int *)(v1154 + 48);
    if ((_DWORD)v405 != -1)
    {
      v1158 = (WTF *)&v1168;
      ((void (*)(WTF **))off_1E0FD4500[v405])(&v1158);
      v406 = *(_DWORD **)(*(_QWORD *)(v34 + 24) + 48);
      if (v406)
        *v406 += 2;
      v1163 = v406;
      LOBYTE(v1164) = 0;
      BYTE4(v1164) = 0;
      BYTE8(v1164) = 0;
      BYTE12(v1164) = 0;
      LOBYTE(v1165) = 0;
      BYTE4(v1165) = 0;
      BYTE8(v1165) = 0;
      BYTE12(v1165) = 0;
      LOBYTE(v1166) = 0;
      BYTE4(v1166) = 0;
      BYTE8(v1166) = 0;
      BYTE12(v1166) = 0;
      v1167[0] = 0;
      v1167[4] = 0;
      v1167[8] = 0;
      v1167[12] = 0;
      v1167[16] = 0;
      v1167[20] = 0;
      v407 = *(_QWORD *)(k + 208);
      if (!v407)
        goto LABEL_700;
      v408 = *(_DWORD *)(v407 - 8);
      v409 = *(_QWORD *)(v34 + 24);
      v410 = (~(v409 << 32) + v409) ^ ((unint64_t)(~(v409 << 32) + v409) >> 22);
      v411 = 9 * ((v410 + ~(v410 << 13)) ^ ((v410 + ~(v410 << 13)) >> 8));
      v412 = (v411 ^ (v411 >> 15)) + ~((v411 ^ (v411 >> 15)) << 27);
      v413 = v408 & ((v412 >> 31) ^ v412);
      v414 = *(_QWORD *)(v407 + 16 * v413);
      if (v414 != v409)
      {
        v415 = 1;
        while (v414)
        {
          v413 = ((_DWORD)v413 + v415) & v408;
          v414 = *(_QWORD *)(v407 + 16 * v413);
          ++v415;
          if (v414 == v409)
            goto LABEL_699;
        }
LABEL_700:
        if (v1152)
        {
          v416 = *(_DWORD *)(v1152 - 8);
          v417 = *(_QWORD *)(v34 + 24);
          v418 = (~(v417 << 32) + v417) ^ ((unint64_t)(~(v417 << 32) + v417) >> 22);
          v419 = 9 * ((v418 + ~(v418 << 13)) ^ ((v418 + ~(v418 << 13)) >> 8));
          v420 = (v419 ^ (v419 >> 15)) + ~((v419 ^ (v419 >> 15)) << 27);
          v421 = v416 & ((v420 >> 31) ^ v420);
          v422 = *(_QWORD *)(v1152 + 16 * v421);
          if (v422 == v417)
          {
LABEL_705:
            if (v421 != *(_DWORD *)(v1152 - 4))
            {
              v442 = *(_QWORD *)(k + 144);
              if (*(_DWORD *)(v442 + 12) <= v1151)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A7ED4);
              }
              v443 = *(_QWORD *)v442 + 24 * v1151;
              v444 = *(_DWORD *)(v1152 + 16 * v421 + 8);
              if (*(_DWORD *)(v443 + 20) <= v444)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A7EDCLL);
              }
              v445 = *(_QWORD *)(v443 + 8) + 120 * v444;
              *(_DWORD *)(v445 + 56) = v1133;
              *(_BYTE *)(v445 + 60) = 1;
            }
          }
          else
          {
            v423 = 1;
            while (v422)
            {
              v421 = ((_DWORD)v421 + v423) & v416;
              v422 = *(_QWORD *)(v1152 + 16 * v421);
              ++v423;
              if (v422 == v417)
                goto LABEL_705;
            }
          }
        }
LABEL_733:
        v446 = *(_QWORD *)(*(_QWORD *)(v34 + 24) + 144);
        if (v446 && !*(_DWORD *)(v446 + 48))
        {
          if (*(_BYTE *)v446 == 10)
            v447 = 4;
          else
            v447 = 1;
          v448 = *(_QWORD *)(k + 144);
          v449 = v1151;
          if (*(_DWORD *)(v448 + 12) <= v1151)
          {
LABEL_1598:
            __break(0xC471u);
            JUMPOUT(0x1824A7EACLL);
          }
        }
        else
        {
          v447 = 1;
          v448 = *(_QWORD *)(k + 144);
          v449 = v1151;
          if (*(_DWORD *)(v448 + 12) <= v1151)
            goto LABEL_1598;
        }
        v450 = *(_QWORD *)v448 + 24 * v449;
        v451 = v450 + 8;
        v452 = *(unsigned int *)(v450 + 20);
        if ((_DWORD)v452 == *(_DWORD *)(v450 + 16))
        {
          v453 = WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v451, v452 + 1, (unint64_t)v1160);
          v454 = *(_QWORD *)v451 + 120 * *(unsigned int *)(v451 + 12);
          v455 = *(_QWORD *)(v453 + 32);
          v456 = *(_OWORD *)(v453 + 16);
          *(_OWORD *)v454 = *(_OWORD *)v453;
          *(_OWORD *)(v454 + 16) = v456;
          *(_QWORD *)(v454 + 32) = v455;
          v457 = *(_QWORD *)(v453 + 40);
          *(_QWORD *)(v453 + 40) = 0;
          *(_QWORD *)(v454 + 40) = v457;
          *(_OWORD *)(v454 + 48) = *(_OWORD *)(v453 + 48);
          v458 = *(_QWORD *)(v453 + 109);
          v460 = *(_OWORD *)(v453 + 80);
          v459 = *(_OWORD *)(v453 + 96);
          *(_OWORD *)(v454 + 64) = *(_OWORD *)(v453 + 64);
          *(_OWORD *)(v454 + 80) = v460;
          *(_OWORD *)(v454 + 96) = v459;
          *(_QWORD *)(v454 + 109) = v458;
        }
        else
        {
          v461 = *(_QWORD *)v451 + 120 * v452;
          v462 = *(_OWORD *)v1160;
          v463 = v1161;
          *(_QWORD *)(v461 + 32) = v1162;
          *(_OWORD *)v461 = v462;
          *(_OWORD *)(v461 + 16) = v463;
          v464 = v1163;
          v1163 = 0;
          *(_QWORD *)(v461 + 40) = v464;
          *(_OWORD *)(v461 + 48) = v1164;
          v465 = v1165;
          v466 = v1166;
          v467 = *(_OWORD *)v1167;
          *(_QWORD *)(v461 + 109) = *(_QWORD *)&v1167[13];
          *(_OWORD *)(v461 + 80) = v466;
          *(_OWORD *)(v461 + 96) = v467;
          *(_OWORD *)(v461 + 64) = v465;
        }
        ++*(_DWORD *)(v451 + 12);
        v468 = v1163;
        v1163 = 0;
        v319 = v1123;
        v318 = v1128;
        if (v468)
        {
          if (*v468 == 2)
            WTF::StringImpl::destroy();
          else
            *v468 -= 2;
        }
        v1133 += v447;
        goto LABEL_749;
      }
LABEL_699:
      if (v413 == *(_DWORD *)(v407 - 4))
        goto LABEL_700;
      v424 = *(_QWORD *)(k + 144);
      if (*(_DWORD *)(v424 + 12) <= v1151)
      {
        __break(0xC471u);
        JUMPOUT(0x1824A7ECCLL);
      }
      v425 = *(_QWORD *)(v407 + 16 * v413 + 8);
      v426 = *(_DWORD *)(*(_QWORD *)v424 + 24 * v1151 + 20);
      v427 = v1152;
      if (v1152
        || (WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(&v1152, 8u), (v427 = v1152) != 0))
      {
        v428 = *(_DWORD *)(v427 - 8);
      }
      else
      {
        v428 = 0;
      }
      v429 = (~(v425 << 32) + v425) ^ ((unint64_t)(~(v425 << 32) + v425) >> 22);
      v430 = 9 * ((v429 + ~(v429 << 13)) ^ ((v429 + ~(v429 << 13)) >> 8));
      v431 = (v430 ^ (v430 >> 15)) + ~((v430 ^ (v430 >> 15)) << 27);
      v432 = v428 & ((v431 >> 31) ^ v431);
      v124 = v427 + 16 * v432;
      v433 = *(_QWORD *)v124;
      if (*(_QWORD *)v124)
      {
        v434 = 0;
        v435 = 1;
        while (v433 != v425)
        {
          if (v433 == -1)
            v434 = (_QWORD *)v124;
          v432 = (v432 + v435) & v428;
          v124 = v427 + 16 * v432;
          v433 = *(_QWORD *)v124;
          ++v435;
          if (!*(_QWORD *)v124)
          {
            if (v434)
            {
              *v434 = 0;
              v434[1] = 0;
              --*(_DWORD *)(v427 - 16);
              v124 = (size_t)v434;
            }
            goto LABEL_720;
          }
        }
        goto LABEL_733;
      }
LABEL_720:
      *(_QWORD *)v124 = v425;
      *(_DWORD *)(v124 + 8) = v426;
      v436 = v1152;
      if (v1152)
      {
        v437 = *(_DWORD *)(v1152 - 16);
        v438 = *(_DWORD *)(v1152 - 12) + 1;
        *(_DWORD *)(v1152 - 12) = v438;
        v439 = (v437 + v438);
        v440 = *(unsigned int *)(v436 - 4);
        if (v440 <= 0x400)
          goto LABEL_722;
LABEL_730:
        if (v440 > 2 * v439)
          goto LABEL_733;
        goto LABEL_731;
      }
      v438 = 1;
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v439 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
      v440 = MEMORY[0xFFFFFFFFFFFFFFFC];
      if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u)
        goto LABEL_730;
LABEL_722:
      if (3 * v440 > 4 * v439)
        goto LABEL_733;
      if ((_DWORD)v440)
LABEL_731:
        v441 = (_DWORD)v440 << (6 * v438 >= (2 * v440));
      else
        v441 = 8;
      WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(&v1152, v441);
      goto LABEL_733;
    }
LABEL_1566:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_1567:
    v1086 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
    v1160[0] = v1086;
    v1088 = *(unsigned int *)(v130 + 340);
    if ((_DWORD)v1088 == *(_DWORD *)(v130 + 336))
    {
      v1089 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v130 + 328, v1088 + 1, (unint64_t)v1160);
      v1088 = *(unsigned int *)(v130 + 340);
      v1090 = *(_QWORD *)(v130 + 328);
      v1091 = *(_QWORD *)v1089;
      *(_QWORD *)v1089 = 0;
      *(_QWORD *)(v1090 + 8 * v1088) = v1091;
      v1092 = v1160[0];
    }
    else
    {
      v1096 = v1086;
      v1092 = 0;
      v1097 = *(_QWORD *)(v130 + 328);
      v1160[0] = 0;
      *(_QWORD *)(v1097 + 8 * v1088) = v1096;
    }
    *(_DWORD *)(v130 + 340) = v1088 + 1;
    WTF::fastFree(v1092, v1087);
    v1098 = *(unsigned int *)(v130 + 340);
    if (!(_DWORD)v1098)
    {
      __break(0xC471u);
      JUMPOUT(0x1824A7F04);
    }
    v813 = *(_QWORD *)(*(_QWORD *)(v130 + 328) + 8 * v1098 - 8);
    *(_QWORD *)(v130 + 312) = v813;
    *(_QWORD *)(v130 + 320) = v813 + 0x4000;
LABEL_1213:
    *(_QWORD *)(v813 + 8) = 0;
    *(_QWORD *)(v813 + 16) = 0;
    *(_QWORD *)v813 = &off_1E0FD4628;
    *(_BYTE *)(v813 + 24) = 5;
    *(_QWORD *)(v130 + 312) += 32;
    v814 = *(unsigned int *)(v130 + 356);
    if ((_DWORD)v814 == *(_DWORD *)(v130 + 352))
    {
      v815 = v814 + (v814 >> 2);
      if (v815 >= 0x10)
        v816 = v815 + 1;
      else
        v816 = 16;
      if (v816 <= v814 + 1)
        v817 = v814 + 1;
      else
        v817 = v816;
      if (v817 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1824A7EF4);
      }
      v818 = *(void **)(v130 + 344);
      v819 = (void *)WTF::fastMalloc((WTF *)(8 * v817));
      *(_DWORD *)(v130 + 352) = v817;
      *(_QWORD *)(v130 + 344) = v819;
      memcpy(v819, v818, 8 * v814);
      if (v818)
      {
        if (*(void **)(v130 + 344) == v818)
        {
          *(_QWORD *)(v130 + 344) = 0;
          *(_DWORD *)(v130 + 352) = 0;
        }
        WTF::fastFree((WTF *)v818, v820);
      }
      v814 = *(unsigned int *)(v130 + 356);
      v821 = (_QWORD *)(*(_QWORD *)(v130 + 344) + 8 * v814);
    }
    else
    {
      v821 = (_QWORD *)(*(_QWORD *)(v130 + 344) + 8 * v814);
    }
    *v821 = v813;
    *(_DWORD *)(v130 + 356) = v814 + 1;
    v822 = v1130[5];
    v1156[0] = 0;
    v1156[1] = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v1160[1] = 0;
    *(_QWORD *)&v1161 = 0;
    v1160[0] = (WTF *)v34;
    v823 = (unsigned int *)WTF::fastMalloc((WTF *)8);
    LODWORD(v1180[0]) = 1;
    v1179 = v823;
    *(_QWORD *)v823 = v813;
    HIDWORD(v1180[0]) = 1;
    LOBYTE(v1155) = 0;
    v808 = WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>((_QWORD *)(v822 + 312), v1156, (uint64_t)v1160, v133, (uint64_t *)&v1179, (char *)&v1155);
    v825 = (WTF *)v1179;
    if (v1179)
    {
      v1179 = 0;
      LODWORD(v1180[0]) = 0;
      WTF::fastFree(v825, v824);
    }
    v826 = (_DWORD *)*((_QWORD *)&v1161 + 1);
    v1160[0] = (WTF *)v34;
    *((_QWORD *)&v1161 + 1) = 0;
    if (v826)
    {
      if (*v826 == 2)
        WTF::StringImpl::destroy();
      else
        *v826 -= 2;
    }
    WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>((_QWORD *)v1130[5], v128, (uint64_t)v808);
    goto LABEL_1234;
  }
LABEL_775:
  __break(1u);
LABEL_776:
  v473 = 0;
  v474 = 0;
  v472 = 0;
LABEL_777:
  v1168 = (unint64_t)v472;
  *(_QWORD *)&v1169 = __PAIR64__(v473, v474);
  LODWORD(v1170) = 0;
  v133 = *v4;
  *(_OWORD *)v1156 = *(_OWORD *)(*v4 + 8);
  if (v473)
  {
LABEL_778:
    v476 = &v472[v473];
    do
    {
      v477 = 0;
      v478 = *v472;
      v479 = *v472;
      do
      {
        ++v477;
        v232 = v479 > 9;
        v479 /= 0xAu;
      }
      while (v232);
      if (v477 < 0
        || (v480 = (v477 + 17), __OFADD__(v477, 17))
        || (WTF::tryFastCompactMalloc((WTF *)(v480 + 20)), (v481 = v1179) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x1824A7E54);
      }
      v482 = 0;
      *v1179 = 2;
      v481[1] = v480;
      *((_QWORD *)v481 + 1) = v481 + 5;
      v481[4] = 4;
      *((_BYTE *)v481 + 36) = 95;
      *(_OWORD *)(v481 + 5) = *(_OWORD *)"__ArgumentBuffer_";
      v483 = v478;
      do
      {
        *((_BYTE *)v1180 + v482-- + 4) = (v483 % 0xA) | 0x30;
        v232 = v483 > 9;
        v483 /= 0xAu;
      }
      while (v232);
      v4 = v1102;
      if (v482 + 14 <= 13)
        memcpy((char *)v481 + 37, (char *)v1180 + v482 + 5, -v482);
      v1160[1] = 0;
      *(_QWORD *)&v1161 = 0;
      v1160[0] = (WTF *)&off_1E0FD2F10;
      *((_QWORD *)&v1161 + 1) = v481;
      WGSL::RewriteGlobalVariables::insertParameter((uint64_t)v1130, v1156, v133, v478, (uint64_t)v1160, 0, 2);
      if (*((_QWORD *)&v1161 + 1))
      {
        if (**((_DWORD **)&v1161 + 1) == 2)
          WTF::StringImpl::destroy();
        else
          **((_DWORD **)&v1161 + 1) -= 2;
      }
      ++v472;
    }
    while (v472 != v476);
  }
LABEL_798:
  v34 = (unint64_t)v1130;
  result = WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded((uint64_t)v1130, v1156, v133);
  if (!v1144)
  {
    v498 = 0;
    v497 = 0;
LABEL_807:
    v1100 = (uint64_t)&v1144[4 * v497];
    goto LABEL_808;
  }
  v497 = *(v1144 - 1);
  if (!*(v1144 - 3))
  {
    v498 = (uint64_t)&v1144[4 * v497];
    goto LABEL_807;
  }
  v1100 = (uint64_t)&v1144[4 * v497];
  v498 = (uint64_t)v1144;
  if ((_DWORD)v497)
  {
    v499 = 16 * v497;
    v498 = (uint64_t)v1144;
    while (*(_DWORD *)v498 >= 0xFFFFFFFE)
    {
      v498 += 16;
      v499 -= 16;
      if (!v499)
      {
        v498 = v1100;
        break;
      }
    }
  }
LABEL_808:
  v1119 = *v4;
  if (v1144)
    v500 = &v1144[4 * *(v1144 - 1)];
  else
    v500 = 0;
  if (v500 != (_DWORD *)v498)
  {
    v1107 = *(_QWORD *)(v1119 + 16);
    v1109 = *(_QWORD *)(v1119 + 8);
    v496 = 0uLL;
    v1099 = v500;
    while (1)
    {
      v1134 = v495;
      v1140 = v496;
      v501 = 0;
      v502 = *(_QWORD *)(v34 + 40);
      v503 = *(_DWORD *)v498;
      v504 = *(_DWORD *)v498;
      do
      {
        ++v501;
        v232 = v504 > 9;
        v504 /= 0xAu;
      }
      while (v232);
      if (v501 < 0
        || (v505 = (v501 + 17), __OFADD__(v501, 17))
        || (result = WTF::tryFastCompactMalloc((WTF *)(v505 + 20)), (v506 = v1160[0]) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x1824A7E5CLL);
      }
      v507 = 0;
      *(_DWORD *)v1160[0] = 2;
      *((_DWORD *)v506 + 1) = v505;
      *((_QWORD *)v506 + 1) = (char *)v506 + 20;
      *((_DWORD *)v506 + 4) = 4;
      *((_BYTE *)v506 + 36) = 95;
      *(_OWORD *)((char *)v506 + 20) = *(_OWORD *)"__ArgumentBuffer_";
      do
      {
        *((_BYTE *)&v1160[1] + v507-- + 4) = (v503 % 0xA) | 0x30;
        v232 = v503 > 9;
        v503 /= 0xAu;
      }
      while (v232);
      if (v507 + 14 <= 13)
        result = (uint64_t)memcpy((char *)v506 + 37, (char *)&v1160[1] + v507 + 5, -v507);
      *(_DWORD *)v506 = 4;
      v508 = *(_QWORD *)(v502 + 312);
      v495 = v1134;
      v496 = v1140;
      if ((unint64_t)(*(_QWORD *)(v502 + 320) - v508) < 0x60)
      {
        result = WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v502 + 312));
        v495 = v1134;
        v496 = v1140;
        v508 = *(_QWORD *)(v502 + 312);
        v34 = (unint64_t)v1130;
      }
      *(_QWORD *)(v508 + 16) = v1107;
      *(_QWORD *)(v508 + 24) = 0;
      *(_BYTE *)(v508 + 32) = 0;
      *(_BYTE *)(v508 + 56) = 0;
      *(_QWORD *)v508 = off_1E0FD2E98;
      *(_QWORD *)(v508 + 8) = v1109;
      *(_QWORD *)(v508 + 64) = &off_1E0FD2F10;
      *(_QWORD *)(v508 + 72) = 0;
      *(_QWORD *)(v508 + 80) = 0;
      *(_QWORD *)(v508 + 88) = v506;
      *(_QWORD *)(v502 + 312) += 96;
      v509 = *(unsigned int *)(v502 + 356);
      if ((_DWORD)v509 == *(_DWORD *)(v502 + 352))
      {
        v510 = v509 + (v509 >> 2);
        if (v510 >= 0x10)
          v511 = v510 + 1;
        else
          v511 = 16;
        if (v511 <= v509 + 1)
          v512 = v509 + 1;
        else
          v512 = v511;
        if (v512 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824A7EA4);
        }
        v513 = *(void **)(v502 + 344);
        v514 = (void *)WTF::fastMalloc((WTF *)(8 * v512));
        *(_DWORD *)(v502 + 352) = v512;
        *(_QWORD *)(v502 + 344) = v514;
        result = (uint64_t)memcpy(v514, v513, 8 * v509);
        if (v513)
        {
          if (*(void **)(v502 + 344) == v513)
          {
            *(_QWORD *)(v502 + 344) = 0;
            *(_DWORD *)(v502 + 352) = 0;
          }
          result = WTF::fastFree((WTF *)v513, v494);
        }
        v515 = *(unsigned int *)(v502 + 356);
        v34 = (unint64_t)v1130;
        v495 = v1134;
        v496 = v1140;
        *(_QWORD *)(*(_QWORD *)(v502 + 344) + 8 * v515) = v508;
        *(_DWORD *)(v502 + 356) = v515 + 1;
        v516 = *(_DWORD *)v506 - 2;
        if (*(_DWORD *)v506 == 2)
        {
LABEL_838:
          result = WTF::StringImpl::destroy();
          v495 = v1134;
          v496 = v1140;
          v517 = *(_QWORD *)(v498 + 8);
          if (!v517)
            goto LABEL_839;
          goto LABEL_842;
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v502 + 344) + 8 * v509) = v508;
        *(_DWORD *)(v502 + 356) = v509 + 1;
        v516 = *(_DWORD *)v506 - 2;
        if (*(_DWORD *)v506 == 2)
          goto LABEL_838;
      }
      *(_DWORD *)v506 = v516;
      v517 = *(_QWORD *)(v498 + 8);
      if (!v517)
      {
LABEL_839:
        v518 = 0;
        v519 = v517;
        goto LABEL_849;
      }
LABEL_842:
      v520 = *(unsigned int *)(v517 - 4);
      v519 = v517 + 16 * v520;
      if (*(_DWORD *)(v517 - 12))
      {
        v518 = v517;
        if ((_DWORD)v520)
        {
          v521 = 16 * v520;
          v518 = v517;
          while (*(_DWORD *)v518 >= 0xFFFFFFFE)
          {
            v518 += 16;
            v521 -= 16;
            if (!v521)
            {
              v518 = v519;
              break;
            }
          }
        }
      }
      else
      {
        v518 = v517 + 16 * v520;
        v519 = v518;
      }
LABEL_849:
      if (v517)
        v517 += 16 * *(unsigned int *)(v517 - 4);
      if (v517 != v518)
      {
        v1115 = v519;
        v1118 = v508;
        v1104 = v498;
        v1112 = v517;
        while (1)
        {
          v522 = *(_QWORD *)(*(_QWORD *)(v518 + 8) + 16);
          v523 = *(WTF **)(v522 + 48);
          if (v523)
            *(_DWORD *)v523 += 2;
          v524 = *(WTF **)(v522 + 144);
          v1135 = v495;
          v1141 = v496;
          v1124 = v524;
          v1129 = v522;
          if (v524)
          {
            if (!*((_DWORD *)v524 + 12) && *(_BYTE *)v524 == 10)
              break;
          }
          v533 = *(_QWORD *)(v34 + 40);
          v1160[0] = 0;
          v1160[1] = 0;
          k = *(_QWORD *)(v533 + 312);
          if (*(_QWORD *)(v533 + 320) - k > 0x87)
            goto LABEL_870;
LABEL_1131:
          v737 = (unsigned int *)WTF::fastMalloc((WTF *)0x4000);
          v1179 = v737;
          v739 = *(unsigned int *)(v533 + 340);
          if ((_DWORD)v739 == *(_DWORD *)(v533 + 336))
          {
            v740 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v533 + 328, v739 + 1, (unint64_t)&v1179);
            v739 = *(unsigned int *)(v533 + 340);
            v741 = *(_QWORD *)(v533 + 328);
            v742 = *(_QWORD *)v740;
            *(_QWORD *)v740 = 0;
            *(_QWORD *)(v741 + 8 * v739) = v742;
            v743 = (WTF *)v1179;
          }
          else
          {
            v755 = v737;
            v743 = 0;
            v756 = *(_QWORD *)(v533 + 328);
            v1179 = 0;
            *(_QWORD *)(v756 + 8 * v739) = v755;
          }
          *(_DWORD *)(v533 + 340) = v739 + 1;
          WTF::fastFree(v743, v738);
          v757 = *(unsigned int *)(v533 + 340);
          v34 = (unint64_t)v1130;
          if (!(_DWORD)v757)
          {
            __break(0xC471u);
            JUMPOUT(0x1824A7E94);
          }
          k = *(_QWORD *)(*(_QWORD *)(v533 + 328) + 8 * v757 - 8);
          *(_QWORD *)(v533 + 312) = k;
          *(_QWORD *)(v533 + 320) = k + 0x4000;
LABEL_870:
          *(_BYTE *)(k + 56) = 0;
          *(_QWORD *)(k + 16) = 0;
          *(_QWORD *)(k + 24) = 0;
          *(_BYTE *)(k + 32) = 0;
          *(_QWORD *)k = off_1E0FD3878;
          *(_QWORD *)(k + 8) = 0;
          v534 = *(_OWORD *)v1160;
          *(_OWORD *)(k + 80) = *(_OWORD *)v1160;
          *(_QWORD *)(k + 64) = v508;
          *(_QWORD *)(k + 72) = &off_1E0FD2F10;
          *(_OWORD *)(k + 112) = v534;
          *(_QWORD *)(k + 96) = v523;
          *(_QWORD *)(k + 104) = &off_1E0FD2F10;
          if (v523)
            *(_DWORD *)v523 += 2;
          *(_QWORD *)(k + 128) = v523;
          *(_QWORD *)(v533 + 312) += 136;
          v535 = *(unsigned int *)(v533 + 356);
          if ((_DWORD)v535 == *(_DWORD *)(v533 + 352))
          {
            v536 = v535 + (v535 >> 2);
            if (v536 >= 0x10)
              v537 = v536 + 1;
            else
              v537 = 16;
            if (v537 <= v535 + 1)
              v538 = v535 + 1;
            else
              v538 = v537;
            if (v538 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824A7E0CLL);
            }
            v539 = *(void **)(v533 + 344);
            v540 = (void *)WTF::fastMalloc((WTF *)(8 * v538));
            *(_DWORD *)(v533 + 352) = v538;
            *(_QWORD *)(v533 + 344) = v540;
            memcpy(v540, v539, 8 * v535);
            v34 = (unint64_t)v1130;
            if (v539)
            {
              if (*(void **)(v533 + 344) == v539)
              {
                *(_QWORD *)(v533 + 344) = 0;
                *(_DWORD *)(v533 + 352) = 0;
              }
              WTF::fastFree((WTF *)v539, v541);
            }
            v542 = *(unsigned int *)(v533 + 356);
            *(_QWORD *)(*(_QWORD *)(v533 + 344) + 8 * v542) = k;
            *(_DWORD *)(v533 + 356) = v542 + 1;
            v543 = v1130[30];
            if (!v543)
              goto LABEL_976;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v533 + 344) + 8 * v535) = k;
            *(_DWORD *)(v533 + 356) = v535 + 1;
            v543 = *(_QWORD *)(v34 + 240);
            if (!v543)
              goto LABEL_976;
          }
          v544 = *(_DWORD *)v498 + 1;
          v545 = *(_DWORD *)v518 + 1;
          v546 = *(_DWORD *)(v543 - 8);
          v547 = v546 & ((0xD7862706ELL * (unint64_t)(277951225 * v544 + 95187966 * v545)) >> 4);
          v548 = (int *)(v543 + 12 * v547);
          v549 = *v548;
          v550 = v548[1];
          if (*v548 == v544 && v550 == v545)
          {
LABEL_898:
            if (v548 == (int *)(v543 + 12 * *(unsigned int *)(v543 - 4)))
              goto LABEL_976;
            v1110 = v548[2];
            v130 = *(_QWORD *)(v34 + 40);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v34 = (unint64_t)v1160[0];
            v554 = *(_QWORD *)(v130 + 312);
            if ((unint64_t)(*(_QWORD *)(v130 + 320) - v554) <= 0x5F)
            {
              v694 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
              v1160[0] = v694;
              v696 = *(unsigned int *)(v130 + 340);
              if ((_DWORD)v696 == *(_DWORD *)(v130 + 336))
              {
                v697 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v130 + 328, v696 + 1, (unint64_t)v1160);
                v696 = *(unsigned int *)(v130 + 340);
                v698 = *(_QWORD *)(v130 + 328);
                v699 = *(_QWORD *)v697;
                *(_QWORD *)v697 = 0;
                *(_QWORD *)(v698 + 8 * v696) = v699;
                v700 = v1160[0];
              }
              else
              {
                v715 = v694;
                v700 = 0;
                v716 = *(_QWORD *)(v130 + 328);
                v1160[0] = 0;
                *(_QWORD *)(v716 + 8 * v696) = v715;
              }
              *(_DWORD *)(v130 + 340) = v696 + 1;
              WTF::fastFree(v700, v695);
              v717 = *(unsigned int *)(v130 + 340);
              if (!(_DWORD)v717)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A7E6CLL);
              }
              v554 = *(_QWORD *)(*(_QWORD *)(v130 + 328) + 8 * v717 - 8);
              *(_QWORD *)(v130 + 312) = v554;
              *(_QWORD *)(v130 + 320) = v554 + 0x4000;
            }
            *(_BYTE *)(v554 + 56) = 0;
            *(_QWORD *)(v554 + 16) = 0;
            *(_QWORD *)(v554 + 24) = 0;
            *(_BYTE *)(v554 + 32) = 0;
            *(_QWORD *)v554 = off_1E0FD2E98;
            *(_QWORD *)(v554 + 8) = 0;
            *(_QWORD *)(v554 + 64) = &off_1E0FD2F10;
            *(_QWORD *)(v554 + 72) = 0;
            *(_QWORD *)(v554 + 80) = 0;
            *(_QWORD *)(v554 + 88) = v34;
            *(_QWORD *)(v130 + 312) += 96;
            v128 = *(unsigned int *)(v130 + 356);
            if ((_DWORD)v128 == *(_DWORD *)(v130 + 352))
            {
              v555 = v128 + (v128 >> 2);
              if (v555 >= 0x10)
                v556 = v555 + 1;
              else
                v556 = 16;
              if (v556 <= v128 + 1)
                v34 = v128 + 1;
              else
                v34 = v556;
              if (v34 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A7E3CLL);
              }
              v557 = *(void **)(v130 + 344);
              v558 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
              *(_DWORD *)(v130 + 352) = v34;
              *(_QWORD *)(v130 + 344) = v558;
              memcpy(v558, v557, 8 * v128);
              v133 = (unint64_t)v1130;
              if (v557)
              {
                if (*(void **)(v130 + 344) == v557)
                {
                  *(_QWORD *)(v130 + 344) = 0;
                  *(_DWORD *)(v130 + 352) = 0;
                }
                WTF::fastFree((WTF *)v557, v559);
              }
              v128 = *(unsigned int *)(v130 + 356);
              v560 = (_QWORD *)(*(_QWORD *)(v130 + 344) + 8 * v128);
            }
            else
            {
              v560 = (_QWORD *)(*(_QWORD *)(v130 + 344) + 8 * v128);
              v133 = (unint64_t)v1130;
            }
            *v560 = v554;
            *(_DWORD *)(v130 + 356) = v128 + 1;
            v561 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v518 + 8) + 16) + 136) + 24);
            if (*((_DWORD *)v561 + 12) != 10)
              goto LABEL_1566;
            v562 = *(_QWORD *)(v133 + 40);
            v563 = *v561;
            v564 = v561[1];
            v565 = (WTF *)((v564 << 16) | (v563 << 8) | 7);
            v1160[0] = v565;
            v1160[1] = v1124;
            v566 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v562 + 112), (unsigned __int8 *)v1160);
            v567 = *(unsigned __int8 **)(v562 + 112);
            if (v567)
              v567 += 24 * *((unsigned int *)v567 - 1);
            if (v567 == v566 || (v568 = (WTF *)*((_QWORD *)v566 + 2)) == 0)
            {
              v569 = operator new();
              *(_BYTE *)v569 = v563;
              *(_BYTE *)(v569 + 1) = v564;
              *(_QWORD *)(v569 + 8) = v1124;
              *(_DWORD *)(v569 + 48) = 11;
              v570 = *(unsigned int *)(v562 + 108);
              if ((_DWORD)v570 == *(_DWORD *)(v562 + 104))
              {
                v571 = v570 + (v570 >> 2);
                if (v571 >= 0x10)
                  v572 = v571 + 1;
                else
                  v572 = 16;
                if (v572 <= v570 + 1)
                  v573 = v570 + 1;
                else
                  v573 = v572;
                if (v573 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824A7E64);
                }
                v574 = *(void **)(v562 + 96);
                v575 = (void *)WTF::fastMalloc((WTF *)(8 * v573));
                *(_DWORD *)(v562 + 104) = v573;
                *(_QWORD *)(v562 + 96) = v575;
                memcpy(v575, v574, 8 * v570);
                if (v574)
                {
                  if (*(void **)(v562 + 96) == v574)
                  {
                    *(_QWORD *)(v562 + 96) = 0;
                    *(_DWORD *)(v562 + 104) = 0;
                  }
                  WTF::fastFree((WTF *)v574, v576);
                }
                v570 = *(unsigned int *)(v562 + 108);
                v577 = *(_QWORD *)(v562 + 96);
                v578 = (uint64_t *)(v577 + 8 * v570);
              }
              else
              {
                v577 = *(_QWORD *)(v562 + 96);
                v578 = (uint64_t *)(v577 + 8 * v570);
              }
              *v578 = v569;
              *(_DWORD *)(v562 + 108) = v570 + 1;
              if ((_DWORD)v570 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A7E34);
              }
              v568 = *(WTF **)(v577 + 8 * (v570 + 1) - 8);
              v1158 = v568;
              v1179 = (unsigned int *)v565;
              v1180[0] = v1124;
              WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v562 + 112), (unsigned __int8 *)&v1179, (uint64_t *)&v1158, (uint64_t)v1160);
            }
            *(_QWORD *)(v554 + 24) = v568;
            v34 = (unint64_t)v1130;
            v579 = v1130[5];
            v580 = *(_QWORD *)(v579 + 312);
            if ((unint64_t)(*(_QWORD *)(v579 + 320) - v580) <= 0x47)
            {
              v701 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
              v1160[0] = v701;
              v703 = *(unsigned int *)(v579 + 340);
              if ((_DWORD)v703 == *(_DWORD *)(v579 + 336))
              {
                v704 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v579 + 328, v703 + 1, (unint64_t)v1160);
                v703 = *(unsigned int *)(v579 + 340);
                v705 = *(_QWORD *)(v579 + 328);
                v706 = *(_QWORD *)v704;
                *(_QWORD *)v704 = 0;
                *(_QWORD *)(v705 + 8 * v703) = v706;
                v707 = v1160[0];
              }
              else
              {
                v718 = v701;
                v707 = 0;
                v719 = *(_QWORD *)(v579 + 328);
                v1160[0] = 0;
                *(_QWORD *)(v719 + 8 * v703) = v718;
              }
              *(_DWORD *)(v579 + 340) = v703 + 1;
              WTF::fastFree(v707, v702);
              v720 = *(unsigned int *)(v579 + 340);
              if (!(_DWORD)v720)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A7E74);
              }
              v580 = *(_QWORD *)(*(_QWORD *)(v579 + 328) + 8 * v720 - 8);
              *(_QWORD *)(v579 + 312) = v580;
              *(_QWORD *)(v579 + 320) = v580 + 0x4000;
            }
            *(_QWORD *)(v580 + 16) = v1107;
            *(_QWORD *)(v580 + 24) = 0;
            *(_BYTE *)(v580 + 32) = 0;
            *(_BYTE *)(v580 + 56) = 0;
            *(_QWORD *)v580 = off_1E0FD2F60;
            *(_QWORD *)(v580 + 8) = v1109;
            v581 = v1110;
            *(_DWORD *)(v580 + 64) = v1110;
            *(_QWORD *)(v579 + 312) += 72;
            v582 = *(unsigned int *)(v579 + 356);
            if ((_DWORD)v582 == *(_DWORD *)(v579 + 352))
            {
              v583 = v582 + (v582 >> 2);
              if (v583 >= 0x10)
                v584 = v583 + 1;
              else
                v584 = 16;
              if (v584 <= v582 + 1)
                v585 = v582 + 1;
              else
                v585 = v584;
              if (v585 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A7E44);
              }
              v586 = *(void **)(v579 + 344);
              v587 = (void *)WTF::fastMalloc((WTF *)(8 * v585));
              *(_DWORD *)(v579 + 352) = v585;
              *(_QWORD *)(v579 + 344) = v587;
              memcpy(v587, v586, 8 * v582);
              if (v586)
              {
                if (*(void **)(v579 + 344) == v586)
                {
                  *(_QWORD *)(v579 + 344) = 0;
                  *(_DWORD *)(v579 + 352) = 0;
                }
                WTF::fastFree((WTF *)v586, v588);
              }
              v582 = *(unsigned int *)(v579 + 356);
              v589 = (_QWORD *)(*(_QWORD *)(v579 + 344) + 8 * v582);
              v590 = *(unsigned __int8 *)(v580 + 56);
              v34 = (unint64_t)v1130;
              v581 = v1110;
            }
            else
            {
              v590 = 0;
              v589 = (_QWORD *)(*(_QWORD *)(v579 + 344) + 8 * v582);
            }
            *v589 = v580;
            *(_DWORD *)(v579 + 356) = v582 + 1;
            *(_QWORD *)(v580 + 24) = *(_QWORD *)(*(_QWORD *)(v34 + 40) + 168);
            LODWORD(v1156[0]) = v581;
            v1157 = 4;
            if (!v590)
            {
              *(_DWORD *)(v580 + 32) = v581;
              *(_DWORD *)(v580 + 48) = 4;
              v592 = 4;
              *(_BYTE *)(v580 + 56) = 1;
              goto LABEL_959;
            }
            v591 = *(unsigned int *)(v580 + 48);
            if ((_DWORD)v591 != 4)
            {
              if ((_DWORD)v591 == -1)
              {
                *(_DWORD *)(v580 + 32) = v581;
                *(_DWORD *)(v580 + 48) = 4;
                v592 = 4;
                goto LABEL_959;
              }
              ((void (*)(WTF **, uint64_t))off_1E0FD3E30[v591])(v1160, v580 + 32);
              v592 = v1157;
              *(_DWORD *)(v580 + 32) = v1156[0];
              *(_DWORD *)(v580 + 48) = 4;
              if ((_DWORD)v592 != -1)
LABEL_959:
                ((void (*)(WTF **, WTF **))off_1E0FD3E30[v592])(v1160, v1156);
              v1157 = -1;
              v593 = *(_QWORD *)(v34 + 40);
              v594 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v594 = k;
              v594[1] = v580;
              k = *(_QWORD *)(v593 + 312);
              if (*(_QWORD *)(v593 + 320) - k <= 0x5F)
              {
                v708 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
                v1160[0] = v708;
                v710 = *(unsigned int *)(v593 + 340);
                if ((_DWORD)v710 == *(_DWORD *)(v593 + 336))
                {
                  v711 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v593 + 328, v710 + 1, (unint64_t)v1160);
                  v710 = *(unsigned int *)(v593 + 340);
                  v712 = *(_QWORD *)(v593 + 328);
                  v713 = *(_QWORD *)v711;
                  *(_QWORD *)v711 = 0;
                  *(_QWORD *)(v712 + 8 * v710) = v713;
                  v714 = v1160[0];
                }
                else
                {
                  v721 = v708;
                  v714 = 0;
                  v722 = *(_QWORD *)(v593 + 328);
                  v1160[0] = 0;
                  *(_QWORD *)(v722 + 8 * v710) = v721;
                }
                *(_DWORD *)(v593 + 340) = v710 + 1;
                WTF::fastFree(v714, v709);
                v723 = *(unsigned int *)(v593 + 340);
                v34 = (unint64_t)v1130;
                if (!(_DWORD)v723)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824A7E7CLL);
                }
                k = *(_QWORD *)(*(_QWORD *)(v593 + 328) + 8 * v723 - 8);
                *(_QWORD *)(v593 + 312) = k;
                *(_QWORD *)(v593 + 320) = k + 0x4000;
              }
              *(_BYTE *)(k + 56) = 0;
              *(_BYTE *)(k + 32) = 0;
              *(_QWORD *)(k + 16) = 0;
              *(_QWORD *)(k + 24) = 0;
              *(_QWORD *)k = off_1E0FD2F38;
              *(_QWORD *)(k + 8) = 0;
              *(_QWORD *)(k + 64) = v554;
              *(_QWORD *)(k + 72) = v594;
              *(_QWORD *)(k + 80) = 0x200000002;
              *(_WORD *)(k + 88) = 1792;
              *(_QWORD *)(v593 + 312) += 96;
              v595 = *(unsigned int *)(v593 + 356);
              if ((_DWORD)v595 == *(_DWORD *)(v593 + 352))
              {
                v596 = v595 + (v595 >> 2);
                if (v596 >= 0x10)
                  v597 = v596 + 1;
                else
                  v597 = 16;
                if (v597 <= v595 + 1)
                  v598 = v595 + 1;
                else
                  v598 = v597;
                if (v598 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824A7E4CLL);
                }
                v599 = *(void **)(v593 + 344);
                v600 = (void *)WTF::fastMalloc((WTF *)(8 * v598));
                *(_DWORD *)(v593 + 352) = v598;
                *(_QWORD *)(v593 + 344) = v600;
                memcpy(v600, v599, 8 * v595);
                v498 = v1104;
                if (v599)
                {
                  if (*(void **)(v593 + 344) == v599)
                  {
                    *(_QWORD *)(v593 + 344) = 0;
                    *(_DWORD *)(v593 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v599, v601);
                }
                v595 = *(unsigned int *)(v593 + 356);
                v602 = (unint64_t *)(*(_QWORD *)(v593 + 344) + 8 * v595);
              }
              else
              {
                v602 = (unint64_t *)(*(_QWORD *)(v593 + 344) + 8 * v595);
                v498 = v1104;
              }
              *v602 = k;
              *(_DWORD *)(v593 + 356) = v595 + 1;
              goto LABEL_976;
            }
            *(_DWORD *)(v580 + 32) = v581;
            v592 = 4;
            goto LABEL_959;
          }
          v552 = 1;
          while (v549 | v550)
          {
            v547 = (v547 + v552) & v546;
            v548 = (int *)(v543 + 12 * v547);
            v549 = *v548;
            v550 = v548[1];
            ++v552;
            if (*v548 == v544 && v550 == v545)
              goto LABEL_898;
          }
LABEL_976:
          v603 = *(_QWORD *)(v34 + 40);
          v604 = *(_DWORD **)(v1129 + 48);
          if (v604)
            *v604 += 2;
          v605 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v518 + 8) + 16) + 136);
          v606 = *(_QWORD *)(v603 + 312);
          if ((unint64_t)(*(_QWORD *)(v603 + 320) - v606) <= 0xB7)
          {
            v674 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
            v1160[0] = v674;
            v676 = *(unsigned int *)(v603 + 340);
            if ((_DWORD)v676 == *(_DWORD *)(v603 + 336))
            {
              v677 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v603 + 328, v676 + 1, (unint64_t)v1160);
              v676 = *(unsigned int *)(v603 + 340);
              v678 = *(_QWORD *)(v603 + 328);
              v679 = *(_QWORD *)v677;
              *(_QWORD *)v677 = 0;
              *(_QWORD *)(v678 + 8 * v676) = v679;
              v680 = v1160[0];
            }
            else
            {
              v688 = v674;
              v680 = 0;
              v689 = *(_QWORD *)(v603 + 328);
              v1160[0] = 0;
              *(_QWORD *)(v689 + 8 * v676) = v688;
            }
            *(_DWORD *)(v603 + 340) = v676 + 1;
            WTF::fastFree(v680, v675);
            v690 = *(unsigned int *)(v603 + 340);
            if (!(_DWORD)v690)
            {
              __break(0xC471u);
              JUMPOUT(0x1824A7E84);
            }
            v606 = *(_QWORD *)(*(_QWORD *)(v603 + 328) + 8 * v690 - 8);
            *(_QWORD *)(v603 + 312) = v606;
            *(_QWORD *)(v603 + 320) = v606 + 0x4000;
          }
          *(_QWORD *)v606 = &off_1E0FD38A0;
          *(_QWORD *)(v606 + 8) = 0;
          *(_QWORD *)(v606 + 32) = 0;
          *(_QWORD *)(v606 + 40) = 0;
          *(_QWORD *)(v606 + 16) = 0;
          *(_QWORD *)(v606 + 24) = &off_1E0FD2F10;
          *(_QWORD *)(v606 + 64) = 0;
          *(_QWORD *)(v606 + 72) = 0;
          *(_QWORD *)(v606 + 48) = v604;
          *(_QWORD *)(v606 + 56) = &off_1E0FD2F10;
          if (v604)
            *v604 += 2;
          *(_QWORD *)(v606 + 80) = v604;
          *(_QWORD *)(v606 + 88) = 0;
          *(_QWORD *)(v606 + 96) = 0;
          *(_QWORD *)(v606 + 104) = 0;
          *(_QWORD *)(v606 + 112) = v605;
          *(_QWORD *)(v606 + 120) = k;
          *(_WORD *)(v606 + 128) = 257;
          *(_BYTE *)(v606 + 160) = 0;
          *(_BYTE *)(v606 + 164) = 0;
          *(_BYTE *)(v606 + 168) = 0;
          *(_BYTE *)(v606 + 172) = 0;
          *(_BYTE *)(v606 + 176) = 0;
          if (v605)
            v607 = v605;
          else
            v607 = k;
          *(_QWORD *)(v606 + 149) = 0;
          *(_QWORD *)(v606 + 136) = 0;
          *(_QWORD *)(v606 + 144) = 0;
          *(_QWORD *)(v606 + 144) = *(_QWORD *)(v607 + 24);
          *(_QWORD *)(v603 + 312) += 184;
          v608 = *(unsigned int *)(v603 + 356);
          if ((_DWORD)v608 == *(_DWORD *)(v603 + 352))
          {
            v609 = v608 + (v608 >> 2);
            if (v609 >= 0x10)
              v610 = v609 + 1;
            else
              v610 = 16;
            if (v610 <= v608 + 1)
              v611 = v608 + 1;
            else
              v611 = v610;
            if (v611 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824A7E14);
            }
            v612 = *(void **)(v603 + 344);
            v613 = (void *)WTF::fastMalloc((WTF *)(8 * v611));
            *(_DWORD *)(v603 + 352) = v611;
            *(_QWORD *)(v603 + 344) = v613;
            memcpy(v613, v612, 8 * v608);
            v615 = v1130;
            if (v612)
            {
              if (*(void **)(v603 + 344) == v612)
              {
                *(_QWORD *)(v603 + 344) = 0;
                *(_DWORD *)(v603 + 352) = 0;
              }
              WTF::fastFree((WTF *)v612, v614);
            }
            v608 = *(unsigned int *)(v603 + 356);
            v616 = (_QWORD *)(*(_QWORD *)(v603 + 344) + 8 * v608);
          }
          else
          {
            v616 = (_QWORD *)(*(_QWORD *)(v603 + 344) + 8 * v608);
            v615 = v1130;
          }
          *v616 = v606;
          *(_DWORD *)(v603 + 356) = v608 + 1;
          v617 = v615[5];
          v618 = *(WTF **)(v617 + 312);
          if (*(_QWORD *)(v617 + 320) - (_QWORD)v618 <= 0x1FuLL)
          {
            v681 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
            v1160[0] = v681;
            v683 = *(unsigned int *)(v617 + 340);
            if ((_DWORD)v683 == *(_DWORD *)(v617 + 336))
            {
              v684 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v617 + 328, v683 + 1, (unint64_t)v1160);
              v683 = *(unsigned int *)(v617 + 340);
              v685 = *(_QWORD *)(v617 + 328);
              v686 = *(_QWORD *)v684;
              *(_QWORD *)v684 = 0;
              *(_QWORD *)(v685 + 8 * v683) = v686;
              v687 = v1160[0];
            }
            else
            {
              v691 = v681;
              v687 = 0;
              v692 = *(_QWORD *)(v617 + 328);
              v1160[0] = 0;
              *(_QWORD *)(v692 + 8 * v683) = v691;
            }
            *(_DWORD *)(v617 + 340) = v683 + 1;
            WTF::fastFree(v687, v682);
            v693 = *(unsigned int *)(v617 + 340);
            if (!(_DWORD)v693)
            {
              __break(0xC471u);
              JUMPOUT(0x1824A7E8CLL);
            }
            v618 = *(WTF **)(*(_QWORD *)(v617 + 328) + 8 * v693 - 8);
            *(_QWORD *)(v617 + 312) = v618;
            *(_QWORD *)(v617 + 320) = (char *)v618 + 0x4000;
          }
          *(_QWORD *)v618 = &off_1E0FD38D0;
          *((_QWORD *)v618 + 1) = 0;
          *((_QWORD *)v618 + 2) = 0;
          *((_QWORD *)v618 + 3) = v606;
          *(_QWORD *)(v617 + 312) += 32;
          v619 = *(unsigned int *)(v617 + 356);
          if ((_DWORD)v619 == *(_DWORD *)(v617 + 352))
          {
            v620 = v619 + (v619 >> 2);
            if (v620 >= 0x10)
              v621 = v620 + 1;
            else
              v621 = 16;
            if (v621 <= v619 + 1)
              v622 = v619 + 1;
            else
              v622 = v621;
            if (v622 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824A7E1CLL);
            }
            v623 = *(void **)(v617 + 344);
            v624 = (void *)WTF::fastMalloc((WTF *)(8 * v622));
            *(_DWORD *)(v617 + 352) = v622;
            *(_QWORD *)(v617 + 344) = v624;
            memcpy(v624, v623, 8 * v619);
            if (v623)
            {
              if (*(void **)(v617 + 344) == v623)
              {
                *(_QWORD *)(v617 + 344) = 0;
                *(_DWORD *)(v617 + 352) = 0;
              }
              WTF::fastFree((WTF *)v623, v625);
            }
            v619 = *(unsigned int *)(v617 + 356);
            v626 = (WTF **)(*(_QWORD *)(v617 + 344) + 8 * v619);
          }
          else
          {
            v626 = (WTF **)(*(_QWORD *)(v617 + 344) + 8 * v619);
          }
          *v626 = v618;
          *(_DWORD *)(v617 + 356) = v619 + 1;
          v627 = v615[5];
          v628 = *(_QWORD *)(v1119 + 112);
          v629 = v628 + 40;
          v1160[0] = v618;
          v630 = *(unsigned int *)(v628 + 52);
          if (v630 == *(_DWORD *)(v628 + 48))
          {
            v631 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v628 + 40, v630 + 1, (unint64_t)v1160);
            v630 = *(unsigned int *)(v628 + 52);
          }
          else
          {
            v631 = v1160;
          }
          v632 = *(_QWORD **)(v628 + 40);
          result = (uint64_t)memmove(v632 + 1, v632, 8 * v630);
          *v632 = *v631;
          ++*(_DWORD *)(v628 + 52);
          v633 = *(unsigned int *)(v627 + 412);
          if ((_DWORD)v633 == *(_DWORD *)(v627 + 408))
          {
            v634 = v633 + (v633 >> 2);
            if (v634 >= 0x10)
              v635 = v634 + 1;
            else
              v635 = 16;
            if (v635 <= v633 + 1)
              v636 = v633 + 1;
            else
              v636 = v635;
            if (v636 >> 27)
            {
              __break(0xC471u);
              JUMPOUT(0x1824A7E24);
            }
            v637 = *(WTF **)(v627 + 400);
            result = WTF::fastMalloc((WTF *)(32 * v636));
            v638 = (WTF *)result;
            *(_DWORD *)(v627 + 408) = v636;
            *(_QWORD *)(v627 + 400) = result;
            if ((_DWORD)v633)
            {
              v639 = 32 * v633;
              v640 = v637;
              v495 = v1135;
              v496 = v1141;
              while (1)
              {
                v641 = (WTF *)*((_QWORD *)v640 + 3);
                if (v641)
                {
                  if (v640 != v641)
                  {
                    *((_QWORD *)v638 + 3) = v641;
                    *((_QWORD *)v640 + 3) = 0;
                    goto LABEL_1027;
                  }
                  *((_QWORD *)v638 + 3) = v638;
                  (*(void (**)(_QWORD, WTF *, __n128, __n128))(**((_QWORD **)v640 + 3) + 24))(*((_QWORD *)v640 + 3), v638, v495, v496);
                  v495 = v1135;
                  v496 = v1141;
                  result = *((_QWORD *)v640 + 3);
                  if (v640 == (WTF *)result)
                    goto LABEL_1031;
                }
                else
                {
                  *((_QWORD *)v638 + 3) = 0;
                  result = *((_QWORD *)v640 + 3);
                  if (v640 == (WTF *)result)
                  {
LABEL_1031:
                    result = (uint64_t)v640;
                    v642 = 4;
LABEL_1035:
                    result = (*(uint64_t (**)(__n128, __n128))(*(_QWORD *)result + 8 * v642))(v495, v496);
                    v495 = v1135;
                    v496 = v1141;
                    goto LABEL_1027;
                  }
                }
                if (result)
                {
                  v642 = 5;
                  goto LABEL_1035;
                }
LABEL_1027:
                v638 = (WTF *)((char *)v638 + 32);
                v640 = (WTF *)((char *)v640 + 32);
                v639 -= 32;
                if (!v639)
                {
                  v638 = *(WTF **)(v627 + 400);
                  v644 = v1115;
                  if (!v637)
                    goto LABEL_1043;
                  goto LABEL_1040;
                }
              }
            }
            v495 = v1135;
            v496 = v1141;
            v644 = v1115;
            if (!v637)
              goto LABEL_1043;
LABEL_1040:
            if (v638 == v637)
            {
              *(_QWORD *)(v627 + 400) = 0;
              *(_DWORD *)(v627 + 408) = 0;
            }
            result = WTF::fastFree(v637, v494);
            v638 = *(WTF **)(v627 + 400);
            v495 = v1135;
            v496 = v1141;
LABEL_1043:
            v633 = *(unsigned int *)(v627 + 412);
            v643 = (_QWORD *)((char *)v638 + 32 * v633);
            v34 = (unint64_t)v1130;
            v508 = v1118;
          }
          else
          {
            v643 = (_QWORD *)(*(_QWORD *)(v627 + 400) + 32 * v633);
            v34 = (unint64_t)v1130;
            v495 = v1135;
            v496 = v1141;
            v644 = v1115;
            v508 = v1118;
          }
          *v643 = &off_1E0FD4278;
          v643[1] = v629;
          v643[2] = 0;
          v643[3] = v643;
          v645 = v518 + 16;
          v518 = v644;
          *(_DWORD *)(v627 + 412) = v633 + 1;
          if (v645 != v644)
          {
            v518 = v645;
            while (*(_DWORD *)v518 >= 0xFFFFFFFE)
            {
              v518 += 16;
              if (v518 == v644)
              {
                v518 = v644;
                break;
              }
            }
          }
          if (v518 == v1112)
            goto LABEL_1146;
        }
        if (v523)
        {
          v525 = *((_DWORD *)v523 + 1);
          *(_DWORD *)v523 += 2;
          if (v525 < 0 || (v526 = (v525 + 2), __OFADD__(v525, 2)))
          {
LABEL_1582:
            __break(0xC471u);
            JUMPOUT(0x1824A7E2CLL);
          }
          if ((*((_BYTE *)v523 + 16) & 4) == 0)
          {
            if (v526 > 0x7FFFFFEF)
              goto LABEL_1582;
            WTF::tryFastCompactMalloc((WTF *)(2 * v526 + 20));
            v527 = (int8x16_t)v1135;
            v528 = (int8x16_t)v1141;
            v529 = v1160[0];
            if (!v1160[0])
              goto LABEL_1582;
            *(_DWORD *)v1160[0] = 2;
            *((_DWORD *)v529 + 1) = v526;
            *((_QWORD *)v529 + 1) = (char *)v529 + 20;
            *((_QWORD *)v529 + 2) = 0x5F005F00000000;
            v530 = (_WORD *)((char *)v529 + 24);
            v531 = (int8x16_t *)*((_QWORD *)v523 + 1);
            v532 = *((unsigned int *)v523 + 1);
            if ((*((_BYTE *)v523 + 16) & 4) == 0)
            {
              if (!(_DWORD)v532)
                goto LABEL_1125;
              if ((_DWORD)v532 == 1)
              {
                *v530 = v531->i16[0];
                goto LABEL_1125;
              }
              v663 = 2 * v532;
LABEL_1113:
              memcpy(v530, v531, v663);
              v527 = (int8x16_t)v1135;
              v528 = (int8x16_t)v1141;
              goto LABEL_1125;
            }
            if (v532 < 0x40)
            {
              v646 = (unint64_t)v529 + 24;
              v653 = &v530[v532];
              if (v530 == v653)
                goto LABEL_1125;
            }
            else
            {
              v646 = (unint64_t)&v530[v532 & 0xFFFFFFC0];
              v647 = (char *)v529 + 24;
              do
              {
                v1191.val[1] = v528;
                v1181.val[0] = *v531;
                v648 = v531[1];
                v1183.val[0] = v531[2];
                v649 = v531[3];
                v531 += 4;
                v1191.val[0] = v649;
                v1183.val[1] = v1191.val[1];
                v1187.val[0] = v648;
                v1181.val[1] = v1191.val[1];
                v650 = v647;
                vst2q_s8(v650, v1181);
                v650 += 32;
                v1187.val[1] = v1191.val[1];
                vst2q_s8(v650, v1187);
                v651 = v647 + 64;
                vst2q_s8(v651, v1183);
                v527 = v1191.val[0];
                v528 = v1191.val[1];
                v652 = v647 + 96;
                vst2q_s8(v652, v1191);
                v647 += 128;
              }
              while (v647 != (char *)v646);
              v653 = &v530[v532];
              if ((_WORD *)v646 == v653)
                goto LABEL_1125;
            }
            v654 = (unint64_t)v529 + 2 * v532 - v646 + 22;
            if (v654 < 0xE
              || (v646 < (unint64_t)v531->u64 + (v654 >> 1) + 1
                ? (v655 = (unint64_t)v531 >= v646 + (v654 & 0xFFFFFFFFFFFFFFFELL) + 2)
                : (v655 = 1),
                  !v655))
            {
              v660 = (_WORD *)v646;
              v661 = v531;
              goto LABEL_1064;
            }
            v656 = v527;
            v657 = v528;
            v658 = (v654 >> 1) + 1;
            if (v654 < 0x3E)
            {
              v659 = 0;
              goto LABEL_1071;
            }
            v659 = v658 & 0xFFFFFFFFFFFFFFE0;
            v664 = (uint8x8_t *)&v531[1];
            v665 = (uint16x8_t *)(v646 + 32);
            v666 = v658 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v667 = *(uint8x16_t *)v664[-2].i8;
              v668 = vmovl_u8(*v664);
              v669 = vmovl_high_u8(*(uint8x16_t *)v664->i8);
              v665[-2] = vmovl_u8(*(uint8x8_t *)v667.i8);
              v665[-1] = vmovl_high_u8(v667);
              *v665 = v668;
              v665[1] = v669;
              v665 += 4;
              v664 += 4;
              v666 -= 32;
            }
            while (v666);
            if (v658 != v659)
            {
              if ((v658 & 0x18) != 0)
              {
LABEL_1071:
                v660 = (_WORD *)(v646 + 2 * (v658 & 0xFFFFFFFFFFFFFFF8));
                v661 = (int8x16_t *)((char *)v531 + (v658 & 0xFFFFFFFFFFFFFFF8));
                v670 = (uint8x8_t *)&v531->i8[v659];
                v671 = (uint16x8_t *)(v646 + 2 * v659);
                v672 = v659 - (v658 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v673 = *v670++;
                  *v671++ = vmovl_u8(v673);
                  v672 += 8;
                }
                while (v672);
                v527 = v656;
                v528 = v657;
                if (v658 == (v658 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_1125;
              }
              else
              {
                v661 = (int8x16_t *)((char *)v531 + v659);
                v660 = (_WORD *)(v646 + 2 * v659);
                v527 = v656;
                v528 = v657;
              }
              do
              {
LABEL_1064:
                v662 = v661->u8[0];
                v661 = (int8x16_t *)((char *)v661 + 1);
                *v660++ = v662;
              }
              while (v660 != v653);
              goto LABEL_1125;
            }
LABEL_1136:
            v527 = v656;
            v528 = v657;
            goto LABEL_1125;
          }
        }
        else
        {
          v526 = 2;
        }
        WTF::tryFastCompactMalloc((WTF *)(v526 + 20));
        v529 = v1160[0];
        v527 = (int8x16_t)v1135;
        v528 = (int8x16_t)v1141;
        if (!v1160[0])
          goto LABEL_1582;
        *(_DWORD *)v1160[0] = 2;
        *((_DWORD *)v529 + 1) = v526;
        *((_WORD *)v529 + 10) = 24415;
        *((_QWORD *)v529 + 1) = (char *)v529 + 20;
        *((_DWORD *)v529 + 4) = 4;
        if (v523)
        {
          v530 = (_WORD *)((char *)v529 + 22);
          v531 = (int8x16_t *)*((_QWORD *)v523 + 1);
          v663 = *((unsigned int *)v523 + 1);
          if ((*((_BYTE *)v523 + 16) & 4) == 0)
          {
            if (v663 < 0x10)
            {
              v724 = (unint64_t)v529 + 22;
              v727 = (char *)v530 + v663;
              if (v530 == (_WORD *)((char *)v530 + v663))
                goto LABEL_1125;
            }
            else
            {
              v724 = (unint64_t)v530 + (v663 & 0xFFFFFFF0);
              v725 = (unsigned __int128 *)((char *)v529 + 22);
              do
              {
                v726 = (unsigned __int128)vld2q_s8(v531->i8);
                v531 += 2;
                *v725++ = v726;
              }
              while (v725 != (unsigned __int128 *)v724);
              v527 = (int8x16_t)v1135;
              v727 = (char *)v530 + v663;
              if ((_WORD *)v724 == (_WORD *)((char *)v530 + v663))
                goto LABEL_1125;
            }
            v728 = (char *)v529 + v663 - v724;
            v729 = (unint64_t)(v728 + 22);
            if ((unint64_t)(v728 + 22) < 8
              || (v724 < (unint64_t)&v531[2].u64[1] + 2 * (_QWORD)v728 + 4
                ? (v730 = v531 >= (int8x16_t *)((char *)v529 + v663 + 22))
                : (v730 = 1),
                  !v730))
            {
              v732 = (_BYTE *)v724;
              v733 = v531;
              goto LABEL_1124;
            }
            v656 = v527;
            v657 = (int8x16_t)v1141;
            if (v729 < 0x20)
            {
              v731 = 0;
              goto LABEL_1138;
            }
            v731 = v729 & 0xFFFFFFFFFFFFFFE0;
            v744 = v531 + 2;
            v745 = (int8x16_t *)(v724 + 16);
            v746 = v729 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v748 = v744[-2];
              v747 = v744[-1];
              v750 = *v744;
              v749 = v744[1];
              v744 += 4;
              v745[-1] = vuzp1q_s8(v748, v747);
              *v745 = vuzp1q_s8(v750, v749);
              v745 += 2;
              v746 -= 32;
            }
            while (v746);
            if (v729 == v731)
              goto LABEL_1136;
            if ((v729 & 0x18) != 0)
            {
LABEL_1138:
              v732 = (_BYTE *)(v724 + (v729 & 0xFFFFFFFFFFFFFFF8));
              v733 = (int8x16_t *)((char *)v531 + 2 * (v729 & 0xFFFFFFFFFFFFFFF8));
              v751 = (int16x8_t *)((char *)v531 + 2 * v731);
              v752 = (int8x8_t *)(v724 + v731);
              v753 = v731 - (v729 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v754 = *v751++;
                *v752++ = vmovn_s16(v754);
                v753 += 8;
              }
              while (v753);
              v527 = v656;
              v528 = (int8x16_t)v1141;
              if (v729 == (v729 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_1125;
            }
            else
            {
              v733 = (int8x16_t *)((char *)v531 + 2 * v731);
              v732 = (_BYTE *)(v724 + v731);
              v527 = v656;
              v528 = (int8x16_t)v1141;
            }
            do
            {
LABEL_1124:
              v734 = v733->i8[0];
              v733 = (int8x16_t *)((char *)v733 + 2);
              *v732++ = v734;
            }
            while (v732 != v727);
            goto LABEL_1125;
          }
          if ((_DWORD)v663)
          {
            if ((_DWORD)v663 != 1)
              goto LABEL_1113;
            *(_BYTE *)v530 = v531->i8[0];
          }
LABEL_1125:
          v735 = *(_DWORD *)v523 - 2;
          if (*(_DWORD *)v523 == 2)
          {
            v1136 = v527;
            v1142 = v528;
            WTF::StringImpl::destroy();
            v527 = v1136;
            v528 = v1142;
            v736 = *(_DWORD *)v523 - 2;
            if (*(_DWORD *)v523 == 2)
              goto LABEL_1129;
LABEL_1127:
            *(_DWORD *)v523 = v736;
          }
          else
          {
            *(_DWORD *)v523 = v735;
            v736 = v735 - 2;
            if (v736)
              goto LABEL_1127;
LABEL_1129:
            v1137 = v527;
            v1143 = v528;
            WTF::StringImpl::destroy();
            v527 = v1137;
            v528 = v1143;
          }
        }
        v1135 = (__n128)v527;
        v1141 = (__n128)v528;
        v533 = *(_QWORD *)(v34 + 40);
        *(_BYTE *)(v533 + 8) = 1;
        v523 = v529;
        v1160[0] = 0;
        v1160[1] = 0;
        k = *(_QWORD *)(v533 + 312);
        if (*(_QWORD *)(v533 + 320) - k > 0x87)
          goto LABEL_870;
        goto LABEL_1131;
      }
LABEL_1146:
      v758 = v498 + 16;
      v498 = v1100;
      if (v758 != v1100)
      {
        v498 = v758;
        while (*(_DWORD *)v498 >= 0xFFFFFFFE)
        {
          v498 += 16;
          if (v498 == v1100)
          {
            v498 = v1100;
            break;
          }
        }
      }
      if ((_DWORD *)v498 == v1099)
      {
        v1119 = *v1102;
        break;
      }
    }
  }
  if (v1147)
  {
    v1138 = *(unsigned int *)(*(_QWORD *)(v1119 + 112) + 52);
    v759 = v1145;
    v760 = 8 * v1147;
    v761 = v760;
    v762 = v1145;
    do
    {
      v768 = *(_QWORD *)v762;
      v769 = (_QWORD *)(v1130[5] + 312);
      v1160[0] = 0;
      v1160[1] = 0;
      v770 = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>(v769, v1160, *(_QWORD *)(v768 + 16));
      v771 = v1130[5];
      v772 = *(_QWORD *)(v1119 + 112);
      v1160[0] = v770;
      v773 = *(unsigned int *)(v772 + 52);
      if (v773 == *(_DWORD *)(v772 + 48))
      {
        v774 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v772 + 40, v773 + 1, (unint64_t)v1160);
        v773 = *(unsigned int *)(v772 + 52);
      }
      else
      {
        v774 = v1160;
      }
      v775 = *(_QWORD **)(v772 + 40);
      memmove(v775 + 1, v775, 8 * v773);
      *v775 = *v774;
      ++*(_DWORD *)(v772 + 52);
      v776 = (_QWORD *)(v771 + 400);
      v766 = *(unsigned int *)(v771 + 412);
      if ((_DWORD)v766 == *(_DWORD *)(v771 + 408))
      {
        v763 = v766 + (v766 >> 2);
        if (v763 >= 0x10)
          v764 = v763 + 1;
        else
          v764 = 16;
        if (v764 <= v766 + 1)
          v765 = v766 + 1;
        else
          v765 = v764;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v776, v765);
        v766 = *(unsigned int *)(v771 + 412);
        v767 = (_QWORD *)(*(_QWORD *)(v771 + 400) + 32 * v766);
      }
      else
      {
        v767 = (_QWORD *)(*v776 + 32 * v766);
      }
      *v767 = &off_1E0FD4278;
      v767[1] = v772 + 40;
      v767[2] = 0;
      v767[3] = v767;
      v762 = (WTF *)((char *)v762 + 8);
      *(_DWORD *)(v771 + 412) = v766 + 1;
      v761 -= 8;
    }
    while (v761);
    v777 = *(unsigned int *)(*(_QWORD *)(v1119 + 112) + 52);
    v1158 = 0;
    v1159 = 0;
    v34 = (unint64_t)&off_1E0FD2F10;
    do
    {
      v778 = *(_QWORD *)(*(_QWORD *)v759 + 16);
      if (*(unsigned __int16 *)(v778 + 152) >= 0x100u && *(_WORD *)(v778 + 152) == 5)
      {
        v780 = *(_QWORD *)(v778 + 144);
        v781 = v1130[5];
        v1156[0] = 0;
        v1156[1] = 0;
        v782 = *(_DWORD **)(v778 + 48);
        if (v782)
          *v782 += 2;
        v1160[1] = 0;
        *(_QWORD *)&v1161 = 0;
        v1160[0] = (WTF *)&off_1E0FD2F10;
        *((_QWORD *)&v1161 + 1) = v782;
        v783 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v781 + 312), v1156, (uint64_t)v1160);
        v784 = (_DWORD *)*((_QWORD *)&v1161 + 1);
        v1160[0] = (WTF *)&off_1E0FD2F10;
        *((_QWORD *)&v1161 + 1) = 0;
        if (v784)
        {
          if (*v784 == 2)
            WTF::StringImpl::destroy();
          else
            *v784 -= 2;
        }
        v783[3] = v780;
        WGSL::RewriteGlobalVariables::storeInitialValue((WTF *)v1130, (uint64_t)v783, (uint64_t)&v1158, 0, 0);
      }
      v759 = (WTF *)((char *)v759 + 8);
      v760 -= 8;
    }
    while (v760);
    if (HIDWORD(v1159))
    {
      v785 = (_QWORD *)(v1130[5] + 312);
      v1156[0] = 0;
      v1156[1] = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v1160[1] = 0;
      *(_QWORD *)&v1161 = 0;
      v1160[0] = (WTF *)&off_1E0FD2F10;
      v786 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v785, v1156, (uint64_t)v1160);
      v787 = (_DWORD *)*((_QWORD *)&v1161 + 1);
      v1160[0] = (WTF *)&off_1E0FD2F10;
      *((_QWORD *)&v1161 + 1) = 0;
      if (v787)
      {
        if (*v787 == 2)
          WTF::StringImpl::destroy();
        else
          *v787 -= 2;
      }
      v788 = v1130[5];
      v786[3] = *(_QWORD *)(v788 + 120);
      v1160[0] = 0;
      v1160[1] = 0;
      v1156[0] = 0;
      v1156[1] = 0;
      v790 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v788 + 312), v1160, (uint64_t)v786, (uint64_t *)v1156);
      v791 = v1156[0];
      if (v1156[0])
      {
        v1156[0] = 0;
        LODWORD(v1156[1]) = 0;
        WTF::fastFree(v791, v789);
      }
      k = v777 - v1138;
      v792 = v1130[5];
      v790[3] = *(_QWORD *)(v792 + 144);
      v1160[0] = 0;
      v1160[1] = 0;
      v793 = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::CallStatement,WGSL::SourceSpan,WGSL::AST::CallExpression &,void>((_QWORD *)(v792 + 312), v1160, (uint64_t)v790);
      v794 = v1130[5];
      v795 = *(_QWORD *)(v1119 + 112);
      v1160[0] = v793;
      v796 = *(unsigned int *)(v795 + 52);
      if ((_DWORD)v796 == *(_DWORD *)(v795 + 48))
      {
        v797 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v795 + 40, v796 + 1, (unint64_t)v1160);
        LODWORD(v796) = *(_DWORD *)(v795 + 52);
      }
      else
      {
        v797 = v1160;
      }
      v798 = (_QWORD *)(*(_QWORD *)(v795 + 40) + 8 * k);
      memmove(v798 + 1, v798, 8 * v796 - 8 * k);
      *v798 = *v797;
      ++*(_DWORD *)(v795 + 52);
      v799 = (_QWORD *)(v794 + 400);
      v800 = *(unsigned int *)(v794 + 412);
      if ((_DWORD)v800 == *(_DWORD *)(v794 + 408))
      {
        v801 = v800 + (v800 >> 2);
        if (v801 >= 0x10)
          v802 = v801 + 1;
        else
          v802 = 16;
        if (v802 <= v800 + 1)
          v803 = v800 + 1;
        else
          v803 = v802;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v799, v803);
        v800 = *(unsigned int *)(v794 + 412);
        v804 = (_QWORD *)(*(_QWORD *)(v794 + 400) + 32 * v800);
      }
      else
      {
        v804 = (_QWORD *)(*v799 + 32 * v800);
      }
      *v804 = &off_1E0FD4278;
      v804[1] = v795 + 40;
      v804[2] = k;
      v804[3] = v804;
      *(_DWORD *)(v794 + 412) = v800 + 1;
      v128 = v1119 + 56;
      v805 = *(_QWORD *)(v1119 + 56);
      v806 = *(unsigned int *)(v1119 + 68);
      if (!(_DWORD)v806)
      {
LABEL_1207:
        v810 = (_QWORD *)(v1130[5] + 312);
        v1156[0] = 0;
        v1156[1] = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v1160[1] = 0;
        *(_QWORD *)&v1161 = 0;
        v1160[0] = (WTF *)&off_1E0FD2F10;
        v133 = (unint64_t)WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v810, v1156, (uint64_t)v1160);
        v811 = (_DWORD *)*((_QWORD *)&v1161 + 1);
        v1160[0] = (WTF *)&off_1E0FD2F10;
        *((_QWORD *)&v1161 + 1) = 0;
        if (v811)
        {
          if (*v811 == 2)
            WTF::StringImpl::destroy();
          else
            *v811 -= 2;
        }
        v130 = v1130[5];
        *(_QWORD *)(v133 + 24) = *(_QWORD *)(v130 + 168);
        v813 = *(_QWORD *)(v130 + 312);
        if ((unint64_t)(*(_QWORD *)(v130 + 320) - v813) <= 0x1F)
          goto LABEL_1567;
        goto LABEL_1213;
      }
      v807 = 8 * v806;
      while (1)
      {
        v808 = *(_QWORD **)v805;
        if (*(unsigned __int16 *)(*(_QWORD *)v805 + 89) >= 0x100u
          && *(_WORD *)(*(_QWORD *)v805 + 89) == 5)
        {
          break;
        }
        v805 += 8;
        v807 -= 8;
        if (!v807)
          goto LABEL_1207;
      }
LABEL_1234:
      v827 = (int *)v808[7];
      if (v827)
      {
        v828 = *v827;
        v829 = v1130[5];
        v1156[0] = 0;
        v1156[1] = 0;
        *v827 = v828 + 4;
      }
      else
      {
        v829 = v1130[5];
        v1156[0] = 0;
        v1156[1] = 0;
      }
      v1160[0] = (WTF *)v34;
      v1160[1] = 0;
      *(_QWORD *)&v1161 = 0;
      *((_QWORD *)&v1161 + 1) = v827;
      v830 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v829 + 312), v1156, (uint64_t)v1160);
      v831 = (_DWORD *)*((_QWORD *)&v1161 + 1);
      v1160[0] = (WTF *)v34;
      *((_QWORD *)&v1161 + 1) = 0;
      if (v831)
      {
        if (*v831 == 2)
          WTF::StringImpl::destroy();
        else
          *v831 -= 2;
      }
      v832 = v1130[5];
      v830[3] = *(_QWORD *)(v832 + 168);
      v1160[0] = 0;
      v1160[1] = 0;
      LODWORD(v1156[0]) = 0;
      v833 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>((_QWORD *)(v832 + 312), v1160, (int *)v1156);
      v834 = v1130[5];
      v830[3] = *(_QWORD *)(v834 + 168);
      v1160[0] = 0;
      v1160[1] = 0;
      LOBYTE(v1156[0]) = 10;
      v835 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>((_QWORD *)(v834 + 312), v1160, (uint64_t)v830, (uint64_t)v833, (char *)v1156);
      v836 = v1130[5];
      v835[3] = *(_QWORD *)(v836 + 152);
      v1160[0] = 0;
      v1160[1] = 0;
      v1156[0] = 0;
      v1156[1] = 0;
      v838 = WGSL::AST::Builder::construct<WGSL::AST::CompoundStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,void>((_QWORD *)(v836 + 312), v1160, (uint64_t *)v1156, (uint64_t *)&v1158);
      v839 = v1156[0];
      if (v1156[0])
      {
        v1156[0] = 0;
        LODWORD(v1156[1]) = 0;
        WTF::fastFree(v839, v837);
      }
      v840 = v1130[5];
      v841 = *(WTF **)(v840 + 312);
      if (*(_QWORD *)(v840 + 320) - (_QWORD)v841 <= 0x3FuLL)
      {
        v1079 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
        v1160[0] = v1079;
        v1081 = *(unsigned int *)(v840 + 340);
        if ((_DWORD)v1081 == *(_DWORD *)(v840 + 336))
        {
          v1082 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v840 + 328, v1081 + 1, (unint64_t)v1160);
          v1081 = *(unsigned int *)(v840 + 340);
          v1083 = *(_QWORD *)(v840 + 328);
          v1084 = *(_QWORD *)v1082;
          *(_QWORD *)v1082 = 0;
          *(_QWORD *)(v1083 + 8 * v1081) = v1084;
          v1085 = v1160[0];
        }
        else
        {
          v1093 = v1079;
          v1085 = 0;
          v1094 = *(_QWORD *)(v840 + 328);
          v1160[0] = 0;
          *(_QWORD *)(v1094 + 8 * v1081) = v1093;
        }
        *(_DWORD *)(v840 + 340) = v1081 + 1;
        WTF::fastFree(v1085, v1080);
        v1095 = *(unsigned int *)(v840 + 340);
        if (!(_DWORD)v1095)
        {
          __break(0xC471u);
          JUMPOUT(0x1824A7EFCLL);
        }
        v841 = *(WTF **)(*(_QWORD *)(v840 + 328) + 8 * v1095 - 8);
        *(_QWORD *)(v840 + 312) = v841;
        *(_QWORD *)(v840 + 320) = (char *)v841 + 0x4000;
      }
      *(_QWORD *)v841 = &off_1E0FD45D8;
      *((_QWORD *)v841 + 1) = 0;
      *((_QWORD *)v841 + 2) = 0;
      *((_QWORD *)v841 + 3) = v835;
      *((_QWORD *)v841 + 4) = v838;
      *((_QWORD *)v841 + 5) = 0;
      *((_QWORD *)v841 + 6) = 0;
      *((_QWORD *)v841 + 7) = 0;
      *(_QWORD *)(v840 + 312) += 64;
      v842 = *(unsigned int *)(v840 + 356);
      if ((_DWORD)v842 == *(_DWORD *)(v840 + 352))
      {
        v843 = v842 + (v842 >> 2);
        if (v843 >= 0x10)
          v844 = v843 + 1;
        else
          v844 = 16;
        if (v844 <= v842 + 1)
          v845 = v842 + 1;
        else
          v845 = v844;
        if (v845 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824A7EECLL);
        }
        v846 = *(void **)(v840 + 344);
        v847 = (void *)WTF::fastMalloc((WTF *)(8 * v845));
        *(_DWORD *)(v840 + 352) = v845;
        *(_QWORD *)(v840 + 344) = v847;
        memcpy(v847, v846, 8 * v842);
        if (v846)
        {
          if (*(void **)(v840 + 344) == v846)
          {
            *(_QWORD *)(v840 + 344) = 0;
            *(_DWORD *)(v840 + 352) = 0;
          }
          WTF::fastFree((WTF *)v846, v848);
        }
        v842 = *(unsigned int *)(v840 + 356);
        v849 = (WTF **)(*(_QWORD *)(v840 + 344) + 8 * v842);
      }
      else
      {
        v849 = (WTF **)(*(_QWORD *)(v840 + 344) + 8 * v842);
      }
      *v849 = v841;
      *(_DWORD *)(v840 + 356) = v842 + 1;
      v850 = v1130[5];
      v851 = *(_QWORD *)(v1119 + 112);
      v1160[0] = v841;
      v852 = *(unsigned int *)(v851 + 52);
      if ((_DWORD)v852 == *(_DWORD *)(v851 + 48))
      {
        v853 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v851 + 40, v852 + 1, (unint64_t)v1160);
        LODWORD(v852) = *(_DWORD *)(v851 + 52);
      }
      else
      {
        v853 = v1160;
      }
      v854 = (_QWORD *)(*(_QWORD *)(v851 + 40) + 8 * k);
      memmove(v854 + 1, v854, 8 * v852 - 8 * k);
      *v854 = *v853;
      ++*(_DWORD *)(v851 + 52);
      v855 = (_QWORD *)(v850 + 400);
      v856 = *(unsigned int *)(v850 + 412);
      if ((_DWORD)v856 == *(_DWORD *)(v850 + 408))
      {
        v857 = v856 + (v856 >> 2);
        if (v857 >= 0x10)
          v858 = v857 + 1;
        else
          v858 = 16;
        if (v858 <= v856 + 1)
          v859 = v856 + 1;
        else
          v859 = v858;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v855, v859);
        v856 = *(unsigned int *)(v850 + 412);
        v860 = (_QWORD *)(*(_QWORD *)(v850 + 400) + 32 * v856);
      }
      else
      {
        v860 = (_QWORD *)(*v855 + 32 * v856);
      }
      *v860 = &off_1E0FD4278;
      v860[1] = v851 + 40;
      v860[2] = k;
      v860[3] = v860;
      *(_DWORD *)(v850 + 412) = v856 + 1;
      if (v827)
      {
        if (*v827 == 2)
          WTF::StringImpl::destroy();
        else
          *v827 -= 2;
      }
    }
    result = (uint64_t)v1158;
    v34 = (unint64_t)v1130;
    if (v1158)
    {
      v1158 = 0;
      LODWORD(v1159) = 0;
      result = WTF::fastFree((WTF *)result, v494);
    }
  }
  v140 = v1145;
  if (v1147)
  {
    k = 8 * v1147;
    v130 = (unint64_t)v1156;
    v128 = (unint64_t)v1145;
    v133 = (unint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix;
    do
    {
      if (*(_QWORD *)v128)
      {
        v862 = *(_QWORD *)(*(_QWORD *)v128 + 16);
        if (v862)
        {
          if (*(unsigned __int16 *)(v862 + 152) >= 0x100u && *(_WORD *)(v862 + 152) == 5)
          {
            v494 = *(unsigned int **)(v862 + 144);
            if (v494)
            {
              v864 = v494[12];
              if ((_DWORD)v864 == -1)
                goto LABEL_1566;
              v1160[0] = (WTF *)v1156;
              result = ((uint64_t (*)(WTF **, __n128, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v864])(v1160, v495, v496);
              v861 = ((_DWORD)result + 15) & 0xFFFFFFF0;
            }
            else
            {
              v861 = 0;
            }
            *(_QWORD *)(*(_QWORD *)(v34 + 128) + 80) += v861;
          }
        }
      }
      v128 += 8;
      k -= 8;
    }
    while (k);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
  v307 = (int)v1170;
  if ((_DWORD)v1170 != -1)
LABEL_1291:
    result = ((uint64_t (*)(WTF **, unint64_t *))off_1E0FD4158[v307])(v1160, &v1168);
  if (v140)
  {
    v1145 = 0;
    v1146 = 0;
    result = WTF::fastFree(v140, v494);
  }
  v865 = (uint64_t)v1144;
  if (v1144)
  {
    v866 = *(v1144 - 1);
    if ((_DWORD)v866)
    {
      v867 = v1144 + 2;
      do
      {
        if (*((_DWORD *)v867 - 2) != -2 && *v867)
          WTF::fastFree((WTF *)(*v867 - 16), v494);
        v867 += 2;
        --v866;
      }
      while (v866);
    }
    result = WTF::fastFree((WTF *)(v865 - 16), v494);
  }
  v138 = v1150;
  if (v1150 != -1)
    return ((uint64_t (*)(WTF **, uint64_t *))off_1E0FD4168[v138])(v1160, &v1148);
  return result;
}

uint64_t WGSL::RewriteGlobalVariables::visitCallee(WGSL::CallGraph::Callee const&)::$_1::operator()(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  _QWORD *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  void *v78;
  uint64_t j;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  size_t v103;
  _QWORD *v104;
  int8x16_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  const WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  void *v125;
  WTF *v126;
  BOOL v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  WTF *v134;
  _DWORD *v135;
  uint64_t v136;
  _BYTE *v137;
  int8x16_t *v138;
  unint64_t v139;
  unsigned __int128 *v140;
  unsigned __int128 v141;
  _BYTE *v142;
  size_t v143;
  unint64_t v144;
  BOOL v145;
  unint64_t v146;
  _BYTE *v147;
  int8x16_t *v148;
  char v149;
  _BYTE *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t v164;
  int8x16_t *v165;
  uint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  void *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  WTF *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  WTF *v183;
  WTF *v184;
  uint64_t v185;
  _QWORD *v186;
  int8x16_t *v187;
  int8x16_t *v188;
  unint64_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int16x8_t *v194;
  int8x8_t *v195;
  unint64_t v196;
  int16x8_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  _QWORD v206[3];
  uint64_t v207;

  v200 = result;
  v3 = *(_QWORD **)result;
  v4 = *(WTF::StringImpl ***)(*(_QWORD *)result + 96);
  if (v4)
  {
    if (!*(_DWORD *)(*(_QWORD *)(result + 8) + 20))
    {
      do
        v4 = (WTF::StringImpl **)v4[2];
      while (v4);
      goto LABEL_4;
    }
    while (1)
    {
      v15 = *(_QWORD *)(v200 + 8);
      v16 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v16)
        break;
LABEL_11:
      v4 = (WTF::StringImpl **)v4[2];
      if (!v4)
        goto LABEL_4;
    }
    v17 = *(_QWORD *)(v15 + 8);
    v201 = v17 + 16 * v16;
    while (1)
    {
      v18 = v3[6];
      if (!v18)
      {
LABEL_286:
        __break(0xC471u);
        JUMPOUT(0x1824A8F98);
      }
      v19 = *(_DWORD *)(v18 - 8);
      v20 = *((_DWORD *)*v4 + 4);
      if (v20 < 0x100)
        v21 = WTF::StringImpl::hashSlowCase(*v4);
      else
        v21 = v20 >> 8;
      for (i = 0; ; v21 = i + v23)
      {
        v23 = v21 & v19;
        result = *(_QWORD *)(v18 + 32 * v23);
        if (result == -1)
          goto LABEL_22;
        if (!result)
          break;
        result = WTF::equal((WTF *)result, *v4, a3);
        if ((result & 1) != 0)
        {
          v24 = v18 + 32 * v23;
          v25 = v3[6];
          if (v25)
          {
            v26 = *(unsigned int *)(v25 - 4);
            goto LABEL_30;
          }
          goto LABEL_31;
        }
LABEL_22:
        ++i;
      }
      v25 = v3[6];
      if (!v25)
        goto LABEL_286;
      v26 = *(unsigned int *)(v25 - 4);
      v24 = v25 + 32 * v26;
LABEL_30:
      if (v24 == v25 + 32 * v26)
        goto LABEL_286;
LABEL_31:
      v27 = v3[5];
      v28 = *v4;
      if (*v4)
        *(_DWORD *)v28 += 2;
      v29 = *(_QWORD *)(v27 + 312);
      if ((unint64_t)(*(_QWORD *)(v27 + 320) - v29) <= 0x5F)
      {
        v90 = WTF::fastMalloc((WTF *)0x4000);
        v206[0] = v90;
        v92 = *(unsigned int *)(v27 + 340);
        if ((_DWORD)v92 == *(_DWORD *)(v27 + 336))
        {
          v93 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 328, v92 + 1, (unint64_t)v206);
          v92 = *(unsigned int *)(v27 + 340);
          v94 = *(_QWORD *)(v27 + 328);
          v95 = *(_QWORD *)v93;
          *(_QWORD *)v93 = 0;
          *(_QWORD *)(v94 + 8 * v92) = v95;
          v96 = (WTF *)v206[0];
        }
        else
        {
          v97 = v90;
          v96 = 0;
          v98 = *(_QWORD *)(v27 + 328);
          v206[0] = 0;
          *(_QWORD *)(v98 + 8 * v92) = v97;
        }
        *(_DWORD *)(v27 + 340) = v92 + 1;
        result = WTF::fastFree(v96, v91);
        v99 = *(unsigned int *)(v27 + 340);
        if (!(_DWORD)v99)
        {
          __break(0xC471u);
          JUMPOUT(0x1824A8FE4);
        }
        v29 = *(_QWORD *)(*(_QWORD *)(v27 + 328) + 8 * v99 - 8);
        *(_QWORD *)(v27 + 312) = v29;
        *(_QWORD *)(v27 + 320) = v29 + 0x4000;
      }
      *(_BYTE *)(v29 + 56) = 0;
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_BYTE *)(v29 + 32) = 0;
      *(_QWORD *)v29 = off_1E0FD2E98;
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v29 + 64) = &off_1E0FD2F10;
      *(_QWORD *)(v29 + 72) = 0;
      *(_QWORD *)(v29 + 80) = 0;
      *(_QWORD *)(v29 + 88) = v28;
      *(_QWORD *)(v27 + 312) += 96;
      v30 = *(unsigned int *)(v27 + 356);
      if ((_DWORD)v30 == *(_DWORD *)(v27 + 352))
      {
        v31 = v30 + (v30 >> 2);
        if (v31 >= 0x10)
          v32 = v31 + 1;
        else
          v32 = 16;
        if (v32 <= v30 + 1)
          v33 = v30 + 1;
        else
          v33 = v32;
        if (v33 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824A8FCCLL);
        }
        v34 = *(void **)(v27 + 344);
        v35 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
        *(_DWORD *)(v27 + 352) = v33;
        *(_QWORD *)(v27 + 344) = v35;
        result = (uint64_t)memcpy(v35, v34, 8 * v30);
        if (v34)
        {
          if (*(void **)(v27 + 344) == v34)
          {
            *(_QWORD *)(v27 + 344) = 0;
            *(_DWORD *)(v27 + 352) = 0;
          }
          result = WTF::fastFree((WTF *)v34, v36);
        }
        v30 = *(unsigned int *)(v27 + 356);
        v37 = (_QWORD *)(*(_QWORD *)(v27 + 344) + 8 * v30);
      }
      else
      {
        v37 = (_QWORD *)(*(_QWORD *)(v27 + 344) + 8 * v30);
      }
      *v37 = v29;
      *(_DWORD *)(v27 + 356) = v30 + 1;
      *(_QWORD *)(v29 + 24) = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 144);
      v38 = v3[5];
      v39 = *(_QWORD *)(v17 + 8);
      v40 = (void **)(v39 + 72);
      v41 = *(unsigned int *)(v39 + 84);
      if ((_DWORD)v41 == *(_DWORD *)(v39 + 80))
      {
        v42 = v41 + (v41 >> 2);
        if (v42 >= 0x10)
          v43 = v42 + 1;
        else
          v43 = 16;
        if (v43 <= v41 + 1)
          v44 = v41 + 1;
        else
          v44 = v43;
        if (v44 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824A8FD4);
        }
        v45 = *v40;
        v46 = (void *)WTF::fastMalloc((WTF *)(8 * v44));
        *(_DWORD *)(v39 + 80) = v44;
        *(_QWORD *)(v39 + 72) = v46;
        result = (uint64_t)memcpy(v46, v45, 8 * v41);
        if (v45)
        {
          if (*v40 == v45)
          {
            *(_QWORD *)(v39 + 72) = 0;
            *(_DWORD *)(v39 + 80) = 0;
          }
          result = WTF::fastFree((WTF *)v45, v47);
        }
        v41 = *(unsigned int *)(v39 + 84);
        v48 = (_QWORD *)(*(_QWORD *)(v39 + 72) + 8 * v41);
      }
      else
      {
        v48 = (char *)*v40 + 8 * v41;
      }
      *v48 = v29;
      *(_DWORD *)(v39 + 84) = v41 + 1;
      v49 = *(unsigned int *)(v38 + 412);
      if ((_DWORD)v49 == *(_DWORD *)(v38 + 408))
      {
        v50 = v49 + (v49 >> 2);
        if (v50 >= 0x10)
          v51 = v50 + 1;
        else
          v51 = 16;
        if (v51 <= v49 + 1)
          v52 = v49 + 1;
        else
          v52 = v51;
        if (v52 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x1824A8FDCLL);
        }
        v53 = *(WTF **)(v38 + 400);
        result = WTF::fastMalloc((WTF *)(32 * v52));
        v55 = (WTF *)result;
        *(_DWORD *)(v38 + 408) = v52;
        *(_QWORD *)(v38 + 400) = result;
        if ((_DWORD)v49)
        {
          v56 = 32 * v49;
          v57 = v53;
          while (1)
          {
            v58 = (WTF *)*((_QWORD *)v57 + 3);
            if (v58)
            {
              if (v57 != v58)
              {
                *((_QWORD *)v55 + 3) = v58;
                *((_QWORD *)v57 + 3) = 0;
                goto LABEL_73;
              }
              *((_QWORD *)v55 + 3) = v55;
              (*(void (**)(_QWORD, WTF *))(**((_QWORD **)v57 + 3) + 24))(*((_QWORD *)v57 + 3), v55);
              result = *((_QWORD *)v57 + 3);
              if (v57 == (WTF *)result)
                goto LABEL_77;
            }
            else
            {
              *((_QWORD *)v55 + 3) = 0;
              result = *((_QWORD *)v57 + 3);
              if (v57 == (WTF *)result)
              {
LABEL_77:
                result = (uint64_t)v57;
                v59 = 4;
LABEL_81:
                result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v59))();
                goto LABEL_73;
              }
            }
            if (result)
            {
              v59 = 5;
              goto LABEL_81;
            }
LABEL_73:
            v55 = (WTF *)((char *)v55 + 32);
            v57 = (WTF *)((char *)v57 + 32);
            v56 -= 32;
            if (!v56)
            {
              v55 = *(WTF **)(v38 + 400);
              break;
            }
          }
        }
        if (v53)
        {
          if (v55 == v53)
          {
            *(_QWORD *)(v38 + 400) = 0;
            *(_DWORD *)(v38 + 408) = 0;
          }
          result = WTF::fastFree(v53, v54);
          v55 = *(WTF **)(v38 + 400);
        }
        v49 = *(unsigned int *)(v38 + 412);
        v60 = (_QWORD *)((char *)v55 + 32 * v49);
      }
      else
      {
        v60 = (_QWORD *)(*(_QWORD *)(v38 + 400) + 32 * v49);
      }
      *v60 = &off_1E0FD3DF8;
      v60[1] = v40;
      v60[3] = v60;
      *(_DWORD *)(v38 + 412) = v49 + 1;
      v61 = v3[31];
      if (v61
        || (result = WTF::fastZeroedMalloc((WTF *)0x50),
            v3[31] = result + 16,
            *(_DWORD *)(result + 12) = 8,
            *(_DWORD *)(v3[31] - 8) = 7,
            *(_DWORD *)(v3[31] - 16) = 0,
            *(_DWORD *)(v3[31] - 12) = 0,
            (v61 = v3[31]) != 0))
      {
        v62 = *(_DWORD *)(v61 - 8);
      }
      else
      {
        v62 = 0;
      }
      v63 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
      v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
      v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
      v66 = v62 & ((v65 >> 31) ^ v65);
      v67 = (_QWORD *)(v61 + 8 * v66);
      v68 = *v67;
      if (*v67)
      {
        v69 = 0;
        v70 = 1;
        while (v68 != v29)
        {
          if (v68 == -1)
            v69 = v67;
          v66 = (v66 + v70) & v62;
          v67 = (_QWORD *)(v61 + 8 * v66);
          v68 = *v67;
          ++v70;
          if (!*v67)
          {
            if (v69)
            {
              *v69 = 0;
              --*(_DWORD *)(v3[31] - 16);
              v67 = v69;
            }
            goto LABEL_100;
          }
        }
        goto LABEL_16;
      }
LABEL_100:
      *v67 = v29;
      v71 = v3[31];
      if (v71)
      {
        ++*(_DWORD *)(v71 - 12);
        v72 = v3[31];
        if (v72)
          goto LABEL_102;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v72 = v3[31];
        if (v72)
        {
LABEL_102:
          v73 = (WTF *)(v72 - 16);
          v74 = (*(_DWORD *)(v72 - 16) + *(_DWORD *)(v72 - 12));
          v75 = *(unsigned int *)(v72 - 4);
          if (v75 > 0x400)
            goto LABEL_108;
          goto LABEL_103;
        }
      }
      v73 = (WTF *)(v72 - 16);
      v74 = *(unsigned int *)(v72 - 16);
      v75 = *(unsigned int *)(v72 - 4);
      if (v75 > 0x400)
      {
LABEL_108:
        if (v75 <= 2 * v74)
          goto LABEL_109;
        goto LABEL_16;
      }
LABEL_103:
      if (3 * v75 <= 4 * v74)
      {
        if ((_DWORD)v75)
        {
LABEL_109:
          v76 = *(_DWORD *)(v72 - 12);
          v77 = (_DWORD)v75 << (6 * v76 >= (2 * v75));
        }
        else
        {
          v76 = *(_DWORD *)(v72 - 12);
          v77 = 8;
        }
        result = WTF::fastZeroedMalloc((WTF *)(8 * v77 + 16));
        v3[31] = result + 16;
        *(_DWORD *)(result + 12) = v77;
        *(_DWORD *)(v3[31] - 8) = v77 - 1;
        *(_DWORD *)(v3[31] - 16) = 0;
        *(_DWORD *)(v3[31] - 12) = v76;
        if (!(_DWORD)v75)
          goto LABEL_15;
        for (j = 0; j != v75; ++j)
        {
          v80 = *(_QWORD *)(v72 + 8 * j);
          if ((unint64_t)(v80 + 1) >= 2)
          {
            v81 = v3[31];
            if (v81)
              v82 = *(_DWORD *)(v81 - 8);
            else
              v82 = 0;
            v83 = (~(v80 << 32) + v80) ^ ((unint64_t)(~(v80 << 32) + v80) >> 22);
            v84 = 9 * ((v83 + ~(v83 << 13)) ^ ((v83 + ~(v83 << 13)) >> 8));
            v85 = (v84 ^ (v84 >> 15)) + ~((v84 ^ (v84 >> 15)) << 27);
            v86 = v82 & ((v85 >> 31) ^ v85);
            v87 = 1;
            do
            {
              v88 = v86;
              v89 = *(_QWORD *)(v81 + 8 * v86);
              v86 = (v86 + v87++) & v82;
            }
            while (v89);
            *(_QWORD *)(v81 + 8 * v88) = v80;
          }
        }
        if (v72)
LABEL_15:
          result = WTF::fastFree(v73, v78);
      }
LABEL_16:
      v17 += 16;
      if (v17 == v201)
        goto LABEL_11;
    }
  }
LABEL_4:
  v6 = v3 + 14;
  v5 = v3[14];
  if (!v5)
    return result;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = **(_QWORD **)(v200 + 8);
  v9 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v7 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v5 + 32 * v12);
  if (v13 == v8)
  {
LABEL_9:
    if (v12 == *(_DWORD *)(v5 - 4))
      return result;
    v100 = *(_QWORD *)(v5 + 32 * v12 + 8);
    if (!v100 || !*(_DWORD *)(v100 - 12))
      return result;
    v101 = (_QWORD *)(v3[5] + 312);
    v204 = 0uLL;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v102 = v206[0];
    v206[0] = &off_1E0FD2F10;
    v206[1] = 0;
    v206[2] = 0;
    v207 = v102;
    v104 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v101, &v204, (uint64_t)v206);
    result = v207;
    v206[0] = &off_1E0FD2F10;
    v207 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy();
      else
        *(_DWORD *)result -= 2;
    }
    v104[3] = *(_QWORD *)(v3[5] + 168);
    v198 = *(_QWORD *)(v5 + 32 * v12 + 16);
    if (!v198)
      return result;
    v105 = (int8x16_t *)"_ArrayLength";
    while (1)
    {
      v106 = *(_QWORD *)(v200 + 8);
      v107 = *(unsigned int *)(*(_QWORD *)v106 + 68);
      if ((_DWORD)v107)
      {
        v108 = 0;
        v109 = *(_QWORD *)(*(_QWORD *)v106 + 56);
        v110 = *(unsigned int *)(*(_QWORD *)v106 + 68);
        v111 = 8 * v107;
        while (1)
        {
          result = WTF::equal(*(WTF **)(*(_QWORD *)(v109 + 8 * v108) + 56), *(const WTF::StringImpl **)v198, (const WTF::StringImpl *)v103);
          if ((result & 1) != 0)
            break;
          ++v108;
          v111 -= 8;
          if (!v111)
          {
            v112 = v110;
            goto LABEL_144;
          }
        }
        v112 = v108;
LABEL_144:
        v106 = *(_QWORD *)(v200 + 8);
        v113 = *(unsigned int *)(v106 + 20);
        if ((_DWORD)v113)
        {
LABEL_145:
          v114 = *(uint64_t **)(v106 + 8);
          v199 = &v114[2 * v113];
          while (2)
          {
            v115 = v114[1];
            if (*(unsigned int *)(v115 + 84) <= v112)
            {
              __break(0xC471u);
              JUMPOUT(0x1824A8FF8);
            }
            v116 = (uint64_t *)(*(_QWORD *)(v115 + 72) + 8 * v112);
LABEL_151:
            v117 = *v116;
            while (1)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 16))(v117) == 23)
              {
                v116 = (uint64_t *)(v117 + 64);
                goto LABEL_151;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 16))(v117) == 26)
              {
                v116 = (uint64_t *)(v117 + 64);
                goto LABEL_151;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 16))(v117) != 21)
                break;
              v119 = *(_QWORD *)(v117 + 64);
              v120 = *(uint64_t **)(v119 + 24);
              if (!v120)
                goto LABEL_161;
              v121 = *((_DWORD *)v120 + 12);
              if (v121 == 10)
              {
                v120 = (uint64_t *)v120[1];
                if (!v120)
                  goto LABEL_161;
                v121 = *((_DWORD *)v120 + 12);
              }
              if (v121 == 11)
                v120 = (uint64_t *)v120[1];
LABEL_161:
              if (*((_DWORD *)v120 + 12) != 4)
              {
                std::__throw_bad_variant_access[abi:sn180100]();
                goto LABEL_288;
              }
              v122 = *v120;
              v123 = *(unsigned int *)(*v120 + 84);
              if (!(_DWORD)v123)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A8FC4);
              }
              v124 = WTF::equal(*(WTF **)(*(_QWORD *)(*(_QWORD *)(v122 + 72) + 8 * v123 - 8) + 48), *(const WTF::StringImpl **)(v117 + 96), v118);
              v117 = v119;
              if ((v124 & 1) == 0)
              {
                __break(0xC471u);
                goto LABEL_302;
              }
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 16))(v117) != 22)
            {
LABEL_288:
              __break(0xC471u);
              JUMPOUT(0x1824A8FBCLL);
            }
            v204 = 0uLL;
            v205 = 0;
            WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::add<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>((uint64_t)v206, v6, v114, &v204);
            v126 = (WTF *)*((_QWORD *)&v204 + 1);
            if (*((_QWORD *)&v204 + 1))
            {
              do
              {
                v134 = v126;
                v126 = (WTF *)*((_QWORD *)v126 + 2);
                v135 = *(_DWORD **)v134;
                *(_QWORD *)v134 = 0;
                if (v135)
                {
                  if (*v135 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *v135 -= 2;
                }
                WTF::fastFree(v134, v125);
              }
              while (v126);
            }
            if ((_QWORD)v204)
              WTF::fastFree((WTF *)(v204 - 16), v125);
            WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v204, (uint64_t *)(v206[0] + 8), (const WTF::StringImpl **)(v117 + 88));
            v128 = *(_QWORD *)(v117 + 88);
            if (!v128)
            {
              v130 = 12;
              if (!v127)
                goto LABEL_173;
LABEL_294:
              v203 = 0;
              __break(0xC471u);
              JUMPOUT(0x1824A8FF0);
            }
            v129 = *(_DWORD *)(v128 + 4);
            *(_DWORD *)v128 += 2;
            if (v129 < 0)
              goto LABEL_294;
            v127 = __OFADD__(v129, 12);
            v130 = v129 + 12;
            if (v127)
              goto LABEL_294;
LABEL_173:
            v131 = (v130 + 2);
            if (__OFADD__(v130, 2))
              goto LABEL_294;
            if (!v128)
            {
              WTF::tryFastCompactMalloc((WTF *)(v131 + 20));
              v132 = v204;
              if (!(_QWORD)v204)
              {
                v203 = 0;
                __break(0xC471u);
                JUMPOUT(0x1824A901CLL);
              }
              *(_DWORD *)v204 = 2;
              *(_DWORD *)(v132 + 4) = v131;
              *(_WORD *)(v132 + 20) = 24415;
              *(_QWORD *)(v132 + 8) = v132 + 20;
              *(_DWORD *)(v132 + 16) = 4;
              *(_DWORD *)(v132 + 30) = 1752459118;
              *(_QWORD *)(v132 + 22) = v105->i64[0];
              v203 = v132;
LABEL_186:
              v136 = v3[5] + 312;
              goto LABEL_212;
            }
            if ((*(_BYTE *)(v128 + 16) & 4) != 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v131 + 20));
              v132 = v204;
              if (!(_QWORD)v204)
              {
                v203 = 0;
                __break(0xC471u);
LABEL_302:
                JUMPOUT(0x1824A8F78);
              }
              *(_DWORD *)v204 = 2;
              *(_DWORD *)(v132 + 4) = v131;
              *(_WORD *)(v132 + 20) = 24415;
              *(_QWORD *)(v132 + 8) = v132 + 20;
              *(_DWORD *)(v132 + 16) = 4;
              v137 = (_BYTE *)(v132 + 22);
              v138 = *(int8x16_t **)(v128 + 8);
              v103 = *(unsigned int *)(v128 + 4);
              if ((*(_BYTE *)(v128 + 16) & 4) != 0)
              {
                if ((_DWORD)v103)
                {
                  if ((_DWORD)v103 == 1)
                    *v137 = v138->i8[0];
                  else
                    memcpy((void *)(v132 + 22), v138, v103);
                }
LABEL_210:
                v150 = &v137[*(unsigned int *)(v128 + 4)];
                *(_QWORD *)v150 = v105->i64[0];
                *((_DWORD *)v150 + 2) = 1752459118;
                v203 = v132;
                v133 = *(_DWORD *)v128 - 2;
                if (*(_DWORD *)v128 != 2)
                  goto LABEL_178;
                goto LABEL_211;
              }
              if (v103 < 0x10)
              {
                v139 = v132 + 22;
                v142 = &v137[v103];
                if (v137 == &v137[v103])
                  goto LABEL_210;
              }
              else
              {
                v139 = (unint64_t)&v137[v103 & 0xFFFFFFF0];
                v140 = (unsigned __int128 *)(v132 + 22);
                do
                {
                  v141 = (unsigned __int128)vld2q_s8(v138->i8);
                  v138 += 2;
                  *v140++ = v141;
                }
                while (v140 != (unsigned __int128 *)v139);
                v142 = &v137[v103];
                if ((_BYTE *)v139 == &v137[v103])
                  goto LABEL_210;
              }
              v143 = v132 + v103 - v139;
              v144 = v143 + 22;
              if (v143 + 22 < 8
                || (v139 < (unint64_t)&v138[2].u64[1] + 2 * v143 + 4
                  ? (v145 = (unint64_t)v138 >= v132 + v103 + 22)
                  : (v145 = 1),
                    !v145))
              {
                v147 = (_BYTE *)v139;
                v148 = v138;
                goto LABEL_207;
              }
              if (v144 < 0x20)
              {
                v146 = 0;
                goto LABEL_277;
              }
              v146 = v144 & 0xFFFFFFFFFFFFFFE0;
              v187 = v138 + 2;
              v188 = (int8x16_t *)(v139 + 16);
              v189 = v144 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v191 = v187[-2];
                v190 = v187[-1];
                v193 = *v187;
                v192 = v187[1];
                v187 += 4;
                v188[-1] = vuzp1q_s8(v191, v190);
                *v188 = vuzp1q_s8(v193, v192);
                v188 += 2;
                v189 -= 32;
              }
              while (v189);
              if (v144 == v146)
                goto LABEL_210;
              if ((v144 & 0x18) != 0)
              {
LABEL_277:
                v147 = (_BYTE *)(v139 + (v144 & 0xFFFFFFFFFFFFFFF8));
                v148 = (int8x16_t *)((char *)v138 + 2 * (v144 & 0xFFFFFFFFFFFFFFF8));
                v194 = (int16x8_t *)((char *)v138 + 2 * v146);
                v195 = (int8x8_t *)(v139 + v146);
                v196 = v146 - (v144 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v197 = *v194++;
                  *v195++ = vmovn_s16(v197);
                  v196 += 8;
                }
                while (v196);
                if (v144 == (v144 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_210;
              }
              else
              {
                v148 = (int8x16_t *)((char *)v138 + 2 * v146);
                v147 = (_BYTE *)(v139 + v146);
              }
              do
              {
LABEL_207:
                v149 = v148->i8[0];
                v148 = (int8x16_t *)((char *)v148 + 2);
                *v147++ = v149;
              }
              while (v147 != v142);
              goto LABEL_210;
            }
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v131, 0, (int8x16_t *)"__", 2u, v128, v105, 0xCu, &v203);
            v132 = v203;
            if (!v203)
            {
              __break(0xC471u);
              JUMPOUT(0x1824A9024);
            }
            v133 = *(_DWORD *)v128 - 2;
            if (*(_DWORD *)v128 != 2)
            {
LABEL_178:
              *(_DWORD *)v128 = v133;
              goto LABEL_186;
            }
LABEL_211:
            WTF::StringImpl::destroy();
            v132 = v203;
            v136 = v3[5] + 312;
            if (v203)
LABEL_212:
              *(_DWORD *)v132 += 2;
            v204 = 0uLL;
            v151 = *(_QWORD *)v136;
            if (*(_QWORD *)(v136 + 8) - *(_QWORD *)v136 <= 0x5FuLL)
            {
              WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)v136);
              v151 = *(_QWORD *)v136;
            }
            *(_BYTE *)(v151 + 56) = 0;
            *(_QWORD *)(v151 + 16) = 0;
            *(_QWORD *)(v151 + 24) = 0;
            *(_BYTE *)(v151 + 32) = 0;
            *(_QWORD *)v151 = off_1E0FD2E98;
            *(_QWORD *)(v151 + 8) = 0;
            *(_OWORD *)(v151 + 72) = v204;
            *(_QWORD *)(v151 + 64) = &off_1E0FD2F10;
            *(_QWORD *)(v151 + 88) = v132;
            *(_QWORD *)v136 += 96;
            v152 = *(unsigned int *)(v136 + 44);
            if ((_DWORD)v152 == *(_DWORD *)(v136 + 40))
            {
              v153 = v152 + (v152 >> 2);
              if (v153 >= 0x10)
                v154 = v153 + 1;
              else
                v154 = 16;
              if (v154 <= v152 + 1)
                v155 = v152 + 1;
              else
                v155 = v154;
              if (v155 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A9000);
              }
              v156 = *(void **)(v136 + 32);
              v157 = (void *)WTF::fastMalloc((WTF *)(8 * v155));
              *(_DWORD *)(v136 + 40) = v155;
              *(_QWORD *)(v136 + 32) = v157;
              memcpy(v157, v156, 8 * v152);
              if (v156)
              {
                if (*(void **)(v136 + 32) == v156)
                {
                  *(_QWORD *)(v136 + 32) = 0;
                  *(_DWORD *)(v136 + 40) = 0;
                }
                WTF::fastFree((WTF *)v156, v158);
              }
              v152 = *(unsigned int *)(v136 + 44);
              v159 = (_QWORD *)(*(_QWORD *)(v136 + 32) + 8 * v152);
            }
            else
            {
              v159 = (_QWORD *)(*(_QWORD *)(v136 + 32) + 8 * v152);
            }
            *v159 = v151;
            *(_DWORD *)(v136 + 44) = v152 + 1;
            v160 = v3[5];
            *(_QWORD *)(v151 + 24) = *(_QWORD *)(v160 + 168);
            v202 = v114;
            v161 = v114[1];
            v162 = (_QWORD *)(v161 + 72);
            v163 = *(unsigned int *)(v161 + 84);
            if ((_DWORD)v163 == *(_DWORD *)(v161 + 80))
            {
              v164 = v112;
              v165 = v105;
              v166 = v6;
              v167 = v163 + (v163 >> 2);
              if (v167 >= 0x10)
                v168 = v167 + 1;
              else
                v168 = 16;
              if (v168 <= v163 + 1)
                v169 = v163 + 1;
              else
                v169 = v168;
              if (v169 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A9008);
              }
              v170 = *(void **)(v161 + 72);
              v171 = (void *)WTF::fastMalloc((WTF *)(8 * v169));
              *(_DWORD *)(v161 + 80) = v169;
              *(_QWORD *)(v161 + 72) = v171;
              memcpy(v171, v170, 8 * v163);
              v6 = v166;
              v105 = v165;
              v112 = v164;
              v162 = (_QWORD *)(v161 + 72);
              if (v170)
              {
                if (*(void **)(v161 + 72) == v170)
                {
                  *(_QWORD *)(v161 + 72) = 0;
                  *(_DWORD *)(v161 + 80) = 0;
                }
                WTF::fastFree((WTF *)v170, v172);
              }
              v163 = *(unsigned int *)(v161 + 84);
              v173 = (_QWORD *)(*(_QWORD *)(v161 + 72) + 8 * v163);
            }
            else
            {
              v173 = (_QWORD *)(*v162 + 8 * v163);
            }
            *v173 = v151;
            *(_DWORD *)(v161 + 84) = v163 + 1;
            v174 = *(unsigned int *)(v160 + 412);
            if ((_DWORD)v174 == *(_DWORD *)(v160 + 408))
            {
              v175 = v174 + (v174 >> 2);
              if (v175 >= 0x10)
                v176 = v175 + 1;
              else
                v176 = 16;
              if (v176 <= v174 + 1)
                v177 = v174 + 1;
              else
                v177 = v176;
              if (v177 >> 27)
              {
                __break(0xC471u);
                JUMPOUT(0x1824A9010);
              }
              v178 = *(WTF **)(v160 + 400);
              v180 = WTF::fastMalloc((WTF *)(32 * v177));
              *(_DWORD *)(v160 + 408) = v177;
              *(_QWORD *)(v160 + 400) = v180;
              if ((_DWORD)v174)
              {
                v181 = 32 * v174;
                v182 = v178;
                while (1)
                {
                  v183 = (WTF *)*((_QWORD *)v182 + 3);
                  if (v183)
                  {
                    if (v182 != v183)
                    {
                      *(_QWORD *)(v180 + 24) = v183;
                      *((_QWORD *)v182 + 3) = 0;
                      goto LABEL_254;
                    }
                    *(_QWORD *)(v180 + 24) = v180;
                    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v182 + 3) + 24))(*((_QWORD *)v182 + 3), v180);
                    v184 = (WTF *)*((_QWORD *)v182 + 3);
                    if (v182 == v184)
                      goto LABEL_258;
                  }
                  else
                  {
                    *(_QWORD *)(v180 + 24) = 0;
                    v184 = (WTF *)*((_QWORD *)v182 + 3);
                    if (v182 == v184)
                    {
LABEL_258:
                      v184 = v182;
                      v185 = 4;
LABEL_262:
                      (*(void (**)(void))(*(_QWORD *)v184 + 8 * v185))();
                      goto LABEL_254;
                    }
                  }
                  if (v184)
                  {
                    v185 = 5;
                    goto LABEL_262;
                  }
LABEL_254:
                  v180 += 32;
                  v182 = (WTF *)((char *)v182 + 32);
                  v181 -= 32;
                  if (!v181)
                  {
                    v180 = *(_QWORD *)(v160 + 400);
                    break;
                  }
                }
              }
              if (v178)
              {
                if ((WTF *)v180 == v178)
                {
                  *(_QWORD *)(v160 + 400) = 0;
                  *(_DWORD *)(v160 + 408) = 0;
                }
                WTF::fastFree(v178, v179);
                v180 = *(_QWORD *)(v160 + 400);
              }
              v174 = *(unsigned int *)(v160 + 412);
              v186 = (_QWORD *)(v180 + 32 * v174);
            }
            else
            {
              v186 = (_QWORD *)(*(_QWORD *)(v160 + 400) + 32 * v174);
            }
            *v186 = &off_1E0FD3DF8;
            v186[1] = v162;
            v186[3] = v186;
            *(_DWORD *)(v160 + 412) = v174 + 1;
            result = v203;
            v203 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy();
              else
                *(_DWORD *)result -= 2;
            }
            v114 = v202 + 2;
            if (v202 + 2 == v199)
              break;
            continue;
          }
        }
      }
      else
      {
        v112 = 0;
        v113 = *(unsigned int *)(v106 + 20);
        if ((_DWORD)v113)
          goto LABEL_145;
      }
      v198 = *(_QWORD *)(v198 + 16);
      if (!v198)
        return result;
    }
  }
  v14 = 1;
  while (v13)
  {
    v12 = ((_DWORD)v12 + v14) & v7;
    v13 = *(_QWORD *)(v5 + 32 * v12);
    ++v14;
    if (v13 == v8)
      goto LABEL_9;
  }
  return result;
}

_DWORD *WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::Function *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  WGSL::AST::Function *v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  const WTF::StringImpl *v26;
  WTF::StringImpl **i;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int j;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void **v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  WTF *v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  WTF *v83;
  WTF *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  BOOL v101;
  _QWORD *v102;
  WTF *v103;
  uint64_t *v104;
  uint64_t v105;
  __int128 v106;
  WTF *v107;
  _DWORD *result;
  WTF *v109;
  _DWORD *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  uint64_t v119;
  _OWORD *v120;
  int v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  void (**v129)(WGSL::AST::Identifier *__hidden);
  int v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  _BYTE *v134;
  int8x16_t *v135;
  size_t v136;
  unint64_t v137;
  unsigned __int128 *v138;
  unsigned __int128 v139;
  _BYTE *v140;
  size_t v141;
  unint64_t v142;
  BOOL v143;
  unint64_t v144;
  _BYTE *v145;
  int8x16_t *v146;
  char v147;
  _BYTE *v148;
  _QWORD *v149;
  WTF *v150;
  WTF *v151;
  _DWORD *v152;
  int8x16_t *v153;
  int8x16_t *v154;
  unint64_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int16x8_t *v160;
  int8x8_t *v161;
  unint64_t v162;
  int16x8_t v163;
  uint64_t v164;
  __int128 v165;
  WTF *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unsigned int v170;
  WTF *v171;
  _DWORD *v172;
  uint64_t k;
  uint64_t v174;
  WTF *v175;
  __int128 v176;
  uint64_t v177;
  _DWORD **v178;
  uint64_t v179;
  _DWORD **v180;
  WTF *v181;
  _DWORD *v182;
  _DWORD *v183;
  WTF *m;
  WTF *v185;
  _DWORD *v186;
  void (**v187)(WGSL::AST::Identifier *__hidden);
  void (**v188)(WGSL::AST::Identifier *__hidden);
  void (**v189)(WGSL::AST::Identifier *__hidden);
  WGSL::AST::Function *v190;
  uint64_t *v191;
  uint64_t *v192;
  _DWORD *v193;
  void (**v194)(WGSL::AST::Identifier *__hidden);
  __int128 v195;
  WTF *v196[2];
  uint64_t v197;
  _QWORD v198[2];
  WTF *v199;
  uint64_t v200;
  uint64_t v201;
  _DWORD *v202;
  __int128 v203;
  _BYTE v204[24];
  void (***v205)(WGSL::AST::Identifier *__hidden);
  void (***v206)(WGSL::AST::Identifier *__hidden);
  void (***v207)(WGSL::AST::Identifier *__hidden);
  void (***v208)(WGSL::AST::Identifier *__hidden);
  void (***v209)(WGSL::AST::Identifier *__hidden);
  void (***v210)(WGSL::AST::Identifier *__hidden);
  void (***v211)(WGSL::AST::Identifier *__hidden);
  void (***v212)(WGSL::AST::Identifier *__hidden);
  void (***v213)(WGSL::AST::Identifier *__hidden);
  void (***v214)(WGSL::AST::Identifier *__hidden);
  void (***v215)(WGSL::AST::Identifier *__hidden);
  void (***v216)(WGSL::AST::Identifier *__hidden);
  _BYTE *v217;
  void (**v218)(WGSL::AST::Identifier *__hidden);
  uint64_t v219;
  uint64_t v220;
  WTF *v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v196[0] = 0;
  v196[1] = 0;
  v197 = 0;
  v3 = *((_QWORD *)this + 5);
  if (!*(_BYTE *)(v3 + 392))
  {
    __break(1u);
    goto LABEL_282;
  }
  v5 = *(_QWORD *)(v3 + 384);
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = v5 + 24 * v10;
  v12 = *(WGSL::AST::Function **)v11;
  if (*(WGSL::AST::Function **)v11 == a2)
  {
LABEL_6:
    v190 = a2;
    v14 = *(_DWORD *)(v11 + 20);
    if (!v14)
      goto LABEL_247;
  }
  else
  {
    v13 = 1;
    while (v12)
    {
      v10 = (v10 + v13) & v6;
      v11 = v5 + 24 * v10;
      v12 = *(WGSL::AST::Function **)v11;
      ++v13;
      if (*(WGSL::AST::Function **)v11 == a2)
        goto LABEL_6;
    }
    v11 = v5 + 24 * *(unsigned int *)(v5 - 4);
    v190 = a2;
    v14 = *(_DWORD *)(v11 + 20);
    if (!v14)
    {
LABEL_247:
      v196[0] = 0;
      v196[1] = 0;
      v197 = 0;
      v174 = *((_QWORD *)this + 11);
      v175 = (WTF *)*((_QWORD *)this + 12);
      *(_OWORD *)((char *)this + 88) = 0u;
      *((_QWORD *)this + 13) = 0;
      if (!v175)
        goto LABEL_250;
      goto LABEL_257;
    }
  }
  v15 = *(uint64_t **)(v11 + 8);
  v192 = &v15[3 * v14];
  v191 = (uint64_t *)((char *)this + 120);
  do
  {
    v198[0] = this;
    v198[1] = v15;
    v16 = *((_QWORD *)this + 15);
    v17 = *v15;
    if (!v16)
      goto LABEL_15;
    v18 = *(_DWORD *)(v16 - 8);
    v19 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(_QWORD *)(v16 + 32 * v22);
    if (v23 == v17)
    {
LABEL_14:
      if (v22 == *(_DWORD *)(v16 - 4))
        goto LABEL_15;
      v96 = 0uLL;
      memset(v204, 0, sizeof(v204));
      v97 = *(_QWORD *)(v16 + 32 * v22 + 16);
      if (v97)
      {
        do
        {
          WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v218, (uint64_t *)v204, (const WTF::StringImpl **)v97);
          v97 = *(_QWORD *)(v97 + 16);
        }
        while (v97);
        v96 = *(_OWORD *)v204;
        v98 = *(_QWORD *)&v204[16];
      }
      else
      {
        v98 = 0;
      }
      v105 = *((_QWORD *)this + 11);
      *(_QWORD *)v204 = v105;
      v106 = *((_OWORD *)this + 6);
      *(_OWORD *)((char *)this + 88) = v96;
      *((_QWORD *)this + 13) = v98;
      *(_OWORD *)&v204[8] = v106;
      v107 = (WTF *)v106;
      if ((_QWORD)v106)
      {
        do
        {
          v109 = v107;
          v107 = (WTF *)*((_QWORD *)v107 + 2);
          v110 = *(_DWORD **)v109;
          *(_QWORD *)v109 = 0;
          if (v110)
          {
            if (*v110 == 2)
              WTF::StringImpl::destroy();
            else
              *v110 -= 2;
          }
          WTF::fastFree(v109, (void *)v17);
        }
        while (v107);
        v105 = *(_QWORD *)v204;
        if (!*(_QWORD *)v204)
          goto LABEL_134;
      }
      else if (!v105)
      {
LABEL_134:
        result = (_DWORD *)WGSL::RewriteGlobalVariables::visitCallee(WGSL::CallGraph::Callee const&)::$_1::operator()((uint64_t)v198, v17, a3);
        goto LABEL_241;
      }
      WTF::fastFree((WTF *)(v105 - 16), (void *)v17);
      goto LABEL_134;
    }
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(_QWORD *)(v16 + 32 * v22);
      ++v24;
      if (v23 == v17)
        goto LABEL_14;
    }
LABEL_15:
    (*(void (**)(WGSL::RewriteGlobalVariables *, uint64_t))(*(_QWORD *)this + 48))(this, v17);
    for (i = (WTF::StringImpl **)*((_QWORD *)this + 12); i; i = (WTF::StringImpl **)i[2])
    {
      v37 = *((_QWORD *)this + 6);
      if (!v37)
        goto LABEL_298;
      v38 = *(_DWORD *)(v37 - 8);
      v39 = *((_DWORD *)*i + 4);
      if (v39 < 0x100)
        v40 = WTF::StringImpl::hashSlowCase(*i);
      else
        v40 = v39 >> 8;
      for (j = 0; ; v40 = j + v42)
      {
        v42 = v40 & v38;
        v43 = *(WTF **)(v37 + 32 * v42);
        if (v43 == (WTF *)-1)
          goto LABEL_30;
        if (!v43)
          break;
        if ((WTF::equal(v43, *i, v26) & 1) != 0)
        {
          v44 = v37 + 32 * v42;
          v45 = *((_QWORD *)this + 6);
          if (v45)
          {
            v46 = *(unsigned int *)(v45 - 4);
            goto LABEL_38;
          }
          goto LABEL_39;
        }
LABEL_30:
        ++j;
      }
      v45 = *((_QWORD *)this + 6);
      if (!v45)
        goto LABEL_298;
      v46 = *(unsigned int *)(v45 - 4);
      v44 = v45 + 32 * v46;
LABEL_38:
      if (v44 == v45 + 32 * v46)
        goto LABEL_298;
LABEL_39:
      v47 = *(_QWORD *)(v44 + 24);
      if (*(_BYTE *)(v47 + 128) == 3)
      {
        v48 = *(_QWORD **)(v47 + 136);
        goto LABEL_53;
      }
      v48 = *(_QWORD **)(v47 + 112);
      if (!v48)
      {
        v49 = *(_QWORD *)(v47 + 144);
        v50 = *((_QWORD *)this + 5);
        v203 = 0uLL;
        WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v218);
        *(_QWORD *)v204 = &v218;
        *(_QWORD *)&v204[8] = &v218;
        *(_QWORD *)&v204[16] = &v218;
        v205 = &v218;
        v206 = &v218;
        v207 = &v218;
        v208 = &v218;
        v209 = &v218;
        v210 = &v218;
        v211 = &v218;
        v212 = &v218;
        v213 = &v218;
        v214 = &v218;
        v215 = &v218;
        v216 = &v218;
        v51 = *(unsigned int *)(v49 + 48);
        if ((_DWORD)v51 == -1)
          std::__throw_bad_variant_access[abi:sn180100]();
        v217 = v204;
        ((void (*)(_BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v51])(&v217, v49);
        WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v218);
        WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v218);
        v200 = 0;
        v201 = 0;
        v52 = *(_DWORD **)v204;
        *(_QWORD *)v204 = 0;
        v199 = (WTF *)&off_1E0FD2F10;
        v202 = v52;
        v48 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v50 + 312), &v203, (uint64_t)&v199);
        v53 = v202;
        v199 = (WTF *)&off_1E0FD2F10;
        v202 = 0;
        if (v53)
        {
          if (*v53 != 2)
          {
            *v53 -= 2;
            goto LABEL_46;
          }
          WTF::StringImpl::destroy();
          v54 = *(_DWORD **)v204;
          *(_QWORD *)v204 = 0;
          if (v54)
          {
LABEL_49:
            if (*v54 == 2)
              WTF::StringImpl::destroy();
            else
              *v54 -= 2;
          }
        }
        else
        {
LABEL_46:
          v54 = *(_DWORD **)v204;
          *(_QWORD *)v204 = 0;
          if (v54)
            goto LABEL_49;
        }
        v48[3] = v49;
        v47 = *(_QWORD *)(v44 + 24);
      }
LABEL_53:
      if (*(_BYTE *)(v47 + 129) == 1)
        v55 = 3;
      else
        v55 = 0;
      v56 = *((_QWORD *)this + 5);
      v57 = *v15;
      v58 = *i;
      if (*i)
        *(_DWORD *)v58 += 2;
      v59 = *(_QWORD *)(v56 + 312);
      if ((unint64_t)(*(_QWORD *)(v56 + 320) - v59) <= 0x67)
      {
        v86 = WTF::fastMalloc((WTF *)0x4000);
        v218 = (void (**)(WGSL::AST::Identifier *__hidden))v86;
        v88 = *(unsigned int *)(v56 + 340);
        if ((_DWORD)v88 == *(_DWORD *)(v56 + 336))
        {
          v89 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 328, v88 + 1, (unint64_t)&v218);
          v88 = *(unsigned int *)(v56 + 340);
          v90 = *(_QWORD *)(v56 + 328);
          v91 = *(_QWORD *)v89;
          *(_QWORD *)v89 = 0;
          *(_QWORD *)(v90 + 8 * v88) = v91;
          v92 = (WTF *)v218;
        }
        else
        {
          v93 = v86;
          v92 = 0;
          v94 = *(_QWORD *)(v56 + 328);
          v218 = 0;
          *(_QWORD *)(v94 + 8 * v88) = v93;
        }
        *(_DWORD *)(v56 + 340) = v88 + 1;
        WTF::fastFree(v92, v87);
        v95 = *(unsigned int *)(v56 + 340);
        if ((_DWORD)v95)
        {
          v59 = *(_QWORD *)(*(_QWORD *)(v56 + 328) + 8 * v95 - 8);
          *(_QWORD *)(v56 + 312) = v59;
          *(_QWORD *)(v56 + 320) = v59 + 0x4000;
          goto LABEL_59;
        }
LABEL_298:
        __break(0xC471u);
        JUMPOUT(0x1824AA1F0);
      }
LABEL_59:
      *(_QWORD *)(v59 + 8) = 0;
      *(_QWORD *)(v59 + 16) = 0;
      *(_QWORD *)v59 = &off_1E0FD35E0;
      *(_BYTE *)(v59 + 24) = v55;
      *(_QWORD *)(v59 + 32) = &off_1E0FD2F10;
      *(_QWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = v58;
      *(_BYTE *)(v59 + 93) = 0;
      *(_BYTE *)(v59 + 96) = 0;
      *(_BYTE *)(v59 + 100) = 0;
      *(_QWORD *)(v59 + 72) = 0;
      *(_QWORD *)(v59 + 80) = 0;
      *(_QWORD *)(v59 + 64) = v48;
      *(_DWORD *)(v59 + 88) = 0;
      *(_QWORD *)(v56 + 312) += 104;
      v60 = *(unsigned int *)(v56 + 356);
      if ((_DWORD)v60 == *(_DWORD *)(v56 + 352))
      {
        v61 = v60 + (v60 >> 2);
        if (v61 >= 0x10)
          v62 = v61 + 1;
        else
          v62 = 16;
        if (v62 <= v60 + 1)
          v63 = v60 + 1;
        else
          v63 = v62;
        if (v63 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824AA200);
        }
        v64 = *(void **)(v56 + 344);
        v65 = (void *)WTF::fastMalloc((WTF *)(8 * v63));
        *(_DWORD *)(v56 + 352) = v63;
        *(_QWORD *)(v56 + 344) = v65;
        memcpy(v65, v64, 8 * v60);
        if (v64)
        {
          if (*(void **)(v56 + 344) == v64)
          {
            *(_QWORD *)(v56 + 344) = 0;
            *(_DWORD *)(v56 + 352) = 0;
          }
          WTF::fastFree((WTF *)v64, v25);
        }
        v60 = *(unsigned int *)(v56 + 356);
        v66 = (_QWORD *)(*(_QWORD *)(v56 + 344) + 8 * v60);
      }
      else
      {
        v66 = (_QWORD *)(*(_QWORD *)(v56 + 344) + 8 * v60);
      }
      v67 = (void **)(v57 + 56);
      *v66 = v59;
      *(_DWORD *)(v56 + 356) = v60 + 1;
      v68 = *(unsigned int *)(v57 + 68);
      if ((_DWORD)v68 == *(_DWORD *)(v57 + 64))
      {
        v69 = v68 + (v68 >> 2);
        if (v69 >= 0x10)
          v70 = v69 + 1;
        else
          v70 = 16;
        if (v70 <= v68 + 1)
          v71 = v68 + 1;
        else
          v71 = v70;
        if (v71 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824AA208);
        }
        v72 = *v67;
        v73 = (void *)WTF::fastMalloc((WTF *)(8 * v71));
        *(_DWORD *)(v57 + 64) = v71;
        *(_QWORD *)(v57 + 56) = v73;
        memcpy(v73, v72, 8 * v68);
        if (v72)
        {
          if (*v67 == v72)
          {
            *(_QWORD *)(v57 + 56) = 0;
            *(_DWORD *)(v57 + 64) = 0;
          }
          WTF::fastFree((WTF *)v72, v25);
        }
        v68 = *(unsigned int *)(v57 + 68);
        v74 = (_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v68);
      }
      else
      {
        v74 = (char *)*v67 + 8 * v68;
      }
      *v74 = v59;
      *(_DWORD *)(v57 + 68) = v68 + 1;
      v75 = *(unsigned int *)(v56 + 412);
      if ((_DWORD)v75 == *(_DWORD *)(v56 + 408))
      {
        v76 = v75 + (v75 >> 2);
        if (v76 >= 0x10)
          v77 = v76 + 1;
        else
          v77 = 16;
        if (v77 <= v75 + 1)
          v78 = v75 + 1;
        else
          v78 = v77;
        if (v78 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x1824AA210);
        }
        v79 = *(WTF **)(v56 + 400);
        v80 = WTF::fastMalloc((WTF *)(32 * v78));
        *(_DWORD *)(v56 + 408) = v78;
        *(_QWORD *)(v56 + 400) = v80;
        if ((_DWORD)v75)
        {
          v81 = 32 * v75;
          v82 = v79;
          while (1)
          {
            v83 = (WTF *)*((_QWORD *)v82 + 3);
            if (v83)
            {
              if (v82 != v83)
              {
                *(_QWORD *)(v80 + 24) = v83;
                *((_QWORD *)v82 + 3) = 0;
                goto LABEL_98;
              }
              *(_QWORD *)(v80 + 24) = v80;
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 3) + 24))(*((_QWORD *)v82 + 3), v80);
              v84 = (WTF *)*((_QWORD *)v82 + 3);
              if (v82 == v84)
                goto LABEL_102;
            }
            else
            {
              *(_QWORD *)(v80 + 24) = 0;
              v84 = (WTF *)*((_QWORD *)v82 + 3);
              if (v82 == v84)
              {
LABEL_102:
                v84 = v82;
                v85 = 4;
LABEL_106:
                (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
                goto LABEL_98;
              }
            }
            if (v84)
            {
              v85 = 5;
              goto LABEL_106;
            }
LABEL_98:
            v80 += 32;
            v82 = (WTF *)((char *)v82 + 32);
            v81 -= 32;
            if (!v81)
            {
              v80 = *(_QWORD *)(v56 + 400);
              break;
            }
          }
        }
        if (v79)
        {
          if ((WTF *)v80 == v79)
          {
            *(_QWORD *)(v56 + 400) = 0;
            *(_DWORD *)(v56 + 408) = 0;
          }
          WTF::fastFree(v79, v25);
          v80 = *(_QWORD *)(v56 + 400);
        }
        v75 = *(unsigned int *)(v56 + 412);
        v36 = (_QWORD *)(v80 + 32 * v75);
      }
      else
      {
        v36 = (_QWORD *)(*(_QWORD *)(v56 + 400) + 32 * v75);
      }
      *v36 = &off_1E0FD3608;
      v36[1] = v67;
      v36[3] = v36;
      *(_DWORD *)(v56 + 412) = v75 + 1;
    }
    v28 = *((_QWORD *)this + 14);
    if (!v28)
      goto LABEL_143;
    v29 = *(_DWORD *)(v28 - 8);
    v30 = ~(*v15 << 32) + *v15;
    v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
    v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
    v33 = v29 & (((v32 + ~(v32 << 27)) >> 31) ^ ((_DWORD)v32 + ~((_DWORD)v32 << 27)));
    v34 = *(_QWORD *)(v28 + 32 * v33);
    if (v34 == *v15)
    {
LABEL_21:
      if (v33 == *(_DWORD *)(v28 - 4))
        goto LABEL_143;
      v99 = *(_QWORD *)(v28 + 32 * v33 + 8);
      if (!v99 || !*(_DWORD *)(v99 - 12))
        goto LABEL_143;
      v100 = (_QWORD *)(*((_QWORD *)this + 5) + 312);
      *(_OWORD *)v204 = 0uLL;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v219 = 0;
      v220 = 0;
      v218 = &off_1E0FD2F10;
      v221 = v199;
      v102 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v100, v204, (uint64_t)&v218);
      v103 = v221;
      v218 = &off_1E0FD2F10;
      v221 = 0;
      if (!v103)
        goto LABEL_128;
      v101 = __OFSUB__(*(_DWORD *)v103, 2);
      if (*(_DWORD *)v103 != 2)
      {
        *(_DWORD *)v103 -= 2;
LABEL_128:
        v102[3] = *(_QWORD *)(*((_QWORD *)this + 5) + 168);
        v104 = *(uint64_t **)(v28 + 32 * v33 + 16);
        if (v104)
          goto LABEL_159;
        goto LABEL_143;
      }
      WTF::StringImpl::destroy();
      v102[3] = *(_QWORD *)(*((_QWORD *)this + 5) + 168);
      v104 = *(uint64_t **)(v28 + 32 * v33 + 16);
      if (!v104)
        goto LABEL_143;
      while (1)
      {
LABEL_159:
        v125 = *v104;
        if (*v104)
        {
          v126 = *(_DWORD *)(v125 + 4);
          *(_DWORD *)v125 += 2;
          if (v126 < 0 || (v101 = __OFADD__(v126, 12), v127 = v126 + 12, v101))
          {
LABEL_296:
            *(_QWORD *)&v203 = 0;
LABEL_297:
            __break(0xC471u);
            JUMPOUT(0x1824AA21CLL);
          }
        }
        else
        {
          v127 = 12;
          if (v101)
            goto LABEL_296;
        }
        v128 = (v127 + 2);
        if (__OFADD__(v127, 2))
          goto LABEL_296;
        if (!v125)
        {
          WTF::tryFastCompactMalloc((WTF *)(v128 + 20));
          v129 = v218;
          if (!v218)
            goto LABEL_296;
          *(_DWORD *)v218 = 2;
          *((_DWORD *)v129 + 1) = v128;
          qmemcpy((char *)v129 + 20, "___ArrayLength", 14);
          v129[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v129 + 20);
          *((_DWORD *)v129 + 4) = 4;
          *(_QWORD *)&v203 = v129;
          goto LABEL_170;
        }
        if ((*(_BYTE *)(v125 + 16) & 4) == 0)
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v128, 0, (int8x16_t *)"__", 2u, v125, (int8x16_t *)"_ArrayLength", 0xCu, &v203);
          v129 = (void (**)(WGSL::AST::Identifier *__hidden))v203;
          if (!(_QWORD)v203)
            goto LABEL_297;
          v130 = *(_DWORD *)v125 - 2;
          if (*(_DWORD *)v125 == 2)
          {
LABEL_195:
            WTF::StringImpl::destroy();
            v129 = (void (**)(WGSL::AST::Identifier *__hidden))v203;
            v131 = (_QWORD *)*((_QWORD *)this + 5);
            v132 = *v15 + 56;
            v133 = v131 + 39;
            *(_OWORD *)v204 = 0uLL;
            if (!(_QWORD)v203)
              goto LABEL_197;
            goto LABEL_196;
          }
          goto LABEL_167;
        }
        WTF::tryFastCompactMalloc((WTF *)(v128 + 20));
        v129 = v218;
        if (!v218)
          goto LABEL_296;
        *(_DWORD *)v218 = 2;
        *((_DWORD *)v129 + 1) = v128;
        *((_WORD *)v129 + 10) = 24415;
        v129[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v129 + 20);
        *((_DWORD *)v129 + 4) = 4;
        v134 = (char *)v129 + 22;
        v135 = *(int8x16_t **)(v125 + 8);
        v136 = *(unsigned int *)(v125 + 4);
        if ((*(_BYTE *)(v125 + 16) & 4) != 0)
        {
          if ((_DWORD)v136)
          {
            if ((_DWORD)v136 == 1)
              *v134 = v135->i8[0];
            else
              memcpy((char *)v129 + 22, v135, v136);
          }
        }
        else
        {
          if (v136 < 0x10)
          {
            v137 = (unint64_t)v129 + 22;
            v140 = &v134[v136];
            if (v134 == &v134[v136])
              goto LABEL_194;
          }
          else
          {
            v137 = (unint64_t)&v134[v136 & 0xFFFFFFF0];
            v138 = (unsigned __int128 *)((char *)v129 + 22);
            do
            {
              v139 = (unsigned __int128)vld2q_s8(v135->i8);
              v135 += 2;
              *v138++ = v139;
            }
            while (v138 != (unsigned __int128 *)v137);
            v140 = &v134[v136];
            if ((_BYTE *)v137 == &v134[v136])
              goto LABEL_194;
          }
          v141 = (size_t)v129 + v136 - v137;
          v142 = v141 + 22;
          if (v141 + 22 < 8
            || (v137 < (unint64_t)&v135[2].u64[1] + 2 * v141 + 4
              ? (v143 = v135 >= (int8x16_t *)((char *)v129 + v136 + 22))
              : (v143 = 1),
                !v143))
          {
            v145 = (_BYTE *)v137;
            v146 = v135;
            goto LABEL_191;
          }
          if (v142 >= 0x20)
          {
            v144 = v142 & 0xFFFFFFFFFFFFFFE0;
            v153 = v135 + 2;
            v154 = (int8x16_t *)(v137 + 16);
            v155 = v142 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v157 = v153[-2];
              v156 = v153[-1];
              v159 = *v153;
              v158 = v153[1];
              v153 += 4;
              v154[-1] = vuzp1q_s8(v157, v156);
              *v154 = vuzp1q_s8(v159, v158);
              v154 += 2;
              v155 -= 32;
            }
            while (v155);
            if (v142 == v144)
              goto LABEL_194;
            if ((v142 & 0x18) == 0)
            {
              v146 = (int8x16_t *)((char *)v135 + 2 * v144);
              v145 = (_BYTE *)(v137 + v144);
              do
              {
LABEL_191:
                v147 = v146->i8[0];
                v146 = (int8x16_t *)((char *)v146 + 2);
                *v145++ = v147;
              }
              while (v145 != v140);
              goto LABEL_194;
            }
          }
          else
          {
            v144 = 0;
          }
          v145 = (_BYTE *)(v137 + (v142 & 0xFFFFFFFFFFFFFFF8));
          v146 = (int8x16_t *)((char *)v135 + 2 * (v142 & 0xFFFFFFFFFFFFFFF8));
          v160 = (int16x8_t *)((char *)v135 + 2 * v144);
          v161 = (int8x8_t *)(v137 + v144);
          v162 = v144 - (v142 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v163 = *v160++;
            *v161++ = vmovn_s16(v163);
            v162 += 8;
          }
          while (v162);
          if (v142 != (v142 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_191;
        }
LABEL_194:
        v148 = &v134[*(unsigned int *)(v125 + 4)];
        *(_QWORD *)v148 = *(_QWORD *)"_ArrayLength";
        *((_DWORD *)v148 + 2) = 1752459118;
        *(_QWORD *)&v203 = v129;
        v130 = *(_DWORD *)v125 - 2;
        if (*(_DWORD *)v125 == 2)
          goto LABEL_195;
LABEL_167:
        *(_DWORD *)v125 = v130;
LABEL_170:
        v131 = (_QWORD *)*((_QWORD *)this + 5);
        v132 = *v15 + 56;
        v133 = v131 + 39;
        *(_OWORD *)v204 = 0uLL;
LABEL_196:
        *(_DWORD *)v129 += 2;
LABEL_197:
        v219 = 0;
        v220 = 0;
        v218 = &off_1E0FD2F10;
        v221 = (WTF *)v129;
        v199 = 0;
        v200 = 0;
        LOBYTE(v217) = 0;
        v149 = WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>(v133, v204, (uint64_t)&v218, (uint64_t)v102, (uint64_t *)&v199, (char *)&v217);
        WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(v131, v132, (uint64_t)v149);
        v150 = v199;
        if (v199)
        {
          v199 = 0;
          LODWORD(v200) = 0;
          WTF::fastFree(v150, v25);
        }
        v151 = v221;
        v218 = &off_1E0FD2F10;
        v221 = 0;
        if (!v151)
          goto LABEL_202;
        v101 = __OFSUB__(*(_DWORD *)v151, 2);
        if (*(_DWORD *)v151 != 2)
        {
          *(_DWORD *)v151 -= 2;
LABEL_202:
          v152 = (_DWORD *)v203;
          *(_QWORD *)&v203 = 0;
          if (v152)
            goto LABEL_205;
          goto LABEL_158;
        }
        WTF::StringImpl::destroy();
        v152 = (_DWORD *)v203;
        *(_QWORD *)&v203 = 0;
        if (v152)
        {
LABEL_205:
          v101 = __OFSUB__(*v152, 2);
          if (*v152 == 2)
            WTF::StringImpl::destroy();
          else
            *v152 -= 2;
        }
LABEL_158:
        v104 = (uint64_t *)v104[2];
        if (!v104)
          goto LABEL_143;
      }
    }
    v35 = 1;
    while (v34)
    {
      v33 = ((_DWORD)v33 + v35) & v29;
      v34 = *(_QWORD *)(v28 + 32 * v33);
      ++v35;
      if (v34 == *v15)
        goto LABEL_21;
    }
LABEL_143:
    result = (_DWORD *)WGSL::RewriteGlobalVariables::visitCallee(WGSL::CallGraph::Callee const&)::$_1::operator()((uint64_t)v198, (uint64_t)v25, v26);
    v111 = *v191;
    if (*v191
      || (result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v191, 8u, 0), (v111 = *v191) != 0))
    {
      v112 = *(_DWORD *)(v111 - 8);
    }
    else
    {
      v112 = 0;
    }
    v113 = *v15;
    v114 = ~(*v15 << 32) + *v15;
    v115 = (v114 ^ (v114 >> 22)) + ~((v114 ^ (v114 >> 22)) << 13);
    v116 = (9 * (v115 ^ (v115 >> 8))) ^ ((9 * (v115 ^ (v115 >> 8))) >> 15);
    v117 = v112 & (((v116 + ~(v116 << 27)) >> 31) ^ ((_DWORD)v116 + ~((_DWORD)v116 << 27)));
    v118 = (_OWORD *)(v111 + 32 * v117);
    v119 = *(_QWORD *)v118;
    if (!*(_QWORD *)v118)
    {
LABEL_154:
      *(_QWORD *)v118 = v113;
      v122 = *((_QWORD *)this + 12);
      v123 = 0uLL;
      memset(v204, 0, sizeof(v204));
      if (v122)
      {
        do
        {
          result = WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v218, (uint64_t *)v204, (const WTF::StringImpl **)v122);
          v122 = *(_QWORD *)(v122 + 16);
        }
        while (v122);
        v123 = *(_OWORD *)v204;
        v124 = *(_QWORD *)&v204[16];
      }
      else
      {
        v124 = 0;
      }
      v164 = *((_QWORD *)v118 + 1);
      *(_QWORD *)v204 = v164;
      v165 = v118[1];
      *(_OWORD *)((char *)v118 + 8) = v123;
      *((_QWORD *)v118 + 3) = v124;
      *(_OWORD *)&v204[8] = v165;
      v166 = (WTF *)v165;
      if ((_QWORD)v165)
      {
        do
        {
          v171 = v166;
          v166 = (WTF *)*((_QWORD *)v166 + 2);
          v172 = *(_DWORD **)v171;
          *(_QWORD *)v171 = 0;
          if (v172)
          {
            if (*v172 == 2)
              WTF::StringImpl::destroy();
            else
              *v172 -= 2;
          }
          result = (_DWORD *)WTF::fastFree(v171, a2);
        }
        while (v166);
        v164 = *(_QWORD *)v204;
        if (!*(_QWORD *)v204)
        {
LABEL_223:
          if (*v191)
          {
            ++*(_DWORD *)(*v191 - 12);
            v167 = *v191;
            if (*v191)
              goto LABEL_225;
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
            v167 = *v191;
            if (*v191)
            {
LABEL_225:
              v168 = (*(_DWORD *)(v167 - 16) + *(_DWORD *)(v167 - 12));
              v169 = *(unsigned int *)(v167 - 4);
              if (v169 <= 0x400)
                goto LABEL_226;
              goto LABEL_238;
            }
          }
          v168 = *(unsigned int *)(v167 - 16);
          v169 = *(unsigned int *)(v167 - 4);
          if (v169 <= 0x400)
          {
LABEL_226:
            if (3 * v169 > 4 * v168)
              goto LABEL_241;
            if (!(_DWORD)v169)
            {
              v170 = 8;
LABEL_240:
              result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v191, v170, (uint64_t *)v118);
              goto LABEL_241;
            }
LABEL_239:
            v170 = (_DWORD)v169 << (6 * *(_DWORD *)(v167 - 12) >= (2 * v169));
            goto LABEL_240;
          }
LABEL_238:
          if (v169 > 2 * v168)
            goto LABEL_241;
          goto LABEL_239;
        }
      }
      else if (!v164)
      {
        goto LABEL_223;
      }
      result = (_DWORD *)WTF::fastFree((WTF *)(v164 - 16), a2);
      goto LABEL_223;
    }
    v120 = 0;
    v121 = 1;
    while (v119 != v113)
    {
      if (v119 == -1)
        v120 = v118;
      v117 = ((_DWORD)v117 + v121) & v112;
      v118 = (_OWORD *)(v111 + 32 * v117);
      v119 = *(_QWORD *)v118;
      ++v121;
      if (!*(_QWORD *)v118)
      {
        if (v120)
        {
          *v120 = 0u;
          v120[1] = 0u;
          --*(_DWORD *)(*v191 - 16);
          v113 = *v15;
          v118 = v120;
        }
        goto LABEL_154;
      }
    }
LABEL_241:
    if (*((_BYTE *)this + 32))
      goto LABEL_269;
    for (k = *((_QWORD *)this + 12); k; k = *(_QWORD *)(k + 16))
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v218, (uint64_t *)v196, (const WTF::StringImpl **)k);
    v15 += 3;
  }
  while (v15 != v192);
  v176 = *(_OWORD *)v196;
  v177 = v197;
  v196[0] = 0;
  v196[1] = 0;
  v197 = 0;
  v174 = *((_QWORD *)this + 11);
  v175 = (WTF *)*((_QWORD *)this + 12);
  *(_OWORD *)((char *)this + 88) = v176;
  *((_QWORD *)this + 13) = v177;
  if (!v175)
    goto LABEL_250;
  do
  {
LABEL_257:
    v181 = v175;
    v175 = (WTF *)*((_QWORD *)v175 + 2);
    v182 = *(_DWORD **)v181;
    *(_QWORD *)v181 = 0;
    if (v182)
    {
      if (*v182 == 2)
        WTF::StringImpl::destroy();
      else
        *v182 -= 2;
    }
    WTF::fastFree(v181, a2);
  }
  while (v175);
LABEL_250:
  if (v174)
    WTF::fastFree((WTF *)(v174 - 16), a2);
  v178 = (_DWORD **)*((_QWORD *)this + 10);
  if (v178)
  {
    *((_QWORD *)this + 10) = 0;
    v179 = *((unsigned int *)v178 - 1);
    if ((_DWORD)v179)
    {
      v180 = v178;
      do
      {
        v183 = *v180;
        if (*v180 != (_DWORD *)-1)
        {
          *v180 = 0;
          if (v183)
          {
            if (*v183 == 2)
              WTF::StringImpl::destroy();
            else
              *v183 -= 2;
          }
        }
        v180 += 2;
        --v179;
      }
      while (v179);
    }
    WTF::fastFree((WTF *)(v178 - 2), a2);
  }
  *((_BYTE *)this + 256) = 0;
  *((_DWORD *)this + 65) = 0;
  *(_QWORD *)v204 = 0;
  WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>((uint64_t)&v218, (uint64_t *)this + 10, (const WTF::StringImpl **)v190 + 6, v204);
  *((_QWORD *)this + 29) = v190;
  result = WGSL::AST::Visitor::visit(this, (Function *)v190);
  *((_QWORD *)this + 29) = 0;
  if (*((_BYTE *)this + 256) || *((_DWORD *)this + 65) > 0x2000u)
  {
    WTF::String::number((WTF::String *)0x2000);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"The combined byte size of all variables in this function exceeds ", 66, (uint64_t *)&v193, (int8x16_t *)" bytes", 7, &v218);
    v187 = v218;
    v218 = 0;
    v194 = v187;
    v195 = *(_OWORD *)((char *)v190 + 8);
    WGSL::AST::Visitor::setError((uint64_t)this, (uint64_t)&v194);
    v188 = v194;
    v194 = 0;
    if (!v188)
    {
LABEL_283:
      v189 = v218;
      v218 = 0;
      if (v189)
      {
        if (*(_DWORD *)v189 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v189 -= 2;
      }
      result = v193;
      v193 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
      }
      goto LABEL_269;
    }
    if (*(_DWORD *)v188 != 2)
    {
      *(_DWORD *)v188 -= 2;
      goto LABEL_283;
    }
LABEL_282:
    WTF::StringImpl::destroy();
    goto LABEL_283;
  }
LABEL_269:
  for (m = v196[1]; m; result = (_DWORD *)WTF::fastFree(v185, a2))
  {
    v185 = m;
    m = (WTF *)*((_QWORD *)m + 2);
    v186 = *(_DWORD **)v185;
    *(_QWORD *)v185 = 0;
    if (v186)
    {
      if (*v186 == 2)
        WTF::StringImpl::destroy();
      else
        *v186 -= 2;
    }
  }
  if (v196[0])
    return (_DWORD *)WTF::fastFree((WTF *)((char *)v196[0] - 16), a2);
  return result;
}

WTF::StringImpl **WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl ***v11;
  int i;
  unsigned int v13;
  WTF::StringImpl ***v14;
  WTF **v15;
  WTF::StringImpl **result;
  char v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  WTF::StringImpl **v25;

  v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(a2, 8u, 0);
    v6 = *a2;
    if (!*a2)
    {
      v7 = 0;
      v8 = *a3;
      v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = *a3;
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    goto LABEL_6;
LABEL_4:
  v10 = v9 >> 8;
LABEL_7:
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v7;
    v14 = (WTF::StringImpl ***)(v6 + 8 * (v10 & v7));
    v15 = *v14;
    if (*v14 == (WTF::StringImpl **)-1)
    {
      v11 = (WTF::StringImpl ***)(v6 + 8 * v13);
      goto LABEL_9;
    }
    if (!v15)
      break;
    result = (WTF::StringImpl **)WTF::equal(*v15, *a3, (const WTF::StringImpl *)a3);
    if ((result & 1) != 0)
    {
      v17 = 0;
      goto LABEL_33;
    }
LABEL_9:
    v10 = i + v13;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*a2 - 16);
    v14 = v11;
  }
  result = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x18);
  v18 = *a3;
  if (*a3)
    *(_DWORD *)v18 += 2;
  result[1] = 0;
  result[2] = 0;
  *result = v18;
  *v14 = result;
  if (*a2)
  {
    ++*(_DWORD *)(*a2 - 12);
    v19 = *a2;
    if (*a2)
      goto LABEL_20;
LABEL_25:
    v20 = *(unsigned int *)(v19 - 16);
    v21 = *(unsigned int *)(v19 - 4);
    if (v21 > 0x400)
      goto LABEL_26;
LABEL_21:
    if (3 * v21 <= 4 * v20)
    {
      if (!(_DWORD)v21)
      {
        v22 = 8;
        goto LABEL_28;
      }
LABEL_27:
      v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
LABEL_28:
      v14 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(a2, v22, v14);
      result = *v14;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v19 = *a2;
    if (!*a2)
      goto LABEL_25;
LABEL_20:
    v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
    v21 = *(unsigned int *)(v19 - 4);
    if (v21 <= 0x400)
      goto LABEL_21;
LABEL_26:
    if (v21 <= 2 * v20)
      goto LABEL_27;
  }
  v23 = (_QWORD *)a2[2];
  result[1] = (WTF::StringImpl *)v23;
  result[2] = 0;
  if (v23)
    v24 = v23 + 2;
  else
    v24 = a2 + 1;
  *v24 = result;
  a2[2] = (uint64_t)result;
  v17 = 1;
LABEL_33:
  v25 = *v14;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int8x16_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t result;

  if (a2)
    v8 = a2 - 1;
  else
    v8 = 0;
  if (v8 >> 31)
    goto LABEL_24;
  if (a5)
    v9 = a5 - 1;
  else
    v9 = 0;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824AA500);
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_DWORD *)(v10 + 4);
    if (((v11 | v9) & 0x80000000) != 0)
      goto LABEL_23;
  }
  else
  {
    v11 = 0;
    if ((v9 & 0x80000000) != 0)
    {
LABEL_23:
      *a6 = 0;
      goto LABEL_24;
    }
  }
  v12 = __OFADD__(v11, (_DWORD)v9);
  v13 = v11 + v9;
  if (v12 || __OFADD__((_DWORD)v8, v13))
    goto LABEL_23;
  v14 = !v10 || (*(_BYTE *)(v10 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v8 + v13), v14, a1, v8, v10, a4, v9, a6);
  if (!*a6)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1824AA4E0);
  }
  return result;
}

WTF *WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, const WTF::StringImpl **a2)
{
  WTF *result;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  result = WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>((uint64_t)&v8, (uint64_t *)this + 10, a2 + 7, &v9);
  v5 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v5 && !*((_BYTE *)this + 32))
  {
    v6 = a2[9];
    v7 = 8 * v5 - 8;
LABEL_6:
    result = (WTF *)(*(uint64_t (**)(WGSL::RewriteGlobalVariables *, _QWORD))(*(_QWORD *)this + 88))(this, *(_QWORD *)v6);
    while (v7)
    {
      v6 = (const WTF::StringImpl *)((char *)v6 + 8);
      v7 -= 8;
      if (!*((_BYTE *)this + 32))
        goto LABEL_6;
    }
  }
  if (!*((_BYTE *)this + 32))
    return (WTF *)(*(uint64_t (**)(WGSL::RewriteGlobalVariables *, const WTF::StringImpl *))(*(_QWORD *)this + 208))(this, a2[8]);
  return result;
}

{
  WTF *result;
  uint64_t v5;
  int v6;
  BOOL v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl **v11;

  v11 = a2;
  result = WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>((uint64_t)&v10, (uint64_t *)this + 10, a2 + 6, &v11);
  v5 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v5 && !*((_BYTE *)this + 32))
  {
    v8 = a2[11];
    v9 = 8 * v5 - 8;
LABEL_17:
    result = (WTF *)(*(uint64_t (**)(WGSL::RewriteGlobalVariables *, _QWORD))(*(_QWORD *)this + 88))(this, *(_QWORD *)v8);
    while (v9)
    {
      v8 = (const WTF::StringImpl *)((char *)v8 + 8);
      v9 -= 8;
      if (!*((_BYTE *)this + 32))
        goto LABEL_17;
    }
  }
  v6 = *((unsigned __int8 *)this + 32);
  if (a2[13])
    v7 = v6 == 0;
  else
    v7 = 0;
  if (v7)
  {
    result = (WTF *)(*(uint64_t (**)(WGSL::RewriteGlobalVariables *))(*(_QWORD *)this + 544))(this);
    v6 = *((unsigned __int8 *)this + 32);
  }
  if (!v6 && a2[14])
  {
    result = (WTF *)(*(uint64_t (**)(WGSL::RewriteGlobalVariables *))(*(_QWORD *)this + 208))(this);
    v6 = *((unsigned __int8 *)this + 32);
  }
  if (!v6)
  {
    if (a2[15])
      return (WTF *)(*(uint64_t (**)(WGSL::RewriteGlobalVariables *))(*(_QWORD *)this + 208))(this);
  }
  return result;
}

uint64_t WGSL::RewriteGlobalVariables::visit(uint64_t this, uint64_t **a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  void *v30;
  int v31;
  int v32;
  uint64_t v33;

  v3 = this;
  v4 = *(_DWORD *)(this + 156);
  *(_DWORD *)(this + 156) = 0;
  v5 = *(unsigned int *)(this + 172);
  if (!(_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(this + 160);
    this = *(_QWORD *)(this + 160);
    if (!this)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v5 >> 28)
  {
    __break(0xC471u);
    return this;
  }
  v6 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
  memcpy(v6, *(const void **)(v3 + 160), 16 * *(unsigned int *)(v3 + 172));
  v7 = (uint64_t *)(v3 + 160);
  this = *(_QWORD *)(v3 + 160);
  if (this)
  {
LABEL_4:
    *(_QWORD *)(v3 + 160) = 0;
    *(_DWORD *)(v3 + 168) = 0;
    this = WTF::fastFree((WTF *)this, a2);
  }
LABEL_5:
  *v7 = 0;
  v7[1] = 0;
  v8 = a2[5];
  v9 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    do
    {
      v11 = *v8++;
      WGSL::AST::Visitor::visit((_BYTE *)v3, v11);
      ++*(_DWORD *)(v3 + 156);
      v10 -= 8;
    }
    while (v10);
    this = *(_QWORD *)(v3 + 160);
    v13 = *(unsigned int *)(v3 + 172);
    if ((_DWORD)v13)
    {
      v29 = v7;
      v30 = v6;
      v31 = v5;
      v32 = v4;
      v14 = 0;
      v15 = 16 * v13;
      v16 = (_DWORD *)(this + 8);
      do
      {
        v22 = *(_QWORD *)(v3 + 40);
        v23 = *v16;
        v33 = *((_QWORD *)v16 - 1);
        v24 = *((unsigned int *)a2 + 13);
        if (v24 == *((_DWORD *)a2 + 12))
        {
          v25 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 5), v24 + 1, (unint64_t)&v33);
          v24 = *((unsigned int *)a2 + 13);
        }
        else
        {
          v25 = &v33;
        }
        v26 = (v14 + v23);
        v27 = &a2[5][v26];
        memmove(v27 + 1, v27, 8 * v24 - 8 * v26);
        *v27 = *v25;
        ++*((_DWORD *)a2 + 13);
        v28 = (_QWORD *)(v22 + 400);
        v20 = *(unsigned int *)(v22 + 412);
        if ((_DWORD)v20 == *(_DWORD *)(v22 + 408))
        {
          v17 = v20 + (v20 >> 2);
          if (v17 >= 0x10)
            v18 = v17 + 1;
          else
            v18 = 16;
          if (v18 <= v20 + 1)
            v19 = v20 + 1;
          else
            v19 = v18;
          WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v28, v19);
          v20 = *(unsigned int *)(v22 + 412);
          v21 = (_QWORD *)(*(_QWORD *)(v22 + 400) + 32 * v20);
        }
        else
        {
          v21 = (_QWORD *)(*v28 + 32 * v20);
        }
        *v21 = &off_1E0FD4278;
        v21[1] = a2 + 5;
        v21[2] = v26;
        v21[3] = v21;
        ++v14;
        v16 += 4;
        *(_DWORD *)(v22 + 412) = v20 + 1;
        v15 -= 16;
      }
      while (v15);
      v6 = v30;
      this = *v29;
      v4 = v32;
      LODWORD(v5) = v31;
    }
    if (this)
    {
      *(_QWORD *)(v3 + 160) = 0;
      *(_DWORD *)(v3 + 168) = 0;
      this = WTF::fastFree((WTF *)this, v12);
    }
  }
  *(_QWORD *)(v3 + 160) = v6;
  *(_DWORD *)(v3 + 168) = v5;
  *(_DWORD *)(v3 + 172) = v5;
  *(_DWORD *)(v3 + 156) = v4;
  return this;
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::CompoundAssignmentStatement *a2)
{
  uint64_t v4;

  v4 = WGSL::RewriteGlobalVariables::pack((uint64_t *)this, 2, *((_QWORD *)a2 + 3));
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)this, v4, *((_QWORD *)a2 + 4));
}

uint64_t WGSL::RewriteGlobalVariables::pack(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unsigned int *v32;
  WGSL::RewriteGlobalVariables *v33;
  const WTF::StringImpl *v34;
  WGSL::AST::IdentifierExpression *Base;
  WTF::StringImpl **v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  const WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  unsigned int v55;
  int v56;
  uint64_t Variable;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  _QWORD *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  WTF *v117;
  int i;
  int v119;
  WTF *v120;
  BOOL v121;
  void *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  int v125;
  int v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  _DWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  int v140;
  _BYTE *v141;
  int8x16_t *v142;
  size_t v143;
  _BYTE *v144;
  unint64_t v145;
  unsigned __int128 *v146;
  unsigned __int128 v147;
  int j;
  uint64_t v149;
  uint64_t v150;
  int v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  _BYTE *v155;
  _QWORD *v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  void *v172;
  _QWORD *v173;
  WTF *v174;
  uint64_t v175;
  int v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _DWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _DWORD *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  void *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  void *v210;
  _QWORD *v211;
  WTF *v212;
  uint64_t v213;
  int v214;
  _DWORD *v215;
  uint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  char *v233;
  char *v234;
  int v235;
  uint64_t v236;
  _DWORD *v237;
  _OWORD *v238;
  _QWORD *v239;
  _DWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  void *v248;
  void *v249;
  void *v250;
  uint64_t v251;
  _QWORD *v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  void *v256;
  _QWORD *v257;
  WTF *v258;
  uint64_t v259;
  int v260;
  uint64_t *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  _DWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  void *v287;
  void *v288;
  void *v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  _QWORD *v293;
  void *v294;
  _QWORD *v295;
  WTF *v296;
  uint64_t v297;
  int v298;
  uint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  _DWORD *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _DWORD *v320;
  _DWORD *v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  void *v326;
  void *v327;
  void *v328;
  _QWORD *v329;
  uint64_t v330;
  _QWORD *v331;
  void *v332;
  WTF *v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  _DWORD *v337;
  _DWORD *v338;
  uint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  char *v356;
  char *v357;
  uint64_t v358;
  int v359;
  _DWORD *v360;
  _DWORD *v361;
  _DWORD *v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  char *v366;
  char *v367;
  int v368;
  uint64_t v369;
  _QWORD *v370;
  char *v371;
  char *v372;
  int v373;
  uint64_t v374;
  _QWORD *v375;
  char *v376;
  char *v377;
  _QWORD *v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  char *v383;
  char *v384;
  int v385;
  uint64_t v386;
  _QWORD *v387;
  char *v388;
  char *v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  _QWORD *v397;
  char *v398;
  char *v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  _DWORD *v403;
  _DWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  char *v407;
  char *v408;
  int v409;
  uint64_t v410;
  _DWORD *v411;
  _DWORD *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t *v420;
  unint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  __int128 *v424;
  _OWORD *v425;
  uint64_t v426;
  __int128 v427;
  _DWORD *v428;
  _DWORD *v429;
  _DWORD *v430;
  _DWORD *v431;
  _QWORD *v432;
  _DWORD *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  __int128 *v445;
  _OWORD *v446;
  uint64_t v447;
  __int128 v448;
  uint64_t *v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  size_t v453;
  unint64_t v454;
  BOOL v455;
  unint64_t v456;
  _BYTE *v457;
  int8x16_t *v458;
  char v459;
  _BYTE *v460;
  _QWORD *v461;
  _QWORD *v462;
  _QWORD *v463;
  _DWORD *v464;
  uint64_t v465;
  uint64_t v466;
  WGSL::Type *v467;
  int v468;
  int v469;
  _QWORD *v470;
  _QWORD *v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  _QWORD *v475;
  _QWORD *v476;
  WTF *v477;
  const WTF::StringImpl *v478;
  const WTF::StringImpl *v479;
  _DWORD *v480;
  uint64_t v481;
  int v482;
  uint64_t v483;
  _QWORD *v484;
  _QWORD *v485;
  _DWORD *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t *v495;
  unint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  __int128 *v499;
  _OWORD *v500;
  uint64_t v501;
  __int128 v502;
  uint64_t *v503;
  uint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  void *v509;
  void *v510;
  void *v511;
  _QWORD *v512;
  uint64_t v513;
  _QWORD *v514;
  void *v515;
  _QWORD *v516;
  WTF *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t *v526;
  unint64_t v527;
  uint64_t v528;
  _QWORD *v529;
  __int128 *v530;
  _OWORD *v531;
  uint64_t v532;
  __int128 v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t *v536;
  __int16 v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  int v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  int v557;
  __int16 v558;
  uint64_t v559;
  _QWORD *v560;
  char *v561;
  char *v562;
  void *v563;
  _QWORD *v564;
  int v565;
  int v566;
  int v567;
  uint64_t v568;
  _QWORD *v569;
  char *v570;
  char *v571;
  int v572;
  uint64_t v573;
  _OWORD *v574;
  uint64_t v575;
  WTF *v576;
  WTF **v577;
  WTF *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t *v586;
  unint64_t v587;
  uint64_t v588;
  _QWORD *v589;
  __int128 *v590;
  _OWORD *v591;
  uint64_t v592;
  __int128 v593;
  uint64_t *v594;
  uint64_t v595;
  int8x16_t *v597;
  int8x16_t *v598;
  unint64_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int16x8_t *v604;
  int8x8_t *v605;
  unint64_t v606;
  int16x8_t v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  _QWORD *v626;
  _QWORD *v627;
  _QWORD *v628;
  _QWORD *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  __int128 *v633;
  __int128 v634;
  __int128 v635;
  uint64_t v636;
  _BYTE v637[16];
  int v638;
  unsigned __int8 v639;
  _BYTE v640[32];
  _DWORD *v641;
  void (**v642)(WGSL::AST::Identifier *__hidden);
  __int128 v643;
  _DWORD *v644;
  __int128 v645;
  __int128 v646;
  uint64_t v647;
  _BYTE v648[16];
  int v649;
  unsigned __int8 v650;
  _BYTE v651[32];
  _DWORD *v652;
  void (**v653)(WGSL::AST::Identifier *__hidden);
  __int128 v654;
  _DWORD *v655;
  char v656;
  _DWORD *v657;
  int v658[3];

  v5 = a2;
  v7 = a1[31];
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 8 * v12);
    if (v13 == a3)
      return a2;
    v14 = 1;
    while (v13)
    {
      v12 = (v12 + v14) & v8;
      v13 = *(_QWORD *)(v7 + 8 * v12);
      ++v14;
      if (v13 == a3)
        return a2;
    }
  }
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
  {
    case 0x12u:
      v17 = (__int128 *)(a3 + 64);
      v15 = 2;
      WGSL::RewriteGlobalVariables::pack(a1, 2, *(_QWORD *)(a3 + 64));
      WGSL::RewriteGlobalVariables::pack(a1, 2, *(_QWORD *)(a3 + 72));
      if ((v5 & 2) != 0)
        return v15;
      v18 = *(_QWORD *)(a3 + 24);
      v19 = *(_DWORD *)(v18 + 48);
      if (v19 == 10)
      {
        v18 = *(_QWORD *)(v18 + 8);
        v19 = *(_DWORD *)(v18 + 48);
      }
      if (v19 == 3)
      {
        v20 = a1[5];
        *(_BYTE *)(v20 + 9) = 1;
      }
      else if (v19 == 4)
      {
        if (!WGSL::Type::isConstructible((WGSL::Type *)v18))
          return v15;
        v20 = a1[5];
      }
      else
      {
        v20 = a1[5];
        *(_BYTE *)(v20 + 11) = 1;
      }
      v72 = (_QWORD *)(v20 + 312);
      v634 = 0uLL;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *((_QWORD *)&v645 + 1) = 0;
      *(_QWORD *)&v646 = 0;
      *(_QWORD *)&v645 = &off_1E0FD2F10;
      v73 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v72, &v634, (uint64_t)&v645);
      v74 = (_DWORD *)*((_QWORD *)&v646 + 1);
      *(_QWORD *)&v645 = &off_1E0FD2F10;
      *((_QWORD *)&v646 + 1) = 0;
      if (v74)
      {
        if (*v74 == 2)
          WTF::StringImpl::destroy();
        else
          *v74 -= 2;
      }
      v75 = a1[5];
      v73[3] = *(_QWORD *)(v75 + 120);
      v76 = *(_QWORD *)(v75 + 312);
      if ((unint64_t)(*(_QWORD *)(v75 + 320) - v76) <= 0x57)
      {
        WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v75 + 312));
        v76 = *(_QWORD *)(v75 + 312);
      }
      *(_QWORD *)v76 = &off_1E0FD2EE8;
      *(_OWORD *)(v76 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)v76 = off_1E0FD2EC0;
      *(_QWORD *)(v76 + 24) = *(_QWORD *)(a3 + 24);
      *(_BYTE *)(v76 + 32) = 0;
      *(_BYTE *)(v76 + 56) = 0;
      if (*(_BYTE *)(a3 + 56))
      {
        *(_DWORD *)(v76 + 48) = -1;
        v77 = *(unsigned int *)(a3 + 48);
        if ((_DWORD)v77 != -1)
        {
          ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v77])(&v645, v76 + 32, a3 + 32);
          *(_DWORD *)(v76 + 48) = v77;
        }
        *(_BYTE *)(v76 + 56) = 1;
      }
      *(_QWORD *)v76 = off_1E0FD3038;
      v78 = *v17;
      *(_BYTE *)(v76 + 80) = *(_BYTE *)(a3 + 80);
      *(_OWORD *)(v76 + 64) = v78;
      *(_QWORD *)(v75 + 312) += 88;
      v79 = *(unsigned int *)(v75 + 356);
      if ((_DWORD)v79 == *(_DWORD *)(v75 + 352))
      {
        v80 = v79 + (v79 >> 2);
        if (v80 >= 0x10)
          v81 = v80 + 1;
        else
          v81 = 16;
        if (v81 <= v79 + 1)
          v82 = v79 + 1;
        else
          v82 = v81;
        if (v82 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824AF164);
        }
        v83 = *(void **)(v75 + 344);
        v84 = (void *)WTF::fastMalloc((WTF *)(8 * v82));
        *(_DWORD *)(v75 + 352) = v82;
        *(_QWORD *)(v75 + 344) = v84;
        memcpy(v84, v83, 8 * v79);
        if (v83)
        {
          if (*(void **)(v75 + 344) == v83)
          {
            *(_QWORD *)(v75 + 344) = 0;
            *(_DWORD *)(v75 + 352) = 0;
          }
          WTF::fastFree((WTF *)v83, v85);
        }
        v86 = *(unsigned int *)(v75 + 356);
        v87 = (_QWORD *)(*(_QWORD *)(v75 + 344) + 8 * v86);
      }
      else
      {
        v87 = (_QWORD *)(*(_QWORD *)(v75 + 344) + 8 * v79);
        LODWORD(v86) = *(_DWORD *)(v75 + 356);
      }
      *v87 = v76;
      *(_DWORD *)(v75 + 356) = v86 + 1;
      v88 = a1[5];
      v645 = 0uLL;
      v89 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      DWORD2(v634) = 1;
      *(_QWORD *)&v634 = v89;
      *v89 = v76;
      HIDWORD(v634) = 1;
      v91 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v88 + 312), &v645, (uint64_t)v73, (uint64_t *)&v634);
      v92 = (WTF *)v634;
      if ((_QWORD)v634)
      {
        *(_QWORD *)&v634 = 0;
        DWORD2(v634) = 0;
        WTF::fastFree(v92, v90);
      }
      v93 = *(_QWORD *)(v76 + 24);
      v629 = v91;
      *(_QWORD *)&v634 = a3;
      v91[3] = v93;
      v94 = a1[5];
      v635 = *(_OWORD *)(a3 + 8);
      *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
      v636 = *(_QWORD *)(a3 + 24);
      v637[0] = 0;
      v639 = 0;
      v95 = *(unsigned __int8 *)(a3 + 56);
      if (*(_BYTE *)(a3 + 56))
      {
        v638 = -1;
        v75 = *(unsigned int *)(a3 + 48);
        if ((_DWORD)v75 != -1)
        {
          ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v75])(&v645, v637, a3 + 32);
          v638 = v75;
        }
        v639 = 1;
      }
      v96 = (uint64_t *)(v94 + 400);
      *((_QWORD *)&v634 + 1) = off_1E0FD3038;
      *(_OWORD *)v640 = *v17;
      v640[16] = *(_BYTE *)(a3 + 80);
      v97 = *(unsigned int *)(v94 + 412);
      if ((_DWORD)v97 == *(_DWORD *)(v94 + 408))
      {
        v98 = v97 + (v97 >> 2);
        if (v98 >= 0x10)
          v99 = v98 + 1;
        else
          v99 = 16;
        if (v99 <= v97 + 1)
          v100 = v97 + 1;
        else
          v100 = v99;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v96, v100);
        v101 = *(unsigned int *)(v94 + 412);
        v102 = *(_QWORD *)(v94 + 400);
        v646 = v635;
        v103 = v634;
        v104 = v636;
        *(_QWORD *)&v645 = v634;
        *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
        v647 = v636;
        v648[0] = 0;
        v650 = 0;
        v105 = v639;
        if (v639)
        {
          v649 = -1;
          v95 = v638;
          if (v638 != -1)
          {
            v106 = v101;
            v107 = v102;
            ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v638])(&v657, v648, v637);
            v102 = v107;
            v101 = v106;
            v649 = v95;
            v103 = v645;
            v104 = v647;
          }
          v108 = 1;
          v650 = 1;
        }
        else
        {
          v108 = 0;
        }
        *((_QWORD *)&v645 + 1) = off_1E0FD3038;
        *(_OWORD *)v651 = *(_OWORD *)v640;
        v651[16] = v640[16];
        v131 = v102 + 32 * v101;
        *(_QWORD *)(v131 + 24) = 0;
        v132 = (_QWORD *)(v131 + 24);
        v133 = (char *)operator new(0x68uLL);
        v134 = v133;
        *(_QWORD *)v133 = off_1E0FD4048;
        *((_QWORD *)v133 + 1) = v103;
        *(_OWORD *)(v133 + 24) = v646;
        *((_QWORD *)v133 + 2) = off_1E0FD2EC0;
        *((_QWORD *)v133 + 5) = v104;
        v133[48] = 0;
        v133[72] = 0;
        if (v105)
        {
          *((_DWORD *)v133 + 16) = -1;
          v135 = v91;
          if (v95 != -1)
          {
            ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v95])(&v657, v133 + 48, v648);
            *((_DWORD *)v134 + 16) = v95;
            v108 = v650;
          }
          v134[72] = 1;
          *((_QWORD *)v134 + 2) = off_1E0FD3038;
          *((_OWORD *)v134 + 5) = *(_OWORD *)v651;
          v134[96] = v651[16];
          *v132 = v134;
          *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
          if (v108 && v649 != -1)
            ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
        }
        else
        {
          *((_QWORD *)v133 + 2) = off_1E0FD3038;
          *((_OWORD *)v133 + 5) = *(_OWORD *)v651;
          v133[96] = v651[16];
          *v132 = v133;
          v135 = v91;
        }
        ++*(_DWORD *)(v94 + 412);
      }
      else
      {
        v109 = *v96;
        v646 = v635;
        v110 = v634;
        v111 = v636;
        *(_QWORD *)&v645 = v634;
        *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
        v647 = v636;
        v648[0] = 0;
        v650 = 0;
        if (v95)
        {
          v649 = -1;
          if ((_DWORD)v75 != -1)
          {
            v112 = v109;
            ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v75])(&v657, v648, v637);
            v109 = v112;
            v649 = v75;
            v110 = v645;
            v111 = v647;
          }
          v621 = 1;
          v650 = 1;
        }
        else
        {
          v621 = 0;
        }
        *((_QWORD *)&v645 + 1) = off_1E0FD3038;
        *(_OWORD *)v651 = *(_OWORD *)v640;
        v651[16] = v640[16];
        v136 = v109 + 32 * v97;
        *(_QWORD *)(v136 + 24) = 0;
        v137 = (_QWORD *)(v136 + 24);
        v138 = (char *)operator new(0x68uLL);
        v139 = v138;
        *(_QWORD *)v138 = off_1E0FD4048;
        *((_QWORD *)v138 + 1) = v110;
        *(_OWORD *)(v138 + 24) = v646;
        *((_QWORD *)v138 + 2) = off_1E0FD2EC0;
        *((_QWORD *)v138 + 5) = v111;
        v138[48] = 0;
        v138[72] = 0;
        if (v95)
        {
          *((_DWORD *)v138 + 16) = -1;
          v140 = v621;
          if ((_DWORD)v75 != -1)
          {
            ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v75])(&v657, v138 + 48, v648);
            *((_DWORD *)v139 + 16) = v75;
            v140 = v650;
          }
          v139[72] = 1;
          *((_QWORD *)v139 + 2) = off_1E0FD3038;
          *((_OWORD *)v139 + 5) = *(_OWORD *)v651;
          v139[96] = v651[16];
          *v137 = v139;
          *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
          v135 = v629;
          if (v140)
          {
            if (v649 != -1)
              ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
            v649 = -1;
          }
        }
        else
        {
          *((_QWORD *)v138 + 2) = off_1E0FD3038;
          *((_OWORD *)v138 + 5) = *(_OWORD *)v651;
          v138[96] = v651[16];
          *v137 = v138;
          *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
          v135 = v629;
        }
        ++*(_DWORD *)(v94 + 412);
      }
      *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
      if (v639 && v638 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v638])(&v645, v637);
      (**(void (***)(uint64_t))a3)(a3);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v135 + 1);
      *(_QWORD *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      *(_QWORD *)a3 = off_1E0FD4020;
      *(_QWORD *)(a3 + 64) = v135;
      *(_QWORD *)(a3 + 24) = v135[3];
      return 1;
    case 0x14u:
      v31 = *(_QWORD **)(a3 + 64);
      if ((*(unsigned int (**)(_QWORD *))(*v31 + 16))(v31) != 22
        || !MEMORY[0x186DAB1B8](v31[11], "arrayLength", 11))
      {
        v63 = *(unsigned int *)(a3 + 84);
        if ((_DWORD)v63)
        {
          v64 = *(uint64_t **)(a3 + 72);
          v65 = 8 * v63;
          do
          {
            v66 = *v64++;
            WGSL::RewriteGlobalVariables::pack(a1, 2, v66);
            v65 -= 8;
          }
          while (v65);
        }
LABEL_704:
        if ((v5 & 2) == 0)
        {
          v481 = *(_QWORD *)(a3 + 24);
          v482 = *(_DWORD *)(v481 + 48);
          if (v482 == 10)
          {
            v481 = *(_QWORD *)(v481 + 8);
            v482 = *(_DWORD *)(v481 + 48);
          }
          if (v482 == 3)
          {
            v483 = a1[5];
            *(_BYTE *)(v483 + 9) = 1;
            goto LABEL_714;
          }
          if (v482 != 4)
          {
            v483 = a1[5];
            *(_BYTE *)(v483 + 11) = 1;
            goto LABEL_714;
          }
          if (WGSL::Type::isConstructible((WGSL::Type *)v481))
          {
            v483 = a1[5];
LABEL_714:
            v484 = (_QWORD *)(v483 + 312);
            v634 = 0uLL;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *((_QWORD *)&v645 + 1) = 0;
            *(_QWORD *)&v646 = 0;
            *(_QWORD *)&v645 = &off_1E0FD2F10;
            v485 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v484, &v634, (uint64_t)&v645);
            v486 = (_DWORD *)*((_QWORD *)&v646 + 1);
            *(_QWORD *)&v645 = &off_1E0FD2F10;
            *((_QWORD *)&v646 + 1) = 0;
            if (v486)
            {
              if (*v486 == 2)
                WTF::StringImpl::destroy();
              else
                *v486 -= 2;
            }
            v487 = a1[5];
            v485[3] = *(_QWORD *)(v487 + 120);
            v488 = *(_QWORD *)(v487 + 312);
            if ((unint64_t)(*(_QWORD *)(v487 + 320) - v488) <= 0x5F)
            {
              WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v487 + 312));
              v488 = *(_QWORD *)(v487 + 312);
            }
            *(_QWORD *)v488 = &off_1E0FD2EE8;
            *(_OWORD *)(v488 + 8) = *(_OWORD *)(a3 + 8);
            *(_QWORD *)v488 = off_1E0FD2EC0;
            *(_QWORD *)(v488 + 24) = *(_QWORD *)(a3 + 24);
            *(_BYTE *)(v488 + 32) = 0;
            *(_BYTE *)(v488 + 56) = 0;
            if (*(_BYTE *)(a3 + 56))
            {
              *(_DWORD *)(v488 + 48) = -1;
              v489 = *(unsigned int *)(a3 + 48);
              if ((_DWORD)v489 != -1)
              {
                ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v489])(&v645, v488 + 32, a3 + 32);
                *(_DWORD *)(v488 + 48) = v489;
              }
              *(_BYTE *)(v488 + 56) = 1;
            }
            *(_QWORD *)v488 = off_1E0FD2F38;
            *(_QWORD *)(v488 + 64) = *(_QWORD *)(a3 + 64);
            v490 = *(unsigned int *)(a3 + 84);
            *(_QWORD *)(v488 + 72) = 0;
            *(_QWORD *)(v488 + 80) = 0;
            *(_DWORD *)(v488 + 84) = v490;
            if (!(_DWORD)v490)
            {
LABEL_736:
              *(_WORD *)(v488 + 88) = *(_WORD *)(a3 + 88);
              *(_QWORD *)(v487 + 312) += 96;
              v505 = *(unsigned int *)(v487 + 356);
              if ((_DWORD)v505 == *(_DWORD *)(v487 + 352))
              {
                v506 = v505 + (v505 >> 2);
                if (v506 >= 0x10)
                  v507 = v506 + 1;
                else
                  v507 = 16;
                if (v507 <= v505 + 1)
                  v508 = v505 + 1;
                else
                  v508 = v507;
                if (v508 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824AF174);
                }
                v509 = *(void **)(v487 + 344);
                v510 = (void *)WTF::fastMalloc((WTF *)(8 * v508));
                *(_DWORD *)(v487 + 352) = v508;
                *(_QWORD *)(v487 + 344) = v510;
                memcpy(v510, v509, 8 * v505);
                if (v509)
                {
                  if (*(void **)(v487 + 344) == v509)
                  {
                    *(_QWORD *)(v487 + 344) = 0;
                    *(_DWORD *)(v487 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v509, v511);
                }
                v505 = *(unsigned int *)(v487 + 356);
                v512 = (_QWORD *)(*(_QWORD *)(v487 + 344) + 8 * v505);
              }
              else
              {
                v512 = (_QWORD *)(*(_QWORD *)(v487 + 344) + 8 * v505);
              }
              *v512 = v488;
              *(_DWORD *)(v487 + 356) = v505 + 1;
              v513 = a1[5];
              v645 = 0uLL;
              v514 = (_QWORD *)WTF::fastMalloc((WTF *)8);
              DWORD2(v634) = 1;
              *(_QWORD *)&v634 = v514;
              *v514 = v488;
              HIDWORD(v634) = 1;
              v516 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v513 + 312), &v645, (uint64_t)v485, (uint64_t *)&v634);
              v517 = (WTF *)v634;
              if ((_QWORD)v634)
              {
                *(_QWORD *)&v634 = 0;
                DWORD2(v634) = 0;
                WTF::fastFree(v517, v515);
              }
              v516[3] = *(_QWORD *)(v488 + 24);
              v518 = a1[5];
              v635 = *(_OWORD *)(a3 + 8);
              *(_QWORD *)&v634 = a3;
              *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
              v636 = *(_QWORD *)(a3 + 24);
              v637[0] = 0;
              v639 = 0;
              if (*(_BYTE *)(a3 + 56))
              {
                v638 = -1;
                v519 = *(unsigned int *)(a3 + 48);
                if ((_DWORD)v519 != -1)
                {
                  ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v519])(&v645, v637, a3 + 32);
                  v638 = v519;
                }
                v639 = 1;
              }
              v520 = *(_QWORD *)(a3 + 64);
              *((_QWORD *)&v634 + 1) = off_1E0FD2F38;
              *(_QWORD *)v640 = v520;
              *(_QWORD *)&v640[8] = 0;
              v521 = *(unsigned int *)(a3 + 84);
              *(_DWORD *)&v640[16] = 0;
              *(_DWORD *)&v640[20] = v521;
              if ((_DWORD)v521)
              {
                if (v521 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824AF14CLL);
                }
                v522 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v521));
                *(_DWORD *)&v640[16] = v521;
                *(_QWORD *)&v640[8] = v522;
                v523 = *(unsigned int *)(a3 + 84);
                if ((_DWORD)v523)
                {
                  v524 = *(_QWORD *)(a3 + 72);
                  v525 = (v523 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                  if (v525 < 3)
                  {
                    v526 = *(uint64_t **)(a3 + 72);
                  }
                  else
                  {
                    v526 = *(uint64_t **)(a3 + 72);
                    if ((unint64_t)v522 - v524 >= 0x20)
                    {
                      v527 = v525 + 1;
                      v528 = v527 & 0x3FFFFFFFFFFFFFFCLL;
                      v529 = &v522[v528];
                      v526 = (uint64_t *)(v524 + v528 * 8);
                      v530 = (__int128 *)(v524 + 16);
                      v531 = v522 + 2;
                      v532 = v527 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v533 = *v530;
                        *(v531 - 1) = *(v530 - 1);
                        *v531 = v533;
                        v530 += 2;
                        v531 += 2;
                        v532 -= 4;
                      }
                      while (v532);
                      v522 = v529;
                      if (v527 == (v527 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_768;
                    }
                  }
                  v534 = (uint64_t *)(v524 + 8 * v523);
                  do
                  {
                    v535 = *v526++;
                    *v522++ = v535;
                  }
                  while (v526 != v534);
                }
              }
LABEL_768:
              v628 = v516;
              v536 = (uint64_t *)(v518 + 400);
              v537 = *(_WORD *)(a3 + 88);
              *(_WORD *)&v640[24] = v537;
              v538 = *(unsigned int *)(v518 + 412);
              v623 = v518;
              if ((_DWORD)v538 == *(_DWORD *)(v518 + 408))
              {
                v539 = v538 + (v538 >> 2);
                if (v539 >= 0x10)
                  v540 = v539 + 1;
                else
                  v540 = 16;
                if (v540 <= v538 + 1)
                  v541 = v538 + 1;
                else
                  v541 = v540;
                WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v536, v541);
                v542 = *(unsigned int *)(v518 + 412);
                v543 = *(_QWORD *)(v518 + 400);
                v646 = v635;
                v544 = v634;
                v545 = v636;
                *(_QWORD *)&v645 = v634;
                *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
                v647 = v636;
                v648[0] = 0;
                v650 = 0;
                v613 = v639;
                if (v639)
                {
                  v649 = -1;
                  v546 = v638;
                  if (v638 != -1)
                  {
                    v547 = v542;
                    ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v638])(&v657, v648, v637);
                    v542 = v547;
                    v649 = v546;
                    v544 = v645;
                    v545 = v647;
                  }
                  v609 = v546;
                  v611 = 1;
                  v650 = 1;
                }
                else
                {
                  v611 = 0;
                  v609 = 0;
                }
                v555 = *(_QWORD *)v640;
                v554 = *(_QWORD *)&v640[8];
                *((_QWORD *)&v645 + 1) = off_1E0FD2F38;
                *(_QWORD *)v651 = *(_QWORD *)v640;
                *(_QWORD *)&v651[8] = *(_QWORD *)&v640[8];
                v556 = *(_DWORD *)&v640[16];
                v557 = *(_DWORD *)&v640[20];
                *(_QWORD *)&v640[8] = 0;
                *(_QWORD *)&v640[16] = 0;
                *(_DWORD *)&v651[16] = v556;
                *(_DWORD *)&v651[20] = v557;
                v558 = *(_WORD *)&v640[24];
                *(_WORD *)&v651[24] = *(_WORD *)&v640[24];
                v559 = v543 + 32 * v542;
                *(_QWORD *)(v559 + 24) = 0;
                v560 = (_QWORD *)(v559 + 24);
                v561 = (char *)operator new(0x70uLL);
                v562 = v561;
                *(_QWORD *)v561 = off_1E0FD40D8;
                *((_QWORD *)v561 + 1) = v544;
                *(_OWORD *)(v561 + 24) = v646;
                *((_QWORD *)v561 + 2) = off_1E0FD2EC0;
                *((_QWORD *)v561 + 5) = v545;
                v561[48] = 0;
                v563 = v561 + 48;
                v561[72] = 0;
                if (v613)
                {
                  *((_DWORD *)v561 + 16) = -1;
                  v564 = v628;
                  v565 = v611;
                  if (v609 != -1)
                  {
                    ((void (*)(_DWORD **, void *, _BYTE *))off_1E0FD3EE0[v609])(&v657, v563, v648);
                    *((_DWORD *)v562 + 16) = v609;
                    v555 = *(_QWORD *)v651;
                    v554 = *(_QWORD *)&v651[8];
                    v556 = *(_DWORD *)&v651[16];
                    v557 = *(_DWORD *)&v651[20];
                    v558 = *(_WORD *)&v651[24];
                    v565 = v650;
                  }
                  v562[72] = 1;
                }
                else
                {
                  v565 = 0;
                  v564 = v628;
                }
                *((_QWORD *)v562 + 2) = off_1E0FD2F38;
                *(_OWORD *)&v651[8] = 0uLL;
                *((_QWORD *)v562 + 10) = v555;
                *((_QWORD *)v562 + 11) = v554;
                *((_DWORD *)v562 + 24) = v556;
                *((_DWORD *)v562 + 25) = v557;
                *((_WORD *)v562 + 52) = v558;
                *v560 = v562;
                *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
                if (v565 && v649 != -1)
                  ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
                ++*(_DWORD *)(v623 + 412);
                v573 = a3 + 32;
                v574 = (_OWORD *)(a3 + 8);
              }
              else
              {
                v548 = *v536;
                v646 = v635;
                v549 = v634;
                v550 = v636;
                *(_QWORD *)&v645 = v634;
                *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
                v647 = v636;
                v648[0] = 0;
                v650 = 0;
                v551 = v639;
                if (v639)
                {
                  v649 = -1;
                  v552 = v638;
                  if (v638 != -1)
                  {
                    ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v638])(&v657, v648, v637);
                    v649 = v552;
                    v537 = *(_WORD *)&v640[24];
                    v549 = v645;
                    v550 = v647;
                  }
                  v553 = 1;
                  v650 = 1;
                }
                else
                {
                  v553 = 0;
                }
                *((_QWORD *)&v645 + 1) = off_1E0FD2F38;
                *(_QWORD *)v651 = *(_QWORD *)v640;
                *(_QWORD *)&v651[8] = *(_QWORD *)&v640[8];
                v567 = *(_DWORD *)&v640[16];
                v566 = *(_DWORD *)&v640[20];
                *(_QWORD *)&v640[8] = 0;
                *(_QWORD *)&v640[16] = 0;
                *(_DWORD *)&v651[16] = v567;
                *(_DWORD *)&v651[20] = v566;
                *(_WORD *)&v651[24] = v537;
                v568 = v548 + 32 * v538;
                *(_QWORD *)(v568 + 24) = 0;
                v569 = (_QWORD *)(v568 + 24);
                v570 = (char *)operator new(0x70uLL);
                v571 = v570;
                *(_QWORD *)v570 = off_1E0FD40D8;
                *((_QWORD *)v570 + 1) = v549;
                *(_OWORD *)(v570 + 24) = v646;
                *((_QWORD *)v570 + 2) = off_1E0FD2EC0;
                *((_QWORD *)v570 + 5) = v550;
                v570[48] = 0;
                v563 = v570 + 48;
                v570[72] = 0;
                if (v551)
                {
                  *((_DWORD *)v570 + 16) = -1;
                  v572 = v649;
                  v573 = a3 + 32;
                  if (v649 != -1)
                  {
                    ((void (*)(_DWORD **, void *, _BYTE *))off_1E0FD3EE0[v649])(&v657, v563, v648);
                    *((_DWORD *)v571 + 16) = v572;
                    v567 = *(_DWORD *)&v651[16];
                    v566 = *(_DWORD *)&v651[20];
                    v553 = v650;
                  }
                  v571[72] = 1;
                }
                else
                {
                  v553 = 0;
                  v573 = a3 + 32;
                }
                v574 = (_OWORD *)(a3 + 8);
                *((_QWORD *)v571 + 2) = off_1E0FD2F38;
                v575 = *(_QWORD *)&v651[8];
                *(_OWORD *)&v651[8] = 0uLL;
                *((_QWORD *)v571 + 10) = *(_QWORD *)v651;
                *((_QWORD *)v571 + 11) = v575;
                *((_DWORD *)v571 + 24) = v567;
                *((_DWORD *)v571 + 25) = v566;
                *((_WORD *)v571 + 52) = *(_WORD *)&v651[24];
                *v569 = v571;
                *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
                if (v553 && v649 != -1)
                  ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
                ++*(_DWORD *)(v623 + 412);
                v564 = v628;
              }
              v576 = *(WTF **)&v640[8];
              if (*(_QWORD *)&v640[8])
              {
                *(_QWORD *)&v640[8] = 0;
                *(_DWORD *)&v640[16] = 0;
                WTF::fastFree(v576, v563);
              }
              v577 = (WTF **)(a3 + 72);
              *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
              if (v639 && v638 != -1)
                ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v638])(&v645, v637);
              v578 = *v577;
              if (*v577)
              {
                *(_QWORD *)(a3 + 72) = 0;
                *(_DWORD *)(a3 + 80) = 0;
                WTF::fastFree(v578, v563);
              }
              *(_QWORD *)a3 = off_1E0FD2EC0;
              if (*(_BYTE *)(a3 + 56))
              {
                v579 = *(unsigned int *)(a3 + 48);
                if ((_DWORD)v579 != -1)
                  ((void (*)(__int128 *, uint64_t))off_1E0FD3E30[v579])(&v645, v573);
                *(_DWORD *)(a3 + 48) = -1;
              }
              *(_QWORD *)a3 = &off_1E0FD2EE8;
              *v574 = *(_OWORD *)(v564 + 1);
              *(_QWORD *)a3 = off_1E0FD2EC0;
              *(_QWORD *)(a3 + 24) = v564[3];
              *(_BYTE *)(a3 + 32) = 0;
              *(_BYTE *)(a3 + 56) = 0;
              if (*((_BYTE *)v564 + 56))
              {
                *(_DWORD *)(a3 + 48) = -1;
                v580 = *((unsigned int *)v564 + 12);
                if ((_DWORD)v580 != -1)
                {
                  ((void (*)(__int128 *, uint64_t, _QWORD *))off_1E0FD3E88[v580])(&v645, v573, v564 + 4);
                  *(_DWORD *)(a3 + 48) = v580;
                }
                *(_BYTE *)(a3 + 56) = 1;
              }
              *(_QWORD *)a3 = off_1E0FD2F38;
              *(_QWORD *)(a3 + 64) = v564[8];
              v581 = *((unsigned int *)v564 + 21);
              *v577 = 0;
              *(_QWORD *)(a3 + 80) = 0;
              *(_DWORD *)(a3 + 84) = v581;
              if ((_DWORD)v581)
              {
                if (v581 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824AF154);
                }
                v582 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v581));
                *(_DWORD *)(a3 + 80) = v581;
                *(_QWORD *)(a3 + 72) = v582;
                v583 = *((unsigned int *)v564 + 21);
                if ((_DWORD)v583)
                {
                  v584 = v564[9];
                  v585 = (v583 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                  if (v585 < 3)
                  {
                    v586 = (uint64_t *)v564[9];
                  }
                  else
                  {
                    v586 = (uint64_t *)v564[9];
                    if ((unint64_t)v582 - v584 >= 0x20)
                    {
                      v587 = v585 + 1;
                      v588 = v587 & 0x3FFFFFFFFFFFFFFCLL;
                      v589 = &v582[v588];
                      v586 = (uint64_t *)(v584 + v588 * 8);
                      v590 = (__int128 *)(v584 + 16);
                      v591 = v582 + 2;
                      v592 = v587 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v593 = *v590;
                        *(v591 - 1) = *(v590 - 1);
                        *v591 = v593;
                        v590 += 2;
                        v591 += 2;
                        v592 -= 4;
                      }
                      while (v592);
                      v582 = v589;
                      if (v587 == (v587 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_830;
                    }
                  }
                  v594 = (uint64_t *)(v584 + 8 * v583);
                  do
                  {
                    v595 = *v586++;
                    *v582++ = v595;
                  }
                  while (v586 != v594);
                }
              }
LABEL_830:
              *(_WORD *)(a3 + 88) = *((_WORD *)v564 + 44);
              return 1;
            }
            if (!(v490 >> 29))
            {
              v491 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v490));
              *(_DWORD *)(v488 + 80) = v490;
              *(_QWORD *)(v488 + 72) = v491;
              v492 = *(unsigned int *)(a3 + 84);
              if (!(_DWORD)v492)
                goto LABEL_736;
              v493 = *(_QWORD *)(a3 + 72);
              v494 = (v492 - 1) & 0x1FFFFFFFFFFFFFFFLL;
              if (v494 < 3)
              {
                v495 = *(uint64_t **)(a3 + 72);
              }
              else
              {
                v495 = *(uint64_t **)(a3 + 72);
                if ((unint64_t)v491 - v493 >= 0x20)
                {
                  v496 = v494 + 1;
                  v497 = v496 & 0x3FFFFFFFFFFFFFFCLL;
                  v498 = &v491[v497];
                  v495 = (uint64_t *)(v493 + v497 * 8);
                  v499 = (__int128 *)(v493 + 16);
                  v500 = v491 + 2;
                  v501 = v496 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v502 = *v499;
                    *(v500 - 1) = *(v499 - 1);
                    *v500 = v502;
                    v499 += 2;
                    v500 += 2;
                    v501 -= 4;
                  }
                  while (v501);
                  v491 = v498;
                  if (v496 == (v496 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_736;
                }
              }
              v503 = (uint64_t *)(v493 + 8 * v492);
              do
              {
                v504 = *v495++;
                *v491++ = v504;
              }
              while (v495 != v503);
              goto LABEL_736;
            }
LABEL_847:
            __break(0xC471u);
            JUMPOUT(0x1824AF144);
          }
        }
        return 2;
      }
      if (!*(_DWORD *)(a3 + 84))
      {
        __break(0xC471u);
        JUMPOUT(0x1824AF15CLL);
      }
      v33 = **(WGSL::RewriteGlobalVariables ***)(a3 + 72);
      v658[0] = 0;
      Base = WGSL::RewriteGlobalVariables::getBase(v33, (WGSL::AST::Expression *)v658, v32);
      v36 = (WTF::StringImpl **)((char *)Base + 88);
      v37 = a1[6];
      if (v37)
      {
        v38 = *(_DWORD *)(v37 - 8);
        v39 = *((_DWORD *)*v36 + 4);
        if (v39 < 0x100)
          v40 = WTF::StringImpl::hashSlowCase(*v36);
        else
          v40 = v39 >> 8;
        for (i = 0; ; v40 = i + v119)
        {
          v119 = v40 & v38;
          v120 = *(WTF **)(v37 + 32 * (v40 & v38));
          if (v120 != (WTF *)-1)
          {
            if (!v120)
              goto LABEL_156;
            if ((WTF::equal(v120, *v36, v34) & 1) != 0)
              break;
          }
          ++i;
        }
      }
      else
      {
LABEL_156:
        v634 = 0uLL;
        *(_QWORD *)&v635 = 0;
        WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::add<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>((uint64_t)&v645, a1 + 14, a1 + 29, &v634);
        v123 = (WTF *)*((_QWORD *)&v634 + 1);
        if (*((_QWORD *)&v634 + 1))
        {
          do
          {
            v129 = v123;
            v123 = (WTF *)*((_QWORD *)v123 + 2);
            v130 = *(_DWORD **)v129;
            *(_QWORD *)v129 = 0;
            if (v130)
            {
              if (*v130 == 2)
                WTF::StringImpl::destroy();
              else
                *v130 -= 2;
            }
            WTF::fastFree(v129, v122);
          }
          while (v123);
        }
        if ((_QWORD)v634)
          WTF::fastFree((WTF *)(v634 - 16), v122);
        WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v634, (uint64_t *)(v645 + 8), v36);
      }
      v124 = *v36;
      if (v124)
      {
        v125 = *((_DWORD *)v124 + 1);
        *(_DWORD *)v124 += 2;
        if (v125 < 0)
          goto LABEL_844;
        v121 = __OFADD__(v125, 12);
        v126 = v125 + 12;
        if (v121)
          goto LABEL_844;
      }
      else
      {
        v126 = 12;
        if (v121)
          goto LABEL_844;
      }
      v127 = (v126 + 2);
      if (!__OFADD__(v126, 2))
      {
        if (v124)
        {
          if ((*((_BYTE *)v124 + 16) & 4) == 0)
          {
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v127, 0, (int8x16_t *)"__", 2u, (uint64_t)v124, (int8x16_t *)"_ArrayLength", 0xCu, &v657);
            v128 = v657;
            if (!v657)
              goto LABEL_845;
            goto LABEL_686;
          }
          WTF::tryFastCompactMalloc((WTF *)(v127 + 20));
          v128 = (_DWORD *)v645;
          if ((_QWORD)v645)
          {
            *(_DWORD *)v645 = 2;
            v128[1] = v127;
            *((_WORD *)v128 + 10) = 24415;
            *((_QWORD *)v128 + 1) = v128 + 5;
            v128[4] = 4;
            v141 = (char *)v128 + 22;
            v142 = (int8x16_t *)*((_QWORD *)v124 + 1);
            v143 = *((unsigned int *)v124 + 1);
            if ((*((_BYTE *)v124 + 16) & 4) != 0)
            {
              if ((_DWORD)v143)
              {
                if ((_DWORD)v143 == 1)
                  *v141 = v142->i8[0];
                else
                  memcpy((char *)v128 + 22, v142, v143);
              }
              goto LABEL_685;
            }
            v144 = &v141[v143];
            if (v143 < 0x10)
            {
              v145 = (unint64_t)v128 + 22;
            }
            else
            {
              v145 = (unint64_t)&v141[v143 & 0xFFFFFFF0];
              v146 = (unsigned __int128 *)((char *)v128 + 22);
              do
              {
                v147 = (unsigned __int128)vld2q_s8(v142->i8);
                v142 += 2;
                *v146++ = v147;
              }
              while (v146 != (unsigned __int128 *)v145);
            }
            if ((_BYTE *)v145 == v144)
            {
LABEL_685:
              v460 = &v141[*((unsigned int *)v124 + 1)];
              *(_QWORD *)v460 = *(_QWORD *)"_ArrayLength";
              *((_DWORD *)v460 + 2) = 1752459118;
              v657 = v128;
LABEL_686:
              if (*(_DWORD *)v124 == 2)
              {
                WTF::StringImpl::destroy();
                v128 = v657;
                v461 = a1 + 5;
                v462 = (_QWORD *)(a1[5] + 312);
                v634 = 0uLL;
                if (!v657)
                  goto LABEL_691;
                goto LABEL_690;
              }
              *(_DWORD *)v124 -= 2;
LABEL_688:
              v461 = a1 + 5;
              v462 = (_QWORD *)(a1[5] + 312);
              v634 = 0uLL;
LABEL_690:
              *v128 += 2;
LABEL_691:
              *(_QWORD *)&v645 = &off_1E0FD2F10;
              *((_QWORD *)&v645 + 1) = 0;
              *(_QWORD *)&v646 = 0;
              *((_QWORD *)&v646 + 1) = v128;
              v463 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v462, &v634, (uint64_t)&v645);
              v464 = (_DWORD *)*((_QWORD *)&v646 + 1);
              *(_QWORD *)&v645 = &off_1E0FD2F10;
              *((_QWORD *)&v646 + 1) = 0;
              if (v464)
              {
                if (*v464 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v464 -= 2;
              }
              v463[3] = *(_QWORD *)(*v461 + 168);
              v465 = *((_QWORD *)v33 + 3);
              if (*(_DWORD *)(v465 + 48) == 11)
              {
                v466 = *(_QWORD *)(v465 + 8);
                if (*(_DWORD *)(v466 + 48) == 3)
                {
                  v467 = *(WGSL::Type **)v466;
                  v468 = WGSL::Type::size(*(WGSL::Type **)v466);
                  v469 = WGSL::Type::alignment(v467);
                  LODWORD(v634) = (v468 + v469 - 1) & -v469;
                  v470 = (_QWORD *)(*v461 + 312);
                  v645 = 0uLL;
                  v471 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(v470, &v645, (int *)&v634);
                  v472 = *v461;
                  v471[3] = *(_QWORD *)(*v461 + 168);
                  if (v658[0])
                  {
                    v645 = 0uLL;
                    v473 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>((_QWORD *)(v472 + 312), &v645, v658);
                    v474 = *v461;
                    v473[3] = *(_QWORD *)(*v461 + 168);
                    v645 = 0uLL;
                    v656 = 1;
                    v475 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>((_QWORD *)(v474 + 312), &v645, (uint64_t)v463, (uint64_t)v473, &v656);
                    v472 = *v461;
                    v475[3] = *(_QWORD *)(*v461 + 168);
                  }
                  else
                  {
                    v475 = v463;
                  }
                  *(_BYTE *)(v472 + 14) = 1;
                  v645 = 0uLL;
                  v656 = 3;
                  v476 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>((_QWORD *)(v472 + 312), &v645, (uint64_t)v475, (uint64_t)v471, &v656);
                  v477 = (WTF *)a1[5];
                  v476[3] = *((_QWORD *)v477 + 21);
                  WGSL::ShaderModule::replace<WGSL::AST::CallExpression,WGSL::AST::BinaryExpression>(v477, a3, (uint64_t)v476);
                  WGSL::RewriteGlobalVariables::readVariable((WGSL::RewriteGlobalVariables *)a1, Base, v478);
                  WGSL::RewriteGlobalVariables::readVariable((WGSL::RewriteGlobalVariables *)a1, (WGSL::AST::IdentifierExpression *)v463, v479);
                  v480 = v657;
                  v657 = 0;
                  if (v480)
                  {
                    if (*v480 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v480 -= 2;
                  }
                  goto LABEL_704;
                }
              }
LABEL_846:
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_847;
            }
            v453 = (size_t)v128 + v143;
            v454 = (unint64_t)v128 + v143 - v145 + 22;
            if (v454 < 8
              || (v145 < (unint64_t)&v142[2].u64[1] + 2 * v453 + -2 * v145 + 4
                ? (v455 = (unint64_t)v142 >= v453 + 22)
                : (v455 = 1),
                  !v455))
            {
              v457 = (_BYTE *)v145;
              v458 = v142;
              goto LABEL_682;
            }
            if (v454 >= 0x20)
            {
              v456 = v454 & 0xFFFFFFFFFFFFFFE0;
              v597 = v142 + 2;
              v598 = (int8x16_t *)(v145 + 16);
              v599 = v454 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v601 = v597[-2];
                v600 = v597[-1];
                v603 = *v597;
                v602 = v597[1];
                v597 += 4;
                v598[-1] = vuzp1q_s8(v601, v600);
                *v598 = vuzp1q_s8(v603, v602);
                v598 += 2;
                v599 -= 32;
              }
              while (v599);
              if (v454 == v456)
                goto LABEL_685;
              if ((v454 & 0x18) == 0)
              {
                v458 = (int8x16_t *)((char *)v142 + 2 * v456);
                v457 = (_BYTE *)(v145 + v456);
                do
                {
LABEL_682:
                  v459 = v458->i8[0];
                  v458 = (int8x16_t *)((char *)v458 + 2);
                  *v457++ = v459;
                }
                while (v457 != v144);
                goto LABEL_685;
              }
            }
            else
            {
              v456 = 0;
            }
            v457 = (_BYTE *)(v145 + (v454 & 0xFFFFFFFFFFFFFFF8));
            v458 = (int8x16_t *)((char *)v142 + 2 * (v454 & 0xFFFFFFFFFFFFFFF8));
            v604 = (int16x8_t *)((char *)v142 + 2 * v456);
            v605 = (int8x8_t *)(v145 + v456);
            v606 = v456 - (v454 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v607 = *v604++;
              *v605++ = vmovn_s16(v607);
              v606 += 8;
            }
            while (v606);
            if (v454 == (v454 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_685;
            goto LABEL_682;
          }
        }
        else
        {
          WTF::tryFastCompactMalloc((WTF *)(v127 + 20));
          v128 = (_DWORD *)v645;
          if ((_QWORD)v645)
          {
            *(_DWORD *)v645 = 2;
            v128[1] = v127;
            qmemcpy(v128 + 5, "___ArrayLength", 14);
            *((_QWORD *)v128 + 1) = v128 + 5;
            v128[4] = 4;
            v657 = v128;
            goto LABEL_688;
          }
        }
      }
LABEL_844:
      v657 = 0;
LABEL_845:
      __break(0xC471u);
      JUMPOUT(0x1824AF138);
    case 0x15u:
      if ((WGSL::RewriteGlobalVariables::pack(a1, 3, *(_QWORD *)(a3 + 64)) & 2) != 0)
        goto LABEL_76;
      v49 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 24);
      if (!v49)
        goto LABEL_56;
      v50 = *(_DWORD *)(v49 + 48);
      if (v50 != 10)
        goto LABEL_54;
      v49 = *(_QWORD *)(v49 + 8);
      if (v49)
      {
        v50 = *(_DWORD *)(v49 + 48);
LABEL_54:
        if (v50 == 11)
          v49 = *(_QWORD *)(v49 + 8);
      }
LABEL_56:
      v51 = *(_DWORD *)(v49 + 48);
      if (v51 == 1)
      {
LABEL_76:
        v15 = 2;
        if ((v5 & 2) != 0)
          return v15;
        goto LABEL_212;
      }
      if (v51 != 4)
        goto LABEL_846;
      v52 = *(_QWORD *)(v49 + 8);
      if (v52)
      {
        v53 = *(_DWORD *)(v52 - 8);
        v54 = *(WTF::StringImpl **)(a3 + 128);
        v55 = *((_DWORD *)v54 + 4);
        if (v55 < 0x100)
          v56 = WTF::StringImpl::hashSlowCase(v54);
        else
          v56 = v55 >> 8;
        for (j = 0; ; v56 = j + v149)
        {
          v149 = v56 & v53;
          v117 = *(WTF **)(v52 + 16 * v149);
          if (v117 != (WTF *)-1)
          {
            if (!v117)
              goto LABEL_211;
            if ((WTF::equal(v117, *(const WTF::StringImpl **)(a3 + 128), v48) & 1) != 0)
              break;
          }
          ++j;
        }
        v117 = *(WTF **)(v52 + 16 * v149 + 8);
      }
      else
      {
        v117 = 0;
      }
LABEL_211:
      v15 = WGSL::Type::packing(v117);
      if ((v15 & v5) == 0)
      {
LABEL_212:
        v150 = *(_QWORD *)(a3 + 24);
        v151 = *(_DWORD *)(v150 + 48);
        if (v151 == 10)
        {
          v150 = *(_QWORD *)(v150 + 8);
          v151 = *(_DWORD *)(v150 + 48);
        }
        if (v151 == 3)
        {
          v155 = (_BYTE *)a1[5];
          if ((v15 & 1) != 0)
            v155[10] = 1;
          else
            v155[9] = 1;
        }
        else
        {
          if (v151 == 4)
          {
            if ((WGSL::Type::isConstructible((WGSL::Type *)v150) & 1) == 0)
              return v15;
            v153 = a1[5];
            v152 = a1 + 5;
            v154 = (_QWORD *)(v153 + 312);
            v634 = 0uLL;
            goto LABEL_428;
          }
          v155 = (_BYTE *)a1[5];
          if ((v15 & 1) != 0)
            v155[12] = 1;
          else
            v155[11] = 1;
        }
        v152 = a1 + 5;
        v154 = v155 + 312;
        v634 = 0uLL;
LABEL_428:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_QWORD *)&v645 = &off_1E0FD2F10;
        *((_QWORD *)&v645 + 1) = 0;
        *(_QWORD *)&v646 = 0;
        *((_QWORD *)&v646 + 1) = v657;
        v315 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v154, &v634, (uint64_t)&v645);
        v316 = (_DWORD *)*((_QWORD *)&v646 + 1);
        *(_QWORD *)&v645 = &off_1E0FD2F10;
        *((_QWORD *)&v646 + 1) = 0;
        if (v316)
        {
          if (*v316 == 2)
            WTF::StringImpl::destroy();
          else
            *v316 -= 2;
        }
        v317 = *v152;
        v315[3] = *(_QWORD *)(*v152 + 120);
        v318 = *(_QWORD *)(v317 + 312);
        if ((unint64_t)(*(_QWORD *)(v317 + 320) - v318) <= 0x87)
        {
          WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v317 + 312));
          v318 = *(_QWORD *)(v317 + 312);
        }
        *(_QWORD *)v318 = &off_1E0FD2EE8;
        *(_OWORD *)(v318 + 8) = *(_OWORD *)(a3 + 8);
        *(_QWORD *)v318 = off_1E0FD2EC0;
        *(_QWORD *)(v318 + 24) = *(_QWORD *)(a3 + 24);
        *(_BYTE *)(v318 + 32) = 0;
        *(_BYTE *)(v318 + 56) = 0;
        if (*(_BYTE *)(a3 + 56))
        {
          *(_DWORD *)(v318 + 48) = -1;
          v319 = *(unsigned int *)(a3 + 48);
          if ((_DWORD)v319 != -1)
          {
            ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v319])(&v645, v318 + 32, a3 + 32);
            *(_DWORD *)(v318 + 48) = v319;
          }
          *(_BYTE *)(v318 + 56) = 1;
        }
        *(_QWORD *)v318 = off_1E0FD3878;
        *(_QWORD *)(v318 + 64) = *(_QWORD *)(a3 + 64);
        *(_QWORD *)(v318 + 72) = &off_1E0FD2EE8;
        *(_OWORD *)(v318 + 80) = *(_OWORD *)(a3 + 80);
        *(_QWORD *)(v318 + 72) = &off_1E0FD2F10;
        v320 = *(_DWORD **)(a3 + 96);
        if (v320)
          *v320 += 2;
        *(_QWORD *)(v318 + 96) = v320;
        *(_QWORD *)(v318 + 104) = &off_1E0FD2EE8;
        *(_OWORD *)(v318 + 112) = *(_OWORD *)(a3 + 112);
        *(_QWORD *)(v318 + 104) = &off_1E0FD2F10;
        v321 = *(_DWORD **)(a3 + 128);
        if (v321)
          *v321 += 2;
        *(_QWORD *)(v318 + 128) = v321;
        *(_QWORD *)(v317 + 312) += 136;
        v322 = *(unsigned int *)(v317 + 356);
        if ((_DWORD)v322 == *(_DWORD *)(v317 + 352))
        {
          v323 = v322 + (v322 >> 2);
          if (v323 >= 0x10)
            v324 = v323 + 1;
          else
            v324 = 16;
          if (v324 <= v322 + 1)
            v325 = v322 + 1;
          else
            v325 = v324;
          if (v325 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1824AF1A4);
          }
          v326 = *(void **)(v317 + 344);
          v327 = (void *)WTF::fastMalloc((WTF *)(8 * v325));
          *(_DWORD *)(v317 + 352) = v325;
          *(_QWORD *)(v317 + 344) = v327;
          memcpy(v327, v326, 8 * v322);
          if (v326)
          {
            if (*(void **)(v317 + 344) == v326)
            {
              *(_QWORD *)(v317 + 344) = 0;
              *(_DWORD *)(v317 + 352) = 0;
            }
            WTF::fastFree((WTF *)v326, v328);
          }
          v322 = *(unsigned int *)(v317 + 356);
          v329 = (_QWORD *)(*(_QWORD *)(v317 + 344) + 8 * v322);
        }
        else
        {
          v329 = (_QWORD *)(*(_QWORD *)(v317 + 344) + 8 * v322);
        }
        v633 = (__int128 *)(a3 + 8);
        *v329 = v318;
        *(_DWORD *)(v317 + 356) = v322 + 1;
        v330 = *v152;
        v645 = 0uLL;
        v331 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        DWORD2(v634) = 1;
        *(_QWORD *)&v634 = v331;
        *v331 = v318;
        HIDWORD(v634) = 1;
        v211 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v330 + 312), &v645, (uint64_t)v315, (uint64_t *)&v634);
        v333 = (WTF *)v634;
        if ((_QWORD)v634)
        {
          *(_QWORD *)&v634 = 0;
          DWORD2(v634) = 0;
          WTF::fastFree(v333, v332);
        }
        v211[3] = *(_QWORD *)(v318 + 24);
        v334 = *v152;
        v635 = *v633;
        *(_QWORD *)&v634 = a3;
        *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
        v636 = *(_QWORD *)(a3 + 24);
        v637[0] = 0;
        v639 = 0;
        v335 = *(unsigned __int8 *)(a3 + 56);
        if (*(_BYTE *)(a3 + 56))
        {
          v638 = -1;
          v322 = *(unsigned int *)(a3 + 48);
          if ((_DWORD)v322 != -1)
          {
            ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v322])(&v645, v637, a3 + 32);
            v638 = v322;
          }
          v639 = 1;
        }
        v336 = *(_QWORD *)(a3 + 64);
        *((_QWORD *)&v634 + 1) = off_1E0FD3878;
        *(_OWORD *)&v640[16] = *(_OWORD *)(a3 + 80);
        *(_QWORD *)v640 = v336;
        *(_QWORD *)&v640[8] = &off_1E0FD2F10;
        v337 = *(_DWORD **)(a3 + 96);
        if (v337)
          *v337 += 2;
        v643 = *(_OWORD *)(a3 + 112);
        v641 = v337;
        v642 = &off_1E0FD2F10;
        v338 = *(_DWORD **)(a3 + 128);
        if (v338)
          *v338 += 2;
        v626 = v211;
        v339 = (uint64_t *)(v334 + 400);
        v644 = v338;
        v340 = *(unsigned int *)(v334 + 412);
        v622 = v334;
        if ((_DWORD)v340 == *(_DWORD *)(v334 + 408))
        {
          v341 = v340 + (v340 >> 2);
          if (v341 >= 0x10)
            v342 = v341 + 1;
          else
            v342 = 16;
          if (v342 <= v340 + 1)
            v343 = v340 + 1;
          else
            v343 = v342;
          WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v339, v343);
          v344 = *(unsigned int *)(v334 + 412);
          v345 = *(_QWORD *)(v334 + 400);
          v646 = v635;
          v346 = v634;
          v347 = v636;
          *(_QWORD *)&v645 = v634;
          *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
          v647 = v636;
          v648[0] = 0;
          v650 = 0;
          v610 = v639;
          if (v639)
          {
            v649 = -1;
            LODWORD(v340) = v638;
            if (v638 != -1)
            {
              v348 = v344;
              v349 = v345;
              ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v638])(&v657, v648, v637);
              v345 = v349;
              v344 = v348;
              v649 = v340;
              v346 = v645;
              v347 = v647;
            }
            v608 = 1;
            v650 = 1;
          }
          else
          {
            v608 = 0;
          }
          v402 = *(_QWORD *)v640;
          v403 = v641;
          *((_QWORD *)&v645 + 1) = off_1E0FD3878;
          *(_OWORD *)&v651[16] = *(_OWORD *)&v640[16];
          *(_QWORD *)v651 = *(_QWORD *)v640;
          *(_QWORD *)&v651[8] = &off_1E0FD2F10;
          v652 = v641;
          v653 = &off_1E0FD2F10;
          v654 = v643;
          v404 = v644;
          v641 = 0;
          v644 = 0;
          v655 = v404;
          v405 = v345 + 32 * v344;
          *(_QWORD *)(v405 + 24) = 0;
          v406 = (_QWORD *)(v405 + 24);
          v407 = (char *)operator new(0x98uLL);
          v408 = v407;
          *(_QWORD *)v407 = off_1E0FD3F90;
          *((_QWORD *)v407 + 1) = v346;
          *(_OWORD *)(v407 + 24) = v646;
          *((_QWORD *)v407 + 2) = off_1E0FD2EC0;
          *((_QWORD *)v407 + 5) = v347;
          v407[48] = 0;
          v407[72] = 0;
          if (v610)
          {
            *((_DWORD *)v407 + 16) = -1;
            v211 = v626;
            v409 = v608;
            if ((_DWORD)v340 != -1)
            {
              ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v340])(&v657, v407 + 48, v648);
              *((_DWORD *)v408 + 16) = v340;
              v402 = *(_QWORD *)v651;
              v403 = v652;
              v404 = v655;
              v409 = v650;
            }
            v408[72] = 1;
          }
          else
          {
            v211 = v626;
            v409 = v608;
          }
          *((_QWORD *)v408 + 2) = off_1E0FD3878;
          *((_OWORD *)v408 + 6) = *(_OWORD *)&v651[16];
          *((_QWORD *)v408 + 10) = v402;
          *((_QWORD *)v408 + 11) = &off_1E0FD2F10;
          *((_OWORD *)v408 + 8) = v654;
          *((_QWORD *)v408 + 14) = v403;
          *((_QWORD *)v408 + 15) = &off_1E0FD2F10;
          *((_QWORD *)v408 + 18) = v404;
          *v406 = v408;
          v655 = 0;
          v652 = 0;
          v653 = &off_1E0FD2F10;
          *(_QWORD *)&v651[8] = &off_1E0FD2F10;
          *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
          if (v409 && v649 != -1)
            ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
          v410 = v622;
          v358 = a3 + 32;
        }
        else
        {
          v350 = *v339;
          v646 = v635;
          v351 = v634;
          v352 = v636;
          *(_QWORD *)&v645 = v634;
          *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
          v647 = v636;
          v648[0] = 0;
          v650 = 0;
          if (v335)
          {
            v649 = -1;
            if ((_DWORD)v322 != -1)
            {
              v353 = v350;
              ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v322])(&v657, v648, v637);
              v350 = v353;
              v649 = v322;
              v337 = v641;
              v338 = v644;
              v351 = v645;
              v352 = v647;
            }
            v650 = 1;
          }
          *((_QWORD *)&v645 + 1) = off_1E0FD3878;
          *(_QWORD *)v651 = *(_QWORD *)v640;
          *(_OWORD *)&v651[16] = *(_OWORD *)&v640[16];
          *(_QWORD *)&v651[8] = &off_1E0FD2F10;
          v652 = v337;
          v653 = &off_1E0FD2F10;
          v654 = v643;
          v641 = 0;
          v644 = 0;
          v655 = v338;
          v354 = v350 + 32 * v340;
          *(_QWORD *)(v354 + 24) = 0;
          v355 = (_QWORD *)(v354 + 24);
          v356 = (char *)operator new(0x98uLL);
          v357 = v356;
          *(_QWORD *)v356 = off_1E0FD3F90;
          *((_QWORD *)v356 + 1) = v351;
          *(_OWORD *)(v356 + 24) = v646;
          *((_QWORD *)v356 + 2) = off_1E0FD2EC0;
          *((_QWORD *)v356 + 5) = v352;
          v356[48] = 0;
          v356[72] = 0;
          v358 = a3 + 32;
          if (v335)
          {
            *((_DWORD *)v356 + 16) = -1;
            v359 = v649;
            if (v649 != -1)
            {
              ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v649])(&v657, v356 + 48, v648);
              *((_DWORD *)v357 + 16) = v359;
            }
            v357[72] = 1;
          }
          *((_QWORD *)v357 + 2) = off_1E0FD3878;
          *((_OWORD *)v357 + 6) = *(_OWORD *)&v651[16];
          v360 = v652;
          *((_QWORD *)v357 + 10) = *(_QWORD *)v651;
          *((_QWORD *)v357 + 11) = &off_1E0FD2F10;
          *((_OWORD *)v357 + 8) = v654;
          *((_QWORD *)v357 + 14) = v360;
          *((_QWORD *)v357 + 15) = &off_1E0FD2F10;
          v361 = v655;
          v652 = 0;
          v655 = 0;
          *((_QWORD *)v357 + 18) = v361;
          *v355 = v357;
          v362 = v655;
          v653 = &off_1E0FD2F10;
          v655 = 0;
          if (v362)
          {
            if (*v362 == 2)
              WTF::StringImpl::destroy();
            else
              *v362 -= 2;
          }
          v428 = v652;
          *(_QWORD *)&v651[8] = &off_1E0FD2F10;
          v652 = 0;
          if (v428)
          {
            if (*v428 == 2)
              WTF::StringImpl::destroy();
            else
              *v428 -= 2;
          }
          *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
          if (v650 && v649 != -1)
            ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
          v410 = v622;
        }
        ++*(_DWORD *)(v410 + 412);
        v429 = v644;
        v642 = &off_1E0FD2F10;
        v644 = 0;
        if (v429)
        {
          if (*v429 == 2)
            WTF::StringImpl::destroy();
          else
            *v429 -= 2;
        }
        v430 = v641;
        *(_QWORD *)&v640[8] = &off_1E0FD2F10;
        v641 = 0;
        if (v430)
        {
          if (*v430 == 2)
            WTF::StringImpl::destroy();
          else
            *v430 -= 2;
        }
        *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
        if (v639 && v638 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v638])(&v645, v637);
        *(_QWORD *)(a3 + 104) = &off_1E0FD2F10;
        v431 = *(_DWORD **)(a3 + 128);
        *(_QWORD *)(a3 + 128) = 0;
        if (v431)
        {
          if (*v431 == 2)
            WTF::StringImpl::destroy();
          else
            *v431 -= 2;
        }
        *(_QWORD *)(a3 + 72) = &off_1E0FD2F10;
        v432 = (_QWORD *)(a3 + 72);
        v433 = *(_DWORD **)(a3 + 96);
        *(_QWORD *)(a3 + 96) = 0;
        if (v433)
        {
          if (*v433 == 2)
            WTF::StringImpl::destroy();
          else
            *v433 -= 2;
        }
        *(_QWORD *)a3 = off_1E0FD2EC0;
        if (*(_BYTE *)(a3 + 56))
        {
          v434 = *(unsigned int *)(a3 + 48);
          if ((_DWORD)v434 != -1)
            ((void (*)(__int128 *, uint64_t))off_1E0FD3E30[v434])(&v645, v358);
          *(_DWORD *)(a3 + 48) = -1;
        }
        *(_QWORD *)a3 = &off_1E0FD2EE8;
        *v633 = *(_OWORD *)(v211 + 1);
        *(_QWORD *)a3 = off_1E0FD2EC0;
        *(_QWORD *)(a3 + 24) = v211[3];
        *(_BYTE *)(a3 + 32) = 0;
        *(_BYTE *)(a3 + 56) = 0;
        if (*((_BYTE *)v211 + 56))
        {
          *(_DWORD *)(a3 + 48) = -1;
          v435 = *((unsigned int *)v211 + 12);
          if ((_DWORD)v435 != -1)
          {
            ((void (*)(__int128 *, uint64_t, _QWORD *))off_1E0FD3E88[v435])(&v645, v358, v211 + 4);
            *(_DWORD *)(a3 + 48) = v435;
          }
          *(_BYTE *)(a3 + 56) = 1;
        }
        *(_QWORD *)a3 = off_1E0FD2F38;
        *(_QWORD *)(a3 + 64) = v211[8];
        v436 = *((unsigned int *)v211 + 21);
        *v432 = 0;
        *(_QWORD *)(a3 + 80) = 0;
        *(_DWORD *)(a3 + 84) = v436;
        if (!(_DWORD)v436)
          goto LABEL_670;
        if (v436 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1824AF17CLL);
        }
        v437 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v436));
        *(_DWORD *)(a3 + 80) = v436;
        *v432 = v437;
        v438 = *((unsigned int *)v211 + 21);
        if (!(_DWORD)v438)
          goto LABEL_670;
        v439 = v211[9];
        v440 = (v438 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v440 < 3)
        {
          v441 = (uint64_t *)v211[9];
        }
        else
        {
          v441 = (uint64_t *)v211[9];
          if ((unint64_t)v437 - v439 >= 0x20)
          {
            v442 = v440 + 1;
            v443 = v442 & 0x3FFFFFFFFFFFFFFCLL;
            v444 = &v437[v443];
            v441 = (uint64_t *)(v439 + v443 * 8);
            v445 = (__int128 *)(v439 + 16);
            v446 = v437 + 2;
            v447 = v442 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v448 = *v445;
              *(v446 - 1) = *(v445 - 1);
              *v446 = v448;
              v445 += 2;
              v446 += 2;
              v447 -= 4;
            }
            while (v447);
            v437 = v444;
            if (v442 == (v442 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_670;
          }
        }
        v451 = (uint64_t *)(v439 + 8 * v438);
        do
        {
          v452 = *v441++;
          *v437++ = v452;
        }
        while (v441 != v451);
LABEL_670:
        *(_WORD *)(a3 + 88) = *((_WORD *)v211 + 44);
        return v15 ^ 3;
      }
      return v15;
    case 0x16u:
      Variable = WGSL::RewriteGlobalVariables::readVariable((WGSL::RewriteGlobalVariables *)a1, (WGSL::AST::IdentifierExpression *)a3, v16);
      if (Variable && *(_BYTE *)(Variable + 8))
      {
        v15 = WGSL::Type::packing(*(WGSL::Type **)(a3 + 24));
        if ((v15 & v5) != 0)
          return v15;
      }
      else
      {
        v15 = 2;
        if ((v5 & 2) != 0)
          return v15;
      }
      v67 = *(_QWORD *)(a3 + 24);
      v68 = *(_DWORD *)(v67 + 48);
      if (v68 == 10)
      {
        v67 = *(_QWORD *)(v67 + 8);
        v68 = *(_DWORD *)(v67 + 48);
      }
      if (v68 == 3)
      {
        v114 = (_BYTE *)a1[5];
        if ((v15 & 1) != 0)
          v114[10] = 1;
        else
          v114[9] = 1;
      }
      else
      {
        if (v68 == 4)
        {
          if ((WGSL::Type::isConstructible((WGSL::Type *)v67) & 1) == 0)
            return v15;
          v70 = a1[5];
          v69 = a1 + 5;
          v71 = (_QWORD *)(v70 + 312);
          v634 = 0uLL;
LABEL_274:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_QWORD *)&v645 = &off_1E0FD2F10;
          *((_QWORD *)&v645 + 1) = 0;
          *(_QWORD *)&v646 = 0;
          *((_QWORD *)&v646 + 1) = v657;
          v194 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v71, &v634, (uint64_t)&v645);
          v195 = (_DWORD *)*((_QWORD *)&v646 + 1);
          *(_QWORD *)&v645 = &off_1E0FD2F10;
          *((_QWORD *)&v646 + 1) = 0;
          if (v195)
          {
            if (*v195 == 2)
              WTF::StringImpl::destroy();
            else
              *v195 -= 2;
          }
          v196 = *v69;
          v194[3] = *(_QWORD *)(*v69 + 120);
          v197 = *(_QWORD *)(v196 + 312);
          if ((unint64_t)(*(_QWORD *)(v196 + 320) - v197) <= 0x5F)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v196 + 312));
            v197 = *(_QWORD *)(v196 + 312);
          }
          *(_QWORD *)v197 = &off_1E0FD2EE8;
          *(_OWORD *)(v197 + 8) = *(_OWORD *)(a3 + 8);
          *(_QWORD *)v197 = off_1E0FD2EC0;
          *(_QWORD *)(v197 + 24) = *(_QWORD *)(a3 + 24);
          *(_BYTE *)(v197 + 32) = 0;
          v631 = a3 + 32;
          *(_BYTE *)(v197 + 56) = 0;
          if (*(_BYTE *)(a3 + 56))
          {
            *(_DWORD *)(v197 + 48) = -1;
            v198 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v198 != -1)
            {
              ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v198])(&v645, v197 + 32, v631);
              *(_DWORD *)(v197 + 48) = v198;
            }
            *(_BYTE *)(v197 + 56) = 1;
          }
          *(_QWORD *)v197 = off_1E0FD2E98;
          *(_QWORD *)(v197 + 64) = &off_1E0FD2EE8;
          *(_OWORD *)(v197 + 72) = *(_OWORD *)(a3 + 72);
          *(_QWORD *)(v197 + 64) = &off_1E0FD2F10;
          v199 = *(_DWORD **)(a3 + 88);
          if (v199)
            *v199 += 2;
          *(_QWORD *)(v197 + 88) = v199;
          *(_QWORD *)(v196 + 312) += 96;
          v200 = *(unsigned int *)(v196 + 356);
          if ((_DWORD)v200 == *(_DWORD *)(v196 + 352))
          {
            v201 = v200 + (v200 >> 2);
            if (v201 >= 0x10)
              v202 = v201 + 1;
            else
              v202 = 16;
            if (v202 <= v200 + 1)
              v203 = v200 + 1;
            else
              v203 = v202;
            if (v203 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824AF18CLL);
            }
            v204 = *(void **)(v196 + 344);
            v205 = (void *)WTF::fastMalloc((WTF *)(8 * v203));
            *(_DWORD *)(v196 + 352) = v203;
            *(_QWORD *)(v196 + 344) = v205;
            memcpy(v205, v204, 8 * v200);
            if (v204)
            {
              if (*(void **)(v196 + 344) == v204)
              {
                *(_QWORD *)(v196 + 344) = 0;
                *(_DWORD *)(v196 + 352) = 0;
              }
              WTF::fastFree((WTF *)v204, v206);
            }
            v200 = *(unsigned int *)(v196 + 356);
            v207 = (_QWORD *)(*(_QWORD *)(v196 + 344) + 8 * v200);
          }
          else
          {
            v207 = (_QWORD *)(*(_QWORD *)(v196 + 344) + 8 * v200);
          }
          *v207 = v197;
          *(_DWORD *)(v196 + 356) = v200 + 1;
          v208 = *v69;
          v645 = 0uLL;
          v209 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          DWORD2(v634) = 1;
          *(_QWORD *)&v634 = v209;
          *v209 = v197;
          HIDWORD(v634) = 1;
          v211 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v208 + 312), &v645, (uint64_t)v194, (uint64_t *)&v634);
          v212 = (WTF *)v634;
          if ((_QWORD)v634)
          {
            *(_QWORD *)&v634 = 0;
            DWORD2(v634) = 0;
            WTF::fastFree(v212, v210);
          }
          v211[3] = *(_QWORD *)(v197 + 24);
          v213 = *v69;
          v635 = *(_OWORD *)(a3 + 8);
          *(_QWORD *)&v634 = a3;
          *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
          v636 = *(_QWORD *)(a3 + 24);
          v637[0] = 0;
          v639 = 0;
          v214 = *(unsigned __int8 *)(a3 + 56);
          if (*(_BYTE *)(a3 + 56))
          {
            v638 = -1;
            v3 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v3 != -1)
            {
              ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v3])(&v645, v637, v631);
              v638 = v3;
            }
            v639 = 1;
          }
          *(_OWORD *)&v640[8] = *(_OWORD *)(a3 + 72);
          *((_QWORD *)&v634 + 1) = off_1E0FD2E98;
          *(_QWORD *)v640 = &off_1E0FD2F10;
          v215 = *(_DWORD **)(a3 + 88);
          if (v215)
            *v215 += 2;
          v216 = (uint64_t *)(v213 + 400);
          *(_QWORD *)&v640[24] = v215;
          v217 = *(unsigned int *)(v213 + 412);
          if ((_DWORD)v217 == *(_DWORD *)(v213 + 408))
          {
            v218 = v217 + (v217 >> 2);
            if (v218 >= 0x10)
              v219 = v218 + 1;
            else
              v219 = 16;
            if (v219 <= v217 + 1)
              v220 = v217 + 1;
            else
              v220 = v219;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v216, v220);
            v221 = *(unsigned int *)(v213 + 412);
            v222 = *(_QWORD *)(v213 + 400);
            v646 = v635;
            v223 = v634;
            v224 = v636;
            *(_QWORD *)&v645 = v634;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v647 = v636;
            v648[0] = 0;
            v650 = 0;
            v612 = v639;
            if (v639)
            {
              v649 = -1;
              v214 = v638;
              if (v638 != -1)
              {
                v225 = v221;
                v226 = v222;
                ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v638])(&v657, v648, v637);
                v222 = v226;
                v221 = v225;
                v649 = v214;
                v223 = v645;
                v224 = v647;
              }
              v617 = 1;
              v650 = 1;
            }
            else
            {
              v617 = 0;
            }
            *(_OWORD *)&v651[8] = *(_OWORD *)&v640[8];
            *((_QWORD *)&v645 + 1) = off_1E0FD2E98;
            *(_QWORD *)v651 = &off_1E0FD2F10;
            v363 = *(_QWORD *)&v640[24];
            *(_QWORD *)&v640[24] = 0;
            *(_QWORD *)&v651[24] = v363;
            v364 = v222 + 32 * v221;
            *(_QWORD *)(v364 + 24) = 0;
            v365 = (_QWORD *)(v364 + 24);
            v366 = (char *)operator new(0x70uLL);
            v367 = v366;
            *(_QWORD *)v366 = off_1E0FD3F48;
            *((_QWORD *)v366 + 1) = v223;
            *(_OWORD *)(v366 + 24) = v646;
            *((_QWORD *)v366 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v366 + 5) = v224;
            v366[48] = 0;
            v366[72] = 0;
            if (v612)
            {
              *((_DWORD *)v366 + 16) = -1;
              v368 = v617;
              if (v214 != -1)
              {
                ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v214])(&v657, v366 + 48, v648);
                *((_DWORD *)v367 + 16) = v214;
                v363 = *(_QWORD *)&v651[24];
                v368 = v650;
              }
              v367[72] = 1;
            }
            else
            {
              v368 = v617;
            }
            *((_QWORD *)v367 + 2) = off_1E0FD2E98;
            *(_OWORD *)(v367 + 88) = *(_OWORD *)&v651[8];
            *((_QWORD *)v367 + 10) = &off_1E0FD2F10;
            *((_QWORD *)v367 + 13) = v363;
            *v365 = v367;
            *(_QWORD *)&v651[24] = 0;
            *(_QWORD *)v651 = &off_1E0FD2F10;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v238 = (_OWORD *)(a3 + 8);
            if (!v368)
              goto LABEL_587;
          }
          else
          {
            v227 = *v216;
            v646 = v635;
            v228 = v634;
            v229 = v636;
            *(_QWORD *)&v645 = v634;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v647 = v636;
            v648[0] = 0;
            v650 = 0;
            if (v214)
            {
              v649 = -1;
              if ((_DWORD)v3 != -1)
              {
                v230 = v227;
                ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v3])(&v657, v648, v637);
                v227 = v230;
                v649 = v3;
                v215 = *(_DWORD **)&v640[24];
                v228 = v645;
                v229 = v647;
              }
              v650 = 1;
            }
            *(_OWORD *)&v651[8] = *(_OWORD *)&v640[8];
            *((_QWORD *)&v645 + 1) = off_1E0FD2E98;
            *(_QWORD *)v651 = &off_1E0FD2F10;
            *(_QWORD *)&v640[24] = 0;
            *(_QWORD *)&v651[24] = v215;
            v231 = v227 + 32 * v217;
            *(_QWORD *)(v231 + 24) = 0;
            v232 = (_QWORD *)(v231 + 24);
            v233 = (char *)operator new(0x70uLL);
            v234 = v233;
            *(_QWORD *)v233 = off_1E0FD3F48;
            *((_QWORD *)v233 + 1) = v228;
            *(_OWORD *)(v233 + 24) = v646;
            *((_QWORD *)v233 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v233 + 5) = v229;
            v233[48] = 0;
            v233[72] = 0;
            if (v214)
            {
              *((_DWORD *)v233 + 16) = -1;
              v235 = v649;
              if (v649 != -1)
              {
                ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v649])(&v657, v233 + 48, v648);
                *((_DWORD *)v234 + 16) = v235;
              }
              v234[72] = 1;
            }
            *((_QWORD *)v234 + 2) = off_1E0FD2E98;
            *(_OWORD *)(v234 + 88) = *(_OWORD *)&v651[8];
            *((_QWORD *)v234 + 10) = &off_1E0FD2F10;
            v236 = *(_QWORD *)&v651[24];
            *(_QWORD *)&v651[24] = 0;
            *((_QWORD *)v234 + 13) = v236;
            *v232 = v234;
            v237 = *(_DWORD **)&v651[24];
            *(_QWORD *)v651 = &off_1E0FD2F10;
            *(_QWORD *)&v651[24] = 0;
            v238 = (_OWORD *)(a3 + 8);
            if (v237)
            {
              if (*v237 == 2)
                WTF::StringImpl::destroy();
              else
                *v237 -= 2;
            }
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            if (!v650)
              goto LABEL_587;
          }
          if (v649 != -1)
            ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
LABEL_587:
          ++*(_DWORD *)(v213 + 412);
          v411 = *(_DWORD **)&v640[24];
          *(_QWORD *)v640 = &off_1E0FD2F10;
          *(_QWORD *)&v640[24] = 0;
          if (v411)
          {
            if (*v411 == 2)
              WTF::StringImpl::destroy();
            else
              *v411 -= 2;
          }
          *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
          if (v639 && v638 != -1)
            ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v638])(&v645, v637);
          *(_QWORD *)(a3 + 64) = &off_1E0FD2F10;
          v412 = *(_DWORD **)(a3 + 88);
          *(_QWORD *)(a3 + 88) = 0;
          if (v412)
          {
            if (*v412 == 2)
              WTF::StringImpl::destroy();
            else
              *v412 -= 2;
          }
          *(_QWORD *)a3 = off_1E0FD2EC0;
          if (*(_BYTE *)(a3 + 56))
          {
            v413 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v413 != -1)
              ((void (*)(__int128 *, uint64_t))off_1E0FD3E30[v413])(&v645, v631);
            *(_DWORD *)(a3 + 48) = -1;
          }
          *(_QWORD *)a3 = &off_1E0FD2EE8;
          *v238 = *(_OWORD *)(v211 + 1);
          *(_QWORD *)a3 = off_1E0FD2EC0;
          *(_QWORD *)(a3 + 24) = v211[3];
          *(_BYTE *)(a3 + 32) = 0;
          *(_BYTE *)(a3 + 56) = 0;
          if (*((_BYTE *)v211 + 56))
          {
            *(_DWORD *)(a3 + 48) = -1;
            v414 = *((unsigned int *)v211 + 12);
            if ((_DWORD)v414 != -1)
            {
              ((void (*)(__int128 *, uint64_t, _QWORD *))off_1E0FD3E88[v414])(&v645, v631, v211 + 4);
              *(_DWORD *)(a3 + 48) = v414;
            }
            *(_BYTE *)(a3 + 56) = 1;
          }
          *(_QWORD *)a3 = off_1E0FD2F38;
          *(_QWORD *)(a3 + 64) = v211[8];
          v415 = *((unsigned int *)v211 + 21);
          *(_QWORD *)(a3 + 72) = 0;
          *(_QWORD *)(a3 + 80) = 0;
          *(_DWORD *)(a3 + 84) = v415;
          if (!(_DWORD)v415)
            goto LABEL_670;
          if (v415 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1824AF16CLL);
          }
          v416 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v415));
          *(_DWORD *)(a3 + 80) = v415;
          *(_QWORD *)(a3 + 72) = v416;
          v417 = *((unsigned int *)v211 + 21);
          if (!(_DWORD)v417)
            goto LABEL_670;
          v418 = v211[9];
          v419 = (v417 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v419 < 3)
          {
            v420 = (uint64_t *)v211[9];
          }
          else
          {
            v420 = (uint64_t *)v211[9];
            if ((unint64_t)v416 - v418 >= 0x20)
            {
              v421 = v419 + 1;
              v422 = v421 & 0x3FFFFFFFFFFFFFFCLL;
              v423 = &v416[v422];
              v420 = (uint64_t *)(v418 + v422 * 8);
              v424 = (__int128 *)(v418 + 16);
              v425 = v416 + 2;
              v426 = v421 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v427 = *v424;
                *(v425 - 1) = *(v424 - 1);
                *v425 = v427;
                v424 += 2;
                v425 += 2;
                v426 -= 4;
              }
              while (v426);
              v416 = v423;
              if (v421 == (v421 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_670;
            }
          }
          v449 = (uint64_t *)(v418 + 8 * v417);
          do
          {
            v450 = *v420++;
            *v416++ = v450;
          }
          while (v420 != v449);
          goto LABEL_670;
        }
        v114 = (_BYTE *)a1[5];
        if ((v15 & 1) != 0)
          v114[12] = 1;
        else
          v114[11] = 1;
      }
      v69 = a1 + 5;
      v71 = v114 + 312;
      v634 = 0uLL;
      goto LABEL_274;
    case 0x17u:
      v15 = WGSL::RewriteGlobalVariables::pack(a1, 3, *(_QWORD *)(a3 + 64));
      if ((v15 & v5) != 0)
        return v15;
      v58 = *(_QWORD *)(a3 + 24);
      v59 = *(_DWORD *)(v58 + 48);
      if (v59 == 10)
      {
        v58 = *(_QWORD *)(v58 + 8);
        v59 = *(_DWORD *)(v58 + 48);
      }
      if (v59 == 3)
      {
        v115 = (_BYTE *)a1[5];
        if ((v15 & 1) != 0)
          v115[10] = 1;
        else
          v115[9] = 1;
      }
      else
      {
        if (v59 == 4)
        {
          if ((WGSL::Type::isConstructible((WGSL::Type *)v58) & 1) == 0)
            return v15;
          v61 = a1[5];
          v60 = a1 + 5;
          v62 = (_QWORD *)(v61 + 312);
          v634 = 0uLL;
LABEL_332:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_QWORD *)&v645 = &off_1E0FD2F10;
          *((_QWORD *)&v645 + 1) = 0;
          *(_QWORD *)&v646 = 0;
          *((_QWORD *)&v646 + 1) = v657;
          v239 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v62, &v634, (uint64_t)&v645);
          v240 = (_DWORD *)*((_QWORD *)&v646 + 1);
          *(_QWORD *)&v645 = &off_1E0FD2F10;
          *((_QWORD *)&v646 + 1) = 0;
          if (v240)
          {
            if (*v240 == 2)
              WTF::StringImpl::destroy();
            else
              *v240 -= 2;
          }
          v241 = *v60;
          v239[3] = *(_QWORD *)(*v60 + 120);
          v242 = *(_QWORD *)(v241 + 312);
          if ((unint64_t)(*(_QWORD *)(v241 + 320) - v242) <= 0x47)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v241 + 312));
            v242 = *(_QWORD *)(v241 + 312);
          }
          *(_QWORD *)v242 = &off_1E0FD2EE8;
          *(_OWORD *)(v242 + 8) = *(_OWORD *)(a3 + 8);
          *(_QWORD *)v242 = off_1E0FD2EC0;
          *(_QWORD *)(v242 + 24) = *(_QWORD *)(a3 + 24);
          *(_BYTE *)(v242 + 32) = 0;
          v632 = a3 + 32;
          *(_BYTE *)(v242 + 56) = 0;
          if (*(_BYTE *)(a3 + 56))
          {
            *(_DWORD *)(v242 + 48) = -1;
            v243 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v243 != -1)
            {
              ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v243])(&v645, v242 + 32, v632);
              *(_DWORD *)(v242 + 48) = v243;
            }
            *(_BYTE *)(v242 + 56) = 1;
          }
          *(_QWORD *)v242 = off_1E0FD4020;
          *(_QWORD *)(v242 + 64) = *(_QWORD *)(a3 + 64);
          *(_QWORD *)(v241 + 312) += 72;
          v244 = *(unsigned int *)(v241 + 356);
          if ((_DWORD)v244 == *(_DWORD *)(v241 + 352))
          {
            v245 = v244 + (v244 >> 2);
            if (v245 >= 0x10)
              v246 = v245 + 1;
            else
              v246 = 16;
            if (v246 <= v244 + 1)
              v247 = v244 + 1;
            else
              v247 = v246;
            if (v247 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824AF194);
            }
            v248 = *(void **)(v241 + 344);
            v249 = (void *)WTF::fastMalloc((WTF *)(8 * v247));
            *(_DWORD *)(v241 + 352) = v247;
            *(_QWORD *)(v241 + 344) = v249;
            memcpy(v249, v248, 8 * v244);
            if (v248)
            {
              if (*(void **)(v241 + 344) == v248)
              {
                *(_QWORD *)(v241 + 344) = 0;
                *(_DWORD *)(v241 + 352) = 0;
              }
              WTF::fastFree((WTF *)v248, v250);
            }
            v251 = *(unsigned int *)(v241 + 356);
            v252 = (_QWORD *)(*(_QWORD *)(v241 + 344) + 8 * v251);
          }
          else
          {
            v252 = (_QWORD *)(*(_QWORD *)(v241 + 344) + 8 * v244);
            LODWORD(v251) = *(_DWORD *)(v241 + 356);
          }
          v253 = a3 + 8;
          *v252 = v242;
          *(_DWORD *)(v241 + 356) = v251 + 1;
          v254 = *v60;
          v645 = 0uLL;
          v255 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          DWORD2(v634) = 1;
          *(_QWORD *)&v634 = v255;
          *v255 = v242;
          HIDWORD(v634) = 1;
          v257 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v254 + 312), &v645, (uint64_t)v239, (uint64_t *)&v634);
          v258 = (WTF *)v634;
          if ((_QWORD)v634)
          {
            *(_QWORD *)&v634 = 0;
            DWORD2(v634) = 0;
            WTF::fastFree(v258, v256);
          }
          v257[3] = *(_QWORD *)(v242 + 24);
          v259 = *v60;
          v635 = *(_OWORD *)v253;
          *(_QWORD *)&v634 = a3;
          *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
          v636 = *(_QWORD *)(a3 + 24);
          v625 = v257;
          v637[0] = 0;
          v639 = 0;
          v260 = *(unsigned __int8 *)(a3 + 56);
          if (*(_BYTE *)(a3 + 56))
          {
            v638 = -1;
            v253 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v253 != -1)
            {
              ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v253])(&v645, v637, v632);
              v638 = v253;
            }
            v639 = 1;
          }
          v261 = (uint64_t *)(v259 + 400);
          v262 = *(_QWORD *)(a3 + 64);
          *((_QWORD *)&v634 + 1) = off_1E0FD4020;
          *(_QWORD *)v640 = v262;
          v263 = *(unsigned int *)(v259 + 412);
          if ((_DWORD)v263 == *(_DWORD *)(v259 + 408))
          {
            v264 = v263 + (v263 >> 2);
            if (v264 >= 0x10)
              v265 = v264 + 1;
            else
              v265 = 16;
            if (v265 <= v263 + 1)
              v266 = v263 + 1;
            else
              v266 = v265;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v261, v266);
            v267 = *(unsigned int *)(v259 + 412);
            v268 = *(_QWORD *)(v259 + 400);
            v646 = v635;
            v269 = v634;
            v270 = v636;
            *(_QWORD *)&v645 = v634;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v647 = v636;
            v648[0] = 0;
            v650 = 0;
            v271 = v639;
            if (v639)
            {
              v649 = -1;
              LODWORD(v262) = v638;
              if (v638 != -1)
              {
                v272 = v267;
                ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v638])(&v657, v648, v637);
                v267 = v272;
                v649 = v262;
                v269 = v645;
                v270 = v647;
              }
              v618 = 1;
              v650 = 1;
            }
            else
            {
              v618 = 0;
            }
            v380 = *(_QWORD *)v640;
            *((_QWORD *)&v645 + 1) = off_1E0FD4020;
            *(_QWORD *)v651 = *(_QWORD *)v640;
            v381 = v268 + 32 * v267;
            *(_QWORD *)(v381 + 24) = 0;
            v382 = (_QWORD *)(v381 + 24);
            v383 = (char *)operator new(0x58uLL);
            v384 = v383;
            *(_QWORD *)v383 = off_1E0FD4120;
            *((_QWORD *)v383 + 1) = v269;
            *(_OWORD *)(v383 + 24) = v646;
            *((_QWORD *)v383 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v383 + 5) = v270;
            v383[48] = 0;
            v383[72] = 0;
            if (v271)
            {
              *((_DWORD *)v383 + 16) = -1;
              v385 = v618;
              if ((_DWORD)v262 != -1)
              {
                ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v262])(&v657, v383 + 48, v648);
                *((_DWORD *)v384 + 16) = v262;
                v385 = v650;
                v380 = *(_QWORD *)v651;
              }
              v384[72] = 1;
              *((_QWORD *)v384 + 2) = off_1E0FD4020;
              *((_QWORD *)v384 + 10) = v380;
              *v382 = v384;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              if (v385 && v649 != -1)
                ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
            }
            else
            {
              *((_QWORD *)v383 + 2) = off_1E0FD4020;
              *((_QWORD *)v383 + 10) = v380;
              *v382 = v383;
            }
            ++*(_DWORD *)(v259 + 412);
            v378 = v625;
          }
          else
          {
            v273 = *v261;
            v646 = v635;
            v274 = v634;
            v275 = v636;
            *(_QWORD *)&v645 = v634;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v647 = v636;
            v648[0] = 0;
            v650 = 0;
            if (v260)
            {
              v649 = -1;
              if ((_DWORD)v253 != -1)
              {
                v276 = v273;
                ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v253])(&v657, v648, v637);
                v273 = v276;
                v649 = v253;
                v262 = *(_QWORD *)v640;
                v274 = v645;
                v275 = v647;
              }
              v619 = 1;
              v650 = 1;
            }
            else
            {
              v619 = 0;
            }
            *((_QWORD *)&v645 + 1) = off_1E0FD4020;
            *(_QWORD *)v651 = v262;
            v386 = v273 + 32 * v263;
            *(_QWORD *)(v386 + 24) = 0;
            v387 = (_QWORD *)(v386 + 24);
            v388 = (char *)operator new(0x58uLL);
            v389 = v388;
            *(_QWORD *)v388 = off_1E0FD4120;
            *((_QWORD *)v388 + 1) = v274;
            *(_OWORD *)(v388 + 24) = v646;
            *((_QWORD *)v388 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v388 + 5) = v275;
            v388[48] = 0;
            v388[72] = 0;
            if (v260)
            {
              *((_DWORD *)v388 + 16) = -1;
              v378 = v625;
              v390 = v619;
              if ((_DWORD)v253 != -1)
              {
                ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v253])(&v657, v388 + 48, v648);
                *((_DWORD *)v389 + 16) = v253;
                v390 = v650;
                v262 = *(_QWORD *)v651;
              }
              v389[72] = 1;
              *((_QWORD *)v389 + 2) = off_1E0FD4020;
              *((_QWORD *)v389 + 10) = v262;
              *v387 = v389;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              if (v390)
              {
                if (v649 != -1)
                  ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
                v649 = -1;
              }
            }
            else
            {
              *((_QWORD *)v388 + 2) = off_1E0FD4020;
              *((_QWORD *)v388 + 10) = v262;
              *v387 = v388;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              v378 = v625;
            }
            ++*(_DWORD *)(v259 + 412);
          }
          *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
          if (v639 && v638 != -1)
            ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v638])(&v645, v637);
          *(_QWORD *)a3 = off_1E0FD2EC0;
          if (*(_BYTE *)(a3 + 56))
          {
            v391 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v391 != -1)
              ((void (*)(__int128 *, uint64_t))off_1E0FD3E30[v391])(&v645, v632);
            *(_DWORD *)(a3 + 48) = -1;
          }
          *(_OWORD *)(a3 + 8) = *(_OWORD *)(v378 + 1);
          *(_QWORD *)(a3 + 24) = 0;
          *(_BYTE *)(a3 + 32) = 0;
          *(_BYTE *)(a3 + 56) = 0;
          *(_QWORD *)a3 = off_1E0FD4020;
          goto LABEL_572;
        }
        v115 = (_BYTE *)a1[5];
        if ((v15 & 1) != 0)
          v115[12] = 1;
        else
          v115[11] = 1;
      }
      v60 = a1 + 5;
      v62 = v115 + 312;
      v634 = 0uLL;
      goto LABEL_332;
    case 0x18u:
      v21 = a3 + 64;
      v22 = WGSL::RewriteGlobalVariables::pack(a1, 3, *(_QWORD *)(a3 + 64));
      v15 = 2;
      WGSL::RewriteGlobalVariables::pack(a1, 2, *(_QWORD *)(a3 + 72));
      if ((v22 & 2) != 0)
        goto LABEL_26;
      v23 = *(_QWORD *)(*(_QWORD *)v21 + 24);
      if (!v23)
        goto LABEL_23;
      v24 = *(_DWORD *)(v23 + 48);
      if (v24 != 10)
        goto LABEL_21;
      v23 = *(_QWORD *)(v23 + 8);
      if (v23)
      {
        v24 = *(_DWORD *)(v23 + 48);
LABEL_21:
        if (v24 == 11)
          v23 = *(_QWORD *)(v23 + 8);
      }
LABEL_23:
      v25 = *(_DWORD *)(v23 + 48);
      if (v25 == 1)
        goto LABEL_26;
      if (v25 != 3)
        goto LABEL_846;
      v15 = WGSL::Type::packing(*(WGSL::Type **)v23);
LABEL_26:
      if ((v15 & v5) != 0)
        return v15;
      v26 = *(_QWORD *)(a3 + 24);
      v27 = *(_DWORD *)(v26 + 48);
      if (v27 == 10)
      {
        v26 = *(_QWORD *)(v26 + 8);
        v27 = *(_DWORD *)(v26 + 48);
      }
      if (v27 == 3)
      {
        v116 = (_BYTE *)a1[5];
        if ((v15 & 1) != 0)
          v116[10] = 1;
        else
          v116[9] = 1;
      }
      else
      {
        if (v27 == 4)
        {
          if ((WGSL::Type::isConstructible((WGSL::Type *)v26) & 1) == 0)
            return v15;
          v29 = a1[5];
          v28 = a1 + 5;
          v30 = (_QWORD *)(v29 + 312);
          v634 = 0uLL;
LABEL_380:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_QWORD *)&v645 = &off_1E0FD2F10;
          *((_QWORD *)&v645 + 1) = 0;
          *(_QWORD *)&v646 = 0;
          *((_QWORD *)&v646 + 1) = v657;
          v277 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v30, &v634, (uint64_t)&v645);
          v278 = (_DWORD *)*((_QWORD *)&v646 + 1);
          *(_QWORD *)&v645 = &off_1E0FD2F10;
          *((_QWORD *)&v646 + 1) = 0;
          if (v278)
          {
            if (*v278 == 2)
              WTF::StringImpl::destroy();
            else
              *v278 -= 2;
          }
          v279 = *v28;
          v277[3] = *(_QWORD *)(*v28 + 120);
          v280 = *(_QWORD *)(v279 + 312);
          if ((unint64_t)(*(_QWORD *)(v279 + 320) - v280) <= 0x4F)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v279 + 312));
            v280 = *(_QWORD *)(v279 + 312);
          }
          *(_QWORD *)v280 = &off_1E0FD2EE8;
          *(_OWORD *)(v280 + 8) = *(_OWORD *)(a3 + 8);
          v281 = (unint64_t)off_1E0FD2EC0;
          *(_QWORD *)v280 = off_1E0FD2EC0;
          *(_QWORD *)(v280 + 24) = *(_QWORD *)(a3 + 24);
          *(_BYTE *)(v280 + 32) = 0;
          v630 = a3 + 32;
          *(_BYTE *)(v280 + 56) = 0;
          if (*(_BYTE *)(a3 + 56))
          {
            *(_DWORD *)(v280 + 48) = -1;
            v282 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v282 != -1)
            {
              ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v282])(&v645, v280 + 32, v630);
              *(_DWORD *)(v280 + 48) = v282;
            }
            *(_BYTE *)(v280 + 56) = 1;
          }
          *(_QWORD *)v280 = off_1E0FD3060;
          *(_OWORD *)(v280 + 64) = *(_OWORD *)v21;
          *(_QWORD *)(v279 + 312) += 80;
          v283 = *(unsigned int *)(v279 + 356);
          if ((_DWORD)v283 == *(_DWORD *)(v279 + 352))
          {
            v284 = v283 + (v283 >> 2);
            if (v284 >= 0x10)
              v285 = v284 + 1;
            else
              v285 = 16;
            if (v285 <= v283 + 1)
              v286 = v283 + 1;
            else
              v286 = v285;
            if (v286 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824AF19CLL);
            }
            v287 = *(void **)(v279 + 344);
            v288 = (void *)WTF::fastMalloc((WTF *)(8 * v286));
            *(_DWORD *)(v279 + 352) = v286;
            *(_QWORD *)(v279 + 344) = v288;
            memcpy(v288, v287, 8 * v283);
            v281 = (unint64_t)off_1E0FD2EC0;
            if (v287)
            {
              if (*(void **)(v279 + 344) == v287)
              {
                *(_QWORD *)(v279 + 344) = 0;
                *(_DWORD *)(v279 + 352) = 0;
              }
              WTF::fastFree((WTF *)v287, v289);
            }
            v290 = *(unsigned int *)(v279 + 356);
            v291 = (_QWORD *)(*(_QWORD *)(v279 + 344) + 8 * v290);
          }
          else
          {
            v291 = (_QWORD *)(*(_QWORD *)(v279 + 344) + 8 * v283);
            LODWORD(v290) = *(_DWORD *)(v279 + 356);
          }
          *v291 = v280;
          *(_DWORD *)(v279 + 356) = v290 + 1;
          v292 = *v28;
          v645 = 0uLL;
          v293 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          DWORD2(v634) = 1;
          *(_QWORD *)&v634 = v293;
          *v293 = v280;
          HIDWORD(v634) = 1;
          v295 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v292 + 312), &v645, (uint64_t)v277, (uint64_t *)&v634);
          v296 = (WTF *)v634;
          if ((_QWORD)v634)
          {
            *(_QWORD *)&v634 = 0;
            DWORD2(v634) = 0;
            WTF::fastFree(v296, v294);
          }
          v295[3] = *(_QWORD *)(v280 + 24);
          v297 = *v28;
          v635 = *(_OWORD *)(a3 + 8);
          *(_QWORD *)&v634 = a3;
          *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
          v636 = *(_QWORD *)(a3 + 24);
          v637[0] = 0;
          v639 = 0;
          v298 = *(unsigned __int8 *)(a3 + 56);
          if (*(_BYTE *)(a3 + 56))
          {
            v638 = -1;
            v281 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v281 != -1)
            {
              ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v281])(&v645, v637, v630);
              v638 = v281;
            }
            v639 = 1;
          }
          v299 = (uint64_t *)(v297 + 400);
          *((_QWORD *)&v634 + 1) = off_1E0FD3060;
          *(_OWORD *)v640 = *(_OWORD *)v21;
          v300 = *(unsigned int *)(v297 + 412);
          v627 = v295;
          if ((_DWORD)v300 == *(_DWORD *)(v297 + 408))
          {
            v301 = v300 + (v300 >> 2);
            if (v301 >= 0x10)
              v302 = v301 + 1;
            else
              v302 = 16;
            if (v302 <= v300 + 1)
              v303 = v300 + 1;
            else
              v303 = v302;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v299, v303);
            v304 = *(unsigned int *)(v297 + 412);
            v305 = *(_QWORD *)(v297 + 400);
            v646 = v635;
            v306 = v634;
            v307 = v636;
            *(_QWORD *)&v645 = v634;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v647 = v636;
            v648[0] = 0;
            v650 = 0;
            v614 = v639;
            if (v639)
            {
              v649 = -1;
              v298 = v638;
              if (v638 != -1)
              {
                v308 = v304;
                v309 = v305;
                ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v638])(&v657, v648, v637);
                v305 = v309;
                v304 = v308;
                v649 = v298;
                v306 = v645;
                v307 = v647;
              }
              v310 = 1;
              v650 = 1;
            }
            else
            {
              v310 = 0;
            }
            *((_QWORD *)&v645 + 1) = off_1E0FD3060;
            *(_OWORD *)v651 = *(_OWORD *)v640;
            v392 = v305 + 32 * v304;
            *(_QWORD *)(v392 + 24) = 0;
            v393 = (_QWORD *)(v392 + 24);
            v394 = (char *)operator new(0x60uLL);
            v395 = v394;
            *(_QWORD *)v394 = off_1E0FD3FD8;
            *((_QWORD *)v394 + 1) = v306;
            *(_OWORD *)(v394 + 24) = v646;
            *((_QWORD *)v394 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v394 + 5) = v307;
            v394[48] = 0;
            v394[72] = 0;
            if (v614)
            {
              *((_DWORD *)v394 + 16) = -1;
              if (v298 != -1)
              {
                ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v298])(&v657, v394 + 48, v648);
                *((_DWORD *)v395 + 16) = v298;
                v310 = v650;
              }
              v395[72] = 1;
              *((_QWORD *)v395 + 2) = off_1E0FD3060;
              *((_OWORD *)v395 + 5) = *(_OWORD *)v651;
              *v393 = v395;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              if (v310 && v649 != -1)
                ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
            }
            else
            {
              *((_QWORD *)v394 + 2) = off_1E0FD3060;
              *((_OWORD *)v394 + 5) = *(_OWORD *)v651;
              *v393 = v394;
            }
            ++*(_DWORD *)(v297 + 412);
            v378 = v627;
          }
          else
          {
            v311 = *v299;
            v646 = v635;
            v312 = v634;
            v313 = v636;
            *(_QWORD *)&v645 = v634;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v647 = v636;
            v648[0] = 0;
            v650 = 0;
            if (v298)
            {
              v649 = -1;
              if ((_DWORD)v281 != -1)
              {
                v314 = v311;
                ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v281])(&v657, v648, v637);
                v311 = v314;
                v649 = v281;
                v312 = v645;
                v313 = v647;
              }
              v620 = 1;
              v650 = 1;
            }
            else
            {
              v620 = 0;
            }
            *((_QWORD *)&v645 + 1) = off_1E0FD3060;
            *(_OWORD *)v651 = *(_OWORD *)v640;
            v396 = v311 + 32 * v300;
            *(_QWORD *)(v396 + 24) = 0;
            v397 = (_QWORD *)(v396 + 24);
            v398 = (char *)operator new(0x60uLL);
            v399 = v398;
            *(_QWORD *)v398 = off_1E0FD3FD8;
            *((_QWORD *)v398 + 1) = v312;
            *(_OWORD *)(v398 + 24) = v646;
            *((_QWORD *)v398 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v398 + 5) = v313;
            v398[48] = 0;
            v398[72] = 0;
            if (v298)
            {
              *((_DWORD *)v398 + 16) = -1;
              v400 = v620;
              if ((_DWORD)v281 != -1)
              {
                ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v281])(&v657, v398 + 48, v648);
                *((_DWORD *)v399 + 16) = v281;
                v400 = v650;
              }
              v399[72] = 1;
              *((_QWORD *)v399 + 2) = off_1E0FD3060;
              *((_OWORD *)v399 + 5) = *(_OWORD *)v651;
              *v397 = v399;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              v378 = v627;
              if (v400)
              {
                if (v649 != -1)
                  ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
                v649 = -1;
              }
            }
            else
            {
              *((_QWORD *)v398 + 2) = off_1E0FD3060;
              *((_OWORD *)v398 + 5) = *(_OWORD *)v651;
              *v397 = v398;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              v378 = v627;
            }
            ++*(_DWORD *)(v297 + 412);
          }
          *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
          if (!v639 || v638 == -1)
            goto LABEL_567;
          goto LABEL_566;
        }
        v116 = (_BYTE *)a1[5];
        if ((v15 & 1) != 0)
          v116[12] = 1;
        else
          v116[11] = 1;
      }
      v28 = a1 + 5;
      v30 = v116 + 312;
      v634 = 0uLL;
      goto LABEL_380;
    case 0x1Au:
      v41 = (uint64_t *)(a3 + 64);
      if ((*(_BYTE *)(a3 + 72) & 0xFD) != 0)
        v42 = 2;
      else
        v42 = 3;
      v15 = WGSL::RewriteGlobalVariables::pack(a1, v42, *(_QWORD *)(a3 + 64));
      if ((v15 & v5) != 0)
        return v15;
      v43 = *(_QWORD *)(a3 + 24);
      v44 = *(_DWORD *)(v43 + 48);
      if (v44 == 10)
      {
        v43 = *(_QWORD *)(v43 + 8);
        v44 = *(_DWORD *)(v43 + 48);
      }
      if (v44 == 3)
      {
        v113 = (_BYTE *)a1[5];
        if ((v15 & 1) != 0)
          v113[10] = 1;
        else
          v113[9] = 1;
      }
      else
      {
        if (v44 == 4)
        {
          if ((WGSL::Type::isConstructible((WGSL::Type *)v43) & 1) == 0)
            return v15;
          v46 = a1[5];
          v45 = (unint64_t)(a1 + 5);
          v47 = (_QWORD *)(v46 + 312);
          v634 = 0uLL;
LABEL_227:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_QWORD *)&v645 = &off_1E0FD2F10;
          *((_QWORD *)&v645 + 1) = 0;
          *(_QWORD *)&v646 = 0;
          *((_QWORD *)&v646 + 1) = v657;
          v156 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v47, &v634, (uint64_t)&v645);
          v157 = (_DWORD *)*((_QWORD *)&v646 + 1);
          *(_QWORD *)&v645 = &off_1E0FD2F10;
          *((_QWORD *)&v646 + 1) = 0;
          if (v157)
          {
            if (*v157 == 2)
              WTF::StringImpl::destroy();
            else
              *v157 -= 2;
          }
          v158 = *(_QWORD *)v45;
          v156[3] = *(_QWORD *)(*(_QWORD *)v45 + 120);
          v159 = *(_QWORD *)(v158 + 312);
          if ((unint64_t)(*(_QWORD *)(v158 + 320) - v159) <= 0x4F)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v158 + 312));
            v159 = *(_QWORD *)(v158 + 312);
          }
          *(_QWORD *)v159 = &off_1E0FD2EE8;
          *(_OWORD *)(v159 + 8) = *(_OWORD *)(a3 + 8);
          *(_QWORD *)v159 = off_1E0FD2EC0;
          *(_QWORD *)(v159 + 24) = *(_QWORD *)(a3 + 24);
          *(_BYTE *)(v159 + 32) = 0;
          v630 = a3 + 32;
          *(_BYTE *)(v159 + 56) = 0;
          if (*(_BYTE *)(a3 + 56))
          {
            *(_DWORD *)(v159 + 48) = -1;
            v160 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v160 != -1)
            {
              ((void (*)(__int128 *, uint64_t, uint64_t))off_1E0FD3E88[v160])(&v645, v159 + 32, v630);
              *(_DWORD *)(v159 + 48) = v160;
            }
            *(_BYTE *)(v159 + 56) = 1;
          }
          *(_QWORD *)v159 = off_1E0FD3140;
          v161 = *v41;
          *(_BYTE *)(v159 + 72) = *(_BYTE *)(a3 + 72);
          *(_QWORD *)(v159 + 64) = v161;
          *(_QWORD *)(v158 + 312) += 80;
          v162 = *(unsigned int *)(v158 + 356);
          if ((_DWORD)v162 == *(_DWORD *)(v158 + 352))
          {
            v163 = v162 + (v162 >> 2);
            if (v163 >= 0x10)
              v164 = v163 + 1;
            else
              v164 = 16;
            if (v164 <= v162 + 1)
              v165 = v162 + 1;
            else
              v165 = v164;
            if (v165 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824AF184);
            }
            v166 = *(void **)(v158 + 344);
            v167 = (void *)WTF::fastMalloc((WTF *)(8 * v165));
            *(_DWORD *)(v158 + 352) = v165;
            *(_QWORD *)(v158 + 344) = v167;
            memcpy(v167, v166, 8 * v162);
            if (v166)
            {
              if (*(void **)(v158 + 344) == v166)
              {
                *(_QWORD *)(v158 + 344) = 0;
                *(_DWORD *)(v158 + 352) = 0;
              }
              WTF::fastFree((WTF *)v166, v168);
            }
            v162 = *(unsigned int *)(v158 + 356);
            v169 = (_QWORD *)(*(_QWORD *)(v158 + 344) + 8 * v162);
          }
          else
          {
            v169 = (_QWORD *)(*(_QWORD *)(v158 + 344) + 8 * v162);
          }
          *v169 = v159;
          *(_DWORD *)(v158 + 356) = v162 + 1;
          v170 = *(_QWORD *)v45;
          v645 = 0uLL;
          v171 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          DWORD2(v634) = 1;
          *(_QWORD *)&v634 = v171;
          *v171 = v159;
          HIDWORD(v634) = 1;
          v173 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v170 + 312), &v645, (uint64_t)v156, (uint64_t *)&v634);
          v174 = (WTF *)v634;
          if ((_QWORD)v634)
          {
            *(_QWORD *)&v634 = 0;
            DWORD2(v634) = 0;
            WTF::fastFree(v174, v172);
          }
          v173[3] = *(_QWORD *)(v159 + 24);
          v175 = *(_QWORD *)v45;
          v635 = *(_OWORD *)(a3 + 8);
          *(_QWORD *)&v634 = a3;
          *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
          v636 = *(_QWORD *)(a3 + 24);
          v624 = v173;
          v637[0] = 0;
          v639 = 0;
          v176 = *(unsigned __int8 *)(a3 + 56);
          if (*(_BYTE *)(a3 + 56))
          {
            v638 = -1;
            v45 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v45 != -1)
            {
              ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E0FD3E88[v45])(&v645, v637, v630);
              v638 = v45;
            }
            v639 = 1;
          }
          v177 = (uint64_t *)(v175 + 400);
          v178 = *v41;
          *((_QWORD *)&v634 + 1) = off_1E0FD3140;
          *(_QWORD *)v640 = v178;
          v640[8] = *(_BYTE *)(a3 + 72);
          v179 = *(unsigned int *)(v175 + 412);
          if ((_DWORD)v179 == *(_DWORD *)(v175 + 408))
          {
            v180 = v179 + (v179 >> 2);
            if (v180 >= 0x10)
              v181 = v180 + 1;
            else
              v181 = 16;
            if (v181 <= v179 + 1)
              v182 = v179 + 1;
            else
              v182 = v181;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v177, v182);
            v183 = *(unsigned int *)(v175 + 412);
            v184 = *(_QWORD *)(v175 + 400);
            v646 = v635;
            v185 = v634;
            v186 = v636;
            *(_QWORD *)&v645 = v634;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v647 = v636;
            v648[0] = 0;
            v650 = 0;
            v187 = v639;
            if (v639)
            {
              v649 = -1;
              LODWORD(v45) = v638;
              if (v638 != -1)
              {
                v188 = v183;
                v189 = v184;
                ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v638])(&v657, v648, v637);
                v184 = v189;
                v183 = v188;
                v649 = v45;
                v185 = v645;
                v186 = v647;
              }
              v615 = 1;
              v650 = 1;
            }
            else
            {
              v615 = 0;
            }
            *((_QWORD *)&v645 + 1) = off_1E0FD3140;
            *(_QWORD *)v651 = *(_QWORD *)v640;
            v651[8] = v640[8];
            v369 = v184 + 32 * v183;
            *(_QWORD *)(v369 + 24) = 0;
            v370 = (_QWORD *)(v369 + 24);
            v371 = (char *)operator new(0x60uLL);
            v372 = v371;
            *(_QWORD *)v371 = off_1E0FD4090;
            *((_QWORD *)v371 + 1) = v185;
            *(_OWORD *)(v371 + 24) = v646;
            *((_QWORD *)v371 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v371 + 5) = v186;
            v371[48] = 0;
            v371[72] = 0;
            if (v187)
            {
              *((_DWORD *)v371 + 16) = -1;
              v373 = v615;
              if ((_DWORD)v45 != -1)
              {
                ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v45])(&v657, v371 + 48, v648);
                *((_DWORD *)v372 + 16) = v45;
                v373 = v650;
              }
              v372[72] = 1;
              *((_QWORD *)v372 + 2) = off_1E0FD3140;
              *((_QWORD *)v372 + 10) = *(_QWORD *)v651;
              v372[88] = v651[8];
              *v370 = v372;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              if (v373 && v649 != -1)
                ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
            }
            else
            {
              *((_QWORD *)v371 + 2) = off_1E0FD3140;
              *((_QWORD *)v371 + 10) = *(_QWORD *)v651;
              v371[88] = v651[8];
              *v370 = v371;
            }
            ++*(_DWORD *)(v175 + 412);
            v378 = v624;
          }
          else
          {
            v190 = *v177;
            v646 = v635;
            v191 = v634;
            v192 = v636;
            *(_QWORD *)&v645 = v634;
            *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
            v647 = v636;
            v648[0] = 0;
            v650 = 0;
            if (v176)
            {
              v649 = -1;
              if ((_DWORD)v45 != -1)
              {
                v193 = v190;
                ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E0FD3EE0[v45])(&v657, v648, v637);
                v190 = v193;
                v649 = v45;
                v191 = v645;
                v192 = v647;
              }
              v616 = 1;
              v650 = 1;
            }
            else
            {
              v616 = 0;
            }
            *((_QWORD *)&v645 + 1) = off_1E0FD3140;
            *(_QWORD *)v651 = *(_QWORD *)v640;
            v651[8] = v640[8];
            v374 = v190 + 32 * v179;
            *(_QWORD *)(v374 + 24) = 0;
            v375 = (_QWORD *)(v374 + 24);
            v376 = (char *)operator new(0x60uLL);
            v377 = v376;
            *(_QWORD *)v376 = off_1E0FD4090;
            *((_QWORD *)v376 + 1) = v191;
            *(_OWORD *)(v376 + 24) = v646;
            *((_QWORD *)v376 + 2) = off_1E0FD2EC0;
            *((_QWORD *)v376 + 5) = v192;
            v376[48] = 0;
            v376[72] = 0;
            if (v176)
            {
              *((_DWORD *)v376 + 16) = -1;
              v378 = v624;
              v379 = v616;
              if ((_DWORD)v45 != -1)
              {
                ((void (*)(_DWORD **, char *, _BYTE *))off_1E0FD3EE0[v45])(&v657, v376 + 48, v648);
                *((_DWORD *)v377 + 16) = v45;
                v379 = v650;
              }
              v377[72] = 1;
              *((_QWORD *)v377 + 2) = off_1E0FD3140;
              *((_QWORD *)v377 + 10) = *(_QWORD *)v651;
              v377[88] = v651[8];
              *v375 = v377;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              if (v379)
              {
                if (v649 != -1)
                  ((void (*)(_DWORD **, _BYTE *))off_1E0FD3E30[v649])(&v657, v648);
                v649 = -1;
              }
            }
            else
            {
              *((_QWORD *)v376 + 2) = off_1E0FD3140;
              *((_QWORD *)v376 + 10) = *(_QWORD *)v651;
              v376[88] = v651[8];
              *v375 = v376;
              *((_QWORD *)&v645 + 1) = off_1E0FD2EC0;
              v378 = v624;
            }
            ++*(_DWORD *)(v175 + 412);
          }
          *((_QWORD *)&v634 + 1) = off_1E0FD2EC0;
          if (!v639 || v638 == -1)
            goto LABEL_567;
LABEL_566:
          ((void (*)(__int128 *, _BYTE *))off_1E0FD3E30[v638])(&v645, v637);
LABEL_567:
          *(_QWORD *)a3 = off_1E0FD2EC0;
          if (*(_BYTE *)(a3 + 56))
          {
            v401 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v401 != -1)
              ((void (*)(__int128 *, uint64_t))off_1E0FD3E30[v401])(&v645, v630);
            *(_DWORD *)(a3 + 48) = -1;
          }
          *(_OWORD *)(a3 + 8) = *(_OWORD *)(v378 + 1);
          *(_QWORD *)(a3 + 24) = 0;
          *(_BYTE *)(a3 + 32) = 0;
          *(_BYTE *)(a3 + 56) = 0;
          *(_QWORD *)a3 = off_1E0FD4020;
LABEL_572:
          *(_QWORD *)(a3 + 64) = v378;
          *(_QWORD *)(a3 + 24) = v378[3];
          return v15 ^ 3;
        }
        v113 = (_BYTE *)a1[5];
        if ((v15 & 1) != 0)
          v113[12] = 1;
        else
          v113[11] = 1;
      }
      v45 = (unint64_t)(a1 + 5);
      v47 = v113 + 312;
      v634 = 0uLL;
      goto LABEL_227;
    default:
      WGSL::AST::Visitor::visit(a1, a3);
      return 2;
  }
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::AssignmentStatement *a2)
{
  unsigned int v4;
  uint64_t v5;

  v4 = WGSL::RewriteGlobalVariables::pack((uint64_t *)this, 3, *((_QWORD *)a2 + 3));
  if (v4 == 17)
    v5 = 3;
  else
    v5 = v4;
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)this, v5, *((_QWORD *)a2 + 4));
}

uint64_t WGSL::RewriteGlobalVariables::visit(uint64_t this, WGSL::AST::VariableStatement *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  WGSL::AST::PhonyAssignmentStatement *v11;
  char v12;
  char *v13;

  v3 = this;
  v4 = *((_QWORD *)a2 + 3);
  if (*(_BYTE *)(v4 + 128) != 3)
  {
LABEL_6:
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 120);
    if (!v9)
      return this;
    return WGSL::RewriteGlobalVariables::pack((uint64_t *)v3, 2, v9);
  }
  v5 = *(unsigned int *)(*(_QWORD *)(v4 + 144) + 48);
  if ((_DWORD)v5 == -1)
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::RewriteGlobalVariables::visit((WGSL::RewriteGlobalVariables *)v10, v11);
  }
  v13 = &v12;
  this = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v13);
  v6 = *(_DWORD *)(v3 + 260);
  v7 = __CFADD__(v6, (_DWORD)this);
  v8 = v6 + this;
  if (v7)
  {
    *(_BYTE *)(v3 + 256) = 1;
    goto LABEL_6;
  }
  *(_DWORD *)(v3 + 260) = v8;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 120);
  if (v9)
    return WGSL::RewriteGlobalVariables::pack((uint64_t *)v3, 2, v9);
  return this;
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::PhonyAssignmentStatement *a2)
{
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)this, 3, *((_QWORD *)a2 + 3));
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::Expression *a2)
{
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)this, 2, (uint64_t)a2);
}

uint64_t WGSL::RewriteGlobalVariables::readVariable(WGSL::RewriteGlobalVariables *this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int j;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v4 = (WTF::StringImpl **)((char *)a2 + 88);
  v5 = *((_QWORD *)this + 10);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*v4 + 4);
    v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*v4) : v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11)
          goto LABEL_12;
        if ((WTF::equal(v11, *v4, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = *((_QWORD *)this + 10);
    if (!v12 || v5 + 16 * v10 != v12 + 16 * *(unsigned int *)(v12 - 4))
      return 0;
  }
LABEL_12:
  v13 = *((_QWORD *)this + 6);
  if (!v13)
    return v13;
  v14 = *(_DWORD *)(v13 - 8);
  v15 = *((_DWORD *)*v4 + 4);
  if (v15 < 0x100)
    v16 = WTF::StringImpl::hashSlowCase(*v4);
  else
    v16 = v15 >> 8;
  for (j = 0; ; v16 = j + v18)
  {
    v18 = v16 & v14;
    v19 = *(WTF **)(v13 + 32 * v18);
    if (v19 != (WTF *)-1)
    {
      if (!v19)
        return 0;
      if ((WTF::equal(v19, *v4, a3) & 1) != 0)
        break;
    }
    ++j;
  }
  v20 = v13 + 32 * v18;
  v21 = *((_QWORD *)this + 6);
  if (v21 && v20 == v21 + 32 * *(unsigned int *)(v21 - 4) || !*(_BYTE *)(*(_QWORD *)(v20 + 24) + 128))
    return 0;
  v13 = v20 + 8;
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)v24, (uint64_t *)this + 11, v4);
  if (v24[16])
  {
    v22 = *(_QWORD *)(v20 + 24);
    if (*(_QWORD *)(v22 + 112))
    {
      (*(void (**)(WGSL::RewriteGlobalVariables *))(*(_QWORD *)this + 208))(this);
      v22 = *(_QWORD *)(v20 + 24);
    }
    if (*(_QWORD *)(v22 + 120))
      (*(void (**)(WGSL::RewriteGlobalVariables *))(*(_QWORD *)this + 208))(this);
  }
  return v13;
}

WGSL::RewriteGlobalVariables *WGSL::RewriteGlobalVariables::getBase(WGSL::RewriteGlobalVariables *this, WGSL::AST::Expression *a2, unsigned int *a3)
{
  const WTF::StringImpl *v5;
  WGSL::RewriteGlobalVariables *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  while (1)
  {
    while (1)
    {
      while ((*(unsigned int (**)(WGSL::RewriteGlobalVariables *, WGSL::AST::Expression *, unsigned int *))(*(_QWORD *)this + 16))(this, a2, a3) == 23)this = (WGSL::RewriteGlobalVariables *)*((_QWORD *)this + 8);
      if ((*(unsigned int (**)(WGSL::RewriteGlobalVariables *))(*(_QWORD *)this + 16))(this) != 26)
        break;
      this = (WGSL::RewriteGlobalVariables *)*((_QWORD *)this + 8);
    }
    if ((*(unsigned int (**)(WGSL::RewriteGlobalVariables *))(*(_QWORD *)this + 16))(this) != 21)
      break;
    v6 = (WGSL::RewriteGlobalVariables *)*((_QWORD *)this + 8);
    v7 = (uint64_t *)*((_QWORD *)v6 + 3);
    if (!v7)
      goto LABEL_12;
    v8 = *((_DWORD *)v7 + 12);
    if (v8 == 10)
    {
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_12;
      v8 = *((_DWORD *)v7 + 12);
    }
    if (v8 == 11)
      v7 = (uint64_t *)v7[1];
LABEL_12:
    if (*((_DWORD *)v7 + 12) != 4)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_21;
    }
    v9 = *v7;
    v10 = *(unsigned int *)(*v7 + 84);
    if (!(_DWORD)v10
      || (v11 = *(_QWORD *)(*(_QWORD *)(v9 + 72) + 8 * v10 - 8),
          (WTF::equal(*(WTF **)(v11 + 48), *((const WTF::StringImpl **)this + 12), v5) & 1) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1824AF5E4);
    }
    *(_DWORD *)a2 += *(_DWORD *)(v11 + 112);
    this = v6;
  }
  if ((*(unsigned int (**)(WGSL::RewriteGlobalVariables *))(*(_QWORD *)this + 16))(this) != 22)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x1824AF608);
  }
  return this;
}

uint64_t WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::add<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>(uint64_t result, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (uint64_t)WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 32 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v29 = 0;
        else
          v29 = *(unsigned int *)(v8 - 4);
        v31 = 0;
        v30 = v8 + 32 * v29;
        goto LABEL_37;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = ((_DWORD)v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 32 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *(_OWORD *)v18 = 0u;
      *((_OWORD *)v18 + 1) = 0u;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *((_QWORD *)a4 + 2);
  v21 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  v22 = v16[1];
  v23 = (WTF *)v16[2];
  *(_OWORD *)(v16 + 1) = v21;
  for (v16[3] = v20; v23; result = WTF::fastFree(v27, a2))
  {
    v27 = v23;
    v23 = (WTF *)*((_QWORD *)v23 + 2);
    v28 = *(_DWORD **)v27;
    *(_QWORD *)v27 = 0;
    if (v28)
    {
      if (*v28 == 2)
        WTF::StringImpl::destroy();
      else
        *v28 -= 2;
    }
  }
  if (v22)
    result = WTF::fastFree((WTF *)(v22 - 16), a2);
  if (*a2)
  {
    ++*(_DWORD *)(*a2 - 12);
    v24 = *a2;
    if (*a2)
      goto LABEL_17;
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v24 = *a2;
    if (*a2)
    {
LABEL_17:
      v25 = (*(_DWORD *)(v24 - 16) + *(_DWORD *)(v24 - 12));
      v26 = *(unsigned int *)(v24 - 4);
      if (v26 <= 0x400)
        goto LABEL_18;
LABEL_31:
      if (v26 > 2 * v25)
        goto LABEL_34;
      goto LABEL_32;
    }
  }
  v25 = *(unsigned int *)(v24 - 16);
  v26 = *(unsigned int *)(v24 - 4);
  if (v26 > 0x400)
    goto LABEL_31;
LABEL_18:
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      result = (uint64_t)WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(a2, 8u, v16);
      v16 = (uint64_t *)result;
      v24 = *a2;
      if (!*a2)
      {
LABEL_21:
        v26 = 0;
        goto LABEL_34;
      }
LABEL_33:
      v26 = *(unsigned int *)(v24 - 4);
      goto LABEL_34;
    }
LABEL_32:
    result = (uint64_t)WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(a2, (_DWORD)v26 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v26)), v16);
    v16 = (uint64_t *)result;
    v24 = *a2;
    if (!*a2)
      goto LABEL_21;
    goto LABEL_33;
  }
LABEL_34:
  v30 = v24 + 32 * v26;
  v31 = 1;
LABEL_37:
  *(_QWORD *)v7 = v16;
  *(_QWORD *)(v7 + 8) = v30;
  *(_BYTE *)(v7 + 16) = v31;
  return result;
}

WTF *WGSL::ShaderModule::replace<WGSL::AST::CallExpression,WGSL::AST::BinaryExpression>(WTF *result, uint64_t a2, uint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  WTF *v16;
  __int128 *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  int v49;
  WTF *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  WTF *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v76;
  uint64_t v77;
  _BYTE v78[16];
  int v79;
  unsigned __int8 v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  void (**v86)(WGSL::AST::Expression *__hidden);
  __int128 v87;
  uint64_t v88;
  _BYTE v89[16];
  int v90;
  unsigned __int8 v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  __int16 v95;
  _BYTE v96[9];

  v5 = result;
  v76 = *(_OWORD *)(a2 + 8);
  v77 = *(_QWORD *)(a2 + 24);
  v6 = a2 + 32;
  v78[0] = 0;
  v80 = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v79 = -1;
    v7 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v7 != -1)
    {
      result = (WTF *)((uint64_t (*)(uint64_t *, _BYTE *, uint64_t))off_1E0FD3E88[v7])(&v85, v78, v6);
      v79 = v7;
    }
    v80 = 1;
  }
  v81 = *(_QWORD *)(a2 + 64);
  v82 = 0;
  v8 = *(unsigned int *)(a2 + 84);
  LODWORD(v83) = 0;
  HIDWORD(v83) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v83) = v8;
    v82 = v9;
    v10 = *(unsigned int *)(a2 + 84);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a2 + 72);
      v12 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
      {
        v13 = *(uint64_t **)(a2 + 72);
      }
      else
      {
        v13 = *(uint64_t **)(a2 + 72);
        if ((unint64_t)v9 - v11 >= 0x20)
        {
          v14 = v12 + 1;
          v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
          v16 = (WTF *)((char *)v9 + v15);
          v13 = (uint64_t *)(v11 + v15);
          v17 = (__int128 *)(v11 + 16);
          v18 = (_OWORD *)((char *)v9 + 16);
          v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v20 = *v17;
            *(v18 - 1) = *(v17 - 1);
            *v18 = v20;
            v17 += 2;
            v18 += 2;
            v19 -= 4;
          }
          while (v19);
          v9 = v16;
          if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_17;
        }
      }
      v21 = (uint64_t *)(v11 + 8 * v10);
      do
      {
        v22 = *v13++;
        *(_QWORD *)v9 = v22;
        v9 = (WTF *)((char *)v9 + 8);
      }
      while (v13 != v21);
    }
  }
LABEL_17:
  v23 = (uint64_t *)((char *)v5 + 400);
  v24 = *(_WORD *)(a2 + 88);
  v84 = v24;
  v25 = *((unsigned int *)v5 + 103);
  v73 = v6;
  v74 = a3;
  v72 = v5;
  if ((_DWORD)v25 == *((_DWORD *)v5 + 102))
  {
    v26 = v25 + (v25 >> 2);
    if (v26 >= 0x10)
      v27 = v26 + 1;
    else
      v27 = 16;
    if (v27 <= v25 + 1)
      v28 = v25 + 1;
    else
      v28 = v27;
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v23, v28);
    v29 = *((unsigned int *)v5 + 103);
    v30 = *((_QWORD *)v5 + 50);
    v87 = v76;
    v31 = a2;
    v32 = v77;
    v85 = a2;
    v86 = off_1E0FD2EC0;
    v88 = v77;
    v89[0] = 0;
    v91 = 0;
    v70 = v80;
    if (v80)
    {
      v90 = -1;
      v33 = v79;
      if (v79 != -1)
      {
        ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD3EE0[v79])(v96, v89, v78);
        v90 = v33;
        v31 = v85;
        v32 = v88;
      }
      LODWORD(v66) = v33;
      v68 = 1;
      v91 = 1;
    }
    else
    {
      v68 = 0;
      v66 = &v85;
    }
    v39 = v81;
    v38 = v82;
    v86 = off_1E0FD2F38;
    v92 = v81;
    v93 = v82;
    v40 = v83;
    v41 = HIDWORD(v83);
    v82 = 0;
    v83 = 0;
    v94 = __PAIR64__(v41, v40);
    v42 = v84;
    v95 = v84;
    v43 = v30 + 32 * v29;
    *(_QWORD *)(v43 + 24) = 0;
    v44 = (_QWORD *)(v43 + 24);
    v45 = (char *)operator new(0x70uLL);
    v46 = v45;
    *(_QWORD *)v45 = off_1E0FD42C0;
    *((_QWORD *)v45 + 1) = v31;
    *(_OWORD *)(v45 + 24) = v87;
    *((_QWORD *)v45 + 2) = off_1E0FD2EC0;
    *((_QWORD *)v45 + 5) = v32;
    v45[48] = 0;
    v47 = v45 + 48;
    v45[72] = 0;
    if (v70)
    {
      *((_DWORD *)v45 + 16) = -1;
      v48 = v74;
      v49 = v68;
      if ((_DWORD)v66 != -1)
      {
        ((void (*)(_BYTE *, void *, _BYTE *))off_1E0FD3EE0[v66])(v96, v47, v89);
        *((_DWORD *)v46 + 16) = (_DWORD)v66;
        v39 = v92;
        v38 = v93;
        v40 = v94;
        v41 = HIDWORD(v94);
        v42 = v95;
        v49 = v91;
      }
      v46[72] = 1;
    }
    else
    {
      v49 = 0;
      v48 = v74;
    }
    v61 = v73;
    *((_QWORD *)v46 + 2) = off_1E0FD2F38;
    v93 = 0;
    v94 = 0;
    *((_QWORD *)v46 + 10) = v39;
    *((_QWORD *)v46 + 11) = v38;
    *((_DWORD *)v46 + 24) = v40;
    *((_DWORD *)v46 + 25) = v41;
    *((_WORD *)v46 + 52) = v42;
    *v44 = v46;
    v86 = off_1E0FD2EC0;
    if (v49 && v90 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E0FD3E30[v90])(v96, v89);
    v60 = a2 + 64;
    ++*((_DWORD *)v72 + 103);
    v62 = v82;
    if (!v82)
      goto LABEL_55;
  }
  else
  {
    v34 = *v23;
    v87 = v76;
    v35 = a2;
    v36 = v77;
    v85 = a2;
    v86 = off_1E0FD2EC0;
    v88 = v77;
    v89[0] = 0;
    v91 = 0;
    v71 = v80;
    if (v80)
    {
      v90 = -1;
      v37 = v79;
      if (v79 != -1)
      {
        ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD3EE0[v79])(v96, v89, v78);
        v90 = v37;
        v24 = v84;
        v35 = v85;
        v36 = v88;
      }
      v67 = v37;
      v69 = 1;
      v91 = 1;
    }
    else
    {
      v69 = 0;
      v67 = 0;
    }
    v51 = v81;
    v50 = v82;
    v86 = off_1E0FD2F38;
    v92 = v81;
    v93 = v82;
    v53 = v83;
    v52 = HIDWORD(v83);
    v82 = 0;
    v83 = 0;
    v94 = __PAIR64__(v52, v53);
    v95 = v24;
    v54 = v34 + 32 * v25;
    *(_QWORD *)(v54 + 24) = 0;
    v55 = (_QWORD *)(v54 + 24);
    v56 = (char *)operator new(0x70uLL);
    v57 = v56;
    *(_QWORD *)v56 = off_1E0FD42C0;
    *((_QWORD *)v56 + 1) = v35;
    *(_OWORD *)(v56 + 24) = v87;
    *((_QWORD *)v56 + 2) = off_1E0FD2EC0;
    *((_QWORD *)v56 + 5) = v36;
    v56[48] = 0;
    v47 = v56 + 48;
    v56[72] = 0;
    if (v71)
    {
      *((_DWORD *)v56 + 16) = -1;
      v58 = v72;
      v59 = v69;
      if (v67 != -1)
      {
        ((void (*)(_BYTE *, void *, _BYTE *))off_1E0FD3EE0[v67])(v96, v47, v89);
        *((_DWORD *)v57 + 16) = v67;
        v51 = v92;
        v50 = v93;
        v53 = v94;
        v52 = HIDWORD(v94);
        v24 = v95;
        v59 = v91;
      }
      v57[72] = 1;
      v60 = a2 + 64;
    }
    else
    {
      v59 = 0;
      v58 = v72;
      v60 = a2 + 64;
    }
    *((_QWORD *)v57 + 2) = off_1E0FD2F38;
    v93 = 0;
    v94 = 0;
    *((_QWORD *)v57 + 10) = v51;
    *((_QWORD *)v57 + 11) = v50;
    *((_DWORD *)v57 + 24) = v53;
    *((_DWORD *)v57 + 25) = v52;
    *((_WORD *)v57 + 52) = v24;
    *v55 = v57;
    v86 = off_1E0FD2EC0;
    v61 = v73;
    v48 = v74;
    if (v59)
    {
      if (v90 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E0FD3E30[v90])(v96, v89);
      v90 = -1;
    }
    ++*((_DWORD *)v58 + 103);
    v62 = v82;
    if (!v82)
      goto LABEL_55;
  }
  v82 = 0;
  LODWORD(v83) = 0;
  WTF::fastFree(v62, v47);
LABEL_55:
  if (v80 && v79 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD3E30[v79])(&v85, v78);
  result = *(WTF **)(a2 + 72);
  if (result)
  {
    *(_QWORD *)(a2 + 72) = 0;
    *(_DWORD *)(a2 + 80) = 0;
    result = (WTF *)WTF::fastFree(result, v47);
  }
  *(_QWORD *)a2 = off_1E0FD2EC0;
  if (*(_BYTE *)(a2 + 56))
  {
    v63 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v63 != -1)
      result = (WTF *)((uint64_t (*)(uint64_t *, uint64_t))off_1E0FD3E30[v63])(&v85, v61);
    *(_DWORD *)(a2 + 48) = -1;
  }
  *(_QWORD *)a2 = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v48 + 8);
  *(_QWORD *)a2 = off_1E0FD2EC0;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v48 + 24);
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (*(_BYTE *)(v48 + 56))
  {
    *(_DWORD *)(a2 + 48) = -1;
    v64 = *(unsigned int *)(v48 + 48);
    if ((_DWORD)v64 != -1)
    {
      result = (WTF *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E0FD3E88[v64])(&v85, v61, v48 + 32);
      *(_DWORD *)(a2 + 48) = v64;
    }
    *(_BYTE *)(a2 + 56) = 1;
  }
  *(_QWORD *)a2 = off_1E0FD3038;
  v65 = *(_OWORD *)(v48 + 64);
  *(_BYTE *)(v60 + 16) = *(_BYTE *)(v48 + 80);
  *(_OWORD *)v60 = v65;
  return result;
}

WTF *WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::add<WGSL::RewriteGlobalVariables::Global>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, __int128 *a4)
{
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF *v13;
  int i;
  uint64_t v15;
  WTF *v16;
  WTF *result;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v8 = *a2;
    if (!*a2)
    {
      v9 = 0;
      v10 = *a3;
      v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *a3;
  v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100)
    goto LABEL_6;
LABEL_4:
  v12 = v11 >> 8;
LABEL_7:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF *)(v8 + 32 * v15);
    result = *(WTF **)v16;
    if (*(_QWORD *)v16 == -1)
    {
      v13 = (WTF *)(v8 + 32 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        result = 0;
        *(_OWORD *)v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        --*(_DWORD *)(*a2 - 16);
        v16 = v13;
      }
      v20 = *a3;
      if (*a3)
        *(_DWORD *)v20 += 2;
      *(_QWORD *)v16 = v20;
      v21 = *a4;
      *((_QWORD *)v16 + 3) = *((_QWORD *)a4 + 2);
      *(_OWORD *)((char *)v16 + 8) = v21;
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        v22 = *a2;
        if (*a2)
          goto LABEL_21;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v22 = *a2;
        if (*a2)
        {
LABEL_21:
          v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
          v24 = *(unsigned int *)(v22 - 4);
          if (v24 <= 0x400)
            goto LABEL_22;
          goto LABEL_30;
        }
      }
      v23 = *(unsigned int *)(v22 - 16);
      v24 = *(unsigned int *)(v22 - 4);
      if (v24 <= 0x400)
      {
LABEL_22:
        if (3 * v24 > 4 * v23)
        {
LABEL_33:
          v26 = v22 + 32 * v24;
          v25 = 1;
          goto LABEL_34;
        }
        if (!(_DWORD)v24)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (WTF::StringImpl **)v16);
          v16 = result;
          v22 = *a2;
          if (!*a2)
          {
LABEL_25:
            v24 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v24 = *(unsigned int *)(v22 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), (WTF::StringImpl **)v16);
        v16 = result;
        v22 = *a2;
        if (!*a2)
          goto LABEL_25;
        goto LABEL_32;
      }
LABEL_30:
      if (v24 > 2 * v23)
        goto LABEL_33;
      goto LABEL_31;
    }
    result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v12 = i + v15;
  }
  v18 = *a2;
  if (*a2)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v25 = 0;
  v26 = v18 + 32 * v19;
LABEL_34:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v26;
  *(_BYTE *)(a1 + 16) = v25;
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::ReferenceTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression &,void>(_QWORD *this, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E0FD4308;
  *(_QWORD *)(v6 + 64) = a3;
  *v5 += 72;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

uint64_t WGSL::RewriteGlobalVariables::packStructType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  _BYTE *v42;
  int8x16_t *v43;
  size_t v44;
  _BYTE *v45;
  unint64_t v46;
  unsigned __int128 *v47;
  unsigned __int128 v48;
  size_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  _BYTE *v53;
  int8x16_t *v54;
  char v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD **v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  _DWORD *v108;
  int8x16_t *v110;
  int8x16_t *v111;
  unint64_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int16x8_t *v117;
  int8x8_t *v118;
  unint64_t v119;
  int16x8_t v120;
  __int128 v121;
  _DWORD *v122;

  v4 = *(_QWORD *)a2;
  if (*(_BYTE *)(*(_QWORD *)a2 + 88) == 6)
  {
    v5 = *(_QWORD *)(a1 + 176);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = *(_QWORD *)(v5 + 16 * v10);
      if (v11 == a2)
        return *(_QWORD *)(v5 + 16 * v10 + 8);
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a2)
          return *(_QWORD *)(v5 + 16 * v10 + 8);
      }
    }
    return 0;
  }
  v14 = *(unsigned int *)(v4 + 84);
  if (!(_DWORD)v14)
    goto LABEL_26;
  v15 = 0;
  v16 = *(_QWORD *)(v4 + 72);
  v17 = 8 * v14;
  do
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 104) + 24);
    if (!v18)
    {
LABEL_10:
      v18 = 0;
      goto LABEL_11;
    }
    v19 = *(_DWORD *)(v18 + 48);
    switch(v19)
    {
      case 1:
        if (*(_BYTE *)(v18 + 8) != 3)
          goto LABEL_10;
        break;
      case 3:
        if (*(_QWORD *)v18 && *(_DWORD *)(*(_QWORD *)v18 + 48) == 4)
        {
          v20 = WGSL::RewriteGlobalVariables::packStructType(a1);
          if (!v20)
            goto LABEL_10;
          v21 = *(_QWORD *)(a1 + 40);
          *(_WORD *)(v21 + 9) = 257;
          v18 = WGSL::TypeStore::arrayType(v21 + 96, v20, *(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16));
        }
        else
        {
          if ((WGSL::Type::packing(*(WGSL::Type **)v18) & 0x10) == 0)
            goto LABEL_10;
          v18 = 0;
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + 30) = 1;
        }
        break;
      case 4:
        v18 = WGSL::RewriteGlobalVariables::packStructType(a1);
        break;
      default:
        goto LABEL_10;
    }
LABEL_11:
    v15 |= v18 != 0;
    v16 += 8;
    v17 -= 8;
  }
  while (v17);
  v4 = *(_QWORD *)a2;
  if ((v15 & 1) != 0)
    goto LABEL_27;
LABEL_26:
  if (!*(_BYTE *)(v4 + 120))
    return 0;
LABEL_27:
  v22 = *(_QWORD *)(a1 + 40);
  v25 = *(unsigned __int8 *)(v4 + 88);
  v23 = (_BYTE *)(v4 + 88);
  v24 = v25;
  *v23 = 6;
  v26 = (uint64_t *)(v22 + 400);
  v27 = *(unsigned int *)(v22 + 412);
  v28 = *(_DWORD *)(v22 + 408);
  v29 = __OFSUB__((_DWORD)v27, v28);
  if ((_DWORD)v27 == v28)
  {
    v30 = v27 + (v27 >> 2);
    if (v30 >= 0x10)
      v31 = v30 + 1;
    else
      v31 = 16;
    if (v31 <= v27 + 1)
      v32 = v27 + 1;
    else
      v32 = v31;
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v26, v32);
    v27 = *(unsigned int *)(v22 + 412);
    v33 = *(_QWORD *)(v22 + 400);
  }
  else
  {
    v33 = *v26;
  }
  v34 = (_QWORD *)(v33 + 32 * v27);
  *v34 = &off_1E0FD4478;
  v34[1] = v23;
  v34[2] = v24;
  v34[3] = v34;
  ++*(_DWORD *)(v22 + 412);
  v35 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  if (!v35)
  {
    v37 = 7;
    if (!v29)
      goto LABEL_40;
    goto LABEL_155;
  }
  v36 = *(_DWORD *)(v35 + 4);
  *(_DWORD *)v35 += 2;
  if (v36 < 0 || (v29 = __OFADD__(v36, 7), v37 = v36 + 7, v29))
  {
LABEL_155:
    v122 = 0;
    goto LABEL_158;
  }
LABEL_40:
  v38 = (v37 + 2);
  if (__OFADD__(v37, 2))
    goto LABEL_155;
  if (!v35)
  {
    WTF::tryFastCompactMalloc((WTF *)(v38 + 20));
    v39 = (_DWORD *)v121;
    if ((_QWORD)v121)
    {
      *(_DWORD *)v121 = 2;
      v39[1] = v38;
      *((_WORD *)v39 + 10) = 24415;
      *((_QWORD *)v39 + 1) = v39 + 5;
      v39[4] = 4;
      *(_DWORD *)((char *)v39 + 22) = 1667321951;
      *(_DWORD *)((char *)v39 + 25) = 1684368227;
      v122 = v39;
LABEL_48:
      v41 = *(_QWORD *)(a1 + 40) + 312;
      goto LABEL_74;
    }
    goto LABEL_155;
  }
  if ((*(_BYTE *)(v35 + 16) & 4) != 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v38 + 20));
    v39 = (_DWORD *)v121;
    if ((_QWORD)v121)
    {
      *(_DWORD *)v121 = 2;
      v39[1] = v38;
      *((_WORD *)v39 + 10) = 24415;
      *((_QWORD *)v39 + 1) = v39 + 5;
      v39[4] = 4;
      v42 = (char *)v39 + 22;
      v43 = *(int8x16_t **)(v35 + 8);
      v44 = *(unsigned int *)(v35 + 4);
      if ((*(_BYTE *)(v35 + 16) & 4) != 0)
      {
        if ((_DWORD)v44)
        {
          if ((_DWORD)v44 == 1)
            *v42 = v43->i8[0];
          else
            memcpy((char *)v39 + 22, v43, v44);
        }
        goto LABEL_72;
      }
      v45 = &v42[v44];
      if (v44 < 0x10)
      {
        v46 = (unint64_t)v39 + 22;
      }
      else
      {
        v46 = (unint64_t)&v42[v44 & 0xFFFFFFF0];
        v47 = (unsigned __int128 *)((char *)v39 + 22);
        do
        {
          v48 = (unsigned __int128)vld2q_s8(v43->i8);
          v43 += 2;
          *v47++ = v48;
        }
        while (v47 != (unsigned __int128 *)v46);
      }
      if ((_BYTE *)v46 == v45)
      {
LABEL_72:
        v56 = &v42[*(unsigned int *)(v35 + 4)];
        *(_DWORD *)((char *)v56 + 3) = 1684368227;
        *v56 = 1667321951;
        v122 = v39;
        v40 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 == 2)
          goto LABEL_73;
LABEL_45:
        *(_DWORD *)v35 = v40;
        goto LABEL_48;
      }
      v49 = (size_t)v39 + v44;
      v50 = (unint64_t)v39 + v44 - v46 + 22;
      if (v50 < 8
        || (v46 < (unint64_t)&v43[2].u64[1] + 2 * v49 + -2 * v46 + 4
          ? (v51 = (unint64_t)v43 >= v49 + 22)
          : (v51 = 1),
            !v51))
      {
        v53 = (_BYTE *)v46;
        v54 = v43;
        goto LABEL_69;
      }
      if (v50 >= 0x20)
      {
        v52 = v50 & 0xFFFFFFFFFFFFFFE0;
        v110 = v43 + 2;
        v111 = (int8x16_t *)(v46 + 16);
        v112 = v50 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v114 = v110[-2];
          v113 = v110[-1];
          v116 = *v110;
          v115 = v110[1];
          v110 += 4;
          v111[-1] = vuzp1q_s8(v114, v113);
          *v111 = vuzp1q_s8(v116, v115);
          v111 += 2;
          v112 -= 32;
        }
        while (v112);
        if (v50 == v52)
          goto LABEL_72;
        if ((v50 & 0x18) == 0)
        {
          v54 = (int8x16_t *)((char *)v43 + 2 * v52);
          v53 = (_BYTE *)(v46 + v52);
          do
          {
LABEL_69:
            v55 = v54->i8[0];
            v54 = (int8x16_t *)((char *)v54 + 2);
            *v53++ = v55;
          }
          while (v53 != v45);
          goto LABEL_72;
        }
      }
      else
      {
        v52 = 0;
      }
      v53 = (_BYTE *)(v46 + (v50 & 0xFFFFFFFFFFFFFFF8));
      v54 = (int8x16_t *)((char *)v43 + 2 * (v50 & 0xFFFFFFFFFFFFFFF8));
      v117 = (int16x8_t *)((char *)v43 + 2 * v52);
      v118 = (int8x8_t *)(v46 + v52);
      v119 = v52 - (v50 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v120 = *v117++;
        *v118++ = vmovn_s16(v120);
        v119 += 8;
      }
      while (v119);
      if (v50 == (v50 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_72;
      goto LABEL_69;
    }
    goto LABEL_155;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v38, 0, (int8x16_t *)"__", 2u, v35, (int8x16_t *)"_Packed", 7u, &v122);
  v39 = v122;
  if (!v122)
    goto LABEL_158;
  v40 = *(_DWORD *)v35 - 2;
  if (*(_DWORD *)v35 != 2)
    goto LABEL_45;
LABEL_73:
  WTF::StringImpl::destroy();
  v39 = v122;
  v41 = *(_QWORD *)(a1 + 40) + 312;
  if (v122)
LABEL_74:
    *v39 += 2;
  v121 = 0uLL;
  v57 = *(_QWORD *)a2;
  v58 = *(unsigned int *)(*(_QWORD *)a2 + 84);
  if (!(_DWORD)v58)
  {
    v60 = 0;
    goto LABEL_88;
  }
  if (v58 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1824B0BE0);
  }
  v59 = WTF::fastMalloc((WTF *)(8 * v58));
  v60 = v59;
  v61 = *(unsigned int *)(v57 + 84);
  if ((_DWORD)v61)
  {
    v62 = *(_QWORD *)(v57 + 72);
    v63 = (v61 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v63 < 3)
    {
      v64 = (_QWORD *)v59;
      v65 = *(uint64_t **)(v57 + 72);
    }
    else
    {
      v64 = (_QWORD *)v59;
      v65 = *(uint64_t **)(v57 + 72);
      if ((unint64_t)(v59 - v62) >= 0x20)
      {
        v66 = 0;
        v67 = v63 + 1;
        v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
        v64 = (_QWORD *)(v59 + v68);
        v65 = (uint64_t *)(v62 + v68);
        v69 = v67 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v70 = (_OWORD *)(v59 + v66);
          v71 = *(_OWORD *)(v62 + v66 + 16);
          *v70 = *(_OWORD *)(v62 + v66);
          v70[1] = v71;
          v66 += 32;
          v69 -= 4;
        }
        while (v69);
        if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_88;
      }
    }
    v72 = (uint64_t *)(v62 + 8 * v61);
    do
    {
      v73 = *v65++;
      *v64++ = v73;
    }
    while (v65 != v72);
  }
LABEL_88:
  v74 = *(_QWORD *)a2;
  v75 = *(_QWORD *)v41;
  if (*(_QWORD *)(v41 + 8) - *(_QWORD *)v41 <= 0x8FuLL)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)v41);
    v75 = *(_QWORD *)v41;
  }
  *(_QWORD *)v75 = &off_1E0FD36E0;
  *(_QWORD *)(v75 + 8) = 0;
  *(_QWORD *)(v75 + 16) = 0;
  *(_QWORD *)(v75 + 24) = &off_1E0FD2F10;
  *(_OWORD *)(v75 + 32) = v121;
  *(_QWORD *)(v75 + 48) = v39;
  *(_QWORD *)(v75 + 56) = 0;
  *(_QWORD *)(v75 + 64) = 0;
  *(_QWORD *)(v75 + 72) = v60;
  *(_DWORD *)(v75 + 80) = v58;
  *(_DWORD *)(v75 + 84) = v58;
  *(_BYTE *)(v75 + 88) = 7;
  *(_BYTE *)(v75 + 124) = 0;
  *(_BYTE *)(v75 + 132) = 0;
  *(_BYTE *)(v75 + 128) = 0;
  *(_BYTE *)(v75 + 136) = 0;
  *(_QWORD *)(v75 + 104) = 0;
  *(_QWORD *)(v75 + 112) = 0;
  *(_QWORD *)(v75 + 96) = v74;
  *(_BYTE *)(v75 + 120) = 0;
  if (v74)
  {
    *(_QWORD *)(v74 + 104) = v75;
    v76 = *(_DWORD *)(v74 + 124);
    *(_BYTE *)(v75 + 128) = *(_BYTE *)(v74 + 128);
    *(_DWORD *)(v75 + 124) = v76;
    v77 = *(_DWORD *)(v74 + 132);
    *(_BYTE *)(v75 + 136) = *(_BYTE *)(v74 + 136);
    *(_DWORD *)(v75 + 132) = v77;
  }
  *(_QWORD *)v41 += 144;
  v78 = *(unsigned int *)(v41 + 44);
  if ((_DWORD)v78 != *(_DWORD *)(v41 + 40))
  {
    v85 = (uint64_t *)(*(_QWORD *)(v41 + 32) + 8 * v78);
    goto LABEL_106;
  }
  v79 = v78 + (v78 >> 2);
  v80 = v79 >= 0x10 ? v79 + 1 : 16;
  v81 = v80 <= v78 + 1 ? v78 + 1 : v80;
  if (v81 >> 29)
  {
LABEL_158:
    __break(0xC471u);
    JUMPOUT(0x1824B0BC8);
  }
  v82 = *(void **)(v41 + 32);
  v83 = (void *)WTF::fastMalloc((WTF *)(8 * v81));
  *(_DWORD *)(v41 + 40) = v81;
  *(_QWORD *)(v41 + 32) = v83;
  memcpy(v83, v82, 8 * v78);
  if (v82)
  {
    if (*(void **)(v41 + 32) == v82)
    {
      *(_QWORD *)(v41 + 32) = 0;
      *(_DWORD *)(v41 + 40) = 0;
    }
    WTF::fastFree((WTF *)v82, v84);
  }
  v78 = *(unsigned int *)(v41 + 44);
  v85 = (uint64_t *)(*(_QWORD *)(v41 + 32) + 8 * v78);
LABEL_106:
  *v85 = v75;
  *(_DWORD *)(v41 + 44) = v78 + 1;
  WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(*(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 40) + 64, v75);
  v86 = *(_QWORD *)(a1 + 40) + 96;
  *(_QWORD *)&v121 = 0;
  v13 = WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>(v86, v75, &v121);
  v88 = v121;
  if ((_QWORD)v121)
  {
    v89 = *(unsigned int *)(v121 - 4);
    if ((_DWORD)v89)
    {
      v90 = (_DWORD **)v121;
      do
      {
        v91 = *v90;
        if (*v90 != (_DWORD *)-1)
        {
          *v90 = 0;
          if (v91)
          {
            if (*v91 == 2)
              WTF::StringImpl::destroy();
            else
              *v91 -= 2;
          }
        }
        v90 += 2;
        --v89;
      }
      while (v89);
    }
    WTF::fastFree((WTF *)(v88 - 16), v87);
  }
  *(_QWORD *)(v75 + 112) = v13;
  v94 = *(_QWORD *)(a1 + 176);
  v93 = (uint64_t *)(a1 + 176);
  v92 = v94;
  if (v94
    || (WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v93, 8u), (v92 = *v93) != 0))
  {
    v95 = *(_DWORD *)(v92 - 8);
  }
  else
  {
    v95 = 0;
  }
  v96 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v97 = 9 * ((v96 + ~(v96 << 13)) ^ ((v96 + ~(v96 << 13)) >> 8));
  v98 = (v97 ^ (v97 >> 15)) + ~((v97 ^ (v97 >> 15)) << 27);
  v99 = v95 & ((v98 >> 31) ^ v98);
  v100 = (_QWORD *)(v92 + 16 * v99);
  v101 = *v100;
  if (!*v100)
  {
LABEL_127:
    *v100 = a2;
    v100[1] = v13;
    if (*v93)
    {
      ++*(_DWORD *)(*v93 - 12);
      v104 = *v93;
      if (*v93)
        goto LABEL_129;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v104 = *v93;
      if (*v93)
      {
LABEL_129:
        v105 = (*(_DWORD *)(v104 - 16) + *(_DWORD *)(v104 - 12));
        v106 = *(unsigned int *)(v104 - 4);
        if (v106 <= 0x400)
          goto LABEL_130;
        goto LABEL_135;
      }
    }
    v105 = *(unsigned int *)(v104 - 16);
    v106 = *(unsigned int *)(v104 - 4);
    if (v106 <= 0x400)
    {
LABEL_130:
      if (3 * v106 > 4 * v105)
        goto LABEL_138;
      if (!(_DWORD)v106)
      {
        v107 = 8;
LABEL_137:
        WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v93, v107);
        goto LABEL_138;
      }
LABEL_136:
      v107 = (_DWORD)v106 << (6 * *(_DWORD *)(v104 - 12) >= (2 * v106));
      goto LABEL_137;
    }
LABEL_135:
    if (v106 > 2 * v105)
      goto LABEL_138;
    goto LABEL_136;
  }
  v102 = 0;
  v103 = 1;
  while (v101 != a2)
  {
    if (v101 == -1)
      v102 = v100;
    v99 = (v99 + v103) & v95;
    v100 = (_QWORD *)(v92 + 16 * v99);
    v101 = *v100;
    ++v103;
    if (!*v100)
    {
      if (v102)
      {
        *v102 = 0;
        v102[1] = 0;
        --*(_DWORD *)(*v93 - 16);
        v100 = v102;
      }
      goto LABEL_127;
    }
  }
LABEL_138:
  v108 = v122;
  v122 = 0;
  if (v108)
  {
    if (*v108 == 2)
      WTF::StringImpl::destroy();
    else
      *v108 -= 2;
  }
  return v13;
}

char *WGSL::ShaderModule::replace<WGSL::AST::ReferenceTypeExpression,WGSL::AST::ReferenceTypeExpression>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *result;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[16];
  int v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(WGSL::AST::Expression *__hidden);
  __int128 v46;
  uint64_t v47;
  _BYTE v48[16];
  int v49;
  unsigned __int8 v50;
  uint64_t v51;
  _BYTE v52[9];

  v38 = *(_OWORD *)(a2 + 8);
  v39 = *(_QWORD *)(a2 + 24);
  v40[0] = 0;
  v42 = 0;
  v6 = *(unsigned __int8 *)(a2 + 56);
  v35 = a2 + 32;
  if (*(_BYTE *)(a2 + 56))
  {
    v41 = -1;
    v3 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E0FD3E88[v3])(&v44, v40, a2 + 32);
      v41 = v3;
    }
    v42 = 1;
  }
  v7 = (uint64_t *)(a1 + 400);
  v8 = *(_QWORD *)(a2 + 64);
  v43 = v8;
  v9 = *(unsigned int *)(a1 + 412);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 408))
  {
    v10 = v9 + (v9 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v9 + 1)
      v12 = v9 + 1;
    else
      v12 = v11;
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v7, v12);
    v13 = *(unsigned int *)(a1 + 412);
    v14 = *(_QWORD *)(a1 + 400);
    v46 = v38;
    v15 = a2;
    v16 = v39;
    v44 = a2;
    v45 = off_1E0FD2EC0;
    v47 = v39;
    v48[0] = 0;
    v50 = 0;
    v17 = v42;
    if (v42)
    {
      v49 = -1;
      v6 = v41;
      if (v41 != -1)
      {
        ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD3EE0[v41])(v52, v48, v40);
        v49 = v6;
        v15 = v44;
        v16 = v47;
      }
      v18 = 1;
      v50 = 1;
    }
    else
    {
      v18 = 0;
    }
    v23 = v43;
    v45 = off_1E0FD4308;
    v51 = v43;
    v24 = v14 + 32 * v13;
    *(_QWORD *)(v24 + 24) = 0;
    v25 = (_QWORD *)(v24 + 24);
    result = (char *)operator new(0x58uLL);
    v27 = result;
    *(_QWORD *)result = off_1E0FD4430;
    *((_QWORD *)result + 1) = v15;
    *(_OWORD *)(result + 24) = v46;
    *((_QWORD *)result + 2) = off_1E0FD2EC0;
    *((_QWORD *)result + 5) = v16;
    result[48] = 0;
    result[72] = 0;
    if (v17)
    {
      *((_DWORD *)result + 16) = -1;
      v28 = a3;
      if (v6 != -1)
      {
        result = (char *)((uint64_t (*)(_BYTE *, char *, _BYTE *))off_1E0FD3EE0[v6])(v52, result + 48, v48);
        *((_DWORD *)v27 + 16) = v6;
        v18 = v50;
        v23 = v51;
      }
      v27[72] = 1;
      *((_QWORD *)v27 + 2) = off_1E0FD4308;
      *((_QWORD *)v27 + 10) = v23;
      *v25 = v27;
      v45 = off_1E0FD2EC0;
      if (v18 && v49 != -1)
        result = (char *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD3E30[v49])(v52, v48);
    }
    else
    {
      *((_QWORD *)result + 2) = off_1E0FD4308;
      *((_QWORD *)result + 10) = v23;
      *v25 = result;
      v28 = a3;
    }
    ++*(_DWORD *)(a1 + 412);
    v32 = v35;
    if (!v42)
      goto LABEL_42;
LABEL_40:
    if (v41 != -1)
      result = (char *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD3E30[v41])(&v44, v40);
    goto LABEL_42;
  }
  v19 = *v7;
  v46 = v38;
  v20 = a2;
  v21 = v39;
  v44 = a2;
  v45 = off_1E0FD2EC0;
  v47 = v39;
  v48[0] = 0;
  v50 = 0;
  if (v6)
  {
    v49 = -1;
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E0FD3EE0[v3])(v52, v48, v40);
      v49 = v3;
      v8 = v43;
      v20 = v44;
      v21 = v47;
    }
    v22 = 1;
    v50 = 1;
  }
  else
  {
    v22 = 0;
  }
  v45 = off_1E0FD4308;
  v51 = v8;
  v29 = v19 + 32 * v9;
  *(_QWORD *)(v29 + 24) = 0;
  v30 = (_QWORD *)(v29 + 24);
  result = (char *)operator new(0x58uLL);
  v31 = result;
  *(_QWORD *)result = off_1E0FD4430;
  *((_QWORD *)result + 1) = v20;
  *(_OWORD *)(result + 24) = v46;
  *((_QWORD *)result + 2) = off_1E0FD2EC0;
  *((_QWORD *)result + 5) = v21;
  result[48] = 0;
  result[72] = 0;
  if (v6)
  {
    *((_DWORD *)result + 16) = -1;
    v32 = v35;
    if ((_DWORD)v3 != -1)
    {
      result = (char *)((uint64_t (*)(_BYTE *, char *, _BYTE *))off_1E0FD3EE0[v3])(v52, result + 48, v48);
      *((_DWORD *)v31 + 16) = v3;
      v22 = v50;
      v8 = v51;
    }
    v31[72] = 1;
    *((_QWORD *)v31 + 2) = off_1E0FD4308;
    *((_QWORD *)v31 + 10) = v8;
    *v30 = v31;
    v45 = off_1E0FD2EC0;
    v28 = a3;
    if (v22)
    {
      if (v49 != -1)
        result = (char *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD3E30[v49])(v52, v48);
      v49 = -1;
    }
  }
  else
  {
    *((_QWORD *)result + 2) = off_1E0FD4308;
    *((_QWORD *)result + 10) = v8;
    *v30 = result;
    v45 = off_1E0FD2EC0;
    v32 = v35;
    v28 = a3;
  }
  ++*(_DWORD *)(a1 + 412);
  if (v42)
    goto LABEL_40;
LABEL_42:
  *(_QWORD *)a2 = off_1E0FD2EC0;
  if (*(_BYTE *)(a2 + 56))
  {
    v33 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v33 != -1)
      result = (char *)((uint64_t (*)(uint64_t *, uint64_t))off_1E0FD3E30[v33])(&v44, v32);
    *(_DWORD *)(a2 + 48) = -1;
  }
  *(_QWORD *)a2 = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v28 + 8);
  *(_QWORD *)a2 = off_1E0FD2EC0;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v28 + 24);
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (*(_BYTE *)(v28 + 56))
  {
    *(_DWORD *)(a2 + 48) = -1;
    v34 = *(unsigned int *)(v28 + 48);
    if ((_DWORD)v34 != -1)
    {
      result = (char *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E0FD3E88[v34])(&v44, v32, v28 + 32);
      *(_DWORD *)(a2 + 48) = v34;
    }
    *(_BYTE *)(a2 + 56) = 1;
  }
  *(_QWORD *)a2 = off_1E0FD4308;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v28 + 64);
  return result;
}

_QWORD *WGSL::RewriteGlobalVariables::insertParameter(uint64_t a1, _OWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6, char a7)
{
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t *v55;
  uint64_t v57;
  _QWORD v60[3];
  _DWORD *v61;
  _DWORD *v62;

  v7 = a6;
  v11 = a1;
  if (!a6)
  {
    v12 = *(_QWORD *)(a1 + 40);
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v62, "__ArgumentBufferT_", 19, a4);
    if (!v62)
    {
      __break(0xC471u);
LABEL_75:
      JUMPOUT(0x1824B1674);
    }
    v60[0] = &off_1E0FD2F10;
    v60[1] = 0;
    v60[2] = 0;
    v61 = v62;
    v7 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v12 + 312), a2, (uint64_t)v60);
    if (v61)
    {
      if (*v61 == 2)
      {
        WTF::StringImpl::destroy();
        v13 = *(_QWORD *)(v11 + 72);
        if (!v13)
        {
LABEL_15:
          v7[3] = v13;
          goto LABEL_16;
        }
LABEL_9:
        v14 = *(_DWORD *)(v13 - 8);
        v15 = 9 * ((~(a4 << 15) + a4) ^ ((~(a4 << 15) + a4) >> 10));
        v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
        v17 = v14 & (v16 ^ HIWORD(v16));
        v18 = *(_DWORD *)(v13 + 16 * v17);
        if (v18 == a4)
        {
LABEL_13:
          v13 = *(_QWORD *)(v13 + 16 * v17 + 8);
        }
        else
        {
          v19 = 1;
          while (v18 != -1)
          {
            v17 = ((_DWORD)v17 + v19) & v14;
            v18 = *(_DWORD *)(v13 + 16 * v17);
            ++v19;
            if (v18 == a4)
              goto LABEL_13;
          }
          v13 = 0;
        }
        goto LABEL_15;
      }
      *v61 -= 2;
    }
    v13 = *(_QWORD *)(v11 + 72);
    if (!v13)
      goto LABEL_15;
    goto LABEL_9;
  }
LABEL_16:
  v20 = *(_QWORD *)(v11 + 40);
  v21 = *(_QWORD *)(v20 + 312);
  if ((unint64_t)(*(_QWORD *)(v20 + 320) - v21) <= 0x47)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v20 + 312));
    v21 = *(_QWORD *)(v20 + 312);
  }
  *(_OWORD *)(v21 + 8) = *a2;
  *(_BYTE *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(_BYTE *)(v21 + 56) = 0;
  *(_QWORD *)v21 = off_1E0FD44C0;
  *(_QWORD *)(v21 + 64) = a4;
  *(_QWORD *)(v20 + 312) += 72;
  v22 = *(unsigned int *)(v20 + 356);
  if ((_DWORD)v22 != *(_DWORD *)(v20 + 352))
  {
    *(_QWORD *)(*(_QWORD *)(v20 + 344) + 8 * v22) = v21;
    *(_DWORD *)(v20 + 356) = v22 + 1;
    v33 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(v33 + 128);
    goto LABEL_36;
  }
  v57 = v11;
  v23 = v7;
  v24 = a2;
  v25 = v22 + (v22 >> 2);
  if (v25 >= 0x10)
    v26 = v25 + 1;
  else
    v26 = 16;
  if (v26 <= v22 + 1)
    v27 = v22 + 1;
  else
    v27 = v26;
  if (v27 >> 29)
  {
    __break(0xC471u);
    goto LABEL_75;
  }
  v28 = *(void **)(v20 + 344);
  v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
  *(_DWORD *)(v20 + 352) = v27;
  *(_QWORD *)(v20 + 344) = v29;
  memcpy(v29, v28, 8 * v22);
  a2 = v24;
  v7 = v23;
  v11 = v57;
  if (v28)
  {
    if (*(void **)(v20 + 344) == v28)
    {
      *(_QWORD *)(v20 + 344) = 0;
      *(_DWORD *)(v20 + 352) = 0;
    }
    WTF::fastFree((WTF *)v28, v30);
  }
  v31 = *(unsigned int *)(v20 + 356);
  v32 = *(unsigned __int8 *)(v21 + 56);
  *(_QWORD *)(*(_QWORD *)(v20 + 344) + 8 * v31) = v21;
  *(_DWORD *)(v20 + 356) = v31 + 1;
  v33 = *(_QWORD *)(v57 + 40);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v33 + 128);
  if (!v32)
  {
LABEL_36:
    *(_DWORD *)(v21 + 32) = a4;
    *(_DWORD *)(v21 + 48) = 4;
    *(_BYTE *)(v21 + 56) = 1;
    v35 = *(_QWORD *)(v33 + 312);
    if ((unint64_t)(*(_QWORD *)(v33 + 320) - v35) > 0x1F)
      goto LABEL_37;
    goto LABEL_70;
  }
  v34 = *(unsigned int *)(v21 + 48);
  if ((_DWORD)v34 == -1)
    goto LABEL_69;
  if ((_DWORD)v34 != 4)
  {
    ((void (*)(_QWORD *, uint64_t))off_1E0FD3E30[v34])(v60, v21 + 32);
    v33 = *(_QWORD *)(v57 + 40);
LABEL_69:
    *(_DWORD *)(v21 + 32) = a4;
    *(_DWORD *)(v21 + 48) = 4;
    v35 = *(_QWORD *)(v33 + 312);
    if ((unint64_t)(*(_QWORD *)(v33 + 320) - v35) > 0x1F)
      goto LABEL_37;
    goto LABEL_70;
  }
  *(_DWORD *)(v21 + 32) = a4;
  v35 = *(_QWORD *)(v33 + 312);
  if ((unint64_t)(*(_QWORD *)(v33 + 320) - v35) > 0x1F)
    goto LABEL_37;
LABEL_70:
  WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v33 + 312));
  v35 = *(_QWORD *)(v33 + 312);
LABEL_37:
  *(_OWORD *)(v35 + 8) = *a2;
  *(_QWORD *)v35 = &off_1E0FD44E8;
  *(_QWORD *)(v35 + 24) = v21;
  *(_QWORD *)(v33 + 312) += 32;
  v36 = *(unsigned int *)(v33 + 356);
  if ((_DWORD)v36 == *(_DWORD *)(v33 + 352))
  {
    v37 = v36 + (v36 >> 2);
    if (v37 >= 0x10)
      v38 = v37 + 1;
    else
      v38 = 16;
    if (v38 <= v36 + 1)
      v39 = v36 + 1;
    else
      v39 = v38;
    if (v39 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1824B167CLL);
    }
    v40 = *(void **)(v33 + 344);
    v41 = (void *)WTF::fastMalloc((WTF *)(8 * v39));
    *(_DWORD *)(v33 + 352) = v39;
    *(_QWORD *)(v33 + 344) = v41;
    memcpy(v41, v40, 8 * v36);
    if (v40)
    {
      if (*(void **)(v33 + 344) == v40)
      {
        *(_QWORD *)(v33 + 344) = 0;
        *(_DWORD *)(v33 + 352) = 0;
      }
      WTF::fastFree((WTF *)v40, v42);
    }
    v36 = *(unsigned int *)(v33 + 356);
    v43 = (_QWORD *)(*(_QWORD *)(v33 + 344) + 8 * v36);
  }
  else
  {
    v43 = (_QWORD *)(*(_QWORD *)(v33 + 344) + 8 * v36);
  }
  *v43 = v35;
  *(_DWORD *)(v33 + 356) = v36 + 1;
  v44 = *(_QWORD *)(v11 + 40);
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v45 = v35;
  v46 = *(_QWORD *)(v44 + 312);
  if ((unint64_t)(*(_QWORD *)(v44 + 320) - v46) <= 0x67)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v44 + 312));
    v46 = *(_QWORD *)(v44 + 312);
  }
  *(_OWORD *)(v46 + 8) = *a2;
  *(_QWORD *)v46 = &off_1E0FD35E0;
  *(_BYTE *)(v46 + 24) = a7;
  *(_QWORD *)(v46 + 32) = &off_1E0FD2EE8;
  *(_OWORD *)(v46 + 40) = *(_OWORD *)(a5 + 8);
  *(_QWORD *)(v46 + 32) = &off_1E0FD2F10;
  v47 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(v46 + 56) = v47;
  *(_QWORD *)(v46 + 64) = v7;
  *(_QWORD *)(v46 + 72) = v45;
  *(_QWORD *)(v46 + 80) = 0x100000001;
  *(_BYTE *)(v46 + 93) = 0;
  *(_BYTE *)(v46 + 96) = 0;
  *(_BYTE *)(v46 + 100) = 0;
  *(_DWORD *)(v46 + 88) = 0;
  *(_QWORD *)(v44 + 312) += 104;
  v48 = *(unsigned int *)(v44 + 356);
  if ((_DWORD)v48 == *(_DWORD *)(v44 + 352))
  {
    v49 = v48 + (v48 >> 2);
    if (v49 >= 0x10)
      v50 = v49 + 1;
    else
      v50 = 16;
    if (v50 <= v48 + 1)
      v51 = v48 + 1;
    else
      v51 = v50;
    if (v51 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1824B1684);
    }
    v52 = *(void **)(v44 + 344);
    v53 = (void *)WTF::fastMalloc((WTF *)(8 * v51));
    *(_DWORD *)(v44 + 352) = v51;
    *(_QWORD *)(v44 + 344) = v53;
    memcpy(v53, v52, 8 * v48);
    if (v52)
    {
      if (*(void **)(v44 + 344) == v52)
      {
        *(_QWORD *)(v44 + 344) = 0;
        *(_DWORD *)(v44 + 352) = 0;
      }
      WTF::fastFree((WTF *)v52, v54);
    }
    v48 = *(unsigned int *)(v44 + 356);
    v55 = (uint64_t *)(*(_QWORD *)(v44 + 344) + 8 * v48);
  }
  else
  {
    v55 = (uint64_t *)(*(_QWORD *)(v44 + 344) + 8 * v48);
  }
  *v55 = v46;
  *(_DWORD *)(v44 + 356) = v48 + 1;
  return WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>((_QWORD *)v44, a3 + 56, v46);
}

WTF *WGSL::RewriteGlobalVariables::insertStructs(uint64_t a1, _QWORD *a2, const WTF::StringImpl *a3, unsigned int a4, uint64_t *a5)
{
  unint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  WTF *v10;
  int v11;
  _DWORD *v12;
  _OWORD *v13;
  int v14;
  int v15;
  unint64_t *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int v22;
  int8x8_t v23;
  int8x8_t v24;
  int32x2_t v25;
  int8x8_t v26;
  int32x2_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  int v31;
  int v33;
  uint64_t v35;
  _OWORD *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  void *v117;
  _QWORD *v118;
  int v119;
  _OWORD *v120;
  int v121;
  uint64_t v122;
  int v123;
  _DWORD *v124;
  int v125;
  unsigned int v126;
  _DWORD *v127;
  void *v128;
  unsigned int v129;
  uint64_t i;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  void *v161;
  void *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  _DWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  void *v172;
  void *v173;
  _QWORD *v174;
  int v175;
  _OWORD *v176;
  int v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  WTF *v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  WTF *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  WTF *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  WTF *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  WTF *v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  WTF *v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  WTF *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  WTF *v258;
  _OWORD *v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  unint64_t v272;
  int v273;
  _OWORD *v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unsigned int v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  unint64_t v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  _DWORD *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  void *v298;
  void *v299;
  void *v300;
  _QWORD *v301;
  unsigned int v302;
  _DWORD *v303;
  void *v304;
  unsigned int v305;
  uint64_t j;
  _QWORD *v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  void *v323;
  void *v324;
  void *v325;
  _QWORD *v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  void *v335;
  void *v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  _DWORD *v340;
  _QWORD *v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  void *v347;
  void *v348;
  int v349;
  _QWORD *v350;
  _DWORD *v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  void *v357;
  void *v358;
  void *v359;
  _QWORD *v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  void *v369;
  void *v370;
  void *v371;
  _QWORD *v372;
  uint64_t v373;
  _DWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  void *v380;
  void *v381;
  _QWORD *v382;
  int v383;
  _OWORD *v384;
  int v385;
  _DWORD *v386;
  _DWORD *v387;
  uint64_t v388;
  void *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  WTF *v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  WTF *v401;
  uint64_t v402;
  void *v403;
  uint64_t v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  WTF *v408;
  uint64_t v409;
  void *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  WTF *v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  WTF *v422;
  uint64_t v423;
  void *v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  WTF *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  __int32 *v449;
  _DWORD *v450;
  __int32 v451;
  WTF *v452;
  unsigned int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unsigned int v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  _OWORD *v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unsigned int v480;
  int v481;
  uint64_t v482;
  unsigned int v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  unsigned int v487;
  WTF::StringImpl *v488;
  unsigned int v489;
  int v490;
  int k;
  int v492;
  WTF **v493;
  int v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  unsigned int v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  void *v505;
  WTF *result;
  const WTF::StringImpl *v509;
  const WTF::StringImpl *v510;
  _DWORD *v511;
  uint64_t v512;
  _DWORD *v513;
  WTF *v514;
  uint64_t v515;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  WTF *v520;
  uint64_t v521;
  WTF *v522;
  uint64_t v523;
  __int32 v524;
  void *__src;
  uint64_t v526;
  __int16 v527;
  uint64_t v528;
  char v529;
  _QWORD v530[2];
  uint64_t v531;
  _BYTE v532[24];
  _DWORD *v533;
  uint64_t v534;
  uint64_t v535;

  v535 = *MEMORY[0x1E0C80C00];
  __src = 0;
  v526 = 0;
  v524 = 0;
  if (a4)
  {
    v6 = a3;
    v7 = (uint64_t)a2;
    v8 = 0;
    v509 = (const WTF::StringImpl *)((char *)a3 + 24 * a4);
    while (1)
    {
      v522 = 0;
      v523 = 0;
      v520 = 0;
      v521 = 0;
      v9 = *((_DWORD *)v6 + 5);
      if (!v9)
      {
        v10 = 0;
        ++v524;
        goto LABEL_504;
      }
      v10 = 0;
      v11 = 0;
      v510 = v6;
      v12 = (_DWORD *)*((_QWORD *)v6 + 1);
      v513 = &v12[30 * v9];
      do
      {
        v15 = *(unsigned __int8 *)(v7 + 184);
        if (((_BYTE)v12[2] & v15) != 0)
        {
          switch(v15)
          {
            case 4:
              v16 = (unint64_t *)(v12 + 24);
              break;
            case 2:
              v16 = (unint64_t *)(v12 + 18);
              break;
            case 1:
              v16 = (unint64_t *)(v12 + 12);
              break;
            default:
LABEL_18:
              switch(v15)
              {
                case 4:
                  v17 = (uint64_t *)(v12 + 26);
                  break;
                case 2:
                  v17 = (uint64_t *)(v12 + 20);
                  break;
                case 1:
                  v17 = (uint64_t *)(v12 + 14);
                  break;
                default:
LABEL_25:
                  v18 = BYTE4(v5);
                  v19 = *(_QWORD *)(v7 + 56);
                  if (v19)
                  {
                    v20.i32[0] = *v12;
                    v20.i32[1] = v524;
                    v21 = vadd_s32(v20, (int32x2_t)0x100000001);
                    v22 = *(_DWORD *)(v19 - 8);
                    v23 = (int8x8_t)vsub_s32(v20, vshl_n_s32(v21, 0xFuLL));
                    v24 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v23, 0xAuLL), v23), (int32x2_t)0x900000009);
                    v25 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v24, 6uLL), v24);
                    v26 = (int8x8_t)vadd_s32(v25, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v25, 0xBuLL)));
                    v27 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v26, 0x10uLL), v26), (int32x2_t)0x109132F905AC73FELL);
                    v28 = v22 & ((0xD7862706ELL * (unint64_t)vadd_s32(v27, vdup_lane_s32(v27, 1)).u32[0]) >> 4);
                    v29 = (int *)(v19 + 16 * v28);
                    v30 = *v29;
                    v31 = v29[1];
                    if (*v29 != v21.i32[1] || v31 != v21.i32[0])
                    {
                      v33 = 1;
                      while (v30 | v31)
                      {
                        v28 = (v28 + v33) & v22;
                        v29 = (int *)(v19 + 16 * v28);
                        v30 = *v29;
                        v31 = v29[1];
                        ++v33;
                        if (*v29 == v21.i32[1] && v31 == v21.i32[0])
                          goto LABEL_37;
                      }
                      goto LABEL_54;
                    }
LABEL_37:
                    if (v29 == (int *)(v19 + 16 * *(unsigned int *)(v19 - 4)))
                      goto LABEL_54;
                    v35 = *((_QWORD *)v29 + 1);
                    if (!v8)
                    {
                      v36 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x90);
                      *v36 = xmmword_18260F910;
                      v8 = v36 + 1;
                    }
                    v37 = *((_DWORD *)v8 - 2);
                    v38 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
                    v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
                    v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
                    v41 = v37 & ((v40 >> 31) ^ v40);
                    v42 = &v8[v41];
                    v43 = *v42;
                    if (!*v42)
                      goto LABEL_50;
                    v44 = 0;
                    v45 = 1;
                    do
                    {
                      if (v43 == v35)
                        goto LABEL_52;
                      if (v43 == -1)
                        v44 = v42;
                      v41 = (v41 + v45) & v37;
                      v42 = &v8[v41];
                      v43 = *v42;
                      ++v45;
                    }
                    while (*v42);
                    if (v44)
                    {
                      *v44 = 0;
                      v44[1] = 0;
                      v46 = *((_DWORD *)v8 - 4) - 1;
                      *((_DWORD *)v8 - 4) = v46;
                      *v44 = v35;
                      v44[1] = v12;
                      v47 = *((_DWORD *)v8 - 3) + 1;
                      *((_DWORD *)v8 - 3) = v47;
                      v48 = (v46 + v47);
                      v49 = *((unsigned int *)v8 - 1);
                      if (v49 > 0x400)
                        goto LABEL_48;
LABEL_51:
                      if (3 * v49 > 4 * v48)
                        goto LABEL_52;
                      if ((_DWORD)v49)
                      {
LABEL_159:
                        v124 = v12;
                        v125 = v5;
                        v126 = (_DWORD)v49 << (6 * v47 >= (2 * v49));
                      }
                      else
                      {
                        v124 = v12;
                        v125 = v5;
                        v126 = 8;
                      }
                      v127 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v126 + 16));
                      v51 = v127 + 4;
                      v129 = v126 - 1;
                      v127[2] = v126 - 1;
                      v127[3] = v126;
                      *v127 = 0;
                      v127[1] = v47;
                      LODWORD(v5) = v125;
                      v12 = v124;
                      if ((_DWORD)v49)
                      {
                        for (i = 0; i != v49; ++i)
                        {
                          v131 = &v8[i];
                          if ((unint64_t)(*v131 + 1) >= 2)
                          {
                            v132 = (~(*v131 << 32) + *v131) ^ ((~(*v131 << 32) + *v131) >> 22);
                            v133 = 9 * ((v132 + ~(v132 << 13)) ^ ((unint64_t)(v132 + ~(v132 << 13)) >> 8));
                            v134 = (v133 ^ (v133 >> 15)) + ~((v133 ^ (v133 >> 15)) << 27);
                            v135 = v129 & ((v134 >> 31) ^ v134);
                            v136 = 1;
                            do
                            {
                              v137 = v135;
                              v138 = *(_QWORD *)&v51[4 * v135];
                              v135 = (v135 + v136++) & v129;
                            }
                            while (v138);
                            *(_OWORD *)&v51[4 * v137] = *(_OWORD *)v131;
                          }
                        }
                      }
                      WTF::fastFree((WTF *)(v8 - 1), v128);
                      if (!BYTE4(v5))
                        goto LABEL_590;
                    }
                    else
                    {
LABEL_50:
                      *v42 = v35;
                      v42[1] = v12;
                      v50 = *((_DWORD *)v8 - 4);
                      v47 = *((_DWORD *)v8 - 3) + 1;
                      *((_DWORD *)v8 - 3) = v47;
                      v48 = (v50 + v47);
                      v49 = *((unsigned int *)v8 - 1);
                      if (v49 <= 0x400)
                        goto LABEL_51;
LABEL_48:
                      if (v49 <= 2 * v48)
                        goto LABEL_159;
LABEL_52:
                      v51 = v8;
                      if (!BYTE4(v5))
                        goto LABEL_590;
                    }
                    v512 = *(_QWORD *)(v35 + 136);
                    v139 = *(_QWORD *)(v7 + 40);
                    v140 = *(_QWORD *)(v139 + 312);
                    if ((unint64_t)(*(_QWORD *)(v139 + 320) - v140) <= 0x47)
                    {
                      v213 = WTF::fastMalloc((WTF *)0x4000);
                      *(_QWORD *)v532 = v213;
                      v215 = *(unsigned int *)(v139 + 340);
                      if ((_DWORD)v215 == *(_DWORD *)(v139 + 336))
                      {
                        v216 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v139 + 328, v215 + 1, (unint64_t)v532);
                        v215 = *(unsigned int *)(v139 + 340);
                        v217 = *(_QWORD *)(v139 + 328);
                        v218 = *(_QWORD *)v216;
                        *(_QWORD *)v216 = 0;
                        *(_QWORD *)(v217 + 8 * v215) = v218;
                        v219 = *(WTF **)v532;
                      }
                      else
                      {
                        v249 = v213;
                        v219 = 0;
                        v250 = *(_QWORD *)(v139 + 328);
                        *(_QWORD *)v532 = 0;
                        *(_QWORD *)(v250 + 8 * v215) = v249;
                      }
                      *(_DWORD *)(v139 + 340) = v215 + 1;
                      WTF::fastFree(v219, v214);
                      v251 = *(unsigned int *)(v139 + 340);
                      if (!(_DWORD)v251)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824B4184);
                      }
                      v140 = *(_QWORD *)(*(_QWORD *)(v139 + 328) + 8 * v251 - 8);
                      *(_QWORD *)(v139 + 312) = v140;
                      *(_QWORD *)(v139 + 320) = v140 + 0x4000;
                    }
                    *(_OWORD *)(v140 + 8) = *(_OWORD *)(v35 + 8);
                    *(_QWORD *)(v140 + 24) = 0;
                    *(_BYTE *)(v140 + 32) = 0;
                    v141 = (_DWORD *)(v140 + 32);
                    *(_BYTE *)(v140 + 56) = 0;
                    *(_QWORD *)v140 = off_1E0FD44C0;
                    *(_QWORD *)(v140 + 64) = v5;
                    *(_QWORD *)(v139 + 312) += 72;
                    v142 = *(unsigned int *)(v139 + 356);
                    if ((_DWORD)v142 == *(_DWORD *)(v139 + 352))
                    {
                      v143 = v35;
                      v144 = v7;
                      v145 = v12;
                      v146 = v5;
                      v147 = v142 + (v142 >> 2);
                      if (v147 >= 0x10)
                        v148 = v147 + 1;
                      else
                        v148 = 16;
                      if (v148 <= v142 + 1)
                        v5 = v142 + 1;
                      else
                        v5 = v148;
                      if (v5 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824B413CLL);
                      }
                      v149 = *(void **)(v139 + 344);
                      v150 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
                      *(_DWORD *)(v139 + 352) = v5;
                      *(_QWORD *)(v139 + 344) = v150;
                      memcpy(v150, v149, 8 * v142);
                      LODWORD(v5) = v146;
                      v12 = v145;
                      v7 = v144;
                      v35 = v143;
                      if (v149)
                      {
                        if (*(void **)(v139 + 344) == v149)
                        {
                          *(_QWORD *)(v139 + 344) = 0;
                          *(_DWORD *)(v139 + 352) = 0;
                        }
                        WTF::fastFree((WTF *)v149, v151);
                      }
                      v142 = *(unsigned int *)(v139 + 356);
                      v152 = (_QWORD *)(*(_QWORD *)(v139 + 344) + 8 * v142);
                      v153 = *(unsigned __int8 *)(v140 + 56);
                      v141 = (_DWORD *)(v140 + 32);
                    }
                    else
                    {
                      v153 = 0;
                      v152 = (_QWORD *)(*(_QWORD *)(v139 + 344) + 8 * v142);
                    }
                    *v152 = v140;
                    *(_DWORD *)(v139 + 356) = v142 + 1;
                    v154 = *(_QWORD *)(v7 + 40);
                    *(_QWORD *)(v140 + 24) = *(_QWORD *)(v154 + 128);
                    if (v153)
                    {
                      v155 = *(unsigned int *)(v140 + 48);
                      if ((_DWORD)v155 != -1)
                      {
                        if ((_DWORD)v155 == 4)
                        {
                          *v141 = v5;
                          goto LABEL_190;
                        }
                        ((void (*)(_BYTE *, _DWORD *))off_1E0FD3E30[v155])(v532, v141);
                        v154 = *(_QWORD *)(v7 + 40);
                      }
                      *(_DWORD *)(v140 + 32) = v5;
                      *(_DWORD *)(v140 + 48) = 4;
                    }
                    else
                    {
                      *(_DWORD *)(v140 + 32) = v5;
                      *(_DWORD *)(v140 + 48) = 4;
                      *(_BYTE *)(v140 + 56) = 1;
                    }
LABEL_190:
                    v156 = *(_QWORD *)(v154 + 312);
                    if ((unint64_t)(*(_QWORD *)(v154 + 320) - v156) <= 0x1F)
                    {
                      v220 = WTF::fastMalloc((WTF *)0x4000);
                      *(_QWORD *)v532 = v220;
                      v222 = *(unsigned int *)(v154 + 340);
                      if ((_DWORD)v222 == *(_DWORD *)(v154 + 336))
                      {
                        v223 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v154 + 328, v222 + 1, (unint64_t)v532);
                        v222 = *(unsigned int *)(v154 + 340);
                        v224 = *(_QWORD *)(v154 + 328);
                        v225 = *(_QWORD *)v223;
                        *(_QWORD *)v223 = 0;
                        *(_QWORD *)(v224 + 8 * v222) = v225;
                        v226 = *(WTF **)v532;
                      }
                      else
                      {
                        v252 = v220;
                        v226 = 0;
                        v253 = *(_QWORD *)(v154 + 328);
                        *(_QWORD *)v532 = 0;
                        *(_QWORD *)(v253 + 8 * v222) = v252;
                      }
                      *(_DWORD *)(v154 + 340) = v222 + 1;
                      WTF::fastFree(v226, v221);
                      v254 = *(unsigned int *)(v154 + 340);
                      if (!(_DWORD)v254)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824B418CLL);
                      }
                      v156 = *(_QWORD *)(*(_QWORD *)(v154 + 328) + 8 * v254 - 8);
                      *(_QWORD *)(v154 + 312) = v156;
                      *(_QWORD *)(v154 + 320) = v156 + 0x4000;
                    }
                    *(_OWORD *)(v156 + 8) = *(_OWORD *)(v35 + 8);
                    *(_QWORD *)v156 = &off_1E0FD4588;
                    *(_QWORD *)(v156 + 24) = v140;
                    *(_QWORD *)(v154 + 312) += 32;
                    v157 = *(unsigned int *)(v154 + 356);
                    if ((_DWORD)v157 == *(_DWORD *)(v154 + 352))
                    {
                      v158 = v157 + (v157 >> 2);
                      if (v158 >= 0x10)
                        v159 = v158 + 1;
                      else
                        v159 = 16;
                      if (v159 <= v157 + 1)
                        v160 = v157 + 1;
                      else
                        v160 = v159;
                      if (v160 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1824B4144);
                      }
                      v161 = *(void **)(v154 + 344);
                      v162 = (void *)WTF::fastMalloc((WTF *)(8 * v160));
                      *(_DWORD *)(v154 + 352) = v160;
                      *(_QWORD *)(v154 + 344) = v162;
                      memcpy(v162, v161, 8 * v157);
                      if (v161)
                      {
                        if (*(void **)(v154 + 344) == v161)
                        {
                          *(_QWORD *)(v154 + 344) = 0;
                          *(_DWORD *)(v154 + 352) = 0;
                        }
                        WTF::fastFree((WTF *)v161, v163);
                      }
                      v164 = *(unsigned int *)(v154 + 356);
                      *(_QWORD *)(*(_QWORD *)(v154 + 344) + 8 * v164) = v156;
                      *(_DWORD *)(v154 + 356) = v164 + 1;
                      v165 = *(_QWORD *)(v7 + 40);
                      v166 = *(_DWORD **)(v35 + 48);
                      if (!v166)
                      {
LABEL_207:
                        v167 = (_QWORD *)WTF::fastMalloc((WTF *)8);
                        *v167 = v156;
                        v168 = *(_QWORD *)(v165 + 312);
                        if ((unint64_t)(*(_QWORD *)(v165 + 320) - v168) <= 0x9F)
                        {
                          v227 = WTF::fastMalloc((WTF *)0x4000);
                          *(_QWORD *)v532 = v227;
                          v229 = *(unsigned int *)(v165 + 340);
                          if ((_DWORD)v229 == *(_DWORD *)(v165 + 336))
                          {
                            v230 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v165 + 328, v229 + 1, (unint64_t)v532);
                            v229 = *(unsigned int *)(v165 + 340);
                            v231 = *(_QWORD *)(v165 + 328);
                            v232 = *(_QWORD *)v230;
                            *(_QWORD *)v230 = 0;
                            *(_QWORD *)(v231 + 8 * v229) = v232;
                            v233 = *(WTF **)v532;
                          }
                          else
                          {
                            v255 = v227;
                            v233 = 0;
                            v256 = *(_QWORD *)(v165 + 328);
                            *(_QWORD *)v532 = 0;
                            *(_QWORD *)(v256 + 8 * v229) = v255;
                          }
                          *(_DWORD *)(v165 + 340) = v229 + 1;
                          WTF::fastFree(v233, v228);
                          v257 = *(unsigned int *)(v165 + 340);
                          if (!(_DWORD)v257)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1824B4194);
                          }
                          v168 = *(_QWORD *)(*(_QWORD *)(v165 + 328) + 8 * v257 - 8);
                          *(_QWORD *)(v165 + 312) = v168;
                          *(_QWORD *)(v165 + 320) = v168 + 0x4000;
                        }
                        *(_OWORD *)(v168 + 8) = *(_OWORD *)(v35 + 8);
                        *(_QWORD *)v168 = &off_1E0FD3850;
                        *(_QWORD *)(v168 + 24) = &off_1E0FD2F10;
                        *(_QWORD *)(v168 + 32) = 0;
                        *(_QWORD *)(v168 + 40) = 0;
                        *(_QWORD *)(v168 + 48) = v166;
                        *(_QWORD *)(v168 + 64) = 0;
                        *(_QWORD *)(v168 + 72) = 0;
                        *(_QWORD *)(v168 + 56) = &off_1E0FD2F10;
                        if (v166)
                          *v166 += 2;
                        *(_QWORD *)(v168 + 80) = v166;
                        *(_QWORD *)(v168 + 88) = v167;
                        *(_QWORD *)(v168 + 96) = 0x100000001;
                        *(_BYTE *)(v168 + 124) = 0;
                        *(_BYTE *)(v168 + 128) = 0;
                        *(_BYTE *)(v168 + 132) = 0;
                        *(_BYTE *)(v168 + 136) = 0;
                        *(_WORD *)(v168 + 140) = 0;
                        *(_BYTE *)(v168 + 144) = 0;
                        *(_BYTE *)(v168 + 148) = 0;
                        *(_BYTE *)(v168 + 152) = 0;
                        *(_BYTE *)(v168 + 154) = 0;
                        *(_QWORD *)(v168 + 104) = v512;
                        *(_QWORD *)(v168 + 112) = 0;
                        *(_BYTE *)(v168 + 120) = 0;
                        *(_QWORD *)(v165 + 312) += 160;
                        v5 = *(unsigned int *)(v165 + 356);
                        if ((_DWORD)v5 == *(_DWORD *)(v165 + 352))
                        {
                          v169 = v5 + (v5 >> 2);
                          if (v169 >= 0x10)
                            v170 = v169 + 1;
                          else
                            v170 = 16;
                          if (v170 <= v5 + 1)
                            v171 = v5 + 1;
                          else
                            v171 = v170;
                          if (v171 >> 29)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1824B414CLL);
                          }
                          v172 = *(void **)(v165 + 344);
                          v173 = (void *)WTF::fastMalloc((WTF *)(8 * v171));
                          *(_DWORD *)(v165 + 352) = v171;
                          *(_QWORD *)(v165 + 344) = v173;
                          memcpy(v173, v172, 8 * v5);
                          if (v172)
                          {
                            if (*(void **)(v165 + 344) == v172)
                            {
                              *(_QWORD *)(v165 + 344) = 0;
                              *(_DWORD *)(v165 + 352) = 0;
                            }
                            WTF::fastFree((WTF *)v172, a2);
                          }
                          v5 = *(unsigned int *)(v165 + 356);
                          v174 = (_QWORD *)(*(_QWORD *)(v165 + 344) + 8 * v5);
                        }
                        else
                        {
                          v174 = (_QWORD *)(*(_QWORD *)(v165 + 344) + 8 * v5);
                        }
                        *v174 = v168;
                        *(_DWORD *)(v165 + 356) = v5 + 1;
                        *(_DWORD *)v532 = *v12;
                        *(_QWORD *)&v532[8] = v168;
                        v175 = HIDWORD(v523);
                        if (HIDWORD(v523) == (_DWORD)v523)
                        {
                          v176 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v522, HIDWORD(v523) + 1, (unint64_t)v532);
                          v177 = HIDWORD(v523);
                          v10 = v522;
                          *((_OWORD *)v522 + HIDWORD(v523)) = *v176;
                          LODWORD(v122) = v517;
                          v11 = v177 + 1;
                          HIDWORD(v523) = v177 + 1;
                          if ((v517 & 0xFF00000000) == 0)
                            goto LABEL_8;
LABEL_228:
                          *(_DWORD *)v532 = v122;
                          *(_QWORD *)&v532[8] = v35;
                          v14 = HIDWORD(v521);
                          if (HIDWORD(v521) == (_DWORD)v521)
                          {
                            v13 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v520, HIDWORD(v521) + 1, (unint64_t)v532);
                            v14 = HIDWORD(v521);
                            *((_OWORD *)v520 + HIDWORD(v521)) = *v13;
                          }
                          else
                          {
                            *((_OWORD *)v520 + HIDWORD(v521)) = *(_OWORD *)v532;
                          }
                          HIDWORD(v521) = v14 + 1;
                          goto LABEL_8;
                        }
                        v10 = v522;
                        *((_OWORD *)v522 + HIDWORD(v523)) = *(_OWORD *)v532;
                        LODWORD(v122) = v517;
                        v11 = v175 + 1;
                        HIDWORD(v523) = v175 + 1;
                        if ((v517 & 0xFF00000000) != 0)
                          goto LABEL_228;
LABEL_8:
                        v8 = v51;
                        goto LABEL_9;
                      }
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v154 + 344) + 8 * v157) = v156;
                      *(_DWORD *)(v154 + 356) = v157 + 1;
                      v165 = *(_QWORD *)(v7 + 40);
                      v166 = *(_DWORD **)(v35 + 48);
                      if (!v166)
                        goto LABEL_207;
                    }
                    *v166 += 2;
                    goto LABEL_207;
                  }
LABEL_54:
                  v52 = *(_QWORD *)(v7 + 40);
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v53 = *(_QWORD *)v532;
                  v54 = *(_QWORD *)(v52 + 312);
                  if ((unint64_t)(*(_QWORD *)(v52 + 320) - v54) <= 0x5F)
                  {
                    v178 = WTF::fastMalloc((WTF *)0x4000);
                    *(_QWORD *)v532 = v178;
                    v180 = *(unsigned int *)(v52 + 340);
                    if ((_DWORD)v180 == *(_DWORD *)(v52 + 336))
                    {
                      v181 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v52 + 328, v180 + 1, (unint64_t)v532);
                      v180 = *(unsigned int *)(v52 + 340);
                      v182 = *(_QWORD *)(v52 + 328);
                      v183 = *(_QWORD *)v181;
                      *(_QWORD *)v181 = 0;
                      *(_QWORD *)(v182 + 8 * v180) = v183;
                      v184 = *(WTF **)v532;
                    }
                    else
                    {
                      v234 = v178;
                      v184 = 0;
                      v235 = *(_QWORD *)(v52 + 328);
                      *(_QWORD *)v532 = 0;
                      *(_QWORD *)(v235 + 8 * v180) = v234;
                    }
                    *(_DWORD *)(v52 + 340) = v180 + 1;
                    WTF::fastFree(v184, v179);
                    v236 = *(unsigned int *)(v52 + 340);
                    if (!(_DWORD)v236)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B419CLL);
                    }
                    v54 = *(_QWORD *)(*(_QWORD *)(v52 + 328) + 8 * v236 - 8);
                    *(_QWORD *)(v52 + 312) = v54;
                    *(_QWORD *)(v52 + 320) = v54 + 0x4000;
                  }
                  *(_BYTE *)(v54 + 56) = 0;
                  *(_QWORD *)(v54 + 16) = 0;
                  *(_QWORD *)(v54 + 24) = 0;
                  *(_BYTE *)(v54 + 32) = 0;
                  *(_QWORD *)v54 = off_1E0FD2E98;
                  *(_QWORD *)(v54 + 8) = 0;
                  *(_QWORD *)(v54 + 64) = &off_1E0FD2F10;
                  *(_QWORD *)(v54 + 72) = 0;
                  *(_QWORD *)(v54 + 80) = 0;
                  *(_QWORD *)(v54 + 88) = v53;
                  *(_QWORD *)(v52 + 312) += 96;
                  v55 = *(unsigned int *)(v52 + 356);
                  if ((_DWORD)v55 == *(_DWORD *)(v52 + 352))
                  {
                    v56 = v7;
                    v57 = v12;
                    v58 = v5;
                    v59 = v55 + (v55 >> 2);
                    if (v59 >= 0x10)
                      v60 = v59 + 1;
                    else
                      v60 = 16;
                    if (v60 <= v55 + 1)
                      v5 = v55 + 1;
                    else
                      v5 = v60;
                    if (v5 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B4114);
                    }
                    v61 = *(void **)(v52 + 344);
                    v62 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
                    *(_DWORD *)(v52 + 352) = v5;
                    *(_QWORD *)(v52 + 344) = v62;
                    memcpy(v62, v61, 8 * v55);
                    LODWORD(v5) = v58;
                    v12 = v57;
                    v7 = v56;
                    if (v61)
                    {
                      if (*(void **)(v52 + 344) == v61)
                      {
                        *(_QWORD *)(v52 + 344) = 0;
                        *(_DWORD *)(v52 + 352) = 0;
                      }
                      WTF::fastFree((WTF *)v61, v63);
                    }
                    v55 = *(unsigned int *)(v52 + 356);
                    v64 = (_QWORD *)(*(_QWORD *)(v52 + 344) + 8 * v55);
                  }
                  else
                  {
                    v64 = (_QWORD *)(*(_QWORD *)(v52 + 344) + 8 * v55);
                  }
                  *v64 = v54;
                  *(_DWORD *)(v52 + 356) = v55 + 1;
                  v65 = *(_QWORD *)(v7 + 40);
                  *(_QWORD *)(v54 + 24) = *(_QWORD *)(v65 + 168);
                  v66 = *(_QWORD *)(v65 + 312);
                  if ((unint64_t)(*(_QWORD *)(v65 + 320) - v66) <= 0x47)
                  {
                    v185 = WTF::fastMalloc((WTF *)0x4000);
                    *(_QWORD *)v532 = v185;
                    v187 = *(unsigned int *)(v65 + 340);
                    if ((_DWORD)v187 == *(_DWORD *)(v65 + 336))
                    {
                      v188 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v65 + 328, v187 + 1, (unint64_t)v532);
                      v187 = *(unsigned int *)(v65 + 340);
                      v189 = *(_QWORD *)(v65 + 328);
                      v190 = *(_QWORD *)v188;
                      *(_QWORD *)v188 = 0;
                      *(_QWORD *)(v189 + 8 * v187) = v190;
                      v191 = *(WTF **)v532;
                    }
                    else
                    {
                      v237 = v185;
                      v191 = 0;
                      v238 = *(_QWORD *)(v65 + 328);
                      *(_QWORD *)v532 = 0;
                      *(_QWORD *)(v238 + 8 * v187) = v237;
                    }
                    *(_DWORD *)(v65 + 340) = v187 + 1;
                    WTF::fastFree(v191, v186);
                    v239 = *(unsigned int *)(v65 + 340);
                    if (!(_DWORD)v239)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B41A4);
                    }
                    v66 = *(_QWORD *)(*(_QWORD *)(v65 + 328) + 8 * v239 - 8);
                    *(_QWORD *)(v65 + 312) = v66;
                    *(_QWORD *)(v65 + 320) = v66 + 0x4000;
                  }
                  *(_BYTE *)(v66 + 56) = 0;
                  *(_QWORD *)(v66 + 16) = 0;
                  *(_QWORD *)(v66 + 24) = 0;
                  *(_BYTE *)(v66 + 32) = 0;
                  *(_QWORD *)v66 = off_1E0FD4308;
                  *(_QWORD *)(v66 + 8) = 0;
                  *(_QWORD *)(v66 + 64) = v54;
                  *(_QWORD *)(v65 + 312) += 72;
                  v67 = *(unsigned int *)(v65 + 356);
                  if ((_DWORD)v67 == *(_DWORD *)(v65 + 352))
                  {
                    v68 = v67 + (v67 >> 2);
                    if (v68 >= 0x10)
                      v69 = v68 + 1;
                    else
                      v69 = 16;
                    if (v69 <= v67 + 1)
                      v70 = v67 + 1;
                    else
                      v70 = v69;
                    if (v70 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B411CLL);
                    }
                    v71 = *(void **)(v65 + 344);
                    v72 = (void *)WTF::fastMalloc((WTF *)(8 * v70));
                    *(_DWORD *)(v65 + 352) = v70;
                    *(_QWORD *)(v65 + 344) = v72;
                    memcpy(v72, v71, 8 * v67);
                    if (v71)
                    {
                      if (*(void **)(v65 + 344) == v71)
                      {
                        *(_QWORD *)(v65 + 344) = 0;
                        *(_DWORD *)(v65 + 352) = 0;
                      }
                      WTF::fastFree((WTF *)v71, v73);
                    }
                    v67 = *(unsigned int *)(v65 + 356);
                    v74 = (_QWORD *)(*(_QWORD *)(v65 + 344) + 8 * v67);
                  }
                  else
                  {
                    v74 = (_QWORD *)(*(_QWORD *)(v65 + 344) + 8 * v67);
                  }
                  *v74 = v66;
                  *(_DWORD *)(v65 + 356) = v67 + 1;
                  v75 = *(_QWORD *)(v7 + 40);
                  v76 = *(_QWORD *)(v75 + 168);
                  v529 = 3;
                  v528 = v76;
                  v527 = 0;
                  *(_QWORD *)v532 = 774;
                  *(_QWORD *)&v532[8] = v76;
                  v77 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v75 + 112), v532);
                  v78 = *(unsigned __int8 **)(v75 + 112);
                  if (v78)
                    v78 += 24 * *((unsigned int *)v78 - 1);
                  if (v78 == v77 || (v79 = *((_QWORD *)v77 + 2)) == 0)
                  {
                    v79 = WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(v75 + 96, &v529, (char *)&v527 + 1, &v528, (char *)&v527);
                    v531 = v79;
                    v530[0] = 774;
                    v530[1] = v76;
                    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v75 + 112), (unsigned __int8 *)v530, &v531, (uint64_t)v532);
                  }
                  *(_QWORD *)(v66 + 24) = v79;
                  if (!v18)
                  {
LABEL_590:
                    __break(1u);
LABEL_591:
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    *(_QWORD *)(a1 + 8) = 0;
                    *(_QWORD *)(a1 + 16) = 0;
                    *(_DWORD *)(a1 + 24) = 1;
                    goto LABEL_592;
                  }
                  v80 = 0;
                  v81 = *v12;
                  v82 = *v12;
                  do
                  {
                    ++v80;
                    v83 = v82 > 9;
                    v82 /= 0xAu;
                  }
                  while (v83);
                  if (v80 < 0
                    || (v84 = (v80 + 28), __OFADD__(v80, 28))
                    || (WTF::tryFastCompactMalloc((WTF *)(v84 + 20)), (v85 = *(_QWORD *)v532) == 0))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1824B40E8);
                  }
                  v86 = 0;
                  **(_DWORD **)v532 = 2;
                  *(_DWORD *)(v85 + 4) = v84;
                  *(_QWORD *)(v85 + 8) = v85 + 20;
                  *(_DWORD *)(v85 + 16) = 4;
                  qmemcpy((void *)(v85 + 20), "__ArgumentBufferPlaceholder_", 28);
                  do
                  {
                    v532[v86-- + 12] = (v81 % 0xA) | 0x30;
                    v83 = v81 > 9;
                    v81 /= 0xAu;
                  }
                  while (v83);
                  if (v86 + 14 <= 13)
                    memcpy((void *)(v85 + 48), &v532[v86 + 13], -v86);
                  v87 = *(_QWORD *)(v7 + 40);
                  v88 = *(_QWORD *)(v87 + 312);
                  if ((unint64_t)(*(_QWORD *)(v87 + 320) - v88) < 0x48)
                  {
                    v192 = WTF::fastMalloc((WTF *)0x4000);
                    *(_QWORD *)v532 = v192;
                    v194 = *(unsigned int *)(v87 + 340);
                    if ((_DWORD)v194 == *(_DWORD *)(v87 + 336))
                    {
                      v195 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v87 + 328, v194 + 1, (unint64_t)v532);
                      v194 = *(unsigned int *)(v87 + 340);
                      v196 = *(_QWORD *)(v87 + 328);
                      v197 = *(_QWORD *)v195;
                      *(_QWORD *)v195 = 0;
                      *(_QWORD *)(v196 + 8 * v194) = v197;
                      v198 = *(WTF **)v532;
                    }
                    else
                    {
                      v240 = v192;
                      v198 = 0;
                      v241 = *(_QWORD *)(v87 + 328);
                      *(_QWORD *)v532 = 0;
                      *(_QWORD *)(v241 + 8 * v194) = v240;
                    }
                    *(_DWORD *)(v87 + 340) = v194 + 1;
                    WTF::fastFree(v198, v193);
                    v242 = *(unsigned int *)(v87 + 340);
                    if (!(_DWORD)v242)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B416CLL);
                    }
                    v88 = *(_QWORD *)(*(_QWORD *)(v87 + 328) + 8 * v242 - 8);
                    *(_QWORD *)(v87 + 312) = v88;
                    *(_QWORD *)(v87 + 320) = v88 + 0x4000;
                  }
                  v511 = v12;
                  v89 = v5;
                  *(_BYTE *)(v88 + 32) = 0;
                  *(_BYTE *)(v88 + 56) = 0;
                  *(_QWORD *)(v88 + 16) = 0;
                  *(_QWORD *)(v88 + 24) = 0;
                  *(_QWORD *)v88 = off_1E0FD44C0;
                  *(_QWORD *)(v88 + 8) = 0;
                  *(_QWORD *)(v88 + 64) = v5;
                  *(_QWORD *)(v87 + 312) += 72;
                  v90 = *(unsigned int *)(v87 + 356);
                  if ((_DWORD)v90 == *(_DWORD *)(v87 + 352))
                  {
                    v91 = v90 + (v90 >> 2);
                    if (v91 >= 0x10)
                      v92 = v91 + 1;
                    else
                      v92 = 16;
                    if (v92 <= v90 + 1)
                      v93 = v90 + 1;
                    else
                      v93 = v92;
                    if (v93 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B4124);
                    }
                    v94 = *(void **)(v87 + 344);
                    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
                    *(_DWORD *)(v87 + 352) = v93;
                    *(_QWORD *)(v87 + 344) = v95;
                    memcpy(v95, v94, 8 * v90);
                    v7 = (uint64_t)a2;
                    if (v94)
                    {
                      if (*(void **)(v87 + 344) == v94)
                      {
                        *(_QWORD *)(v87 + 344) = 0;
                        *(_DWORD *)(v87 + 352) = 0;
                      }
                      WTF::fastFree((WTF *)v94, v96);
                    }
                    v90 = *(unsigned int *)(v87 + 356);
                    v97 = (_QWORD *)(*(_QWORD *)(v87 + 344) + 8 * v90);
                    v98 = *(unsigned __int8 *)(v88 + 56);
                  }
                  else
                  {
                    v98 = 0;
                    v97 = (_QWORD *)(*(_QWORD *)(v87 + 344) + 8 * v90);
                  }
                  *v97 = v88;
                  *(_DWORD *)(v87 + 356) = v90 + 1;
                  v99 = *(_QWORD *)(v7 + 40);
                  *(_QWORD *)(v88 + 24) = *(_QWORD *)(v99 + 128);
                  if (v98)
                  {
                    v100 = *(unsigned int *)(v88 + 48);
                    if ((_DWORD)v100 != -1)
                    {
                      if ((_DWORD)v100 == 4)
                      {
                        *(_DWORD *)(v88 + 32) = v89;
                        goto LABEL_121;
                      }
                      ((void (*)(_BYTE *, uint64_t))off_1E0FD3E30[v100])(v532, v88 + 32);
                      v99 = *(_QWORD *)(v7 + 40);
                    }
                    *(_DWORD *)(v88 + 32) = v89;
                    *(_DWORD *)(v88 + 48) = 4;
                  }
                  else
                  {
                    *(_DWORD *)(v88 + 32) = v89;
                    *(_DWORD *)(v88 + 48) = 4;
                    *(_BYTE *)(v88 + 56) = 1;
                  }
LABEL_121:
                  v101 = *(_QWORD **)(v99 + 312);
                  v12 = v511;
                  if (*(_QWORD *)(v99 + 320) - (_QWORD)v101 <= 0x1FuLL)
                  {
                    v199 = WTF::fastMalloc((WTF *)0x4000);
                    *(_QWORD *)v532 = v199;
                    v201 = *(unsigned int *)(v99 + 340);
                    if ((_DWORD)v201 == *(_DWORD *)(v99 + 336))
                    {
                      v202 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v99 + 328, v201 + 1, (unint64_t)v532);
                      v201 = *(unsigned int *)(v99 + 340);
                      v203 = *(_QWORD *)(v99 + 328);
                      v204 = *(_QWORD *)v202;
                      *(_QWORD *)v202 = 0;
                      *(_QWORD *)(v203 + 8 * v201) = v204;
                      v205 = *(WTF **)v532;
                    }
                    else
                    {
                      v243 = v199;
                      v205 = 0;
                      v244 = *(_QWORD *)(v99 + 328);
                      *(_QWORD *)v532 = 0;
                      *(_QWORD *)(v244 + 8 * v201) = v243;
                    }
                    *(_DWORD *)(v99 + 340) = v201 + 1;
                    WTF::fastFree(v205, v200);
                    v245 = *(unsigned int *)(v99 + 340);
                    if (!(_DWORD)v245)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B4174);
                    }
                    v101 = *(_QWORD **)(*(_QWORD *)(v99 + 328) + 8 * v245 - 8);
                    *(_QWORD *)(v99 + 312) = v101;
                    *(_QWORD *)(v99 + 320) = v101 + 2048;
                  }
                  *v101 = &off_1E0FD4588;
                  v101[1] = 0;
                  v101[2] = 0;
                  v101[3] = v88;
                  *(_QWORD *)(v99 + 312) += 32;
                  v102 = *(unsigned int *)(v99 + 356);
                  if ((_DWORD)v102 == *(_DWORD *)(v99 + 352))
                  {
                    v103 = v102 + (v102 >> 2);
                    if (v103 >= 0x10)
                      v104 = v103 + 1;
                    else
                      v104 = 16;
                    if (v104 <= v102 + 1)
                      v105 = v102 + 1;
                    else
                      v105 = v104;
                    if (v105 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B412CLL);
                    }
                    v106 = *(void **)(v99 + 344);
                    v107 = (void *)WTF::fastMalloc((WTF *)(8 * v105));
                    *(_DWORD *)(v99 + 352) = v105;
                    *(_QWORD *)(v99 + 344) = v107;
                    memcpy(v107, v106, 8 * v102);
                    v7 = (uint64_t)a2;
                    if (v106)
                    {
                      if (*(void **)(v99 + 344) == v106)
                      {
                        *(_QWORD *)(v99 + 344) = 0;
                        *(_DWORD *)(v99 + 352) = 0;
                      }
                      WTF::fastFree((WTF *)v106, v108);
                    }
                    v102 = *(unsigned int *)(v99 + 356);
                    v109 = (_QWORD *)(*(_QWORD *)(v99 + 344) + 8 * v102);
                  }
                  else
                  {
                    v109 = (_QWORD *)(*(_QWORD *)(v99 + 344) + 8 * v102);
                  }
                  *v109 = v101;
                  *(_DWORD *)(v99 + 356) = v102 + 1;
                  v110 = *(_QWORD *)(v7 + 40);
                  *(_DWORD *)v85 += 2;
                  v111 = (_QWORD *)WTF::fastMalloc((WTF *)8);
                  *v111 = v101;
                  v112 = *(_QWORD *)(v110 + 312);
                  if ((unint64_t)(*(_QWORD *)(v110 + 320) - v112) <= 0x9F)
                  {
                    v206 = WTF::fastMalloc((WTF *)0x4000);
                    *(_QWORD *)v532 = v206;
                    v208 = *(unsigned int *)(v110 + 340);
                    if ((_DWORD)v208 == *(_DWORD *)(v110 + 336))
                    {
                      v209 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v110 + 328, v208 + 1, (unint64_t)v532);
                      v208 = *(unsigned int *)(v110 + 340);
                      v210 = *(_QWORD *)(v110 + 328);
                      v211 = *(_QWORD *)v209;
                      *(_QWORD *)v209 = 0;
                      *(_QWORD *)(v210 + 8 * v208) = v211;
                      v212 = *(WTF **)v532;
                    }
                    else
                    {
                      v246 = v206;
                      v212 = 0;
                      v247 = *(_QWORD *)(v110 + 328);
                      *(_QWORD *)v532 = 0;
                      *(_QWORD *)(v247 + 8 * v208) = v246;
                    }
                    *(_DWORD *)(v110 + 340) = v208 + 1;
                    WTF::fastFree(v212, v207);
                    v248 = *(unsigned int *)(v110 + 340);
                    if (!(_DWORD)v248)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B417CLL);
                    }
                    v112 = *(_QWORD *)(*(_QWORD *)(v110 + 328) + 8 * v248 - 8);
                    *(_QWORD *)(v110 + 312) = v112;
                    *(_QWORD *)(v110 + 320) = v112 + 0x4000;
                  }
                  *(_QWORD *)v112 = &off_1E0FD3850;
                  *(_QWORD *)(v112 + 8) = 0;
                  *(_QWORD *)(v112 + 32) = 0;
                  *(_QWORD *)(v112 + 40) = 0;
                  *(_QWORD *)(v112 + 16) = 0;
                  *(_QWORD *)(v112 + 24) = &off_1E0FD2F10;
                  *(_QWORD *)(v112 + 64) = 0;
                  *(_QWORD *)(v112 + 72) = 0;
                  *(_QWORD *)(v112 + 48) = v85;
                  *(_QWORD *)(v112 + 56) = &off_1E0FD2F10;
                  *(_DWORD *)v85 += 2;
                  *(_QWORD *)(v112 + 80) = v85;
                  *(_QWORD *)(v112 + 88) = v111;
                  *(_QWORD *)(v112 + 96) = 0x100000001;
                  *(_BYTE *)(v112 + 124) = 0;
                  *(_BYTE *)(v112 + 128) = 0;
                  *(_BYTE *)(v112 + 132) = 0;
                  *(_BYTE *)(v112 + 136) = 0;
                  *(_WORD *)(v112 + 140) = 0;
                  *(_BYTE *)(v112 + 144) = 0;
                  *(_BYTE *)(v112 + 148) = 0;
                  *(_BYTE *)(v112 + 152) = 0;
                  *(_BYTE *)(v112 + 154) = 0;
                  *(_BYTE *)(v112 + 120) = 0;
                  *(_QWORD *)(v112 + 104) = v66;
                  *(_QWORD *)(v112 + 112) = 0;
                  *(_QWORD *)(v110 + 312) += 160;
                  v5 = *(unsigned int *)(v110 + 356);
                  if ((_DWORD)v5 == *(_DWORD *)(v110 + 352))
                  {
                    v113 = v5 + (v5 >> 2);
                    if (v113 >= 0x10)
                      v114 = v113 + 1;
                    else
                      v114 = 16;
                    if (v114 <= v5 + 1)
                      v115 = v5 + 1;
                    else
                      v115 = v114;
                    if (v115 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824B4134);
                    }
                    v116 = *(void **)(v110 + 344);
                    v117 = (void *)WTF::fastMalloc((WTF *)(8 * v115));
                    *(_DWORD *)(v110 + 352) = v115;
                    *(_QWORD *)(v110 + 344) = v117;
                    memcpy(v117, v116, 8 * v5);
                    v7 = (uint64_t)a2;
                    if (v116)
                    {
                      if (*(void **)(v110 + 344) == v116)
                      {
                        *(_QWORD *)(v110 + 344) = 0;
                        *(_DWORD *)(v110 + 352) = 0;
                      }
                      WTF::fastFree((WTF *)v116, a2);
                    }
                    v5 = *(unsigned int *)(v110 + 356);
                    v118 = (_QWORD *)(*(_QWORD *)(v110 + 344) + 8 * v5);
                  }
                  else
                  {
                    v118 = (_QWORD *)(*(_QWORD *)(v110 + 344) + 8 * v5);
                  }
                  *v118 = v112;
                  *(_DWORD *)(v110 + 356) = v5 + 1;
                  *(_DWORD *)v532 = *v511;
                  *(_QWORD *)&v532[8] = v112;
                  v119 = HIDWORD(v523);
                  if (HIDWORD(v523) == (_DWORD)v523)
                  {
                    v120 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v522, HIDWORD(v523) + 1, (unint64_t)v532);
                    v121 = HIDWORD(v523);
                    v10 = v522;
                    *((_OWORD *)v522 + HIDWORD(v523)) = *v120;
                    v122 = v517;
                    v11 = v121 + 1;
                    HIDWORD(v523) = v121 + 1;
                    v123 = *(_DWORD *)v85 - 2;
                    if (*(_DWORD *)v85 != 2)
                      goto LABEL_153;
                  }
                  else
                  {
                    v10 = v522;
                    *((_OWORD *)v522 + HIDWORD(v523)) = *(_OWORD *)v532;
                    v122 = v517;
                    v11 = v119 + 1;
                    HIDWORD(v523) = v119 + 1;
                    v123 = *(_DWORD *)v85 - 2;
                    if (*(_DWORD *)v85 != 2)
                    {
LABEL_153:
                      *(_DWORD *)v85 = v123;
                      v35 = 0;
                      v51 = v8;
                      if ((v122 & 0xFF00000000) != 0)
                        goto LABEL_228;
                      goto LABEL_8;
                    }
                  }
                  WTF::StringImpl::destroy();
                  LODWORD(v122) = v517;
                  v35 = 0;
                  v51 = v8;
                  if ((v517 & 0xFF00000000) != 0)
                    goto LABEL_228;
                  goto LABEL_8;
              }
              v517 = *v17;
              goto LABEL_25;
          }
          v5 = *v16;
          goto LABEL_18;
        }
LABEL_9:
        v12 += 30;
      }
      while (v12 != v513);
      if (HIDWORD(v521))
      {
        v258 = v520;
        v514 = (WTF *)((char *)v520 + 16 * HIDWORD(v521));
        do
        {
          v261 = *(unsigned int *)v258;
          v262 = *((_QWORD *)v258 + 1);
          if (v262)
          {
            v263 = *(_QWORD *)(v7 + 208);
            if (!v263)
              goto LABEL_630;
            v264 = *(_DWORD *)(v263 - 8);
            v265 = (~(v262 << 32) + v262) ^ ((unint64_t)(~(v262 << 32) + v262) >> 22);
            v266 = 9 * ((v265 + ~(v265 << 13)) ^ ((v265 + ~(v265 << 13)) >> 8));
            v267 = (v266 ^ (v266 >> 15)) + ~((v266 ^ (v266 >> 15)) << 27);
            v268 = v264 & ((v267 >> 31) ^ v267);
            v269 = *(_QWORD *)(v263 + 16 * v268);
            if (v269 != v262)
            {
              v270 = 1;
              while (v269)
              {
                v268 = ((_DWORD)v268 + v270) & v264;
                v269 = *(_QWORD *)(v263 + 16 * v268);
                ++v270;
                if (v269 == v262)
                  goto LABEL_288;
              }
              v268 = *(unsigned int *)(v263 - 4);
            }
LABEL_288:
            if (v268 == *(_DWORD *)(v263 - 4))
              goto LABEL_630;
            if (!v8)
            {
              v274 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x90);
              *v274 = xmmword_18260F910;
              v8 = v274 + 1;
            }
            v275 = v263 + 16 * v268 + 8;
            v276 = *((_DWORD *)v8 - 2);
            v277 = *(_QWORD *)v275;
            v278 = ~(*(_QWORD *)v275 << 32) + *(_QWORD *)v275;
            v279 = (v278 ^ (v278 >> 22)) + ~((v278 ^ (v278 >> 22)) << 13);
            v280 = (9 * (v279 ^ (v279 >> 8))) ^ ((9 * (v279 ^ (v279 >> 8))) >> 15);
            v281 = v276 & (((v280 + ~(v280 << 27)) >> 31) ^ (v280 + ~((_DWORD)v280 << 27)));
            v282 = &v8[v281];
            v283 = *v282;
            v517 = v261;
            if (*v282)
            {
              v284 = 0;
              v285 = 1;
              while (v283 != v277)
              {
                if (v283 == -1)
                  v284 = v282;
                v281 = (v281 + v285) & v276;
                v282 = &v8[v281];
                v283 = *v282;
                ++v285;
                if (!*v282)
                {
                  if (!v284)
                    goto LABEL_301;
                  *v284 = 0;
                  v284[1] = 0;
                  v286 = *((_DWORD *)v8 - 4) - 1;
                  *((_DWORD *)v8 - 4) = v286;
                  *v284 = *(_QWORD *)v275;
                  v284[1] = 0;
                  v287 = *((_DWORD *)v8 - 3) + 1;
                  *((_DWORD *)v8 - 3) = v287;
                  v288 = (v286 + v287);
                  v289 = *((unsigned int *)v8 - 1);
                  if (v289 <= 0x400)
                    goto LABEL_302;
                  goto LABEL_299;
                }
              }
LABEL_303:
              v5 = (unint64_t)v8;
LABEL_332:
              v315 = *(_QWORD *)v275;
              v316 = *(_QWORD *)(*(_QWORD *)v275 + 136);
              v317 = *(_QWORD *)(v7 + 40);
              v318 = *(_QWORD *)(v317 + 312);
              if ((unint64_t)(*(_QWORD *)(v317 + 320) - v318) <= 0x47)
              {
                v388 = WTF::fastMalloc((WTF *)0x4000);
                *(_QWORD *)v532 = v388;
                v390 = *(unsigned int *)(v317 + 340);
                if ((_DWORD)v390 == *(_DWORD *)(v317 + 336))
                {
                  v391 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v317 + 328, v390 + 1, (unint64_t)v532);
                  v390 = *(unsigned int *)(v317 + 340);
                  v392 = *(_QWORD *)(v317 + 328);
                  v393 = *(_QWORD *)v391;
                  *(_QWORD *)v391 = 0;
                  *(_QWORD *)(v392 + 8 * v390) = v393;
                  v394 = *(WTF **)v532;
                }
                else
                {
                  v430 = v388;
                  v394 = 0;
                  v431 = *(_QWORD *)(v317 + 328);
                  *(_QWORD *)v532 = 0;
                  *(_QWORD *)(v431 + 8 * v390) = v430;
                }
                *(_DWORD *)(v317 + 340) = v390 + 1;
                WTF::fastFree(v394, v389);
                v432 = *(unsigned int *)(v317 + 340);
                if (!(_DWORD)v432)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824B41B4);
                }
                v318 = *(_QWORD *)(*(_QWORD *)(v317 + 328) + 8 * v432 - 8);
                *(_QWORD *)(v317 + 312) = v318;
                *(_QWORD *)(v317 + 320) = v318 + 0x4000;
              }
              *(_OWORD *)(v318 + 8) = *(_OWORD *)(v315 + 8);
              *(_QWORD *)(v318 + 24) = 0;
              *(_BYTE *)(v318 + 32) = 0;
              *(_BYTE *)(v318 + 56) = 0;
              *(_QWORD *)v318 = off_1E0FD44C0;
              *(_QWORD *)(v318 + 64) = v517;
              *(_QWORD *)(v317 + 312) += 72;
              v319 = *(unsigned int *)(v317 + 356);
              if ((_DWORD)v319 == *(_DWORD *)(v317 + 352))
              {
                v320 = v319 + (v319 >> 2);
                if (v320 >= 0x10)
                  v321 = v320 + 1;
                else
                  v321 = 16;
                if (v321 <= v319 + 1)
                  v322 = v319 + 1;
                else
                  v322 = v321;
                if (v322 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824B40FCLL);
                }
                v323 = *(void **)(v317 + 344);
                v324 = (void *)WTF::fastMalloc((WTF *)(8 * v322));
                *(_DWORD *)(v317 + 352) = v322;
                *(_QWORD *)(v317 + 344) = v324;
                memcpy(v324, v323, 8 * v319);
                v7 = (uint64_t)a2;
                if (v323)
                {
                  if (*(void **)(v317 + 344) == v323)
                  {
                    *(_QWORD *)(v317 + 344) = 0;
                    *(_DWORD *)(v317 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v323, v325);
                }
                v319 = *(unsigned int *)(v317 + 356);
                v326 = (_QWORD *)(*(_QWORD *)(v317 + 344) + 8 * v319);
                v327 = *(unsigned __int8 *)(v318 + 56);
              }
              else
              {
                v327 = 0;
                v326 = (_QWORD *)(*(_QWORD *)(v317 + 344) + 8 * v319);
              }
              *v326 = v318;
              *(_DWORD *)(v317 + 356) = v319 + 1;
              v328 = *(_QWORD *)(v7 + 40);
              *(_QWORD *)(v318 + 24) = *(_QWORD *)(v328 + 128);
              if (v327)
              {
                v329 = *(unsigned int *)(v318 + 48);
                if ((_DWORD)v329 != -1)
                {
                  if ((_DWORD)v329 == 4)
                  {
                    *(_DWORD *)(v318 + 32) = v517;
                    goto LABEL_354;
                  }
                  ((void (*)(_BYTE *, uint64_t))off_1E0FD3E30[v329])(v532, v318 + 32);
                  v328 = *(_QWORD *)(v7 + 40);
                }
                *(_DWORD *)(v318 + 32) = v517;
                *(_DWORD *)(v318 + 48) = 4;
              }
              else
              {
                *(_DWORD *)(v318 + 32) = v517;
                *(_DWORD *)(v318 + 48) = 4;
                *(_BYTE *)(v318 + 56) = 1;
              }
LABEL_354:
              v330 = *(_QWORD *)(v328 + 312);
              if ((unint64_t)(*(_QWORD *)(v328 + 320) - v330) <= 0x1F)
              {
                v395 = WTF::fastMalloc((WTF *)0x4000);
                *(_QWORD *)v532 = v395;
                v397 = *(unsigned int *)(v328 + 340);
                if ((_DWORD)v397 == *(_DWORD *)(v328 + 336))
                {
                  v398 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v328 + 328, v397 + 1, (unint64_t)v532);
                  v397 = *(unsigned int *)(v328 + 340);
                  v399 = *(_QWORD *)(v328 + 328);
                  v400 = *(_QWORD *)v398;
                  *(_QWORD *)v398 = 0;
                  *(_QWORD *)(v399 + 8 * v397) = v400;
                  v401 = *(WTF **)v532;
                }
                else
                {
                  v433 = v395;
                  v401 = 0;
                  v434 = *(_QWORD *)(v328 + 328);
                  *(_QWORD *)v532 = 0;
                  *(_QWORD *)(v434 + 8 * v397) = v433;
                }
                *(_DWORD *)(v328 + 340) = v397 + 1;
                WTF::fastFree(v401, v396);
                v435 = *(unsigned int *)(v328 + 340);
                if (!(_DWORD)v435)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824B41BCLL);
                }
                v330 = *(_QWORD *)(*(_QWORD *)(v328 + 328) + 8 * v435 - 8);
                *(_QWORD *)(v328 + 312) = v330;
                *(_QWORD *)(v328 + 320) = v330 + 0x4000;
              }
              *(_OWORD *)(v330 + 8) = *(_OWORD *)(v315 + 8);
              *(_QWORD *)v330 = &off_1E0FD4588;
              *(_QWORD *)(v330 + 24) = v318;
              *(_QWORD *)(v328 + 312) += 32;
              v331 = *(unsigned int *)(v328 + 356);
              if ((_DWORD)v331 == *(_DWORD *)(v328 + 352))
              {
                v332 = v331 + (v331 >> 2);
                if (v332 >= 0x10)
                  v333 = v332 + 1;
                else
                  v333 = 16;
                if (v333 <= v331 + 1)
                  v334 = v331 + 1;
                else
                  v334 = v333;
                if (v334 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824B4104);
                }
                v335 = *(void **)(v328 + 344);
                v336 = (void *)WTF::fastMalloc((WTF *)(8 * v334));
                *(_DWORD *)(v328 + 352) = v334;
                *(_QWORD *)(v328 + 344) = v336;
                memcpy(v336, v335, 8 * v331);
                v7 = (uint64_t)a2;
                if (v335)
                {
                  if (*(void **)(v328 + 344) == v335)
                  {
                    *(_QWORD *)(v328 + 344) = 0;
                    *(_DWORD *)(v328 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v335, v337);
                }
                v338 = *(unsigned int *)(v328 + 356);
                *(_QWORD *)(*(_QWORD *)(v328 + 344) + 8 * v338) = v330;
                *(_DWORD *)(v328 + 356) = v338 + 1;
                v339 = a2[5];
                v340 = *(_DWORD **)(v315 + 48);
                if (!v340)
                  goto LABEL_371;
LABEL_370:
                *v340 += 2;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v328 + 344) + 8 * v331) = v330;
                *(_DWORD *)(v328 + 356) = v331 + 1;
                v339 = *(_QWORD *)(v7 + 40);
                v340 = *(_DWORD **)(v315 + 48);
                if (v340)
                  goto LABEL_370;
              }
LABEL_371:
              v341 = (_QWORD *)WTF::fastMalloc((WTF *)8);
              *v341 = v330;
              v342 = *(_QWORD *)(v339 + 312);
              if ((unint64_t)(*(_QWORD *)(v339 + 320) - v342) <= 0x9F)
              {
                v402 = WTF::fastMalloc((WTF *)0x4000);
                *(_QWORD *)v532 = v402;
                v404 = *(unsigned int *)(v339 + 340);
                if ((_DWORD)v404 == *(_DWORD *)(v339 + 336))
                {
                  v405 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v339 + 328, v404 + 1, (unint64_t)v532);
                  v404 = *(unsigned int *)(v339 + 340);
                  v406 = *(_QWORD *)(v339 + 328);
                  v407 = *(_QWORD *)v405;
                  *(_QWORD *)v405 = 0;
                  *(_QWORD *)(v406 + 8 * v404) = v407;
                  v408 = *(WTF **)v532;
                }
                else
                {
                  v436 = v402;
                  v408 = 0;
                  v437 = *(_QWORD *)(v339 + 328);
                  *(_QWORD *)v532 = 0;
                  *(_QWORD *)(v437 + 8 * v404) = v436;
                }
                *(_DWORD *)(v339 + 340) = v404 + 1;
                WTF::fastFree(v408, v403);
                v438 = *(unsigned int *)(v339 + 340);
                if (!(_DWORD)v438)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824B41C4);
                }
                v342 = *(_QWORD *)(*(_QWORD *)(v339 + 328) + 8 * v438 - 8);
                *(_QWORD *)(v339 + 312) = v342;
                *(_QWORD *)(v339 + 320) = v342 + 0x4000;
              }
              *(_OWORD *)(v342 + 8) = *(_OWORD *)(v315 + 8);
              *(_QWORD *)v342 = &off_1E0FD3850;
              *(_QWORD *)(v342 + 24) = &off_1E0FD2F10;
              *(_QWORD *)(v342 + 32) = 0;
              *(_QWORD *)(v342 + 40) = 0;
              *(_QWORD *)(v342 + 48) = v340;
              *(_QWORD *)(v342 + 64) = 0;
              *(_QWORD *)(v342 + 72) = 0;
              *(_QWORD *)(v342 + 56) = &off_1E0FD2F10;
              if (v340)
                *v340 += 2;
              *(_QWORD *)(v342 + 80) = v340;
              *(_QWORD *)(v342 + 88) = v341;
              *(_QWORD *)(v342 + 96) = 0x100000001;
              *(_BYTE *)(v342 + 124) = 0;
              *(_BYTE *)(v342 + 128) = 0;
              *(_BYTE *)(v342 + 132) = 0;
              *(_BYTE *)(v342 + 136) = 0;
              *(_WORD *)(v342 + 140) = 0;
              *(_BYTE *)(v342 + 144) = 0;
              *(_BYTE *)(v342 + 148) = 0;
              *(_BYTE *)(v342 + 152) = 0;
              *(_BYTE *)(v342 + 154) = 0;
              *(_QWORD *)(v342 + 104) = v316;
              *(_QWORD *)(v342 + 112) = 0;
              *(_BYTE *)(v342 + 120) = 0;
              *(_QWORD *)(v339 + 312) += 160;
              v343 = *(unsigned int *)(v339 + 356);
              if ((_DWORD)v343 == *(_DWORD *)(v339 + 352))
              {
                v344 = v343 + (v343 >> 2);
                if (v344 >= 0x10)
                  v345 = v344 + 1;
                else
                  v345 = 16;
                if (v345 <= v343 + 1)
                  v346 = v343 + 1;
                else
                  v346 = v345;
                if (v346 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824B410CLL);
                }
                v347 = *(void **)(v339 + 344);
                v348 = (void *)WTF::fastMalloc((WTF *)(8 * v346));
                *(_DWORD *)(v339 + 352) = v346;
                *(_QWORD *)(v339 + 344) = v348;
                memcpy(v348, v347, 8 * v343);
                v7 = (uint64_t)a2;
                v349 = v517;
                if (v347)
                {
                  if (*(void **)(v339 + 344) == v347)
                  {
                    *(_QWORD *)(v339 + 344) = 0;
                    *(_DWORD *)(v339 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v347, a2);
                }
                v343 = *(unsigned int *)(v339 + 356);
                v350 = (_QWORD *)(*(_QWORD *)(v339 + 344) + 8 * v343);
              }
              else
              {
                v350 = (_QWORD *)(*(_QWORD *)(v339 + 344) + 8 * v343);
                v349 = v517;
              }
              *v350 = v342;
              *(_DWORD *)(v339 + 356) = v343 + 1;
              *(_DWORD *)v532 = v349;
              *(_QWORD *)&v532[8] = v342;
              v260 = HIDWORD(v523);
              if (HIDWORD(v523) == (_DWORD)v523)
              {
                v259 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v522, HIDWORD(v523) + 1, (unint64_t)v532);
                v260 = HIDWORD(v523);
                v10 = v522;
                *((_OWORD *)v522 + HIDWORD(v523)) = *v259;
              }
              else
              {
                v10 = v522;
                *((_OWORD *)v522 + HIDWORD(v523)) = *(_OWORD *)v532;
              }
              v11 = v260 + 1;
              HIDWORD(v523) = v260 + 1;
              v8 = (_OWORD *)v5;
              goto LABEL_275;
            }
LABEL_301:
            *v282 = v277;
            v282[1] = 0;
            v290 = *((_DWORD *)v8 - 4);
            v287 = *((_DWORD *)v8 - 3) + 1;
            *((_DWORD *)v8 - 3) = v287;
            v288 = (v290 + v287);
            v289 = *((unsigned int *)v8 - 1);
            if (v289 <= 0x400)
            {
LABEL_302:
              if (3 * v289 > 4 * v288)
                goto LABEL_303;
              if ((_DWORD)v289)
LABEL_323:
                v302 = (_DWORD)v289 << (6 * v287 >= (2 * v289));
              else
                v302 = 8;
              v303 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v302 + 16));
              v5 = (unint64_t)(v303 + 4);
              v305 = v302 - 1;
              v303[2] = v302 - 1;
              v303[3] = v302;
              *v303 = 0;
              v303[1] = v287;
              if ((_DWORD)v289)
              {
                for (j = 0; j != v289; ++j)
                {
                  v307 = &v8[j];
                  if ((unint64_t)(*v307 + 1) >= 2)
                  {
                    v308 = (~(*v307 << 32) + *v307) ^ ((~(*v307 << 32) + *v307) >> 22);
                    v309 = 9 * ((v308 + ~(v308 << 13)) ^ ((unint64_t)(v308 + ~(v308 << 13)) >> 8));
                    v310 = (v309 ^ (v309 >> 15)) + ~((v309 ^ (v309 >> 15)) << 27);
                    v311 = v305 & ((v310 >> 31) ^ v310);
                    v312 = 1;
                    do
                    {
                      v313 = v311;
                      v314 = *(_QWORD *)(v5 + 16 * v311);
                      v311 = (v311 + v312++) & v305;
                    }
                    while (v314);
                    *(_OWORD *)(v5 + 16 * v313) = *(_OWORD *)v307;
                  }
                }
              }
              WTF::fastFree((WTF *)(v8 - 1), v304);
              goto LABEL_332;
            }
LABEL_299:
            if (v289 > 2 * v288)
              goto LABEL_303;
            goto LABEL_323;
          }
          WTF::String::number((WTF::String *)*(unsigned int *)v258);
          if (v519)
          {
            v271 = *(_DWORD *)(v519 + 4);
            if (v271 < 0 || (v272 = (v271 + 28), __OFADD__(v271, 28)))
            {
              v530[0] = 0;
LABEL_600:
              __break(0xC471u);
              JUMPOUT(0x1824B40F4);
            }
            v273 = (*(unsigned __int8 *)(v519 + 16) >> 2) & 1;
          }
          else
          {
            v273 = 1;
            v272 = 28;
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v272, v273, (int8x16_t *)"__ArgumentBufferPlaceholder_", 0x1Cu, v519, v530);
          if (!v530[0])
            goto LABEL_600;
          v291 = *(_QWORD *)(v7 + 216);
          v292 = *(_QWORD *)(v7 + 40);
          if (!v291)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_QWORD *)&v532[8] = 0;
            *(_QWORD *)&v532[16] = 0;
            *(_QWORD *)v532 = &off_1E0FD2F10;
            v291 = *(_QWORD *)(v292 + 312);
            if ((unint64_t)(*(_QWORD *)(v292 + 320) - v291) <= 0x5F)
            {
              WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v292 + 312));
              v291 = *(_QWORD *)(v292 + 312);
            }
            *(_BYTE *)(v291 + 56) = 0;
            *(_QWORD *)(v291 + 16) = 0;
            *(_QWORD *)(v291 + 24) = 0;
            *(_BYTE *)(v291 + 32) = 0;
            *(_QWORD *)v291 = off_1E0FD2E98;
            *(_QWORD *)(v291 + 8) = 0;
            *(_OWORD *)(v291 + 72) = *(_OWORD *)&v532[8];
            *(_QWORD *)(v291 + 64) = &off_1E0FD2F10;
            v293 = v533;
            v533 = 0;
            *(_QWORD *)(v291 + 88) = v293;
            *(_QWORD *)(v292 + 312) += 96;
            v294 = *(unsigned int *)(v292 + 356);
            if ((_DWORD)v294 == *(_DWORD *)(v292 + 352))
            {
              v295 = v294 + (v294 >> 2);
              if (v295 >= 0x10)
                v296 = v295 + 1;
              else
                v296 = 16;
              if (v296 <= v294 + 1)
                v297 = v294 + 1;
              else
                v297 = v296;
              if (v297 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1824B41ACLL);
              }
              v298 = *(void **)(v292 + 344);
              v299 = (void *)WTF::fastMalloc((WTF *)(8 * v297));
              *(_DWORD *)(v292 + 352) = v297;
              *(_QWORD *)(v292 + 344) = v299;
              memcpy(v299, v298, 8 * v294);
              if (v298)
              {
                if (*(void **)(v292 + 344) == v298)
                {
                  *(_QWORD *)(v292 + 344) = 0;
                  *(_DWORD *)(v292 + 352) = 0;
                }
                WTF::fastFree((WTF *)v298, v300);
              }
              v294 = *(unsigned int *)(v292 + 356);
              v301 = (_QWORD *)(*(_QWORD *)(v292 + 344) + 8 * v294);
            }
            else
            {
              v301 = (_QWORD *)(*(_QWORD *)(v292 + 344) + 8 * v294);
            }
            *v301 = v291;
            *(_DWORD *)(v292 + 356) = v294 + 1;
            *(_QWORD *)(v7 + 216) = v291;
            v351 = v533;
            *(_QWORD *)v532 = &off_1E0FD2F10;
            v533 = 0;
            if (v351)
            {
              if (*v351 == 2)
              {
                WTF::StringImpl::destroy();
                v291 = *(_QWORD *)(v7 + 216);
              }
              else
              {
                *v351 -= 2;
              }
            }
            v292 = *(_QWORD *)(v7 + 40);
            *(_QWORD *)(v291 + 24) = *(_QWORD *)(v292 + 168);
          }
          v352 = *(_QWORD *)(v292 + 312);
          if ((unint64_t)(*(_QWORD *)(v292 + 320) - v352) <= 0x47)
          {
            v409 = WTF::fastMalloc((WTF *)0x4000);
            *(_QWORD *)v532 = v409;
            v411 = *(unsigned int *)(v292 + 340);
            if ((_DWORD)v411 == *(_DWORD *)(v292 + 336))
            {
              v412 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v292 + 328, v411 + 1, (unint64_t)v532);
              v411 = *(unsigned int *)(v292 + 340);
              v413 = *(_QWORD *)(v292 + 328);
              v414 = *(_QWORD *)v412;
              *(_QWORD *)v412 = 0;
              *(_QWORD *)(v413 + 8 * v411) = v414;
              v415 = *(WTF **)v532;
            }
            else
            {
              v439 = v409;
              v415 = 0;
              v440 = *(_QWORD *)(v292 + 328);
              *(_QWORD *)v532 = 0;
              *(_QWORD *)(v440 + 8 * v411) = v439;
            }
            *(_DWORD *)(v292 + 340) = v411 + 1;
            WTF::fastFree(v415, v410);
            v441 = *(unsigned int *)(v292 + 340);
            if (!(_DWORD)v441)
            {
              __break(0xC471u);
              JUMPOUT(0x1824B41CCLL);
            }
            v352 = *(_QWORD *)(*(_QWORD *)(v292 + 328) + 8 * v441 - 8);
            *(_QWORD *)(v292 + 312) = v352;
            *(_QWORD *)(v292 + 320) = v352 + 0x4000;
          }
          *(_BYTE *)(v352 + 32) = 0;
          *(_BYTE *)(v352 + 56) = 0;
          *(_QWORD *)(v352 + 16) = 0;
          *(_QWORD *)(v352 + 24) = 0;
          *(_QWORD *)v352 = off_1E0FD44C0;
          *(_QWORD *)(v352 + 8) = 0;
          *(_QWORD *)(v352 + 64) = v261;
          *(_QWORD *)(v292 + 312) += 72;
          v353 = *(unsigned int *)(v292 + 356);
          if ((_DWORD)v353 == *(_DWORD *)(v292 + 352))
          {
            v354 = v353 + (v353 >> 2);
            if (v354 >= 0x10)
              v355 = v354 + 1;
            else
              v355 = 16;
            if (v355 <= v353 + 1)
              v356 = v353 + 1;
            else
              v356 = v355;
            if (v356 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824B4154);
            }
            v357 = *(void **)(v292 + 344);
            v358 = (void *)WTF::fastMalloc((WTF *)(8 * v356));
            *(_DWORD *)(v292 + 352) = v356;
            *(_QWORD *)(v292 + 344) = v358;
            memcpy(v358, v357, 8 * v353);
            v7 = (uint64_t)a2;
            if (v357)
            {
              if (*(void **)(v292 + 344) == v357)
              {
                *(_QWORD *)(v292 + 344) = 0;
                *(_DWORD *)(v292 + 352) = 0;
              }
              WTF::fastFree((WTF *)v357, v359);
            }
            v353 = *(unsigned int *)(v292 + 356);
            v360 = (_QWORD *)(*(_QWORD *)(v292 + 344) + 8 * v353);
            v361 = *(unsigned __int8 *)(v352 + 56);
          }
          else
          {
            v361 = 0;
            v360 = (_QWORD *)(*(_QWORD *)(v292 + 344) + 8 * v353);
          }
          *v360 = v352;
          *(_DWORD *)(v292 + 356) = v353 + 1;
          v362 = *(_QWORD *)(v7 + 40);
          *(_QWORD *)(v352 + 24) = *(_QWORD *)(v362 + 128);
          if (v361)
          {
            v363 = *(unsigned int *)(v352 + 48);
            if ((_DWORD)v363 != -1)
            {
              if ((_DWORD)v363 == 4)
              {
                *(_DWORD *)(v352 + 32) = v261;
                goto LABEL_418;
              }
              ((void (*)(_BYTE *, uint64_t))off_1E0FD3E30[v363])(v532, v352 + 32);
              v362 = *(_QWORD *)(v7 + 40);
            }
            *(_DWORD *)(v352 + 32) = v261;
            *(_DWORD *)(v352 + 48) = 4;
          }
          else
          {
            *(_DWORD *)(v352 + 32) = v261;
            *(_DWORD *)(v352 + 48) = 4;
            *(_BYTE *)(v352 + 56) = 1;
          }
LABEL_418:
          v364 = *(_QWORD **)(v362 + 312);
          if (*(_QWORD *)(v362 + 320) - (_QWORD)v364 <= 0x1FuLL)
          {
            v416 = WTF::fastMalloc((WTF *)0x4000);
            *(_QWORD *)v532 = v416;
            v418 = *(unsigned int *)(v362 + 340);
            if ((_DWORD)v418 == *(_DWORD *)(v362 + 336))
            {
              v419 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v362 + 328, v418 + 1, (unint64_t)v532);
              v418 = *(unsigned int *)(v362 + 340);
              v420 = *(_QWORD *)(v362 + 328);
              v421 = *(_QWORD *)v419;
              *(_QWORD *)v419 = 0;
              *(_QWORD *)(v420 + 8 * v418) = v421;
              v422 = *(WTF **)v532;
            }
            else
            {
              v442 = v416;
              v422 = 0;
              v443 = *(_QWORD *)(v362 + 328);
              *(_QWORD *)v532 = 0;
              *(_QWORD *)(v443 + 8 * v418) = v442;
            }
            *(_DWORD *)(v362 + 340) = v418 + 1;
            WTF::fastFree(v422, v417);
            v444 = *(unsigned int *)(v362 + 340);
            if (!(_DWORD)v444)
            {
              __break(0xC471u);
              JUMPOUT(0x1824B41D4);
            }
            v364 = *(_QWORD **)(*(_QWORD *)(v362 + 328) + 8 * v444 - 8);
            *(_QWORD *)(v362 + 312) = v364;
            *(_QWORD *)(v362 + 320) = v364 + 2048;
          }
          *v364 = &off_1E0FD4588;
          v364[1] = 0;
          v364[2] = 0;
          v364[3] = v352;
          *(_QWORD *)(v362 + 312) += 32;
          v365 = *(unsigned int *)(v362 + 356);
          if ((_DWORD)v365 == *(_DWORD *)(v362 + 352))
          {
            v366 = v365 + (v365 >> 2);
            if (v366 >= 0x10)
              v367 = v366 + 1;
            else
              v367 = 16;
            if (v367 <= v365 + 1)
              v368 = v365 + 1;
            else
              v368 = v367;
            if (v368 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824B415CLL);
            }
            v369 = *(void **)(v362 + 344);
            v370 = (void *)WTF::fastMalloc((WTF *)(8 * v368));
            *(_DWORD *)(v362 + 352) = v368;
            *(_QWORD *)(v362 + 344) = v370;
            memcpy(v370, v369, 8 * v365);
            v7 = (uint64_t)a2;
            if (v369)
            {
              if (*(void **)(v362 + 344) == v369)
              {
                *(_QWORD *)(v362 + 344) = 0;
                *(_DWORD *)(v362 + 352) = 0;
              }
              WTF::fastFree((WTF *)v369, v371);
            }
            v365 = *(unsigned int *)(v362 + 356);
            v372 = (_QWORD *)(*(_QWORD *)(v362 + 344) + 8 * v365);
          }
          else
          {
            v372 = (_QWORD *)(*(_QWORD *)(v362 + 344) + 8 * v365);
          }
          *v372 = v364;
          *(_DWORD *)(v362 + 356) = v365 + 1;
          v373 = *(_QWORD *)(v7 + 40);
          v374 = (_DWORD *)v530[0];
          if (v530[0])
            *(_DWORD *)v530[0] += 2;
          v375 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          *v375 = v364;
          v376 = *(_QWORD *)(v373 + 312);
          if ((unint64_t)(*(_QWORD *)(v373 + 320) - v376) <= 0x9F)
          {
            v423 = WTF::fastMalloc((WTF *)0x4000);
            *(_QWORD *)v532 = v423;
            v425 = *(unsigned int *)(v373 + 340);
            if ((_DWORD)v425 == *(_DWORD *)(v373 + 336))
            {
              v426 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v373 + 328, v425 + 1, (unint64_t)v532);
              v425 = *(unsigned int *)(v373 + 340);
              v427 = *(_QWORD *)(v373 + 328);
              v428 = *(_QWORD *)v426;
              *(_QWORD *)v426 = 0;
              *(_QWORD *)(v427 + 8 * v425) = v428;
              v429 = *(WTF **)v532;
            }
            else
            {
              v445 = v423;
              v429 = 0;
              v446 = *(_QWORD *)(v373 + 328);
              *(_QWORD *)v532 = 0;
              *(_QWORD *)(v446 + 8 * v425) = v445;
            }
            *(_DWORD *)(v373 + 340) = v425 + 1;
            WTF::fastFree(v429, v424);
            v447 = *(unsigned int *)(v373 + 340);
            if (!(_DWORD)v447)
            {
              __break(0xC471u);
              JUMPOUT(0x1824B41DCLL);
            }
            v376 = *(_QWORD *)(*(_QWORD *)(v373 + 328) + 8 * v447 - 8);
            *(_QWORD *)(v373 + 312) = v376;
            *(_QWORD *)(v373 + 320) = v376 + 0x4000;
          }
          *(_QWORD *)v376 = &off_1E0FD3850;
          *(_QWORD *)(v376 + 8) = 0;
          *(_QWORD *)(v376 + 32) = 0;
          *(_QWORD *)(v376 + 40) = 0;
          *(_QWORD *)(v376 + 16) = 0;
          *(_QWORD *)(v376 + 24) = &off_1E0FD2F10;
          *(_QWORD *)(v376 + 64) = 0;
          *(_QWORD *)(v376 + 72) = 0;
          *(_QWORD *)(v376 + 48) = v374;
          *(_QWORD *)(v376 + 56) = &off_1E0FD2F10;
          if (v374)
            *v374 += 2;
          *(_QWORD *)(v376 + 80) = v374;
          *(_QWORD *)(v376 + 88) = v375;
          *(_QWORD *)(v376 + 96) = 0x100000001;
          *(_BYTE *)(v376 + 124) = 0;
          *(_BYTE *)(v376 + 128) = 0;
          *(_BYTE *)(v376 + 132) = 0;
          *(_BYTE *)(v376 + 136) = 0;
          *(_WORD *)(v376 + 140) = 0;
          *(_BYTE *)(v376 + 144) = 0;
          *(_BYTE *)(v376 + 148) = 0;
          *(_BYTE *)(v376 + 152) = 0;
          *(_BYTE *)(v376 + 154) = 0;
          *(_QWORD *)(v376 + 104) = v291;
          *(_QWORD *)(v376 + 112) = 0;
          *(_BYTE *)(v376 + 120) = 0;
          *(_QWORD *)(v373 + 312) += 160;
          v5 = *(unsigned int *)(v373 + 356);
          if ((_DWORD)v5 == *(_DWORD *)(v373 + 352))
          {
            v377 = v5 + (v5 >> 2);
            if (v377 >= 0x10)
              v378 = v377 + 1;
            else
              v378 = 16;
            if (v378 <= v5 + 1)
              v379 = v5 + 1;
            else
              v379 = v378;
            if (v379 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824B4164);
            }
            v380 = *(void **)(v373 + 344);
            v381 = (void *)WTF::fastMalloc((WTF *)(8 * v379));
            *(_DWORD *)(v373 + 352) = v379;
            *(_QWORD *)(v373 + 344) = v381;
            memcpy(v381, v380, 8 * v5);
            v7 = (uint64_t)a2;
            if (v380)
            {
              if (*(void **)(v373 + 344) == v380)
              {
                *(_QWORD *)(v373 + 344) = 0;
                *(_DWORD *)(v373 + 352) = 0;
              }
              WTF::fastFree((WTF *)v380, a2);
            }
            v5 = *(unsigned int *)(v373 + 356);
            v382 = (_QWORD *)(*(_QWORD *)(v373 + 344) + 8 * v5);
          }
          else
          {
            v382 = (_QWORD *)(*(_QWORD *)(v373 + 344) + 8 * v5);
          }
          *v382 = v376;
          *(_DWORD *)(v373 + 356) = v5 + 1;
          *(_DWORD *)v532 = v261;
          *(_QWORD *)&v532[8] = v376;
          v383 = HIDWORD(v523);
          if (HIDWORD(v523) == (_DWORD)v523)
          {
            v384 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v522, HIDWORD(v523) + 1, (unint64_t)v532);
            v385 = HIDWORD(v523);
            v10 = v522;
            *((_OWORD *)v522 + HIDWORD(v523)) = *v384;
            v11 = v385 + 1;
            HIDWORD(v523) = v385 + 1;
            v386 = (_DWORD *)v530[0];
            v530[0] = 0;
            if (!v386)
              goto LABEL_458;
          }
          else
          {
            v10 = v522;
            *((_OWORD *)v522 + HIDWORD(v523)) = *(_OWORD *)v532;
            v11 = v383 + 1;
            HIDWORD(v523) = v383 + 1;
            v386 = (_DWORD *)v530[0];
            v530[0] = 0;
            if (!v386)
              goto LABEL_458;
          }
          if (*v386 != 2)
          {
            *v386 -= 2;
LABEL_458:
            v387 = (_DWORD *)v519;
            v519 = 0;
            if (v387)
              goto LABEL_461;
            goto LABEL_275;
          }
          WTF::StringImpl::destroy();
          v387 = (_DWORD *)v519;
          v519 = 0;
          if (v387)
          {
LABEL_461:
            if (*v387 == 2)
              WTF::StringImpl::destroy();
            else
              *v387 -= 2;
          }
LABEL_275:
          v258 = (WTF *)((char *)v258 + 16);
        }
        while (v258 != v514);
      }
      if (v11)
      {
        v448 = HIDWORD(v526);
        v6 = v510;
        if (HIDWORD(v526) == (_DWORD)v526)
        {
          v449 = (__int32 *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, HIDWORD(v526) + 1, (unint64_t)&v524);
          v448 = HIDWORD(v526);
          v450 = __src;
          v451 = *v449;
        }
        else
        {
          v450 = __src;
          v451 = v524;
        }
        v450[v448] = v451;
        ++HIDWORD(v526);
        v453 = v524++;
        WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(v7, v453, (uint64_t)&v522);
        v452 = v520;
        if (v520)
LABEL_503:
          WTF::fastFree(v452, a2);
      }
      else
      {
        v6 = v510;
        ++v524;
        v452 = v520;
        if (v520)
          goto LABEL_503;
      }
LABEL_504:
      if (v10)
      {
        v522 = 0;
        LODWORD(v523) = 0;
        WTF::fastFree(v10, a2);
      }
      v6 = (const WTF::StringImpl *)((char *)v6 + 24);
      if (v6 == v509)
        goto LABEL_507;
    }
  }
  v8 = 0;
LABEL_507:
  v454 = *a5;
  if (!*a5)
  {
    v457 = 0;
    v456 = 0;
    goto LABEL_516;
  }
  v455 = *(unsigned int *)(v454 - 4);
  v456 = v454 + 16 * v455;
  if (*(_DWORD *)(v454 - 12))
  {
    v457 = *a5;
    if ((_DWORD)v455)
    {
      v458 = 16 * v455;
      v457 = *a5;
      while (*(_DWORD *)v457 >= 0xFFFFFFFE)
      {
        v457 += 16;
        v458 -= 16;
        if (!v458)
        {
          v457 = v456;
          if (v454)
            goto LABEL_517;
          goto LABEL_518;
        }
      }
    }
LABEL_516:
    if (!v454)
      goto LABEL_518;
    goto LABEL_517;
  }
  v457 = v454 + 16 * v455;
  v456 = v457;
  if (v454)
LABEL_517:
    v454 += 16 * *(unsigned int *)(v454 - 4);
LABEL_518:
  if (v454 == v457)
  {
LABEL_583:
    v503 = HIDWORD(v526);
    v504 = a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v503;
    if ((_DWORD)v503)
    {
      if (v503 >> 30)
      {
LABEL_630:
        __break(0xC471u);
        JUMPOUT(0x1824B40D8);
      }
      v505 = (void *)WTF::fastMalloc((WTF *)(4 * v503));
      *(_DWORD *)(a1 + 8) = v503;
      *(_QWORD *)a1 = v505;
      memcpy(v505, __src, 4 * HIDWORD(v526));
      v504 = a1;
    }
    *(_DWORD *)(v504 + 24) = 0;
    if (!v8)
      goto LABEL_593;
LABEL_592:
    WTF::fastFree((WTF *)(v8 - 1), a2);
    goto LABEL_593;
  }
  v518 = v456;
  v515 = v454;
  while (1)
  {
    v459 = *(_QWORD *)(v457 + 8);
    if (v459)
    {
      v460 = *(unsigned int *)(v459 - 4);
      v461 = v459 + 16 * v460;
      if (!*(_DWORD *)(v459 - 12))
      {
        v462 = v459 + 16 * v460;
        v461 = v462;
LABEL_529:
        v464 = v459 + 16 * *(unsigned int *)(v459 - 4);
        if (v464 != v462)
          goto LABEL_541;
        goto LABEL_533;
      }
      v462 = *(_QWORD *)(v457 + 8);
      if ((_DWORD)v460)
      {
        v463 = 16 * v460;
        v462 = *(_QWORD *)(v457 + 8);
        do
        {
          if (*(_DWORD *)v462 < 0xFFFFFFFE)
            goto LABEL_528;
          v462 += 16;
          v463 -= 16;
        }
        while (v463);
        v462 = v461;
        goto LABEL_529;
      }
    }
    else
    {
      v462 = 0;
      v461 = 0;
    }
LABEL_528:
    if (v459)
      goto LABEL_529;
    v464 = 0;
    if (v462)
      break;
LABEL_533:
    v465 = v457 + 16;
    v457 = v518;
    if (v465 != v518)
    {
      v457 = v465;
      while (*(_DWORD *)v457 >= 0xFFFFFFFE)
      {
        v457 += 16;
        if (v457 == v518)
        {
          v457 = v518;
          break;
        }
      }
    }
    if (v457 == v515)
      goto LABEL_583;
  }
  while (1)
  {
LABEL_541:
    v466 = *(_QWORD *)(*(_QWORD *)(v462 + 8) + 16);
    if (v8)
    {
      v467 = *((_DWORD *)v8 - 2);
      v468 = (~(v466 << 32) + v466) ^ ((unint64_t)(~(v466 << 32) + v466) >> 22);
      v469 = 9 * ((v468 + ~(v468 << 13)) ^ ((v468 + ~(v468 << 13)) >> 8));
      v470 = (v469 ^ (v469 >> 15)) + ~((v469 ^ (v469 >> 15)) << 27);
      v471 = v467 & ((v470 >> 31) ^ v470);
      v472 = *(_QWORD *)&v8[v471];
      if (v472 == v466)
      {
LABEL_546:
        if (v471 != *((_DWORD *)v8 - 1))
        {
          v474 = &v8[v471];
          v477 = *((_QWORD *)v474 + 1);
          v475 = (uint64_t *)v474 + 1;
          v476 = v477;
          if (v477)
          {
            *(_QWORD *)v532 = *(_QWORD *)(*(_QWORD *)(v462 + 8) + 16);
            *(_QWORD *)&v532[8] = v466;
            *(_QWORD *)&v532[16] = v466;
            v533 = (_DWORD *)v466;
            v534 = v466;
            v478 = *(unsigned int *)(v476 + 32);
            if ((_DWORD)v478 == -1)
              goto LABEL_597;
            v530[0] = v532;
            if (!((unsigned int (*)(_QWORD *, uint64_t))off_1E0FD4178[v478])(v530, v476 + 16))
              goto LABEL_591;
            v479 = *(unsigned int *)(v476 + 32);
            if ((_DWORD)v479 == -1)
              goto LABEL_597;
            v480 = *(unsigned __int16 *)(v466 + 152);
            *(_QWORD *)v532 = v530;
            v481 = ((uint64_t (*)(_BYTE *, uint64_t))off_1E0FD4218[v479])(v532, v476 + 16);
            if (v480 >= 0x100 && v481 != v480)
              goto LABEL_591;
            v482 = *(unsigned int *)(v476 + 32);
            if ((_DWORD)v482 == -1)
              goto LABEL_597;
            v483 = *(unsigned __int16 *)(v466 + 154);
            *(_QWORD *)v532 = v530;
            v484 = ((uint64_t (*)(_BYTE *, uint64_t))off_1E0FD4240[v482])(v532, v476 + 16);
            if (v483 >= 0x100 && v484 != v483)
              goto LABEL_591;
            v485 = *v475;
            if (!*(_DWORD *)(v485 + 32))
            {
              v501 = *(unsigned int *)(*(_QWORD *)(v466 + 144) + 48);
              if ((_DWORD)v501 == -1)
LABEL_597:
                std::__throw_bad_variant_access[abi:sn180100]();
              *(_QWORD *)v532 = v530;
              *(_QWORD *)(v485 + 24) = ((unsigned int (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v501])(v532);
              v486 = a2[11];
              if (!v486)
                goto LABEL_576;
              goto LABEL_560;
            }
          }
        }
      }
      else
      {
        v473 = 1;
        while (v472)
        {
          v471 = ((_DWORD)v471 + v473) & v467;
          v472 = *(_QWORD *)&v8[v471];
          ++v473;
          if (v472 == v466)
            goto LABEL_546;
        }
      }
    }
    v486 = a2[11];
    if (!v486)
      goto LABEL_576;
LABEL_560:
    v487 = *(_DWORD *)(v486 - 8);
    v488 = *(WTF::StringImpl **)(v466 + 48);
    v489 = *((_DWORD *)v488 + 4);
    if (v489 < 0x100)
      v490 = WTF::StringImpl::hashSlowCase(v488);
    else
      v490 = v489 >> 8;
    for (k = 0; ; v490 = k + v492)
    {
      v492 = v490 & v487;
      v493 = *(WTF ***)(v486 + 8 * (v490 & v487));
      if (v493 != (WTF **)-1)
      {
        if (!v493)
          goto LABEL_576;
        if ((WTF::equal(*v493, *(const WTF::StringImpl **)(v466 + 48), a3) & 1) != 0)
          break;
      }
      ++k;
    }
    if (!v8)
      goto LABEL_581;
    v494 = *((_DWORD *)v8 - 2);
    v495 = (~(v466 << 32) + v466) ^ ((unint64_t)(~(v466 << 32) + v466) >> 22);
    v496 = 9 * ((v495 + ~(v495 << 13)) ^ ((v495 + ~(v495 << 13)) >> 8));
    v497 = (v496 ^ (v496 >> 15)) + ~((v496 ^ (v496 >> 15)) << 27);
    v498 = v494 & ((v497 >> 31) ^ v497);
    v499 = *(_QWORD *)&v8[v498];
    if (v499 != v466)
      break;
LABEL_576:
    v502 = v462 + 16;
    v462 = v461;
    if (v502 != v461)
    {
      v462 = v502;
      while (*(_DWORD *)v462 >= 0xFFFFFFFE)
      {
        v462 += 16;
        if (v462 == v461)
        {
          v462 = v461;
          break;
        }
      }
    }
    if (v462 == v464)
      goto LABEL_533;
  }
  v500 = 1;
  while (v499)
  {
    v498 = (v498 + v500) & v494;
    v499 = *(_QWORD *)&v8[v498];
    ++v500;
    if (v499 == v466)
      goto LABEL_576;
  }
LABEL_581:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 1;
  if (v8)
    goto LABEL_592;
LABEL_593:
  result = (WTF *)__src;
  if (__src)
  {
    __src = 0;
    LODWORD(v526) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  _DWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  WTF *result;
  uint64_t v52;
  char v53;
  WTF *v54;
  uint64_t v55;
  _QWORD v56[3];
  WTF *v57;
  __int128 v58;
  WTF *v59;
  unint64_t v60;

  v6 = *(_QWORD *)a3;
  v7 = *(unsigned int *)(a3 + 12);
  v8 = (int *)(*(_QWORD *)a3 + 16 * v7);
  v9 = 126 - 2 * __clz(v7);
  if ((_DWORD)v7)
    v10 = v9;
  else
    v10 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*,false>(v6, v8, v10, 1);
  v60 = 0;
  v11 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v11)
  {
    v52 = a1;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 16 * v11;
    v17 = (uint64_t *)(*(_QWORD *)a3 + 8);
    do
    {
      v18 = v13;
      v19 = *v17;
      ++v13;
      if (v18 == v14)
      {
        v20 = v18 + (v18 >> 2);
        if (v20 >= 0x10)
          v21 = v20 + 1;
        else
          v21 = 16;
        if (v21 <= v13)
          v14 = v13;
        else
          v14 = v21;
        if (v14 >> 29)
        {
          __break(0xC471u);
          goto LABEL_67;
        }
        v22 = (char *)WTF::fastMalloc((WTF *)(8 * v14));
        v14 = v14;
        memcpy(v22, v15, v12);
        if (v15)
        {
          if (v22 == v15)
          {
            v14 = 0;
            v22 = 0;
          }
          WTF::fastFree((WTF *)v15, v23);
        }
        v15 = v22;
      }
      *(_QWORD *)&v15[v12] = v19;
      v12 += 8;
      v17 += 2;
      v16 -= 16;
    }
    while (v16);
    v60 = __PAIR64__(v13, v14);
    a1 = v52;
  }
  else
  {
    v15 = 0;
  }
  v59 = (WTF *)v15;
  v24 = *(_QWORD *)(a1 + 40);
  v58 = 0uLL;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v54, "__ArgumentBufferT_", 19, a2);
  if (!v54)
  {
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x1824B45C0);
  }
  v56[0] = &off_1E0FD2F10;
  v56[1] = 0;
  v56[2] = 0;
  v57 = v54;
  v54 = 0;
  v55 = 0;
  v53 = 5;
  v26 = WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>((_QWORD *)(v24 + 312), &v58, (uint64_t)v56, (uint64_t *)&v59, (uint64_t *)&v54, &v53);
  v27 = v54;
  if (v54)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree(v27, v25);
  }
  v28 = v57;
  v56[0] = &off_1E0FD2F10;
  v57 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *(_QWORD *)(a1 + 40) + 96;
  v56[0] = 0;
  v26[14] = WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>(v29, (uint64_t)v26, v56);
  v31 = v56[0];
  if (v56[0])
  {
    v32 = *(unsigned int *)(v56[0] - 4);
    if ((_DWORD)v32)
    {
      v33 = (_DWORD **)v56[0];
      do
      {
        v34 = *v33;
        if (*v33 != (_DWORD *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*v34 == 2)
              WTF::StringImpl::destroy();
            else
              *v34 -= 2;
          }
        }
        v33 += 2;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v31 - 16), v30);
  }
  WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(*(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 40) + 64, (uint64_t)v26);
  v38 = *(_QWORD *)(a1 + 72);
  v37 = (uint64_t *)(a1 + 72);
  v36 = v38;
  if (v38
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WGSL::RewriteGlobalVariables::Global *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v37, 8u), (v36 = *v37) != 0))
  {
    v39 = *(_DWORD *)(v36 - 8);
  }
  else
  {
    v39 = 0;
  }
  v40 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
  v42 = v39 & (v41 ^ HIWORD(v41));
  v43 = v36 + 16 * v42;
  v44 = *(_DWORD *)v43;
  if (*(_DWORD *)v43 == -1)
  {
LABEL_50:
    *(_DWORD *)v43 = a2;
    *(_QWORD *)(v43 + 8) = v26[14];
    if (*v37)
    {
      ++*(_DWORD *)(*v37 - 12);
      v47 = *v37;
      if (*v37)
        goto LABEL_52;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v47 = *v37;
      if (*v37)
      {
LABEL_52:
        v48 = (*(_DWORD *)(v47 - 16) + *(_DWORD *)(v47 - 12));
        v49 = *(unsigned int *)(v47 - 4);
        if (v49 <= 0x400)
          goto LABEL_53;
        goto LABEL_58;
      }
    }
    v48 = *(unsigned int *)(v47 - 16);
    v49 = *(unsigned int *)(v47 - 4);
    if (v49 <= 0x400)
    {
LABEL_53:
      if (3 * v49 > 4 * v48)
        goto LABEL_61;
      if (!(_DWORD)v49)
      {
        v50 = 8;
LABEL_60:
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WGSL::RewriteGlobalVariables::Global *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v37, v50);
        goto LABEL_61;
      }
LABEL_59:
      v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v47 - 12) >= (2 * v49));
      goto LABEL_60;
    }
LABEL_58:
    if (v49 > 2 * v48)
      goto LABEL_61;
    goto LABEL_59;
  }
  v45 = 0;
  v46 = 1;
  while (v44 != a2)
  {
    if (v44 == -2)
      v45 = v43;
    v42 = (v42 + v46) & v39;
    v43 = v36 + 16 * v42;
    v44 = *(_DWORD *)v43;
    ++v46;
    if (*(_DWORD *)v43 == -1)
    {
      if (v45)
      {
        *(_DWORD *)v45 = -1;
        *(_QWORD *)(v45 + 8) = 0;
        --*(_DWORD *)(*v37 - 16);
        v43 = v45;
      }
      goto LABEL_50;
    }
  }
LABEL_61:
  result = v59;
  if (v59)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    return (WTF *)WTF::fastFree(result, v35);
  }
  return result;
}

uint64_t WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded(uint64_t result, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v5 = result;
  v6 = *(_QWORD *)(result + 240);
  if (v6 && *(_DWORD *)(v6 - 12))
  {
    v7 = *(unsigned __int8 *)(result + 184);
    switch(v7)
    {
      case 1:
        v8 = *(_QWORD *)(result + 40);
        v9 = *(_DWORD *)(v8 + 40);
        break;
      case 4:
        v8 = *(_QWORD *)(result + 40);
        v9 = *(_DWORD *)(v8 + 48);
        break;
      case 2:
        v8 = *(_QWORD *)(result + 40);
LABEL_9:
        v9 = *(_DWORD *)(v8 + 44);
        break;
      default:
        v9 = 0;
        v8 = *(_QWORD *)(result + 40);
        break;
    }
    v10 = (_QWORD *)(v8 + 312);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = 0;
    v25 = 0;
    v23 = (uint64_t)&off_1E0FD2F10;
    v11 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v10, a2, (uint64_t)&v23);
    v12 = v26;
    v23 = (uint64_t)&off_1E0FD2F10;
    v26 = 0;
    if (v12)
    {
      if (*v12 == 2)
        WTF::StringImpl::destroy();
      else
        *v12 -= 2;
    }
    v13 = *(_QWORD *)(v5 + 40);
    v14 = *(_QWORD *)(v13 + 168);
    v29 = 4;
    v28 = v14;
    v27 = 0;
    v23 = 1031;
    v24 = v14;
    v15 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v13 + 112), (unsigned __int8 *)&v23);
    v16 = *(unsigned __int8 **)(v13 + 112);
    if (v16)
      v16 += 24 * *((unsigned int *)v16 - 1);
    if (v16 == v15 || (v17 = *((_QWORD *)v15 + 2)) == 0)
    {
      v17 = WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>(v13 + 96, &v29, &v27, &v28);
      v30 = v17;
      v19 = 1031;
      v20 = v14;
      WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v13 + 112), (unsigned __int8 *)&v19, &v30, (uint64_t)&v23);
    }
    v11[3] = v17;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = 0;
    v21 = 0;
    v19 = (uint64_t)&off_1E0FD2F10;
    v18 = v22;
    if (v22)
      *v22 += 2;
    v23 = (uint64_t)&off_1E0FD2F10;
    v24 = 0;
    v25 = 0;
    v26 = v18;
    WGSL::RewriteGlobalVariables::insertParameter(v5, a2, a3, v9, (uint64_t)&v23, v11, 0);
    if (v26)
    {
      if (*v26 == 2)
      {
        WTF::StringImpl::destroy();
        result = (uint64_t)v22;
        v19 = (uint64_t)&off_1E0FD2F10;
        v22 = 0;
        if (!result)
          return result;
LABEL_30:
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy();
        *(_DWORD *)result -= 2;
        return result;
      }
      *v26 -= 2;
    }
    result = (uint64_t)v22;
    v19 = (uint64_t)&off_1E0FD2F10;
    v22 = 0;
    if (!result)
      return result;
    goto LABEL_30;
  }
  if (*(_BYTE *)(result + 184) == 2)
  {
    v8 = *(_QWORD *)(result + 40);
    if (*(_BYTE *)(v8 + 19))
      goto LABEL_9;
  }
  return result;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::CompoundStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,void>(_QWORD *this, _OWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;

  v7 = this;
  v8 = *this;
  if (this[1] - *this <= 0x37uLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(_QWORD *)v8 = &off_1E0FD45B0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 24) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v8 + 32) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v8 + 36) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(v8 + 40) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v8 + 48) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v8 + 52) = v10;
  *v7 += 56;
  v11 = *((unsigned int *)v7 + 11);
  if ((_DWORD)v11 != *((_DWORD *)v7 + 10))
  {
    v18 = (_QWORD *)(v7[4] + 8 * v11);
LABEL_17:
    *v18 = v8;
    *((_DWORD *)v7 + 11) = v11 + 1;
    return (_QWORD *)v8;
  }
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = (void *)v7[4];
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)v7 + 10) = v14;
    v7[4] = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if ((void *)v7[4] == v15)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *((unsigned int *)v7 + 11);
    v18 = (_QWORD *)(v7[4] + 8 * v11);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WGSL::AST::Builder::construct<WGSL::AST::CallStatement,WGSL::SourceSpan,WGSL::AST::CallExpression &,void>(_QWORD *this, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v5 = this;
  v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (_QWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(_QWORD *)v6 = &off_1E0FD4600;
  *(_QWORD *)(v6 + 24) = a3;
  *v5 += 32;
  v7 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v7 != *((_DWORD *)v5 + 10))
  {
    v14 = (_QWORD *)(v5[4] + 8 * v7);
LABEL_17:
    *v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (_QWORD *)v6;
  }
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7 + 1)
    v10 = v7 + 1;
  else
    v10 = v9;
  if (!(v10 >> 29))
  {
    v11 = (void *)v5[4];
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    v7 = *((unsigned int *)v5 + 11);
    v14 = (_QWORD *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

WTF *WGSL::RewriteGlobalVariables::storeInitialValue(WTF *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  WTF *v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  WTF *v19;
  _QWORD *v20;
  _QWORD *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t *v80;
  _QWORD *v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  _QWORD *v119;
  WTF *v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  void *v127;
  void *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  WTF *v135;
  uint64_t v136;
  __int128 v137;
  _QWORD v138[3];
  WTF *v139[2];
  uint64_t v140;
  WTF *v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v138[0] = result;
  v138[1] = a2;
  v138[2] = a3;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
LABEL_18:
    if (!a5)
      return result;
    return WGSL::RewriteGlobalVariables::storeInitialValue(WGSL::AST::Expression &,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul> &,unsigned int,BOOL)::$_0::operator()(v138);
  }
  v6 = a3;
  v8 = result;
  v9 = *(_DWORD *)(v5 + 48);
  if (v9 == 12)
  {
    v20 = (_QWORD *)(*((_QWORD *)result + 5) + 312);
    v137 = 0uLL;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v139[1] = 0;
    v140 = 0;
    v139[0] = (WTF *)&off_1E0FD2F10;
    v21 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v20, &v137, (uint64_t)v139);
    v22 = v141;
    v139[0] = (WTF *)&off_1E0FD2F10;
    v141 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v22 -= 2;
    }
    v39 = v6;
    v40 = *((_QWORD *)v8 + 5);
    v21[3] = *(_QWORD *)(v40 + 120);
    v139[0] = 0;
    v139[1] = 0;
    LOBYTE(v137) = 0;
    v41 = WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::UnaryOperation,void>((_QWORD *)(v40 + 312), v139, a2, (char *)&v137);
    v42 = *((_QWORD *)v8 + 5);
    v41[3] = *(_QWORD *)(v42 + 120);
    v43 = *(_QWORD *)(v42 + 312);
    if ((unint64_t)(*(_QWORD *)(v42 + 320) - v43) <= 0x47)
    {
      WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v42 + 312));
      v43 = *(_QWORD *)(v42 + 312);
    }
    *(_BYTE *)(v43 + 56) = 0;
    *(_QWORD *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 24) = 0;
    *(_BYTE *)(v43 + 32) = 0;
    *(_QWORD *)v43 = off_1E0FD44C0;
    *(_QWORD *)(v43 + 8) = 0;
    *(_QWORD *)(v43 + 64) = 0;
    *(_QWORD *)(v42 + 312) += 72;
    v44 = *(unsigned int *)(v42 + 356);
    if ((_DWORD)v44 == *(_DWORD *)(v42 + 352))
    {
      v45 = v44 + (v44 >> 2);
      if (v45 >= 0x10)
        v46 = v45 + 1;
      else
        v46 = 16;
      if (v46 <= v44 + 1)
        v47 = v44 + 1;
      else
        v47 = v46;
      if (v47 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1824B5884);
      }
      v48 = *(void **)(v42 + 344);
      v49 = (void *)WTF::fastMalloc((WTF *)(8 * v47));
      *(_DWORD *)(v42 + 352) = v47;
      *(_QWORD *)(v42 + 344) = v49;
      memcpy(v49, v48, 8 * v44);
      if (v48)
      {
        if (*(void **)(v42 + 344) == v48)
        {
          *(_QWORD *)(v42 + 344) = 0;
          *(_DWORD *)(v42 + 352) = 0;
        }
        WTF::fastFree((WTF *)v48, v50);
      }
      v44 = *(unsigned int *)(v42 + 356);
      v51 = (_QWORD *)(*(_QWORD *)(v42 + 344) + 8 * v44);
    }
    else
    {
      v51 = (_QWORD *)(*(_QWORD *)(v42 + 344) + 8 * v44);
    }
    *v51 = v43;
    *(_DWORD *)(v42 + 356) = v44 + 1;
    v52 = *((_QWORD *)v8 + 5);
    *(_QWORD *)(v43 + 24) = *(_QWORD *)(v52 + 128);
    v139[0] = 0;
    v139[1] = 0;
    v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    DWORD2(v137) = 2;
    *(_QWORD *)&v137 = v53;
    *v53 = v41;
    v53[1] = v43;
    HIDWORD(v137) = 2;
    v55 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((_QWORD *)(v52 + 312), v139, (uint64_t)v21, (uint64_t *)&v137);
    v56 = (WTF *)v137;
    if ((_QWORD)v137)
    {
      *(_QWORD *)&v137 = 0;
      DWORD2(v137) = 0;
      WTF::fastFree(v56, v54);
    }
    v57 = *((_QWORD *)v8 + 5);
    v55[3] = *(_QWORD *)(v57 + 144);
    v139[0] = 0;
    v139[1] = 0;
    result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::CallStatement,WGSL::SourceSpan,WGSL::AST::CallExpression &,void>((_QWORD *)(v57 + 312), v139, (uint64_t)v55);
    v139[0] = result;
    v58 = *(unsigned int *)(v39 + 12);
    if ((_DWORD)v58 == *(_DWORD *)(v39 + 8))
    {
      result = (WTF *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v39, v58 + 1, (unint64_t)v139);
      *(_QWORD *)(*(_QWORD *)v39 + 8 * *(unsigned int *)(v39 + 12)) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v39 + 8 * v58) = result;
    }
    ++*(_DWORD *)(v39 + 12);
  }
  else
  {
    v133 = result;
    if (v9 != 4)
    {
      if (v9 == 3)
      {
        if (*(_DWORD *)(v5 + 16))
        {
          v10 = 0;
          v11 = a4;
          do
          {
            ++v10;
            v12 = v11 > 9;
            v11 /= 0xAu;
          }
          while (v12);
          if (v10 < 0
            || (v13 = (v10 + 3), __OFADD__(v10, 3))
            || (WTF::tryFastCompactMalloc((WTF *)(v13 + 20)), (v14 = v139[0]) == 0))
          {
            __break(0xC471u);
            JUMPOUT(0x1824B587CLL);
          }
          v15 = 0;
          *(_DWORD *)v139[0] = 2;
          *((_DWORD *)v14 + 1) = v13;
          *((_WORD *)v14 + 10) = 24415;
          *((_QWORD *)v14 + 1) = (char *)v14 + 20;
          *((_DWORD *)v14 + 4) = 4;
          *((_BYTE *)v14 + 22) = 105;
          v16 = a4;
          do
          {
            *((_BYTE *)&v139[1] + v15-- + 4) = (v16 % 0xA) | 0x30;
            v12 = v16 > 9;
            v16 /= 0xAu;
          }
          while (v12);
          if (v15 + 14 <= 13)
            memcpy((char *)v14 + 23, (char *)&v139[1] + v15 + 5, -v15);
          v17 = (_QWORD *)(*((_QWORD *)v8 + 5) + 312);
          v137 = 0uLL;
          *(_DWORD *)v14 += 2;
          v139[0] = (WTF *)&off_1E0FD2F10;
          v139[1] = 0;
          v140 = 0;
          v141 = v14;
          v18 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v17, &v137, (uint64_t)v139);
          v19 = v141;
          v139[0] = (WTF *)&off_1E0FD2F10;
          v141 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v19 -= 2;
          }
          v59 = *((_QWORD *)v8 + 5);
          v18[3] = *(_QWORD *)(v59 + 168);
          v60 = *(_QWORD *)(v59 + 312);
          if ((unint64_t)(*(_QWORD *)(v59 + 320) - v60) <= 0x4F)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v59 + 312));
            v60 = *(_QWORD *)(v59 + 312);
          }
          *(_BYTE *)(v60 + 56) = 0;
          *(_QWORD *)(v60 + 16) = 0;
          *(_QWORD *)(v60 + 24) = 0;
          *(_BYTE *)(v60 + 32) = 0;
          *(_QWORD *)v60 = off_1E0FD3060;
          *(_QWORD *)(v60 + 8) = 0;
          *(_QWORD *)(v60 + 64) = a2;
          *(_QWORD *)(v60 + 72) = v18;
          *(_QWORD *)(v59 + 312) += 80;
          v61 = *(unsigned int *)(v59 + 356);
          v132 = v6;
          if ((_DWORD)v61 == *(_DWORD *)(v59 + 352))
          {
            v62 = v61 + (v61 >> 2);
            if (v62 >= 0x10)
              v63 = v62 + 1;
            else
              v63 = 16;
            if (v63 <= v61 + 1)
              v64 = v61 + 1;
            else
              v64 = v63;
            if (v64 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824B588CLL);
            }
            v65 = *(void **)(v59 + 344);
            v66 = (void *)WTF::fastMalloc((WTF *)(8 * v64));
            *(_DWORD *)(v59 + 352) = v64;
            *(_QWORD *)(v59 + 344) = v66;
            memcpy(v66, v65, 8 * v61);
            if (v65)
            {
              if (*(void **)(v59 + 344) == v65)
              {
                *(_QWORD *)(v59 + 344) = 0;
                *(_DWORD *)(v59 + 352) = 0;
              }
              WTF::fastFree((WTF *)v65, v67);
            }
            v61 = *(unsigned int *)(v59 + 356);
            v68 = (_QWORD *)(*(_QWORD *)(v59 + 344) + 8 * v61);
          }
          else
          {
            v68 = (_QWORD *)(*(_QWORD *)(v59 + 344) + 8 * v61);
          }
          *v68 = v60;
          *(_DWORD *)(v59 + 356) = v61 + 1;
          *(_QWORD *)(v60 + 24) = *(_QWORD *)v5;
          v139[0] = 0;
          v139[1] = 0;
          WGSL::RewriteGlobalVariables::storeInitialValue(v133, v60, v139, a4 + 1, 1);
          v69 = (_QWORD *)(*((_QWORD *)v133 + 5) + 312);
          v137 = 0uLL;
          LODWORD(v135) = 0;
          v70 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(v69, &v137, (int *)&v135);
          v71 = *((_QWORD *)v133 + 5);
          v70[3] = *(_QWORD *)(v71 + 168);
          *(_DWORD *)v14 += 2;
          v72 = *(_QWORD *)(v71 + 312);
          if ((unint64_t)(*(_QWORD *)(v71 + 320) - v72) <= 0xB7)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v71 + 312));
            v72 = *(_QWORD *)(v71 + 312);
          }
          *(_QWORD *)v72 = &off_1E0FD38A0;
          *(_QWORD *)(v72 + 8) = 0;
          *(_QWORD *)(v72 + 32) = 0;
          *(_QWORD *)(v72 + 40) = 0;
          *(_QWORD *)(v72 + 16) = 0;
          *(_QWORD *)(v72 + 24) = &off_1E0FD2F10;
          *(_QWORD *)(v72 + 64) = 0;
          *(_QWORD *)(v72 + 72) = 0;
          *(_QWORD *)(v72 + 48) = v14;
          *(_QWORD *)(v72 + 56) = &off_1E0FD2F10;
          *(_DWORD *)v14 += 2;
          *(_QWORD *)(v72 + 80) = v14;
          *(_OWORD *)(v72 + 88) = 0u;
          *(_OWORD *)(v72 + 104) = 0u;
          *(_QWORD *)(v72 + 120) = v70;
          *(_WORD *)(v72 + 128) = 3;
          *(_BYTE *)(v72 + 160) = 0;
          *(_BYTE *)(v72 + 164) = 0;
          *(_BYTE *)(v72 + 168) = 0;
          *(_BYTE *)(v72 + 172) = 0;
          *(_BYTE *)(v72 + 176) = 0;
          *(_QWORD *)(v72 + 136) = 0;
          *(_QWORD *)(v72 + 144) = 0;
          *(_QWORD *)(v72 + 149) = 0;
          *(_QWORD *)(v72 + 144) = v70[3];
          *(_QWORD *)(v71 + 312) += 184;
          v73 = *(unsigned int *)(v71 + 356);
          if ((_DWORD)v73 == *(_DWORD *)(v71 + 352))
          {
            v74 = v73 + (v73 >> 2);
            if (v74 >= 0x10)
              v75 = v74 + 1;
            else
              v75 = 16;
            if (v75 <= v73 + 1)
              v76 = v73 + 1;
            else
              v76 = v75;
            if (v76 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1824B5894);
            }
            v77 = *(void **)(v71 + 344);
            v78 = (void *)WTF::fastMalloc((WTF *)(8 * v76));
            *(_DWORD *)(v71 + 352) = v76;
            *(_QWORD *)(v71 + 344) = v78;
            memcpy(v78, v77, 8 * v73);
            if (v77)
            {
              if (*(void **)(v71 + 344) == v77)
              {
                *(_QWORD *)(v71 + 344) = 0;
                *(_DWORD *)(v71 + 352) = 0;
              }
              WTF::fastFree((WTF *)v77, v79);
            }
            v73 = *(unsigned int *)(v71 + 356);
            v80 = (uint64_t *)(*(_QWORD *)(v71 + 344) + 8 * v73);
          }
          else
          {
            v80 = (uint64_t *)(*(_QWORD *)(v71 + 344) + 8 * v73);
          }
          *v80 = v72;
          *(_DWORD *)(v71 + 356) = v73 + 1;
          v81 = (_QWORD *)(*((_QWORD *)v133 + 5) + 312);
          v137 = 0uLL;
          v82 = WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>(v81, &v137, v72);
          v83 = *(_DWORD *)(v5 + 16);
          if (v83 != 1)
          {
            if (v83 != 2)
            {
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_185:
              __break(0xC471u);
              JUMPOUT(0x1824B5874);
            }
            v84 = *(_QWORD *)(v5 + 8);
            v85 = *((_QWORD *)v133 + 5);
LABEL_124:
            v96 = *(_QWORD *)(v85 + 312);
            if ((unint64_t)(*(_QWORD *)(v85 + 320) - v96) <= 0x57)
            {
              WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v85 + 312));
              v96 = *(_QWORD *)(v85 + 312);
            }
            *(_BYTE *)(v96 + 56) = 0;
            *(_QWORD *)(v96 + 16) = 0;
            *(_QWORD *)(v96 + 24) = 0;
            *(_BYTE *)(v96 + 32) = 0;
            *(_QWORD *)v96 = off_1E0FD3038;
            *(_QWORD *)(v96 + 8) = 0;
            *(_QWORD *)(v96 + 64) = v18;
            *(_QWORD *)(v96 + 72) = v84;
            *(_BYTE *)(v96 + 80) = 14;
            *(_QWORD *)(v85 + 312) += 88;
            v97 = *(unsigned int *)(v85 + 356);
            if ((_DWORD)v97 == *(_DWORD *)(v85 + 352))
            {
              v98 = v97 + (v97 >> 2);
              if (v98 >= 0x10)
                v99 = v98 + 1;
              else
                v99 = 16;
              if (v99 <= v97 + 1)
                v100 = v97 + 1;
              else
                v100 = v99;
              if (v100 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1824B589CLL);
              }
              v101 = *(void **)(v85 + 344);
              v102 = (void *)WTF::fastMalloc((WTF *)(8 * v100));
              *(_DWORD *)(v85 + 352) = v100;
              *(_QWORD *)(v85 + 344) = v102;
              memcpy(v102, v101, 8 * v97);
              if (v101)
              {
                if (*(void **)(v85 + 344) == v101)
                {
                  *(_QWORD *)(v85 + 344) = 0;
                  *(_DWORD *)(v85 + 352) = 0;
                }
                WTF::fastFree((WTF *)v101, v103);
              }
              v97 = *(unsigned int *)(v85 + 356);
              v104 = (_QWORD *)(*(_QWORD *)(v85 + 344) + 8 * v97);
            }
            else
            {
              v104 = (_QWORD *)(*(_QWORD *)(v85 + 344) + 8 * v97);
            }
            *v104 = v96;
            *(_DWORD *)(v85 + 356) = v97 + 1;
            v105 = *((_QWORD *)v133 + 5);
            *(_QWORD *)(v96 + 24) = *(_QWORD *)(v105 + 152);
            v137 = 0uLL;
            LODWORD(v135) = 1;
            v106 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>((_QWORD *)(v105 + 312), &v137, (int *)&v135);
            v107 = *((_QWORD *)v133 + 5);
            v106[3] = *(_QWORD *)(v107 + 168);
            v108 = *(_QWORD *)(v107 + 312);
            if ((unint64_t)(*(_QWORD *)(v107 + 320) - v108) <= 0x2F)
            {
              WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v107 + 312));
              v108 = *(_QWORD *)(v107 + 312);
            }
            *(_QWORD *)v108 = &off_1E0FD4650;
            *(_QWORD *)(v108 + 8) = 0;
            *(_QWORD *)(v108 + 16) = 0;
            *(_QWORD *)(v108 + 24) = v18;
            *(_QWORD *)(v108 + 32) = v106;
            *(_BYTE *)(v108 + 40) = 0;
            *(_QWORD *)(v107 + 312) += 48;
            v109 = *(unsigned int *)(v107 + 356);
            if ((_DWORD)v109 == *(_DWORD *)(v107 + 352))
            {
              v110 = v109 + (v109 >> 2);
              if (v110 >= 0x10)
                v111 = v110 + 1;
              else
                v111 = 16;
              if (v111 <= v109 + 1)
                v112 = v109 + 1;
              else
                v112 = v111;
              if (v112 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1824B58A4);
              }
              v113 = *(void **)(v107 + 344);
              v114 = (void *)WTF::fastMalloc((WTF *)(8 * v112));
              *(_DWORD *)(v107 + 352) = v112;
              *(_QWORD *)(v107 + 344) = v114;
              memcpy(v114, v113, 8 * v109);
              if (v113)
              {
                if (*(void **)(v107 + 344) == v113)
                {
                  *(_QWORD *)(v107 + 344) = 0;
                  *(_DWORD *)(v107 + 352) = 0;
                }
                WTF::fastFree((WTF *)v113, v115);
              }
              v109 = *(unsigned int *)(v107 + 356);
              v116 = (_QWORD *)(*(_QWORD *)(v107 + 344) + 8 * v109);
            }
            else
            {
              v116 = (_QWORD *)(*(_QWORD *)(v107 + 344) + 8 * v109);
            }
            *v116 = v108;
            *(_DWORD *)(v107 + 356) = v109 + 1;
            v117 = (_QWORD *)(*((_QWORD *)v133 + 5) + 312);
            v137 = 0uLL;
            v135 = 0;
            v136 = 0;
            v119 = WGSL::AST::Builder::construct<WGSL::AST::CompoundStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,void>(v117, &v137, (uint64_t *)&v135, (uint64_t *)v139);
            v120 = v135;
            if (v135)
            {
              v135 = 0;
              LODWORD(v136) = 0;
              WTF::fastFree(v120, v118);
            }
            v121 = *((_QWORD *)v133 + 5);
            v122 = *(_QWORD **)(v121 + 312);
            if (*(_QWORD *)(v121 + 320) - (_QWORD)v122 <= 0x37uLL)
            {
              WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v121 + 312));
              v122 = *(_QWORD **)(v121 + 312);
            }
            *v122 = &off_1E0FD4678;
            v122[1] = 0;
            v122[2] = 0;
            v122[3] = v82;
            v122[4] = v96;
            v122[5] = v108;
            v122[6] = v119;
            *(_QWORD *)(v121 + 312) += 56;
            v123 = *(unsigned int *)(v121 + 356);
            if ((_DWORD)v123 == *(_DWORD *)(v121 + 352))
            {
              v124 = v123 + (v123 >> 2);
              if (v124 >= 0x10)
                v125 = v124 + 1;
              else
                v125 = 16;
              if (v125 <= v123 + 1)
                v126 = v123 + 1;
              else
                v126 = v125;
              if (v126 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1824B58ACLL);
              }
              v127 = *(void **)(v121 + 344);
              v128 = (void *)WTF::fastMalloc((WTF *)(8 * v126));
              *(_DWORD *)(v121 + 352) = v126;
              *(_QWORD *)(v121 + 344) = v128;
              memcpy(v128, v127, 8 * v123);
              v129 = v132;
              if (v127)
              {
                if (*(void **)(v121 + 344) == v127)
                {
                  *(_QWORD *)(v121 + 344) = 0;
                  *(_DWORD *)(v121 + 352) = 0;
                }
                WTF::fastFree((WTF *)v127, v118);
              }
              v123 = *(unsigned int *)(v121 + 356);
              v130 = (_QWORD *)(*(_QWORD *)(v121 + 344) + 8 * v123);
            }
            else
            {
              v130 = (_QWORD *)(*(_QWORD *)(v121 + 344) + 8 * v123);
              v129 = v132;
            }
            *v130 = v122;
            *(_DWORD *)(v121 + 356) = v123 + 1;
            *(_QWORD *)&v137 = v122;
            v131 = *(unsigned int *)(v129 + 12);
            if ((_DWORD)v131 == *(_DWORD *)(v129 + 8))
            {
              *(_QWORD *)(*(_QWORD *)v129 + 8 * (*(_DWORD *)(v129 + 12))++) = *(_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129, v131 + 1, (unint64_t)&v137);
              result = v139[0];
              if (!v139[0])
              {
LABEL_179:
                if (*(_DWORD *)v14 == 2)
                  return (WTF *)WTF::StringImpl::destroy();
                *(_DWORD *)v14 -= 2;
                return result;
              }
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v129 + 8 * v131) = v122;
              ++*(_DWORD *)(v129 + 12);
              result = v139[0];
              if (!v139[0])
                goto LABEL_179;
            }
            v139[0] = 0;
            LODWORD(v139[1]) = 0;
            result = (WTF *)WTF::fastFree(result, v118);
            goto LABEL_179;
          }
          v86 = *((_QWORD *)v133 + 5);
          v84 = *(_QWORD *)(v86 + 312);
          if ((unint64_t)(*(_QWORD *)(v86 + 320) - v84) <= 0x47)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v86 + 312));
            v84 = *(_QWORD *)(v86 + 312);
          }
          v87 = *(_DWORD *)(v5 + 8);
          *(_BYTE *)(v84 + 56) = 0;
          *(_QWORD *)(v84 + 16) = 0;
          *(_QWORD *)(v84 + 24) = 0;
          *(_BYTE *)(v84 + 32) = 0;
          *(_QWORD *)v84 = off_1E0FD2F60;
          *(_QWORD *)(v84 + 8) = 0;
          *(_DWORD *)(v84 + 64) = v87;
          *(_QWORD *)(v86 + 312) += 72;
          v88 = *(unsigned int *)(v86 + 356);
          if ((_DWORD)v88 != *(_DWORD *)(v86 + 352))
          {
            v95 = (_QWORD *)(*(_QWORD *)(v86 + 344) + 8 * v88);
LABEL_123:
            *v95 = v84;
            *(_DWORD *)(v86 + 356) = v88 + 1;
            v85 = *((_QWORD *)v133 + 5);
            *(_QWORD *)(v84 + 24) = *(_QWORD *)(v85 + 168);
            goto LABEL_124;
          }
          v89 = v88 + (v88 >> 2);
          if (v89 >= 0x10)
            v90 = v89 + 1;
          else
            v90 = 16;
          if (v90 <= v88 + 1)
            v91 = v88 + 1;
          else
            v91 = v90;
          if (!(v91 >> 29))
          {
            v92 = *(void **)(v86 + 344);
            v93 = (void *)WTF::fastMalloc((WTF *)(8 * v91));
            *(_DWORD *)(v86 + 352) = v91;
            *(_QWORD *)(v86 + 344) = v93;
            memcpy(v93, v92, 8 * v88);
            if (v92)
            {
              if (*(void **)(v86 + 344) == v92)
              {
                *(_QWORD *)(v86 + 344) = 0;
                *(_DWORD *)(v86 + 352) = 0;
              }
              WTF::fastFree((WTF *)v92, v94);
            }
            v88 = *(unsigned int *)(v86 + 356);
            v95 = (_QWORD *)(*(_QWORD *)(v86 + 344) + 8 * v88);
            goto LABEL_123;
          }
          __break(0xC471u);
        }
        else
        {
          __break(0xC471u);
        }
        JUMPOUT(0x1824B57DCLL);
      }
      goto LABEL_18;
    }
    result = (WTF *)std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>((uint64_t)v139, v5);
    if ((_DWORD)result)
      return WGSL::RewriteGlobalVariables::storeInitialValue(WGSL::AST::Expression &,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul> &,unsigned int,BOOL)::$_0::operator()(v138);
    v23 = *(unsigned int *)(*(_QWORD *)v5 + 84);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v5 + 72);
      for (i = 8 * v23; i; i -= 8)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 104) + 24);
        v28 = *((_QWORD *)v8 + 5);
        v29 = *(_DWORD **)(*(_QWORD *)v24 + 48);
        if (v29)
          *v29 += 2;
        v30 = *(_QWORD *)(v28 + 312);
        if ((unint64_t)(*(_QWORD *)(v28 + 320) - v30) <= 0x87)
        {
          WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v28 + 312));
          v30 = *(_QWORD *)(v28 + 312);
        }
        *(_BYTE *)(v30 + 56) = 0;
        *(_QWORD *)(v30 + 16) = 0;
        *(_QWORD *)(v30 + 24) = 0;
        *(_BYTE *)(v30 + 32) = 0;
        *(_QWORD *)v30 = off_1E0FD3878;
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 80) = 0;
        *(_QWORD *)(v30 + 88) = 0;
        *(_QWORD *)(v30 + 64) = a2;
        *(_QWORD *)(v30 + 72) = &off_1E0FD2F10;
        *(_QWORD *)(v30 + 112) = 0;
        *(_QWORD *)(v30 + 120) = 0;
        *(_QWORD *)(v30 + 96) = v29;
        *(_QWORD *)(v30 + 104) = &off_1E0FD2F10;
        if (v29)
          *v29 += 2;
        *(_QWORD *)(v30 + 128) = v29;
        *(_QWORD *)(v28 + 312) += 136;
        v31 = *(unsigned int *)(v28 + 356);
        if ((_DWORD)v31 == *(_DWORD *)(v28 + 352))
        {
          v32 = v6;
          v33 = v31 + (v31 >> 2);
          if (v33 >= 0x10)
            v34 = v33 + 1;
          else
            v34 = 16;
          if (v34 <= v31 + 1)
            v35 = v31 + 1;
          else
            v35 = v34;
          if (v35 >> 29)
            goto LABEL_185;
          v36 = *(void **)(v28 + 344);
          v37 = (void *)WTF::fastMalloc((WTF *)(8 * v35));
          *(_DWORD *)(v28 + 352) = v35;
          *(_QWORD *)(v28 + 344) = v37;
          memcpy(v37, v36, 8 * v31);
          v6 = v32;
          v8 = v133;
          if (v36)
          {
            if (*(void **)(v28 + 344) == v36)
            {
              *(_QWORD *)(v28 + 344) = 0;
              *(_DWORD *)(v28 + 352) = 0;
            }
            WTF::fastFree((WTF *)v36, v38);
          }
          v31 = *(unsigned int *)(v28 + 356);
          v26 = (_QWORD *)(*(_QWORD *)(v28 + 344) + 8 * v31);
        }
        else
        {
          v26 = (_QWORD *)(*(_QWORD *)(v28 + 344) + 8 * v31);
        }
        *v26 = v30;
        *(_DWORD *)(v28 + 356) = v31 + 1;
        *(_QWORD *)(v30 + 24) = v27;
        result = (WTF *)WGSL::RewriteGlobalVariables::storeInitialValue(v8, v30, v6, a4, 1);
        v24 += 8;
      }
    }
  }
  return result;
}

WTF *WGSL::RewriteGlobalVariables::storeInitialValue(WGSL::AST::Expression &,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul> &,unsigned int,BOOL)::$_0::operator()(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  WTF *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _DWORD *v35;
  __int128 v36;

  v2 = *a1;
  v3 = (_QWORD *)(*(_QWORD *)(*a1 + 40) + 312);
  v36 = 0uLL;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)&v33 + 1) = 0;
  v34 = 0;
  *(_QWORD *)&v33 = &off_1E0FD2F10;
  v4 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v3, &v36, (uint64_t)&v33);
  v5 = v35;
  *(_QWORD *)&v33 = &off_1E0FD2F10;
  v35 = 0;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  v4[3] = *(_QWORD *)(a1[1] + 24);
  v6 = (_QWORD *)(*(_QWORD *)(v2 + 40) + 312);
  v33 = 0uLL;
  v36 = 0uLL;
  v8 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(v6, &v33, (uint64_t)v4, (uint64_t *)&v36);
  result = (WTF *)v36;
  if ((_QWORD)v36)
  {
    *(_QWORD *)&v36 = 0;
    DWORD2(v36) = 0;
    result = (WTF *)WTF::fastFree(result, v7);
  }
  v10 = a1[1];
  v8[3] = *(_QWORD *)(v10 + 24);
  *((_BYTE *)v8 + 88) = 1;
  *(_QWORD *)(v10 + 24) = 0;
  v11 = *(_QWORD *)(v2 + 40);
  v12 = *(_QWORD **)(v11 + 312);
  if (*(_QWORD *)(v11 + 320) - (_QWORD)v12 <= 0x27uLL)
  {
    v23 = WTF::fastMalloc((WTF *)0x4000);
    *(_QWORD *)&v33 = v23;
    v25 = *(unsigned int *)(v11 + 340);
    if ((_DWORD)v25 == *(_DWORD *)(v11 + 336))
    {
      v26 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 328, v25 + 1, (unint64_t)&v33);
      v25 = *(unsigned int *)(v11 + 340);
      v27 = *(_QWORD *)(v11 + 328);
      v28 = *(_QWORD *)v26;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v27 + 8 * v25) = v28;
      v29 = (WTF *)v33;
    }
    else
    {
      v30 = v23;
      v29 = 0;
      v31 = *(_QWORD *)(v11 + 328);
      *(_QWORD *)&v33 = 0;
      *(_QWORD *)(v31 + 8 * v25) = v30;
    }
    *(_DWORD *)(v11 + 340) = v25 + 1;
    result = (WTF *)WTF::fastFree(v29, v24);
    v32 = *(unsigned int *)(v11 + 340);
    if (!(_DWORD)v32)
      goto LABEL_31;
    v12 = *(_QWORD **)(*(_QWORD *)(v11 + 328) + 8 * v32 - 8);
    *(_QWORD *)(v11 + 312) = v12;
    *(_QWORD *)(v11 + 320) = v12 + 2048;
  }
  *v12 = &off_1E0FD38F8;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v10;
  v12[4] = v8;
  *(_QWORD *)(v11 + 312) += 40;
  v13 = *(unsigned int *)(v11 + 356);
  if ((_DWORD)v13 != *(_DWORD *)(v11 + 352))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 344) + 8 * v13);
    goto LABEL_22;
  }
  v14 = v13 + (v13 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= v13 + 1)
    v16 = v13 + 1;
  else
    v16 = v15;
  if (v16 >> 29)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x1824B5B64);
  }
  v17 = *(void **)(v11 + 344);
  v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
  *(_DWORD *)(v11 + 352) = v16;
  *(_QWORD *)(v11 + 344) = v18;
  result = (WTF *)memcpy(v18, v17, 8 * v13);
  if (v17)
  {
    if (*(void **)(v11 + 344) == v17)
    {
      *(_QWORD *)(v11 + 344) = 0;
      *(_DWORD *)(v11 + 352) = 0;
    }
    result = (WTF *)WTF::fastFree((WTF *)v17, v19);
  }
  v13 = *(unsigned int *)(v11 + 356);
  v20 = (_QWORD *)(*(_QWORD *)(v11 + 344) + 8 * v13);
LABEL_22:
  *v20 = v12;
  *(_DWORD *)(v11 + 356) = v13 + 1;
  v21 = a1[2];
  *(_QWORD *)&v33 = v12;
  v22 = *(unsigned int *)(v21 + 12);
  if ((_DWORD)v22 == *(_DWORD *)(v21 + 8))
  {
    result = (WTF *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v33);
    *(_QWORD *)(*(_QWORD *)v21 + 8 * *(unsigned int *)(v21 + 12)) = *(_QWORD *)result;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v12;
  }
  ++*(_DWORD *)(v21 + 12);
  return result;
}

WTF *WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, _QWORD *a4)
{
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  int i;
  unsigned int v15;
  WTF *v16;
  WTF *result;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v8 = *a2;
    if (!*a2)
    {
      v9 = 0;
      v10 = *a3;
      v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *a3;
  v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100)
    goto LABEL_6;
LABEL_4:
  v12 = v11 >> 8;
LABEL_7:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF *)(v8 + 16 * (v12 & v9));
    result = *(WTF **)v16;
    if (*(_QWORD *)v16 == -1)
    {
      v13 = (WTF *)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        result = 0;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        --*(_DWORD *)(*a2 - 16);
        v16 = v13;
      }
      v20 = *a3;
      if (*a3)
        *(_DWORD *)v20 += 2;
      *(_QWORD *)v16 = v20;
      *((_QWORD *)v16 + 1) = *a4;
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        v21 = *a2;
        if (*a2)
          goto LABEL_21;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v21 = *a2;
        if (*a2)
        {
LABEL_21:
          v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
          v23 = *(unsigned int *)(v21 - 4);
          if (v23 <= 0x400)
            goto LABEL_22;
          goto LABEL_30;
        }
      }
      v22 = *(unsigned int *)(v21 - 16);
      v23 = *(unsigned int *)(v21 - 4);
      if (v23 <= 0x400)
      {
LABEL_22:
        if (3 * v23 > 4 * v22)
        {
LABEL_33:
          v25 = v21 + 16 * v23;
          v24 = 1;
          goto LABEL_34;
        }
        if (!(_DWORD)v23)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (WTF::StringImpl **)v16);
          v16 = result;
          v21 = *a2;
          if (!*a2)
          {
LABEL_25:
            v23 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v23 = *(unsigned int *)(v21 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), (WTF::StringImpl **)v16);
        v16 = result;
        v21 = *a2;
        if (!*a2)
          goto LABEL_25;
        goto LABEL_32;
      }
LABEL_30:
      if (v23 > 2 * v22)
        goto LABEL_33;
      goto LABEL_31;
    }
    result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v12 = i + v15;
  }
  v18 = *a2;
  if (*a2)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v24 = 0;
  v25 = v18 + 16 * v19;
LABEL_34:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

void WGSL::RewriteGlobalVariables::~RewriteGlobalVariables(WGSL::RewriteGlobalVariables *this, void *a2)
{
  WGSL::RewriteGlobalVariables::~RewriteGlobalVariables(this, a2);
  JUMPOUT(0x186DAB2A8);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  WTF *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  WTF **v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  _DWORD *v34;
  _DWORD *v35;

  *(_QWORD *)this = &off_1E0FD3BB0;
  v3 = *((_QWORD *)this + 31);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 30);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 26);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *((_QWORD *)this + 22);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = (WTF *)*((_QWORD *)this + 20);
  if (v7)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 17);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
  v9 = *((_QWORD *)this + 15);
  if (v9)
    WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::deallocateTable(v9, a2);
  v10 = *((_QWORD *)this + 14);
  if (v10)
    WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::deallocateTable(v10, a2);
  v11 = (WTF *)*((_QWORD *)this + 12);
  while (v11)
  {
    v16 = v11;
    v11 = (WTF *)*((_QWORD *)v11 + 2);
    v17 = *(_DWORD **)v16;
    *(_QWORD *)v16 = 0;
    if (v17)
    {
      if (*v17 == 2)
        WTF::StringImpl::destroy();
      else
        *v17 -= 2;
    }
    WTF::fastFree(v16, a2);
  }
  v12 = *((_QWORD *)this + 11);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), a2);
  v13 = *((_QWORD *)this + 10);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      v15 = (_DWORD **)*((_QWORD *)this + 10);
      do
      {
        v18 = *v15;
        if (*v15 != (_DWORD *)-1)
        {
          *v15 = 0;
          if (v18)
          {
            if (*v18 == 2)
              WTF::StringImpl::destroy();
            else
              *v18 -= 2;
          }
        }
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  v19 = *((_QWORD *)this + 9);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), a2);
  v20 = *((_QWORD *)this + 8);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_DWORD *)(v20 + 24 * i) != -2)
        {
          v23 = v20 + 24 * i;
          v24 = (WTF **)(v23 + 8);
          v25 = *(unsigned int *)(v23 + 20);
          if ((_DWORD)v25)
          {
            v26 = 16 * v25;
            v27 = (_DWORD **)((char *)*v24 + 8);
            do
            {
              v28 = *v27;
              *v27 = 0;
              if (v28)
              {
                if (*v28 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v28 -= 2;
              }
              v27 += 2;
              v26 -= 16;
            }
            while (v26);
          }
          v29 = *v24;
          if (*v24)
          {
            *v24 = 0;
            *(_DWORD *)(v20 + 24 * i + 16) = 0;
            WTF::fastFree(v29, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v20 - 16), a2);
  }
  v30 = *((_QWORD *)this + 7);
  if (v30)
    WTF::fastFree((WTF *)(v30 - 16), a2);
  v31 = *((_QWORD *)this + 6);
  if (v31)
  {
    v32 = *(unsigned int *)(v31 - 4);
    if ((_DWORD)v32)
    {
      v33 = (_DWORD **)*((_QWORD *)this + 6);
      do
      {
        v34 = *v33;
        if (*v33 != (_DWORD *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*v34 == 2)
              WTF::StringImpl::destroy();
            else
              *v34 -= 2;
          }
        }
        v33 += 4;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v31 - 16), a2);
  }
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v35 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v35)
    {
      if (*v35 == 2)
        WTF::StringImpl::destroy();
      else
        *v35 -= 2;
    }
  }
}

void std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::IdentifierExpression &,std::reference_wrapper<WGSL::AST::Expression>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Expression>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::IdentifierExpression &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

_QWORD *std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::IdentifierExpression &,std::reference_wrapper<WGSL::AST::Expression>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Expression>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::IdentifierExpression &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FD3DF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::IdentifierExpression &,std::reference_wrapper<WGSL::AST::Expression>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Expression>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::IdentifierExpression &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FD3DF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::IdentifierExpression &,std::reference_wrapper<WGSL::AST::Expression>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Expression>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::IdentifierExpression &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_DWORD *)(v1 + 12);
  if (v2)
    *(_DWORD *)(v1 + 12) = v2 - 1;
  else
    __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v4;
  char v5;

  *(_QWORD *)a1 = off_1E0FD3F48;
  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return a1;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return a1;
LABEL_7:
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_1E0FD3F48;
  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
LABEL_7:
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char v8;

  v2 = (char *)operator new(0x70uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD3F48;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v8, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD2E98;
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v3 + 10) = &off_1E0FD2F10;
  v6 = *(_DWORD **)(a1 + 104);
  if (v6)
    *v6 += 2;
  *((_QWORD *)v3 + 13) = v6;
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  char v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD3F48;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD3E88[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD2E98;
  *(_QWORD *)(a2 + 80) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(v3 + 88);
  *(_QWORD *)(a2 + 80) = &off_1E0FD2F10;
  v8 = *(_DWORD **)(v3 + 104);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 104) = v8;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  result = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (result)
  {
    if (*result == 2)
    {
      result = (_DWORD *)WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return result;
      goto LABEL_7;
    }
    *result -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return result;
LABEL_7:
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v4, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  __p[10] = &off_1E0FD2F10;
  v2 = (_DWORD *)__p[13];
  __p[13] = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      __p[2] = off_1E0FD2EC0;
      if (!*((_BYTE *)__p + 72))
        goto LABEL_5;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  __p[2] = off_1E0FD2EC0;
  if (!*((_BYTE *)__p + 72))
  {
LABEL_5:
    operator delete(__p);
    return;
  }
LABEL_7:
  v3 = *((unsigned int *)__p + 16);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  ((void (*)(char *, _QWORD *))off_1E0FD3E30[v3])(&v4, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  char v10;
  char v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(WTF **)(v3 + 72);
  if (v4)
  {
    *(_QWORD *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)v3 = off_1E0FD2EC0;
  if (*(_BYTE *)(v3 + 56))
  {
    v5 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v5])(&v10, v3 + 32);
    *(_DWORD *)(v3 + 48) = -1;
  }
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v6 = &off_1E0FD2EE8;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v6 = off_1E0FD2EC0;
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v6 + 48) = -1;
    v7 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v7])(&v11, v6 + 32, a1 + 48);
      *(_DWORD *)(v6 + 48) = v7;
    }
    *(_BYTE *)(v6 + 56) = 1;
  }
  *(_QWORD *)v6 = off_1E0FD2E98;
  *(_QWORD *)(v6 + 64) = &off_1E0FD2EE8;
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v6 + 72) = result;
  *(_QWORD *)(v6 + 64) = &off_1E0FD2F10;
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(v6 + 88) = v9;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v5;
  char v6;

  *(_QWORD *)a1 = off_1E0FD3F90;
  *(_QWORD *)(a1 + 120) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (!v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 88) = &off_1E0FD2F10;
    v3 = *(_DWORD **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (!v3)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(_QWORD *)(a1 + 88) = &off_1E0FD2F10;
  v3 = *(_DWORD **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (!v3)
    goto LABEL_9;
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
    if (!*(_BYTE *)(a1 + 72))
      return a1;
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return a1;
LABEL_12:
  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3E30[v5])(&v6, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = off_1E0FD3F90;
  *(_QWORD *)(a1 + 120) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (!v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 88) = &off_1E0FD2F10;
    v3 = *(_DWORD **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (!v3)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(_QWORD *)(a1 + 88) = &off_1E0FD2F10;
  v3 = *(_DWORD **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (!v3)
    goto LABEL_9;
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
    if (!*(_BYTE *)(a1 + 72))
      return MEMORY[0x186DAB2A8](a1, 0x10F3C4017795E29);
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return MEMORY[0x186DAB2A8](a1, 0x10F3C4017795E29);
LABEL_12:
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v6, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x186DAB2A8](a1, 0x10F3C4017795E29);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  char v10;

  v2 = (char *)operator new(0x98uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD3F90;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v10, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD3878;
  v6 = *(_QWORD *)(a1 + 80);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(a1 + 96);
  *((_QWORD *)v3 + 10) = v6;
  *((_QWORD *)v3 + 11) = &off_1E0FD2F10;
  v7 = *(_DWORD **)(a1 + 112);
  if (v7)
    *v7 += 2;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(a1 + 128);
  *((_QWORD *)v3 + 14) = v7;
  *((_QWORD *)v3 + 15) = &off_1E0FD2F10;
  v8 = *(_DWORD **)(a1 + 144);
  if (v8)
    *v8 += 2;
  *((_QWORD *)v3 + 18) = v8;
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  char v10;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD3F90;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD3E88[v7])(&v10);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD3878;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(a2 + 88) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 96);
  *(_QWORD *)(a2 + 88) = &off_1E0FD2F10;
  v8 = *(_DWORD **)(v3 + 112);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 112) = v8;
  *(_QWORD *)(a2 + 120) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v3 + 128);
  *(_QWORD *)(a2 + 120) = &off_1E0FD2F10;
  v9 = *(_DWORD **)(v3 + 144);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(a2 + 144) = v9;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *result;
  uint64_t v4;
  char v5;

  *(_QWORD *)(a1 + 120) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (!v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 88) = &off_1E0FD2F10;
    result = *(_DWORD **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (!result)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(_QWORD *)(a1 + 88) = &off_1E0FD2F10;
  result = *(_DWORD **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (!result)
    goto LABEL_9;
LABEL_7:
  if (*result == 2)
  {
    result = (_DWORD *)WTF::StringImpl::destroy();
    *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
    if (!*(_BYTE *)(a1 + 72))
      return result;
    goto LABEL_12;
  }
  *result -= 2;
LABEL_9:
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return result;
LABEL_12:
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  char v5;

  __p[15] = &off_1E0FD2F10;
  v2 = (_DWORD *)__p[18];
  __p[18] = 0;
  if (!v2)
  {
LABEL_4:
    __p[11] = &off_1E0FD2F10;
    v3 = (_DWORD *)__p[14];
    __p[14] = 0;
    if (!v3)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  __p[11] = &off_1E0FD2F10;
  v3 = (_DWORD *)__p[14];
  __p[14] = 0;
  if (!v3)
    goto LABEL_9;
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    __p[2] = off_1E0FD2EC0;
    if (!*((_BYTE *)__p + 72))
      goto LABEL_10;
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  __p[2] = off_1E0FD2EC0;
  if (!*((_BYTE *)__p + 72))
  {
LABEL_10:
    operator delete(__p);
    return;
  }
LABEL_12:
  v4 = *((unsigned int *)__p + 16);
  if ((_DWORD)v4 == -1)
    goto LABEL_10;
  ((void (*)(char *, _QWORD *))off_1E0FD3E30[v4])(&v5, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  char v11;
  char v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(WTF **)(v3 + 72);
  if (v4)
  {
    *(_QWORD *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)v3 = off_1E0FD2EC0;
  if (*(_BYTE *)(v3 + 56))
  {
    v5 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v5])(&v11, v3 + 32);
    *(_DWORD *)(v3 + 48) = -1;
  }
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v6 = &off_1E0FD2EE8;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v6 = off_1E0FD2EC0;
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v6 + 48) = -1;
    v7 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v7])(&v12, v6 + 32, a1 + 48);
      *(_DWORD *)(v6 + 48) = v7;
    }
    *(_BYTE *)(v6 + 56) = 1;
  }
  *(_QWORD *)v6 = off_1E0FD3878;
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v6 + 72) = &off_1E0FD2EE8;
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(v6 + 72) = &off_1E0FD2F10;
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = &off_1E0FD2EE8;
  result = *(__n128 *)(a1 + 128);
  *(__n128 *)(v6 + 112) = result;
  *(_QWORD *)(v6 + 104) = &off_1E0FD2F10;
  v10 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(v6 + 128) = v10;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD3FD8;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD3FD8;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C403B4B6AF4);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD3FD8;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD3060;
  *((_OWORD *)v3 + 5) = *(_OWORD *)(a1 + 80);
  return v3;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  char v9;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = off_1E0FD3FD8;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *))off_1E0FD3E88[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD3060;
  result = *(__n128 *)(a1 + 80);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(result + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(result + 72))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v3, result + 48);
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  char v3;

  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v2 = *((unsigned int *)__p + 16);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD3E30[v2])(&v3, __p + 6);
  }
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 48);
    v4 = v2;
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v7, v2 + 32);
      v4 = *(_QWORD *)(a1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    v2 = v4;
  }
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v5])(&v8, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD3060;
  result = *(__n128 *)(a1 + 80);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

void WGSL::AST::IdentityExpression::~IdentityExpression(WGSL::AST::IdentityExpression *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD3E30[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD3E30[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40CABE6EB0);
}

uint64_t WGSL::AST::IdentityExpression::kind(WGSL::AST::IdentityExpression *this)
{
  return 23;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD4048;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD4048;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40818A7305);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = (char *)operator new(0x68uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD4048;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD3038;
  *((_OWORD *)v3 + 5) = *(_OWORD *)(a1 + 80);
  v3[96] = *(_BYTE *)(a1 + 96);
  return v3;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  char v9;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = off_1E0FD4048;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *))off_1E0FD3E88[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD3038;
  result = *(__n128 *)(a1 + 80);
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a1 + 96);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(result + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(result + 72))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v3, result + 48);
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  char v3;

  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v2 = *((unsigned int *)__p + 16);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD3E30[v2])(&v3, __p + 6);
  }
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 48);
    v4 = v2;
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v7, v2 + 32);
      v4 = *(_QWORD *)(a1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    v2 = v4;
  }
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v5])(&v8, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD3038;
  result = *(__n128 *)(a1 + 80);
  *(_BYTE *)(v2 + 80) = *(_BYTE *)(a1 + 96);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD4090;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD4090;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40538DE310);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD4090;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD3140;
  *((_QWORD *)v3 + 10) = *(_QWORD *)(a1 + 80);
  v3[88] = *(_BYTE *)(a1 + 88);
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD4090;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD3E88[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD3140;
  v8 = *(_QWORD *)(v3 + 80);
  *(_BYTE *)(a2 + 88) = *(_BYTE *)(v3 + 88);
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(result + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(result + 72))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v3, result + 48);
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  char v3;

  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v2 = *((unsigned int *)__p + 16);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD3E30[v2])(&v3, __p + 6);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 48);
    v4 = v2;
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v7, v2 + 32);
      v4 = *(_QWORD *)(v1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    v2 = v4;
  }
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(v1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v5])(&v8, v2 + 32, v1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD3140;
  v6 = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(v2 + 72) = *(_BYTE *)(v1 + 88);
  *(_QWORD *)(v2 + 64) = v6;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = off_1E0FD40D8;
  v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v6, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = off_1E0FD40D8;
  v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v6, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40E4E4A046);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *result;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  result = (char *)operator new(0x70uLL);
  v3 = result;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = off_1E0FD40D8;
  *((_QWORD *)result + 1) = v4;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)result + 2) = off_1E0FD2EC0;
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  result[48] = 0;
  result[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)result + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      result = (char *)((uint64_t (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v22, result + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD2F38;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(unsigned int *)(a1 + 100);
  *((_QWORD *)v3 + 11) = 0;
  *((_QWORD *)v3 + 12) = 0;
  *((_QWORD *)v3 + 10) = v6;
  *((_DWORD *)v3 + 25) = v7;
  if (!(_DWORD)v7)
    goto LABEL_17;
  if (!(v7 >> 29))
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    *((_DWORD *)v3 + 24) = v7;
    *((_QWORD *)v3 + 11) = v8;
    v9 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(a1 + 88);
      v11 = (v9 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v11 < 3)
      {
        v12 = *(uint64_t **)(a1 + 88);
      }
      else
      {
        v12 = *(uint64_t **)(a1 + 88);
        if ((unint64_t)v8 - v10 >= 0x20)
        {
          v13 = v11 + 1;
          v14 = v13 & 0x3FFFFFFFFFFFFFFCLL;
          v15 = &v8[v14];
          v12 = (uint64_t *)(v10 + v14 * 8);
          v16 = (__int128 *)(v10 + 16);
          v17 = v8 + 2;
          v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v19 = *v16;
            *(v17 - 1) = *(v16 - 1);
            *v17 = v19;
            v16 += 2;
            v17 += 2;
            v18 -= 4;
          }
          while (v18);
          v8 = v15;
          if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_17;
        }
      }
      v20 = (uint64_t *)(v10 + 8 * v9);
      do
      {
        v21 = *v12++;
        *v8++ = v21;
      }
      while (v12 != v20);
    }
LABEL_17:
    *((_WORD *)v3 + 52) = *(_WORD *)(a1 + 104);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD40D8;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD3E88[v7])(&v22);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD2F38;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v3 + 80);
  v8 = *(unsigned int *)(v3 + 100);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 100) = v8;
  if (!(_DWORD)v8)
    goto LABEL_17;
  if (!(v8 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a2 + 96) = v8;
    *(_QWORD *)(a2 + 88) = result;
    v9 = *(unsigned int *)(v3 + 100);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v3 + 88);
      v11 = (v9 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v11 < 3)
      {
        v12 = *(uint64_t **)(v3 + 88);
      }
      else
      {
        v12 = *(uint64_t **)(v3 + 88);
        if ((unint64_t)(result - v10) >= 0x20)
        {
          v13 = v11 + 1;
          v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
          v15 = result + v14;
          v12 = (uint64_t *)(v10 + v14);
          v16 = (__int128 *)(v10 + 16);
          v17 = (_OWORD *)(result + 16);
          v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v19 = *v16;
            *(v17 - 1) = *(v16 - 1);
            *v17 = v19;
            v16 += 2;
            v17 += 2;
            v18 -= 4;
          }
          while (v18);
          result = v15;
          if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_17;
        }
      }
      v20 = (uint64_t *)(v10 + 8 * v9);
      do
      {
        v21 = *v12++;
        *(_QWORD *)result = v21;
        result += 8;
      }
      while (v12 != v20);
    }
LABEL_17:
    *(_WORD *)(a2 + 104) = *(_WORD *)(v3 + 104);
    return result;
  }
  __break(0xC471u);
  return result;
}

WTF *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t a1, void *a2)
{
  WTF *result;
  uint64_t v4;
  char v5;

  result = *(WTF **)(a1 + 88);
  if (result)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
      result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v5, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(_QWORD *__p, void *a2)
{
  WTF *v3;
  uint64_t v4;
  char v5;

  v3 = (WTF *)__p[11];
  if (v3)
  {
    __p[11] = 0;
    *((_DWORD *)__p + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v4 = *((unsigned int *)__p + 16);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD3E30[v4])(&v5, __p + 6);
  }
  operator delete(__p);
}

WTF *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = *(_QWORD *)(a1 + 8);
  result = *(WTF **)(v3 + 72);
  if (result)
  {
    *(_QWORD *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *(_QWORD *)v3 = off_1E0FD2EC0;
  if (*(_BYTE *)(v3 + 56))
  {
    v5 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v5 != -1)
      result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v5])(&v10, v3 + 32);
    *(_DWORD *)(v3 + 48) = -1;
  }
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v6 = &off_1E0FD2EE8;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v6 = off_1E0FD2EC0;
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v6 + 48) = -1;
    v7 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v7 != -1)
    {
      result = (WTF *)((uint64_t (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v7])(&v11, v6 + 32, a1 + 48);
      *(_DWORD *)(v6 + 48) = v7;
    }
    *(_BYTE *)(v6 + 56) = 1;
  }
  *(_QWORD *)v6 = off_1E0FD2F38;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 64) = v8;
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(v6 + 72) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(v6 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(v6 + 84) = v9;
  *(_WORD *)(v6 + 88) = *(_WORD *)(a1 + 104);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD4120;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD4120;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40EEF274EFLL);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = (char *)operator new(0x58uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD4120;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD4020;
  *((_QWORD *)v3 + 10) = *(_QWORD *)(a1 + 80);
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD4120;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD3E88[v7])(&v8);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD4020;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v3 + 80);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(result + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(result + 72))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v3, result + 48);
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  char v3;

  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v2 = *((unsigned int *)__p + 16);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD3E30[v2])(&v3, __p + 6);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 48);
    v4 = v2;
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v6, v2 + 32);
      v4 = *(_QWORD *)(v1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    v2 = v4;
  }
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(v1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v5])(&v7, v2 + 32, v1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD4020;
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v1 + 80);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  BOOL v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  _DWORD *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  BOOL v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  int64_t v137;
  int64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD *v152;
  uint64_t v153;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  _DWORD *v163;
  unint64_t v164;
  uint64_t v165;
  _DWORD *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _DWORD *v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t *v188;
  BOOL v189;
  uint64_t v190;
  unsigned int v191;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = v9 >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v108 = *(_DWORD *)(a2 - 16);
        v109 = *(_DWORD *)v7;
        if (v108 < *(_DWORD *)v7)
        {
          *(_DWORD *)v7 = v108;
          *(_DWORD *)(a2 - 16) = v109;
          goto LABEL_129;
        }
        return result;
      case 3:
        LODWORD(v11) = *(_DWORD *)(v7 + 16);
        LODWORD(v84) = *(_DWORD *)v7;
        v110 = *(_DWORD *)(a2 - 16);
        if (v11 >= *(_DWORD *)v7)
        {
          if (v110 < v11)
          {
            *(_DWORD *)(v7 + 16) = v110;
            *(_DWORD *)(a2 - 16) = v11;
            v176 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 - 8);
            *(_QWORD *)(a2 - 8) = v176;
            v177 = *(_DWORD *)(v7 + 16);
            v178 = *(_DWORD *)v7;
            if (v177 < *(_DWORD *)v7)
            {
              *(_DWORD *)v7 = v177;
              *(_DWORD *)(v7 + 16) = v178;
              v122 = *(_QWORD *)(v7 + 8);
              v118 = *(_QWORD *)(v7 + 24);
              goto LABEL_237;
            }
          }
        }
        else
        {
          if (v110 >= v11)
            goto LABEL_256;
          *(_DWORD *)v7 = v110;
          *(_DWORD *)(a2 - 16) = v84;
LABEL_129:
          v111 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v111;
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)v7, (unsigned int *)(v7 + 16), (unsigned int *)(v7 + 32), (unsigned int *)(a2 - 16));
      case 5:
        result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)v7, (unsigned int *)(v7 + 16), (unsigned int *)(v7 + 32), (unsigned int *)(v7 + 48));
        v112 = *(_DWORD *)(a2 - 16);
        v113 = *(_DWORD *)(v7 + 48);
        if (v112 < v113)
        {
          *(_DWORD *)(v7 + 48) = v112;
          *(_DWORD *)(a2 - 16) = v113;
          v114 = *(_QWORD *)(v7 + 56);
          *(_QWORD *)(v7 + 56) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v114;
          v115 = *(_DWORD *)(v7 + 48);
          v116 = *(_DWORD *)(v7 + 32);
          if (v115 < v116)
          {
            *(_DWORD *)(v7 + 32) = v115;
            *(_DWORD *)(v7 + 48) = v116;
            v117 = *(_QWORD *)(v7 + 40);
            v118 = *(_QWORD *)(v7 + 56);
            *(_QWORD *)(v7 + 40) = v118;
            *(_QWORD *)(v7 + 56) = v117;
            v119 = *(_DWORD *)(v7 + 16);
            if (v115 < v119)
            {
              *(_DWORD *)(v7 + 16) = v115;
              *(_DWORD *)(v7 + 32) = v119;
              v120 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)(v7 + 24) = v118;
              *(_QWORD *)(v7 + 40) = v120;
              v121 = *(_DWORD *)v7;
              if (v115 < *(_DWORD *)v7)
              {
                *(_DWORD *)v7 = v115;
                *(_DWORD *)(v7 + 16) = v121;
                v122 = *(_QWORD *)(v7 + 8);
LABEL_237:
                *(_QWORD *)(v7 + 8) = v118;
                *(_QWORD *)(v7 + 24) = v122;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v7 == a2)
              return result;
            v137 = (unint64_t)(v10 - 2) >> 1;
            v138 = v137;
            while (1)
            {
              v139 = v138;
              if (v137 < v138)
                goto LABEL_164;
              v140 = (2 * v138) | 1;
              v141 = v7 + 16 * v140;
              if (2 * v139 + 2 >= v10)
                break;
              v142 = *(_DWORD *)v141;
              v143 = *(_DWORD *)(v141 + 16);
              if (*(_DWORD *)v141 <= v143)
                v142 = *(_DWORD *)(v141 + 16);
              if (*(_DWORD *)v141 < v143)
              {
                v141 += 16;
                v140 = 2 * v139 + 2;
              }
              v144 = v7 + 16 * v139;
              v145 = *(_DWORD *)v144;
              if (v142 >= *(_DWORD *)v144)
                goto LABEL_174;
LABEL_164:
              v138 = v139 - 1;
              if (!v139)
              {
                v153 = (unint64_t)v9 >> 4;
                while (1)
                {
                  v155 = 0;
                  v156 = *(_DWORD *)v7;
                  v157 = *(_QWORD *)(v7 + 8);
                  *(_QWORD *)(v7 + 8) = 0;
                  v158 = v7;
                  do
                  {
                    v159 = v158;
                    v158 += 16 * v155 + 16;
                    if (2 * v155 + 2 >= v153)
                    {
                      v160 = *(_DWORD *)v158;
                      v155 = (2 * v155) | 1;
                    }
                    else
                    {
                      v160 = *(_DWORD *)v158;
                      v161 = *(_DWORD *)(v158 + 16);
                      if (*(_DWORD *)v158 <= v161)
                        v160 = *(_DWORD *)(v158 + 16);
                      if (*(_DWORD *)v158 >= v161)
                      {
                        v155 = (2 * v155) | 1;
                      }
                      else
                      {
                        v158 += 16;
                        v155 = 2 * v155 + 2;
                      }
                    }
                    *(_DWORD *)v159 = v160;
                    v162 = *(_QWORD *)(v158 + 8);
                    *(_QWORD *)(v158 + 8) = 0;
                    v163 = *(_DWORD **)(v159 + 8);
                    *(_QWORD *)(v159 + 8) = v162;
                    if (v163)
                    {
                      if (*v163 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v163 -= 2;
                    }
                  }
                  while (v155 <= (uint64_t)((unint64_t)(v153 - 2) >> 1));
                  v164 = a2 - 16;
                  if (v158 != a2 - 16)
                    break;
                  *(_DWORD *)v158 = v156;
                  result = *(_QWORD *)(v158 + 8);
                  *(_QWORD *)(v158 + 8) = v157;
                  if (result)
                  {
LABEL_232:
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy();
                    else
                      *(_DWORD *)result -= 2;
                  }
LABEL_194:
                  a2 = v164;
                  if (v153-- <= 2)
                    return result;
                }
                *(_DWORD *)v158 = *(_DWORD *)(a2 - 16);
                v165 = *(_QWORD *)(a2 - 8);
                *(_QWORD *)(a2 - 8) = 0;
                v166 = *(_DWORD **)(v158 + 8);
                *(_QWORD *)(v158 + 8) = v165;
                if (v166)
                {
                  if (*v166 != 2)
                  {
                    *v166 -= 2;
                    goto LABEL_212;
                  }
                  WTF::StringImpl::destroy();
                  *(_DWORD *)(a2 - 16) = v156;
                  result = *(_QWORD *)(a2 - 8);
                  *(_QWORD *)(a2 - 8) = v157;
                  if (result)
                  {
LABEL_217:
                    if (*(_DWORD *)result != 2)
                    {
                      *(_DWORD *)result -= 2;
                      goto LABEL_219;
                    }
                    result = WTF::StringImpl::destroy();
                    v167 = v158 + 16 - v7;
                    if (v167 < 17)
                      goto LABEL_194;
LABEL_222:
                    v168 = (((unint64_t)v167 >> 4) - 2) >> 1;
                    v169 = v7 + 16 * v168;
                    v170 = *(_DWORD *)v169;
                    v171 = *(_DWORD *)v158;
                    if (*(_DWORD *)v169 >= *(_DWORD *)v158)
                      goto LABEL_194;
                    v172 = *(_QWORD *)(v158 + 8);
                    *(_QWORD *)(v158 + 8) = 0;
                    while (2)
                    {
                      v173 = v158;
                      v158 = v169;
                      *(_DWORD *)v173 = v170;
                      v174 = *(_QWORD *)(v169 + 8);
                      *(_QWORD *)(v158 + 8) = 0;
                      v175 = *(_DWORD **)(v173 + 8);
                      *(_QWORD *)(v173 + 8) = v174;
                      if (v175)
                      {
                        if (*v175 != 2)
                        {
                          *v175 -= 2;
                          goto LABEL_227;
                        }
                        WTF::StringImpl::destroy();
                        if (!v168)
                          goto LABEL_231;
                      }
                      else
                      {
LABEL_227:
                        if (!v168)
                          goto LABEL_231;
                      }
                      v168 = (v168 - 1) >> 1;
                      v169 = v7 + 16 * v168;
                      v170 = *(_DWORD *)v169;
                      if (*(_DWORD *)v169 >= v171)
                      {
LABEL_231:
                        *(_DWORD *)v158 = v171;
                        result = *(_QWORD *)(v158 + 8);
                        *(_QWORD *)(v158 + 8) = v172;
                        if (result)
                          goto LABEL_232;
                        goto LABEL_194;
                      }
                      continue;
                    }
                  }
                }
                else
                {
LABEL_212:
                  *(_DWORD *)(a2 - 16) = v156;
                  result = *(_QWORD *)(a2 - 8);
                  *(_QWORD *)(a2 - 8) = v157;
                  if (result)
                    goto LABEL_217;
                }
LABEL_219:
                v167 = v158 + 16 - v7;
                if (v167 < 17)
                  goto LABEL_194;
                goto LABEL_222;
              }
            }
            v142 = *(_DWORD *)v141;
            v144 = v7 + 16 * v139;
            v145 = *(_DWORD *)v144;
            if (*(_DWORD *)v141 < *(_DWORD *)v144)
              goto LABEL_164;
LABEL_174:
            v146 = v7 + 16 * v139;
            v147 = *(_QWORD *)(v146 + 8);
            *(_QWORD *)(v146 + 8) = 0;
            while (1)
            {
              v149 = v144;
              v144 = v141;
              *(_DWORD *)v149 = v142;
              v150 = *(_QWORD *)(v141 + 8);
              *(_QWORD *)(v144 + 8) = 0;
              v151 = *(_DWORD **)(v149 + 8);
              *(_QWORD *)(v149 + 8) = v150;
              if (v151)
              {
                if (*v151 == 2)
                {
                  WTF::StringImpl::destroy();
                  if (v137 < v140)
                    goto LABEL_189;
                  goto LABEL_187;
                }
                *v151 -= 2;
              }
              if (v137 < v140)
                goto LABEL_189;
LABEL_187:
              v141 = v7 + 16 * ((2 * v140) | 1);
              if (2 * v140 + 2 < v10)
              {
                v142 = *(_DWORD *)v141;
                v148 = *(_DWORD *)(v141 + 16);
                if (*(_DWORD *)v141 <= v148)
                  v142 = *(_DWORD *)(v141 + 16);
                if (*(_DWORD *)v141 >= v148)
                {
                  v140 = (2 * v140) | 1;
                }
                else
                {
                  v141 += 16;
                  v140 = 2 * v140 + 2;
                }
                if (v142 < v145)
                {
LABEL_189:
                  *(_DWORD *)v144 = v145;
                  v152 = *(_DWORD **)(v144 + 8);
                  *(_QWORD *)(v144 + 8) = v147;
                  if (v152)
                  {
                    if (*v152 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v152 -= 2;
                  }
                  goto LABEL_164;
                }
              }
              else
              {
                v142 = *(_DWORD *)v141;
                v140 = (2 * v140) | 1;
                if (*(_DWORD *)v141 < v145)
                  goto LABEL_189;
              }
            }
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = (unsigned int *)(v7 + 16 * ((unint64_t)v10 >> 1));
          v13 = *(_DWORD *)(a2 - 16);
          if ((unint64_t)v9 < 0x801)
          {
            v17 = *(_DWORD *)v7;
            v18 = *v12;
            if (*(_DWORD *)v7 >= *v12)
            {
              if (v13 < v17)
              {
                *(_DWORD *)v7 = v13;
                *(_DWORD *)(a2 - 16) = v17;
                v25 = *(_QWORD *)(v7 + 8);
                *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 - 8);
                *(_QWORD *)(a2 - 8) = v25;
                v26 = *v12;
                if (*(_DWORD *)v7 < *v12)
                {
                  *v12 = *(_DWORD *)v7;
                  *(_DWORD *)v7 = v26;
                  v27 = v7 + 16 * v11;
                  v11 = *(_QWORD *)(v27 + 8);
                  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v7 + 8);
                  *(_QWORD *)(v7 + 8) = v11;
                  --a3;
                  v28 = v26;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            v11 = v7 + 16 * v11 + 8;
            if (v13 >= v17)
            {
              *v12 = v17;
              *(_DWORD *)v7 = v18;
              v19 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)(v7 + 8);
              *(_QWORD *)(v7 + 8) = v19;
              LODWORD(v11) = *(_DWORD *)(a2 - 16);
              if (v11 >= v18)
                goto LABEL_32;
              *(_DWORD *)v7 = v11;
              *(_DWORD *)(a2 - 16) = v18;
              v11 = *(_QWORD *)(a2 - 8);
              *(_QWORD *)(v7 + 8) = v11;
            }
            else
            {
              *v12 = v13;
              *(_DWORD *)(a2 - 16) = v18;
              v19 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)(a2 - 8);
            }
            *(_QWORD *)(a2 - 8) = v19;
LABEL_32:
            --a3;
            v28 = *(_DWORD *)v7;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *(_DWORD *)v7;
          if (*v12 >= *(_DWORD *)v7)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(_DWORD *)(a2 - 16) = v14;
              v20 = v7 + 16 * v11;
              v22 = *(_QWORD *)(v20 + 8);
              v21 = (_QWORD *)(v20 + 8);
              *v21 = *(_QWORD *)(a2 - 8);
              *(_QWORD *)(a2 - 8) = v22;
              v23 = *(_DWORD *)v7;
              if (*v12 < *(_DWORD *)v7)
              {
                *(_DWORD *)v7 = *v12;
                *v12 = v23;
                v24 = *(_QWORD *)(v7 + 8);
                *(_QWORD *)(v7 + 8) = *v21;
                *v21 = v24;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *(_DWORD *)v7 = v14;
              *v12 = v15;
              v16 = *(_QWORD *)(v7 + 8);
              v29 = (_QWORD *)(v7 + 8 + 16 * v11);
              *(_QWORD *)(v7 + 8) = *v29;
              *v29 = v16;
              v30 = *(_DWORD *)(a2 - 16);
              if (v30 >= v15)
                goto LABEL_23;
              *v12 = v30;
              *(_DWORD *)(a2 - 16) = v15;
              *v29 = *(_QWORD *)(a2 - 8);
            }
            else
            {
              *(_DWORD *)v7 = v13;
              *(_DWORD *)(a2 - 16) = v15;
              v16 = *(_QWORD *)(v7 + 8);
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 - 8);
            }
            *(_QWORD *)(a2 - 8) = v16;
          }
LABEL_23:
          v31 = v11 - 1;
          v32 = (unsigned int *)(v7 + 16 * (v11 - 1));
          v33 = *v32;
          v34 = *(_DWORD *)(v7 + 16);
          v35 = *(_DWORD *)(a2 - 32);
          if (*v32 >= v34)
          {
            if (v35 < v33)
            {
              *v32 = v35;
              *(_DWORD *)(a2 - 32) = v33;
              v37 = v7 + 16 * v31;
              v39 = *(_QWORD *)(v37 + 8);
              v38 = (_QWORD *)(v37 + 8);
              *v38 = *(_QWORD *)(a2 - 24);
              *(_QWORD *)(a2 - 24) = v39;
              v40 = *(_DWORD *)(v7 + 16);
              if (*v32 < v40)
              {
                *(_DWORD *)(v7 + 16) = *v32;
                *v32 = v40;
                v41 = *(_QWORD *)(v7 + 24);
                *(_QWORD *)(v7 + 24) = *v38;
                *v38 = v41;
              }
            }
          }
          else if (v35 >= v33)
          {
            *(_DWORD *)(v7 + 16) = v33;
            v42 = v7 + 16 * v31;
            v44 = *(_QWORD *)(v42 + 8);
            v43 = (_QWORD *)(v42 + 8);
            *v32 = v34;
            v45 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 24) = v44;
            *v43 = v45;
            v46 = *(_DWORD *)(a2 - 32);
            if (v46 < v34)
            {
              *v32 = v46;
              *(_DWORD *)(a2 - 32) = v34;
              *v43 = *(_QWORD *)(a2 - 24);
              *(_QWORD *)(a2 - 24) = v45;
            }
          }
          else
          {
            *(_DWORD *)(v7 + 16) = v35;
            *(_DWORD *)(a2 - 32) = v34;
            v36 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 - 24);
            *(_QWORD *)(a2 - 24) = v36;
          }
          v47 = v11 + 1;
          v48 = (unsigned int *)(v7 + 16 * (v11 + 1));
          v49 = *v48;
          v50 = *(_DWORD *)(v7 + 32);
          v51 = *(_DWORD *)(a2 - 48);
          if (*v48 >= v50)
          {
            if (v51 < v49)
            {
              *v48 = v51;
              *(_DWORD *)(a2 - 48) = v49;
              v53 = v7 + 16 * v47;
              v55 = *(_QWORD *)(v53 + 8);
              v54 = (_QWORD *)(v53 + 8);
              *v54 = *(_QWORD *)(a2 - 40);
              *(_QWORD *)(a2 - 40) = v55;
              v56 = *(_DWORD *)(v7 + 32);
              if (*v48 < v56)
              {
                *(_DWORD *)(v7 + 32) = *v48;
                *v48 = v56;
                v57 = *(_QWORD *)(v7 + 40);
                *(_QWORD *)(v7 + 40) = *v54;
                *v54 = v57;
              }
            }
          }
          else if (v51 >= v49)
          {
            *(_DWORD *)(v7 + 32) = v49;
            v58 = v7 + 16 * v47;
            v60 = *(_QWORD *)(v58 + 8);
            v59 = (_QWORD *)(v58 + 8);
            *v48 = v50;
            v61 = *(_QWORD *)(v7 + 40);
            *(_QWORD *)(v7 + 40) = v60;
            *v59 = v61;
            v62 = *(_DWORD *)(a2 - 48);
            if (v62 < v50)
            {
              *v48 = v62;
              *(_DWORD *)(a2 - 48) = v50;
              *v59 = *(_QWORD *)(a2 - 40);
              *(_QWORD *)(a2 - 40) = v61;
            }
          }
          else
          {
            *(_DWORD *)(v7 + 32) = v51;
            *(_DWORD *)(a2 - 48) = v50;
            v52 = *(_QWORD *)(v7 + 40);
            *(_QWORD *)(v7 + 40) = *(_QWORD *)(a2 - 40);
            *(_QWORD *)(a2 - 40) = v52;
          }
          v63 = *v12;
          v64 = *v32;
          v65 = *v48;
          if (*v12 >= *v32)
          {
            if (v65 >= v63)
              goto LABEL_50;
            *v12 = v65;
            v69 = v7 + 16 * v11;
            v71 = *(_QWORD *)(v69 + 8);
            v70 = (_QWORD *)(v69 + 8);
            result = v71;
            *v48 = v63;
            v72 = v7 + 16 * v47;
            v73 = *(_QWORD *)(v72 + 8);
            *v70 = v73;
            *(_QWORD *)(v72 + 8) = v71;
            if (v65 < v64)
            {
              *v32 = v65;
              *v12 = v64;
              v74 = v7 + 16 * v31;
              v75 = *(_QWORD *)(v74 + 8);
              *(_QWORD *)(v74 + 8) = v73;
              *v70 = v75;
              goto LABEL_54;
            }
            goto LABEL_53;
          }
          v66 = (uint64_t *)(v7 + 16 * v31 + 8);
          if (v65 < v63)
          {
            *v32 = v65;
            *v48 = v64;
            v67 = v7 + 16 * v47;
            v68 = *v66;
            *v66 = *(_QWORD *)(v67 + 8);
            *(_QWORD *)(v67 + 8) = v68;
LABEL_50:
            v64 = v63;
            goto LABEL_54;
          }
          *v32 = v63;
          *v12 = v64;
          v76 = v7 + 16 * v11;
          v78 = *(_QWORD *)(v76 + 8);
          v77 = (_QWORD *)(v76 + 8);
          v79 = *v66;
          *v66 = v78;
          *v77 = v79;
          if (v65 < v64)
          {
            *v12 = v65;
            *v48 = v64;
            v80 = v7 + 16 * v47;
            *v77 = *(_QWORD *)(v80 + 8);
            *(_QWORD *)(v80 + 8) = v79;
LABEL_53:
            v64 = v65;
          }
LABEL_54:
          v81 = *(_DWORD *)v7;
          *(_DWORD *)v7 = v64;
          *v12 = v81;
          v82 = v7 + 16 * v11;
          v11 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v82 + 8);
          *(_QWORD *)(v82 + 8) = v11;
          --a3;
          v28 = *(_DWORD *)v7;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_DWORD *)(v7 - 16) >= v28)
          {
            v98 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = 0;
            if (v28 >= *(_DWORD *)(a2 - 16))
            {
              v100 = v7 + 16;
              do
              {
                v8 = v100;
                if (v100 >= a2)
                  break;
                v100 += 16;
                LODWORD(v11) = *(_DWORD *)v8;
              }
              while (v28 >= *(_DWORD *)v8);
            }
            else
            {
              v84 = v7 + 16;
              do
              {
                if (v84 == a2)
                  goto LABEL_255;
                v99 = *(_DWORD *)v84;
                v84 += 16;
                LODWORD(v11) = v99;
              }
              while (v28 >= v99);
              v8 = v84 - 16;
            }
            v84 = a2;
            if (v8 < a2)
            {
              v84 = a2;
              while (v84 != v7)
              {
                v101 = *(_DWORD *)(v84 - 16);
                v84 -= 16;
                LODWORD(v11) = v101;
                if (v28 >= v101)
                  goto LABEL_103;
              }
              goto LABEL_255;
            }
LABEL_103:
            if (v8 < v84)
            {
              LODWORD(v11) = *(_DWORD *)v8;
              v102 = *(_DWORD *)v84;
              do
              {
                *(_DWORD *)v8 = v102;
                *(_DWORD *)v84 = v11;
                v11 = *(_QWORD *)(v8 + 8);
                *(_QWORD *)(v8 + 8) = *(_QWORD *)(v84 + 8);
                *(_QWORD *)(v84 + 8) = v11;
                v103 = (unsigned int *)(v8 + 16);
                do
                {
                  if (v103 == (unsigned int *)a2)
                    goto LABEL_255;
                  v104 = *v103;
                  v103 += 4;
                  LODWORD(v11) = v104;
                }
                while (v28 >= v104);
                v8 = (unint64_t)(v103 - 4);
                do
                {
                  if (v84 == v7)
                    goto LABEL_255;
                  v105 = *(_DWORD *)(v84 - 16);
                  v84 -= 16;
                  v102 = v105;
                }
                while (v28 < v105);
              }
              while (v8 < v84);
            }
            if (v8 - 16 != v7)
            {
              *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
              v106 = *(_QWORD *)(v8 - 8);
              *(_QWORD *)(v8 - 8) = 0;
              v107 = *(_DWORD **)(v7 + 8);
              *(_QWORD *)(v7 + 8) = v106;
              if (v107)
              {
                if (*v107 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v107 -= 2;
              }
            }
            a4 = 0;
            *(_DWORD *)(v8 - 16) = v28;
            result = *(_QWORD *)(v8 - 8);
            *(_QWORD *)(v8 - 8) = v98;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy();
                a4 = 0;
              }
              else
              {
                a4 = 0;
                *(_DWORD *)result -= 2;
              }
            }
            continue;
          }
LABEL_56:
          v11 = 0;
          v83 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          do
          {
            v84 = v7 + v11 + 16;
            if (v84 == a2)
              goto LABEL_255;
            LODWORD(v84) = *(_DWORD *)v84;
            v11 += 16;
          }
          while (v84 < v28);
          v85 = v7 + v11;
          v86 = (unsigned int *)a2;
          if (v11 != 16)
          {
            while (v86 != (unsigned int *)v7)
            {
              v87 = *(v86 - 4);
              v86 -= 4;
              LODWORD(v11) = v87;
              if (v87 < v28)
                goto LABEL_66;
            }
LABEL_255:
            __break(1u);
LABEL_256:
            *(_DWORD *)v7 = v11;
            *(_DWORD *)(v7 + 16) = v84;
            v190 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 24) = v190;
            v191 = *(_DWORD *)(a2 - 16);
            if (v191 < v84)
            {
              *(_DWORD *)(v7 + 16) = v191;
              *(_DWORD *)(a2 - 16) = v84;
              *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 - 8);
              *(_QWORD *)(a2 - 8) = v190;
            }
            return result;
          }
          v86 = (unsigned int *)a2;
          do
          {
            if (v85 >= (unint64_t)v86)
              break;
            v88 = *(v86 - 4);
            v86 -= 4;
          }
          while (v88 >= v28);
LABEL_66:
          if (v85 >= (unint64_t)v86)
          {
            v8 = v85;
            v93 = v85 - 16;
            if (v85 - 16 == v7)
              goto LABEL_81;
          }
          else
          {
            v89 = *v86;
            v8 = v85;
            v11 = (unint64_t)v86;
            do
            {
              *(_DWORD *)v8 = v89;
              *(_DWORD *)v11 = v84;
              v84 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v11 + 8);
              *(_QWORD *)(v11 + 8) = v84;
              v90 = (unsigned int *)(v8 + 16);
              do
              {
                if (v90 == (unsigned int *)a2)
                  goto LABEL_255;
                v91 = *v90;
                v90 += 4;
                LODWORD(v84) = v91;
              }
              while (v91 < v28);
              v8 = (unint64_t)(v90 - 4);
              do
              {
                if (v11 == v7)
                  goto LABEL_255;
                v92 = *(_DWORD *)(v11 - 16);
                v11 -= 16;
                v89 = v92;
              }
              while (v92 >= v28);
            }
            while (v8 < v11);
            v93 = v8 - 16;
            if (v8 - 16 == v7)
              goto LABEL_81;
          }
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          v94 = *(_QWORD *)(v8 - 8);
          *(_QWORD *)(v8 - 8) = 0;
          v95 = *(_DWORD **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = v94;
          if (v95)
          {
            if (*v95 == 2)
            {
              WTF::StringImpl::destroy();
              *(_DWORD *)(v8 - 16) = v28;
              v96 = *(_DWORD **)(v8 - 8);
              *(_QWORD *)(v8 - 8) = v83;
              if (!v96)
                goto LABEL_85;
              goto LABEL_82;
            }
            *v95 -= 2;
          }
LABEL_81:
          *(_DWORD *)(v8 - 16) = v28;
          v96 = *(_DWORD **)(v8 - 8);
          *(_QWORD *)(v8 - 8) = v83;
          if (!v96)
            goto LABEL_85;
LABEL_82:
          if (*v96 == 2)
            WTF::StringImpl::destroy();
          else
            *v96 -= 2;
LABEL_85:
          if (v85 < (unint64_t)v86)
            goto LABEL_88;
          v97 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>(v7, v93);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>(v8, a2);
          if (!(_DWORD)result)
          {
            if (v97)
              continue;
LABEL_88:
            result = std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *,false>(v7, v93, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v93;
          if (v97)
            return result;
          goto LABEL_2;
        }
        v123 = (unsigned int *)(v7 + 16);
        v125 = v7 == a2 || v123 == (unsigned int *)a2;
        if ((a4 & 1) == 0)
        {
          if (v125)
            return result;
          v179 = 0;
          v180 = (uint64_t *)(v7 + 24);
          v181 = -2;
          v182 = 1;
          v11 = v7;
          while (1)
          {
            v183 = v179;
            v179 = v182;
            v184 = *v123;
            if (*v123 < *(_DWORD *)v11)
              break;
LABEL_241:
            v11 = v7 + 16 * v179;
            v182 = v179 + 1;
            v123 = (unsigned int *)(v7 + 16 * (v179 + 1));
            v180 += 2;
            --v181;
            if (v123 == (unsigned int *)a2)
              return result;
          }
          v185 = *(_QWORD *)(v11 + 24);
          *(_QWORD *)(v11 + 24) = 0;
          v186 = *(_DWORD *)(v7 + 16 * v183);
          v187 = v181;
          v188 = v180;
          while (1)
          {
            *((_DWORD *)v188 - 2) = v186;
            v84 = *(v188 - 2);
            *(v188 - 2) = 0;
            result = *v188;
            *v188 = v84;
            if (result)
            {
              LODWORD(v84) = *(_DWORD *)result - 2;
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy();
                v189 = __CFADD__(v187++, 1);
                if (v189)
                  goto LABEL_255;
                goto LABEL_251;
              }
              *(_DWORD *)result = v84;
            }
            v189 = __CFADD__(v187++, 1);
            if (v189)
              goto LABEL_255;
LABEL_251:
            v11 = (unint64_t)(v188 - 2);
            v186 = *((_DWORD *)v188 - 10);
            v188 -= 2;
            if (v184 >= v186)
            {
              *(_DWORD *)(v11 - 8) = v184;
              result = *(_QWORD *)v11;
              *(_QWORD *)v11 = v185;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy();
                else
                  *(_DWORD *)result -= 2;
              }
              goto LABEL_241;
            }
          }
        }
        if (v125)
          return result;
        v126 = 0;
        v127 = (unsigned int *)v7;
        while (2)
        {
          v128 = v127;
          v127 = v123;
          v129 = v128[4];
          v130 = *v128;
          if (v129 >= *v128)
            goto LABEL_146;
          v131 = *((_QWORD *)v128 + 3);
          *((_QWORD *)v128 + 3) = 0;
          v132 = v126;
          while (1)
          {
            v133 = v7 + v132;
            *(_DWORD *)(v133 + 16) = v130;
            v134 = *(_QWORD *)(v7 + v132 + 8);
            *(_QWORD *)(v133 + 8) = 0;
            v135 = *(_DWORD **)(v7 + v132 + 24);
            *(_QWORD *)(v133 + 24) = v134;
            if (!v135)
              goto LABEL_152;
            if (*v135 == 2)
              break;
            *v135 -= 2;
LABEL_152:
            if (!v132)
              goto LABEL_157;
LABEL_155:
            v130 = *(_DWORD *)(v7 + v132 - 16);
            v132 -= 16;
            if (v129 >= v130)
            {
              v136 = v7 + v132 + 16;
              goto LABEL_158;
            }
          }
          WTF::StringImpl::destroy();
          if (v132)
            goto LABEL_155;
LABEL_157:
          v136 = v7;
LABEL_158:
          *(_DWORD *)v136 = v129;
          result = *(_QWORD *)(v136 + 8);
          *(_QWORD *)(v136 + 8) = v131;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy();
            else
              *(_DWORD *)result -= 2;
          }
LABEL_146:
          v123 = v127 + 4;
          v126 += 16;
          if (v127 + 4 != (unsigned int *)a2)
            continue;
          return result;
        }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        goto LABEL_8;
      }
      return result;
    case 3:
      v8 = *(_DWORD *)(a1 + 16);
      v9 = *(_DWORD *)a1;
      v10 = *(_DWORD *)(a2 - 16);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v10 < v8)
        {
          *(_DWORD *)(a1 + 16) = v10;
          *(_DWORD *)(a2 - 16) = v8;
          v28 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v28;
          v29 = *(_DWORD *)(a1 + 16);
          v30 = *(_DWORD *)a1;
          if (v29 < *(_DWORD *)a1)
          {
            *(_DWORD *)a1 = v29;
            *(_DWORD *)(a1 + 16) = v30;
            v31 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *(_DWORD *)a1 = v8;
        *(_DWORD *)(a1 + 16) = v9;
        v35 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v35;
        v36 = *(_DWORD *)(a2 - 16);
        if (v36 < v9)
        {
          *(_DWORD *)(a1 + 16) = v36;
          *(_DWORD *)(a2 - 16) = v9;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v35;
        }
      }
      else
      {
        *(_DWORD *)a1 = v10;
        *(_DWORD *)(a2 - 16) = v9;
LABEL_8:
        v11 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a2 - 16));
      return 1;
    case 5:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 48));
      v17 = *(_DWORD *)(a2 - 16);
      v18 = *(_DWORD *)(a1 + 48);
      if (v17 < v18)
      {
        *(_DWORD *)(a1 + 48) = v17;
        *(_DWORD *)(a2 - 16) = v18;
        v19 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v19;
        v20 = *(_DWORD *)(a1 + 48);
        v21 = *(_DWORD *)(a1 + 32);
        if (v20 < v21)
        {
          *(_DWORD *)(a1 + 32) = v20;
          *(_DWORD *)(a1 + 48) = v21;
          v22 = *(_QWORD *)(a1 + 40);
          v23 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 40) = v23;
          *(_QWORD *)(a1 + 56) = v22;
          v24 = *(_DWORD *)(a1 + 16);
          if (v20 < v24)
          {
            *(_DWORD *)(a1 + 16) = v20;
            *(_DWORD *)(a1 + 32) = v24;
            v25 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v23;
            *(_QWORD *)(a1 + 40) = v25;
            v26 = *(_DWORD *)a1;
            if (v20 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v20;
              *(_DWORD *)(a1 + 16) = v26;
              v27 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v23;
              *(_QWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v12 = (unsigned int *)(a1 + 32);
      v13 = *(_DWORD *)(a1 + 32);
      v14 = *(_DWORD *)(a1 + 16);
      v15 = *(_DWORD *)a1;
      if (v14 >= *(_DWORD *)a1)
      {
        if (v13 < v14)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v14;
          v32 = *(_QWORD *)(a1 + 24);
          v33 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 24) = v33;
          *(_QWORD *)(a1 + 40) = v32;
          if (v13 < v15)
          {
            *(_DWORD *)a1 = v13;
            *(_DWORD *)(a1 + 16) = v15;
            v34 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;
            *(_QWORD *)(a1 + 24) = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 16) = v15;
        v37 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v37;
        if (v13 < v15)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v15;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v37;
        }
      }
      else
      {
        *(_DWORD *)a1 = v13;
        *(_DWORD *)(a1 + 32) = v15;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v16;
      }
      v38 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      break;
  }
  while (2)
  {
    v41 = *(_DWORD *)v38;
    v42 = *v12;
    if (*(_DWORD *)v38 >= v42)
      goto LABEL_32;
    v43 = *(_QWORD *)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    v44 = v39;
    while (1)
    {
      v45 = a1 + v44;
      *(_DWORD *)(v45 + 48) = v42;
      v46 = *(_QWORD *)(a1 + v44 + 40);
      *(_QWORD *)(v45 + 40) = 0;
      v47 = *(_DWORD **)(a1 + v44 + 56);
      *(_QWORD *)(v45 + 56) = v46;
      if (!v47)
        goto LABEL_38;
      if (*v47 == 2)
        break;
      *v47 -= 2;
LABEL_38:
      if (v44 == -32)
        goto LABEL_43;
LABEL_41:
      v42 = *(_DWORD *)(a1 + v44 + 16);
      v44 -= 16;
      if (v41 >= v42)
      {
        v48 = a1 + v44 + 48;
        goto LABEL_44;
      }
    }
    WTF::StringImpl::destroy();
    if (v44 != -32)
      goto LABEL_41;
LABEL_43:
    v48 = a1;
LABEL_44:
    *(_DWORD *)v48 = v41;
    v49 = *(_DWORD **)(v48 + 8);
    *(_QWORD *)(v48 + 8) = v43;
    if (v49)
    {
      if (*v49 == 2)
        WTF::StringImpl::destroy();
      else
        *v49 -= 2;
    }
    if (++v40 == 8)
      return v38 + 16 == a2;
LABEL_32:
    v12 = (unsigned int *)v38;
    v39 += 16;
    v38 += 16;
    if (v38 != a2)
      continue;
    return 1;
  }
}

unsigned int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (*a2 < *result)
  {
    if (v6 >= v4)
    {
      *result = v4;
      *a2 = v5;
      v12 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v12;
      v4 = *a3;
      if (*a3 >= v5)
        goto LABEL_11;
      *a2 = v4;
      *a3 = v5;
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v12;
    }
    else
    {
      *result = v6;
      *a3 = v5;
      v7 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v7;
    }
    v4 = v5;
LABEL_11:
    v11 = *a4;
    if (*a4 >= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    v4 = *a3;
    v11 = *a4;
    if (*a4 >= v6)
      return result;
    goto LABEL_14;
  }
  *a2 = v6;
  *a3 = v4;
  v8 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v8;
  v9 = *result;
  if (*a2 >= *result)
    goto LABEL_11;
  *result = *a2;
  *a2 = v9;
  v10 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v4 = *a3;
  v11 = *a4;
  if (*a4 >= *a3)
    return result;
LABEL_14:
  *a3 = v11;
  *a4 = v4;
  v13 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = *((_QWORD *)a4 + 1);
  *((_QWORD *)a4 + 1) = v13;
  v14 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v14;
    v15 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v15;
    v16 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v16;
      v17 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v17;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN4WGSL18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN4WGSL18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL22RewriteGlobalVariables11UsedGlobalsENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  result = (WTF *)a2[1];
  if (result)
  {
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v4 = *a2;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (_QWORD *)(v4 + 8);
      do
      {
        if (*((_DWORD *)v6 - 2) != -2)
        {
          if (*v6)
            WTF::fastFree((WTF *)(*v6 - 16), a2);
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    return (WTF *)WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL22RewriteGlobalVariables11UsedGlobalsENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*,false>(uint64_t result, int *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  unsigned int v89;
  unint64_t v90;
  int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  _DWORD *v95;
  uint64_t v96;
  int *v97;
  unsigned int v98;
  unsigned int v99;
  int *v100;
  BOOL v101;
  int *v102;
  unsigned int v103;
  unint64_t v104;
  int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  int *v128;
  BOOL v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int64_t v140;
  int64_t v141;
  BOOL v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  BOOL v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  int64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v113 = *(a2 - 4);
        v114 = *(_DWORD *)v8;
        if (v113 < *(_DWORD *)v8)
        {
          *(_DWORD *)v8 = v113;
          *(a2 - 4) = v114;
          goto LABEL_114;
        }
        return result;
      case 3:
        LODWORD(v87) = *(_DWORD *)(v8 + 16);
        LODWORD(v29) = *(_DWORD *)v8;
        v115 = *(a2 - 4);
        if (v87 >= *(_DWORD *)v8)
        {
          if (v115 < v87)
          {
            *(_DWORD *)(v8 + 16) = v115;
            *(a2 - 4) = v87;
            v167 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = *((_QWORD *)a2 - 1);
            *((_QWORD *)a2 - 1) = v167;
            v168 = *(_DWORD *)(v8 + 16);
            v169 = *(_DWORD *)v8;
            if (v168 < *(_DWORD *)v8)
            {
              *(_DWORD *)v8 = v168;
              *(_DWORD *)(v8 + 16) = v169;
              v127 = *(_QWORD *)(v8 + 8);
              v123 = *(_QWORD *)(v8 + 24);
              goto LABEL_184;
            }
          }
        }
        else
        {
          if (v115 >= v87)
            goto LABEL_194;
          *(_DWORD *)v8 = v115;
          *(a2 - 4) = (int)v29;
LABEL_114:
          v116 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v116;
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)v8, (unsigned int *)(v8 + 16), (unsigned int *)(v8 + 32), (unsigned int *)a2 - 4);
      case 5:
        result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)v8, (unsigned int *)(v8 + 16), (unsigned int *)(v8 + 32), (unsigned int *)(v8 + 48));
        v117 = *(a2 - 4);
        v118 = *(_DWORD *)(v8 + 48);
        if (v117 < v118)
        {
          *(_DWORD *)(v8 + 48) = v117;
          *(a2 - 4) = v118;
          v119 = *(_QWORD *)(v8 + 56);
          *(_QWORD *)(v8 + 56) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v119;
          v120 = *(_DWORD *)(v8 + 48);
          v121 = *(_DWORD *)(v8 + 32);
          if (v120 < v121)
          {
            *(_DWORD *)(v8 + 32) = v120;
            *(_DWORD *)(v8 + 48) = v121;
            v122 = *(_QWORD *)(v8 + 40);
            v123 = *(_QWORD *)(v8 + 56);
            *(_QWORD *)(v8 + 40) = v123;
            *(_QWORD *)(v8 + 56) = v122;
            v124 = *(_DWORD *)(v8 + 16);
            if (v120 < v124)
            {
              *(_DWORD *)(v8 + 16) = v120;
              *(_DWORD *)(v8 + 32) = v124;
              v125 = *(_QWORD *)(v8 + 24);
              *(_QWORD *)(v8 + 24) = v123;
              *(_QWORD *)(v8 + 40) = v125;
              v126 = *(_DWORD *)v8;
              if (v120 < *(_DWORD *)v8)
              {
                *(_DWORD *)v8 = v120;
                *(_DWORD *)(v8 + 16) = v126;
                v127 = *(_QWORD *)(v8 + 8);
LABEL_184:
                *(_QWORD *)(v8 + 8) = v123;
                *(_QWORD *)(v8 + 24) = v127;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v128 = (int *)(v8 + 16);
          v130 = (int *)v8 == a2 || v128 == a2;
          if ((a4 & 1) != 0)
          {
            if (v130)
              return result;
            v131 = 0;
            v132 = v8;
            while (1)
            {
              v134 = v128;
              v135 = *(_DWORD *)(v132 + 16);
              v136 = *(_DWORD *)v132;
              if (v135 < *(_DWORD *)v132)
              {
                v137 = *(_QWORD *)(v132 + 24);
                v138 = v131;
                do
                {
                  v139 = v8 + v138;
                  *(_DWORD *)(v139 + 16) = v136;
                  *(_QWORD *)(v139 + 24) = *(_QWORD *)(v8 + v138 + 8);
                  if (!v138)
                  {
                    v133 = v8;
                    goto LABEL_131;
                  }
                  v136 = *(_DWORD *)(v139 - 16);
                  v138 -= 16;
                }
                while (v135 < v136);
                v133 = v8 + v138 + 16;
LABEL_131:
                *(_DWORD *)v133 = v135;
                *(_QWORD *)(v133 + 8) = v137;
              }
              v128 = v134 + 4;
              v131 += 16;
              v132 = (unint64_t)v134;
              if (v134 + 4 == a2)
                return result;
            }
          }
          if (v130)
            return result;
          v170 = 0;
          v29 = (_QWORD *)(v8 + 24);
          v87 = -2;
          v171 = 1;
          v172 = v8;
          while (1)
          {
            v173 = v171;
            v174 = *v128;
            if (v174 < *(_DWORD *)v172)
            {
              v175 = *(_QWORD *)(v172 + 24);
              v176 = *(_DWORD *)(v8 + 16 * v170);
              v177 = v29;
              v178 = v87;
              v179 = v29;
              do
              {
                *((_DWORD *)v177 - 2) = v176;
                v180 = *(v179 - 2);
                v179 -= 2;
                *v177 = v180;
                v146 = __CFADD__(v178++, 1);
                if (v146)
                  goto LABEL_193;
                v176 = *((_DWORD *)v177 - 10);
                v177 = v179;
              }
              while (v174 < v176);
              *((_DWORD *)v179 - 2) = v174;
              *v179 = v175;
            }
            v172 = v8 + 16 * v173;
            v171 = v173 + 1;
            v128 = (int *)(v8 + 16 * (v173 + 1));
            --v87;
            v29 += 2;
            v170 = v173;
            if (v128 == a2)
              return result;
          }
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = (unsigned int *)(v8 + 16 * ((unint64_t)v10 >> 1));
          v13 = *(a2 - 4);
          if ((unint64_t)v9 < 0x801)
          {
            v17 = *(_DWORD *)v8;
            v18 = *v12;
            if (*(_DWORD *)v8 >= *v12)
            {
              if (v13 < v17)
              {
                *(_DWORD *)v8 = v13;
                *(a2 - 4) = v17;
                v26 = *(_QWORD *)(v8 + 8);
                *(_QWORD *)(v8 + 8) = *((_QWORD *)a2 - 1);
                *((_QWORD *)a2 - 1) = v26;
                v27 = *v12;
                if (*(_DWORD *)v8 < *v12)
                {
                  *v12 = *(_DWORD *)v8;
                  *(_DWORD *)v8 = v27;
                  v29 = (_QWORD *)(v8 + 16 * v11);
                  v28 = v29[1];
                  v29[1] = *(_QWORD *)(v8 + 8);
                  *(_QWORD *)(v8 + 8) = v28;
                  --a3;
                  LODWORD(v29) = v27;
                  if ((a4 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_31;
            }
            v19 = (uint64_t *)(v8 + 16 * v11 + 8);
            if (v13 >= v17)
            {
              *v12 = v17;
              *(_DWORD *)v8 = v18;
              v20 = *v19;
              *v19 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v20;
              v44 = *(a2 - 4);
              if (v44 >= v18)
                goto LABEL_31;
              *(_DWORD *)v8 = v44;
              *(a2 - 4) = v18;
              *(_QWORD *)(v8 + 8) = *((_QWORD *)a2 - 1);
            }
            else
            {
              *v12 = v13;
              *(a2 - 4) = v18;
              v20 = *v19;
              *v19 = *((_QWORD *)a2 - 1);
            }
            *((_QWORD *)a2 - 1) = v20;
LABEL_31:
            --a3;
            LODWORD(v29) = *(_DWORD *)v8;
            if ((a4 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v14 = *v12;
          v15 = *(_DWORD *)v8;
          if (*v12 >= *(_DWORD *)v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 4) = v14;
              v21 = v8 + 16 * v11;
              v23 = *(_QWORD *)(v21 + 8);
              v22 = (_QWORD *)(v21 + 8);
              *v22 = *((_QWORD *)a2 - 1);
              *((_QWORD *)a2 - 1) = v23;
              v24 = *(_DWORD *)v8;
              if (*v12 < *(_DWORD *)v8)
              {
                *(_DWORD *)v8 = *v12;
                *v12 = v24;
                v25 = *(_QWORD *)(v8 + 8);
                *(_QWORD *)(v8 + 8) = *v22;
                *v22 = v25;
              }
            }
          }
          else if (v13 >= v14)
          {
            *(_DWORD *)v8 = v14;
            *v12 = v15;
            v30 = *(_QWORD *)(v8 + 8);
            v31 = (_QWORD *)(v8 + 8 + 16 * v11);
            *(_QWORD *)(v8 + 8) = *v31;
            *v31 = v30;
            v32 = *(a2 - 4);
            if (v32 < v15)
            {
              *v12 = v32;
              *(a2 - 4) = v15;
              *v31 = *((_QWORD *)a2 - 1);
              *((_QWORD *)a2 - 1) = v30;
            }
          }
          else
          {
            *(_DWORD *)v8 = v13;
            *(a2 - 4) = v15;
            v16 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *((_QWORD *)a2 - 1);
            *((_QWORD *)a2 - 1) = v16;
          }
          v33 = v11 - 1;
          v34 = (unsigned int *)(v8 + 16 * (v11 - 1));
          v35 = *v34;
          v36 = *(_DWORD *)(v8 + 16);
          v37 = *(a2 - 8);
          if (*v34 >= v36)
          {
            if (v37 < v35)
            {
              *v34 = v37;
              *(a2 - 8) = v35;
              v39 = v8 + 16 * v33;
              v41 = *(_QWORD *)(v39 + 8);
              v40 = (_QWORD *)(v39 + 8);
              *v40 = *((_QWORD *)a2 - 3);
              *((_QWORD *)a2 - 3) = v41;
              v42 = *(_DWORD *)(v8 + 16);
              if (*v34 < v42)
              {
                *(_DWORD *)(v8 + 16) = *v34;
                *v34 = v42;
                v43 = *(_QWORD *)(v8 + 24);
                *(_QWORD *)(v8 + 24) = *v40;
                *v40 = v43;
              }
            }
          }
          else if (v37 >= v35)
          {
            *(_DWORD *)(v8 + 16) = v35;
            v45 = v8 + 16 * v33;
            v47 = *(_QWORD *)(v45 + 8);
            v46 = (_QWORD *)(v45 + 8);
            *v34 = v36;
            v48 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = v47;
            *v46 = v48;
            v49 = *(a2 - 8);
            if (v49 < v36)
            {
              *v34 = v49;
              *(a2 - 8) = v36;
              *v46 = *((_QWORD *)a2 - 3);
              *((_QWORD *)a2 - 3) = v48;
            }
          }
          else
          {
            *(_DWORD *)(v8 + 16) = v37;
            *(a2 - 8) = v36;
            v38 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = *((_QWORD *)a2 - 3);
            *((_QWORD *)a2 - 3) = v38;
          }
          v50 = v11 + 1;
          v51 = (unsigned int *)(v8 + 16 * (v11 + 1));
          v52 = *v51;
          v53 = *(_DWORD *)(v8 + 32);
          v54 = *(a2 - 12);
          if (*v51 >= v53)
          {
            if (v54 < v52)
            {
              *v51 = v54;
              *(a2 - 12) = v52;
              v56 = v8 + 16 * v50;
              v58 = *(_QWORD *)(v56 + 8);
              v57 = (_QWORD *)(v56 + 8);
              *v57 = *((_QWORD *)a2 - 5);
              *((_QWORD *)a2 - 5) = v58;
              v59 = *(_DWORD *)(v8 + 32);
              if (*v51 < v59)
              {
                *(_DWORD *)(v8 + 32) = *v51;
                *v51 = v59;
                v60 = *(_QWORD *)(v8 + 40);
                *(_QWORD *)(v8 + 40) = *v57;
                *v57 = v60;
              }
            }
          }
          else if (v54 >= v52)
          {
            *(_DWORD *)(v8 + 32) = v52;
            v61 = v8 + 16 * v50;
            v63 = *(_QWORD *)(v61 + 8);
            v62 = (_QWORD *)(v61 + 8);
            *v51 = v53;
            v64 = *(_QWORD *)(v8 + 40);
            *(_QWORD *)(v8 + 40) = v63;
            *v62 = v64;
            v65 = *(a2 - 12);
            if (v65 < v53)
            {
              *v51 = v65;
              *(a2 - 12) = v53;
              *v62 = *((_QWORD *)a2 - 5);
              *((_QWORD *)a2 - 5) = v64;
            }
          }
          else
          {
            *(_DWORD *)(v8 + 32) = v54;
            *(a2 - 12) = v53;
            v55 = *(_QWORD *)(v8 + 40);
            *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 - 5);
            *((_QWORD *)a2 - 5) = v55;
          }
          v66 = *v12;
          v67 = *v34;
          v68 = *v51;
          if (*v12 >= *v34)
          {
            if (v68 >= v66)
              goto LABEL_49;
            *v12 = v68;
            v72 = v8 + 16 * v11;
            v74 = *(_QWORD *)(v72 + 8);
            v73 = (_QWORD *)(v72 + 8);
            result = v74;
            *v51 = v66;
            v75 = v8 + 16 * v50;
            v76 = *(_QWORD *)(v75 + 8);
            *v73 = v76;
            *(_QWORD *)(v75 + 8) = v74;
            if (v68 < v67)
            {
              *v34 = v68;
              *v12 = v67;
              v77 = v8 + 16 * v33;
              v78 = *(_QWORD *)(v77 + 8);
              *(_QWORD *)(v77 + 8) = v76;
              *v73 = v78;
              goto LABEL_53;
            }
            goto LABEL_52;
          }
          v69 = (uint64_t *)(v8 + 16 * v33 + 8);
          if (v68 < v66)
          {
            *v34 = v68;
            *v51 = v67;
            v70 = v8 + 16 * v50;
            v71 = *v69;
            *v69 = *(_QWORD *)(v70 + 8);
            *(_QWORD *)(v70 + 8) = v71;
LABEL_49:
            v67 = v66;
            goto LABEL_53;
          }
          *v34 = v66;
          *v12 = v67;
          v79 = v8 + 16 * v11;
          v81 = *(_QWORD *)(v79 + 8);
          v80 = (_QWORD *)(v79 + 8);
          v82 = *v69;
          *v69 = v81;
          *v80 = v82;
          if (v68 < v67)
          {
            *v12 = v68;
            *v51 = v67;
            v83 = v8 + 16 * v50;
            *v80 = *(_QWORD *)(v83 + 8);
            *(_QWORD *)(v83 + 8) = v82;
LABEL_52:
            v67 = v68;
          }
LABEL_53:
          v84 = *(_DWORD *)v8;
          *(_DWORD *)v8 = v67;
          *v12 = v84;
          v29 = (_QWORD *)(v8 + 16 * v11);
          v85 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = v29[1];
          v29[1] = v85;
          --a3;
          LODWORD(v29) = *(_DWORD *)v8;
          if ((a4 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(_DWORD *)(v8 - 16) >= v29)
          {
            v87 = *(_QWORD *)(v8 + 8);
            if (v29 >= *(a2 - 4))
            {
              v104 = v8 + 16;
              do
              {
                v8 = v104;
                if (v104 >= (unint64_t)a2)
                  break;
                v104 += 16;
              }
              while (v29 >= *(_DWORD *)v8);
            }
            else
            {
              v102 = (int *)(v8 + 16);
              do
              {
                if (v102 == a2)
                  goto LABEL_193;
                v103 = *v102;
                v102 += 4;
              }
              while (v29 >= v103);
              v8 = (unint64_t)(v102 - 4);
            }
            v105 = a2;
            if (v8 < (unint64_t)a2)
            {
              v105 = a2;
              while (v105 != (int *)v7)
              {
                v106 = *(v105 - 4);
                v105 -= 4;
                if (v29 >= v106)
                  goto LABEL_94;
              }
              goto LABEL_193;
            }
LABEL_94:
            if (v8 < (unint64_t)v105)
            {
              v107 = *(_DWORD *)v8;
              v108 = *v105;
              do
              {
                *(_DWORD *)v8 = v108;
                *v105 = v107;
                v109 = *(_QWORD *)(v8 + 8);
                *(_QWORD *)(v8 + 8) = *((_QWORD *)v105 + 1);
                *((_QWORD *)v105 + 1) = v109;
                v110 = (int *)(v8 + 16);
                do
                {
                  if (v110 == a2)
                    goto LABEL_193;
                  v111 = *v110;
                  v110 += 4;
                  v107 = v111;
                }
                while (v29 >= v111);
                v8 = (unint64_t)(v110 - 4);
                do
                {
                  if (v105 == (int *)v7)
                    goto LABEL_193;
                  v112 = *(v105 - 4);
                  v105 -= 4;
                  v108 = v112;
                }
                while (v29 < v112);
              }
              while (v8 < (unint64_t)v105);
            }
            if (v8 - 16 != v7)
            {
              *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
            }
            a4 = 0;
            *(_DWORD *)(v8 - 16) = (_DWORD)v29;
            *(_QWORD *)(v8 - 8) = v87;
            continue;
          }
LABEL_55:
          v86 = 0;
          v87 = *(_QWORD *)(v8 + 8);
          do
          {
            v88 = (int *)(v8 + v86 + 16);
            if (v88 == a2)
              goto LABEL_193;
            v89 = *v88;
            v86 += 16;
          }
          while (*v88 < v29);
          v90 = v8 + v86;
          v91 = a2;
          if (v86 != 16)
          {
            while (v91 != (int *)v8)
            {
              v92 = *(v91 - 4);
              v91 -= 4;
              if (v92 < v29)
                goto LABEL_65;
            }
LABEL_193:
            __break(1u);
LABEL_194:
            *(_DWORD *)v7 = v87;
            *(_DWORD *)(v7 + 16) = (_DWORD)v29;
            v181 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 24) = v181;
            v182 = *(a2 - 4);
            if (v182 < v29)
            {
              *(_DWORD *)(v7 + 16) = v182;
              *(a2 - 4) = (int)v29;
              *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 - 1);
              *((_QWORD *)a2 - 1) = v181;
            }
            return result;
          }
          v91 = a2;
          do
          {
            if (v90 >= (unint64_t)v91)
              break;
            v93 = *(v91 - 4);
            v91 -= 4;
          }
          while (v93 >= v29);
LABEL_65:
          if (v90 >= (unint64_t)v91)
          {
            v8 += v86;
            v100 = (int *)(v90 - 16);
            if (v90 - 16 != v7)
              goto LABEL_75;
          }
          else
          {
            v94 = *v91;
            v8 += v86;
            v95 = v91;
            do
            {
              *(_DWORD *)v8 = v94;
              *v95 = v89;
              v96 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *((_QWORD *)v95 + 1);
              *((_QWORD *)v95 + 1) = v96;
              v97 = (int *)(v8 + 16);
              do
              {
                if (v97 == a2)
                  goto LABEL_193;
                v98 = *v97;
                v97 += 4;
                v89 = v98;
              }
              while (v98 < v29);
              v8 = (unint64_t)(v97 - 4);
              do
              {
                if (v95 == (_DWORD *)v7)
                  goto LABEL_193;
                v99 = *(v95 - 4);
                v95 -= 4;
                v94 = v99;
              }
              while (v99 >= v29);
            }
            while (v8 < (unint64_t)v95);
            v100 = (int *)(v8 - 16);
            if (v8 - 16 != v7)
            {
LABEL_75:
              *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
            }
          }
          *(_DWORD *)(v8 - 16) = (_DWORD)v29;
          *(_QWORD *)(v8 - 8) = v87;
          if (v90 < (unint64_t)v91)
            goto LABEL_79;
          v101 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*>(v7, v100);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*>(v8, a2);
          if (!(_DWORD)result)
          {
            if (v101)
              continue;
LABEL_79:
            result = std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*,false>(v7, v100, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v100;
          if (v101)
            return result;
          goto LABEL_2;
        }
        if ((int *)v8 == a2)
          return result;
        v140 = (unint64_t)(v10 - 2) >> 1;
        v141 = v140;
        while (2)
        {
          if (v140 >= v141)
          {
            v143 = (2 * v141) | 1;
            v144 = v8 + 16 * v143;
            if (2 * v141 + 2 >= v10)
            {
              v145 = *(_DWORD *)v144;
              v147 = v8 + 16 * v141;
              v148 = *(_DWORD *)v147;
              if (*(_DWORD *)v144 >= *(_DWORD *)v147)
              {
LABEL_151:
                v149 = *(_QWORD *)(v147 + 8);
                while (1)
                {
                  result = v147;
                  v147 = v144;
                  *(_DWORD *)result = v145;
                  *(_QWORD *)(result + 8) = *(_QWORD *)(v144 + 8);
                  if (v140 < v143)
                    break;
                  result = (2 * v143) | 1;
                  v144 = v8 + 16 * result;
                  v143 = 2 * v143 + 2;
                  if (v143 < v10)
                  {
                    v145 = *(_DWORD *)v144;
                    v150 = *(_DWORD *)(v144 + 16);
                    if (*(_DWORD *)v144 <= v150)
                      v145 = *(_DWORD *)(v144 + 16);
                    if (*(_DWORD *)v144 >= v150)
                      v143 = result;
                    else
                      v144 += 16;
                    if (v145 < v148)
                      break;
                  }
                  else
                  {
                    v145 = *(_DWORD *)v144;
                    v143 = result;
                    if (*(_DWORD *)v144 < v148)
                      break;
                  }
                }
                *(_DWORD *)v147 = v148;
                *(_QWORD *)(v147 + 8) = v149;
              }
            }
            else
            {
              v145 = *(_DWORD *)(v144 + 16);
              v146 = *(_DWORD *)v144 >= v145;
              if (*(_DWORD *)v144 > v145)
                v145 = *(_DWORD *)v144;
              if (!v146)
              {
                v144 += 16;
                v143 = 2 * v141 + 2;
              }
              v147 = v8 + 16 * v141;
              v148 = *(_DWORD *)v147;
              if (v145 >= *(_DWORD *)v147)
                goto LABEL_151;
            }
          }
          v142 = v141-- <= 0;
          if (!v142)
            continue;
          break;
        }
        v151 = (unint64_t)v9 >> 4;
        do
        {
          v152 = 0;
          v153 = *(_DWORD *)v8;
          v154 = *(_QWORD *)(v8 + 8);
          v155 = (unint64_t)(v151 - 2) >> 1;
          v156 = v8;
          do
          {
            while (1)
            {
              v158 = v156 + 16 * v152 + 16;
              v159 = (2 * v152) | 1;
              v152 = 2 * v152 + 2;
              if (v152 < v151)
                break;
              v152 = v159;
              *(_DWORD *)v156 = *(_DWORD *)v158;
              *(_QWORD *)(v156 + 8) = *(_QWORD *)(v158 + 8);
              v156 = v158;
              if (v159 > v155)
                goto LABEL_174;
            }
            v157 = *(_DWORD *)v158;
            result = *(unsigned int *)(v158 + 16);
            if (*(_DWORD *)v158 <= result)
              v157 = *(_DWORD *)(v158 + 16);
            if (*(_DWORD *)v158 >= result)
              v152 = v159;
            else
              v158 += 16;
            *(_DWORD *)v156 = v157;
            *(_QWORD *)(v156 + 8) = *(_QWORD *)(v158 + 8);
            v156 = v158;
          }
          while (v152 <= v155);
LABEL_174:
          if ((int *)v158 == a2 - 4)
          {
            *(_DWORD *)v158 = v153;
            *(_QWORD *)(v158 + 8) = v154;
          }
          else
          {
            *(_DWORD *)v158 = *(a2 - 4);
            *(_QWORD *)(v158 + 8) = *((_QWORD *)a2 - 1);
            *(a2 - 4) = v153;
            *((_QWORD *)a2 - 1) = v154;
            v160 = v158 - v8 + 16;
            if (v160 >= 17)
            {
              v161 = (((unint64_t)v160 >> 4) - 2) >> 1;
              v162 = v8 + 16 * v161;
              v163 = *(_DWORD *)v162;
              v164 = *(_DWORD *)v158;
              if (*(_DWORD *)v162 < *(_DWORD *)v158)
              {
                v165 = *(_QWORD *)(v158 + 8);
                do
                {
                  v166 = v158;
                  v158 = v162;
                  *(_DWORD *)v166 = v163;
                  *(_QWORD *)(v166 + 8) = *(_QWORD *)(v162 + 8);
                  if (!v161)
                    break;
                  v161 = (v161 - 1) >> 1;
                  v162 = v8 + 16 * v161;
                  v163 = *(_DWORD *)v162;
                }
                while (*(_DWORD *)v162 < v164);
                *(_DWORD *)v158 = v164;
                *(_QWORD *)(v158 + 8) = v165;
              }
            }
          }
          a2 -= 4;
          v142 = v151-- <= 2;
        }
        while (!v142);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*>(uint64_t a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 4);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(a2 - 4) = v7;
        goto LABEL_8;
      }
      return result;
    case 3:
      v8 = *(_DWORD *)(a1 + 16);
      v9 = *(_DWORD *)a1;
      v10 = *(a2 - 4);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v10 < v8)
        {
          *(_DWORD *)(a1 + 16) = v10;
          *(a2 - 4) = v8;
          v28 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v28;
          v29 = *(_DWORD *)(a1 + 16);
          v30 = *(_DWORD *)a1;
          if (v29 < *(_DWORD *)a1)
          {
            *(_DWORD *)a1 = v29;
            *(_DWORD *)(a1 + 16) = v30;
            v31 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *(_DWORD *)a1 = v8;
        *(_DWORD *)(a1 + 16) = v9;
        v35 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v35;
        v36 = *(a2 - 4);
        if (v36 < v9)
        {
          *(_DWORD *)(a1 + 16) = v36;
          *(a2 - 4) = v9;
          *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v35;
        }
      }
      else
      {
        *(_DWORD *)a1 = v10;
        *(a2 - 4) = v9;
LABEL_8:
        v11 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 48));
      v17 = *(a2 - 4);
      v18 = *(_DWORD *)(a1 + 48);
      if (v17 >= v18)
        return 1;
      *(_DWORD *)(a1 + 48) = v17;
      *(a2 - 4) = v18;
      v19 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 - 1);
      *((_QWORD *)a2 - 1) = v19;
      v20 = *(_DWORD *)(a1 + 48);
      v21 = *(_DWORD *)(a1 + 32);
      if (v20 >= v21)
        return 1;
      *(_DWORD *)(a1 + 32) = v20;
      *(_DWORD *)(a1 + 48) = v21;
      v22 = *(_QWORD *)(a1 + 40);
      v23 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v23;
      *(_QWORD *)(a1 + 56) = v22;
      v24 = *(_DWORD *)(a1 + 16);
      if (v20 >= v24)
        return 1;
      *(_DWORD *)(a1 + 16) = v20;
      *(_DWORD *)(a1 + 32) = v24;
      v25 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v23;
      *(_QWORD *)(a1 + 40) = v25;
      v26 = *(_DWORD *)a1;
      if (v20 >= *(_DWORD *)a1)
        return 1;
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 16) = v26;
      v27 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v23;
      *(_QWORD *)(a1 + 24) = v27;
      return 1;
    default:
      v12 = (unsigned int *)(a1 + 32);
      v13 = *(_DWORD *)(a1 + 32);
      v14 = *(_DWORD *)(a1 + 16);
      v15 = *(_DWORD *)a1;
      if (v14 >= *(_DWORD *)a1)
      {
        if (v13 < v14)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v14;
          v32 = *(_QWORD *)(a1 + 24);
          v33 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 24) = v33;
          *(_QWORD *)(a1 + 40) = v32;
          if (v13 < v15)
          {
            *(_DWORD *)a1 = v13;
            *(_DWORD *)(a1 + 16) = v15;
            v34 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;
            *(_QWORD *)(a1 + 24) = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 16) = v15;
        v37 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v37;
        if (v13 < v15)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v15;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v37;
        }
      }
      else
      {
        *(_DWORD *)a1 = v13;
        *(_DWORD *)(a1 + 32) = v15;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v16;
      }
      v38 = (unsigned int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      break;
  }
  while (1)
  {
    v41 = *v38;
    v42 = *v12;
    if (*v38 < *v12)
      break;
LABEL_38:
    v12 = v38;
    v39 += 16;
    v38 += 4;
    if (v38 == (unsigned int *)a2)
      return 1;
  }
  v43 = *((_QWORD *)v38 + 1);
  v44 = v39;
  do
  {
    v45 = a1 + v44;
    *(_DWORD *)(v45 + 48) = v42;
    *(_QWORD *)(v45 + 56) = *(_QWORD *)(a1 + v44 + 40);
    if (v44 == -32)
    {
      *(_DWORD *)a1 = v41;
      *(_QWORD *)(a1 + 8) = v43;
      if (++v40 != 8)
        goto LABEL_38;
      return v38 + 4 == (unsigned int *)a2;
    }
    v42 = *(_DWORD *)(v45 + 16);
    v44 -= 16;
  }
  while (v41 < v42);
  *(_DWORD *)(a1 + v44 + 48) = v41;
  *(_QWORD *)(a1 + v44 + 56) = v43;
  if (++v40 != 8)
    goto LABEL_38;
  return v38 + 4 == (unsigned int *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v1 = *(_QWORD *)(**(_QWORD **)a1 + 144);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((unsigned int (*)(char **))off_1E0FD41A0[v2])(&v6) == 1;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _BOOL8 v9;
  char v10;
  char *v11;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = *(_QWORD *)(v3 + 144);
  if (v2 >= 2)
  {
    if (v2 != 2)
      return v3 & 1;
    if (v4)
    {
      v7 = *(unsigned int *)(v4 + 48);
      if ((_DWORD)v7 != -1)
      {
        v11 = &v10;
        v6 = ((unsigned int (*)(char **))off_1E0FD41A0[v7])(&v11) == 8;
LABEL_9:
        LOBYTE(v3) = v6;
        return v3 & 1;
      }
      goto LABEL_14;
    }
    return 0;
  }
  if (!v4)
    return 0;
  v5 = *(unsigned int *)(v4 + 48);
  if ((_DWORD)v5 != -1)
  {
    v11 = &v10;
    v6 = ((unsigned int (*)(char **))off_1E0FD41A0[v5])(&v11) == 7;
    goto LABEL_9;
  }
LABEL_14:
  v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(v9);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _BOOL8 v8;
  char v9;
  char *v10;

  v2 = *(unsigned __int8 *)(a2 + 2);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 144);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v4 == -1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(v8);
    }
    v10 = &v9;
    v5 = ((uint64_t (*)(char **))off_1E0FD41A0[v4])(&v10);
  }
  else
  {
    v5 = 0;
  }
  if (v2)
    v6 = 3;
  else
    v6 = 2;
  return v5 == v6;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _BOOL8 v8;
  char v9;
  char *v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 144);
  if (!v3)
    return 0;
  v4 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v4 == -1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(v8);
  }
  else
  {
    v5 = *a2;
    v10 = &v9;
    v6 = ((uint64_t (*)(char **))off_1E0FD41A0[v4])(&v10);
    switch(v6)
    {
      case 6:
        return (v5 & 0xFD) == 0;
      case 5:
        return v5 == 2;
      case 4:
        return v5 == 1;
      default:
        return 0;
    }
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::typesMatch(WGSL::AST::Variable const&,std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v4;
  unsigned __int8 *v5;
  char v6;
  char *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 144);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((unsigned int (*)(char **))off_1E0FD41A0[v2])(&v7) == 9;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;

  v2 = *a2 - 8;
  if (v2 > 5)
    return 1;
  else
    return dword_18260F944[(char)v2];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 8) == 7)
    return 3;
  else
    return 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;

  v2 = *(unsigned __int8 *)(a2 + 2);
  if (v2 == 1)
    v3 = 5;
  else
    v3 = 4;
  if (v2 == 2)
    return 6;
  else
    return v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  if (*a2 == 5)
    return 3;
  else
    return 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::bindingTypeForType(WGSL::Type const*)::$_0,WGSL::bindingTypeForType(WGSL::Type const*)::$_1,WGSL::bindingTypeForType(WGSL::Type const*)::$_2,WGSL::bindingTypeForType(WGSL::Type const*)::$_3,WGSL::bindingTypeForType(WGSL::Type const*)::$_4,WGSL::bindingTypeForType(WGSL::Type const*)::$_5,WGSL::bindingTypeForType(WGSL::Type const*)::$_6,WGSL::bindingTypeForType(WGSL::Type const*)::$_7,WGSL::bindingTypeForType(WGSL::Type const*)::$_8,WGSL::bindingTypeForType(WGSL::Type const*)::$_9,WGSL::bindingTypeForType(WGSL::Type const*)::$_10,WGSL::bindingTypeForType(WGSL::Type const*)::$_11,WGSL::bindingTypeForType(WGSL::Type const*)::$_12,WGSL::bindingTypeForType(WGSL::Type const*)::$_13,WGSL::bindingTypeForType(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 - 1 < 2)
    return 3;
  else
    return 4;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::addressSpaceForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 == 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_0,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_1,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_2,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_3,WGSL::accessModeForBindingMember(std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const&>()
{
  return 0;
}

uint64_t WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  _DWORD *v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 32 * i) != -1)
      {
        v5 = a1 + 32 * i;
        v6 = *(WTF **)(v5 + 16);
        while (v6)
        {
          v8 = v6;
          v6 = (WTF *)*((_QWORD *)v6 + 2);
          v9 = *(_DWORD **)v8;
          *(_QWORD *)v8 = 0;
          if (v9)
          {
            if (*v9 == 2)
              WTF::StringImpl::destroy();
            else
              *v9 -= 2;
          }
          WTF::fastFree(v8, a2);
        }
        v7 = *(_QWORD *)(v5 + 8);
        if (v7)
          WTF::fastFree((WTF *)(v7 - 16), a2);
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  WTF *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  _DWORD *v42;
  WTF *v43;
  _DWORD *v44;
  uint64_t *result;
  uint64_t v46;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 32 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v46 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 32 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = 1;
          do
          {
            v28 = v26;
            v29 = *(_QWORD *)(v21 + 32 * v26);
            v26 = (v26 + v27++) & v22;
          }
          while (v29);
          v30 = v28;
          v31 = (uint64_t *)(v21 + 32 * v28);
          v32 = (WTF *)v31[2];
          while (v32)
          {
            v41 = v32;
            v32 = (WTF *)*((_QWORD *)v32 + 2);
            v42 = *(_DWORD **)v41;
            *(_QWORD *)v41 = 0;
            if (v42)
            {
              if (*v42 == 2)
                WTF::StringImpl::destroy();
              else
                *v42 -= 2;
            }
            WTF::fastFree(v41, v8);
          }
          v33 = v31 + 1;
          v34 = v31[1];
          if (v34)
            WTF::fastFree((WTF *)(v34 - 16), v8);
          *v31 = *v14;
          v35 = v4 + 32 * v11;
          *v33 = 0;
          v37 = *(_QWORD *)(v35 + 8);
          v36 = (_QWORD *)(v35 + 8);
          *v36 = 0;
          *v33 = v37;
          v38 = v36[1];
          v36[1] = 0;
          v31[2] = v38;
          v40 = (WTF *)v36[1];
          v39 = v36[2];
          v36[2] = 0;
          *(_QWORD *)(v21 + 32 * v30 + 24) = v39;
          while (v40)
          {
            v43 = v40;
            v40 = (WTF *)*((_QWORD *)v40 + 2);
            v44 = *(_DWORD **)v43;
            *(_QWORD *)v43 = 0;
            if (v44)
            {
              if (*v44 == 2)
                WTF::StringImpl::destroy();
              else
                *v44 -= 2;
            }
            WTF::fastFree(v43, v8);
          }
          if (*v36)
            WTF::fastFree((WTF *)(*v36 - 16), v8);
          v13 = v46;
          if (v14 == a3)
            v12 = v31;
        }
        else
        {
          v16 = v4 + 32 * v11;
          v17 = *(WTF **)(v16 + 16);
          while (v17)
          {
            v19 = v17;
            v17 = (WTF *)*((_QWORD *)v17 + 2);
            v20 = *(_DWORD **)v19;
            *(_QWORD *)v19 = 0;
            if (v20)
            {
              if (*v20 == 2)
                WTF::StringImpl::destroy();
              else
                *v20 -= 2;
            }
            WTF::fastFree(v19, v8);
          }
          v18 = *(_QWORD *)(v16 + 8);
          if (v18)
            WTF::fastFree((WTF *)(v18 - 16), v8);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl ***a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl ***)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
        break;
LABEL_6:
      if (++v11 == v7)
        goto LABEL_19;
    }
    v15 = *a1;
    if (*a1)
    {
      v16 = *(_DWORD *)(v15 - 8);
      v17 = *v14;
      v18 = *((_DWORD *)*v14 + 4);
      if (v18 >= 0x100)
      {
LABEL_10:
        v19 = v18 >> 8;
        goto LABEL_13;
      }
    }
    else
    {
      v16 = 0;
      v17 = *v14;
      v18 = *((_DWORD *)*v14 + 4);
      if (v18 >= 0x100)
        goto LABEL_10;
    }
    v19 = WTF::StringImpl::hashSlowCase(v17);
LABEL_13:
    v20 = 0;
    do
    {
      v21 = v19 & v16;
      v19 = ++v20 + v21;
    }
    while (*(_QWORD *)(v15 + 8 * v21));
    *(_QWORD *)(v15 + 8 * v21) = *v13;
    if (v13 == a3)
      v12 = v15 + 8 * v21;
    goto LABEL_6;
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

void std::__function::__func<void WGSL::ShaderModule::insert<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,std::reference_wrapper<WGSL::AST::Statement>&&)::{lambda(void)#1},std::allocator<std::reference_wrapper<WGSL::AST::Statement>&&>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 std::__function::__func<void WGSL::ShaderModule::insert<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,std::reference_wrapper<WGSL::AST::Statement>&&)::{lambda(void)#1},std::allocator<std::reference_wrapper<WGSL::AST::Statement>&&>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E0FD4278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void WGSL::ShaderModule::insert<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,std::reference_wrapper<WGSL::AST::Statement>&&)::{lambda(void)#1},std::allocator<std::reference_wrapper<WGSL::AST::Statement>&&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E0FD4278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<void WGSL::ShaderModule::insert<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,std::reference_wrapper<WGSL::AST::Statement>&&)::{lambda(void)#1},std::allocator<std::reference_wrapper<WGSL::AST::Statement>&&>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)v1 + 8 * *(_QWORD *)(a1 + 16);
  result = memmove((void *)v2, (const void *)(v2 + 8), *(_QWORD *)v1 + 8 * *(unsigned int *)(v1 + 12) - (v2 + 8));
  --*(_DWORD *)(v1 + 12);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = off_1E0FD42C0;
  v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v6, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = off_1E0FD42C0;
  v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v6, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40E4E4A046);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *result;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  result = (char *)operator new(0x70uLL);
  v3 = result;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = off_1E0FD42C0;
  *((_QWORD *)result + 1) = v4;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)result + 2) = off_1E0FD2EC0;
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  result[48] = 0;
  result[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)result + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      result = (char *)((uint64_t (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v22, result + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD2F38;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(unsigned int *)(a1 + 100);
  *((_QWORD *)v3 + 11) = 0;
  *((_QWORD *)v3 + 12) = 0;
  *((_QWORD *)v3 + 10) = v6;
  *((_DWORD *)v3 + 25) = v7;
  if (!(_DWORD)v7)
    goto LABEL_17;
  if (!(v7 >> 29))
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    *((_DWORD *)v3 + 24) = v7;
    *((_QWORD *)v3 + 11) = v8;
    v9 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(a1 + 88);
      v11 = (v9 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v11 < 3)
      {
        v12 = *(uint64_t **)(a1 + 88);
      }
      else
      {
        v12 = *(uint64_t **)(a1 + 88);
        if ((unint64_t)v8 - v10 >= 0x20)
        {
          v13 = v11 + 1;
          v14 = v13 & 0x3FFFFFFFFFFFFFFCLL;
          v15 = &v8[v14];
          v12 = (uint64_t *)(v10 + v14 * 8);
          v16 = (__int128 *)(v10 + 16);
          v17 = v8 + 2;
          v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v19 = *v16;
            *(v17 - 1) = *(v16 - 1);
            *v17 = v19;
            v16 += 2;
            v17 += 2;
            v18 -= 4;
          }
          while (v18);
          v8 = v15;
          if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_17;
        }
      }
      v20 = (uint64_t *)(v10 + 8 * v9);
      do
      {
        v21 = *v12++;
        *v8++ = v21;
      }
      while (v12 != v20);
    }
LABEL_17:
    *((_WORD *)v3 + 52) = *(_WORD *)(a1 + 104);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD42C0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD3E88[v7])(&v22);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD2F38;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v3 + 80);
  v8 = *(unsigned int *)(v3 + 100);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 100) = v8;
  if (!(_DWORD)v8)
    goto LABEL_17;
  if (!(v8 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a2 + 96) = v8;
    *(_QWORD *)(a2 + 88) = result;
    v9 = *(unsigned int *)(v3 + 100);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v3 + 88);
      v11 = (v9 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v11 < 3)
      {
        v12 = *(uint64_t **)(v3 + 88);
      }
      else
      {
        v12 = *(uint64_t **)(v3 + 88);
        if ((unint64_t)(result - v10) >= 0x20)
        {
          v13 = v11 + 1;
          v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
          v15 = result + v14;
          v12 = (uint64_t *)(v10 + v14);
          v16 = (__int128 *)(v10 + 16);
          v17 = (_OWORD *)(result + 16);
          v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v19 = *v16;
            *(v17 - 1) = *(v16 - 1);
            *v17 = v19;
            v16 += 2;
            v17 += 2;
            v18 -= 4;
          }
          while (v18);
          result = v15;
          if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_17;
        }
      }
      v20 = (uint64_t *)(v10 + 8 * v9);
      do
      {
        v21 = *v12++;
        *(_QWORD *)result = v21;
        result += 8;
      }
      while (v12 != v20);
    }
LABEL_17:
    *(_WORD *)(a2 + 104) = *(_WORD *)(v3 + 104);
    return result;
  }
  __break(0xC471u);
  return result;
}

WTF *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1, void *a2)
{
  WTF *result;
  uint64_t v4;
  char v5;

  result = *(WTF **)(a1 + 88);
  if (result)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
      result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v5, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(_QWORD *__p, void *a2)
{
  WTF *v3;
  uint64_t v4;
  char v5;

  v3 = (WTF *)__p[11];
  if (v3)
  {
    __p[11] = 0;
    *((_DWORD *)__p + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v4 = *((unsigned int *)__p + 16);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD3E30[v4])(&v5, __p + 6);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = &off_1E0FD2EE8;
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v3 = off_1E0FD2EC0;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v3 + 48) = -1;
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v4])(&v7, v3 + 32, a1 + 48);
      *(_DWORD *)(v3 + 48) = v4;
    }
    *(_BYTE *)(v3 + 56) = 1;
  }
  *(_QWORD *)v3 = off_1E0FD2F38;
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 64) = v5;
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(v3 + 72) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(v3 + 80) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(v3 + 84) = v6;
  *(_WORD *)(v3 + 88) = *(_WORD *)(a1 + 104);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  __int128 v27;
  WTF::StringImpl *v28;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 32 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    while (1)
    {
      v16 = (WTF::StringImpl **)(v6 + 32 * v13);
      v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          v18 = *a1;
          if (*a1)
          {
            v19 = *(_DWORD *)(v18 - 8);
            v20 = *((_DWORD *)v17 + 4);
            if (v20 >= 0x100)
              goto LABEL_14;
LABEL_16:
            v21 = WTF::StringImpl::hashSlowCase(v17);
          }
          else
          {
            v19 = 0;
            v20 = *((_DWORD *)v17 + 4);
            if (v20 < 0x100)
              goto LABEL_16;
LABEL_14:
            v21 = v20 >> 8;
          }
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v21 = ++v22 + v23;
          }
          while (*(_QWORD *)(v18 + 32 * v23));
          v24 = v18 + 32 * v23;
          *(_QWORD *)v24 = 0;
          v25 = *v16;
          *v16 = 0;
          *(_QWORD *)v24 = v25;
          v26 = v6 + 32 * v13;
          v27 = *(_OWORD *)(v26 + 8);
          *(_QWORD *)(v24 + 24) = *(_QWORD *)(v26 + 24);
          *(_OWORD *)(v24 + 8) = v27;
          v28 = *v16;
          *v16 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v16 == a3)
            v14 = v24;
          goto LABEL_9;
        }
        *v16 = 0;
      }
LABEL_9:
      if (++v13 == v15)
        goto LABEL_27;
    }
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_27:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int8x8_t v15;
  int8x8_t v16;
  int32x2_t v17;
  int8x8_t v18;
  int32x2_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (unsigned int *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        v12 = v10[1];
        if (v11 | v12)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v11, v12), (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v11, v12), 0xFuLL)));
          v16 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v15, 0xAuLL), v15), (int32x2_t)0x900000009);
          v17 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v16, 6uLL), v16);
          v18 = (int8x8_t)vadd_s32(v17, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v17, 0xBuLL)));
          v19 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 0x10uLL), v18), (int32x2_t)0x109132F905AC73FELL);
          v20 = v14 & ((0xD7862706ELL * (unint64_t)vadd_s32(v19, vdup_lane_s32(v19, 1)).u32[0]) >> 4);
          v21 = 1;
          do
          {
            v22 = v13 + 16 * v20;
            v8 = (void *)*(unsigned int *)(v22 + 4);
            v20 = (v20 + v21++) & v14;
          }
          while (*(_QWORD *)v22);
          *(_OWORD *)v22 = *(_OWORD *)v10;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

int *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD **v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  WTF **v35;
  uint64_t v36;
  _DWORD **v37;
  _DWORD *v38;
  WTF *v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  WTF *v43;
  WTF **v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD **v48;
  _DWORD *v49;
  WTF *v50;
  int *result;
  uint64_t v52;
  int *v55;
  uint64_t v56;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v9 = v7 + 16;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    v9 = v7 + 16;
    if (!a2)
      goto LABEL_7;
  }
  v10 = a2;
  v11 = (_QWORD *)(v7 + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *v11 = 0;
    v11[1] = 0;
    v11 += 3;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v56 = v4;
    v52 = v5;
    do
    {
      v15 = (int *)(v4 + 24 * v12);
      v16 = *v15;
      if (*v15 != -2)
      {
        if (v16 == -1)
        {
          v17 = v4 + 24 * v12;
          v18 = (WTF **)(v17 + 8);
          v19 = *(unsigned int *)(v17 + 20);
          if ((_DWORD)v19)
          {
            v20 = 16 * v19;
            v21 = (_DWORD **)((char *)*v18 + 8);
            do
            {
              v22 = *v21;
              *v21 = 0;
              if (v22)
              {
                if (*v22 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v22 -= 2;
              }
              v21 += 2;
              v20 -= 16;
            }
            while (v20);
          }
          v25 = *v18;
          if (*v18)
          {
            *v18 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            WTF::fastFree(v25, v8);
          }
        }
        else
        {
          v23 = *a1;
          v55 = v13;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v26 = 0;
          v27 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          v28 = ((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) ^ (((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) >> 16);
          do
          {
            v29 = v28 & v24;
            v30 = (int *)(v23 + 24 * (v28 & v24));
            v28 = ++v26 + (v28 & v24);
          }
          while (*v30 != -1);
          v31 = v23 + 24 * v29;
          v34 = *(_DWORD *)(v31 + 20);
          v33 = (_DWORD *)(v31 + 20);
          v32 = v34;
          v35 = (WTF **)(v33 - 3);
          if (v34)
          {
            v36 = 16 * v32;
            v37 = (_DWORD **)((char *)*v35 + 8);
            do
            {
              v38 = *v37;
              *v37 = 0;
              if (v38)
              {
                if (*v38 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v38 -= 2;
              }
              v37 += 2;
              v36 -= 16;
            }
            while (v36);
          }
          v39 = *v35;
          if (*v35)
          {
            *v35 = 0;
            *(_DWORD *)(v23 + 24 * v29 + 16) = 0;
            WTF::fastFree(v39, v8);
          }
          *v30 = *v15;
          v40 = v56 + 24 * v12;
          *v35 = 0;
          *(_QWORD *)(v33 - 1) = 0;
          v42 = *(_DWORD *)(v40 + 16);
          v41 = (_DWORD *)(v40 + 16);
          v44 = (WTF **)(v41 - 2);
          v43 = (WTF *)*((_QWORD *)v41 - 1);
          *((_QWORD *)v41 - 1) = 0;
          *v35 = v43;
          *v41 = 0;
          *(_DWORD *)(v23 + 24 * v29 + 16) = v42;
          v45 = v41[1];
          v41[1] = 0;
          *v33 = v45;
          v46 = v41[1];
          v13 = v55;
          if ((_DWORD)v46)
          {
            v47 = 16 * v46;
            v48 = (_DWORD **)((char *)*v44 + 8);
            do
            {
              v49 = *v48;
              *v48 = 0;
              if (v49)
              {
                if (*v49 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v49 -= 2;
              }
              v48 += 2;
              v47 -= 16;
            }
            while (v47);
          }
          v50 = *v44;
          if (*v44)
          {
            *v44 = 0;
            *v41 = 0;
            WTF::fastFree(v50, v8);
          }
          v14 = v52;
          if (v15 == a3)
            v13 = v30;
          v4 = v56;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

unint64_t WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 16 * v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 28)
        goto LABEL_30;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = (void *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      memcpy(v19, v5, 16 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 28))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 16 * v6);
      v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1824BC3E0);
  }
  v13 = *(void **)a1;
  return (unint64_t)v13 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
}

void WGSL::AST::ReferenceTypeExpression::~ReferenceTypeExpression(WGSL::AST::ReferenceTypeExpression *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD3E30[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD3E30[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40CABE6EB0);
}

uint64_t WGSL::AST::ReferenceTypeExpression::kind(WGSL::AST::ReferenceTypeExpression *this)
{
  return 61;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v4;
  char v5;

  *(_QWORD *)a1 = off_1E0FD4330;
  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return a1;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return a1;
LABEL_7:
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_1E0FD4330;
  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
LABEL_7:
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40895CAEE9);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char v8;

  v2 = (char *)operator new(0x70uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD4330;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v8, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD2E98;
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v3 + 10) = &off_1E0FD2F10;
  v6 = *(_DWORD **)(a1 + 104);
  if (v6)
    *v6 += 2;
  *((_QWORD *)v3 + 13) = v6;
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  char v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD4330;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD3E88[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD2E98;
  *(_QWORD *)(a2 + 80) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(v3 + 88);
  *(_QWORD *)(a2 + 80) = &off_1E0FD2F10;
  v8 = *(_DWORD **)(v3 + 104);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 104) = v8;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 + 80) = &off_1E0FD2F10;
  result = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (result)
  {
    if (*result == 2)
    {
      result = (_DWORD *)WTF::StringImpl::destroy();
      *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
      if (!*(_BYTE *)(a1 + 72))
        return result;
      goto LABEL_7;
    }
    *result -= 2;
  }
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (!*(_BYTE *)(a1 + 72))
    return result;
LABEL_7:
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v4, a1 + 48);
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  __p[10] = &off_1E0FD2F10;
  v2 = (_DWORD *)__p[13];
  __p[13] = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      __p[2] = off_1E0FD2EC0;
      if (!*((_BYTE *)__p + 72))
        goto LABEL_5;
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  __p[2] = off_1E0FD2EC0;
  if (!*((_BYTE *)__p + 72))
  {
LABEL_5:
    operator delete(__p);
    return;
  }
LABEL_7:
  v3 = *((unsigned int *)__p + 16);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  ((void (*)(char *, _QWORD *))off_1E0FD3E30[v3])(&v4, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  char v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 64) = &off_1E0FD2F10;
  v3 = *(_DWORD **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (!v3)
  {
LABEL_4:
    *(_QWORD *)v2 = off_1E0FD2EC0;
    if (!*(_BYTE *)(v2 + 56))
      goto LABEL_10;
    goto LABEL_7;
  }
  if (*v3 != 2)
  {
    *v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (!*(_BYTE *)(v2 + 56))
    goto LABEL_10;
LABEL_7:
  v4 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E0FD3E30[v4])(&v9, v2 + 32);
  *(_DWORD *)(v2 + 48) = -1;
LABEL_10:
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = &off_1E0FD2EE8;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v5 = off_1E0FD2EC0;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v5 + 48) = -1;
    v6 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v6])(&v10, v5 + 32, a1 + 48);
      *(_DWORD *)(v5 + 48) = v6;
    }
    *(_BYTE *)(v5 + 56) = 1;
  }
  *(_QWORD *)v5 = off_1E0FD2E98;
  *(_QWORD *)(v5 + 64) = &off_1E0FD2EE8;
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v5 + 72) = result;
  *(_QWORD *)(v5 + 64) = &off_1E0FD2F10;
  v8 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(v5 + 88) = v8;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST12VariableRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEED0Ev()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST12VariableRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E0FD4378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST12VariableRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E0FD4378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST12VariableRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEEclEv(uint64_t result)
{
  **(_BYTE **)(result + 8) = *(_BYTE *)(result + 16);
  return result;
}

void WGSL::AST::ArrayTypeExpression::~ArrayTypeExpression(WGSL::AST::ArrayTypeExpression *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD3E30[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD3E30[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C408065EDEFLL);
}

uint64_t WGSL::AST::ArrayTypeExpression::kind(WGSL::AST::ArrayTypeExpression *this)
{
  return 59;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD43E8;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD43E8;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C403B4B6AF4);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD43E8;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD43C0;
  *((_OWORD *)v3 + 5) = *(_OWORD *)(a1 + 80);
  return v3;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  char v9;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = off_1E0FD43E8;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *))off_1E0FD3E88[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD43C0;
  result = *(__n128 *)(a1 + 80);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(result + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(result + 72))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v3, result + 48);
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  char v3;

  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v2 = *((unsigned int *)__p + 16);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD3E30[v2])(&v3, __p + 6);
  }
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  char v5;

  (***(void (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v3 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v3])(&v5, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v3;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD43C0;
  result = *(__n128 *)(a1 + 80);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD4430;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_1E0FD4430;
  *(_QWORD *)(a1 + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v4, a1 + 48);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x186DAB2A8](a1, 0x10F3C40EEF274EFLL);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = (char *)operator new(0x58uLL);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E0FD4430;
  *((_QWORD *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 2) = off_1E0FD2EC0;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD3E88[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((_QWORD *)v3 + 2) = off_1E0FD4308;
  *((_QWORD *)v3 + 10) = *(_QWORD *)(a1 + 80);
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = off_1E0FD4430;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = off_1E0FD2EC0;
  v5 = *(_QWORD *)(result + 40);
  *(_BYTE *)(a2 + 48) = 0;
  v6 = a2 + 48;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (*(_BYTE *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v7 = *(unsigned int *)(result + 64);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E0FD3E88[v7])(&v8);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_QWORD *)(a2 + 16) = off_1E0FD4308;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v3 + 80);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(result + 16) = off_1E0FD2EC0;
  if (*(_BYTE *)(result + 72))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v2])(&v3, result + 48);
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  uint64_t v2;
  char v3;

  __p[2] = off_1E0FD2EC0;
  if (*((_BYTE *)__p + 72))
  {
    v2 = *((unsigned int *)__p + 16);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E0FD3E30[v2])(&v3, __p + 6);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  if (*(_BYTE *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 48);
    v4 = v2;
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))off_1E0FD3E30[v3])(&v6, v2 + 32);
      v4 = *(_QWORD *)(v1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    v2 = v4;
  }
  *(_QWORD *)v2 = &off_1E0FD2EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)v2 = off_1E0FD2EC0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  if (*(_BYTE *)(v1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E0FD3EE0[v5])(&v7, v2 + 32, v1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(_BYTE *)(v2 + 56) = 1;
  }
  *(_QWORD *)v2 = off_1E0FD4308;
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v1 + 80);
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST13StructureRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEED0Ev()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST13StructureRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E0FD4478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST13StructureRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E0FD4478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST13StructureRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEEclEv(uint64_t result)
{
  **(_BYTE **)(result + 8) = *(_BYTE *)(result + 16);
  return result;
}

void WGSL::AST::AbstractIntegerLiteral::~AbstractIntegerLiteral(WGSL::AST::AbstractIntegerLiteral *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD3E30[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E0FD2EC0;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E0FD3E30[v2])(&v3, (char *)this + 32);
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x186DAB2A8](this, 0x10F3C40F2BF966CLL);
}

uint64_t WGSL::AST::AbstractIntegerLiteral::kind(WGSL::AST::AbstractIntegerLiteral *this)
{
  return 31;
}

void WGSL::AST::GroupAttribute::~GroupAttribute(WGSL::AST::GroupAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::GroupAttribute::kind(WGSL::AST::GroupAttribute *this)
{
  return 6;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  WTF::StringImpl **v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  WTF::StringImpl *v44;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 96 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    while (1)
    {
      v14 = (WTF::StringImpl **)(v4 + 96 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v17 = *a1;
          if (*a1)
          {
            v18 = *(_DWORD *)(v17 - 8);
            v19 = *((_DWORD *)v15 + 4);
            if (v19 >= 0x100)
              goto LABEL_19;
LABEL_22:
            v20 = WTF::StringImpl::hashSlowCase(v15);
          }
          else
          {
            v18 = 0;
            v19 = *((_DWORD *)v15 + 4);
            if (v19 < 0x100)
              goto LABEL_22;
LABEL_19:
            v20 = v19 >> 8;
          }
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v23 = (WTF::StringImpl **)(v17 + 96 * (v20 & v18));
            v20 = ++v21 + (v20 & v18);
          }
          while (*v23);
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)(v17 + 96 * v22 + 8), v8);
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *v14;
          *v14 = 0;
          *v23 = v26;
          v27 = v4 + 96 * v11;
          v29 = *(_QWORD *)(v27 + 8);
          v28 = v27 + 8;
          *(_QWORD *)v28 = 0;
          *(_QWORD *)(v17 + 96 * v22 + 8) = v29;
          v30 = v17 + 96 * v22;
          v31 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          *(_BYTE *)(v30 + 24) = 0;
          v32 = v30 + 24;
          *(_QWORD *)(v32 - 8) = v31;
          *(_BYTE *)(v32 + 16) = 0;
          v33 = (_BYTE *)(v32 + 16);
          if (*(_BYTE *)(v28 + 32))
          {
            v34 = v4 + 96 * v11;
            *(_QWORD *)v32 = 0;
            *(_QWORD *)(v32 + 8) = 0;
            v35 = *(_QWORD *)(v34 + 24);
            *(_QWORD *)(v34 + 24) = 0;
            *(_QWORD *)v32 = v35;
            v36 = *(_DWORD *)(v34 + 32);
            *(_DWORD *)(v34 + 32) = 0;
            v37 = v17 + 96 * v22;
            *(_DWORD *)(v37 + 32) = v36;
            v38 = *(_DWORD *)(v34 + 36);
            *(_DWORD *)(v34 + 36) = 0;
            *(_DWORD *)(v37 + 36) = v38;
            *v33 = 1;
          }
          v39 = v17 + 96 * v22;
          v40 = v4 + 96 * v11;
          *(_QWORD *)(v39 + 48) = 0;
          v41 = *(_QWORD *)(v40 + 48);
          *(_QWORD *)(v40 + 48) = 0;
          *(_QWORD *)(v39 + 48) = v41;
          v42 = *(_OWORD *)(v40 + 56);
          v43 = *(_OWORD *)(v40 + 72);
          *(_QWORD *)(v39 + 88) = *(_QWORD *)(v40 + 88);
          *(_OWORD *)(v39 + 72) = v43;
          *(_OWORD *)(v39 + 56) = v42;
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)v28, v24);
          v44 = *v14;
          *v14 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v44 -= 2;
          }
          if (v14 == a3)
            v12 = v17 + 96 * v22;
          goto LABEL_11;
        }
        WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)(v4 + 96 * v11 + 8), v8);
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v16 -= 2;
        }
      }
LABEL_11:
      if (++v11 == v13)
        goto LABEL_35;
    }
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_35:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WGSL::RewriteGlobalVariables::Global *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t i;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v9 = result + 16;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v9 = result + 16;
    if (!a2)
      goto LABEL_12;
  }
  if (a2 == 1)
  {
    v10 = 0;
LABEL_10:
    v13 = a2 - v10;
    v14 = (_QWORD *)(result + 16 * v10 + 24);
    do
    {
      *((_DWORD *)v14 - 2) = -1;
      *v14 = 0;
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_12;
  }
  v10 = a2 & 0xFFFFFFFE;
  v11 = (_QWORD *)(result + 40);
  v12 = v10;
  do
  {
    *((_DWORD *)v11 - 6) = -1;
    *((_DWORD *)v11 - 2) = -1;
    *(v11 - 2) = 0;
    *v11 = 0;
    v11 += 4;
    v12 -= 2;
  }
  while (v12);
  if (v10 != a2)
    goto LABEL_10;
LABEL_12:
  *a1 = v9;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v16 = (_DWORD *)(v4 + 16 * i);
      if (*v16 <= 0xFFFFFFFD)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = 0;
        v20 = 9 * ((*v16 + ~(*v16 << 15)) ^ ((*v16 + ~(*v16 << 15)) >> 10));
        v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
        do
        {
          v22 = v21 & v18;
          v21 = ++v19 + v22;
        }
        while (*(_DWORD *)(v17 + 16 * v22) != -1);
        *(_OWORD *)(v17 + 16 * v22) = *(_OWORD *)v16;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::SpecializationConstant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::SpecializationConstant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  WTF::StringImpl *v31;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 32 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v4 + 32 * v11);
      v14 = *v13;
      if (*v13 == (WTF::StringImpl *)-1)
        goto LABEL_9;
      if (v14)
        break;
      v15 = v4 + 32 * v11;
      v16 = *(_DWORD **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (!v16)
        goto LABEL_15;
      if (*v16 != 2)
      {
        *v16 -= 2;
LABEL_15:
        *v13 = 0;
        goto LABEL_9;
      }
      WTF::StringImpl::destroy();
      v21 = *v13;
      *v13 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          goto LABEL_42;
        *(_DWORD *)v21 -= 2;
      }
LABEL_9:
      if (++v11 == v12)
        goto LABEL_44;
    }
    v17 = *a1;
    if (*a1)
    {
      v18 = *(_DWORD *)(v17 - 8);
      v19 = *((_DWORD *)v14 + 4);
      if (v19 >= 0x100)
      {
LABEL_18:
        v20 = v19 >> 8;
LABEL_24:
        v22 = 0;
        do
        {
          v23 = v20 & v18;
          v20 = ++v22 + v23;
        }
        while (*(_QWORD *)(v17 + 32 * v23));
        v24 = v17 + 32 * v23;
        v25 = *(_DWORD **)(v24 + 8);
        *(_QWORD *)(v24 + 8) = 0;
        if (v25)
        {
          if (*v25 == 2)
          {
            WTF::StringImpl::destroy();
            v26 = *(_DWORD **)v24;
            *(_QWORD *)v24 = 0;
            if (v26)
            {
              if (*v26 == 2)
                WTF::StringImpl::destroy();
              else
                *v26 -= 2;
            }
LABEL_35:
            v27 = *v13;
            *v13 = 0;
            *(_QWORD *)v24 = v27;
            v28 = v4 + 32 * v11;
            v29 = *(_QWORD *)(v28 + 8);
            *(_QWORD *)(v28 + 8) = 0;
            *(_QWORD *)(v24 + 8) = v29;
            *(_OWORD *)(v17 + 32 * v23 + 16) = *(_OWORD *)(v28 + 16);
            v30 = *(_DWORD **)(v28 + 8);
            *(_QWORD *)(v28 + 8) = 0;
            if (v30)
            {
              if (*v30 == 2)
              {
                WTF::StringImpl::destroy();
                v31 = *v13;
                *v13 = 0;
                if (!v31)
                  goto LABEL_9;
                goto LABEL_41;
              }
              *v30 -= 2;
            }
            v31 = *v13;
            *v13 = 0;
            if (!v31)
              goto LABEL_9;
LABEL_41:
            if (*(_DWORD *)v31 == 2)
            {
LABEL_42:
              WTF::StringImpl::destroy();
              goto LABEL_9;
            }
            *(_DWORD *)v31 -= 2;
            goto LABEL_9;
          }
          *v25 -= 2;
        }
        *(_QWORD *)v24 = 0;
        goto LABEL_35;
      }
    }
    else
    {
      v18 = 0;
      v19 = *((_DWORD *)v14 + 4);
      if (v19 >= 0x100)
        goto LABEL_18;
    }
    v20 = WTF::StringImpl::hashSlowCase(v14);
    goto LABEL_24;
  }
  if (v4)
LABEL_44:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD ****std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>@<X0>(_QWORD ****result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD ****v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char *v12;

  v4 = *a2;
  v5 = v4 - 8;
  if (v4 >= 8)
  {
    v10 = 4;
    switch(v5)
    {
      case 0u:
        *(_BYTE *)a3 = 0;
        goto LABEL_20;
      case 1u:
        *(_BYTE *)a3 = 2;
LABEL_20:
        v10 = 1;
        goto LABEL_21;
      case 2u:
        goto LABEL_21;
      case 3u:
      case 4u:
      case 5u:
        __break(0xC471u);
        JUMPOUT(0x1824BDEE0);
      default:
        return result;
    }
  }
  v6 = (_QWORD ****)*result;
  v7 = (_QWORD *)****result;
  if (!v7)
    goto LABEL_17;
  if ((*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7) != 61)
  {
    __break(0xC471u);
    JUMPOUT(0x1824BDEC0);
  }
  v8 = v7[3];
  if (!v8)
    goto LABEL_14;
  if (*(_DWORD *)(v8 + 48) != 10)
    goto LABEL_16;
  if (*(_BYTE *)v8 == 3)
  {
    if (*(_BYTE *)(v8 + 1))
      LOBYTE(v7) = 1;
    else
      LOBYTE(v7) = 2;
    v9 = *((unsigned int *)*v6[1] + 12);
    if ((_DWORD)v9 != -1)
      goto LABEL_18;
  }
  else
  {
LABEL_14:
    LOBYTE(v7) = 0;
    v9 = *((unsigned int *)*v6[1] + 12);
    if ((_DWORD)v9 != -1)
      goto LABEL_18;
  }
  do
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_16:
    LOBYTE(v7) = 0;
LABEL_17:
    v9 = *((unsigned int *)*v6[1] + 12);
  }
  while ((_DWORD)v9 == -1);
LABEL_18:
  v12 = &v11;
  result = (_QWORD ****)((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v12);
  v10 = 0;
  *(_BYTE *)a3 = (_BYTE)v7;
  *(_BYTE *)(a3 + 1) = 0;
  *(_QWORD *)(a3 + 8) = result;
LABEL_21:
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;
  char v8;
  char *v9;

  v3 = *a1;
  v4 = ***(_QWORD ****)(*a1 + 16);
  if (!v4)
    goto LABEL_14;
  if ((*(unsigned int (**)(_QWORD))(*v4 + 16))(***(_QWORD ***)(*a1 + 16)) == 61)
  {
    v5 = v4[3];
    if (!v5)
      goto LABEL_11;
    if (*(_DWORD *)(v5 + 48) == 10)
    {
      if (*(_BYTE *)v5 != 3)
        goto LABEL_11;
      if (*(_BYTE *)(v5 + 1))
        LOBYTE(v4) = 1;
      else
        LOBYTE(v4) = 2;
      for (i = *(unsigned int *)(**(_QWORD **)(v3 + 24) + 48);
            (_DWORD)i == -1;
            i = *(unsigned int *)(**(_QWORD **)(v3 + 24) + 48))
      {
LABEL_10:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_11:
        LOBYTE(v4) = 0;
      }
LABEL_15:
      v9 = &v8;
      result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[i])(&v9);
      *(_BYTE *)a2 = (_BYTE)v4;
      *(_BYTE *)(a2 + 1) = 0;
      *(_QWORD *)(a2 + 8) = result;
      *(_DWORD *)(a2 + 16) = 0;
      return result;
    }
    LOBYTE(v4) = 0;
LABEL_14:
    i = *(unsigned int *)(**(_QWORD **)(v3 + 24) + 48);
    if ((_DWORD)i == -1)
      goto LABEL_10;
    goto LABEL_15;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;
  char v8;
  char *v9;

  v3 = *a1;
  v4 = ***(_QWORD ****)(*a1 + 32);
  if (!v4)
    goto LABEL_14;
  if ((*(unsigned int (**)(_QWORD))(*v4 + 16))(***(_QWORD ***)(*a1 + 32)) == 61)
  {
    v5 = v4[3];
    if (!v5)
      goto LABEL_11;
    if (*(_DWORD *)(v5 + 48) == 10)
    {
      if (*(_BYTE *)v5 != 3)
        goto LABEL_11;
      if (*(_BYTE *)(v5 + 1))
        LOBYTE(v4) = 1;
      else
        LOBYTE(v4) = 2;
      for (i = *(unsigned int *)(**(_QWORD **)(v3 + 40) + 48);
            (_DWORD)i == -1;
            i = *(unsigned int *)(**(_QWORD **)(v3 + 40) + 48))
      {
LABEL_10:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_11:
        LOBYTE(v4) = 0;
      }
LABEL_15:
      v9 = &v8;
      result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[i])(&v9);
      *(_BYTE *)a2 = (_BYTE)v4;
      *(_BYTE *)(a2 + 1) = 0;
      *(_QWORD *)(a2 + 8) = result;
      *(_DWORD *)(a2 + 16) = 0;
      return result;
    }
    LOBYTE(v4) = 0;
LABEL_14:
    i = *(unsigned int *)(**(_QWORD **)(v3 + 40) + 48);
    if ((_DWORD)i == -1)
      goto LABEL_10;
    goto LABEL_15;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;
  char v8;
  char *v9;

  v3 = *a1;
  v4 = ***(_QWORD ****)(*a1 + 48);
  if (!v4)
    goto LABEL_14;
  if ((*(unsigned int (**)(_QWORD))(*v4 + 16))(***(_QWORD ***)(*a1 + 48)) == 61)
  {
    v5 = v4[3];
    if (!v5)
      goto LABEL_11;
    if (*(_DWORD *)(v5 + 48) == 10)
    {
      if (*(_BYTE *)v5 != 3)
        goto LABEL_11;
      if (*(_BYTE *)(v5 + 1))
        LOBYTE(v4) = 1;
      else
        LOBYTE(v4) = 2;
      for (i = *(unsigned int *)(**(_QWORD **)(v3 + 56) + 48);
            (_DWORD)i == -1;
            i = *(unsigned int *)(**(_QWORD **)(v3 + 56) + 48))
      {
LABEL_10:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_11:
        LOBYTE(v4) = 0;
      }
LABEL_15:
      v9 = &v8;
      result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[i])(&v9);
      *(_BYTE *)a2 = (_BYTE)v4;
      *(_BYTE *)(a2 + 1) = 0;
      *(_QWORD *)(a2 + 8) = result;
      *(_DWORD *)(a2 + 16) = 0;
      return result;
    }
    LOBYTE(v4) = 0;
LABEL_14:
    i = *(unsigned int *)(**(_QWORD **)(v3 + 56) + 48);
    if ((_DWORD)i == -1)
      goto LABEL_10;
    goto LABEL_15;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;
  char v8;
  char *v9;

  v3 = *a1;
  v4 = ***(_QWORD ****)(*a1 + 64);
  if (!v4)
    goto LABEL_14;
  if ((*(unsigned int (**)(_QWORD))(*v4 + 16))(***(_QWORD ***)(*a1 + 64)) == 61)
  {
    v5 = v4[3];
    if (!v5)
      goto LABEL_11;
    if (*(_DWORD *)(v5 + 48) == 10)
    {
      if (*(_BYTE *)v5 != 3)
        goto LABEL_11;
      if (*(_BYTE *)(v5 + 1))
        LOBYTE(v4) = 1;
      else
        LOBYTE(v4) = 2;
      for (i = *(unsigned int *)(**(_QWORD **)(v3 + 72) + 48);
            (_DWORD)i == -1;
            i = *(unsigned int *)(**(_QWORD **)(v3 + 72) + 48))
      {
LABEL_10:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_11:
        LOBYTE(v4) = 0;
      }
LABEL_15:
      v9 = &v8;
      result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[i])(&v9);
      *(_BYTE *)a2 = (_BYTE)v4;
      *(_BYTE *)(a2 + 1) = 0;
      *(_QWORD *)(a2 + 8) = result;
      *(_DWORD *)(a2 + 16) = 0;
      return result;
    }
    LOBYTE(v4) = 0;
LABEL_14:
    i = *(unsigned int *)(**(_QWORD **)(v3 + 72) + 48);
    if ((_DWORD)i == -1)
      goto LABEL_10;
    goto LABEL_15;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v2;
  BOOL v3;
  char v4;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = v2 == 7;
  if (v2 >= 8)
    v4 = 0;
  else
    v4 = 0x104030502010000uLL >> (8 * v2);
  *(_BYTE *)a2 = 1;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v3;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v2;
  char v3;
  int v4;
  char v5;
  unsigned __int8 v6;
  char v7;

  v2 = *a1;
  if (v2 >= 5)
    v3 = 0;
  else
    v3 = 0x502010000uLL >> (8 * v2);
  v4 = a1[2];
  if (v4 == 1)
    v5 = 2;
  else
    v5 = 1;
  v6 = a1[1];
  if (v4 == 2)
    v7 = 0;
  else
    v7 = v5;
  *(_BYTE *)a2 = v7;
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v3;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  unint64_t v5;
  int v6;

  v2 = *a1;
  v3 = v2 >= 6;
  v4 = v2 < 6;
  v5 = 0x10403020100uLL >> (8 * v2);
  v6 = v2 & 0x3F;
  if (v3)
    LOBYTE(v5) = 0;
  *(_BYTE *)a2 = 2;
  *(_BYTE *)(a2 + 1) = v5;
  if (v6 != 5)
    v4 = 0;
  *(_BYTE *)(a2 + 2) = v4;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;
  char v8;
  char *v9;

  v3 = *a1;
  v4 = ***(_QWORD ****)(*a1 + 80);
  if (!v4)
    goto LABEL_14;
  if ((*(unsigned int (**)(_QWORD))(*v4 + 16))(***(_QWORD ***)(*a1 + 80)) == 61)
  {
    v5 = v4[3];
    if (!v5)
      goto LABEL_11;
    if (*(_DWORD *)(v5 + 48) == 10)
    {
      if (*(_BYTE *)v5 != 3)
        goto LABEL_11;
      if (*(_BYTE *)(v5 + 1))
        LOBYTE(v4) = 1;
      else
        LOBYTE(v4) = 2;
      for (i = *(unsigned int *)(**(_QWORD **)(v3 + 88) + 48);
            (_DWORD)i == -1;
            i = *(unsigned int *)(**(_QWORD **)(v3 + 88) + 48))
      {
LABEL_10:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_11:
        LOBYTE(v4) = 0;
      }
LABEL_15:
      v9 = &v8;
      result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[i])(&v9);
      *(_BYTE *)a2 = (_BYTE)v4;
      *(_BYTE *)(a2 + 1) = 0;
      *(_QWORD *)(a2 + 8) = result;
      *(_DWORD *)(a2 + 16) = 0;
      return result;
    }
    LOBYTE(v4) = 0;
LABEL_14:
    i = *(unsigned int *)(**(_QWORD **)(v3 + 88) + 48);
    if ((_DWORD)i == -1)
      goto LABEL_10;
    goto LABEL_15;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Primitive const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Vector const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Matrix const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Array const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Struct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Texture const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureStorage const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TextureDepth const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Atomic const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::PrimitiveStruct const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Reference const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Pointer const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Function const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::TypeConstructor const&)#1},std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> WGSL::bindingMemberForGlobal<WGSL::RewriteGlobalVariables::Global>(WGSL::RewriteGlobalVariables::Global &)::{lambda(WGSL::Types::Bottom const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,WGSL::Types::Vector,WGSL::Types::Matrix,WGSL::Types::Array,WGSL::Types::Struct,WGSL::Types::PrimitiveStruct,WGSL::Types::Function,WGSL::Types::Texture,WGSL::Types::TextureStorage,WGSL::Types::TextureDepth,WGSL::Types::Reference,WGSL::Types::Pointer,WGSL::Types::Atomic,WGSL::Types::TypeConstructor,WGSL::Types::Bottom> const&>()
{
  __break(0xC471u);
}

void WGSL::AST::BindingAttribute::~BindingAttribute(WGSL::AST::BindingAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::BindingAttribute::kind(WGSL::AST::BindingAttribute *this)
{
  return 2;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(uint64_t result, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (a3)
    v4 = a3 - 1;
  else
    v4 = 0;
  v5 = v4 >> 31;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824BE81CLL);
  }
  v6 = a4;
  v8 = (_QWORD *)result;
  v9 = a4;
  do
  {
    LODWORD(v5) = v5 + 1;
    v10 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v10);
  if (((v5 | v4) & 0x80000000) != 0)
    goto LABEL_10;
  v11 = (v4 + v5);
  if (__OFADD__((_DWORD)v4, (_DWORD)v5))
    goto LABEL_10;
  if (!(_DWORD)v11)
  {
    v12 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_23;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_10:
    v12 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    v12 = v15[0];
    if (v15[0])
    {
      v13 = (_BYTE *)(v15[0] + 20);
      *(_DWORD *)v15[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *v13 = *a2;
        else
          result = (uint64_t)memcpy((void *)(v12 + 20), a2, v4);
      }
      v14 = 0;
      do
      {
        *((_BYTE *)&v15[1] + v14-- + 4) = (v6 % 0xA) | 0x30;
        v10 = v6 > 9;
        v6 /= 0xAu;
      }
      while (v10);
      if (v14 + 14 <= 13)
        result = (uint64_t)memcpy(&v13[v4], (char *)&v15[1] + v14 + 5, -v14);
    }
  }
LABEL_23:
  *v8 = v12;
  return result;
}

void WGSL::AST::CompoundStatement::~CompoundStatement(WGSL::AST::CompoundStatement *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::CompoundStatement::kind(WGSL::AST::CompoundStatement *this)
{
  return 42;
}

void WGSL::AST::IfStatement::~IfStatement(WGSL::AST::IfStatement *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::IfStatement::kind(WGSL::AST::IfStatement *this)
{
  return 48;
}

void WGSL::AST::CallStatement::~CallStatement(WGSL::AST::CallStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::CallStatement::kind(WGSL::AST::CallStatement *this)
{
  return 40;
}

void WGSL::AST::BuiltinAttribute::~BuiltinAttribute(WGSL::AST::BuiltinAttribute *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::BuiltinAttribute::kind(WGSL::AST::BuiltinAttribute *this)
{
  return 3;
}

void WGSL::AST::CompoundAssignmentStatement::~CompoundAssignmentStatement(WGSL::AST::CompoundAssignmentStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::CompoundAssignmentStatement::kind(WGSL::AST::CompoundAssignmentStatement *this)
{
  return 41;
}

void WGSL::AST::ForStatement::~ForStatement(WGSL::AST::ForStatement *this)
{
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::AST::ForStatement::kind(WGSL::AST::ForStatement *this)
{
  return 47;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
          {
            v16 = *(_DWORD *)(v15 - 8);
            v17 = *((_DWORD *)v14 + 4);
            if (v17 >= 0x100)
              goto LABEL_12;
LABEL_14:
            v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            v16 = 0;
            v17 = *((_DWORD *)v14 + 4);
            if (v17 < 0x100)
              goto LABEL_14;
LABEL_12:
            v18 = v17 >> 8;
          }
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 16 * v20));
          v21 = (_QWORD *)(v15 + 16 * v20);
          *v21 = 0;
          v22 = *(_OWORD *)v13;
          *v13 = 0;
          *(_OWORD *)v21 = v22;
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
          goto LABEL_7;
        }
        *v13 = 0;
      }
LABEL_7:
      if (++v11 == v7)
        goto LABEL_25;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_25:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

void WGSL::Lexer<unsigned char>::lex(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  unsigned __int8 *v5;
  _OWORD *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  int v85;
  int v86;
  int v87;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char v113;
  char v114;
  int v115;
  unsigned __int8 *v116;
  char *v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unint64_t v126;
  int v127;
  double v128;
  unsigned int v129;
  unsigned __int8 *v130;
  int v131;
  unsigned __int8 *v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned __int8 *v139;
  unint64_t v140;
  char **v141;
  unint64_t v142;
  char **v143;
  int v144;
  int v145;
  unint64_t v146;
  int v147;
  int v148;
  unsigned __int8 *v149;
  unint64_t v150;
  char **v151;
  unint64_t v152;
  char **v153;
  int v154;
  unint64_t v155;
  int v156;
  int v157;
  char *v159;
  unsigned int v160;
  _BOOL4 v161;
  char *v162;
  int v163;
  uint64_t v164;
  int v165;
  float v166;
  unint64_t v167;
  int v168;
  int v169;
  unint64_t v170;
  int v171;
  unint64_t v176;
  int v177;
  int v178;
  unint64_t v179;
  int v180;
  int v181;
  unint64_t v182;
  double v183;
  unint64_t v184;
  int v185;
  int v186;
  unint64_t v187;
  int v188;
  int v189;
  unint64_t v192;
  int v193;
  int v194;
  unint64_t v195;
  int v196;
  int v197;
  unint64_t v198;
  int v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  double v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  double *v211;
  double v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _DWORD *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  _QWORD *v228;
  _DWORD *v229;
  uint64_t v230;
  _DWORD *v231;
  uint64_t v232;
  int v233;
  int v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  _DWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  _QWORD *v246;
  _DWORD *v247;
  uint64_t v248;
  _DWORD *v249;
  double v250;
  unsigned int v251;
  _OWORD *v252;
  unsigned __int8 *v253;
  unint64_t *v254;
  char v255;
  unsigned __int8 *v256;
  double v257;
  _BYTE v258[12];
  int v259;
  int v260;
  _DWORD *v261;
  unsigned int v262;
  unint64_t v263;
  int v264;
  int v265;
  double v266;

  v4 = &v263;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1 + 36;
  v6 = &v258[4];
  v7 = a1 + 24;
LABEL_4:
  v8 = *((_QWORD *)a1 + 2);
  if (!v8)
  {
    *(_QWORD *)v5 = *(_QWORD *)v7;
    *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
    v10 = *((_DWORD *)a1 + 8);
LABEL_301:
    v37 = *(_QWORD *)(a1 + 36);
    v38 = *((_DWORD *)a1 + 11);
    v39 = v10 - v38;
    v40 = HIDWORD(v37);
    v262 = 1;
    goto LABEL_404;
  }
  v9 = *a1;
  while (v9 - 9 < 5 || v9 == 32)
  {
    *a1 = 0;
    v10 = *((_DWORD *)a1 + 8) + 1;
    ++*((_DWORD *)a1 + 7);
    *((_DWORD *)a1 + 8) = v10;
    --v8;
    v11 = (unsigned __int8 *)(*((_QWORD *)a1 + 1) + 1);
    *((_QWORD *)a1 + 1) = v11;
    *((_QWORD *)a1 + 2) = v8;
    if (v8)
    {
      v12 = *v11;
      *a1 = v12;
      if (v9 != 10)
        goto LABEL_7;
LABEL_6:
      *((_QWORD *)a1 + 3) = (*((_DWORD *)a1 + 6) + 1);
      goto LABEL_7;
    }
    v12 = 0;
    if (v9 == 10)
      goto LABEL_6;
LABEL_7:
    v9 = v12;
    if (!v8)
      goto LABEL_300;
  }
  v13 = (char *)*((_QWORD *)a1 + 1);
  v14 = v8 - 2;
  if (v8 < 2 || *v13 != 47)
    goto LABEL_50;
  v15 = v13[1];
  if (v15 == 42)
  {
    *a1 = 0;
    v22 = *((_DWORD *)a1 + 8) + 2;
    v23 = *((_DWORD *)a1 + 7) + 2;
    *((_DWORD *)a1 + 7) = v23;
    *((_DWORD *)a1 + 8) = v22;
    v24 = v8 - 2;
    v25 = v13 + 2;
    *((_QWORD *)a1 + 1) = v13 + 2;
    *((_QWORD *)a1 + 2) = v24;
    if (!v24)
    {
      v10 = v22;
LABEL_403:
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v10 - v38;
      v40 = HIDWORD(v37);
      v262 = 0;
LABEL_404:
      v263 = __PAIR64__(v40, v37);
      v264 = v38;
      v265 = v39;
      goto LABEL_405;
    }
    LOBYTE(v26) = *v25;
    v27 = 1;
    while (1)
    {
      *a1 = 0;
      v10 = v22 + 1;
      v28 = v23 + 1;
      *((_DWORD *)a1 + 7) = v23 + 1;
      *((_DWORD *)a1 + 8) = v22 + 1;
      v29 = v24 - 1;
      v30 = v25 + 1;
      *((_QWORD *)a1 + 1) = v25 + 1;
      *((_QWORD *)a1 + 2) = v24 - 1;
      if (v24 == 1)
      {
        LOBYTE(v12) = 0;
        v26 = v26;
        if (v26 <= 0x29u)
        {
LABEL_23:
          if (v26 == 10)
          {
            v28 = 0;
            *((_QWORD *)a1 + 3) = (*((_DWORD *)a1 + 6) + 1);
          }
          else if (!v26)
          {
            goto LABEL_403;
          }
          goto LABEL_25;
        }
      }
      else
      {
        LOBYTE(v12) = *v30;
        *a1 = *v30;
        v26 = v26;
        if (v26 <= 0x29u)
          goto LABEL_23;
      }
      if (v26 == 42)
      {
        if (v24 == 1)
          goto LABEL_403;
        if (*v30 == 47)
        {
          *a1 = 0;
          v8 = v24 - 2;
          v30 = v25 + 2;
          *((_QWORD *)a1 + 1) = v25 + 2;
          *((_QWORD *)a1 + 2) = v8;
          v10 = v22 + 2;
          v28 = v23 + 2;
          *((_DWORD *)a1 + 7) = v23 + 2;
          *((_DWORD *)a1 + 8) = v22 + 2;
          if (v29 == 1)
          {
            v12 = 0;
            if (!--v27)
              goto LABEL_7;
          }
          else
          {
            v12 = *v30;
            *a1 = v12;
            if (!--v27)
              goto LABEL_7;
          }
          v29 = v8;
        }
      }
      else if (v26 == 47)
      {
        if (v24 == 1)
          goto LABEL_403;
        if (*v30 == 42)
        {
          *a1 = 0;
          v31 = v24 - 2;
          v30 = v25 + 2;
          *((_QWORD *)a1 + 1) = v25 + 2;
          *((_QWORD *)a1 + 2) = v31;
          v10 = v22 + 2;
          v28 = v23 + 2;
          *((_DWORD *)a1 + 7) = v23 + 2;
          *((_DWORD *)a1 + 8) = v22 + 2;
          if (v29 == 1)
          {
            LOBYTE(v12) = 0;
          }
          else
          {
            LOBYTE(v12) = *v30;
            *a1 = *v30;
          }
          ++v27;
          v29 = v31;
        }
      }
LABEL_25:
      v25 = v30;
      v23 = v28;
      v22 = v10;
      LOBYTE(v26) = v12;
      v24 = v29;
      if (!v29)
        goto LABEL_403;
    }
  }
  if (v15 == 47)
  {
    v16 = 0;
    v17 = *((_DWORD *)a1 + 8);
    v18 = *((_DWORD *)a1 + 7) + 1;
    v19 = (unsigned __int8 *)(v13 + 1);
    v20 = -1;
    while (1)
    {
      *a1 = 0;
      *((_QWORD *)a1 + 1) = &v19[v16];
      *((_QWORD *)a1 + 2) = v8 + v20;
      *((_DWORD *)a1 + 7) = v18 + v16;
      *((_DWORD *)a1 + 8) = v17 + v16 + 1;
      if (v8 - 1 == v16)
        break;
      v12 = v19[v16];
      *a1 = v12;
      v21 = v19[v16++];
      --v20;
      if (v21 == 10)
      {
        v10 = v17 + v16;
        v8 -= v16;
        goto LABEL_7;
      }
    }
    v10 = v17 + v16 + 1;
LABEL_300:
    *(_QWORD *)v5 = *(_QWORD *)v7;
    *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
    goto LABEL_301;
  }
LABEL_50:
  *(_QWORD *)v5 = *(_QWORD *)v7;
  *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
  switch((char)v9)
  {
    case '!':
      *a1 = 0;
      v33 = *((_DWORD *)a1 + 7);
      v32 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v33 + 1;
      *((_DWORD *)a1 + 8) = v32 + 1;
      v34 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v34;
      if (!v34 || (v35 = v13[1], *a1 = v35, v35 != 61))
      {
        v42 = *(_QWORD *)(a1 + 36);
        v43 = *((_DWORD *)a1 + 11);
        v44 = v32 + 1 - v43;
        v45 = HIDWORD(v42);
        v109 = 41;
        goto LABEL_304;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v13 + 2;
      *((_QWORD *)a1 + 2) = v14;
      v36 = v32 + 2;
      *((_DWORD *)a1 + 7) = v33 + 2;
      *((_DWORD *)a1 + 8) = v32 + 2;
      if (v34 != 1)
        *a1 = v13[2];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v36 - v38;
      v40 = HIDWORD(v37);
      v41 = 42;
      goto LABEL_298;
    case '%':
      *a1 = 0;
      v47 = *((_DWORD *)a1 + 7);
      v46 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v47 + 1;
      *((_DWORD *)a1 + 8) = v46 + 1;
      v48 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v48;
      if (!v48 || (v49 = v13[1], *a1 = v49, v49 != 61))
      {
        v42 = *(_QWORD *)(a1 + 36);
        v43 = *((_DWORD *)a1 + 11);
        v44 = v46 + 1 - v43;
        v45 = HIDWORD(v42);
        v109 = 62;
        goto LABEL_304;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v13 + 2;
      *((_QWORD *)a1 + 2) = v14;
      v50 = v46 + 2;
      *((_DWORD *)a1 + 7) = v47 + 2;
      *((_DWORD *)a1 + 8) = v46 + 2;
      if (v48 != 1)
        *a1 = v13[2];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v50 - v38;
      v40 = HIDWORD(v37);
      v41 = 63;
      goto LABEL_298;
    case '&':
      *a1 = 0;
      v51 = *((_DWORD *)a1 + 7);
      v52 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v51 + 1;
      *((_DWORD *)a1 + 8) = v52 + 1;
      v53 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v53;
      if (!v53)
        goto LABEL_260;
      v54 = v13[1];
      *a1 = v54;
      if (v54 == 61)
      {
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v51 + 2;
        *((_DWORD *)a1 + 8) = v52 + 2;
        if (v53 != 1)
          *a1 = v13[2];
        v37 = *(_QWORD *)(a1 + 36);
        v38 = *((_DWORD *)a1 + 11);
        v39 = v52 + 2 - v38;
        v40 = HIDWORD(v37);
        v41 = 38;
      }
      else
      {
        if (v54 != 38)
        {
LABEL_260:
          v42 = *(_QWORD *)(a1 + 36);
          v43 = *((_DWORD *)a1 + 11);
          v44 = v52 + 1 - v43;
          v45 = HIDWORD(v42);
          v109 = 36;
          goto LABEL_304;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v51 + 2;
        *((_DWORD *)a1 + 8) = v52 + 2;
        if (v53 != 1)
          *a1 = v13[2];
        v37 = *(_QWORD *)(a1 + 36);
        v38 = *((_DWORD *)a1 + 11);
        v39 = v52 + 2 - v38;
        v40 = HIDWORD(v37);
        v41 = 37;
      }
      goto LABEL_298;
    case '(':
      *a1 = 0;
      v55 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v55;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v55 - v38;
      v40 = HIDWORD(v37);
      v41 = 67;
      goto LABEL_298;
    case ')':
      *a1 = 0;
      v56 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v56;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v56 - v38;
      v40 = HIDWORD(v37);
      v41 = 68;
      goto LABEL_298;
    case '*':
      *a1 = 0;
      v58 = *((_DWORD *)a1 + 7);
      v57 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v58 + 1;
      *((_DWORD *)a1 + 8) = v57 + 1;
      v59 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v59;
      if (!v59 || (v60 = v13[1], *a1 = v60, v60 != 61))
      {
        v42 = *(_QWORD *)(a1 + 36);
        v43 = *((_DWORD *)a1 + 11);
        v44 = v57 + 1 - v43;
        v45 = HIDWORD(v42);
        v109 = 76;
        goto LABEL_304;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v13 + 2;
      *((_QWORD *)a1 + 2) = v14;
      v61 = v57 + 2;
      *((_DWORD *)a1 + 7) = v58 + 2;
      *((_DWORD *)a1 + 8) = v57 + 2;
      if (v59 != 1)
        *a1 = v13[2];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v61 - v38;
      v40 = HIDWORD(v37);
      v41 = 77;
      goto LABEL_298;
    case '+':
      *a1 = 0;
      v62 = *((_DWORD *)a1 + 7);
      v63 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v62 + 1;
      *((_DWORD *)a1 + 8) = v63 + 1;
      v64 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v64;
      if (!v64)
        goto LABEL_261;
      v65 = v13[1];
      *a1 = v65;
      if (v65 == 61)
      {
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v62 + 2;
        *((_DWORD *)a1 + 8) = v63 + 2;
        if (v64 != 1)
          *a1 = v13[2];
        v37 = *(_QWORD *)(a1 + 36);
        v38 = *((_DWORD *)a1 + 11);
        v39 = v63 + 2 - v38;
        v40 = HIDWORD(v37);
        v41 = 72;
      }
      else
      {
        if (v65 != 43)
        {
LABEL_261:
          v42 = *(_QWORD *)(a1 + 36);
          v43 = *((_DWORD *)a1 + 11);
          v44 = v63 + 1 - v43;
          v45 = HIDWORD(v42);
          v109 = 70;
          goto LABEL_304;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v62 + 2;
        *((_DWORD *)a1 + 8) = v63 + 2;
        if (v64 != 1)
          *a1 = v13[2];
        v37 = *(_QWORD *)(a1 + 36);
        v38 = *((_DWORD *)a1 + 11);
        v39 = v63 + 2 - v38;
        v40 = HIDWORD(v37);
        v41 = 71;
      }
      goto LABEL_298;
    case ',':
      *a1 = 0;
      v66 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v66;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v66 - v38;
      v40 = HIDWORD(v37);
      v41 = 48;
      goto LABEL_298;
    case '-':
      *a1 = 0;
      v67 = *((_DWORD *)a1 + 7);
      v68 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v67 + 1;
      *((_DWORD *)a1 + 8) = v68 + 1;
      v69 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v69;
      if (!v69)
        goto LABEL_285;
      v70 = v13[1];
      *a1 = v70;
      switch(v70)
      {
        case '-':
          *a1 = 0;
          *((_QWORD *)a1 + 1) = v13 + 2;
          *((_QWORD *)a1 + 2) = v14;
          *((_DWORD *)a1 + 7) = v67 + 2;
          *((_DWORD *)a1 + 8) = v68 + 2;
          if (v69 != 1)
            *a1 = v13[2];
          v37 = *(_QWORD *)(a1 + 36);
          v38 = *((_DWORD *)a1 + 11);
          v39 = v68 + 2 - v38;
          v40 = HIDWORD(v37);
          v41 = 60;
          break;
        case '=':
          *a1 = 0;
          *((_QWORD *)a1 + 1) = v13 + 2;
          *((_QWORD *)a1 + 2) = v14;
          *((_DWORD *)a1 + 7) = v67 + 2;
          *((_DWORD *)a1 + 8) = v68 + 2;
          if (v69 != 1)
            *a1 = v13[2];
          v37 = *(_QWORD *)(a1 + 36);
          v38 = *((_DWORD *)a1 + 11);
          v39 = v68 + 2 - v38;
          v40 = HIDWORD(v37);
          v41 = 61;
          break;
        case '>':
          *a1 = 0;
          *((_QWORD *)a1 + 1) = v13 + 2;
          *((_QWORD *)a1 + 2) = v14;
          *((_DWORD *)a1 + 7) = v67 + 2;
          *((_DWORD *)a1 + 8) = v68 + 2;
          if (v69 != 1)
            *a1 = v13[2];
          v37 = *(_QWORD *)(a1 + 36);
          v38 = *((_DWORD *)a1 + 11);
          v39 = v68 + 2 - v38;
          v40 = HIDWORD(v37);
          v41 = 39;
          break;
        default:
LABEL_285:
          v42 = *(_QWORD *)(a1 + 36);
          v43 = *((_DWORD *)a1 + 11);
          v44 = v68 + 1 - v43;
          v45 = HIDWORD(v42);
          v109 = 59;
          goto LABEL_304;
      }
      goto LABEL_298;
    case '/':
      *a1 = 0;
      v72 = *((_DWORD *)a1 + 7);
      v71 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v72 + 1;
      *((_DWORD *)a1 + 8) = v71 + 1;
      v73 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v73;
      if (!v73 || (v74 = v13[1], *a1 = v74, v74 != 61))
      {
        v42 = *(_QWORD *)(a1 + 36);
        v43 = *((_DWORD *)a1 + 11);
        v44 = v71 + 1 - v43;
        v45 = HIDWORD(v42);
        v109 = 74;
        goto LABEL_304;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v13 + 2;
      *((_QWORD *)a1 + 2) = v14;
      v75 = v71 + 2;
      *((_DWORD *)a1 + 7) = v72 + 2;
      *((_DWORD *)a1 + 8) = v71 + 2;
      if (v73 != 1)
        *a1 = v13[2];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v75 - v38;
      v40 = HIDWORD(v37);
      v41 = 75;
      goto LABEL_298;
    case ':':
      *a1 = 0;
      v76 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v76;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v76 - v38;
      v40 = HIDWORD(v37);
      v41 = 47;
      goto LABEL_298;
    case ';':
      *a1 = 0;
      v77 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v77;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v77 - v38;
      v40 = HIDWORD(v37);
      v41 = 73;
      goto LABEL_298;
    case '<':
      *a1 = 0;
      v78 = *((_DWORD *)a1 + 7);
      v79 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v78 + 1;
      *((_DWORD *)a1 + 8) = v79 + 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 == 1)
        goto LABEL_262;
      v80 = v13[1];
      *a1 = v80;
      if (v80 == 60)
      {
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v78 + 2;
        *((_DWORD *)a1 + 8) = v79 + 2;
        if (v8 == 2 || (v122 = v13[2], *a1 = v122, v122 != 61))
        {
          v42 = *(_QWORD *)(a1 + 36);
          v43 = *((_DWORD *)a1 + 11);
          v44 = v79 + 2 - v43;
          v45 = HIDWORD(v42);
          v109 = 57;
          goto LABEL_304;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 3;
        *((_QWORD *)a1 + 2) = v8 - 3;
        *((_DWORD *)a1 + 7) = v78 + 3;
        *((_DWORD *)a1 + 8) = v79 + 3;
        if (v8 != 3)
          *a1 = v13[3];
        v81 = *(_QWORD *)(a1 + 36);
        v82 = *((_DWORD *)a1 + 11);
        v83 = v79 + 3 - v82;
        v84 = HIDWORD(v81);
        v85 = 58;
      }
      else
      {
        if (v80 != 61)
        {
LABEL_262:
          v42 = *(_QWORD *)(a1 + 36);
          v43 = *((_DWORD *)a1 + 11);
          v44 = v79 + 1 - v43;
          v45 = HIDWORD(v42);
          v109 = 55;
          goto LABEL_304;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v78 + 2;
        *((_DWORD *)a1 + 8) = v79 + 2;
        if (v8 != 2)
          *a1 = v13[2];
        v81 = *(_QWORD *)(a1 + 36);
        v82 = *((_DWORD *)a1 + 11);
        v83 = v79 + 2 - v82;
        v84 = HIDWORD(v81);
        v85 = 56;
      }
      goto LABEL_281;
    case '=':
      *a1 = 0;
      v87 = *((_DWORD *)a1 + 7);
      v86 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v87 + 1;
      *((_DWORD *)a1 + 8) = v86 + 1;
      v88 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v88;
      if (!v88 || (v89 = v13[1], *a1 = v89, v89 != 61))
      {
        v42 = *(_QWORD *)(a1 + 36);
        v43 = *((_DWORD *)a1 + 11);
        v44 = v86 + 1 - v43;
        v45 = HIDWORD(v42);
        v109 = 49;
        goto LABEL_304;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v13 + 2;
      *((_QWORD *)a1 + 2) = v14;
      v90 = v86 + 2;
      *((_DWORD *)a1 + 7) = v87 + 2;
      *((_DWORD *)a1 + 8) = v86 + 2;
      if (v88 != 1)
        *a1 = v13[2];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v90 - v38;
      v40 = HIDWORD(v37);
      v41 = 50;
      goto LABEL_298;
    case '>':
      *a1 = 0;
      v91 = *((_DWORD *)a1 + 7);
      v92 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v91 + 1;
      *((_DWORD *)a1 + 8) = v92 + 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 == 1)
        goto LABEL_263;
      v93 = v13[1];
      *a1 = v93;
      if (v93 != 62)
      {
        if (v93 != 61)
        {
LABEL_263:
          v42 = *(_QWORD *)(a1 + 36);
          v43 = *((_DWORD *)a1 + 11);
          v44 = v92 + 1 - v43;
          v45 = HIDWORD(v42);
          v109 = 51;
          goto LABEL_304;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v91 + 2;
        *((_DWORD *)a1 + 8) = v92 + 2;
        if (v8 != 2)
          *a1 = v13[2];
        v81 = *(_QWORD *)(a1 + 36);
        v82 = *((_DWORD *)a1 + 11);
        v83 = v92 + 2 - v82;
        v84 = HIDWORD(v81);
        v85 = 52;
        goto LABEL_281;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v13 + 2;
      *((_QWORD *)a1 + 2) = v14;
      *((_DWORD *)a1 + 7) = v91 + 2;
      *((_DWORD *)a1 + 8) = v92 + 2;
      if (v8 != 2)
      {
        v123 = v13[2];
        *a1 = v123;
        if (v123 == 61)
        {
          *a1 = 0;
          *((_QWORD *)a1 + 1) = v13 + 3;
          *((_QWORD *)a1 + 2) = v8 - 3;
          *((_DWORD *)a1 + 7) = v91 + 3;
          *((_DWORD *)a1 + 8) = v92 + 3;
          if (v8 != 3)
            *a1 = v13[3];
          v81 = *(_QWORD *)(a1 + 36);
          v82 = *((_DWORD *)a1 + 11);
          v83 = v92 + 3 - v82;
          v84 = HIDWORD(v81);
          v85 = 54;
LABEL_281:
          v262 = v85;
          v263 = __PAIR64__(v84, v81);
          v264 = v82;
          v265 = v83;
          goto LABEL_405;
        }
      }
      v42 = *(_QWORD *)(a1 + 36);
      v43 = *((_DWORD *)a1 + 11);
      v44 = v92 + 2 - v43;
      v45 = HIDWORD(v42);
      v109 = 53;
LABEL_304:
      v262 = v109;
      goto LABEL_305;
    case '@':
      *a1 = 0;
      v94 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v94;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v94 - v38;
      v40 = HIDWORD(v37);
      v41 = 40;
      goto LABEL_298;
    case '[':
      *a1 = 0;
      v95 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v95;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v95 - v38;
      v40 = HIDWORD(v37);
      v41 = 45;
      goto LABEL_298;
    case ']':
      *a1 = 0;
      v96 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v96;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v96 - v38;
      v40 = HIDWORD(v37);
      v41 = 46;
      goto LABEL_298;
    case '^':
      *a1 = 0;
      v98 = *((_DWORD *)a1 + 7);
      v97 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v98 + 1;
      *((_DWORD *)a1 + 8) = v97 + 1;
      v99 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v99;
      if (!v99 || (v100 = v13[1], *a1 = v100, v100 != 61))
      {
        v42 = *(_QWORD *)(a1 + 36);
        v43 = *((_DWORD *)a1 + 11);
        v44 = v97 + 1 - v43;
        v45 = HIDWORD(v42);
        v109 = 80;
        goto LABEL_304;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v13 + 2;
      *((_QWORD *)a1 + 2) = v14;
      v101 = v97 + 2;
      *((_DWORD *)a1 + 7) = v98 + 2;
      *((_DWORD *)a1 + 8) = v97 + 2;
      if (v99 != 1)
        *a1 = v13[2];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v101 - v38;
      v40 = HIDWORD(v37);
      v41 = 81;
      goto LABEL_298;
    case '{':
      *a1 = 0;
      v102 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v102;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v102 - v38;
      v40 = HIDWORD(v37);
      v41 = 43;
      goto LABEL_298;
    case '|':
      *a1 = 0;
      v103 = *((_DWORD *)a1 + 7);
      v104 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v103 + 1;
      *((_DWORD *)a1 + 8) = v104 + 1;
      v105 = v8 - 1;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v105;
      if (!v105)
        goto LABEL_264;
      v106 = v13[1];
      *a1 = v106;
      if (v106 == 61)
      {
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v103 + 2;
        *((_DWORD *)a1 + 8) = v104 + 2;
        if (v105 != 1)
          *a1 = v13[2];
        v37 = *(_QWORD *)(a1 + 36);
        v38 = *((_DWORD *)a1 + 11);
        v39 = v104 + 2 - v38;
        v40 = HIDWORD(v37);
        v41 = 66;
      }
      else
      {
        if (v106 != 124)
        {
LABEL_264:
          v42 = *(_QWORD *)(a1 + 36);
          v43 = *((_DWORD *)a1 + 11);
          v44 = v104 + 1 - v43;
          v45 = HIDWORD(v42);
          v109 = 64;
          goto LABEL_304;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v13 + 2;
        *((_QWORD *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v103 + 2;
        *((_DWORD *)a1 + 8) = v104 + 2;
        if (v105 != 1)
          *a1 = v13[2];
        v37 = *(_QWORD *)(a1 + 36);
        v38 = *((_DWORD *)a1 + 11);
        v39 = v104 + 2 - v38;
        v40 = HIDWORD(v37);
        v41 = 65;
      }
LABEL_298:
      v262 = v41;
      goto LABEL_404;
    case '}':
      *a1 = 0;
      v107 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v107;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v107 - v38;
      v40 = HIDWORD(v37);
      v41 = 44;
      goto LABEL_298;
    case '~':
      *a1 = 0;
      v108 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v108;
      *((_QWORD *)a1 + 1) = v13 + 1;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = v13[1];
      v37 = *(_QWORD *)(a1 + 36);
      v38 = *((_DWORD *)a1 + 11);
      v39 = v108 - v38;
      v40 = HIDWORD(v37);
      v41 = 78;
      goto LABEL_298;
    default:
      if (v9 != 46 && (v9 - 48) > 9u)
      {
        if (v9 != 95 && ((v9 | 0x20) - 97) > 0x19u)
        {
LABEL_60:
          v42 = *(_QWORD *)(a1 + 36);
          v43 = *((_DWORD *)a1 + 11);
          v44 = *((_DWORD *)a1 + 8) - v43;
          v45 = HIDWORD(v42);
          v262 = 0;
LABEL_305:
          v263 = __PAIR64__(v45, v42);
          v264 = v43;
          v265 = v44;
          goto LABEL_405;
        }
        *a1 = 0;
        v125 = *((_DWORD *)a1 + 7);
        v124 = *((_DWORD *)a1 + 8);
        *((_DWORD *)a1 + 7) = v125 + 1;
        *((_DWORD *)a1 + 8) = v124 + 1;
        v126 = v8 - 1;
        *((_QWORD *)a1 + 1) = v13 + 1;
        *((_QWORD *)a1 + 2) = v126;
        if (v126
          && ((v127 = v13[1], *a1 = v127, v127 == 95)
           || (v127 - 48) < 0xA
           || (v127 | 0x20u) - 97 <= 0x19))
        {
          v129 = v126 + 1;
          v130 = (unsigned __int8 *)(v13 + 2);
          v131 = 2;
          v132 = (unsigned __int8 *)(v13 + 2);
          while (1)
          {
            *a1 = 0;
            *((_QWORD *)a1 + 1) = v130;
            *((_QWORD *)a1 + 2) = v14;
            v133 = v124 + v131;
            *((_DWORD *)a1 + 7) = v125 + v131;
            *((_DWORD *)a1 + 8) = v124 + v131;
            if (!v14)
              break;
            v134 = *v132++;
            *a1 = v134;
            v135 = v134 - 48;
            v136 = (v134 | 0x20) - 97;
            ++v130;
            ++v131;
            --v14;
            if (v134 != 95 && v135 >= 0xA && v136 >= 0x1A)
            {
              v129 = v131 - 1;
              break;
            }
          }
          v251 = v129;
          v253 = v5;
          v254 = v4;
          v252 = v6;
          v256 = v7;
          if (v133 == *((_DWORD *)a1 + 11))
            goto LABEL_291;
        }
        else
        {
          v251 = 1;
          v253 = v5;
          v254 = v4;
          v252 = v6;
          v256 = v7;
          if (v124 + 1 == *((_DWORD *)a1 + 11))
          {
LABEL_291:
            v128 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            goto LABEL_319;
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v128 = *(double *)v258;
        if (!*(_QWORD *)v258)
        {
          v257 = 0.0;
          v139 = 0;
          v140 = 0x100000000;
          v255 = 1;
LABEL_320:
          v141 = &WGSL::Lexer<unsigned char>::nextToken(void)::keywordMappings;
          v142 = 27;
          do
          {
            v143 = &v141[3 * (v142 >> 1)];
            v144 = WTF::codePointCompare();
            if (v144 >= 0)
              v142 >>= 1;
            else
              v142 += ~(v142 >> 1);
            if (v144 < 0)
              v141 = v143 + 3;
          }
          while (v142);
          if (v141 == &WGSL::Lexer<unsigned char>::nextToken(void)::reservedWords
            || !WTF::operator==(v139, v140, (unsigned __int8 *)*v141, (uint64_t)v141[1])
            || (v145 = *((_DWORD *)v141 + 4)) == 0)
          {
            v7 = v256;
            if ((v255 & 1) != 0)
            {
              v149 = 0;
              v150 = 0x100000000;
            }
            else
            {
              v149 = *(unsigned __int8 **)(*(_QWORD *)&v257 + 8);
              v150 = *(unsigned int *)(*(_QWORD *)&v257 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)&v257 + 16) >> 2) & 1) << 32);
            }
            v151 = &WGSL::Lexer<unsigned char>::nextToken(void)::reservedWords;
            v152 = 145;
            do
            {
              v153 = &v151[2 * (v152 >> 1)];
              v154 = WTF::codePointCompare();
              if (v154 >= 0)
                v152 >>= 1;
              else
                v152 += ~(v152 >> 1);
              if (v154 < 0)
                v151 = v153 + 2;
            }
            while (v152);
            if (v151 != &WGSL::Lexer<char16_t>::nextToken(void)::keywordMappings
              && WTF::operator==(v149, v150, (unsigned __int8 *)*v151, (uint64_t)v151[1]))
            {
              v145 = 9;
            }
            else
            {
              v5 = v253;
              v4 = v254;
              v6 = v252;
              if (v251 < 2 || *v13 != 95 || v13[1] != 95)
              {
                v155 = *(_QWORD *)(a1 + 36);
                v156 = *((_DWORD *)a1 + 11);
                v157 = *((_DWORD *)a1 + 8) - v156;
                v262 = 8;
                v263 = v155;
                v264 = v156;
                v265 = v157;
                v266 = v257;
                goto LABEL_405;
              }
              v145 = 0;
            }
          }
          v146 = *(_QWORD *)(a1 + 36);
          v147 = *((_DWORD *)a1 + 11);
          v148 = *((_DWORD *)a1 + 8) - v147;
          v262 = v145;
          v263 = v146;
          v264 = v147;
          v265 = v148;
          v5 = v253;
          v4 = v254;
          v6 = v252;
          v7 = v256;
          if ((v255 & 1) == 0)
          {
            if (**(_DWORD **)&v257 == 2)
              WTF::StringImpl::destroy();
            else
              **(_DWORD **)&v257 -= 2;
          }
          goto LABEL_405;
        }
LABEL_319:
        v255 = 0;
        v139 = *(unsigned __int8 **)(*(_QWORD *)&v128 + 8);
        v257 = v128;
        v140 = *(unsigned int *)(*(_QWORD *)&v128 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)&v128 + 16) >> 2) & 1) << 32);
        goto LABEL_320;
      }
      v110 = 0;
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v116 = (unsigned __int8 *)(v13 + 1);
      v117 = v13;
      break;
  }
  while (2)
  {
    switch(v115)
    {
      case 0:
        v118 = v9;
        if (v9 == 46)
          v119 = 4;
        else
          v119 = 2;
        if (v118 == 48)
          v115 = 1;
        else
          v115 = v119;
        goto LABEL_253;
      case 1:
        v115 = 9;
        v120 = v110;
        switch((char)v9)
        {
          case '.':
            goto LABEL_189;
          case 'E':
          case 'e':
            goto LABEL_182;
          case 'X':
          case 'x':
            goto LABEL_254;
          case 'f':
          case 'h':
          case 'i':
          case 'u':
            goto LABEL_204;
          default:
            if ((v9 - 48) >= 0xAu)
              goto LABEL_350;
            goto LABEL_249;
        }
      case 2:
        if (v9 - 69 > 0x30)
          goto LABEL_176;
        if (((1 << (v9 - 69)) & 0x1001A00000000) != 0)
        {
LABEL_204:
          v115 = 19;
          v120 = v9;
          goto LABEL_254;
        }
        if (((1 << (v9 - 69)) & 0x100000001) != 0)
        {
LABEL_182:
          v115 = 6;
        }
        else
        {
LABEL_176:
          if (v9 == 46)
          {
LABEL_189:
            v115 = 5;
          }
          else
          {
            if ((v9 - 48) >= 0xAu)
              goto LABEL_350;
            v115 = 2;
          }
        }
        goto LABEL_253;
      case 3:
        if (v9 == 46)
          goto LABEL_189;
        if (v9 == 101 || v9 == 69)
          goto LABEL_182;
        if ((v9 - 48) >= 0xAu)
          goto LABEL_390;
LABEL_249:
        v115 = 3;
        goto LABEL_253;
      case 4:
        if ((v9 - 48) >= 0xAu)
        {
          v179 = *(_QWORD *)(a1 + 36);
          v180 = *((_DWORD *)a1 + 11);
          v181 = *((_DWORD *)a1 + 8) - v180;
          v182 = HIDWORD(v179);
          v262 = 69;
LABEL_391:
          v263 = __PAIR64__(v182, v179);
          v264 = v180;
          v265 = v181;
          goto LABEL_405;
        }
        v115 = 5;
LABEL_208:
        v120 = v110;
        v112 = v13;
        goto LABEL_254;
      case 5:
        if (!v112)
          v112 = v13;
        v115 = 6;
        v120 = v110;
        switch((char)v9)
        {
          case 'E':
          case 'e':
            goto LABEL_254;
          case 'f':
          case 'h':
            goto LABEL_204;
          default:
            if ((v9 - 48) < 0xAu)
              goto LABEL_189;
            goto LABEL_350;
        }
      case 6:
        v115 = 7;
        if (v9 == 43 || v9 == 45)
          goto LABEL_242;
        if ((v9 - 48) >= 0xAu)
          goto LABEL_390;
        v115 = 8;
        goto LABEL_227;
      case 7:
        if (v114 == 43)
          v111 = v13;
        if ((v9 - 48) >= 0xAu)
          goto LABEL_390;
        goto LABEL_247;
      case 8:
        v115 = 19;
        if (v9 == 102 || v9 == 104)
        {
          v120 = v9;
          goto LABEL_254;
        }
        if ((v9 - 48) < 0xAu)
        {
LABEL_247:
          v115 = 8;
LABEL_253:
          v120 = v110;
LABEL_254:
          *a1 = 0;
          if (!v8)
            goto LABEL_486;
          ++v13;
          *(int32x2_t *)(a1 + 28) = vadd_s32(*(int32x2_t *)(a1 + 28), (int32x2_t)0x100000001);
          --v8;
          *((_QWORD *)a1 + 1) = v116;
          *((_QWORD *)a1 + 2) = v8;
          if (v8)
          {
            v9 = *v13;
            *a1 = v9;
            ++v116;
            v110 = v120;
            if (v115 == 19)
              goto LABEL_351;
          }
          else
          {
            v9 = 0;
            ++v116;
            v110 = v120;
            if (v115 == 19)
              goto LABEL_351;
          }
          continue;
        }
LABEL_350:
        LOBYTE(v120) = v110;
LABEL_351:
        if ((unint64_t)v112 | (unint64_t)v111)
        {
          if ((v113 & 1) != 0)
          {
            *(_QWORD *)v258 = 0;
            _D0 = strtod(v117 - 2, (char **)v258);
            switch((char)v120)
            {
              case 'f':
                goto LABEL_364;
              case 'h':
                goto LABEL_370;
              case 'i':
              case 'u':
                goto LABEL_374;
              default:
                goto LABEL_367;
            }
          }
          *(_QWORD *)v258 = 0;
          if (v13 - v117 >= 0)
          {
            WTF::parseDouble();
            switch((char)v120)
            {
              case 'f':
LABEL_364:
                WGSL::convertFloat<float,double>(double)::max = 2139095039;
                WGSL::convertFloat<float,double>(double)::lowest = -8388609;
                if (_D0 > 3.40282347e38 || _D0 < -3.40282347e38)
                  goto LABEL_374;
                v166 = _D0;
                _D0 = v166;
                v167 = *(_QWORD *)(a1 + 36);
                v168 = *((_DWORD *)a1 + 11);
                v169 = *((_DWORD *)a1 + 8) - v168;
                v170 = HIDWORD(v167);
                v171 = 6;
                goto LABEL_373;
              case 'h':
LABEL_370:
                WGSL::convertFloat<half,double>(double)::max = 31743;
                WGSL::convertFloat<half,double>(double)::lowest = -1025;
                if (_D0 > 65504.0 || _D0 < -65504.0)
                  goto LABEL_374;
                __asm
                {
                  FCVT            H0, D0
                  FCVT            D0, H0
                }
                v167 = *(_QWORD *)(a1 + 36);
                v168 = *((_DWORD *)a1 + 11);
                v169 = *((_DWORD *)a1 + 8) - v168;
                v170 = HIDWORD(v167);
                v171 = 7;
                goto LABEL_373;
              case 'i':
              case 'u':
                goto LABEL_374;
              default:
LABEL_367:
                WGSL::convertFloat<double,double>(double)::max = 0x7FEFFFFFFFFFFFFFLL;
                WGSL::convertFloat<double,double>(double)::lowest = 0xFFEFFFFFFFFFFFFFLL;
                if (_D0 > 1.79769313e308 || _D0 < -1.79769313e308)
                {
LABEL_374:
                  v176 = *(_QWORD *)(a1 + 36);
                  v177 = *((_DWORD *)a1 + 11);
                  v178 = *((_DWORD *)a1 + 8) - v177;
                  v262 = 0;
                  v263 = v176;
                  v264 = v177;
                  v265 = v178;
                }
                else
                {
                  v167 = *(_QWORD *)(a1 + 36);
                  v168 = *((_DWORD *)a1 + 11);
                  v169 = *((_DWORD *)a1 + 8) - v168;
                  v170 = HIDWORD(v167);
                  v171 = 2;
LABEL_373:
                  v262 = v171;
                  v263 = __PAIR64__(v170, v167);
                  v264 = v168;
                  v265 = v169;
                  v266 = _D0;
                }
                break;
            }
            goto LABEL_405;
          }
LABEL_486:
          __break(1u);
LABEL_487:
          __break(0xC471u);
          JUMPOUT(0x1824C0CC0);
        }
        v159 = &v13[-(v120 != 0)];
        if ((unint64_t)(v159 - v117) >= 0x14)
          goto LABEL_390;
        if ((v113 & 1) != 0)
          v160 = 16;
        else
          v160 = 10;
        if (v117 == v159)
        {
          v161 = 0;
          v162 = std::__from_chars_integral[abi:sn180100]<unsigned long long,0>(v117, v159, v258, v160);
          if (v163 != 22)
            goto LABEL_360;
LABEL_376:
          *(double *)&v164 = 0.0;
          v165 = v163;
          v162 = v117;
          goto LABEL_388;
        }
        v161 = *v117 == 45;
        v162 = std::__from_chars_integral[abi:sn180100]<unsigned long long,0>(&v117[*v117 == 45], v159, v258, v160);
        if (v163 == 22)
          goto LABEL_376;
LABEL_360:
        if (v163 == 34)
        {
          *(double *)&v164 = 0.0;
          v165 = 34;
        }
        else if (v161)
        {
          if (*(_QWORD *)v258 <= 0x8000000000000000)
            v164 = -*(_QWORD *)v258;
          else
            *(double *)&v164 = 0.0;
          v165 = 34;
          if (*(_QWORD *)v258 <= 0x8000000000000000)
            v165 = v163;
        }
        else
        {
          v164 = *(_QWORD *)v258 & ~(*(uint64_t *)v258 >> 63);
          v165 = 34;
          if (*(uint64_t *)v258 >= 0)
            v165 = v163;
        }
LABEL_388:
        if (v159 != v162)
          goto LABEL_487;
        if (v165 == 34)
        {
LABEL_390:
          v179 = *(_QWORD *)(a1 + 36);
          v180 = *((_DWORD *)a1 + 11);
          v181 = *((_DWORD *)a1 + 8) - v180;
          v182 = HIDWORD(v179);
          v262 = 0;
          goto LABEL_391;
        }
        switch((char)v120)
        {
          case 'f':
            v183 = (float)v164;
            v184 = *(_QWORD *)(a1 + 36);
            v185 = *((_DWORD *)a1 + 11);
            v186 = *((_DWORD *)a1 + 8) - v185;
            v262 = 6;
            v263 = v184;
            v264 = v185;
            v265 = v186;
            v266 = v183;
            break;
          case 'h':
            if ((unint64_t)(v164 - 65505) < 0xFFFFFFFFFFFE003FLL)
              goto LABEL_60;
            _S0 = (float)v164;
            __asm
            {
              FCVT            H0, S0
              FCVT            D0, H0
            }
            v192 = *(_QWORD *)(a1 + 36);
            v193 = *((_DWORD *)a1 + 11);
            v194 = *((_DWORD *)a1 + 8) - v193;
            v262 = 7;
            v263 = v192;
            v264 = v193;
            v265 = v194;
            v266 = _D0;
            break;
          case 'i':
            if (v164 != (int)v164)
              goto LABEL_60;
            v195 = *(_QWORD *)(a1 + 36);
            v196 = *((_DWORD *)a1 + 11);
            v197 = *((_DWORD *)a1 + 8) - v196;
            v198 = HIDWORD(v195);
            v199 = 4;
            goto LABEL_401;
          case 'u':
            if (HIDWORD(v164))
              goto LABEL_60;
            v195 = *(_QWORD *)(a1 + 36);
            v196 = *((_DWORD *)a1 + 11);
            v197 = *((_DWORD *)a1 + 8) - v196;
            v198 = HIDWORD(v195);
            v199 = 5;
LABEL_401:
            v262 = v199;
            v263 = __PAIR64__(v198, v195);
            v264 = v196;
            v265 = v197;
            v266 = *(double *)&v164;
            break;
          default:
            v187 = *(_QWORD *)(a1 + 36);
            v188 = *((_DWORD *)a1 + 11);
            v189 = *((_DWORD *)a1 + 8) - v188;
            v262 = 3;
            v263 = v187;
            v264 = v188;
            v265 = v189;
            v266 = *(double *)&v164;
            break;
        }
LABEL_405:
        v200 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v200 == *(_DWORD *)(a2 + 8))
        {
          v201 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v200 + 1, (unint64_t)&v262);
          v202 = *(unsigned int *)(a2 + 12);
          LODWORD(v200) = *(_DWORD *)(a2 + 12);
          v203 = *(_QWORD *)a2;
          v204 = *(_QWORD *)a2 + 32 * v202;
          *(_DWORD *)v204 = *(_DWORD *)v201;
          *(_OWORD *)(v204 + 4) = *(_OWORD *)(v201 + 4);
          v205 = *(_DWORD *)v201;
          if (*(_DWORD *)v201 > 8u)
            goto LABEL_424;
          if (((1 << v205) & 0x38) != 0)
          {
            *(_QWORD *)(v203 + 32 * v202 + 24) = *(_QWORD *)(v201 + 24);
            goto LABEL_424;
          }
          if (((1 << v205) & 0xC4) != 0)
          {
            v206 = *(double *)(v201 + 24);
            v207 = v203 + 32 * v202;
            goto LABEL_414;
          }
          if (v205 == 8)
          {
            v210 = v203 + 32 * v202;
            *(_QWORD *)(v210 + 24) = 0;
            v211 = (double *)(v210 + 24);
            v212 = *(double *)(v201 + 24);
            if (v212 == 0.0)
            {
LABEL_423:
              *v211 = v212;
              goto LABEL_424;
            }
LABEL_422:
            **(_DWORD **)&v212 += 2;
            goto LABEL_423;
          }
LABEL_424:
          v209 = v262;
        }
        else
        {
          v203 = *(_QWORD *)a2;
          v208 = *(_QWORD *)a2 + 32 * v200;
          *(_DWORD *)v208 = v262;
          *(_OWORD *)(v208 + 4) = *(_OWORD *)v4;
          v209 = v262;
          if (v262 <= 8)
          {
            if (((1 << v262) & 0x38) != 0)
            {
              *(double *)(v203 + 32 * v200 + 24) = v266;
              goto LABEL_424;
            }
            if (((1 << v262) & 0xC4) != 0)
            {
              v206 = v266;
              v207 = v203 + 32 * v200;
LABEL_414:
              *(double *)(v207 + 24) = v206;
              goto LABEL_424;
            }
            if (v262 == 8)
            {
              v213 = v203 + 32 * v200;
              *(_QWORD *)(v213 + 24) = 0;
              v211 = (double *)(v213 + 24);
              v212 = v266;
              if (v266 == 0.0)
                goto LABEL_423;
              goto LABEL_422;
            }
          }
        }
        v214 = (v200 + 1);
        *(_DWORD *)(a2 + 12) = v214;
        if (v209 - 52 < 2)
          goto LABEL_452;
        if (v209 == 54)
        {
          v215 = *(_QWORD *)(a1 + 36);
          v216 = *((_DWORD *)a1 + 11);
          v217 = *((_DWORD *)a1 + 8) - v216;
          *(_DWORD *)v258 = 82;
          *(_QWORD *)&v258[4] = v215;
          v259 = v216;
          v260 = v217;
          if ((_DWORD)v214 == *(_DWORD *)(a2 + 8))
          {
            v218 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v214 + 1, (unint64_t)v258);
            v219 = *(unsigned int *)(a2 + 12);
            v220 = *(_QWORD *)a2;
            v221 = *(_QWORD *)a2 + 32 * v219;
            *(_DWORD *)v221 = *(_DWORD *)v218;
            *(_OWORD *)(v221 + 4) = *(_OWORD *)(v218 + 4);
            v222 = *(_DWORD *)v218;
            if (*(_DWORD *)v218 > 8u)
              goto LABEL_446;
            if (((1 << v222) & 0x38) != 0)
            {
              *(_QWORD *)(v220 + 32 * v219 + 24) = *(_QWORD *)(v218 + 24);
              goto LABEL_446;
            }
            if (((1 << v222) & 0xC4) != 0)
            {
              v223 = *(_DWORD **)(v218 + 24);
              v224 = v220 + 32 * v219;
              goto LABEL_436;
            }
            if (v222 == 8)
            {
              v227 = v220 + 32 * v219;
              *(_QWORD *)(v227 + 24) = 0;
              v228 = (_QWORD *)(v227 + 24);
              v229 = *(_DWORD **)(v218 + 24);
              if (!v229)
              {
LABEL_445:
                *v228 = v229;
                goto LABEL_446;
              }
LABEL_444:
              *v229 += 2;
              goto LABEL_445;
            }
LABEL_446:
            v226 = *(_DWORD *)v258;
          }
          else
          {
            v225 = v203 + 32 * v214;
            *(_DWORD *)v225 = 82;
            *(_OWORD *)(v225 + 4) = *v6;
            v226 = *(_DWORD *)v258;
            if (*(_DWORD *)v258 <= 8u)
            {
              if (((1 << v258[0]) & 0x38) != 0)
              {
                *(_QWORD *)(v203 + 32 * v214 + 24) = v261;
                goto LABEL_446;
              }
              if (((1 << v258[0]) & 0xC4) != 0)
              {
                v223 = v261;
                v224 = v203 + 32 * v214;
LABEL_436:
                *(_QWORD *)(v224 + 24) = v223;
                goto LABEL_446;
              }
              if (*(_DWORD *)v258 == 8)
              {
                v230 = v203 + 32 * v214;
                *(_QWORD *)(v230 + 24) = 0;
                v228 = (_QWORD *)(v230 + 24);
                v229 = v261;
                if (!v261)
                  goto LABEL_445;
                goto LABEL_444;
              }
            }
          }
          LODWORD(v214) = *(_DWORD *)(a2 + 12) + 1;
          *(_DWORD *)(a2 + 12) = v214;
          if (v226 == 8)
          {
            v231 = v261;
            v261 = 0;
            if (v231)
            {
              if (*v231 == 2)
                WTF::StringImpl::destroy();
              else
                *v231 -= 2;
            }
          }
LABEL_452:
          v232 = *(_QWORD *)(a1 + 36);
          v233 = *((_DWORD *)a1 + 11);
          v234 = *((_DWORD *)a1 + 8) - v233;
          *(_DWORD *)v258 = 82;
          *(_QWORD *)&v258[4] = v232;
          v259 = v233;
          v260 = v234;
          if ((_DWORD)v214 == *(_DWORD *)(a2 + 8))
          {
            v235 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v214 + 1, (unint64_t)v258);
            v236 = *(unsigned int *)(a2 + 12);
            LODWORD(v214) = *(_DWORD *)(a2 + 12);
            v237 = *(_QWORD *)a2;
            v238 = *(_QWORD *)a2 + 32 * v236;
            *(_DWORD *)v238 = *(_DWORD *)v235;
            *(_OWORD *)(v238 + 4) = *(_OWORD *)(v235 + 4);
            v239 = *(_DWORD *)v235;
            if (*(_DWORD *)v235 <= 8u)
            {
              if (((1 << v239) & 0x38) != 0)
              {
                *(_QWORD *)(v237 + 32 * v236 + 24) = *(_QWORD *)(v235 + 24);
                goto LABEL_471;
              }
              if (((1 << v239) & 0xC4) != 0)
              {
                v240 = *(_DWORD **)(v235 + 24);
                v241 = v237 + 32 * v236;
                goto LABEL_461;
              }
              if (v239 == 8)
              {
                v245 = v237 + 32 * v236;
                *(_QWORD *)(v245 + 24) = 0;
                v246 = (_QWORD *)(v245 + 24);
                v247 = *(_DWORD **)(v235 + 24);
                if (!v247)
                {
LABEL_470:
                  *v246 = v247;
                  goto LABEL_471;
                }
LABEL_469:
                *v247 += 2;
                goto LABEL_470;
              }
            }
LABEL_471:
            v244 = *(_DWORD *)v258;
          }
          else
          {
            v242 = *(_QWORD *)a2;
            v243 = *(_QWORD *)a2 + 32 * v214;
            *(_DWORD *)v243 = 82;
            *(_OWORD *)(v243 + 4) = *v6;
            v244 = *(_DWORD *)v258;
            if (*(_DWORD *)v258 <= 8u)
            {
              if (((1 << v258[0]) & 0x38) != 0)
              {
                *(_QWORD *)(v242 + 32 * v214 + 24) = v261;
                goto LABEL_471;
              }
              if (((1 << v258[0]) & 0xC4) != 0)
              {
                v240 = v261;
                v241 = v242 + 32 * v214;
LABEL_461:
                *(_QWORD *)(v241 + 24) = v240;
                goto LABEL_471;
              }
              if (*(_DWORD *)v258 == 8)
              {
                v248 = v242 + 32 * v214;
                *(_QWORD *)(v248 + 24) = 0;
                v246 = (_QWORD *)(v248 + 24);
                v247 = v261;
                if (!v261)
                  goto LABEL_470;
                goto LABEL_469;
              }
            }
          }
          *(_DWORD *)(a2 + 12) = v214 + 1;
          if (v244 == 8)
          {
            v249 = v261;
            v261 = 0;
            if (v249)
            {
              if (*v249 == 2)
                WTF::StringImpl::destroy();
              else
                *v249 -= 2;
            }
          }
          v209 = v262;
        }
        if (v209 == 8)
        {
          v250 = v266;
          v266 = 0.0;
          if (v250 != 0.0)
          {
            if (**(_DWORD **)&v250 == 2)
              WTF::StringImpl::destroy();
            else
              **(_DWORD **)&v250 -= 2;
          }
        }
        if (v209 > 1)
          goto LABEL_4;
        return;
      case 9:
        if (v9 == 46)
        {
          v115 = 11;
          v113 = 1;
LABEL_237:
          v120 = v110;
          v117 = v13;
          goto LABEL_254;
        }
        v115 = 10;
        v113 = 1;
        if ((v9 - 48) < 0xAu)
          goto LABEL_237;
        v120 = v110;
        v117 = v13;
        if (((v9 | 0x20) - 97) >= 6u)
          goto LABEL_390;
        goto LABEL_254;
      case 10:
        v115 = 16;
        v120 = v110;
        switch((char)v9)
        {
          case 'P':
          case 'p':
            goto LABEL_254;
          case 'i':
          case 'u':
            goto LABEL_204;
          default:
            v115 = 10;
            if ((v9 - 48) < 0xAu)
              goto LABEL_253;
            v120 = v110;
            if (((v9 | 0x20) - 97) >= 6u)
              goto LABEL_350;
            goto LABEL_254;
        }
      case 11:
        v115 = 12;
        if ((v9 - 48) < 0xAu)
          goto LABEL_208;
        v120 = v110;
        v112 = v13;
        if (((v9 | 0x20) - 97) >= 6u)
          goto LABEL_390;
        goto LABEL_254;
      case 12:
        if (!v112)
          v112 = v13;
        v115 = 12;
        if ((v9 - 48) < 0xAu || ((v9 | 0x20) - 97) < 6u)
          goto LABEL_253;
        if ((v9 | 0x20) != 0x70)
          goto LABEL_350;
        v115 = 13;
        goto LABEL_253;
      case 13:
        if ((v9 - 48) < 0xAu)
        {
          v115 = 15;
          goto LABEL_227;
        }
        v121 = v9;
        v115 = 14;
        if (v9 != 43)
          goto LABEL_239;
        goto LABEL_242;
      case 14:
        if (v114 == 43)
          v111 = v13;
        if ((v9 - 48) >= 0xAu)
          goto LABEL_390;
        goto LABEL_233;
      case 15:
        if ((v9 - 48) < 0xAu)
          goto LABEL_233;
        v115 = 19;
        v120 = v9;
        if (v9 != 102 && v9 != 104)
          goto LABEL_350;
        goto LABEL_254;
      case 16:
        if ((v9 - 48) >= 0xAu)
        {
          v121 = v9;
          v115 = 17;
          if (v9 == 43)
          {
LABEL_242:
            v120 = v110;
            v111 = v13;
            v114 = v9;
          }
          else
          {
LABEL_239:
            v120 = v110;
            v111 = v13;
            v114 = v9;
            if (v121 != 45)
              goto LABEL_390;
          }
        }
        else
        {
          v115 = 18;
LABEL_227:
          v120 = v110;
          v111 = v13;
        }
        goto LABEL_254;
      case 17:
        if (v114 == 43)
          v111 = v13;
        if ((v9 - 48) >= 0xAu)
          goto LABEL_390;
        v115 = 18;
        goto LABEL_253;
      case 18:
        if ((v9 - 48) < 0xAu)
        {
LABEL_233:
          v115 = 15;
          goto LABEL_253;
        }
        v115 = 19;
        v120 = v9;
        if (v9 != 102 && v9 != 104)
          goto LABEL_390;
        goto LABEL_254;
      default:
        goto LABEL_253;
    }
  }
}

void WGSL::Lexer<char16_t>::lex(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  __int16 *v5;
  _OWORD *v6;
  __int16 *v7;
  unint64_t v8;
  unsigned __int16 v9;
  int v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;
  unint64_t v17;
  int v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unsigned __int16 v123;
  int v125;
  int v126;
  int32_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  int v134;
  char *v136;
  unsigned int v137;
  BOOL v138;
  _BOOL4 v139;
  char *v140;
  char *v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  double *v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  _DWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  _QWORD *v186;
  _DWORD *v187;
  uint64_t v188;
  _DWORD *v189;
  double v190;
  uint64_t v191;
  _QWORD *v192;
  _DWORD *v193;
  uint64_t v194;
  _DWORD *v195;
  unint64_t v196;
  const UChar *v197;
  int v198;
  UChar32 v199;
  unsigned int v200;
  int v201;
  int HasBinaryProperty;
  int v203;
  unint64_t v204;
  float v205;
  unint64_t v206;
  int v207;
  int v208;
  unint64_t v209;
  int v210;
  unint64_t v214;
  int v215;
  int v216;
  double v217;
  unint64_t v218;
  int v219;
  int v220;
  unint64_t v221;
  int v222;
  int v223;
  unint64_t v226;
  int v227;
  unint64_t v228;
  int v229;
  int v230;
  unint64_t v231;
  int v232;
  double v233;
  unsigned __int8 *v234;
  unint64_t v235;
  char **v236;
  unint64_t v237;
  char **v238;
  int v239;
  int v240;
  unint64_t v241;
  int v242;
  int v243;
  unsigned __int8 *v244;
  unint64_t v245;
  char **v246;
  unint64_t v247;
  char **v248;
  int v249;
  unint64_t v250;
  int v251;
  int v252;
  __int16 *v253;
  unint64_t *v254;
  char v255;
  _OWORD *v256;
  double v257;
  unsigned int v258;
  unsigned int v259;
  unint64_t v260;
  int v261;
  int v262;
  double v263;
  uint64_t v264;
  _BYTE v265[12];
  int v266;
  int v267;
  _DWORD *v268;
  uint64_t v269;

  v4 = &v260;
  v269 = *MEMORY[0x1E0C80C00];
  v5 = (__int16 *)(a1 + 18);
  v6 = &v265[4];
  v7 = (__int16 *)(a1 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
LABEL_4:
  v8 = *((_QWORD *)a1 + 2);
  if (!v8)
  {
    *(_QWORD *)v5 = *(_QWORD *)v7;
    *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
    v10 = *((_DWORD *)a1 + 8);
    goto LABEL_335;
  }
  v9 = *a1;
  while (1)
  {
    if (v9 - 9 < 5 || v9 == 32)
    {
      *a1 = 0;
      v10 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v10;
      v11 = v8 - 1;
      _ZF = v8 == 1;
      v12 = (unsigned __int16 *)(*((_QWORD *)a1 + 1) + 2);
      *((_QWORD *)a1 + 1) = v12;
      *((_QWORD *)a1 + 2) = v11;
      if (_ZF)
      {
        v13 = 0;
        if (v9 != 10)
          goto LABEL_10;
      }
      else
      {
        v13 = *v12;
        *a1 = *v12;
        if (v9 != 10)
          goto LABEL_10;
      }
      v14 = 0;
      ++*(_DWORD *)v7;
      goto LABEL_9;
    }
    v15 = *((_QWORD *)a1 + 1);
    v16 = v8 > 1;
    v17 = v8 - 2;
    if (v8 < 2 || *(_WORD *)v15 != 47)
      goto LABEL_57;
    v18 = *(unsigned __int16 *)(v15 + 2);
    if (v18 == 42)
    {
      *a1 = 0;
      v10 = *((_DWORD *)a1 + 8) + 2;
      v14 = *((_DWORD *)a1 + 7) + 2;
      *((_DWORD *)a1 + 7) = v14;
      *((_DWORD *)a1 + 8) = v10;
      v24 = v8 - 2;
      v25 = (unsigned __int16 *)(v15 + 4);
      *((_QWORD *)a1 + 1) = v15 + 4;
      *((_QWORD *)a1 + 2) = v8 - 2;
      if (v8 == 2)
        goto LABEL_55;
      LOWORD(v26) = *v25;
      v27 = 1;
      while (1)
      {
        *a1 = 0;
        v28 = v25 + 1;
        v11 = v24 - 1;
        if (v24 == 1)
        {
          v13 = 0;
          v29 = v10 + 1;
          v30 = v14 + 1;
          v26 = (unsigned __int16)v26;
          if ((unsigned __int16)v26 <= 0x29u)
          {
LABEL_44:
            if (v26 != 10)
            {
              v14 = v30;
              v10 = v29;
              if (!v26)
                goto LABEL_54;
              goto LABEL_28;
            }
            v14 = 0;
            ++*(_DWORD *)v7;
            goto LABEL_27;
          }
        }
        else
        {
          v13 = *v28;
          *a1 = *v28;
          v29 = v10 + 1;
          v30 = v14 + 1;
          v26 = (unsigned __int16)v26;
          if ((unsigned __int16)v26 <= 0x29u)
            goto LABEL_44;
        }
        if (v26 == 42)
        {
          if (v24 == 1)
            goto LABEL_54;
          if (*v28 == 47)
          {
            *a1 = 0;
            v28 = v25 + 2;
            if (v24 == 2)
            {
              v13 = 0;
              v11 = 0;
              v10 += 2;
              v14 += 2;
              if (!--v27)
              {
LABEL_7:
                *((_QWORD *)a1 + 1) = v28;
                goto LABEL_8;
              }
            }
            else
            {
              v13 = *v28;
              *a1 = *v28;
              v11 = v24 - 2;
              v10 += 2;
              v14 += 2;
              if (!--v27)
                goto LABEL_7;
            }
            goto LABEL_28;
          }
        }
        else if (v26 == 47)
        {
          if (v24 == 1)
            goto LABEL_54;
          if (*v28 == 42)
          {
            *a1 = 0;
            v28 = v25 + 2;
            if (v24 == 2)
            {
              v13 = 0;
            }
            else
            {
              v13 = *v28;
              *a1 = *v28;
            }
            v11 = v24 - 2;
            v10 += 2;
            v14 += 2;
            ++v27;
            goto LABEL_28;
          }
        }
        v14 = v30;
LABEL_27:
        v10 = v29;
LABEL_28:
        v25 = v28;
        LOWORD(v26) = v13;
        v24 = v11;
        if (!v11)
        {
          v29 = v10;
          v30 = v14;
LABEL_54:
          *((_QWORD *)a1 + 1) = v28;
          *((_QWORD *)a1 + 2) = v11;
          v10 = v29;
          *((_DWORD *)a1 + 7) = v30;
          *((_DWORD *)a1 + 8) = v29;
LABEL_55:
          v31 = *(_QWORD *)(a1 + 18);
          v32 = *((_DWORD *)a1 + 11);
          v33 = v10 - v32;
          v34 = HIDWORD(v31);
          v259 = 0;
LABEL_336:
          v260 = __PAIR64__(v34, v31);
          v261 = v32;
          v262 = v33;
          goto LABEL_337;
        }
      }
    }
    if (v18 != 47)
      break;
    v19 = (unsigned __int16 *)(v15 + 2);
    v20 = *((_DWORD *)a1 + 7);
    v21 = *((_DWORD *)a1 + 8);
    v22 = *((_QWORD *)a1 + 1);
    v14 = v20;
    v10 = v21;
    v11 = v8;
    do
    {
      *a1 = 0;
      if (!--v11)
      {
        v10 = v21 + v8;
        *((_QWORD *)a1 + 1) = v15 + 2 * v8;
        *((_QWORD *)a1 + 2) = 0;
        *((_DWORD *)a1 + 7) = v20 + v8;
        *((_DWORD *)a1 + 8) = v21 + v8;
LABEL_334:
        *(_QWORD *)v5 = *(_QWORD *)v7;
        *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
LABEL_335:
        v31 = *(_QWORD *)(a1 + 18);
        v32 = *((_DWORD *)a1 + 11);
        v33 = v10 - v32;
        v34 = HIDWORD(v31);
        v259 = 1;
        goto LABEL_336;
      }
      ++v14;
      ++v10;
      v13 = *v19;
      *a1 = *v19;
      v23 = *v19++;
      v22 += 2;
    }
    while (v23 != 10);
    *((_QWORD *)a1 + 1) = v22;
LABEL_8:
    *((_QWORD *)a1 + 2) = v11;
    *((_DWORD *)a1 + 8) = v10;
LABEL_9:
    *((_DWORD *)a1 + 7) = v14;
LABEL_10:
    v9 = v13;
    v8 = v11;
    if (!v11)
      goto LABEL_334;
  }
  v16 = 1;
LABEL_57:
  *(_QWORD *)v5 = *(_QWORD *)v7;
  *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
  switch(v9)
  {
    case '!':
      *a1 = 0;
      v36 = *((_DWORD *)a1 + 7);
      v35 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v36 + 1;
      *((_DWORD *)a1 + 8) = v35 + 1;
      v37 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v37;
      if (!v37 || (v38 = *(unsigned __int16 *)(v15 + 2), *a1 = v38, v38 != 61))
      {
        v108 = *(_QWORD *)(a1 + 18);
        v109 = *((_DWORD *)a1 + 11);
        v110 = v35 + 1 - v109;
        v111 = HIDWORD(v108);
        v112 = 41;
        goto LABEL_418;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v15 + 4;
      *((_QWORD *)a1 + 2) = v17;
      v39 = v35 + 2;
      *((_DWORD *)a1 + 7) = v36 + 2;
      *((_DWORD *)a1 + 8) = v35 + 2;
      if (v37 != 1)
        *a1 = *(_WORD *)(v15 + 4);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v39 - v32;
      v34 = HIDWORD(v31);
      v40 = 42;
      goto LABEL_306;
    case '%':
      *a1 = 0;
      v46 = *((_DWORD *)a1 + 7);
      v45 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v46 + 1;
      *((_DWORD *)a1 + 8) = v45 + 1;
      v47 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v47;
      if (!v47 || (v48 = *(unsigned __int16 *)(v15 + 2), *a1 = v48, v48 != 61))
      {
        v108 = *(_QWORD *)(a1 + 18);
        v109 = *((_DWORD *)a1 + 11);
        v110 = v45 + 1 - v109;
        v111 = HIDWORD(v108);
        v112 = 62;
        goto LABEL_418;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v15 + 4;
      *((_QWORD *)a1 + 2) = v17;
      v49 = v45 + 2;
      *((_DWORD *)a1 + 7) = v46 + 2;
      *((_DWORD *)a1 + 8) = v45 + 2;
      if (v47 != 1)
        *a1 = *(_WORD *)(v15 + 4);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v49 - v32;
      v34 = HIDWORD(v31);
      v40 = 63;
      goto LABEL_306;
    case '&':
      *a1 = 0;
      v50 = *((_DWORD *)a1 + 7);
      v51 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v50 + 1;
      *((_DWORD *)a1 + 8) = v51 + 1;
      v52 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v52;
      if (!v52)
        goto LABEL_268;
      v53 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v53;
      if (v53 == 61)
      {
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v50 + 2;
        *((_DWORD *)a1 + 8) = v51 + 2;
        if (v52 != 1)
          *a1 = *(_WORD *)(v15 + 4);
        v31 = *(_QWORD *)(a1 + 18);
        v32 = *((_DWORD *)a1 + 11);
        v33 = v51 + 2 - v32;
        v34 = HIDWORD(v31);
        v40 = 38;
      }
      else
      {
        if (v53 != 38)
        {
LABEL_268:
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = v51 + 1 - v109;
          v111 = HIDWORD(v108);
          v112 = 36;
          goto LABEL_418;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v50 + 2;
        *((_DWORD *)a1 + 8) = v51 + 2;
        if (v52 != 1)
          *a1 = *(_WORD *)(v15 + 4);
        v31 = *(_QWORD *)(a1 + 18);
        v32 = *((_DWORD *)a1 + 11);
        v33 = v51 + 2 - v32;
        v34 = HIDWORD(v31);
        v40 = 37;
      }
      goto LABEL_306;
    case '(':
      *a1 = 0;
      v54 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v54;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v54 - v32;
      v34 = HIDWORD(v31);
      v40 = 67;
      goto LABEL_306;
    case ')':
      *a1 = 0;
      v55 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v55;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v55 - v32;
      v34 = HIDWORD(v31);
      v40 = 68;
      goto LABEL_306;
    case '*':
      *a1 = 0;
      v57 = *((_DWORD *)a1 + 7);
      v56 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v57 + 1;
      *((_DWORD *)a1 + 8) = v56 + 1;
      v58 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v58;
      if (!v58 || (v59 = *(unsigned __int16 *)(v15 + 2), *a1 = v59, v59 != 61))
      {
        v108 = *(_QWORD *)(a1 + 18);
        v109 = *((_DWORD *)a1 + 11);
        v110 = v56 + 1 - v109;
        v111 = HIDWORD(v108);
        v112 = 76;
        goto LABEL_418;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v15 + 4;
      *((_QWORD *)a1 + 2) = v17;
      v60 = v56 + 2;
      *((_DWORD *)a1 + 7) = v57 + 2;
      *((_DWORD *)a1 + 8) = v56 + 2;
      if (v58 != 1)
        *a1 = *(_WORD *)(v15 + 4);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v60 - v32;
      v34 = HIDWORD(v31);
      v40 = 77;
      goto LABEL_306;
    case '+':
      *a1 = 0;
      v61 = *((_DWORD *)a1 + 7);
      v62 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v61 + 1;
      *((_DWORD *)a1 + 8) = v62 + 1;
      v63 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v63;
      if (!v63)
        goto LABEL_269;
      v64 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v64;
      if (v64 == 61)
      {
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v61 + 2;
        *((_DWORD *)a1 + 8) = v62 + 2;
        if (v63 != 1)
          *a1 = *(_WORD *)(v15 + 4);
        v31 = *(_QWORD *)(a1 + 18);
        v32 = *((_DWORD *)a1 + 11);
        v33 = v62 + 2 - v32;
        v34 = HIDWORD(v31);
        v40 = 72;
      }
      else
      {
        if (v64 != 43)
        {
LABEL_269:
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = v62 + 1 - v109;
          v111 = HIDWORD(v108);
          v112 = 70;
          goto LABEL_418;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v61 + 2;
        *((_DWORD *)a1 + 8) = v62 + 2;
        if (v63 != 1)
          *a1 = *(_WORD *)(v15 + 4);
        v31 = *(_QWORD *)(a1 + 18);
        v32 = *((_DWORD *)a1 + 11);
        v33 = v62 + 2 - v32;
        v34 = HIDWORD(v31);
        v40 = 71;
      }
      goto LABEL_306;
    case ',':
      *a1 = 0;
      v65 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v65;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v65 - v32;
      v34 = HIDWORD(v31);
      v40 = 48;
      goto LABEL_306;
    case '-':
      *a1 = 0;
      v66 = *((_DWORD *)a1 + 7);
      v67 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v66 + 1;
      *((_DWORD *)a1 + 8) = v67 + 1;
      v68 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v68;
      if (!v68)
        goto LABEL_293;
      v69 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v69;
      switch(v69)
      {
        case '-':
          *a1 = 0;
          *((_QWORD *)a1 + 1) = v15 + 4;
          *((_QWORD *)a1 + 2) = v17;
          *((_DWORD *)a1 + 7) = v66 + 2;
          *((_DWORD *)a1 + 8) = v67 + 2;
          if (v68 != 1)
            *a1 = *(_WORD *)(v15 + 4);
          v31 = *(_QWORD *)(a1 + 18);
          v32 = *((_DWORD *)a1 + 11);
          v33 = v67 + 2 - v32;
          v34 = HIDWORD(v31);
          v40 = 60;
          break;
        case '=':
          *a1 = 0;
          *((_QWORD *)a1 + 1) = v15 + 4;
          *((_QWORD *)a1 + 2) = v17;
          *((_DWORD *)a1 + 7) = v66 + 2;
          *((_DWORD *)a1 + 8) = v67 + 2;
          if (v68 != 1)
            *a1 = *(_WORD *)(v15 + 4);
          v31 = *(_QWORD *)(a1 + 18);
          v32 = *((_DWORD *)a1 + 11);
          v33 = v67 + 2 - v32;
          v34 = HIDWORD(v31);
          v40 = 61;
          break;
        case '>':
          *a1 = 0;
          *((_QWORD *)a1 + 1) = v15 + 4;
          *((_QWORD *)a1 + 2) = v17;
          *((_DWORD *)a1 + 7) = v66 + 2;
          *((_DWORD *)a1 + 8) = v67 + 2;
          if (v68 != 1)
            *a1 = *(_WORD *)(v15 + 4);
          v31 = *(_QWORD *)(a1 + 18);
          v32 = *((_DWORD *)a1 + 11);
          v33 = v67 + 2 - v32;
          v34 = HIDWORD(v31);
          v40 = 39;
          break;
        default:
LABEL_293:
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = v67 + 1 - v109;
          v111 = HIDWORD(v108);
          v112 = 59;
          goto LABEL_418;
      }
      goto LABEL_306;
    case '/':
      *a1 = 0;
      v71 = *((_DWORD *)a1 + 7);
      v70 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v71 + 1;
      *((_DWORD *)a1 + 8) = v70 + 1;
      v72 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v72;
      if (!v72 || (v73 = *(unsigned __int16 *)(v15 + 2), *a1 = v73, v73 != 61))
      {
        v108 = *(_QWORD *)(a1 + 18);
        v109 = *((_DWORD *)a1 + 11);
        v110 = v70 + 1 - v109;
        v111 = HIDWORD(v108);
        v112 = 74;
        goto LABEL_418;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v15 + 4;
      *((_QWORD *)a1 + 2) = v17;
      v74 = v70 + 2;
      *((_DWORD *)a1 + 7) = v71 + 2;
      *((_DWORD *)a1 + 8) = v70 + 2;
      if (v72 != 1)
        *a1 = *(_WORD *)(v15 + 4);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v74 - v32;
      v34 = HIDWORD(v31);
      v40 = 75;
      goto LABEL_306;
    case ':':
      *a1 = 0;
      v75 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v75;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v75 - v32;
      v34 = HIDWORD(v31);
      v40 = 47;
      goto LABEL_306;
    case ';':
      *a1 = 0;
      v76 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v76;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v76 - v32;
      v34 = HIDWORD(v31);
      v40 = 73;
      goto LABEL_306;
    case '<':
      *a1 = 0;
      v77 = *((_DWORD *)a1 + 7);
      v78 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v77 + 1;
      *((_DWORD *)a1 + 8) = v78 + 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 == 1)
        goto LABEL_270;
      v79 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v79;
      if (v79 == 60)
      {
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v77 + 2;
        *((_DWORD *)a1 + 8) = v78 + 2;
        if (v8 == 2 || (v125 = *(unsigned __int16 *)(v15 + 4), *a1 = v125, v125 != 61))
        {
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = v78 + 2 - v109;
          v111 = HIDWORD(v108);
          v112 = 57;
          goto LABEL_418;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 6;
        *((_QWORD *)a1 + 2) = v8 - 3;
        *((_DWORD *)a1 + 7) = v77 + 3;
        *((_DWORD *)a1 + 8) = v78 + 3;
        if (v8 != 3)
          *a1 = *(_WORD *)(v15 + 6);
        v80 = *(_QWORD *)(a1 + 18);
        v81 = *((_DWORD *)a1 + 11);
        v82 = v78 + 3 - v81;
        v83 = HIDWORD(v80);
        v84 = 58;
      }
      else
      {
        if (v79 != 61)
        {
LABEL_270:
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = v78 + 1 - v109;
          v111 = HIDWORD(v108);
          v112 = 55;
          goto LABEL_418;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v77 + 2;
        *((_DWORD *)a1 + 8) = v78 + 2;
        if (v8 != 2)
          *a1 = *(_WORD *)(v15 + 4);
        v80 = *(_QWORD *)(a1 + 18);
        v81 = *((_DWORD *)a1 + 11);
        v82 = v78 + 2 - v81;
        v83 = HIDWORD(v80);
        v84 = 56;
      }
      goto LABEL_289;
    case '=':
      *a1 = 0;
      v86 = *((_DWORD *)a1 + 7);
      v85 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v86 + 1;
      *((_DWORD *)a1 + 8) = v85 + 1;
      v87 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v87;
      if (!v87 || (v88 = *(unsigned __int16 *)(v15 + 2), *a1 = v88, v88 != 61))
      {
        v108 = *(_QWORD *)(a1 + 18);
        v109 = *((_DWORD *)a1 + 11);
        v110 = v85 + 1 - v109;
        v111 = HIDWORD(v108);
        v112 = 49;
        goto LABEL_418;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v15 + 4;
      *((_QWORD *)a1 + 2) = v17;
      v89 = v85 + 2;
      *((_DWORD *)a1 + 7) = v86 + 2;
      *((_DWORD *)a1 + 8) = v85 + 2;
      if (v87 != 1)
        *a1 = *(_WORD *)(v15 + 4);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v89 - v32;
      v34 = HIDWORD(v31);
      v40 = 50;
      goto LABEL_306;
    case '>':
      *a1 = 0;
      v90 = *((_DWORD *)a1 + 7);
      v91 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v90 + 1;
      *((_DWORD *)a1 + 8) = v91 + 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 == 1)
        goto LABEL_271;
      v92 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v92;
      if (v92 != 62)
      {
        if (v92 != 61)
        {
LABEL_271:
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = v91 + 1 - v109;
          v111 = HIDWORD(v108);
          v112 = 51;
          goto LABEL_418;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v90 + 2;
        *((_DWORD *)a1 + 8) = v91 + 2;
        if (v8 != 2)
          *a1 = *(_WORD *)(v15 + 4);
        v80 = *(_QWORD *)(a1 + 18);
        v81 = *((_DWORD *)a1 + 11);
        v82 = v91 + 2 - v81;
        v83 = HIDWORD(v80);
        v84 = 52;
        goto LABEL_289;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v15 + 4;
      *((_QWORD *)a1 + 2) = v17;
      *((_DWORD *)a1 + 7) = v90 + 2;
      *((_DWORD *)a1 + 8) = v91 + 2;
      if (v8 != 2)
      {
        v126 = *(unsigned __int16 *)(v15 + 4);
        *a1 = v126;
        if (v126 == 61)
        {
          *a1 = 0;
          *((_QWORD *)a1 + 1) = v15 + 6;
          *((_QWORD *)a1 + 2) = v8 - 3;
          *((_DWORD *)a1 + 7) = v90 + 3;
          *((_DWORD *)a1 + 8) = v91 + 3;
          if (v8 != 3)
            *a1 = *(_WORD *)(v15 + 6);
          v80 = *(_QWORD *)(a1 + 18);
          v81 = *((_DWORD *)a1 + 11);
          v82 = v91 + 3 - v81;
          v83 = HIDWORD(v80);
          v84 = 54;
LABEL_289:
          v259 = v84;
          v260 = __PAIR64__(v83, v80);
          v261 = v81;
          v262 = v82;
          goto LABEL_337;
        }
      }
      v108 = *(_QWORD *)(a1 + 18);
      v109 = *((_DWORD *)a1 + 11);
      v110 = v91 + 2 - v109;
      v111 = HIDWORD(v108);
      v112 = 53;
      goto LABEL_418;
    case '@':
      *a1 = 0;
      v93 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v93;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v93 - v32;
      v34 = HIDWORD(v31);
      v40 = 40;
      goto LABEL_306;
    case '[':
      *a1 = 0;
      v94 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v94;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v94 - v32;
      v34 = HIDWORD(v31);
      v40 = 45;
      goto LABEL_306;
    case ']':
      *a1 = 0;
      v95 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v95;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v95 - v32;
      v34 = HIDWORD(v31);
      v40 = 46;
      goto LABEL_306;
    case '^':
      *a1 = 0;
      v97 = *((_DWORD *)a1 + 7);
      v96 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v97 + 1;
      *((_DWORD *)a1 + 8) = v96 + 1;
      v98 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v98;
      if (!v98 || (v99 = *(unsigned __int16 *)(v15 + 2), *a1 = v99, v99 != 61))
      {
        v108 = *(_QWORD *)(a1 + 18);
        v109 = *((_DWORD *)a1 + 11);
        v110 = v96 + 1 - v109;
        v111 = HIDWORD(v108);
        v112 = 80;
        goto LABEL_418;
      }
      *a1 = 0;
      *((_QWORD *)a1 + 1) = v15 + 4;
      *((_QWORD *)a1 + 2) = v17;
      v100 = v96 + 2;
      *((_DWORD *)a1 + 7) = v97 + 2;
      *((_DWORD *)a1 + 8) = v96 + 2;
      if (v98 != 1)
        *a1 = *(_WORD *)(v15 + 4);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v100 - v32;
      v34 = HIDWORD(v31);
      v40 = 81;
      goto LABEL_306;
    case '{':
      *a1 = 0;
      v101 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v101;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v101 - v32;
      v34 = HIDWORD(v31);
      v40 = 43;
      goto LABEL_306;
    case '|':
      *a1 = 0;
      v102 = *((_DWORD *)a1 + 7);
      v103 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v102 + 1;
      *((_DWORD *)a1 + 8) = v103 + 1;
      v104 = v8 - 1;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v104;
      if (!v104)
        goto LABEL_272;
      v105 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v105;
      if (v105 == 61)
      {
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v102 + 2;
        *((_DWORD *)a1 + 8) = v103 + 2;
        if (v104 != 1)
          *a1 = *(_WORD *)(v15 + 4);
        v31 = *(_QWORD *)(a1 + 18);
        v32 = *((_DWORD *)a1 + 11);
        v33 = v103 + 2 - v32;
        v34 = HIDWORD(v31);
        v40 = 66;
      }
      else
      {
        if (v105 != 124)
        {
LABEL_272:
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = v103 + 1 - v109;
          v111 = HIDWORD(v108);
          v112 = 64;
          goto LABEL_418;
        }
        *a1 = 0;
        *((_QWORD *)a1 + 1) = v15 + 4;
        *((_QWORD *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v102 + 2;
        *((_DWORD *)a1 + 8) = v103 + 2;
        if (v104 != 1)
          *a1 = *(_WORD *)(v15 + 4);
        v31 = *(_QWORD *)(a1 + 18);
        v32 = *((_DWORD *)a1 + 11);
        v33 = v103 + 2 - v32;
        v34 = HIDWORD(v31);
        v40 = 65;
      }
LABEL_306:
      v259 = v40;
      goto LABEL_336;
    case '}':
      *a1 = 0;
      v106 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v106;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v106 - v32;
      v34 = HIDWORD(v31);
      v40 = 44;
      goto LABEL_306;
    case '~':
      *a1 = 0;
      v107 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v107;
      *((_QWORD *)a1 + 1) = v15 + 2;
      *((_QWORD *)a1 + 2) = v8 - 1;
      if (v8 != 1)
        *a1 = *(_WORD *)(v15 + 2);
      v31 = *(_QWORD *)(a1 + 18);
      v32 = *((_DWORD *)a1 + 11);
      v33 = v107 - v32;
      v34 = HIDWORD(v31);
      v40 = 78;
      goto LABEL_306;
    default:
      if (v9 != 46 && (unsigned __int16)(v9 - 48) > 9u)
      {
        if (v9 == 95)
        {
          v41 = 1;
          *a1 = 0;
          v42 = 1;
          _CF = v8 != 0;
          v44 = v8 - 1;
          _ZF = v44 == 0;
          if (!_CF)
            goto LABEL_520;
LABEL_423:
          v256 = v6;
          v197 = (const UChar *)(v15 + 2 * v42);
          *((_QWORD *)a1 + 1) = v197;
          *((_QWORD *)a1 + 2) = v44;
          v198 = *((_DWORD *)a1 + 8) + v41;
          *((_DWORD *)a1 + 7) += v41;
          *((_DWORD *)a1 + 8) = v198;
          if (!_ZF)
          {
            v199 = *v197;
            *a1 = v199;
            if (v44)
              goto LABEL_425;
            goto LABEL_481;
          }
          v199 = 0;
          if (!v44)
          {
LABEL_481:
            v258 = v41;
LABEL_482:
            v253 = v5;
            v254 = v4;
            if (v198 == *((_DWORD *)a1 + 11))
            {
              v233 = MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v233 = *(double *)v265;
              if (!*(_QWORD *)v265)
              {
                v257 = 0.0;
                v234 = 0;
                v235 = 0x100000000;
                v255 = 1;
LABEL_486:
                v236 = &WGSL::Lexer<char16_t>::nextToken(void)::keywordMappings;
                v237 = 27;
                do
                {
                  v238 = &v236[3 * (v237 >> 1)];
                  v239 = WTF::codePointCompare();
                  if (v239 >= 0)
                    v237 >>= 1;
                  else
                    v237 += ~(v237 >> 1);
                  if (v239 < 0)
                    v236 = v238 + 3;
                }
                while (v237);
                if (v236 == &WGSL::Lexer<char16_t>::nextToken(void)::reservedWords
                  || !WTF::operator==(v234, v235, (unsigned __int8 *)*v236, (uint64_t)v236[1])
                  || (v240 = *((_DWORD *)v236 + 4)) == 0)
                {
                  if ((v255 & 1) != 0)
                  {
                    v244 = 0;
                    v245 = 0x100000000;
                  }
                  else
                  {
                    v244 = *(unsigned __int8 **)(*(_QWORD *)&v257 + 8);
                    v245 = *(unsigned int *)(*(_QWORD *)&v257 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)&v257 + 16) >> 2) & 1) << 32);
                  }
                  v246 = &WGSL::Lexer<char16_t>::nextToken(void)::reservedWords;
                  v247 = 145;
                  do
                  {
                    v248 = &v246[2 * (v247 >> 1)];
                    v249 = WTF::codePointCompare();
                    if (v249 >= 0)
                      v247 >>= 1;
                    else
                      v247 += ~(v247 >> 1);
                    if (v249 < 0)
                      v246 = v248 + 2;
                  }
                  while (v247);
                    && WTF::operator==(v244, v245, (unsigned __int8 *)*v246, (uint64_t)v246[1]))
                  {
                    v240 = 9;
                  }
                  else
                  {
                    v5 = v253;
                    v4 = v254;
                    if (v258 < 2 || *(_WORD *)v15 != 95 || *(_WORD *)(v15 + 2) != 95)
                    {
                      v250 = *(_QWORD *)(a1 + 18);
                      v251 = *((_DWORD *)a1 + 11);
                      v252 = *((_DWORD *)a1 + 8) - v251;
                      v259 = 8;
                      v260 = v250;
                      v261 = v251;
                      v262 = v252;
                      v6 = v256;
                      v263 = v257;
                      goto LABEL_337;
                    }
                    v240 = 0;
                  }
                }
                v241 = *(_QWORD *)(a1 + 18);
                v242 = *((_DWORD *)a1 + 11);
                v243 = *((_DWORD *)a1 + 8) - v242;
                v259 = v240;
                v260 = v241;
                v261 = v242;
                v262 = v243;
                v5 = v253;
                v4 = v254;
                v6 = v256;
                if ((v255 & 1) == 0)
                {
                  if (**(_DWORD **)&v257 == 2)
                    WTF::StringImpl::destroy();
                  else
                    **(_DWORD **)&v257 -= 2;
                }
                goto LABEL_337;
              }
            }
            v255 = 0;
            v234 = *(unsigned __int8 **)(*(_QWORD *)&v233 + 8);
            v257 = v233;
            v235 = *(unsigned int *)(*(_QWORD *)&v233 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)&v233 + 16) >> 2) & 1) << 32);
            goto LABEL_486;
          }
          while (1)
          {
LABEL_425:
            if (v199 == 95)
            {
              v200 = 1;
              goto LABEL_437;
            }
            v258 = v41;
            if (v44 < 2)
            {
              v200 = 1;
              HasBinaryProperty = u_stringHasBinaryProperty(v197, 1, UCHAR_XID_START);
              v41 = v258;
              if (HasBinaryProperty)
                goto LABEL_437;
            }
            else
            {
              if (u_charType(v199) == 18)
                v200 = 2;
              else
                v200 = 1;
              v201 = u_stringHasBinaryProperty(v197, v200, UCHAR_XID_START);
              v41 = v258;
              if (v201)
                goto LABEL_437;
              if (u_charType(v199) == 18)
                v200 = 2;
              else
                v200 = 1;
            }
            v203 = u_stringHasBinaryProperty(v197, v200, UCHAR_XID_CONTINUE);
            v41 = v258;
            if (!v203)
            {
              v198 = *((_DWORD *)a1 + 8);
              goto LABEL_482;
            }
LABEL_437:
            *a1 = 0;
            v204 = *((_QWORD *)a1 + 2);
            _CF = v204 >= v200;
            v44 = v204 - v200;
            if (!_CF)
              goto LABEL_520;
            v197 = (const UChar *)(*((_QWORD *)a1 + 1) + 2 * v200);
            *((_QWORD *)a1 + 1) = v197;
            *((_QWORD *)a1 + 2) = v44;
            v198 = *((_DWORD *)a1 + 8) + v200;
            *((_DWORD *)a1 + 7) += v200;
            *((_DWORD *)a1 + 8) = v198;
            if (!v44)
            {
              v41 += v200;
              goto LABEL_481;
            }
            v199 = *v197;
            *a1 = v199;
            v41 += v200;
          }
        }
        if (v16)
        {
          if (u_charType(v9) == 18)
            v127 = 2;
          else
            v127 = 1;
          v128 = v127;
          if (!u_stringHasBinaryProperty((const UChar *)v15, v127, UCHAR_XID_START))
            goto LABEL_455;
        }
        else
        {
          v128 = 1;
          if (!u_stringHasBinaryProperty((const UChar *)v15, 1, UCHAR_XID_START))
          {
LABEL_455:
            v214 = *(_QWORD *)(a1 + 18);
            v215 = *((_DWORD *)a1 + 11);
            v216 = *((_DWORD *)a1 + 8) - v215;
            v259 = 0;
            v260 = v214;
            v261 = v215;
            v262 = v216;
            goto LABEL_337;
          }
        }
        v15 = *((_QWORD *)a1 + 1);
        v196 = *((_QWORD *)a1 + 2);
        v41 = v128;
        *a1 = 0;
        v42 = v128;
        _CF = v196 >= v128;
        v44 = v196 - v128;
        _ZF = v44 == 0;
        if (!_CF)
          goto LABEL_520;
        goto LABEL_423;
      }
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v119 = v15 + 2;
      v120 = v15;
      break;
  }
  while (2)
  {
    switch(v118)
    {
      case 0:
        v121 = v9;
        if (v9 == 46)
          v122 = 4;
        else
          v122 = 2;
        if (v121 == 48)
          v118 = 1;
        else
          v118 = v122;
        goto LABEL_254;
      case 1:
        v118 = 9;
        switch(v9)
        {
          case '.':
            goto LABEL_196;
          case 'E':
          case 'e':
            goto LABEL_189;
          case 'X':
          case 'x':
            goto LABEL_254;
          case 'f':
          case 'h':
          case 'i':
          case 'u':
            goto LABEL_249;
          default:
            if ((unsigned __int16)(v9 - 48) >= 0xAu)
              goto LABEL_265;
            goto LABEL_259;
        }
      case 2:
        if (v9 - 69 > 0x30)
          goto LABEL_183;
        if (((1 << (v9 - 69)) & 0x1001A00000000) != 0)
          goto LABEL_249;
        if (((1 << (v9 - 69)) & 0x100000001) != 0)
        {
LABEL_189:
          v118 = 6;
        }
        else
        {
LABEL_183:
          if (v9 == 46)
          {
LABEL_196:
            v118 = 5;
          }
          else
          {
            if ((unsigned __int16)(v9 - 48) >= 0xAu)
              goto LABEL_265;
            v118 = 2;
          }
        }
        goto LABEL_254;
      case 3:
        if (v9 == 46)
          goto LABEL_196;
        if (v9 == 101 || v9 == 69)
          goto LABEL_189;
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
          goto LABEL_469;
LABEL_259:
        v118 = 3;
        goto LABEL_254;
      case 4:
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
        {
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = *((_DWORD *)a1 + 8) - v109;
          v111 = HIDWORD(v108);
          v112 = 69;
LABEL_418:
          v259 = v112;
LABEL_419:
          v260 = __PAIR64__(v111, v108);
          v261 = v109;
          v262 = v110;
          goto LABEL_337;
        }
        v118 = 5;
        v114 = v15;
LABEL_254:
        *a1 = 0;
        if (!v8)
          goto LABEL_520;
        *(int32x2_t *)(a1 + 14) = vadd_s32(*(int32x2_t *)(a1 + 14), (int32x2_t)0x100000001);
        --v8;
        *((_QWORD *)a1 + 1) = v119;
        *((_QWORD *)a1 + 2) = v8;
        if (v8)
        {
          v123 = *(_WORD *)(v15 + 2);
          v15 += 2;
          v9 = v123;
          *a1 = v123;
          v119 += 2;
          if (v118 == 19)
            goto LABEL_265;
          continue;
        }
        v9 = 0;
        v15 += 2;
        v119 += 2;
        if (v118 != 19)
          continue;
LABEL_265:
        if (v114 | v115)
        {
          if ((v116 & 1) != 0)
          {
            *(_QWORD *)v265 = 0;
            _D0 = strtod((const char *)(v120 - 2), (char **)v265);
            switch(v113)
            {
              case 'f':
                goto LABEL_444;
              case 'h':
                goto LABEL_451;
              case 'i':
              case 'u':
                goto LABEL_455;
              default:
                goto LABEL_448;
            }
          }
          *(_QWORD *)v265 = 0;
          if (v15 - v120 > -2)
          {
            WTF::parseDouble();
            switch(v113)
            {
              case 'f':
LABEL_444:
                WGSL::convertFloat<float,double>(double)::max = 2139095039;
                WGSL::convertFloat<float,double>(double)::lowest = -8388609;
                if (_D0 > 3.40282347e38 || _D0 < -3.40282347e38)
                  goto LABEL_455;
                v205 = _D0;
                _D0 = v205;
                v206 = *(_QWORD *)(a1 + 18);
                v207 = *((_DWORD *)a1 + 11);
                v208 = *((_DWORD *)a1 + 8) - v207;
                v209 = HIDWORD(v206);
                v210 = 6;
                break;
              case 'h':
LABEL_451:
                WGSL::convertFloat<half,double>(double)::max = 31743;
                WGSL::convertFloat<half,double>(double)::lowest = -1025;
                if (_D0 > 65504.0 || _D0 < -65504.0)
                  goto LABEL_455;
                __asm
                {
                  FCVT            H0, D0
                  FCVT            D0, H0
                }
                v206 = *(_QWORD *)(a1 + 18);
                v207 = *((_DWORD *)a1 + 11);
                v208 = *((_DWORD *)a1 + 8) - v207;
                v209 = HIDWORD(v206);
                v210 = 7;
                break;
              case 'i':
              case 'u':
                goto LABEL_455;
              default:
LABEL_448:
                WGSL::convertFloat<double,double>(double)::max = 0x7FEFFFFFFFFFFFFFLL;
                WGSL::convertFloat<double,double>(double)::lowest = 0xFFEFFFFFFFFFFFFFLL;
                if (_D0 > 1.79769313e308 || _D0 < -1.79769313e308)
                  goto LABEL_455;
                v206 = *(_QWORD *)(a1 + 18);
                v207 = *((_DWORD *)a1 + 11);
                v208 = *((_DWORD *)a1 + 8) - v207;
                v209 = HIDWORD(v206);
                v210 = 2;
                break;
            }
            v259 = v210;
            v260 = __PAIR64__(v209, v206);
            v261 = v207;
            v262 = v208;
            v263 = _D0;
            goto LABEL_337;
          }
LABEL_520:
          __break(1u);
LABEL_521:
          __break(0xC471u);
          JUMPOUT(0x1824C33B0);
        }
        if (v113)
          v129 = -1;
        else
          v129 = 0;
        v130 = v15 + 2 * v129;
        if ((unint64_t)(v130 - v120) >= 0x27)
          goto LABEL_469;
        v131 = (v130 - v120) >> 1;
        if (v130 != v120)
        {
          v132 = 0;
          v133 = 1;
          do
          {
            v134 = *(unsigned __int16 *)(v120 + 2 * v132);
            _CF = (v134 - 48) >= 0xA && (v134 | 0x20u) - 97 >= 6;
            if (_CF)
              goto LABEL_521;
            v265[v132] = v134;
            v132 = v133++;
          }
          while (v131 > v132);
        }
        v136 = &v265[v131];
        v265[v131] = 0;
        v137 = (v116 & 1) != 0 ? 16 : 10;
        v138 = v130 != v120 && v265[0] == 45;
        v139 = v138;
        v140 = v138 ? &v265[1] : v265;
        v141 = std::__from_chars_integral[abi:sn180100]<unsigned long long,0>(v140, v136, &v264, v137);
        if (v142 == 34)
        {
          *(double *)&v143 = 0.0;
          v144 = 34;
        }
        else if (v142 == 22)
        {
          *(double *)&v143 = 0.0;
          v141 = v265;
          v144 = 22;
        }
        else if (v139)
        {
          if ((unint64_t)v264 <= 0x8000000000000000)
            v143 = -v264;
          else
            *(double *)&v143 = 0.0;
          v144 = 34;
          if ((unint64_t)v264 <= 0x8000000000000000)
            v144 = v142;
        }
        else
        {
          v143 = v264 & ~(v264 >> 63);
          v144 = 34;
          if (v264 >= 0)
            v144 = v142;
        }
        if (v136 != v141)
        {
          __break(0xC471u);
          JUMPOUT(0x1824C33D0);
        }
        if (v144 == 34)
        {
LABEL_469:
          v108 = *(_QWORD *)(a1 + 18);
          v109 = *((_DWORD *)a1 + 11);
          v110 = *((_DWORD *)a1 + 8) - v109;
          v111 = HIDWORD(v108);
          v259 = 0;
          goto LABEL_419;
        }
        switch(v113)
        {
          case 'f':
            v217 = (float)v143;
            v218 = *(_QWORD *)(a1 + 18);
            v219 = *((_DWORD *)a1 + 11);
            v220 = *((_DWORD *)a1 + 8) - v219;
            v259 = 6;
            v260 = v218;
            v261 = v219;
            v262 = v220;
            v263 = v217;
            break;
          case 'h':
            v10 = *((_DWORD *)a1 + 8);
            if ((unint64_t)(v143 - 65505) < 0xFFFFFFFFFFFE003FLL)
              goto LABEL_55;
            _S0 = (float)v143;
            __asm
            {
              FCVT            H0, S0
              FCVT            D0, H0
            }
            v226 = *(_QWORD *)(a1 + 18);
            v227 = *((_DWORD *)a1 + 11);
            v259 = 7;
            v260 = v226;
            v261 = v227;
            v262 = v10 - v227;
            v263 = _D0;
            break;
          case 'i':
            v10 = *((_DWORD *)a1 + 8);
            if (v143 != (int)v143)
              goto LABEL_55;
            v228 = *(_QWORD *)(a1 + 18);
            v229 = *((_DWORD *)a1 + 11);
            v230 = v10 - v229;
            v231 = HIDWORD(v228);
            v232 = 4;
            goto LABEL_479;
          case 'u':
            v10 = *((_DWORD *)a1 + 8);
            if (HIDWORD(v143))
              goto LABEL_55;
            v228 = *(_QWORD *)(a1 + 18);
            v229 = *((_DWORD *)a1 + 11);
            v230 = v10 - v229;
            v231 = HIDWORD(v228);
            v232 = 5;
LABEL_479:
            v259 = v232;
            v260 = __PAIR64__(v231, v228);
            v261 = v229;
            v262 = v230;
            v263 = *(double *)&v143;
            break;
          default:
            v221 = *(_QWORD *)(a1 + 18);
            v222 = *((_DWORD *)a1 + 11);
            v223 = *((_DWORD *)a1 + 8) - v222;
            v259 = 3;
            v260 = v221;
            v261 = v222;
            v262 = v223;
            v263 = *(double *)&v143;
            break;
        }
LABEL_337:
        v145 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v145 == *(_DWORD *)(a2 + 8))
        {
          v146 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v145 + 1, (unint64_t)&v259);
          v147 = *(unsigned int *)(a2 + 12);
          LODWORD(v145) = *(_DWORD *)(a2 + 12);
          v148 = *(_QWORD *)a2;
          v149 = *(_QWORD *)a2 + 32 * v147;
          *(_DWORD *)v149 = *(_DWORD *)v146;
          *(_OWORD *)(v149 + 4) = *(_OWORD *)(v146 + 4);
          v150 = *(_DWORD *)v146;
          if (*(_DWORD *)v146 <= 8u)
          {
            if (((1 << v150) & 0x38) != 0)
            {
              *(_QWORD *)(v148 + 32 * v147 + 24) = *(_QWORD *)(v146 + 24);
              goto LABEL_356;
            }
            if (((1 << v150) & 0xC4) != 0)
            {
              v151 = *(double *)(v146 + 24);
              v152 = v148 + 32 * v147;
              goto LABEL_346;
            }
            if (v150 == 8)
            {
              v155 = v148 + 32 * v147;
              *(_QWORD *)(v155 + 24) = 0;
              v156 = (double *)(v155 + 24);
              v157 = *(double *)(v146 + 24);
              if (v157 == 0.0)
              {
LABEL_355:
                *v156 = v157;
                goto LABEL_356;
              }
LABEL_354:
              **(_DWORD **)&v157 += 2;
              goto LABEL_355;
            }
          }
LABEL_356:
          v154 = v259;
        }
        else
        {
          v148 = *(_QWORD *)a2;
          v153 = *(_QWORD *)a2 + 32 * v145;
          *(_DWORD *)v153 = v259;
          *(_OWORD *)(v153 + 4) = *(_OWORD *)v4;
          v154 = v259;
          if (v259 <= 8)
          {
            if (((1 << v259) & 0x38) != 0)
            {
              *(double *)(v148 + 32 * v145 + 24) = v263;
              goto LABEL_356;
            }
            if (((1 << v259) & 0xC4) != 0)
            {
              v151 = v263;
              v152 = v148 + 32 * v145;
LABEL_346:
              *(double *)(v152 + 24) = v151;
              goto LABEL_356;
            }
            if (v259 == 8)
            {
              v158 = v148 + 32 * v145;
              *(_QWORD *)(v158 + 24) = 0;
              v156 = (double *)(v158 + 24);
              v157 = v263;
              if (v263 == 0.0)
                goto LABEL_355;
              goto LABEL_354;
            }
          }
        }
        v159 = (v145 + 1);
        *(_DWORD *)(a2 + 12) = v159;
        if (v154 - 52 >= 2)
        {
          if (v154 != 54)
            goto LABEL_395;
          v170 = *(_QWORD *)(a1 + 18);
          v171 = *((_DWORD *)a1 + 11);
          v172 = *((_DWORD *)a1 + 8) - v171;
          *(_DWORD *)v265 = 82;
          *(_QWORD *)&v265[4] = v170;
          v266 = v171;
          v267 = v172;
          if ((_DWORD)v159 == *(_DWORD *)(a2 + 8))
          {
            v173 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v159 + 1, (unint64_t)v265);
            v174 = *(unsigned int *)(a2 + 12);
            v175 = *(_QWORD *)a2;
            v176 = *(_QWORD *)a2 + 32 * v174;
            *(_DWORD *)v176 = *(_DWORD *)v173;
            *(_OWORD *)(v176 + 4) = *(_OWORD *)(v173 + 4);
            v177 = *(_DWORD *)v173;
            if (*(_DWORD *)v173 > 8u)
              goto LABEL_409;
            if (((1 << v177) & 0x38) != 0)
            {
              *(_QWORD *)(v175 + 32 * v174 + 24) = *(_QWORD *)(v173 + 24);
              goto LABEL_409;
            }
            if (((1 << v177) & 0xC4) != 0)
            {
              v178 = *(_DWORD **)(v173 + 24);
              v179 = v175 + 32 * v174;
              goto LABEL_380;
            }
            if (v177 == 8)
            {
              v191 = v175 + 32 * v174;
              *(_QWORD *)(v191 + 24) = 0;
              v192 = (_QWORD *)(v191 + 24);
              v193 = *(_DWORD **)(v173 + 24);
              if (!v193)
              {
LABEL_408:
                *v192 = v193;
                goto LABEL_409;
              }
LABEL_407:
              *v193 += 2;
              goto LABEL_408;
            }
LABEL_409:
            v184 = *(_DWORD *)v265;
          }
          else
          {
            v183 = v148 + 32 * v159;
            *(_DWORD *)v183 = 82;
            *(_OWORD *)(v183 + 4) = *v6;
            v184 = *(_DWORD *)v265;
            if (*(_DWORD *)v265 <= 8u)
            {
              if (((1 << v265[0]) & 0x38) != 0)
              {
                *(_QWORD *)(v148 + 32 * v159 + 24) = v268;
                goto LABEL_409;
              }
              if (((1 << v265[0]) & 0xC4) != 0)
              {
                v178 = v268;
                v179 = v148 + 32 * v159;
LABEL_380:
                *(_QWORD *)(v179 + 24) = v178;
                goto LABEL_409;
              }
              if (*(_DWORD *)v265 == 8)
              {
                v194 = v148 + 32 * v159;
                *(_QWORD *)(v194 + 24) = 0;
                v192 = (_QWORD *)(v194 + 24);
                v193 = v268;
                if (!v268)
                  goto LABEL_408;
                goto LABEL_407;
              }
            }
          }
          LODWORD(v159) = *(_DWORD *)(a2 + 12) + 1;
          *(_DWORD *)(a2 + 12) = v159;
          if (v184 == 8)
          {
            v195 = v268;
            v268 = 0;
            if (v195)
            {
              if (*v195 == 2)
                WTF::StringImpl::destroy();
              else
                *v195 -= 2;
            }
          }
        }
        v160 = *(_QWORD *)(a1 + 18);
        v161 = *((_DWORD *)a1 + 11);
        v162 = *((_DWORD *)a1 + 8) - v161;
        *(_DWORD *)v265 = 82;
        *(_QWORD *)&v265[4] = v160;
        v266 = v161;
        v267 = v162;
        if ((_DWORD)v159 == *(_DWORD *)(a2 + 8))
        {
          v163 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v159 + 1, (unint64_t)v265);
          v164 = *(unsigned int *)(a2 + 12);
          LODWORD(v159) = *(_DWORD *)(a2 + 12);
          v165 = *(_QWORD *)a2;
          v166 = *(_QWORD *)a2 + 32 * v164;
          *(_DWORD *)v166 = *(_DWORD *)v163;
          *(_OWORD *)(v166 + 4) = *(_OWORD *)(v163 + 4);
          v167 = *(_DWORD *)v163;
          if (*(_DWORD *)v163 <= 8u)
          {
            if (((1 << v167) & 0x38) != 0)
            {
              *(_QWORD *)(v165 + 32 * v164 + 24) = *(_QWORD *)(v163 + 24);
              goto LABEL_388;
            }
            if (((1 << v167) & 0xC4) != 0)
            {
              v168 = *(_DWORD **)(v163 + 24);
              v169 = v165 + 32 * v164;
              goto LABEL_373;
            }
            if (v167 == 8)
            {
              v185 = v165 + 32 * v164;
              *(_QWORD *)(v185 + 24) = 0;
              v186 = (_QWORD *)(v185 + 24);
              v187 = *(_DWORD **)(v163 + 24);
              if (!v187)
              {
LABEL_387:
                *v186 = v187;
                goto LABEL_388;
              }
LABEL_386:
              *v187 += 2;
              goto LABEL_387;
            }
          }
LABEL_388:
          v182 = *(_DWORD *)v265;
        }
        else
        {
          v180 = *(_QWORD *)a2;
          v181 = *(_QWORD *)a2 + 32 * v159;
          *(_DWORD *)v181 = 82;
          *(_OWORD *)(v181 + 4) = *v6;
          v182 = *(_DWORD *)v265;
          if (*(_DWORD *)v265 <= 8u)
          {
            if (((1 << v265[0]) & 0x38) != 0)
            {
              *(_QWORD *)(v180 + 32 * v159 + 24) = v268;
              goto LABEL_388;
            }
            if (((1 << v265[0]) & 0xC4) != 0)
            {
              v168 = v268;
              v169 = v180 + 32 * v159;
LABEL_373:
              *(_QWORD *)(v169 + 24) = v168;
              goto LABEL_388;
            }
            if (*(_DWORD *)v265 == 8)
            {
              v188 = v180 + 32 * v159;
              *(_QWORD *)(v188 + 24) = 0;
              v186 = (_QWORD *)(v188 + 24);
              v187 = v268;
              if (!v268)
                goto LABEL_387;
              goto LABEL_386;
            }
          }
        }
        *(_DWORD *)(a2 + 12) = v159 + 1;
        if (v182 == 8)
        {
          v189 = v268;
          v268 = 0;
          if (v189)
          {
            if (*v189 == 2)
              WTF::StringImpl::destroy();
            else
              *v189 -= 2;
          }
        }
        v154 = v259;
LABEL_395:
        if (v154 == 8)
        {
          v190 = v263;
          v263 = 0.0;
          if (v190 != 0.0)
          {
            if (**(_DWORD **)&v190 == 2)
              WTF::StringImpl::destroy();
            else
              **(_DWORD **)&v190 -= 2;
          }
        }
        if (v154 > 1)
          goto LABEL_4;
        return;
      case 5:
        if (!v114)
          v114 = v15;
        v118 = 6;
        switch(v9)
        {
          case 'E':
          case 'e':
            goto LABEL_254;
          case 'f':
          case 'h':
            goto LABEL_249;
          default:
            if ((unsigned __int16)(v9 - 48) < 0xAu)
              goto LABEL_196;
            goto LABEL_265;
        }
      case 6:
        if (v9 == 45 || v9 == 43)
        {
          v117 = v9;
          v118 = 7;
        }
        else
        {
          if ((unsigned __int16)(v9 - 48) >= 0xAu)
            goto LABEL_469;
          v118 = 8;
        }
        goto LABEL_253;
      case 7:
        if (v117 == 43)
          v115 = v15;
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
          goto LABEL_469;
        goto LABEL_207;
      case 8:
        if (v9 == 104 || v9 == 102)
          goto LABEL_249;
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
          goto LABEL_265;
LABEL_207:
        v118 = 8;
        goto LABEL_254;
      case 9:
        if (v9 == 46)
        {
          v118 = 11;
          v116 = 1;
          v120 = v15;
        }
        else
        {
          v118 = 10;
          v116 = 1;
          if ((unsigned __int16)(v9 - 48) < 0xAu)
          {
            v120 = v15;
          }
          else
          {
            v120 = v15;
            if ((unsigned __int16)((v9 | 0x20) - 97) >= 6u)
              goto LABEL_469;
          }
        }
        goto LABEL_254;
      case 10:
        v118 = 16;
        switch(v9)
        {
          case 'P':
          case 'p':
            goto LABEL_254;
          case 'i':
          case 'u':
            goto LABEL_249;
          default:
            v118 = 10;
            if ((unsigned __int16)(v9 - 48) >= 0xAu && (unsigned __int16)((v9 | 0x20) - 97) >= 6u)
              goto LABEL_265;
            goto LABEL_254;
        }
      case 11:
        v118 = 12;
        if ((unsigned __int16)(v9 - 48) < 0xAu)
        {
          v114 = v15;
        }
        else
        {
          v114 = v15;
          if ((unsigned __int16)((v9 | 0x20) - 97) >= 6u)
            goto LABEL_469;
        }
        goto LABEL_254;
      case 12:
        if (!v114)
          v114 = v15;
        v118 = 12;
        if ((unsigned __int16)(v9 - 48) < 0xAu || (unsigned __int16)((v9 | 0x20) - 97) < 6u)
          goto LABEL_254;
        if ((v9 | 0x20) != 0x70)
          goto LABEL_265;
        v118 = 13;
        goto LABEL_254;
      case 13:
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
        {
          if (v9 != 45 && v9 != 43)
            goto LABEL_469;
          v117 = v9;
          v118 = 14;
        }
        else
        {
          v118 = 15;
        }
        goto LABEL_253;
      case 14:
        if (v117 == 43)
          v115 = v15;
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
          goto LABEL_469;
        goto LABEL_237;
      case 15:
        if ((unsigned __int16)(v9 - 48) < 0xAu)
          goto LABEL_237;
        if (v9 != 104 && v9 != 102)
          goto LABEL_265;
        goto LABEL_249;
      case 16:
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
        {
          if (v9 != 45 && v9 != 43)
            goto LABEL_469;
          v117 = v9;
          v118 = 17;
        }
        else
        {
          v118 = 18;
        }
LABEL_253:
        v115 = v15;
        goto LABEL_254;
      case 17:
        if (v117 == 43)
          v115 = v15;
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
          goto LABEL_469;
        v118 = 18;
        goto LABEL_254;
      case 18:
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
        {
          if (v9 != 104 && v9 != 102)
            goto LABEL_469;
LABEL_249:
          v118 = 19;
          v113 = v9;
        }
        else
        {
LABEL_237:
          v118 = 15;
        }
        goto LABEL_254;
      default:
        goto LABEL_254;
    }
  }
}

char *std::__from_chars_integral[abi:sn180100]<unsigned long long,0>(char *result, char *a2, _QWORD *a3, unsigned int a4)
{
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  unsigned int v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  float v21;
  int v22;
  int v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v32;
  char *v33;
  uint64_t v34;
  int v35;
  BOOL v37;
  BOOL v38;
  int v39;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD v50[19];
  unint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a4 != 10)
  {
    if (result == a2)
      goto LABEL_43;
    v4 = result;
    while (*v4 == 48)
    {
      if (++v4 == a2)
      {
        v4 = a2;
        break;
      }
    }
    if (v4 == a2)
      goto LABEL_43;
    v14 = *v4;
    v15 = *v4;
    if ((v14 - 48) < 0xA)
    {
      v16 = std::__from_chars_log2f_lut[a4 - 2];
      v17 = (int)(v15 - 48);
      if (v4 + 1 != a2)
        goto LABEL_25;
LABEL_98:
      v27 = 0;
LABEL_99:
      v28 = v17 + v27;
      v4 = a2;
      goto LABEL_46;
    }
    v29 = a4 + 87;
    if ((v14 < 97 || v29 <= v14) && ((char)v15 < 65 || (int)(a4 + 55) <= v14))
      goto LABEL_44;
    v16 = std::__from_chars_log2f_lut[a4 - 2];
    if (v15 < 0x61 || v29 <= (int)v15)
    {
      v17 = (int)(v15 - 55);
      if (v4 + 1 == a2)
        goto LABEL_98;
    }
    else
    {
      v17 = (int)(v15 - 87);
      if (v4 + 1 == a2)
        goto LABEL_98;
    }
LABEL_25:
    v18 = 0;
    v19 = a4 + 87;
    v20 = a4 + 55;
    v21 = (float)(64.0 / v16) + -1.0;
    while (1)
    {
      v22 = v4[v18 + 1];
      v23 = v22 - 48;
      if ((v22 - 48) > 9)
      {
        if ((char)v22 < 97 || v19 <= (char)v22)
        {
          if ((char)v22 < 65 || v20 <= (char)v22)
          {
            v27 = 0;
            result = &v4[v18 + 1];
            if (result == a2)
              goto LABEL_40;
            goto LABEL_67;
          }
          v23 = (char)v22 - 55;
        }
        else
        {
          v23 = (char)v22 - 87;
        }
      }
      v26 = v17 * a4;
      if (v21 <= (float)(v18 + 1))
        break;
      v17 = v26 + v23;
      if (&v4[++v18 + 1] == a2)
      {
        v27 = 0;
        goto LABEL_40;
      }
    }
    v32 = (v17 * (unsigned __int128)a4) >> 64 == 0;
    v33 = &v4[v18];
    v34 = (uint64_t)&v4[v18 + 2];
    if (v32)
      result = (char *)v34;
    else
      result = v33 + 1;
    v27 = v23;
    v17 = v26;
    if (result == a2)
    {
LABEL_40:
      if (__CFADD__(v17, v27))
        return a2;
      goto LABEL_99;
    }
LABEL_67:
    v35 = *result;
    if ((v35 - 48) >= 0xA && (v35 < 97 || v19 <= v35))
    {
      v37 = __CFADD__(v17, v27);
      v38 = v20 <= v35 || v35 <= 64;
      if (v38 && !v37)
      {
        a2 = result;
        goto LABEL_99;
      }
    }
    while (1)
    {
      v39 = *result;
      if ((v39 - 48) >= 0xA && (v39 < 97 || v19 <= v39) && (v39 < 65 || v20 <= v39))
        break;
      if (++result == a2)
        return a2;
    }
    return result;
  }
  if (result == a2)
  {
LABEL_43:
    v4 = a2;
    goto LABEL_44;
  }
  v4 = result;
  while (*v4 == 48)
  {
    if (++v4 == a2)
    {
      v4 = a2;
      break;
    }
  }
  if (v4 == a2)
  {
    v4 = a2;
    if (a2 == result)
      return result;
LABEL_45:
    v28 = 0;
LABEL_46:
    *a3 = v28;
    return v4;
  }
  if (*v4 - 48 >= 0xA)
  {
LABEL_44:
    if (v4 == result)
      return result;
    goto LABEL_45;
  }
  v5 = 19;
  do
  {
    v6 = *v4;
    if ((v6 - 58) < 0xFFFFFFF6)
      break;
    ++v4;
    v50[v5] = (v6 - 48);
    if (v5-- == 0)
      break;
  }
  while (v4 != a2);
  v8 = v5 + 1;
  v9 = (v5 + 1) << 32;
  v10 = *(_QWORD *)((char *)v50 + (v9 >> 29));
  if ((int)v8 > 17)
    goto LABEL_104;
  v11 = (int)v8;
  v12 = 18 - v8;
  if ((unint64_t)(18 - v8) >= 2)
  {
    v42 = 0;
    v13 = (uint64_t *)((char *)&std::__itoa::__pow10_64 + 8 * (v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v11 = (int)v8 + (v12 & 0xFFFFFFFFFFFFFFFELL);
    v43 = &v50[v8 + 2];
    v44 = &unk_18260F980;
    v45 = v12 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v10 += *(v44 - 1) * *(v43 - 1);
      v42 += *v44 * *v43;
      v43 += 2;
      v44 += 2;
      v45 -= 2;
    }
    while (v45);
    v10 += v42;
    if (v12 == (v12 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_104;
  }
  else
  {
    v13 = &qword_18260F978;
  }
  do
  {
    v46 = *v13++;
    v10 += v46 * v50[++v11];
  }
  while (v11 != 18);
LABEL_104:
  v47 = *(_QWORD *)((char *)&std::__itoa::__pow10_64 + ((0x1300000000 - v9) >> 29));
  v48 = v51 * v47;
  v4 -= (v51 * (unsigned __int128)v47) >> 64 != 0;
  if (v4 != a2)
  {
    v49 = __CFADD__(v10, v48);
    if (*v4 - 48 < 0xA || v49)
    {
      while (*v4 - 48 <= 9)
      {
        if (++v4 == a2)
          return a2;
      }
      return v4;
    }
    goto LABEL_116;
  }
  if (!__CFADD__(v10, v48))
  {
LABEL_116:
    v28 = v48 + v10;
    goto LABEL_46;
  }
  return a2;
}

unint64_t WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD **v9;
  unsigned int v10;
  _DWORD *v11;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)(result + 24);
        v8 = 32 * v5;
        v9 = (_DWORD **)((char *)v4 + 24);
        while (1)
        {
          *((_DWORD *)v7 - 6) = *((_DWORD *)v9 - 6);
          *(_OWORD *)((char *)v7 - 20) = *(_OWORD *)((char *)v9 - 20);
          v10 = *((_DWORD *)v9 - 6);
          if (v10 > 8)
            goto LABEL_17;
          if (((1 << v10) & 0x38) != 0)
            break;
          if (((1 << v10) & 0xC4) == 0)
          {
            if (v10 != 8)
              goto LABEL_17;
            *v7 = 0;
            v11 = *v9;
            if (*v9)
              *v11 += 2;
            goto LABEL_15;
          }
          *v7 = *v9;
LABEL_16:
          v10 = *((_DWORD *)v9 - 6);
LABEL_17:
          if (v10 == 8)
          {
            result = (uint64_t)*v9;
            *v9 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy();
              else
                *(_DWORD *)result -= 2;
            }
          }
          v7 += 4;
          v9 += 4;
          v8 -= 32;
          if (!v8)
            goto LABEL_21;
        }
        v11 = *v9;
LABEL_15:
        *v7 = v11;
        goto LABEL_16;
      }
LABEL_21:
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

BOOL WTF::operator==(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int v5;
  _BOOL8 result;
  unsigned int v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int v10;
  int v11;
  BOOL v12;
  int16x8_t *v13;
  unsigned int v14;
  uint8x8_t *v15;
  uint16x8_t v16;
  unsigned int v17;
  uint16x8_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int32 v26;
  uint64_t v27;
  int v28;
  int v29;
  uint8x16_t v30;
  uint8x16_t v31;
  unsigned int v32;
  uint8x16_t v33;
  BOOL v34;

  v5 = a4 - 1;
  if (!a4)
    v5 = 0;
  result = (_DWORD)a2 == v5 && a1 == a3;
  if (a1 == a3 || (_DWORD)a2 != v5)
    return result;
  if (!(_DWORD)a2)
    return 1;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (!v5)
      goto LABEL_61;
    if (*(_WORD *)a1 != *a3)
      return 0;
    v13 = (int16x8_t *)(a1 + 2);
    v14 = v5 - 1;
    v15 = (uint8x8_t *)(a3 + 1);
    if (v14 >= 8)
    {
      v16 = (uint16x8_t)vceqq_s16(*v13, (int16x8_t)vmovl_u8(*v15));
      v16.i16[0] = vminvq_u16(v16);
      if (v16.i32[0])
      {
        v17 = v14 & 7;
        do
        {
          v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v13 + 2 * v17), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v15 + v17)));
          v18.i16[0] = vminvq_u16(v18);
          result = v18.i32[0] != 0;
          v17 += 8;
          if (v18.i32[0])
            v19 = v17 >= v14;
          else
            v19 = 1;
        }
        while (!v19);
        return result;
      }
      return 0;
    }
    if (v14 >= 4)
    {
      v20 = (v15->u32[0] | ((unint64_t)v15->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v12 = ((v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL) == v13->i64[0];
      v21 = v14 & 3;
      v22 = (*(unsigned int *)((char *)v15->u32 + v21) | ((unint64_t)*(unsigned int *)((char *)v15->u32 + v21) << 16)) & 0xFFFF0000FFFFLL;
      v23 = (v22 | (v22 << 8)) & 0xFF00FF00FF00FFLL;
      v24 = *(uint64_t *)((char *)v13->i64 + 2 * v21);
      return v12 && v23 == v24;
    }
    if (v14 >= 2)
    {
      v25 = (v15->u16[0] | (v15->u16[0] << 8)) & 0xFF00FF;
      v26 = v13->i32[0];
      v27 = v14 & 1;
      v28 = (*(unsigned __int16 *)((char *)v15->u16 + v27) | (*(unsigned __int16 *)((char *)v15->u16 + v27) << 8)) & 0xFF00FF;
      v29 = *(__int32 *)((char *)v13->i32 + 2 * v27);
      return v25 == v26 && v28 == v29;
    }
    if (v14 == 1)
    {
      v11 = v15->u8[0];
      v10 = v13->u16[0];
      return v10 == v11;
    }
    return 1;
  }
  if (!v5)
  {
LABEL_61:
    __break(1u);
    return result;
  }
  if (*a1 != *a3)
    return 0;
  v7 = v5 - 1;
  if (v5 == 1)
    return 1;
  v8 = (int8x16_t *)(a1 + 1);
  v9 = (int8x16_t *)(a3 + 1);
  if (v5 == 2)
  {
    v10 = v8->u8[0];
    v11 = v9->u8[0];
    return v10 == v11;
  }
  switch(31 - __clz(v5 - 2))
  {
    case 0u:
      v10 = v8->u16[0];
      v11 = v9->u16[0];
      return v10 == v11;
    case 1u:
      if (v8->u16[0] != v9->u16[0])
        return 0;
      v10 = *(unsigned __int16 *)&a1[v5 - 2];
      v11 = *(unsigned __int16 *)&a3[v5 - 2];
      return v10 == v11;
    case 2u:
      if (v8->i32[0] != v9->i32[0])
        return 0;
      v10 = *(_DWORD *)&a1[v5 - 4];
      v11 = *(_DWORD *)&a3[v5 - 4];
      return v10 == v11;
    case 3u:
      if (v8->i64[0] != v9->i64[0])
        return 0;
      return *(_QWORD *)&a1[v5 - 8] == *(_QWORD *)&a3[v5 - 8];
    case 4u:
      v31 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[v5 - 16], *(int8x16_t *)&a3[v5 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
      v31.i8[0] = vminvq_u8(v31);
      return v31.i32[0] != 0;
    default:
      v30 = (uint8x16_t)vceqq_s8(*v8, *v9);
      v30.i8[0] = vminvq_u8(v30);
      if (!v30.i32[0])
        return 0;
      if (v7 < 0x10)
        return 1;
      v32 = v7 & 0xF;
      do
      {
        v33 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v8 + v32), *(int8x16_t *)((char *)v9 + v32));
        v33.i8[0] = vminvq_u8(v33);
        result = v33.i32[0] != 0;
        v32 += 16;
        if (v33.i32[0])
          v34 = v32 >= v7;
        else
          v34 = 1;
      }
      while (!v34);
      break;
  }
  return result;
}

void WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, WGSL::AST::Function *a2)
{
  char *v4;
  _DWORD *v5;

  v4 = (char *)a2 + 24;
  v5 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v5)
  {
    *v5 += 2;
    WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)v4, (const WTF::StringImpl *)4);
    WGSL::AST::ScopedVisitor<WGSL::MangledName>::visit((uint64_t)this, (Function *)a2);
    if (*v5 == 2)
      WTF::StringImpl::destroy();
    else
      *v5 -= 2;
  }
  else
  {
    WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)v4, (const WTF::StringImpl *)4);
    WGSL::AST::ScopedVisitor<WGSL::MangledName>::visit((uint64_t)this, (Function *)a2);
  }
}

_DWORD *WGSL::NameManglerVisitor::introduceVariable(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *result;
  uint64_t v36;
  _DWORD *v38;
  _QWORD v39[3];
  _DWORD *v40;

  v4 = a1 + 4 * a3;
  v5 = *(unsigned int *)(v4 + 96);
  *(_DWORD *)(v4 + 96) = v5 + 1;
  v6 = *(_DWORD **)(a2 + 24);
  if (v6)
    *v6 += 2;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(v8 + 8);
  v9 = (uint64_t *)(v8 + 8);
  v10 = v11;
  if (!v11)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v9, 8u, 0);
    v10 = *v9;
    if (!*v9)
    {
      v12 = 0;
      v13 = *(WTF::StringImpl **)(a2 + 24);
      v14 = *((_DWORD *)v13 + 4);
      if (v14 >= 0x100)
        goto LABEL_6;
LABEL_8:
      v15 = WTF::StringImpl::hashSlowCase(v13);
      goto LABEL_9;
    }
  }
  v12 = *(_DWORD *)(v10 - 8);
  v13 = *(WTF::StringImpl **)(a2 + 24);
  v14 = *((_DWORD *)v13 + 4);
  if (v14 < 0x100)
    goto LABEL_8;
LABEL_6:
  v15 = v14 >> 8;
LABEL_9:
  v16 = 0;
  v17 = 1;
  v36 = v7 | (v5 << 32);
  while (1)
  {
    v18 = v15 & v12;
    v19 = v10 + 24 * (v15 & v12);
    v20 = *(WTF **)v19;
    if (*(_QWORD *)v19 == -1)
    {
      v16 = (_QWORD *)(v10 + 24 * v18);
      goto LABEL_11;
    }
    if (!v20)
      break;
    if ((WTF::equal(v20, *(const WTF::StringImpl **)(a2 + 24), a3) & 1) != 0)
    {
      v21 = 0;
      v22 = a1;
      goto LABEL_38;
    }
LABEL_11:
    v15 = v17 + v18;
    ++v17;
  }
  if (v16)
  {
    *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    --*(_DWORD *)(*v9 - 16);
    v19 = (uint64_t)v16;
  }
  v23 = *(_DWORD **)(a2 + 24);
  v22 = a1;
  if (v23)
    *v23 += 2;
  *(_QWORD *)v19 = v23;
  *(_QWORD *)(v19 + 8) = v36;
  if (v6)
    *v6 += 2;
  v24 = *(_DWORD **)(v19 + 16);
  *(_QWORD *)(v19 + 16) = v6;
  if (!v24)
  {
LABEL_25:
    v25 = *v9;
    if (!*v9)
      goto LABEL_32;
LABEL_26:
    ++*(_DWORD *)(v25 - 12);
    v26 = *v9;
    if (!*v9)
      goto LABEL_33;
LABEL_27:
    v27 = (*(_DWORD *)(v26 - 16) + *(_DWORD *)(v26 - 12));
    v28 = *(unsigned int *)(v26 - 4);
    if (v28 > 0x400)
      goto LABEL_34;
    goto LABEL_28;
  }
  if (*v24 != 2)
  {
    *v24 -= 2;
    goto LABEL_25;
  }
  WTF::StringImpl::destroy();
  v25 = *v9;
  if (*v9)
    goto LABEL_26;
LABEL_32:
  *(_DWORD *)(v25 - 12) = 1;
  v26 = *v9;
  if (*v9)
    goto LABEL_27;
LABEL_33:
  v27 = *(unsigned int *)(v26 - 16);
  v28 = *(unsigned int *)(v26 - 4);
  if (v28 > 0x400)
  {
LABEL_34:
    if (v28 <= 2 * v27)
    {
LABEL_35:
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v28));
      goto LABEL_36;
    }
    goto LABEL_37;
  }
LABEL_28:
  if (3 * v28 <= 4 * v27)
  {
    if ((_DWORD)v28)
      goto LABEL_35;
    v29 = 8;
LABEL_36:
    v19 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v9, v29, (WTF::StringImpl **)v19);
  }
LABEL_37:
  v21 = v19 + 8;
LABEL_38:
  if (v6)
  {
    if (*v6 == 2)
      WTF::StringImpl::destroy();
    else
      *v6 -= 2;
  }
  v30 = *(_QWORD *)(v22 + 80);
  v31 = *(_QWORD *)(a2 + 8);
  v32 = *(_QWORD *)(a2 + 16);
  WGSL::MangledName::toString((WGSL::MangledName *)&v38, *(_BYTE *)v21, (WTF::String *)*(unsigned int *)(v21 + 4));
  v39[0] = &off_1E0FD2F10;
  v39[1] = v31;
  v33 = v38;
  v38 = 0;
  v39[2] = v32;
  v40 = v33;
  WGSL::ShaderModule::replace<WGSL::AST::Identifier>(v30, a2, (uint64_t)v39);
  v34 = v40;
  v39[0] = &off_1E0FD2F10;
  v40 = 0;
  if (v34)
  {
    if (*v34 != 2)
    {
      *v34 -= 2;
      goto LABEL_45;
    }
    WTF::StringImpl::destroy();
    result = v38;
    v38 = 0;
    if (result)
    {
LABEL_48:
      if (*result == 2)
        return (_DWORD *)WTF::StringImpl::destroy();
      else
        *result -= 2;
    }
  }
  else
  {
LABEL_45:
    result = v38;
    v38 = 0;
    if (result)
      goto LABEL_48;
  }
  return result;
}

void WGSL::AST::ScopedVisitor<WGSL::MangledName>::visit(uint64_t a1, Function *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (uint64_t *)(a1 + 48);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = 0;
  v19 = v6;
  v7 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 56))
  {
    v8 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v7 + 1, (unint64_t)&v19);
    v9 = *(unsigned int *)(a1 + 60);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *v8;
    *v8 = 0;
    *(_QWORD *)(v10 + 8 * v9) = v11;
    v12 = v9 + 1;
    *(_DWORD *)(a1 + 60) = v12;
    v13 = v19;
    v19 = 0;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = *v5;
  v19 = 0;
  *(_QWORD *)(v14 + 8 * v7) = v6;
  v12 = v7 + 1;
  *(_DWORD *)(a1 + 60) = v12;
  v13 = v19;
  v19 = 0;
  if (v13)
  {
LABEL_5:
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)&v19, v13);
    v12 = *(_DWORD *)(a1 + 60);
  }
LABEL_6:
  if (!v12
    || (*(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12 - 8),
        WGSL::AST::Visitor::visit((_BYTE *)a1, a2),
        *(_QWORD *)(a1 + 40) = v4,
        v15 = *(unsigned int *)(a1 + 60),
        !(_DWORD)v15))
  {
    __break(0xC471u);
    JUMPOUT(0x1824C4704);
  }
  v16 = v15 - 1;
  v17 = (_QWORD *)(*v5 + 8 * (v15 - 1));
  v18 = (_QWORD *)*v17;
  *v17 = 0;
  if (v18)
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v17, v18);
  *(_DWORD *)(a1 + 60) = v16;
}

_DWORD *WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, WGSL::AST::Parameter *a2)
{
  WGSL::AST::Visitor::visit(this, *((_QWORD *)a2 + 8));
  return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)a2 + 32, (const WTF::StringImpl *)3);
}

void WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, uint64_t **a2)
{
  WGSL::NameManglerVisitor *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF::String *v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  WTF **v16;
  int i;
  unsigned int v18;
  WTF **v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  WGSL::AST::Structure **v43;
  WGSL::AST::Structure *v44;
  WGSL::AST::Structure **v45;
  int v46;
  WGSL::AST::Structure *v47;
  uint64_t v48;
  WGSL::AST::Structure *v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD *v60;
  WGSL::AST::Structure *v61;
  uint64_t *v62;
  uint64_t *v63;
  WTF::String *v64;
  uint64_t v65;
  _DWORD *v66;
  _QWORD v67[3];
  _DWORD *v68;
  WGSL::AST::Structure *v69;

  v3 = this;
  WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)(a2 + 3), 0);
  v69 = 0;
  v61 = (WGSL::AST::Structure *)a2;
  v5 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v5)
  {
    v6 = a2[9];
    v62 = &v6[v5];
    v63 = (uint64_t *)v3;
    do
    {
      v7 = *v6;
      WGSL::AST::Visitor::visit(v3, *(_QWORD *)(*v6 + 104));
      v9 = (WTF::String *)*((unsigned int *)v3 + 29);
      *((_DWORD *)v3 + 29) = (_DWORD)v9 + 1;
      v10 = *(WTF **)(v7 + 48);
      if (v10)
        *(_DWORD *)v10 += 2;
      v11 = (uint64_t)v69;
      if (v69
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v69, 8u, 0), (v11 = (uint64_t)v69) != 0))
      {
        v12 = *(_DWORD *)(v11 - 8);
        v13 = *(WTF::StringImpl **)(v7 + 48);
        v14 = *((_DWORD *)v13 + 4);
        if (v14 < 0x100)
          goto LABEL_12;
      }
      else
      {
        v12 = 0;
        v13 = *(WTF::StringImpl **)(v7 + 48);
        v14 = *((_DWORD *)v13 + 4);
        if (v14 < 0x100)
        {
LABEL_12:
          v15 = WTF::StringImpl::hashSlowCase(v13);
          goto LABEL_13;
        }
      }
      v15 = v14 >> 8;
LABEL_13:
      v16 = 0;
      v64 = v9;
      v65 = v65 & 0xFFFFFF00 | ((_QWORD)v9 << 32) | 5;
      for (i = 1; ; ++i)
      {
        v18 = v15 & v12;
        v19 = (WTF **)(v11 + 24 * (v15 & v12));
        v20 = *v19;
        if (*v19 == (WTF *)-1)
        {
          v16 = (WTF **)(v11 + 24 * v18);
          goto LABEL_15;
        }
        if (!v20)
          break;
        if ((WTF::equal(v20, *(const WTF::StringImpl **)(v7 + 48), v8) & 1) != 0)
          goto LABEL_39;
LABEL_15:
        v15 = i + v18;
      }
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        --*(_DWORD *)(v11 - 16);
        v19 = v16;
      }
      v21 = *(WTF **)(v7 + 48);
      if (v21)
        *(_DWORD *)v21 += 2;
      *v19 = v21;
      v19[1] = (WTF *)v65;
      if (v10)
        *(_DWORD *)v10 += 2;
      v22 = v19[2];
      v19[2] = v10;
      if (!v22)
      {
LABEL_29:
        v23 = (uint64_t)v69;
        if (!v69)
          goto LABEL_35;
LABEL_30:
        v24 = *(_DWORD *)(v23 - 16);
        v25 = *(_DWORD *)(v23 - 12) + 1;
        *(_DWORD *)(v23 - 12) = v25;
        v26 = (v24 + v25);
        v27 = *(unsigned int *)(v23 - 4);
        if (v27 > 0x400)
          goto LABEL_36;
        goto LABEL_31;
      }
      if (*(_DWORD *)v22 != 2)
      {
        *(_DWORD *)v22 -= 2;
        goto LABEL_29;
      }
      WTF::StringImpl::destroy();
      v23 = (uint64_t)v69;
      if (v69)
        goto LABEL_30;
LABEL_35:
      v25 = 1;
      *(_DWORD *)(v23 - 12) = 1;
      v26 = (*(_DWORD *)(v23 - 16) + 1);
      v27 = *(unsigned int *)(v23 - 4);
      if (v27 > 0x400)
      {
LABEL_36:
        if (v27 <= 2 * v26)
        {
LABEL_37:
          v28 = (_DWORD)v27 << (6 * v25 >= (2 * v27));
          goto LABEL_38;
        }
        goto LABEL_39;
      }
LABEL_31:
      if (3 * v27 <= 4 * v26)
      {
        if ((_DWORD)v27)
          goto LABEL_37;
        v28 = 8;
LABEL_38:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v69, v28, v19);
      }
LABEL_39:
      v3 = (WGSL::NameManglerVisitor *)v63;
      v29 = v63[10];
      v30 = *(_QWORD *)(v7 + 32);
      v31 = *(_QWORD *)(v7 + 40);
      WGSL::MangledName::toString((WGSL::MangledName *)&v66, 5u, v64);
      v67[1] = v30;
      v67[2] = v31;
      v32 = v66;
      v66 = 0;
      v67[0] = &off_1E0FD2F10;
      v68 = v32;
      WGSL::ShaderModule::replace<WGSL::AST::Identifier>(v29, v7 + 24, (uint64_t)v67);
      v33 = v68;
      v67[0] = &off_1E0FD2F10;
      v68 = 0;
      if (!v33)
      {
LABEL_42:
        v34 = v66;
        v66 = 0;
        if (v34)
          goto LABEL_45;
LABEL_47:
        if (v10)
          goto LABEL_50;
        goto LABEL_4;
      }
      if (*v33 != 2)
      {
        *v33 -= 2;
        goto LABEL_42;
      }
      WTF::StringImpl::destroy();
      v34 = v66;
      v66 = 0;
      if (!v34)
        goto LABEL_47;
LABEL_45:
      if (*v34 != 2)
      {
        *v34 -= 2;
        goto LABEL_47;
      }
      WTF::StringImpl::destroy();
      if (v10)
      {
LABEL_50:
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v10 -= 2;
      }
LABEL_4:
      ++v6;
    }
    while (v6 != v62);
  }
  v37 = *((_QWORD *)v3 + 11);
  v36 = (uint64_t *)((char *)v3 + 88);
  v35 = v37;
  if (v37
    || (WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::rehash(v36, 8u), (v35 = *v36) != 0))
  {
    v38 = *(_DWORD *)(v35 - 8);
  }
  else
  {
    v38 = 0;
  }
  v39 = ((unint64_t)v61 + ~((_QWORD)v61 << 32)) ^ (((unint64_t)v61 + ~((_QWORD)v61 << 32)) >> 22);
  v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
  v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
  v42 = v38 & ((v41 >> 31) ^ v41);
  v43 = (WGSL::AST::Structure **)(v35 + 16 * v42);
  v44 = *v43;
  if (!*v43)
  {
LABEL_63:
    *v43 = v61;
    v47 = v43[1];
    v43[1] = v69;
    if (v47)
    {
      v48 = *((unsigned int *)v47 - 1);
      if ((_DWORD)v48)
      {
        v49 = v47;
        while (1)
        {
          v50 = *(_DWORD **)v49;
          if (*(_QWORD *)v49 == -1)
            goto LABEL_67;
          v51 = (_DWORD *)*((_QWORD *)v49 + 2);
          *((_QWORD *)v49 + 2) = 0;
          if (!v51)
            goto LABEL_72;
          if (*v51 != 2)
            break;
          WTF::StringImpl::destroy();
          v50 = *(_DWORD **)v49;
          *(_QWORD *)v49 = 0;
          if (v50)
          {
LABEL_75:
            if (*v50 == 2)
              WTF::StringImpl::destroy();
            else
              *v50 -= 2;
          }
LABEL_67:
          v49 = (WGSL::AST::Structure *)((char *)v49 + 24);
          if (!--v48)
            goto LABEL_77;
        }
        *v51 -= 2;
LABEL_72:
        *(_QWORD *)v49 = 0;
        if (v50)
          goto LABEL_75;
        goto LABEL_67;
      }
LABEL_77:
      WTF::fastFree((WGSL::AST::Structure *)((char *)v47 - 16), v4);
    }
    if (*v36)
    {
      ++*(_DWORD *)(*v36 - 12);
      v52 = *v36;
      if (*v36)
        goto LABEL_80;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v52 = *v36;
      if (*v36)
      {
LABEL_80:
        v53 = (*(_DWORD *)(v52 - 16) + *(_DWORD *)(v52 - 12));
        v54 = *(unsigned int *)(v52 - 4);
        if (v54 <= 0x400)
          goto LABEL_81;
        goto LABEL_100;
      }
    }
    v53 = *(unsigned int *)(v52 - 16);
    v54 = *(unsigned int *)(v52 - 4);
    if (v54 <= 0x400)
    {
LABEL_81:
      if (3 * v54 > 4 * v53)
        return;
      if (!(_DWORD)v54)
      {
        v55 = 8;
LABEL_102:
        WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::rehash(v36, v55);
        return;
      }
LABEL_101:
      v55 = (_DWORD)v54 << (6 * *(_DWORD *)(v52 - 12) >= (2 * v54));
      goto LABEL_102;
    }
LABEL_100:
    if (v54 > 2 * v53)
      return;
    goto LABEL_101;
  }
  v45 = 0;
  v46 = 1;
  while (v44 != v61)
  {
    if (v44 == (WGSL::AST::Structure *)-1)
      v45 = v43;
    v42 = (v42 + v46) & v38;
    v43 = (WGSL::AST::Structure **)(v35 + 16 * v42);
    v44 = *v43;
    ++v46;
    if (!*v43)
    {
      if (v45)
      {
        *v45 = 0;
        v45[1] = 0;
        --*(_DWORD *)(*v36 - 16);
        v43 = v45;
      }
      goto LABEL_63;
    }
  }
  v56 = (uint64_t)v69;
  if (v69)
  {
    v57 = *((unsigned int *)v69 - 1);
    if ((_DWORD)v57)
    {
      v58 = (uint64_t)v69;
      while (1)
      {
        v59 = *(_DWORD **)v58;
        if (*(_QWORD *)v58 == -1)
          goto LABEL_88;
        v60 = *(_DWORD **)(v58 + 16);
        *(_QWORD *)(v58 + 16) = 0;
        if (!v60)
          goto LABEL_93;
        if (*v60 != 2)
          break;
        WTF::StringImpl::destroy();
        v59 = *(_DWORD **)v58;
        *(_QWORD *)v58 = 0;
        if (v59)
        {
LABEL_96:
          if (*v59 == 2)
            WTF::StringImpl::destroy();
          else
            *v59 -= 2;
        }
LABEL_88:
        v58 += 24;
        if (!--v57)
          goto LABEL_103;
      }
      *v60 -= 2;
LABEL_93:
      *(_QWORD *)v58 = 0;
      if (v59)
        goto LABEL_96;
      goto LABEL_88;
    }
LABEL_103:
    WTF::fastFree((WTF *)(v56 - 16), v4);
  }
}

uint64_t WGSL::ShaderModule::replace<WGSL::AST::Identifier>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v6 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
  {
    result = 148;
    __break(0xC471u);
    return result;
  }
  v20 = *(_OWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v8 = (__int128 *)(a3 + 8);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  v10 = *(_DWORD **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v9;
  if (!v10)
  {
LABEL_5:
    *v8 = v20;
    v11 = *(_DWORD **)(a3 + 24);
    *(_QWORD *)(a3 + 24) = v7;
    if (!v11)
      goto LABEL_11;
LABEL_8:
    if (*v11 == 2)
    {
      WTF::StringImpl::destroy();
      v7 = *(_QWORD *)(a3 + 24);
    }
    else
    {
      *v11 -= 2;
    }
    goto LABEL_11;
  }
  if (*v10 != 2)
  {
    *v10 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy();
  *v8 = v20;
  v11 = *(_DWORD **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v7;
  if (v11)
    goto LABEL_8;
LABEL_11:
  v12 = (_QWORD *)(a1 + 400);
  v21 = *v8;
  *(_QWORD *)(a3 + 24) = 0;
  v13 = *(unsigned int *)(a1 + 412);
  if ((_DWORD)v13 == *(_DWORD *)(a1 + 408))
  {
    v14 = v13 + (v13 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v13 + 1)
      v16 = v13 + 1;
    else
      v16 = v15;
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v12, v16);
    v13 = *(unsigned int *)(a1 + 412);
    v17 = *(_QWORD *)(a1 + 400) + 32 * v13;
    result = (uint64_t)operator new(0x30uLL);
    *(_QWORD *)result = &off_1E0FD6078;
    *(_QWORD *)(result + 8) = a2;
    *(_OWORD *)(result + 24) = v21;
    *(_QWORD *)(result + 16) = &off_1E0FD2F10;
    *(_QWORD *)(result + 40) = v7;
    *(_QWORD *)(v17 + 24) = result;
  }
  else
  {
    v19 = *v12 + 32 * v13;
    result = (uint64_t)operator new(0x30uLL);
    *(_QWORD *)result = &off_1E0FD6078;
    *(_QWORD *)(result + 8) = a2;
    *(_OWORD *)(result + 24) = *v8;
    *(_QWORD *)(result + 16) = &off_1E0FD2F10;
    *(_QWORD *)(result + 40) = v7;
    *(_QWORD *)(v19 + 24) = result;
  }
  *(_DWORD *)(a1 + 412) = v13 + 1;
  return result;
}

uint64_t WGSL::MangledName::toString(WGSL::MangledName *this, unsigned __int8 a2, WTF::String *a3)
{
  char **v4;
  int8x16_t *v5;
  char *v6;
  char *v7;
  int v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = &(&WGSL::MangledName::toString(void)const::prefixes)[2 * a2];
  v5 = (int8x16_t *)*v4;
  v6 = v4[1];
  WTF::String::number(a3);
  if (v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  if ((unint64_t)v7 >> 31)
    goto LABEL_21;
  if (v11)
  {
    v8 = *(_DWORD *)(v11 + 4);
    if (((v8 | v7) & 0x80000000) != 0)
      goto LABEL_20;
  }
  else
  {
    v8 = 0;
    if ((v7 & 0x80000000) != 0)
    {
LABEL_20:
      *(_QWORD *)this = 0;
      goto LABEL_21;
    }
  }
  v9 = ((_DWORD)v7 + v8);
  if (__OFADD__((_DWORD)v7, v8))
    goto LABEL_20;
  if (!v11)
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v9, 1, v5, v7, 0, this);
    if (*(_QWORD *)this)
      goto LABEL_14;
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x1824C4FFCLL);
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v9, (*(unsigned __int8 *)(v11 + 16) >> 2) & 1, v5, v7, v11, this);
  if (!*(_QWORD *)this)
    goto LABEL_21;
LABEL_14:
  result = v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      return WTF::StringImpl::destroy();
    else
      *(_DWORD *)v11 -= 2;
  }
  return result;
}

_DWORD *WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, WGSL::AST::Variable *a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v10;
  uint64_t v11;

  v4 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v4 && !*((_BYTE *)this + 32))
  {
    v10 = (_QWORD *)*((_QWORD *)a2 + 11);
    v11 = 8 * v4 - 8;
LABEL_23:
    (*(void (**)(WGSL::NameManglerVisitor *, _QWORD))(*(_QWORD *)this + 88))(this, *v10);
    while (v11)
    {
      ++v10;
      v11 -= 8;
      if (!*((_BYTE *)this + 32))
        goto LABEL_23;
    }
  }
  v5 = *((unsigned __int8 *)this + 32);
  if (*((_QWORD *)a2 + 13))
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    (*(void (**)(WGSL::NameManglerVisitor *))(*(_QWORD *)this + 544))(this);
    v5 = *((unsigned __int8 *)this + 32);
    if (*((_BYTE *)this + 32))
      v8 = 1;
    else
      v8 = *((_QWORD *)a2 + 14) == 0;
    if (!v8)
    {
LABEL_18:
      (*(void (**)(WGSL::NameManglerVisitor *))(*(_QWORD *)this + 208))(this);
      if (*((_BYTE *)this + 32))
        return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)a2 + 24, (const WTF::StringImpl *)2);
      goto LABEL_19;
    }
  }
  else
  {
    if (*((_BYTE *)this + 32))
      v7 = 1;
    else
      v7 = *((_QWORD *)a2 + 14) == 0;
    if (!v7)
      goto LABEL_18;
  }
  if (v5)
    return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)a2 + 24, (const WTF::StringImpl *)2);
LABEL_19:
  if (*((_QWORD *)a2 + 15))
    (*(void (**)(WGSL::NameManglerVisitor *))(*(_QWORD *)this + 208))(this);
  return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)a2 + 24, (const WTF::StringImpl *)2);
}

_DWORD *WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, WGSL::AST::VariableStatement *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v10;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 3);
  v4 = *(unsigned int *)(v3 + 100);
  if ((_DWORD)v4 && !*((_BYTE *)this + 32))
  {
    v10 = *(_QWORD **)(v3 + 88);
    v11 = 8 * v4 - 8;
LABEL_23:
    (*(void (**)(WGSL::NameManglerVisitor *, _QWORD))(*(_QWORD *)this + 88))(this, *v10);
    while (v11)
    {
      ++v10;
      v11 -= 8;
      if (!*((_BYTE *)this + 32))
        goto LABEL_23;
    }
  }
  v5 = *((unsigned __int8 *)this + 32);
  if (*(_QWORD *)(v3 + 104))
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    (*(void (**)(WGSL::NameManglerVisitor *))(*(_QWORD *)this + 544))(this);
    v5 = *((unsigned __int8 *)this + 32);
    if (*((_BYTE *)this + 32))
      v8 = 1;
    else
      v8 = *(_QWORD *)(v3 + 112) == 0;
    if (!v8)
    {
LABEL_18:
      (*(void (**)(WGSL::NameManglerVisitor *))(*(_QWORD *)this + 208))(this);
      if (*((_BYTE *)this + 32))
        return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, v3 + 24, (const WTF::StringImpl *)1);
      goto LABEL_19;
    }
  }
  else
  {
    if (*((_BYTE *)this + 32))
      v7 = 1;
    else
      v7 = *(_QWORD *)(v3 + 112) == 0;
    if (!v7)
      goto LABEL_18;
  }
  if (v5)
    return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, v3 + 24, (const WTF::StringImpl *)1);
LABEL_19:
  if (*(_QWORD *)(v3 + 120))
    (*(void (**)(WGSL::NameManglerVisitor *))(*(_QWORD *)this + 208))(this);
  return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, v3 + 24, (const WTF::StringImpl *)1);
}

uint64_t WGSL::NameManglerVisitor::visit(uint64_t this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  int v11;
  int i;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD v22[3];
  _DWORD *v23;

  v4 = this;
  v5 = (char *)a2 + 64;
  v6 = *(_QWORD **)(this + 40);
  while (1)
  {
    v7 = v6[1];
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
      v10 = *((_DWORD *)v9 + 4);
      v11 = v10 < 0x100 ? WTF::StringImpl::hashSlowCase(v9) : v10 >> 8;
      for (i = 0; ; v11 = i + v13)
      {
        v13 = v11 & v8;
        v14 = v7 + 24 * (v11 & v8);
        this = *(_QWORD *)v14;
        if (*(_QWORD *)v14 != -1)
        {
          if (!this)
            goto LABEL_15;
          this = WTF::equal((WTF *)this, *((const WTF::StringImpl **)a2 + 11), a3);
          if ((this & 1) != 0)
            break;
        }
        ++i;
      }
      v15 = v6[1];
      if (!v15 || v14 != v15 + 24 * *(unsigned int *)(v15 - 4))
        break;
    }
LABEL_15:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return this;
  }
  v16 = *(_QWORD *)(v4 + 80);
  v18 = *((_QWORD *)a2 + 9);
  v17 = *((_QWORD *)a2 + 10);
  WGSL::MangledName::toString((WGSL::MangledName *)&v21, *(_BYTE *)(v14 + 8), (WTF::String *)*(unsigned int *)(v14 + 12));
  v22[0] = &off_1E0FD2F10;
  v22[1] = v18;
  v19 = v21;
  v21 = 0;
  v22[2] = v17;
  v23 = (_DWORD *)v19;
  WGSL::ShaderModule::replace<WGSL::AST::Identifier>(v16, (uint64_t)v5, (uint64_t)v22);
  v20 = v23;
  v22[0] = &off_1E0FD2F10;
  v23 = 0;
  if (!v20)
  {
LABEL_20:
    this = v21;
    v21 = 0;
    if (!this)
      return this;
    goto LABEL_23;
  }
  if (*v20 != 2)
  {
    *v20 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy();
  this = v21;
  v21 = 0;
  if (!this)
    return this;
LABEL_23:
  if (*(_DWORD *)this == 2)
    return WTF::StringImpl::destroy();
  *(_DWORD *)this -= 2;
  return this;
}

uint64_t WGSL::NameManglerVisitor::visit(uint64_t this, WGSL::AST::FieldAccessExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  int v24;
  int i;
  int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  _QWORD v35[3];
  _DWORD *v36;

  v4 = this;
  if (*(_BYTE *)(this + 32))
  {
    v5 = *(uint64_t **)(*((_QWORD *)a2 + 8) + 24);
    if (!v5)
      return this;
  }
  else
  {
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 8));
    v5 = *(uint64_t **)(*((_QWORD *)a2 + 8) + 24);
    if (!v5)
      return this;
  }
  v6 = *((_DWORD *)v5 + 12);
  if (v6 == 10)
  {
    v5 = (uint64_t *)v5[1];
    if (!v5)
      return this;
    v6 = *((_DWORD *)v5 + 12);
  }
  if (v6 == 11)
  {
    v5 = (uint64_t *)v5[1];
    if (!v5)
      return this;
    v6 = *((_DWORD *)v5 + 12);
  }
  if (v6 == 4)
  {
    v7 = *(_QWORD *)(v4 + 88);
    if (v7)
    {
      v8 = *v5;
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != v8)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == v8)
            goto LABEL_19;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_19:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = v7 + 16 * v13;
        v19 = *(_QWORD *)(v16 + 8);
        v17 = (_QWORD *)(v16 + 8);
        v18 = v19;
        v20 = (char *)a2 + 72;
        v21 = *(_DWORD *)(v19 - 8);
        v22 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
        v23 = *((_DWORD *)v22 + 4);
        if (v23 < 0x100)
          v24 = WTF::StringImpl::hashSlowCase(v22);
        else
          v24 = v23 >> 8;
        for (i = 0; ; v24 = i + v26)
        {
          v26 = v24 & v21;
          v27 = v18 + 24 * (v24 & v21);
          v28 = *(WTF **)v27;
          if (*(_QWORD *)v27 != -1)
          {
            if (!v28)
            {
              v27 = *v17 + 24 * *(unsigned int *)(*v17 - 4);
LABEL_30:
              v29 = *(_QWORD *)(v4 + 80);
              v31 = *((_QWORD *)a2 + 10);
              v30 = *((_QWORD *)a2 + 11);
              WGSL::MangledName::toString((WGSL::MangledName *)&v34, *(_BYTE *)(v27 + 8), (WTF::String *)*(unsigned int *)(v27 + 12));
              v35[0] = &off_1E0FD2F10;
              v35[1] = v31;
              v32 = v34;
              v34 = 0;
              v35[2] = v30;
              v36 = (_DWORD *)v32;
              WGSL::ShaderModule::replace<WGSL::AST::Identifier>(v29, (uint64_t)v20, (uint64_t)v35);
              v33 = v36;
              v35[0] = &off_1E0FD2F10;
              v36 = 0;
              if (v33)
              {
                if (*v33 != 2)
                {
                  *v33 -= 2;
                  goto LABEL_33;
                }
                WTF::StringImpl::destroy();
                this = v34;
                v34 = 0;
                if (this)
                {
LABEL_36:
                  if (*(_DWORD *)this == 2)
                    return WTF::StringImpl::destroy();
                  else
                    *(_DWORD *)this -= 2;
                }
              }
              else
              {
LABEL_33:
                this = v34;
                v34 = 0;
                if (this)
                  goto LABEL_36;
              }
              return this;
            }
            if ((WTF::equal(v28, *((const WTF::StringImpl **)a2 + 12), a3) & 1) != 0)
              goto LABEL_30;
          }
          ++i;
        }
      }
    }
    this = 172;
    __break(0xC471u);
  }
  return this;
}

WTF *WGSL::mangleNames(WGSL *this, WGSL::ShaderModule *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  void (**v19)(WGSL::AST::Visitor *__hidden);
  WTF *v20;
  unsigned __int8 v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _QWORD v25[3];
  __int128 v26;
  __int128 v27;

  LOBYTE(v20) = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  WGSL::ContextProvider<WGSL::MangledName>::ContextScope::ContextScope(v25, (uint64_t)&v22);
  v19 = &off_1E0FD5DD0;
  v25[2] = this;
  v26 = 0u;
  v27 = 0u;
  v4 = *((unsigned int *)this + 23);
  v5 = 0;
  if ((_DWORD)v4)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 10);
    v7 = 8 * v4;
    do
    {
      if (!v5)
        ((void (*)(_BYTE *, uint64_t))v19[3])(&v19, *v6);
      ++v6;
      v5 = v21;
      v7 -= 8;
    }
    while (v7);
  }
  v8 = *((unsigned int *)this + 19);
  if ((_DWORD)v8 && !v5)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 8);
    v10 = 8 * v8 - 8;
LABEL_9:
    ((void (*)(_BYTE *, uint64_t))v19[5])(&v19, *v9);
    while (v10)
    {
      ++v9;
      v10 -= 8;
      if (!v21)
        goto LABEL_9;
    }
  }
  v19 = &off_1E0FD5DD0;
  result = (WTF *)v26;
  if ((_QWORD)v26)
    result = (WTF *)WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::deallocateTable(v26, v3);
  v12 = v25[0];
  *(_QWORD *)v25[0] = v25[1];
  v13 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v13)
  {
    v14 = v13 - 1;
    v15 = (_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * (v13 - 1));
    v16 = (_QWORD *)*v15;
    *v15 = 0;
    if (v16)
      std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v15, v16);
    *(_DWORD *)(v12 + 20) = v14;
    if (HIDWORD(v24))
    {
      v17 = v23;
      v18 = 8 * HIDWORD(v24);
      do
      {
        v16 = *(_QWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v16)
          std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v17, v16);
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
    result = v23;
    if (v23)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      result = (WTF *)WTF::fastFree(result, v16);
    }
    v19 = &off_1E0FD25C8;
    if (v21)
    {
      result = v20;
      v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF *)WTF::StringImpl::destroy();
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WGSL::NameManglerVisitor::~NameManglerVisitor(WGSL::NameManglerVisitor *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E0FD5DD0;
  v3 = *((_QWORD *)this + 11);
  if (v3)
    WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::deallocateTable(v3, a2);
  WGSL::AST::ScopedVisitor<WGSL::MangledName>::~ScopedVisitor((uint64_t)this);
}

{
  uint64_t v3;

  *(_QWORD *)this = &off_1E0FD5DD0;
  v3 = *((_QWORD *)this + 11);
  if (v3)
    WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::deallocateTable(v3, a2);
  WGSL::AST::ScopedVisitor<WGSL::MangledName>::~ScopedVisitor((uint64_t)this);
  JUMPOUT(0x186DAB2A8);
}

void WGSL::AST::ScopedVisitor<WGSL::MangledName>::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (uint64_t *)(a1 + 48);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = 0;
  v21 = v6;
  v7 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 56))
  {
    v8 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v7 + 1, (unint64_t)&v21);
    v9 = *(unsigned int *)(a1 + 60);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *v8;
    *v8 = 0;
    *(_QWORD *)(v10 + 8 * v9) = v11;
    v12 = v9 + 1;
    *(_DWORD *)(a1 + 60) = v12;
    v13 = v21;
    v21 = 0;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = *v5;
  v21 = 0;
  *(_QWORD *)(v14 + 8 * v7) = v6;
  v12 = v7 + 1;
  *(_DWORD *)(a1 + 60) = v12;
  v13 = v21;
  v21 = 0;
  if (v13)
  {
LABEL_5:
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)&v21, v13);
    v12 = *(_DWORD *)(a1 + 60);
  }
LABEL_6:
  if (!v12)
    goto LABEL_19;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12 - 8);
  v15 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v15 || *(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)(a1 + 40) = v4;
    goto LABEL_16;
  }
  v16 = *(_QWORD **)(a2 + 40);
  v17 = 8 * v15 - 8;
LABEL_11:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 360))(a1, *v16);
  while (v17)
  {
    ++v16;
    v17 -= 8;
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_11;
  }
  v12 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)(a1 + 40) = v4;
  if (!v12)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1824C59ECLL);
  }
LABEL_16:
  v18 = v12 - 1;
  v19 = (_QWORD *)(*v5 + 8 * v18);
  v20 = (_QWORD *)*v19;
  *v19 = 0;
  if (v20)
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v19, v20);
  *(_DWORD *)(a1 + 60) = v18;
}

{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (uint64_t *)(a1 + 48);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = 0;
  v37 = v6;
  v7 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v7 != *(_DWORD *)(a1 + 56))
  {
    v14 = *v5;
    v37 = 0;
    *(_QWORD *)(v14 + 8 * v7) = v6;
    v12 = v7 + 1;
    *(_DWORD *)(a1 + 60) = v12;
    v13 = v37;
    v37 = 0;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v7 + 1, (unint64_t)&v37);
  v9 = *(unsigned int *)(a1 + 60);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *v8;
  *v8 = 0;
  *(_QWORD *)(v10 + 8 * v9) = v11;
  v12 = v9 + 1;
  *(_DWORD *)(a1 + 60) = v12;
  v13 = v37;
  v37 = 0;
  if (v13)
  {
LABEL_5:
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)&v37, v13);
    v12 = *(_DWORD *)(a1 + 60);
  }
LABEL_6:
  if (!v12)
    goto LABEL_44;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12 - 8);
  v15 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v15 && !*(_BYTE *)(a1 + 32))
  {
    v28 = *(_QWORD **)(a2 + 24);
    v29 = 8 * v15 - 8;
LABEL_23:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(a1, *v28);
    while (v29)
    {
      ++v28;
      v29 -= 8;
      if (!*(_BYTE *)(a1 + 32))
        goto LABEL_23;
    }
  }
  v16 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v16 && !*(_BYTE *)(a1 + 32))
  {
    v30 = *(_QWORD **)(a2 + 40);
    v31 = 8 * v16 - 8;
LABEL_28:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 360))(a1, *v30);
    while (v31)
    {
      ++v30;
      v31 -= 8;
      if (!*(_BYTE *)(a1 + 32))
        goto LABEL_28;
    }
  }
  if (!*(_BYTE *)(a2 + 96))
  {
    LODWORD(v26) = *(_DWORD *)(a1 + 60);
    goto LABEL_36;
  }
  v17 = *(_QWORD *)(a1 + 40);
  v18 = (_QWORD *)operator new();
  *v18 = v17;
  v18[1] = 0;
  v37 = v18;
  v19 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v19 != *(_DWORD *)(a1 + 56))
  {
    v27 = *v5;
    v37 = 0;
    *(_QWORD *)(v27 + 8 * v19) = v18;
    v24 = v19 + 1;
    *(_DWORD *)(a1 + 60) = v24;
    v25 = v37;
    v37 = 0;
    if (!v25)
      goto LABEL_18;
    goto LABEL_17;
  }
  v20 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v19 + 1, (unint64_t)&v37);
  v21 = *(unsigned int *)(a1 + 60);
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *v20;
  *v20 = 0;
  *(_QWORD *)(v22 + 8 * v21) = v23;
  v24 = v21 + 1;
  *(_DWORD *)(a1 + 60) = v24;
  v25 = v37;
  v37 = 0;
  if (v25)
  {
LABEL_17:
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)&v37, v25);
    v24 = *(_DWORD *)(a1 + 60);
  }
LABEL_18:
  if (!v24)
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v24 - 8);
  if (!*(_BYTE *)(a2 + 96))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (!*(_BYTE *)(a1 + 32))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(a1, a2 + 56);
    v24 = *(_DWORD *)(a1 + 60);
    *(_QWORD *)(a1 + 40) = v17;
    if (v24)
      goto LABEL_33;
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x1824C5E58);
  }
  *(_QWORD *)(a1 + 40) = v17;
LABEL_33:
  v26 = v24 - 1;
  v32 = (_QWORD *)(*v5 + 8 * v26);
  v33 = (_QWORD *)*v32;
  *v32 = 0;
  if (v33)
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v32, v33);
  *(_DWORD *)(a1 + 60) = v26;
LABEL_36:
  *(_QWORD *)(a1 + 40) = v4;
  if (!(_DWORD)v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1824C5E60);
  }
  v34 = v26 - 1;
  v35 = (_QWORD *)(*v5 + 8 * v34);
  v36 = (_QWORD *)*v35;
  *v35 = 0;
  if (v36)
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v35, v36);
  *(_DWORD *)(a1 + 60) = v34;
}

void WGSL::AST::ScopedVisitor<WGSL::MangledName>::visit(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (uint64_t *)(a1 + 48);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = 0;
  v20 = v6;
  v7 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 56))
  {
    v8 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v7 + 1, (unint64_t)&v20);
    v9 = *(unsigned int *)(a1 + 60);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *v8;
    *v8 = 0;
    *(_QWORD *)(v10 + 8 * v9) = v11;
    v12 = v9 + 1;
    *(_DWORD *)(a1 + 60) = v12;
    v13 = v20;
    v20 = 0;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = *v5;
  v20 = 0;
  *(_QWORD *)(v14 + 8 * v7) = v6;
  v12 = v7 + 1;
  *(_DWORD *)(a1 + 60) = v12;
  v13 = v20;
  v20 = 0;
  if (v13)
  {
LABEL_5:
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)&v20, v13);
    v12 = *(_DWORD *)(a1 + 60);
  }
LABEL_6:
  if (!v12)
    goto LABEL_22;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12 - 8);
  v15 = *(unsigned __int8 *)(a1 + 32);
  if (a2[3] && !*(_BYTE *)(a1 + 32))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 360))(a1);
    v15 = *(unsigned __int8 *)(a1 + 32);
  }
  if (!v15 && a2[4])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
    v15 = *(unsigned __int8 *)(a1 + 32);
  }
  if (!v15 && a2[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 360))(a1);
    v15 = *(unsigned __int8 *)(a1 + 32);
  }
  if (!v15)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 400))(a1, a2[6]);
  *(_QWORD *)(a1 + 40) = v4;
  v16 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v16)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1824C5B84);
  }
  v17 = v16 - 1;
  v18 = (_QWORD *)(*v5 + 8 * (v16 - 1));
  v19 = (_QWORD *)*v18;
  *v18 = 0;
  if (v19)
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v18, v19);
  *(_DWORD *)(a1 + 60) = v17;
}

void WGSL::ContextProvider<WGSL::MangledName>::ContextScope::ContextScope(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  *a1 = a2;
  a1[1] = *(_QWORD *)a2;
  v4 = (uint64_t *)(a2 + 8);
  v5 = (_QWORD *)operator new();
  *v5 = a1[1];
  v5[1] = 0;
  v14 = v5;
  v6 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 16))
  {
    v12 = *v4;
    v14 = 0;
    *(_QWORD *)(v12 + 8 * v6) = v5;
    *(_DWORD *)(a2 + 20) = v6 + 1;
    v11 = v14;
    v14 = 0;
    if (!v11)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v14);
  v8 = *(unsigned int *)(a2 + 20);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *v7;
  *v7 = 0;
  *(_QWORD *)(v9 + 8 * v8) = v10;
  *(_DWORD *)(a2 + 20) = v8 + 1;
  v11 = v14;
  v14 = 0;
  if (v11)
LABEL_5:
    std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)&v14, v11);
LABEL_6:
  v13 = *(unsigned int *)(*a1 + 20);
  if ((_DWORD)v13)
    *(_QWORD *)*a1 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v13 - 8);
  else
    __break(0xC471u);
}

void std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;

  if (a2)
  {
    v2 = a2[1];
    if (v2)
    {
      v3 = *(unsigned int *)(v2 - 4);
      if ((_DWORD)v3)
      {
        v4 = a2[1];
        while (1)
        {
          v5 = *(_DWORD **)v4;
          if (*(_QWORD *)v4 == -1)
            goto LABEL_6;
          v6 = *(_DWORD **)(v4 + 16);
          *(_QWORD *)(v4 + 16) = 0;
          if (!v6)
            goto LABEL_11;
          if (*v6 != 2)
            break;
          WTF::StringImpl::destroy();
          v5 = *(_DWORD **)v4;
          *(_QWORD *)v4 = 0;
          if (v5)
          {
LABEL_14:
            if (*v5 == 2)
              WTF::StringImpl::destroy();
            else
              *v5 -= 2;
          }
LABEL_6:
          v4 += 24;
          if (!--v3)
            goto LABEL_17;
        }
        *v6 -= 2;
LABEL_11:
        *(_QWORD *)v4 = 0;
        if (v5)
          goto LABEL_14;
        goto LABEL_6;
      }
LABEL_17:
      WTF::fastFree((WTF *)(v2 - 16), a2);
    }
    JUMPOUT(0x186DAB2A8);
  }
}

uint64_t WGSL::AST::ScopedVisitor<WGSL::MangledName>::~ScopedVisitor(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v10;
  _DWORD *v11;

  v1 = *(_QWORD *)(result + 64);
  *(_QWORD *)v1 = *(_QWORD *)(result + 72);
  v2 = *(unsigned int *)(v1 + 20);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = v2 - 1;
    v5 = (_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * (v2 - 1));
    v6 = (_QWORD *)*v5;
    *v5 = 0;
    if (v6)
      std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v5, v6);
    *(_DWORD *)(v1 + 20) = v4;
    v7 = *(unsigned int *)(v3 + 60);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD **)(v3 + 48);
      v9 = 8 * v7;
      do
      {
        v6 = (_QWORD *)*v8;
        *v8 = 0;
        if (v6)
          std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v8, v6);
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    v10 = *(WTF **)(v3 + 48);
    if (v10)
    {
      *(_QWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 56) = 0;
      WTF::fastFree(v10, v6);
    }
    *(_QWORD *)v3 = &off_1E0FD25C8;
    if (!*(_BYTE *)(v3 + 32))
      return v3;
    v11 = *(_DWORD **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (!v11)
      return v3;
    if (*v11 != 2)
    {
      *v11 -= 2;
      return v3;
    }
    WTF::StringImpl::destroy();
    return v3;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 16 * i) != -1)
      {
        v5 = a1 + 16 * i;
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(unsigned int *)(v6 - 4);
          if ((_DWORD)v7)
          {
            v8 = *(_QWORD *)(v5 + 8);
            while (1)
            {
              v9 = *(_DWORD **)v8;
              if (*(_QWORD *)v8 == -1)
                goto LABEL_10;
              v10 = *(_DWORD **)(v8 + 16);
              *(_QWORD *)(v8 + 16) = 0;
              if (!v10)
                goto LABEL_15;
              if (*v10 != 2)
                break;
              WTF::StringImpl::destroy();
              v9 = *(_DWORD **)v8;
              *(_QWORD *)v8 = 0;
              if (v9)
              {
LABEL_18:
                if (*v9 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v9 -= 2;
              }
LABEL_10:
              v8 += 24;
              if (!--v7)
                goto LABEL_3;
            }
            *v10 -= 2;
LABEL_15:
            *(_QWORD *)v8 = 0;
            if (v9)
              goto LABEL_18;
            goto LABEL_10;
          }
LABEL_3:
          WTF::fastFree((WTF *)(v6 - 16), a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  unsigned int v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  _DWORD *v27;
  _QWORD *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    while (1)
    {
      v14 = (WTF::StringImpl **)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v18 = *a1;
          if (*a1)
          {
            v19 = *(_DWORD *)(v18 - 8);
            v20 = *((_DWORD *)v15 + 4);
            if (v20 >= 0x100)
              goto LABEL_20;
LABEL_25:
            v21 = WTF::StringImpl::hashSlowCase(v15);
          }
          else
          {
            v19 = 0;
            v20 = *((_DWORD *)v15 + 4);
            if (v20 < 0x100)
              goto LABEL_25;
LABEL_20:
            v21 = v20 >> 8;
          }
          v23 = 0;
          do
          {
            v24 = v21 & v19;
            v25 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            v21 = ++v23 + (v21 & v19);
          }
          while (*v25);
          v26 = v18 + 24 * v24;
          v29 = *(_DWORD **)(v26 + 16);
          v28 = (_QWORD *)(v26 + 16);
          v27 = v29;
          *v28 = 0;
          if (v29)
          {
            if (*v27 != 2)
            {
              *v27 -= 2;
              goto LABEL_31;
            }
            WTF::StringImpl::destroy();
            v30 = *v25;
            *v25 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          else
          {
LABEL_31:
            *v25 = 0;
          }
          v31 = *v14;
          *v14 = 0;
          *v25 = v31;
          v32 = v4 + 24 * v11;
          *(_QWORD *)(v18 + 24 * v24 + 8) = *(_QWORD *)(v32 + 8);
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          *v28 = v33;
          v34 = *(_DWORD **)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          if (v34)
          {
            if (*v34 != 2)
            {
              *v34 -= 2;
              goto LABEL_40;
            }
            WTF::StringImpl::destroy();
            v35 = *v14;
            *v14 = 0;
            if (v35)
            {
LABEL_43:
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v35 -= 2;
            }
          }
          else
          {
LABEL_40:
            v35 = *v14;
            *v14 = 0;
            if (v35)
              goto LABEL_43;
          }
          if (v14 == a3)
            v12 = v18 + 24 * v24;
          goto LABEL_11;
        }
        v16 = v4 + 24 * v11;
        v17 = *(_DWORD **)(v16 + 16);
        *(_QWORD *)(v16 + 16) = 0;
        if (v17)
        {
          if (*v17 == 2)
          {
            WTF::StringImpl::destroy();
            v22 = *v14;
            *v14 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy();
              else
                *(_DWORD *)v22 -= 2;
            }
            goto LABEL_11;
          }
          *v17 -= 2;
        }
        *v14 = 0;
      }
LABEL_11:
      if (++v11 == v13)
        goto LABEL_46;
    }
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_46:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E0FD6078;
  a1[2] = &off_1E0FD2F10;
  v2 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (!v2)
    return a1;
  if (*v2 != 2)
  {
    *v2 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy();
  return a1;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEED0Ev(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E0FD6078;
  a1[2] = &off_1E0FD2F10;
  v2 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v2)
  {
    if (*v2 == 2)
      WTF::StringImpl::destroy();
    else
      *v2 -= 2;
  }
  JUMPOUT(0x186DAB2A8);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  _DWORD *v4;

  result = (char *)operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E0FD6078;
  *((_QWORD *)result + 1) = v3;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)result + 2) = &off_1E0FD2F10;
  v4 = *(_DWORD **)(a1 + 40);
  if (v4)
    *v4 += 2;
  *((_QWORD *)result + 5) = v4;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEE7__cloneEPNS0_6__baseISH_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E0FD6078;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = &off_1E0FD2EE8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = &off_1E0FD2F10;
  v3 = *(_DWORD **)(result + 40);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEE7destroyEv(uint64_t a1)
{
  _DWORD *result;

  *(_QWORD *)(a1 + 16) = &off_1E0FD2F10;
  result = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  _DWORD *v2;

  __p[2] = &off_1E0FD2F10;
  v2 = (_DWORD *)__p[5];
  __p[5] = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      operator delete(__p);
      return;
    }
    *v2 -= 2;
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  _DWORD *result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  *(_OWORD *)(v1 + 8) = *(_OWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  result = *(_DWORD **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v3;
  if (result)
  {
    if (*result == 2)
    {
      result = (_DWORD *)WTF::StringImpl::destroy();
      if (!v2)
        return result;
      goto LABEL_7;
    }
    *result -= 2;
  }
  if (!v2)
    return result;
LABEL_7:
  if (*v2 == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *v2 -= 2;
  return result;
}

void WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
    v6 = 16 * a2;
    v8 = WTF::fastMalloc((WTF *)(v6 + 16));
    v9 = (void *)(v8 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = 0;
  v6 = 16 * a2;
  v8 = WTF::fastMalloc((WTF *)(v6 + 16));
  v9 = (void *)(v8 + 16);
  if (a2)
LABEL_3:
    bzero(v9, v6);
LABEL_4:
  *a1 = (uint64_t)v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    do
    {
      v12 = (uint64_t *)(v3 + 16 * v10);
      v13 = *v12;
      if (*v12 == -1)
        goto LABEL_7;
      if (!v13)
      {
        v14 = v3 + 16 * v10;
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(unsigned int *)(v15 - 4);
          if ((_DWORD)v16)
          {
            v17 = *(_QWORD *)(v14 + 8);
            while (1)
            {
              v18 = *(_DWORD **)v17;
              if (*(_QWORD *)v17 == -1)
                goto LABEL_14;
              v19 = *(_DWORD **)(v17 + 16);
              *(_QWORD *)(v17 + 16) = 0;
              if (!v19)
                goto LABEL_19;
              if (*v19 != 2)
                break;
              WTF::StringImpl::destroy();
              v18 = *(_DWORD **)v17;
              *(_QWORD *)v17 = 0;
              if (v18)
              {
LABEL_22:
                if (*v18 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v18 -= 2;
              }
LABEL_14:
              v17 += 24;
              if (!--v16)
                goto LABEL_6;
            }
            *v19 -= 2;
LABEL_19:
            *(_QWORD *)v17 = 0;
            if (v18)
              goto LABEL_22;
            goto LABEL_14;
          }
LABEL_6:
          WTF::fastFree((WTF *)(v15 - 16), v7);
        }
        goto LABEL_7;
      }
      v20 = *a1;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 8);
      else
        v21 = 0;
      v22 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = 1;
      do
      {
        v27 = v25;
        v28 = *(_QWORD *)(v20 + 16 * v25);
        v25 = (v25 + v26++) & v21;
      }
      while (v28);
      v29 = (_QWORD *)(v20 + 16 * v27);
      v31 = v29 + 1;
      v30 = v29[1];
      if (v30)
      {
        v32 = *(unsigned int *)(v30 - 4);
        if ((_DWORD)v32)
        {
          v33 = v29[1];
          while (1)
          {
            v34 = *(_DWORD **)v33;
            if (*(_QWORD *)v33 == -1)
              goto LABEL_33;
            v35 = *(_DWORD **)(v33 + 16);
            *(_QWORD *)(v33 + 16) = 0;
            if (!v35)
              goto LABEL_38;
            if (*v35 != 2)
              break;
            WTF::StringImpl::destroy();
            v34 = *(_DWORD **)v33;
            *(_QWORD *)v33 = 0;
            if (v34)
            {
LABEL_41:
              if (*v34 == 2)
                WTF::StringImpl::destroy();
              else
                *v34 -= 2;
            }
LABEL_33:
            v33 += 24;
            if (!--v32)
              goto LABEL_43;
          }
          *v35 -= 2;
LABEL_38:
          *(_QWORD *)v33 = 0;
          if (v34)
            goto LABEL_41;
          goto LABEL_33;
        }
LABEL_43:
        WTF::fastFree((WTF *)(v30 - 16), v7);
        v13 = *v12;
      }
      *v29 = v13;
      v36 = v3 + 16 * v10;
      *v31 = 0;
      v37 = *(_QWORD *)(v36 + 8);
      *(_QWORD *)(v36 + 8) = 0;
      *v31 = v37;
      v38 = *(_QWORD *)(v36 + 8);
      if (v38)
      {
        v39 = *(unsigned int *)(v38 - 4);
        if (!(_DWORD)v39)
        {
LABEL_58:
          WTF::fastFree((WTF *)(v38 - 16), v7);
          goto LABEL_7;
        }
        v40 = *(_QWORD *)(v36 + 8);
        while (2)
        {
          v41 = *(_DWORD **)v40;
          if (*(_QWORD *)v40 == -1)
            goto LABEL_48;
          v42 = *(_DWORD **)(v40 + 16);
          *(_QWORD *)(v40 + 16) = 0;
          if (!v42)
            goto LABEL_53;
          if (*v42 == 2)
          {
            WTF::StringImpl::destroy();
            v41 = *(_DWORD **)v40;
            *(_QWORD *)v40 = 0;
            if (!v41)
              goto LABEL_48;
          }
          else
          {
            *v42 -= 2;
LABEL_53:
            *(_QWORD *)v40 = 0;
            if (!v41)
            {
LABEL_48:
              v40 += 24;
              if (!--v39)
                goto LABEL_58;
              continue;
            }
          }
          break;
        }
        if (*v41 == 2)
          WTF::StringImpl::destroy();
        else
          *v41 -= 2;
        goto LABEL_48;
      }
LABEL_7:
      ++v10;
    }
    while (v10 != v11);
  }
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

void (**WGSL::Metal::generateMetalCode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (***a4)(WGSL::Metal::FunctionDefinitionWriter *__hidden this)@<X8>))(WGSL::Metal::FunctionDefinitionWriter *__hidden this)
{
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unint64_t v17;
  void (**v18)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  void (**v19)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  void (**v20)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  _DWORD *v21;
  void (**result)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  _BYTE *v23;
  void (**v24)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  void (***v28)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  void (**v29)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  char v30;
  char v31;
  void (***v32)(WGSL::Metal::FunctionDefinitionWriter *__hidden);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  LODWORD(v26) = 0;
  BYTE4(v26) = 1;
  WTF::StringBuilder::append();
  v30 = 0;
  v31 = 0;
  v29 = &off_1E0FD6960;
  v32 = &v24;
  v33 = a1;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  v40 = a2;
  v41 = a3;
  v42 = 0;
  WGSL::Metal::FunctionDefinitionWriter::write((WGSL::Metal::FunctionDefinitionWriter *)&v29, v8, v9, v10, v11, v12, v13, v14, v23, 0, 0, v26, v27);
  WGSL::Metal::FunctionDefinitionWriter::~FunctionDefinitionWriter((WGSL::Metal::FunctionDefinitionWriter *)&v29, v15);
  v17 = atomic_load(&qword_1EDB98D20);
  if (v17 != -1)
  {
    v28 = &v29;
    v29 = (void (**)(WGSL::Metal::FunctionDefinitionWriter *__hidden))((char *)&v27 + 7);
    std::__call_once(&qword_1EDB98D20, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WGSL::Metal::dumpMetalCodeIfNeeded(WTF::StringBuilder &)::$_0 &&>>);
  }
  if (_MergedGlobals_2)
  {
    WTF::dataLog<char [22],char [2]>(v16);
    v18 = v24;
    if (v24
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v24),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v24),
          (v18 = v24) != 0))
    {
      *(_DWORD *)v18 += 2;
    }
    v29 = v18;
    WTF::dataLog<WTF::String,char [2]>((WTF *)&v29);
    v19 = v29;
    v29 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy();
        v20 = v24;
        if (!v24)
          goto LABEL_13;
        goto LABEL_14;
      }
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = v24;
  if (!v24)
  {
LABEL_13:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v24);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v24);
    v20 = v24;
    if (!v24)
      goto LABEL_15;
  }
LABEL_14:
  *(_DWORD *)v20 += 2;
LABEL_15:
  *a4 = v20;
  v21 = v25;
  v25 = 0;
  if (v21)
  {
    if (*v21 == 2)
    {
      WTF::StringImpl::destroy();
      result = v24;
      v24 = 0;
      if (!result)
        return result;
      goto LABEL_21;
    }
    *v21 -= 2;
  }
  result = v24;
  v24 = 0;
  if (!result)
    return result;
LABEL_21:
  if (*(_DWORD *)result == 2)
    return (void (**)(WGSL::Metal::FunctionDefinitionWriter *__hidden))WTF::StringImpl::destroy();
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WGSL::Metal::dumpMetalCodeIfNeeded(WTF::StringBuilder &)::$_0 &&>>()
{
  int out_token;

  out_token = 0;
  return notify_register_dispatch("com.apple.WebKit.WebGPU.TogglePrintMetalCode", &out_token, MEMORY[0x1E0C80D38], &__block_literal_global_2);
}

void ___ZZN4WGSL5MetalL21dumpMetalCodeIfNeededERN3WTF13StringBuilderEENK3__0clEv_block_invoke()
{
  _MergedGlobals_2 ^= 1u;
}

uint64_t WTF::dataLog<char [22],char [2]>(WTF *a1)
{
  uint64_t v1;

  v1 = WTF::dataFile(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  WTF::printInternal();
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<WTF::String,char [2]>(WTF *a1)
{
  uint64_t v1;

  v1 = WTF::dataFile(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  WTF::printInternal();
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

double WGSL::Metal::FunctionDefinitionWriter::write(WGSL::Metal::FunctionDefinitionWriter *this, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, uint64_t a10, int a11, char *a12, uint64_t a13)
{
  uint64_t v14;
  WTF::StringBuilder *v15;
  int v16;
  WTF::StringBuilder *v17;
  size_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  size_t v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  _WORD *v52;
  size_t v53;
  _WORD *v54;
  __int128 v55;
  _WORD *v56;
  size_t v57;
  _WORD *v58;
  _WORD *v59;
  size_t v60;
  _WORD *v61;
  _WORD *v62;
  size_t v63;
  _WORD *v64;
  char *v65;
  char *v66;
  char *v67;
  _WORD *v68;
  size_t v69;
  _WORD *v70;
  _WORD *v71;
  size_t v72;
  char *v73;
  int8x16_t v74;
  __int128 v75;
  char *v76;
  char *v77;
  char *v78;
  _WORD *v79;
  size_t v80;
  char *v81;
  __int128 v82;
  char *v83;
  char *v84;
  char *v85;
  _WORD *v86;
  size_t v87;
  char *v88;
  int8x16_t v89;
  __int128 v90;
  char *v91;
  char *v92;
  char *v93;
  _WORD *v94;
  _WORD *v95;
  __int128 v96;
  char *v97;
  char *v98;
  char *v99;
  int v100;
  WTF::StringBuilder *v101;
  double result;
  int v103;
  WTF::StringBuilder *v104;
  size_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  char *v120;
  size_t v121;
  char *v122;
  char *v123;
  size_t v124;
  char *v125;
  _OWORD *v126;
  size_t v127;
  char *v128;
  char *v129;
  size_t v130;
  char *v131;
  int8x16_t v132;
  __int128 v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  __int128 v139;
  char *v140;
  char *v141;
  char *v142;
  WTF::StringBuilder *v143;
  int v144;
  WTF::StringBuilder *v145;
  int v146;
  WTF::StringBuilder *v147;
  int v148;
  WTF::StringBuilder *v149;
  int v150;
  WTF::StringBuilder *v151;
  WTF::StringBuilder *v152;
  int v153;
  WTF::StringBuilder *v154;
  int v155;
  WTF::StringBuilder *v156;
  int v157;
  WTF::StringBuilder *v158;
  int v159;
  WTF::StringBuilder *v160;
  WTF::StringBuilder *v161;
  int v162;
  WTF::StringBuilder *v163;
  int v164;
  WTF::StringBuilder *v165;
  int v166;
  WTF::StringBuilder *v167;
  int v168;
  WTF::StringBuilder *v169;
  WTF::StringBuilder *v170;
  int v171;
  WTF::StringBuilder *v172;
  int v173;
  WTF::StringBuilder *v174;
  int v175;
  WTF::StringBuilder *v176;
  int v177;
  WTF::StringBuilder *v178;
  WTF::StringBuilder *v179;
  WTF::StringBuilder *v180;
  WTF::StringBuilder *v181;
  WTF::StringBuilder *v182;
  int v183;
  int v184;
  WTF::StringBuilder *v185;
  WTF::StringBuilder *v186;
  int v187;
  WTF::StringBuilder *v188;
  int v189;
  WTF::StringBuilder *v190;
  int v191;
  WTF::StringBuilder *v192;
  int v193;
  WTF::StringBuilder *v194;
  WTF::StringBuilder *v195;
  int v196;
  WTF::StringBuilder *v197;
  int v198;
  WTF::StringBuilder *v199;
  int v200;
  WTF::StringBuilder *v201;
  int v202;
  WTF::StringBuilder *v203;
  WTF::StringBuilder *v204;
  int v205;
  WTF::StringBuilder *v206;
  int v207;
  int v208;
  WTF::StringBuilder *v209;
  int v210;
  WTF::StringBuilder *v211;
  WTF::StringBuilder *v212;
  int v213;
  WTF::StringBuilder *v214;
  int v215;
  int v216;
  WTF::StringBuilder *v217;
  int v218;
  WTF::StringBuilder *v219;
  WTF::StringBuilder *v220;
  int v221;
  WTF::StringBuilder *v222;
  int v223;
  WTF::StringBuilder *v224;
  int v225;
  WTF::StringBuilder *v226;
  int v227;
  int v228;
  WTF::StringBuilder *v229;
  WTF::StringBuilder *v230;
  int v231;
  WTF::StringBuilder *v232;
  int v233;
  WTF::StringBuilder *v234;
  WTF::StringBuilder *v235;
  int v236;
  WTF::StringBuilder *v237;
  int v238;
  WTF::StringBuilder *v239;
  WTF::StringBuilder *v240;
  int v241;
  int v242;
  WTF::StringBuilder *v243;
  WTF::StringBuilder *v244;
  int v245;
  WTF::StringBuilder *v246;
  int v247;
  WTF::StringBuilder *v248;
  WTF::StringBuilder *v249;
  int v250;
  WTF::StringBuilder *v251;
  int v252;
  WTF::StringBuilder *v253;
  WTF::StringBuilder *v254;
  int v255;
  WTF::StringBuilder *v256;
  int v257;
  WTF::StringBuilder *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  WTF::String *v264;
  const char *v265;
  const char *v266;
  uint64_t *v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  uint64_t v272;
  int i;
  uint64_t v274;
  WTF *v275;
  uint64_t v276;
  const WTF::StringImpl **v277;
  unsigned int *v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  WTF::StringBuilder *v286;
  uint64_t v287;
  size_t v288;
  uint64_t v289;
  char *v290;
  char *v291;
  size_t v292;
  __int128 v293;
  int8x16_t v294;
  char *v295;
  int8x16_t *v296;
  uint64_t v297;
  char *v298;
  char *v299;
  size_t v300;
  char *v301;
  int8x16_t *v302;
  size_t v303;
  unint64_t v304;
  unsigned __int128 *v305;
  unsigned __int128 v306;
  uint64_t v307;
  _WORD *v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  int8x16_t v312;
  __int128 v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  unint64_t v318;
  BOOL v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  int8x16_t *v323;
  __int16 v324;
  uint64_t v325;
  char *v326;
  int8x16_t *v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  int8x16_t v331;
  int8x16_t v332;
  char *v333;
  char *v334;
  char *v335;
  _WORD *v336;
  unint64_t v337;
  unint64_t v338;
  BOOL v339;
  uint64_t v340;
  unint64_t v341;
  _WORD *v342;
  int8x16_t *v343;
  __int16 v344;
  _WORD *v345;
  _WORD *v346;
  unint64_t v347;
  unint64_t v348;
  BOOL v349;
  unint64_t v350;
  char *v351;
  int8x16_t *v352;
  char v353;
  char *v354;
  _BYTE *v355;
  int8x16_t *v356;
  size_t v357;
  unint64_t v358;
  unsigned __int128 *v359;
  unsigned __int128 v360;
  uint64_t v361;
  size_t v362;
  size_t v363;
  unint64_t v364;
  unint64_t v365;
  BOOL v366;
  unint64_t v367;
  _BYTE *v368;
  int8x16_t *v369;
  char v370;
  _BYTE *v371;
  _BYTE *v372;
  int v373;
  WTF::StringBuilder *v374;
  uint64_t v375;
  size_t v376;
  uint64_t v377;
  char *v378;
  char *v379;
  char *v380;
  int8x16_t v381;
  int8x16_t *v382;
  uint64_t v383;
  char *v384;
  char *v385;
  char *v386;
  int8x16_t *v387;
  size_t v388;
  unint64_t v389;
  unsigned __int128 *v390;
  unsigned __int128 v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  char *v395;
  int8x16_t v396;
  int8x16_t v397;
  char *v398;
  char *v399;
  char *v400;
  char *v401;
  uint64_t v402;
  unint64_t v403;
  BOOL v404;
  uint64_t v405;
  unint64_t v406;
  char *v407;
  int8x16_t *v408;
  __int16 v409;
  char *v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  WTF::StringBuilder *v416;
  size_t v417;
  unint64_t v418;
  BOOL v419;
  unint64_t v420;
  char *v421;
  int8x16_t *v422;
  char v423;
  char *v424;
  WTF::StringBuilder *v425;
  int v426;
  WTF::StringBuilder *v427;
  uint64_t v428;
  size_t v429;
  uint64_t v430;
  _WORD *v431;
  _WORD *v432;
  size_t v433;
  int8x16_t v434;
  _WORD *v435;
  int8x16_t *v436;
  uint64_t v437;
  _BYTE *v438;
  _BYTE *v439;
  _BYTE *v440;
  size_t v441;
  _BYTE *v442;
  int8x16_t *v443;
  size_t v444;
  unint64_t v445;
  unsigned __int128 *v446;
  unsigned __int128 v447;
  uint64_t v448;
  unint64_t v449;
  char *v450;
  int8x16_t v451;
  int8x16_t v452;
  char *v453;
  char *v454;
  char *v455;
  _WORD *v456;
  unint64_t v457;
  BOOL v458;
  uint64_t v459;
  unint64_t v460;
  _WORD *v461;
  int8x16_t *v462;
  __int16 v463;
  uint64_t v464;
  _WORD *v465;
  _WORD *v466;
  int8x16_t *v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  char *v471;
  int8x16_t v472;
  int8x16_t v473;
  char *v474;
  char *v475;
  char *v476;
  _WORD *v477;
  unint64_t v478;
  BOOL v479;
  uint64_t v480;
  unint64_t v481;
  _WORD *v482;
  int8x16_t *v483;
  __int16 v484;
  _WORD *v485;
  _WORD *v486;
  int v487;
  WTF::StringBuilder *v488;
  unint64_t v489;
  BOOL v490;
  unint64_t v491;
  _BYTE *v492;
  int8x16_t *v493;
  char v494;
  _BYTE *v495;
  _BYTE *v496;
  int8x16_t *v497;
  size_t v498;
  unint64_t v499;
  unsigned __int128 *v500;
  unsigned __int128 v501;
  uint64_t v502;
  _BYTE *v503;
  unint64_t v504;
  size_t v505;
  BOOL v506;
  unint64_t v507;
  _BYTE *v508;
  int8x16_t *v509;
  char v510;
  _BYTE *v511;
  _BYTE *v512;
  size_t v513;
  uint64_t v514;
  char *v515;
  char *v516;
  char *v517;
  int8x16_t v518;
  int8x16_t *v519;
  uint64_t v520;
  char *v521;
  char *v522;
  char *v523;
  int8x16_t *v524;
  size_t v525;
  unint64_t v526;
  unsigned __int128 *v527;
  unsigned __int128 v528;
  char *v529;
  uint64_t v530;
  unint64_t v531;
  char *v532;
  int8x16_t v533;
  int8x16_t v534;
  char *v535;
  char *v536;
  char *v537;
  char *v538;
  uint64_t v539;
  unint64_t v540;
  BOOL v541;
  uint64_t v542;
  unint64_t v543;
  char *v544;
  int8x16_t *v545;
  __int16 v546;
  char *v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  char v552;
  WTF::StringBuilder *v553;
  size_t v554;
  unint64_t v555;
  BOOL v556;
  unint64_t v557;
  char *v558;
  int8x16_t *v559;
  char v560;
  char *v561;
  WTF::StringBuilder *v562;
  int v563;
  WTF::StringBuilder *v564;
  uint8x8_t *v565;
  uint16x8_t *v566;
  unint64_t v567;
  uint8x16_t v568;
  uint16x8_t v569;
  uint16x8_t v570;
  uint8x8_t *v571;
  uint16x8_t *v572;
  unint64_t v573;
  uint8x8_t v574;
  uint8x8_t *v575;
  uint16x8_t *v576;
  unint64_t v577;
  uint8x16_t v578;
  uint16x8_t v579;
  uint16x8_t v580;
  uint8x8_t *v581;
  uint16x8_t *v582;
  unint64_t v583;
  uint8x8_t v584;
  uint8x8_t *v585;
  uint16x8_t *v586;
  unint64_t v587;
  uint8x16_t v588;
  uint16x8_t v589;
  uint16x8_t v590;
  uint8x8_t *v591;
  uint16x8_t *v592;
  unint64_t v593;
  uint8x8_t v594;
  uint8x8_t *v595;
  uint16x8_t *v596;
  unint64_t v597;
  uint8x16_t v598;
  uint16x8_t v599;
  uint16x8_t v600;
  uint8x8_t *v601;
  uint16x8_t *v602;
  unint64_t v603;
  uint8x8_t v604;
  uint8x8_t *v605;
  uint16x8_t *v606;
  unint64_t v607;
  uint8x16_t v608;
  uint16x8_t v609;
  uint16x8_t v610;
  uint8x8_t *v611;
  uint16x8_t *v612;
  unint64_t v613;
  uint8x8_t v614;
  uint8x8_t *v615;
  uint16x8_t *v616;
  unint64_t v617;
  uint8x16_t v618;
  uint16x8_t v619;
  uint16x8_t v620;
  uint8x8_t *v621;
  uint16x8_t *v622;
  unint64_t v623;
  uint8x8_t v624;
  int8x16_t *v625;
  int8x16_t *v626;
  unint64_t v627;
  int8x16_t v628;
  int8x16_t v629;
  int8x16_t v630;
  int8x16_t v631;
  int16x8_t *v632;
  int8x8_t *v633;
  unint64_t v634;
  int16x8_t v635;
  int8x16_t *v636;
  int8x16_t *v637;
  unint64_t v638;
  int8x16_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int16x8_t *v643;
  int8x8_t *v644;
  unint64_t v645;
  int16x8_t v646;
  int8x16_t *v647;
  int8x16_t *v648;
  unint64_t v649;
  int8x16_t v650;
  int8x16_t v651;
  int8x16_t v652;
  int8x16_t v653;
  int16x8_t *v654;
  int8x8_t *v655;
  unint64_t v656;
  int16x8_t v657;
  int8x16_t *v658;
  int8x16_t *v659;
  unint64_t v660;
  int8x16_t v661;
  int8x16_t v662;
  int8x16_t v663;
  int8x16_t v664;
  int16x8_t *v665;
  int8x8_t *v666;
  unint64_t v667;
  int16x8_t v668;
  int8x16_t *v669;
  int8x16_t *v670;
  unint64_t v671;
  int8x16_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int8x16_t v675;
  int16x8_t *v676;
  int8x8_t *v677;
  unint64_t v678;
  int16x8_t v679;
  int8x16_t *v680;
  int8x16_t *v681;
  unint64_t v682;
  int8x16_t v683;
  int8x16_t v684;
  int8x16_t v685;
  int8x16_t v686;
  int16x8_t *v687;
  int8x8_t *v688;
  unint64_t v689;
  int16x8_t v690;
  unsigned int v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unsigned int v695;
  WTF::StringImpl *v696;
  unsigned int v697;
  int v698;
  int j;
  int v700;
  WTF *v701;
  _BOOL8 v702;
  int v703;
  int8x16_t *v704;
  uint64_t v705;
  int v706;
  _BYTE *v707;
  uint64_t v708;
  int v709;
  _QWORD *v710;
  __int128 v711;
  int8x16_t v712;
  const char *v713;
  int v714;
  const char *v715;
  int v716;
  uint64_t v717;
  const char *v718;
  int v719;
  uint64_t v720;
  int v721[3];
  int8x16x2_t v722;
  int8x16x2_t v723;
  int8x16x2_t v724;
  int8x16x2_t v725;
  int8x16x2_t v726;
  int8x16x2_t v727;
  int8x16x2_t v728;
  int8x16x2_t v729;
  int8x16x2_t v730;
  int8x16x2_t v731;
  int8x16x2_t v732;
  int8x16x2_t v733;
  int8x16x2_t v734;
  int8x16x2_t v735;
  int8x16x2_t v736;
  int8x16x2_t v737;
  int8x16x2_t v738;
  int8x16x2_t v739;
  int8x16x2_t v740;
  int8x16x2_t v741;
  int8x16x2_t v742;
  int8x16x2_t v743;
  int8x16x2_t v744;
  int8x16x2_t v745;
  int8x16x2_t v746;
  int8x16x2_t v747;
  int8x16x2_t v748;
  int8x16x2_t v749;
  int8x16x2_t v750;
  int8x16x2_t v751;
  int8x16x2_t v752;
  int8x16x2_t v753;
  int8x16x2_t v754;
  int8x16x2_t v755;
  int8x16x2_t v756;
  int8x16x2_t v757;
  int8x16x2_t v758;
  int8x16x2_t v759;
  int8x16x2_t v760;
  int8x16x2_t v761;
  int8x16x2_t v762;
  int8x16x2_t v763;
  int8x16x2_t v764;
  int8x16x2_t v765;
  int8x16x2_t v766;

  v14 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v14 + 30))
  {
    v15 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = *((_DWORD *)this + 14);
    v713 = "template<typename T>\n";
    v714 = 21;
    LODWORD(v720) = (_DWORD)v715;
    v718 = "struct PackedVec3 {\n";
    v719 = 20;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v15, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v16 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v16;
    v17 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v18 = (4 * v16);
    v19 = *((_QWORD *)v17 + 1);
    if ((v19 || (v19 = *(_QWORD *)v17) != 0) && (*(_BYTE *)(v19 + 16) & 4) == 0)
    {
      v20 = (_OWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v17);
      if (v20)
      {
        v21 = v20;
        if ((_DWORD)v18)
        {
          v22 = 2 * v18;
          memset_pattern16(v20, asc_18260FF50, v22);
          v23 = (size_t)v21 + v22;
          *(_QWORD *)v23 = 0x3B007800200054;
          *(_WORD *)(v23 + 8) = 10;
          v24 = (char *)v21 + v22 + 10;
          memset_pattern16(v24, asc_18260FF50, v22);
          v25 = &v24[v22];
          *(_QWORD *)v25 = 0x3B007900200054;
          *((_WORD *)v25 + 4) = 10;
          v26 = &v24[v22 + 10];
          memset_pattern16(v26, asc_18260FF50, v22);
          v27 = &v26[v22];
          *(_QWORD *)v27 = 0x3B007A00200054;
          *((_WORD *)v27 + 4) = 10;
          memset_pattern16(&v26[v22 + 10], asc_18260FF50, v22);
          v28 = v18;
        }
        else
        {
          v28 = 0;
          *v20 = xmmword_18260FB50;
          v27 = (char *)v20 + 20;
          *((_QWORD *)v20 + 2) = 0x200054000A003BLL;
          *((_DWORD *)v20 + 6) = 3866746;
          *((_WORD *)v20 + 14) = 10;
        }
        v51 = &v27[2 * v28];
        *(_OWORD *)(v51 + 10) = xmmword_18260FB60;
        *(_OWORD *)(v51 + 26) = xmmword_18260FB70;
        *(_OWORD *)(v51 + 42) = xmmword_18260FB80;
        *(_QWORD *)(v51 + 58) = 0x5D002900540028;
        *(_DWORD *)(v51 + 66) = 655419;
        v52 = v51 + 70;
        if ((_DWORD)v18)
        {
          memset_pattern16(v51 + 70, asc_18260FF50, 2 * v18);
          v52 += v18;
          *v52 = 10;
          memset_pattern16(v52 + 1, asc_18260FF50, 2 * v18);
          v53 = v18;
        }
        else
        {
          v53 = 0;
          *v52 = 10;
        }
        v54 = &v52[v53];
        v55 = xmmword_18260FB90;
        *(_OWORD *)(v54 + 1) = xmmword_18260FB90;
        *(_OWORD *)(v54 + 9) = xmmword_18260FBA0;
        v54[17] = 10;
        v56 = v54 + 18;
        if ((_DWORD)v18)
        {
          memset_pattern16(v54 + 18, asc_18260FF50, 2 * v18);
          v56 += v18;
          *v56 = 10;
          memset_pattern16(v56 + 1, asc_18260FF50, 2 * v18);
          v55 = xmmword_18260FB90;
          v57 = v18;
        }
        else
        {
          v57 = 0;
          *v56 = 10;
        }
        v58 = &v56[v57];
        *(_OWORD *)(v58 + 1) = v55;
        *(_OWORD *)(v58 + 9) = xmmword_18260FBB0;
        *(_OWORD *)(v58 + 17) = xmmword_18260FBC0;
        *(_OWORD *)(v58 + 25) = xmmword_18260FBD0;
        *(_OWORD *)(v58 + 33) = xmmword_18260FBE0;
        *(_OWORD *)(v58 + 41) = xmmword_18260FBF0;
        *(_OWORD *)(v58 + 49) = xmmword_18260FC00;
        v59 = v58 + 61;
        *(_QWORD *)(v58 + 57) = 0xA007D0020007BLL;
        if ((_DWORD)v18)
        {
          memset_pattern16(v58 + 61, asc_18260FF50, 2 * v18);
          v59 += v18;
          *v59 = 10;
          memset_pattern16(v59 + 1, asc_18260FF50, 2 * v18);
          v60 = v18;
        }
        else
        {
          v60 = 0;
          *v59 = 10;
        }
        v61 = &v59[v60];
        *(_OWORD *)(v61 + 1) = xmmword_18260FC10;
        *(_OWORD *)(v61 + 9) = xmmword_18260FC20;
        *(_OWORD *)(v61 + 17) = xmmword_18260FC30;
        *(_OWORD *)(v61 + 25) = xmmword_18260FC40;
        *(_OWORD *)(v61 + 33) = xmmword_18260FC50;
        *(_OWORD *)(v61 + 41) = xmmword_18260FC60;
        v62 = v61 + 53;
        *(_QWORD *)(v61 + 49) = 0xA007D0020003BLL;
        if ((_DWORD)v18)
        {
          memset_pattern16(v61 + 53, asc_18260FF50, 2 * v18);
          v63 = v18;
        }
        else
        {
          v63 = 0;
        }
        v722.val[0] = *(int8x16_t *)"operator packed_vec<T, 3>() { return packed_vec<T, 3>(x, y, z); }\n";
        v735.val[0] = *(int8x16_t *)"turn packed_vec<T, 3>(x, y, z); }\n";
        v64 = &v62[v63];
        v748.val[1] = 0uLL;
        v748.val[0] = *(int8x16_t *)"T, 3>(x, y, z); }\n";
        v735.val[1] = 0u;
        v761.val[0] = *(int8x16_t *)"vec<T, 3>() { return packed_vec<T, 3>(x, y, z); }\n";
        v722.val[1] = 0u;
        v65 = (char *)v64;
        vst2q_s8(v65, v722);
        v65 += 32;
        v761.val[1] = 0u;
        vst2q_s8(v65, v761);
        v66 = (char *)(v64 + 32);
        vst2q_s8(v66, v735);
        v67 = (char *)(v64 + 48);
        vst2q_s8(v67, v748);
        *((_DWORD *)v64 + 32) = 655485;
        v68 = v64 + 66;
        if ((_DWORD)v18)
        {
          memset_pattern16(v64 + 66, asc_18260FF50, 2 * v18);
          v68 += v18;
          *v68 = 10;
          memset_pattern16(v68 + 1, asc_18260FF50, 2 * v18);
          v69 = v18;
        }
        else
        {
          v69 = 0;
          *v68 = 10;
        }
        v70 = &v68[v69];
        *(_OWORD *)(v70 + 1) = xmmword_18260FC70;
        *(_OWORD *)(v70 + 9) = xmmword_18260FC80;
        *(_OWORD *)(v70 + 17) = xmmword_18260FC90;
        *(_OWORD *)(v70 + 25) = xmmword_18260FCA0;
        *(_OWORD *)(v70 + 33) = xmmword_18260FCB0;
        *(_OWORD *)(v70 + 41) = xmmword_18260FCC0;
        *(_OWORD *)(v70 + 49) = xmmword_18260FCD0;
        v70[61] = 10;
        v71 = v70 + 62;
        *(_QWORD *)(v70 + 57) = 0x7D0020003B0078;
        if ((_DWORD)v18)
        {
          memset_pattern16(v70 + 62, asc_18260FF50, 2 * v18);
          v72 = v18;
        }
        else
        {
          v72 = 0;
        }
        v723.val[0] = *(int8x16_t *)"device T& operator[](int i) device { return i ? i == 2 ? z : y : x; }\n";
        v736.val[0] = *(int8x16_t *)"ce { return i ? i == 2 ? z : y : x; }\n";
        v73 = (char *)&v71[v72];
        v74 = 0uLL;
        v75 = *(_OWORD *)"i == 2 ? z : y : x; }\n";
        v736.val[1] = 0u;
        v749.val[0] = *(int8x16_t *)"or[](int i) device { return i ? i == 2 ? z : y : x; }\n";
        v723.val[1] = 0u;
        v76 = v73;
        vst2q_s8(v76, v723);
        v76 += 32;
        v749.val[1] = 0u;
        vst2q_s8(v76, v749);
        v77 = v73 + 64;
        vst2q_s8(v77, v736);
        v78 = v73 + 96;
        vst2q_s8(v78, *(int8x16x2_t *)(&v74 - 1));
        *((_QWORD *)v73 + 16) = 0x20003B00780020;
        *((_DWORD *)v73 + 34) = 655485;
        v79 = v73 + 140;
        if ((_DWORD)v18)
        {
          memset_pattern16(v73 + 140, asc_18260FF50, 2 * v18);
          v74 = 0uLL;
          v80 = v18;
        }
        else
        {
          v80 = 0;
        }
        v724.val[0] = *(int8x16_t *)"constant T& operator[](int i) constant { return i ? i == 2 ? z : y : x; }\n";
        v737.val[0] = *(int8x16_t *)"nstant { return i ? i == 2 ? z : y : x; }\n";
        v81 = (char *)&v79[v80];
        v82 = *(_OWORD *)"i ? i == 2 ? z : y : x; }\n";
        v737.val[1] = v74;
        v750.val[0] = *(int8x16_t *)"ator[](int i) constant { return i ? i == 2 ? z : y : x; }\n";
        v724.val[1] = v74;
        v83 = v81;
        vst2q_s8(v83, v724);
        v83 += 32;
        v750.val[1] = v74;
        vst2q_s8(v83, v750);
        v84 = v81 + 64;
        vst2q_s8(v84, v737);
        v85 = v81 + 96;
        vst2q_s8(v85, *(int8x16x2_t *)(&v74 - 1));
        *((_OWORD *)v81 + 8) = xmmword_18260FCE0;
        *((_DWORD *)v81 + 36) = 655485;
        v86 = v81 + 148;
        if ((_DWORD)v18)
        {
          memset_pattern16(v81 + 148, asc_18260FF50, 2 * v18);
          v87 = v18;
        }
        else
        {
          v87 = 0;
        }
        v725.val[0] = *(int8x16_t *)"thread T& operator[](int i) thread { return i ? i == 2 ? z : y : x; }\n";
        v738.val[0] = *(int8x16_t *)"ad { return i ? i == 2 ? z : y : x; }\n";
        v88 = (char *)&v86[v87];
        v89 = 0uLL;
        v90 = *(_OWORD *)"i == 2 ? z : y : x; }\n";
        v738.val[1] = 0u;
        v751.val[0] = *(int8x16_t *)"or[](int i) thread { return i ? i == 2 ? z : y : x; }\n";
        v725.val[1] = 0u;
        v91 = v88;
        vst2q_s8(v91, v725);
        v91 += 32;
        v751.val[1] = 0u;
        vst2q_s8(v91, v751);
        v92 = v88 + 64;
        vst2q_s8(v92, v738);
        v93 = v88 + 96;
        vst2q_s8(v93, *(int8x16x2_t *)(&v89 - 1));
        *((_QWORD *)v88 + 16) = 0x20003B00780020;
        *((_DWORD *)v88 + 34) = 655485;
        v94 = v88 + 140;
        if ((_DWORD)v18)
        {
          memset_pattern16(v88 + 140, asc_18260FF50, 2 * v18);
          v89 = 0uLL;
        }
        else
        {
          v18 = 0;
        }
        v726.val[0] = *(int8x16_t *)"threadgroup T& operator[](int i) threadgroup { return i ? i == 2 ? z : y : x; }\n";
        v739.val[0] = *(int8x16_t *)" threadgroup { return i ? i == 2 ? z : y : x; }\n";
        v95 = (size_t)&v94[v18];
        v96 = *(_OWORD *)"eturn i ? i == 2 ? z : y : x; }\n";
        v739.val[1] = v89;
        v752.val[0] = *(int8x16_t *)"perator[](int i) threadgroup { return i ? i == 2 ? z : y : x; }\n";
        v726.val[1] = v89;
        v97 = (char *)v95;
        vst2q_s8(v97, v726);
        v97 += 32;
        v752.val[1] = v89;
        vst2q_s8(v97, v752);
        v98 = (char *)(v95 + 64);
        vst2q_s8(v98, v739);
        v99 = (char *)(v95 + 96);
        vst2q_s8(v99, *(int8x16x2_t *)(&v89 - 1));
        *(_OWORD *)(v95 + 128) = xmmword_18260FCF0;
        *(_OWORD *)(v95 + 144) = xmmword_18260FD00;
      }
    }
    else
    {
      v29 = MEMORY[0x186DAB068]();
      if (v29)
      {
        v30 = v29;
        if ((_DWORD)v18)
        {
          memset((void *)v29, 32, v18);
          v31 = v30 + v18;
          *(_DWORD *)v31 = 997728340;
          *(_BYTE *)(v31 + 4) = 10;
          v32 = (char *)(v30 + v18 + 5);
          memset(v32, 32, v18);
          v33 = &v32[v18];
          *(_DWORD *)v33 = 997793876;
          v33[4] = 10;
          v34 = &v32[v18 + 5];
          memset(v34, 32, v18);
          v35 = &v34[v18];
          *(_DWORD *)v35 = 997859412;
          v35[4] = 10;
          v36 = &v34[v18 + 5];
          memset(v36, 32, v18);
          qmemcpy(&v36[v18], "uint8_t __padding[sizeof(T)];\n", 30);
          v37 = &v36[v18 + 30];
          memset(v37, 32, v18);
          v38 = &v37[v18];
          *v38++ = 10;
          memset(v38, 32, v18);
          v39 = &v38[v18];
          v39[16] = 10;
          *(_OWORD *)v39 = *(_OWORD *)"PackedVec3() { }\n";
          v40 = &v38[v18 + 17];
          memset(v40, 32, v18);
          v41 = &v40[v18];
          *v41++ = 10;
          memset(v41, 32, v18);
          qmemcpy(&v41[v18], "PackedVec3(packed_vec<T, 3> v) : x(v.x), y(v.y), z(v.z) { }\n", 60);
          v42 = &v41[v18 + 60];
          memset(v42, 32, v18);
          v43 = &v42[v18];
          *v43++ = 10;
          memset(v43, 32, v18);
          qmemcpy(&v43[v18], "operator vec<T, 3>() { return vec<T, 3>(x, y, z); }\n", 52);
          v44 = &v43[v18 + 52];
          memset(v44, 32, v18);
          qmemcpy(&v44[v18], "operator packed_vec<T, 3>() { return packed_vec<T, 3>(x, y, z); }\n", 66);
          v45 = &v44[v18 + 66];
          memset(v45, 32, v18);
          v46 = &v45[v18];
          *v46++ = 10;
          memset(v46, 32, v18);
          qmemcpy(&v46[v18], "T operator[](int i) const { return i ? i == 2 ? z : y : x; }\n", 61);
          v47 = &v46[v18 + 61];
          memset(v47, 32, v18);
          qmemcpy(&v47[v18], "device T& operator[](int i) device { return i ? i == 2 ? z : y : x; }\n", 70);
          v48 = &v47[v18 + 70];
          memset(v48, 32, v18);
          qmemcpy(&v48[v18], "constant T& operator[](int i) constant { return i ? i == 2 ? z : y : x; }\n", 74);
          v49 = &v48[v18 + 74];
          memset(v49, 32, v18);
          v50 = &v49[v18];
          qmemcpy(v50, "thread T& operator[](int i) thread { return i ? i == 2 ? z : y : x; }\n", 70);
          memset(v50 + 70, 32, v18);
        }
        else
        {
          v18 = 0;
          qmemcpy((void *)v29, "T x;\n"
            "T y;\n"
            "T z;\n"
            "uint8_t __padding[sizeof(T)];\n"
            "\n"
            "PackedVec3() { }\n"
            "\n"
            "PackedVec3(packed_vec<T, 3> v) : x(v.x), y(v.y), z(v.z) { }\n"
            "\n"
            "operator vec<T, 3>() { return vec<T, 3>(x, y, z); }\n"
            "operator packed_vec<T, 3>() { return packed_vec<T, 3>(x, y, z); }\n"
            "\n"
            "T operator[](int i) const { return i ? i == 2 ? z : y : x; }\n"
            "device T& operator[](int i) device { return i ? i == 2 ? z : y : x; }\n"
            "constant T& operator[](int i) constant { return i ? i == 2 ? z : y : x; }\n",
            449);
          v50 = (char *)(v29 + 449);
          qmemcpy((void *)(v29 + 449), "thread T& operator[](int i) thread { return i ? i == 2 ? z : y : x; }\n", 70);
        }
        qmemcpy(&v50[v18 + 70], "threadgroup T& operator[](int i) threadgroup { return i ? i == 2 ? z : y : x; }\n", 80);
      }
    }
    v100 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v100;
    v101 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v100;
    v713 = "};\n\n";
    v714 = 4;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v101, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 8))
  {
    *(_BYTE *)(v14 + 8) = 0;
    WTF::StringBuilder::append();
    v103 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v103;
    v104 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v105 = (4 * v103);
    v106 = *((_QWORD *)v104 + 1);
    if ((v106 || (v106 = *(_QWORD *)v104) != 0) && (*(_BYTE *)(v106 + 16) & 4) == 0)
    {
      v107 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v104);
      if (v107)
      {
        v108 = v107;
        if ((_DWORD)v105)
        {
          memset_pattern16(v107, asc_18260FF50, 2 * v105);
          v109 = v105;
        }
        else
        {
          v109 = 0;
        }
        v117 = &v108[2 * v109];
        v118 = xmmword_18260FD10;
        v119 = xmmword_18260FD20;
        *(_OWORD *)v117 = xmmword_18260FD10;
        *((_OWORD *)v117 + 1) = xmmword_18260FD20;
        *((_OWORD *)v117 + 2) = xmmword_18260FD30;
        *((_QWORD *)v117 + 6) = 0x3B0065006E0061;
        *((_WORD *)v117 + 28) = 10;
        v120 = v117 + 58;
        if ((_DWORD)v105)
        {
          memset_pattern16(v117 + 58, asc_18260FF50, 2 * v105);
          v119 = xmmword_18260FD20;
          v118 = xmmword_18260FD10;
          v121 = v105;
        }
        else
        {
          v121 = 0;
        }
        v122 = &v120[2 * v121];
        *(_OWORD *)v122 = v118;
        *((_OWORD *)v122 + 1) = v119;
        *((_OWORD *)v122 + 2) = xmmword_18260FD40;
        *((_QWORD *)v122 + 6) = 0x65006E0061006CLL;
        *((_DWORD *)v122 + 14) = 655419;
        v123 = v122 + 60;
        if ((_DWORD)v105)
        {
          memset_pattern16(v122 + 60, asc_18260FF50, 2 * v105);
          v124 = v105;
        }
        else
        {
          v124 = 0;
        }
        v125 = &v123[2 * v124];
        *(_OWORD *)v125 = xmmword_18260FD50;
        *((_OWORD *)v125 + 1) = xmmword_18260FD60;
        *((_OWORD *)v125 + 2) = xmmword_18260FD70;
        v126 = v125 + 48;
        if ((_DWORD)v105)
        {
          memset_pattern16(v125 + 48, asc_18260FF50, 2 * v105);
          v127 = v105;
        }
        else
        {
          v127 = 0;
        }
        v128 = (char *)v126 + 2 * v127;
        *(_WORD *)v128 = 102;
        *(_OWORD *)(v128 + 2) = xmmword_18260FD80;
        *(_OWORD *)(v128 + 18) = xmmword_18260FD90;
        *(_OWORD *)(v128 + 34) = xmmword_18260FDA0;
        *(_OWORD *)(v128 + 50) = xmmword_18260FDB0;
        *(_QWORD *)(v128 + 66) = 0xA003B00780069;
        v129 = v128 + 74;
        if ((_DWORD)v105)
        {
          memset_pattern16(v128 + 74, asc_18260FF50, 2 * v105);
          v130 = v105;
        }
        else
        {
          v130 = 0;
        }
        v727.val[0] = *(int8x16_t *)"uint get_width(uint lod = 0) const { return FirstPlane.get_width(lod); }\n";
        v740.val[0] = *(int8x16_t *)"st { return FirstPlane.get_width(lod); }\n";
        v131 = &v129[2 * v130];
        v132 = 0uLL;
        v133 = *(_OWORD *)"tPlane.get_width(lod); }\n";
        v740.val[1] = 0u;
        v753.val[0] = *(int8x16_t *)"int lod = 0) const { return FirstPlane.get_width(lod); }\n";
        v727.val[1] = 0u;
        v134 = v131;
        vst2q_s8(v134, v727);
        v134 += 32;
        v753.val[1] = 0u;
        vst2q_s8(v134, v753);
        v135 = v131 + 64;
        vst2q_s8(v135, v740);
        v136 = v131 + 96;
        vst2q_s8(v136, *(int8x16x2_t *)(&v132 - 1));
        *((_OWORD *)v131 + 8) = xmmword_18260FDC0;
        *((_WORD *)v131 + 72) = 10;
        v137 = v131 + 146;
        if ((_DWORD)v105)
        {
          memset_pattern16(v131 + 146, asc_18260FF50, 2 * v105);
          v132 = 0uLL;
        }
        else
        {
          v105 = 0;
        }
        v728.val[0] = *(int8x16_t *)"uint get_height(uint lod = 0) const { return FirstPlane.get_height(lod); }\n";
        v741.val[0] = *(int8x16_t *)"nst { return FirstPlane.get_height(lod); }\n";
        v138 = &v137[2 * v105];
        v139 = *(_OWORD *)"stPlane.get_height(lod); }\n";
        v741.val[1] = v132;
        v754.val[0] = *(int8x16_t *)"uint lod = 0) const { return FirstPlane.get_height(lod); }\n";
        v728.val[1] = v132;
        v140 = v138;
        vst2q_s8(v140, v728);
        v140 += 32;
        v754.val[1] = v132;
        vst2q_s8(v140, v754);
        v141 = v138 + 64;
        vst2q_s8(v141, v741);
        v142 = v138 + 96;
        vst2q_s8(v142, *(int8x16x2_t *)(&v132 - 1));
        *((_OWORD *)v138 + 8) = xmmword_18260FDD0;
        *((_DWORD *)v138 + 36) = 8192032;
        *((_WORD *)v138 + 74) = 10;
      }
    }
    else
    {
      v110 = MEMORY[0x186DAB068]();
      if (v110)
      {
        v111 = v110;
        if ((_DWORD)v105)
        {
          memset((void *)v110, 32, v105);
          qmemcpy((void *)(v111 + v105), "texture2d<float> FirstPlane;\n", 29);
          v112 = (char *)(v111 + v105 + 29);
          memset(v112, 32, v105);
          qmemcpy(&v112[v105], "texture2d<float> SecondPlane;\n", 30);
          v113 = &v112[v105 + 30];
          memset(v113, 32, v105);
          qmemcpy(&v113[v105], "float3x2 UVRemapMatrix;\n", 24);
          v114 = &v113[v105 + 24];
          memset(v114, 32, v105);
          qmemcpy(&v114[v105], "float4x3 ColorSpaceConversionMatrix;\n", 37);
          v115 = &v114[v105 + 37];
          memset(v115, 32, v105);
          v116 = &v115[v105];
          qmemcpy(&v115[v105], "uint get_width(uint lod = 0) const { return FirstPlane.get_width(lod); }\n", 73);
          memset(&v115[v105 + 73], 32, v105);
        }
        else
        {
          v105 = 0;
          qmemcpy((void *)v110, "texture2d<float> FirstPlane;\n"
            "texture2d<float> SecondPlane;\n"
            "float3x2 UVRemapMatrix;\n"
            "float4x3 ColorSpaceConversionMatrix;\n"
            "uint get_width(u",
            136);
          qmemcpy((void *)(v110 + 152), "st { return FirstPlane.get_width(lod); }\n", 41);
          v116 = (char *)(v110 + 120);
          *(_OWORD *)(v110 + 136) = *(_OWORD *)"int lod = 0) const { return FirstPlane.get_width(lod); }\n";
        }
        qmemcpy(&v116[v105 + 73], "uint get_height(uint lod = 0) const { return FirstPlane.get_height(lod); }\n", 75);
      }
    }
    --*((_DWORD *)this + 14);
    WTF::StringBuilder::append();
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 9))
  {
    *(_BYTE *)(v14 + 9) = 0;
    v143 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T, size_t N>\n";
    v714 = 31;
    LODWORD(v717) = v720;
    v718 = "array<typename T::PackedType, N> __pack(array<T, N> unpacked)\n";
    v719 = 62;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v143, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v144 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v144;
    v145 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = v144;
    v713 = "array<typename T::PackedType, N> packed;\n";
    v714 = 41;
    LODWORD(v720) = v144;
    v718 = "for (size_t i = 0; i < N; ++i)\n";
    v719 = 31;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v145, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v146 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v146;
    v147 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v146;
    v713 = "packed[i] = __pack(unpacked[i]);\n";
    v714 = 33;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v147, (int *)&v718, (uint64_t)&v713);
    v148 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v148;
    v149 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v148;
    v713 = "return packed;\n";
    v714 = 15;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v149, (int *)&v718, (uint64_t)&v713);
    v150 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v150;
    v151 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v150;
    v713 = "}\n\n";
    v714 = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v151, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v14 + 30))
    {
      v152 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v720) = *((_DWORD *)this + 14);
      v713 = "template<typename T, size_t N>\n";
      v714 = 31;
      LODWORD(v717) = v720;
      v718 = "array<PackedVec3<T>, N> __pack(array<vec<T, 3>, N> unpacked)\n";
      v719 = 61;
      v721[0] = v720;
      v715 = "{\n";
      v716 = 2;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v152, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
      v153 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v153;
      v154 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v715) = v153;
      v713 = "array<PackedVec3<T>, N> packed;\n";
      v714 = 32;
      LODWORD(v720) = v153;
      v718 = "for (size_t i = 0; i < N; ++i)\n";
      v719 = 31;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v154, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
      v155 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v155;
      v156 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = v155;
      v713 = "packed[i] = PackedVec3<T>(unpacked[i]);\n";
      v714 = 40;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v156, (int *)&v718, (uint64_t)&v713);
      v157 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v157;
      v158 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = v157;
      v713 = "return packed;\n";
      v714 = 15;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v158, (int *)&v718, (uint64_t)&v713);
      v159 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v159;
      v160 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = v159;
      v713 = "}\n\n";
      v714 = 3;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v160, (int *)&v718, (uint64_t)&v713);
      v14 = *((_QWORD *)this + 6);
    }
  }
  if (*(_BYTE *)(v14 + 10))
  {
    *(_BYTE *)(v14 + 10) = 0;
    v161 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T, size_t N>\n";
    v714 = 31;
    LODWORD(v717) = v720;
    v718 = "array<typename T::UnpackedType, N> __unpack(array<T, N> packed)\n";
    v719 = 64;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v161, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v162 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v162;
    v163 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = v162;
    v713 = "array<typename T::UnpackedType, N> unpacked;\n";
    v714 = 45;
    LODWORD(v720) = v162;
    v718 = "for (size_t i = 0; i < N; ++i)\n";
    v719 = 31;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v163, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v164 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v164;
    v165 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v164;
    v713 = "unpacked[i] = __unpack(packed[i]);\n";
    v714 = 35;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v165, (int *)&v718, (uint64_t)&v713);
    v166 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v166;
    v167 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v166;
    v713 = "return unpacked;\n";
    v714 = 17;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v167, (int *)&v718, (uint64_t)&v713);
    v168 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v168;
    v169 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v168;
    v713 = "}\n\n";
    v714 = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v169, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v14 + 30))
    {
      v170 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v720) = *((_DWORD *)this + 14);
      v713 = "template<typename T, size_t N>\n";
      v714 = 31;
      LODWORD(v717) = v720;
      v718 = "array<vec<T, 3>, N> __unpack(array<PackedVec3<T>, N> packed)\n";
      v719 = 61;
      v721[0] = v720;
      v715 = "{\n";
      v716 = 2;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v170, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
      v171 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v171;
      v172 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v715) = v171;
      v713 = "array<vec<T, 3>, N> unpacked;\n";
      v714 = 30;
      LODWORD(v720) = v171;
      v718 = "for (size_t i = 0; i < N; ++i)\n";
      v719 = 31;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v172, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
      v173 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v173;
      v174 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = v173;
      v713 = "unpacked[i] = vec<T, 3>(packed[i]);\n";
      v714 = 36;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v174, (int *)&v718, (uint64_t)&v713);
      v175 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v175;
      v176 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = v175;
      v713 = "return unpacked;\n";
      v714 = 17;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v176, (int *)&v718, (uint64_t)&v713);
      v177 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v177;
      v178 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = v177;
      v713 = "}\n\n";
      v714 = 3;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v178, (int *)&v718, (uint64_t)&v713);
      v14 = *((_QWORD *)this + 6);
    }
  }
  if (*(_BYTE *)(v14 + 11))
  {
    *(_BYTE *)(v14 + 11) = 0;
    v179 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = *((_DWORD *)this + 14);
    v713 = "template<typename T>\n";
    v714 = 21;
    LODWORD(v720) = (_DWORD)v715;
    v718 = "packed_vec<T, 3> __pack(vec<T, 3> unpacked) { return unpacked; }\n\n";
    v719 = 66;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v179, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 12))
  {
    *(_BYTE *)(v14 + 12) = 0;
    v180 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = *((_DWORD *)this + 14);
    v713 = "template<typename T>\n";
    v714 = 21;
    LODWORD(v720) = (_DWORD)v715;
    v718 = "vec<T, 3> __unpack(packed_vec<T, 3> packed) { return packed; }\n\n";
    v719 = 64;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v180, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v14 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v14 + 30))
    {
      v181 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v715) = *((_DWORD *)this + 14);
      v713 = "template<typename T>\n";
      v714 = 21;
      LODWORD(v720) = (_DWORD)v715;
      v718 = "vec<T, 3> __unpack(PackedVec3<T> packed) { return packed; }\n\n";
      v719 = 61;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v181, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
      v14 = *((_QWORD *)this + 6);
    }
  }
  if (*(_BYTE *)(v14 + 13))
  {
    v182 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T>\n";
    v714 = 21;
    LODWORD(v717) = v720;
    v718 = "T __workgroup_uniform_load(threadgroup T* const ptr)\n";
    v719 = 53;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v182, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v183 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v183;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v183, (int8x16_t *)"threadgroup_barrier(mem_flags::mem_threadgroup);\n",
      50,
      v183,
      "auto result = *ptr;\n",
      21,
      v183,
      "threadgroup_barrier(mem_flags::mem_threadgroup);\n",
      50,
      v183,
      "return result;\n",
      16);
    v184 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v184;
    v185 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v184;
    v713 = "}\n\n";
    v714 = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v185, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 14))
  {
    v186 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T, typename U, typename V = conditional_t<is_scalar_v<U>, T, U>>\n";
    v714 = 83;
    LODWORD(v717) = v720;
    v718 = "V __wgslDiv(T lhs, U rhs)\n";
    v719 = 26;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v186, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v187 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v187;
    v188 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = v187;
    v713 = "auto predicate = V(rhs) == V(0);\n";
    v714 = 33;
    LODWORD(v720) = v187;
    v718 = "if constexpr (is_signed_v<U>)\n";
    v719 = 30;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v188, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v189 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v189;
    v190 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v189;
    v713 = "predicate = predicate || (V(lhs) == V(numeric_limits<T>::lowest()) && V(rhs) == V(-1));\n";
    v714 = 88;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v190, (int *)&v718, (uint64_t)&v713);
    v191 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v191;
    v192 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v191;
    v713 = "return lhs / select(V(rhs), V(1), predicate);\n";
    v714 = 46;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v192, (int *)&v718, (uint64_t)&v713);
    v193 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v193;
    v194 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v193;
    v713 = "}\n\n";
    v714 = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v194, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 15))
  {
    v195 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T, typename U, typename V = conditional_t<is_scalar_v<U>, T, U>>\n";
    v714 = 83;
    LODWORD(v717) = v720;
    v718 = "V __wgslMod(T lhs, U rhs)\n";
    v719 = 26;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v195, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v196 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v196;
    v197 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = v196;
    v713 = "auto predicate = V(rhs) == V(0);\n";
    v714 = 33;
    LODWORD(v720) = v196;
    v718 = "if constexpr (is_signed_v<U>)\n";
    v719 = 30;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v197, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v198 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v198;
    v199 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v198;
    v713 = "predicate = predicate || (V(lhs) == V(numeric_limits<T>::lowest()) && V(rhs) == V(-1));\n";
    v714 = 88;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v199, (int *)&v718, (uint64_t)&v713);
    v200 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v200;
    v201 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v200;
    v713 = "return select(lhs % V(rhs), V(0), predicate);\n";
    v714 = 46;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v201, (int *)&v718, (uint64_t)&v713);
    v202 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v202;
    v203 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v202;
    v713 = "}\n\n";
    v714 = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v203, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 16))
  {
    v204 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = *((_DWORD *)this + 14);
    v713 = "template<typename T, typename U>\n";
    v714 = 33;
    LODWORD(v720) = (_DWORD)v715;
    v718 = "struct __frexp_result {\n";
    v719 = 24;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v204, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v205 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v205;
    v206 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = v205;
    v713 = "T fract;\n";
    v714 = 9;
    LODWORD(v720) = v205;
    v718 = "U exp;\n";
    v719 = 7;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v206, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v207 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v207;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v207, (int8x16_t *)"};\n\n",
      5,
      v207,
      "template<typename T, typename U = conditional_t<is_vector_v<T>, vec<int, vec_elements<T>::value ?: 2>, int>>\n",
      110,
      v207,
      "__frexp_result<T, U> __wgslFrexp(T value)\n",
      43,
      v207,
      "{\n",
      3);
    v208 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v208;
    v209 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = v208;
    v713 = "__frexp_result<T, U> result;\n";
    v714 = 29;
    LODWORD(v717) = v208;
    v718 = "result.fract = frexp(value, result.exp);\n";
    v719 = 41;
    v721[0] = v208;
    v715 = "return result;\n";
    v716 = 15;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v209, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v210 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v210;
    v211 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v210;
    v713 = "}\n\n";
    v714 = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v211, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 17))
  {
    v212 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = *((_DWORD *)this + 14);
    v713 = "template<typename T, typename U>\n";
    v714 = 33;
    LODWORD(v720) = (_DWORD)v715;
    v718 = "struct __modf_result {\n";
    v719 = 23;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v212, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v213 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v213;
    v214 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = v213;
    v713 = "T fract;\n";
    v714 = 9;
    LODWORD(v720) = v213;
    v718 = "U whole;\n";
    v719 = 9;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v214, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v215 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v215;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v215, (int8x16_t *)"};\n\n",
      5,
      v215,
      "template<typename T>\n",
      22,
      v215,
      "__modf_result<T, T> __wgslModf(T value)\n",
      41,
      v215,
      "{\n",
      3);
    v216 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v216;
    v217 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = v216;
    v713 = "__modf_result<T, T> result;\n";
    v714 = 28;
    LODWORD(v717) = v216;
    v718 = "result.fract = modf(value, result.whole);\n";
    v719 = 42;
    v721[0] = v216;
    v715 = "return result;\n";
    v716 = 15;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v217, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v218 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v218;
    v219 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v218;
    v713 = "}\n\n";
    v714 = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v219, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 18))
  {
    v220 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = *((_DWORD *)this + 14);
    v713 = "template<typename T, typename U = BOOL>\n";
    v714 = 40;
    LODWORD(v720) = (_DWORD)v715;
    v718 = "struct __atomic_compare_exchange_result {\n";
    v719 = 42;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v220, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v221 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v221;
    v222 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = v221;
    v713 = "T old_value;\n";
    v714 = 13;
    LODWORD(v720) = v221;
    v718 = "U exchanged;\n";
    v719 = 13;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v222, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v223 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v223;
    v224 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = v223;
    v713 = "};\n\n";
    v714 = 4;
    LODWORD(v720) = v223;
    v718 = "#define __wgslAtomicCompareExchangeWeak(atomic, compare, value) \\\n";
    v719 = 66;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v224, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v225 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v225;
    result = WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v225, (int8x16_t *)"({ auto innerCompare = compare; \\\n",
               35,
               v225,
               "BOOL exchanged = atomic_compare_exchange_weak_explicit((atomic), &innerCompare, value, memory_order_relax"
               "ed, memory_order_relaxed); \\\n",
               135,
               v225,
               "__atomic_compare_exchange_result<decltype(compare)> { innerCompare, exchanged }; \\\n",
               84,
               v225,
               "})\n",
               4);
    --*((_DWORD *)this + 14);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 20))
  {
    v226 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T, unsigned N>\n";
    v714 = 33;
    LODWORD(v717) = v720;
    v718 = "T __wgslDot(vec<T, N> lhs, vec<T, N> rhs)\n";
    v719 = 42;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v226, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v227 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v227;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v227, (int8x16_t *)"auto result = lhs[0] * rhs[0] + lhs[1] * rhs[1];\n",
      50,
      v227,
      "if constexpr (N > 2) result += lhs[2] * rhs[2];\n",
      49,
      v227,
      "if constexpr (N > 3) result += lhs[3] * rhs[3];\n",
      49,
      v227,
      "return result;\n",
      16);
    v228 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v228;
    v229 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v228;
    v713 = "}\n";
    v714 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v229, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 27))
  {
    v230 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = *((_DWORD *)this + 14);
    v713 = "int __wgslDot4I8Packed(uint lhs, uint rhs)\n";
    v714 = 43;
    LODWORD(v720) = (_DWORD)v715;
    v718 = "{\n";
    v719 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v230, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v231 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v231;
    v232 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = v231;
    v713 = "auto vec1 = as_type<packed_char4>(lhs);";
    v714 = 39;
    LODWORD(v717) = v231;
    v718 = "auto vec2 = as_type<packed_char4>(rhs);";
    v719 = 39;
    v721[0] = v231;
    v715 = "return vec1[0] * vec2[0] + vec1[1] * vec2[1] + vec1[2] * vec2[2] + vec1[3] * vec2[3];";
    v716 = 85;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v232, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v233 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v233;
    v234 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v233;
    v713 = "}\n";
    v714 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v234, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 28))
  {
    v235 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v715) = *((_DWORD *)this + 14);
    v713 = "uint __wgslDot4U8Packed(uint lhs, uint rhs)\n";
    v714 = 44;
    LODWORD(v720) = (_DWORD)v715;
    v718 = "{\n";
    v719 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v235, (int *)&v715, (uint64_t)&v713, (int *)&v720, (uint64_t)&v718);
    v236 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v236;
    v237 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = v236;
    v713 = "auto vec1 = as_type<packed_uchar4>(lhs);";
    v714 = 40;
    LODWORD(v717) = v236;
    v718 = "auto vec2 = as_type<packed_uchar4>(rhs);";
    v719 = 40;
    v721[0] = v236;
    v715 = "return vec1[0] * vec2[0] + vec1[1] * vec2[1] + vec1[2] * vec2[2] + vec1[3] * vec2[3];";
    v716 = 85;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v237, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v238 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v238;
    v239 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v238;
    v713 = "}\n";
    v714 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v239, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 21))
  {
    v240 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T>\n";
    v714 = 21;
    LODWORD(v717) = v720;
    v718 = "T __wgslFirstLeadingBit(T e)\n";
    v719 = 29;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v240, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v241 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v241;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v241, (int8x16_t *)"if constexpr (is_signed_v<T>)\n", 31, v241, "    return select(T(31 - select(clz(e), clz(~e), e < T(0))), T(-1), e == T(0) || e == T(-1));\n",
      95,
      v241,
      "else\n",
      6,
      v241,
      "    return select(T(31 - clz(e)), T(-1), e == T(0));\n",
      54);
    v242 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v242;
    v243 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v242;
    v713 = "}\n";
    v714 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v243, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 22))
  {
    v244 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T>\n";
    v714 = 21;
    LODWORD(v717) = v720;
    v718 = "T __wgslFirstTrailingBit(T e)\n";
    v719 = 30;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v244, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v245 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v245;
    v246 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v245;
    v713 = "return select(ctz(e), T(-1), e == T(0));\n";
    v714 = 41;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v246, (int *)&v718, (uint64_t)&v713);
    v247 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v247;
    v248 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v247;
    v713 = "}\n";
    v714 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v248, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 23))
  {
    v249 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T>\n";
    v714 = 21;
    LODWORD(v717) = v720;
    v718 = "T __wgslSign(T e)\n";
    v719 = 18;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v249, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v250 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v250;
    v251 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v250;
    v713 = "return select(select(T(-1), T(1), e > 0), T(0), e == 0);\n";
    v714 = 57;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v251, (int *)&v718, (uint64_t)&v713);
    v252 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v252;
    v253 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v252;
    v713 = "}\n";
    v714 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v253, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  if (*(_BYTE *)(v14 + 29))
  {
    v254 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = *((_DWORD *)this + 14);
    v713 = "template<typename T>\n";
    v714 = 21;
    LODWORD(v717) = v720;
    v718 = "T __wgslExtractBits(T e, uint offset, uint count)\n";
    v719 = 50;
    v721[0] = v720;
    v715 = "{\n";
    v716 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v254, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v255 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v255;
    v256 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v720) = v255;
    v713 = "auto o = min(offset, 32u);\n";
    v714 = 27;
    LODWORD(v717) = v255;
    v718 = "auto c = min(count, 32u - o);\n";
    v719 = 30;
    v721[0] = v255;
    v715 = "return extract_bits(e, o, c);\n";
    v716 = 30;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v256, (int *)&v720, (uint64_t)&v713, (int *)&v717, (uint64_t)&v718, v721, (uint64_t)&v715);
    v257 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v257;
    v258 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v718) = v257;
    v713 = "}\n";
    v714 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v258, (int *)&v718, (uint64_t)&v713);
    v14 = *((_QWORD *)this + 6);
  }
  *(_BYTE *)(v14 + 30) = 0;
  v259 = *(unsigned int *)(v14 + 76);
  if ((_DWORD)v259)
  {
    v260 = *(_QWORD **)(v14 + 64);
    v261 = &v260[v259];
    do
    {
      v262 = *v260;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v260 + 16))(*v260) == 56)
      {
        (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, uint64_t))(*(_QWORD *)this + 64))(this, v262);
        goto LABEL_113;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v262 + 16))(v262) == 62 && *(_BYTE *)(v262 + 128) == 2)
      {
        v263 = *(WTF::StringImpl **)(v262 + 80);
        if (v263)
          *(_DWORD *)v263 += 2;
        v264 = *(WTF::String **)(v262 + 172);
        if (((unint64_t)v264 & 0xFF00000000) != 0)
        {
          WTF::String::number(v264);
          v265 = v713;
          v713 = 0;
          if (v263)
          {
            if (*(_DWORD *)v263 == 2)
            {
              WTF::StringImpl::destroy();
              v266 = v713;
              v713 = 0;
              if (v266)
              {
                if (*(_DWORD *)v266 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v266 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v263 -= 2;
            }
          }
          v263 = (WTF::StringImpl *)v265;
        }
        v267 = (uint64_t *)*((_QWORD *)this + 14);
        v268 = *v267;
        if (!*v267)
        {
          v272 = 0;
          goto LABEL_141;
        }
        v269 = *(_DWORD *)(v268 - 8);
        v270 = *((_DWORD *)v263 + 4);
        if (v270 < 0x100)
          v271 = WTF::StringImpl::hashSlowCase(v263);
        else
          v271 = v270 >> 8;
        for (i = 0; ; v271 = i + v274)
        {
          v274 = v271 & v269;
          v275 = *(WTF **)(v268 + 32 * v274);
          if (v275 != (WTF *)-1)
          {
            if (!v275)
            {
              v272 = *v267;
              if (*v267)
                v272 += 32 * *(unsigned int *)(v272 - 4);
LABEL_141:
              v276 = **((_QWORD **)this + 14);
              if (v276)
                v276 += 32 * *(unsigned int *)(v276 - 4);
              if (v276 != v272)
              {
                v277 = (const WTF::StringImpl **)(v262 + 48);
                v278 = (unsigned int *)(v272 + 8);
                goto LABEL_145;
              }
              v279 = *(_QWORD *)(v262 + 120);
              if (v279 && *(_BYTE *)(v279 + 56))
              {
                v278 = (unsigned int *)(v279 + 32);
                v277 = (const WTF::StringImpl **)(v262 + 48);
LABEL_145:
                WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::add<WGSL::ConstantValue const&>((uint64_t *)this + 15, v277, v278, (uint64_t)&v713);
              }
              if (v263)
              {
                if (*(_DWORD *)v263 == 2)
                  WTF::StringImpl::destroy();
                else
                  *(_DWORD *)v263 -= 2;
              }
              break;
            }
            if ((WTF::equal(v275, v263, a3) & 1) != 0)
            {
              v272 = v268 + 32 * v274;
              goto LABEL_141;
            }
          }
          ++i;
        }
      }
LABEL_113:
      ++v260;
    }
    while (v260 != v261);
    v14 = *((_QWORD *)this + 6);
    v280 = *(unsigned int *)(v14 + 76);
    if (!(_DWORD)v280)
      goto LABEL_655;
    v281 = *(_QWORD **)(v14 + 64);
    v282 = &v281[v280];
    v711 = xmmword_18260FDF0;
    v712 = 0u;
    v710 = v282;
    while (1)
    {
      v283 = *v281;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v281 + 16))(*v281) != 56 || *(_BYTE *)(v283 + 88) != 7)
        goto LABEL_156;
      v284 = *(unsigned int *)(*(_QWORD *)(v283 + 112) + 48);
      if ((_DWORD)v284 == -1)
        goto LABEL_672;
      v713 = (const char *)&v718;
      if (!((unsigned int (*)(const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v284])(&v713))
        goto LABEL_156;
      v285 = *(_QWORD *)(*(_QWORD *)(v283 + 96) + 48);
      if (v285)
        *(_DWORD *)v285 += 2;
      v286 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v287 = *(_QWORD *)(v283 + 48);
      v288 = (4 * *((_DWORD *)this + 14));
      v289 = *((_QWORD *)v286 + 1);
      if ((v289 || (v289 = *(_QWORD *)v286) != 0) && (*(_BYTE *)(v289 + 16) & 4) == 0
        || v287 && (*(_BYTE *)(v287 + 16) & 4) == 0
        || v285 && (*(_BYTE *)(v285 + 16) & 4) == 0)
      {
        v290 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v286);
        if (v290)
        {
          v291 = v290;
          if ((_DWORD)v288)
          {
            memset_pattern16(v290, asc_18260FF50, 2 * v288);
            v292 = v288;
            v293 = v711;
            v294 = v712;
            v295 = &v291[2 * v288];
            if (v287)
              goto LABEL_173;
LABEL_186:
            v307 = 0;
            *(_OWORD *)v295 = xmmword_18260FDE0;
            v308 = v295 + 16;
            v711 = v293;
            v712 = v294;
            if (!v285)
            {
LABEL_187:
              v309 = 0;
LABEL_235:
              v345 = &v308[v309];
              *(_OWORD *)v345 = xmmword_18260FDF0;
              *((_DWORD *)v345 + 4) = 2687076;
              v345[10] = 10;
              v346 = v345 + 11;
              if ((_DWORD)v288)
                memset_pattern16(v345 + 11, asc_18260FF50, 2 * v288);
              else
                v288 = 0;
              *(_DWORD *)&v346[v288] = 655483;
              goto LABEL_283;
            }
LABEL_212:
            v327 = *(int8x16_t **)(v285 + 8);
            v328 = *(unsigned int *)(v285 + 4);
            if ((*(_BYTE *)(v285 + 16) & 4) == 0)
            {
              if ((_DWORD)v328)
              {
                if ((_DWORD)v328 == 1)
                  *v308 = v327->i16[0];
                else
                  memcpy(v308, v327, 2 * v328);
              }
              goto LABEL_234;
            }
            if (v328 < 0x40)
            {
              v329 = (unint64_t)v308;
              v336 = &v308[v328];
              if (v308 != v336)
                goto LABEL_222;
            }
            else
            {
              v329 = (unint64_t)&v308[v328 & 0xFFFFFFC0];
              v330 = (char *)v308;
              do
              {
                v730.val[0] = *v327;
                v331 = v327[1];
                v743.val[0] = v327[2];
                v332 = v327[3];
                v327 += 4;
                v756.val[0] = v332;
                v743.val[1] = v294;
                v762.val[0] = v331;
                v730.val[1] = v294;
                v333 = v330;
                vst2q_s8(v333, v730);
                v333 += 32;
                v756.val[1] = v294;
                v762.val[1] = v294;
                vst2q_s8(v333, v762);
                v334 = v330 + 64;
                vst2q_s8(v334, v743);
                v335 = v330 + 96;
                v330 += 128;
                vst2q_s8(v335, v756);
              }
              while (v330 != (char *)v329);
              v336 = &v308[v328];
              if ((_WORD *)v329 == v336)
                goto LABEL_234;
LABEL_222:
              v337 = (unint64_t)&v291[2 * v307 + 2 * v328 + 2 * v292 - v329];
              v338 = v337 + 14;
              if (v337 >= 0xFFFFFFFFFFFFFFF2
                || (v329 < (unint64_t)v327->u64 + (v338 >> 1) + 1
                  ? (v339 = (unint64_t)v327 >= v329 + (v338 & 0xFFFFFFFFFFFFFFFELL) + 2)
                  : (v339 = 1),
                    !v339))
              {
                v342 = (_WORD *)v329;
                v343 = v327;
                goto LABEL_231;
              }
              v340 = (v338 >> 1) + 1;
              if (v338 >= 0x3E)
              {
                v341 = v340 & 0xFFFFFFFFFFFFFFE0;
                v575 = (uint8x8_t *)&v327[1];
                v576 = (uint16x8_t *)(v329 + 32);
                v577 = v340 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v578 = *(uint8x16_t *)v575[-2].i8;
                  v579 = vmovl_u8(*v575);
                  v580 = vmovl_high_u8(*(uint8x16_t *)v575->i8);
                  v576[-2] = vmovl_u8(*(uint8x8_t *)v578.i8);
                  v576[-1] = vmovl_high_u8(v578);
                  *v576 = v579;
                  v576[1] = v580;
                  v576 += 4;
                  v575 += 4;
                  v577 -= 32;
                }
                while (v577);
                if (v340 != v341)
                {
                  if ((v340 & 0x18) == 0)
                  {
                    v343 = (int8x16_t *)((char *)v327 + v341);
                    v342 = (_WORD *)(v329 + 2 * v341);
                    goto LABEL_231;
                  }
                  goto LABEL_558;
                }
              }
              else
              {
                v341 = 0;
LABEL_558:
                v342 = (_WORD *)(v329 + 2 * (v340 & 0xFFFFFFFFFFFFFFF8));
                v343 = (int8x16_t *)((char *)v327 + (v340 & 0xFFFFFFFFFFFFFFF8));
                v581 = (uint8x8_t *)&v327->i8[v341];
                v582 = (uint16x8_t *)(v329 + 2 * v341);
                v583 = v341 - (v340 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v584 = *v581++;
                  *v582++ = vmovl_u8(v584);
                  v583 += 8;
                }
                while (v583);
                if (v340 != (v340 & 0xFFFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_231:
                    v344 = v343->u8[0];
                    v343 = (int8x16_t *)((char *)v343 + 1);
                    *v342++ = v344;
                  }
                  while (v342 != v336);
                }
              }
            }
LABEL_234:
            v309 = *(unsigned int *)(v285 + 4);
            goto LABEL_235;
          }
          v292 = 0;
          v293 = v711;
          v294 = v712;
          v295 = v290;
          if (!v287)
            goto LABEL_186;
LABEL_173:
          v296 = *(int8x16_t **)(v287 + 8);
          v297 = *(unsigned int *)(v287 + 4);
          if ((*(_BYTE *)(v287 + 16) & 4) == 0)
          {
            if ((_DWORD)v297)
            {
              if ((_DWORD)v297 == 1)
              {
                *(_WORD *)v295 = v296->i16[0];
              }
              else
              {
                memcpy(v295, v296, 2 * v297);
                v293 = v711;
                v294 = v712;
              }
            }
LABEL_211:
            v307 = *(unsigned int *)(v287 + 4);
            v326 = &v295[2 * v307];
            *(_OWORD *)v326 = xmmword_18260FDE0;
            v308 = v326 + 16;
            v711 = v293;
            v712 = v294;
            if (!v285)
              goto LABEL_187;
            goto LABEL_212;
          }
          if (v297 < 0x40)
          {
            v310 = (unint64_t)v295;
            v317 = &v295[2 * v297];
            if (v295 == v317)
              goto LABEL_211;
          }
          else
          {
            v310 = (unint64_t)&v295[2 * (v297 & 0xFFFFFFC0)];
            v311 = v295;
            do
            {
              v729.val[0] = *v296;
              v312 = v296[1];
              v742.val[0] = v296[2];
              v313 = (__int128)v296[3];
              v296 += 4;
              v293 = v313;
              v742.val[1] = v294;
              v755.val[0] = v312;
              v729.val[1] = v294;
              v314 = v311;
              vst2q_s8(v314, v729);
              v314 += 32;
              v755.val[1] = v294;
              vst2q_s8(v314, v755);
              v315 = v311 + 64;
              vst2q_s8(v315, v742);
              v316 = v311 + 96;
              vst2q_s8(v316, *(int8x16x2_t *)&v293);
              v311 += 128;
            }
            while (v311 != (char *)v310);
            v317 = &v295[2 * v297];
            if ((char *)v310 == v317)
              goto LABEL_211;
          }
          v318 = (unint64_t)&v291[2 * v297 + 2 * v292 - v310 - 2];
          if (v318 < 0xE
            || (v310 < (unint64_t)v296->u64 + (v318 >> 1) + 1
              ? (v319 = (unint64_t)v296 >= v310 + (v318 & 0xFFFFFFFFFFFFFFFELL) + 2)
              : (v319 = 1),
                !v319))
          {
            v322 = (char *)v310;
            v323 = v296;
            goto LABEL_203;
          }
          v320 = (v318 >> 1) + 1;
          if (v318 < 0x3E)
          {
            v321 = 0;
            goto LABEL_550;
          }
          v321 = v320 & 0xFFFFFFFFFFFFFFE0;
          v565 = (uint8x8_t *)&v296[1];
          v566 = (uint16x8_t *)(v310 + 32);
          v567 = v320 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v568 = *(uint8x16_t *)v565[-2].i8;
            v569 = vmovl_u8(*v565);
            v570 = vmovl_high_u8(*(uint8x16_t *)v565->i8);
            v566[-2] = vmovl_u8(*(uint8x8_t *)v568.i8);
            v566[-1] = vmovl_high_u8(v568);
            *v566 = v569;
            v566[1] = v570;
            v566 += 4;
            v565 += 4;
            v567 -= 32;
          }
          while (v567);
          if (v320 == v321)
            goto LABEL_211;
          if ((v320 & 0x18) != 0)
          {
LABEL_550:
            v322 = (char *)(v310 + 2 * (v320 & 0xFFFFFFFFFFFFFFF8));
            v323 = (int8x16_t *)((char *)v296 + (v320 & 0xFFFFFFFFFFFFFFF8));
            v571 = (uint8x8_t *)&v296->i8[v321];
            v572 = (uint16x8_t *)(v310 + 2 * v321);
            v573 = v321 - (v320 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v574 = *v571++;
              *v572++ = vmovl_u8(v574);
              v573 += 8;
            }
            while (v573);
            if (v320 == (v320 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_211;
          }
          else
          {
            v323 = (int8x16_t *)((char *)v296 + v321);
            v322 = (char *)(v310 + 2 * v321);
          }
          do
          {
LABEL_203:
            v324 = v323->u8[0];
            v323 = (int8x16_t *)((char *)v323 + 1);
            *(_WORD *)v322 = v324;
            v322 += 2;
          }
          while (v322 != v317);
          goto LABEL_211;
        }
      }
      else
      {
        v298 = (char *)MEMORY[0x186DAB068]();
        if (v298)
        {
          v299 = v298;
          if ((_DWORD)v288)
          {
            memset(v298, 32, v288);
            v300 = v288;
            v301 = &v299[v288];
            if (v287)
              goto LABEL_180;
LABEL_206:
            v325 = 0;
LABEL_254:
            v354 = &v301[v325];
            *(_QWORD *)v354 = 0x286B6361705F5F20;
            v355 = v354 + 8;
            if (v285)
            {
              v356 = *(int8x16_t **)(v285 + 8);
              v357 = *(unsigned int *)(v285 + 4);
              if ((*(_BYTE *)(v285 + 16) & 4) != 0)
              {
                if ((_DWORD)v357)
                {
                  if ((_DWORD)v357 == 1)
                    *v355 = v356->i8[0];
                  else
                    memcpy(v355, v356, v357);
                }
              }
              else
              {
                if (v357 < 0x10)
                {
                  v358 = (unint64_t)v355;
                }
                else
                {
                  v358 = (unint64_t)&v355[v357 & 0xFFFFFFF0];
                  v359 = (unsigned __int128 *)v355;
                  do
                  {
                    v360 = (unsigned __int128)vld2q_s8(v356->i8);
                    v356 += 2;
                    *v359++ = v360;
                  }
                  while (v359 != (unsigned __int128 *)v358);
                }
                if ((_BYTE *)v358 != &v355[v357])
                {
                  v362 = (size_t)&v299[v325 + v357 + v300];
                  v363 = v362 - v358;
                  v364 = v362 - v358 + 8;
                  if (v362 - v358 >= 0xFFFFFFFFFFFFFFF8
                    || ((v365 = v362 + 8, v358 < (unint64_t)&v356[1] + 2 * v363)
                      ? (v366 = (unint64_t)v356 >= v365)
                      : (v366 = 1),
                        !v366))
                  {
                    v368 = (_BYTE *)v358;
                    v369 = v356;
                    goto LABEL_275;
                  }
                  if (v364 >= 0x20)
                  {
                    v367 = v364 & 0xFFFFFFFFFFFFFFE0;
                    v658 = v356 + 2;
                    v659 = (int8x16_t *)(v358 + 16);
                    v660 = v364 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v662 = v658[-2];
                      v661 = v658[-1];
                      v664 = *v658;
                      v663 = v658[1];
                      v658 += 4;
                      v659[-1] = vuzp1q_s8(v662, v661);
                      *v659 = vuzp1q_s8(v664, v663);
                      v659 += 2;
                      v660 -= 32;
                    }
                    while (v660);
                    if (v364 != v367)
                    {
                      if ((v364 & 0x18) == 0)
                      {
                        v369 = (int8x16_t *)((char *)v356 + 2 * v367);
                        v368 = (_BYTE *)(v358 + v367);
                        goto LABEL_275;
                      }
                      goto LABEL_622;
                    }
                  }
                  else
                  {
                    v367 = 0;
LABEL_622:
                    v368 = (_BYTE *)(v358 + (v364 & 0xFFFFFFFFFFFFFFF8));
                    v369 = (int8x16_t *)((char *)v356 + 2 * (v364 & 0xFFFFFFFFFFFFFFF8));
                    v665 = (int16x8_t *)((char *)v356 + 2 * v367);
                    v666 = (int8x8_t *)(v358 + v367);
                    v667 = v367 - (v364 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v668 = *v665++;
                      *v666++ = vmovn_s16(v668);
                      v667 += 8;
                    }
                    while (v667);
                    if (v364 != (v364 & 0xFFFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_275:
                        v370 = v369->i8[0];
                        v369 = (int8x16_t *)((char *)v369 + 2);
                        *v368++ = v370;
                      }
                      while (v368 != &v355[v357]);
                    }
                  }
                }
              }
              v361 = *(unsigned int *)(v285 + 4);
            }
            else
            {
              v361 = 0;
            }
            v371 = &v355[v361];
            *(_QWORD *)v371 = *(_QWORD *)" unpacked)\n";
            *(_DWORD *)(v371 + 7) = 170484837;
            v372 = v371 + 11;
            if ((_DWORD)v288)
              memset(v371 + 11, 32, v288);
            else
              v288 = 0;
            *(_WORD *)&v372[v288] = 2683;
            goto LABEL_283;
          }
          v300 = 0;
          v301 = v298;
          if (!v287)
            goto LABEL_206;
LABEL_180:
          v302 = *(int8x16_t **)(v287 + 8);
          v303 = *(unsigned int *)(v287 + 4);
          if ((*(_BYTE *)(v287 + 16) & 4) != 0)
          {
            if ((_DWORD)v303)
            {
              if ((_DWORD)v303 == 1)
                *v301 = v302->i8[0];
              else
                memcpy(v301, v302, v303);
            }
          }
          else
          {
            if (v303 < 0x10)
            {
              v304 = (unint64_t)v301;
            }
            else
            {
              v304 = (unint64_t)&v301[v303 & 0xFFFFFFF0];
              v305 = (unsigned __int128 *)v301;
              do
              {
                v306 = (unsigned __int128)vld2q_s8(v302->i8);
                v302 += 2;
                *v305++ = v306;
              }
              while (v305 != (unsigned __int128 *)v304);
            }
            if ((char *)v304 != &v301[v303])
            {
              v347 = (unint64_t)&v299[v303 + v300];
              v348 = v347 - v304;
              if (v347 - v304 < 8
                || (v304 < (unint64_t)v302 + 2 * v348 ? (v349 = (unint64_t)v302 >= v347) : (v349 = 1),
                    !v349))
              {
                v351 = (char *)v304;
                v352 = v302;
                goto LABEL_250;
              }
              if (v348 >= 0x20)
              {
                v350 = v348 & 0xFFFFFFFFFFFFFFE0;
                v647 = v302 + 2;
                v648 = (int8x16_t *)(v304 + 16);
                v649 = v348 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v651 = v647[-2];
                  v650 = v647[-1];
                  v653 = *v647;
                  v652 = v647[1];
                  v647 += 4;
                  v648[-1] = vuzp1q_s8(v651, v650);
                  *v648 = vuzp1q_s8(v653, v652);
                  v648 += 2;
                  v649 -= 32;
                }
                while (v649);
                if (v348 != v350)
                {
                  if ((v348 & 0x18) == 0)
                  {
                    v352 = (int8x16_t *)((char *)v302 + 2 * v350);
                    v351 = (char *)(v304 + v350);
                    goto LABEL_250;
                  }
                  goto LABEL_614;
                }
              }
              else
              {
                v350 = 0;
LABEL_614:
                v351 = (char *)(v304 + (v348 & 0xFFFFFFFFFFFFFFF8));
                v352 = (int8x16_t *)((char *)v302 + 2 * (v348 & 0xFFFFFFFFFFFFFFF8));
                v654 = (int16x8_t *)((char *)v302 + 2 * v350);
                v655 = (int8x8_t *)(v304 + v350);
                v656 = v350 - (v348 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v657 = *v654++;
                  *v655++ = vmovn_s16(v657);
                  v656 += 8;
                }
                while (v656);
                if (v348 != (v348 & 0xFFFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_250:
                    v353 = v352->i8[0];
                    v352 = (int8x16_t *)((char *)v352 + 2);
                    *v351++ = v353;
                  }
                  while (v351 != &v301[v303]);
                }
              }
            }
          }
          v325 = *(unsigned int *)(v287 + 4);
          goto LABEL_254;
        }
      }
LABEL_283:
      v373 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v373;
      v374 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v375 = *(_QWORD *)(v283 + 48);
      v376 = (4 * v373);
      v377 = *((_QWORD *)v374 + 1);
      if ((v377 || (v377 = *(_QWORD *)v374) != 0) && (*(_BYTE *)(v377 + 16) & 4) == 0
        || v375 && (*(_BYTE *)(v375 + 16) & 4) == 0)
      {
        v378 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v374);
        if (!v378)
          goto LABEL_331;
        v379 = v378;
        if ((_DWORD)v376)
        {
          memset_pattern16(v378, asc_18260FF50, 2 * v376);
          v380 = &v379[2 * v376];
          v381 = v712;
          if (v375)
            goto LABEL_291;
LABEL_305:
          v393 = 0;
LABEL_330:
          v410 = &v380[2 * v393];
          *(_OWORD *)v410 = xmmword_18260FE00;
          *((_WORD *)v410 + 8) = 10;
LABEL_331:
          v411 = *(unsigned int *)(v283 + 84);
          if (!(_DWORD)v411)
            goto LABEL_352;
          goto LABEL_332;
        }
        v376 = 0;
        v380 = v378;
        v381 = v712;
        if (!v375)
          goto LABEL_305;
LABEL_291:
        v382 = *(int8x16_t **)(v375 + 8);
        v383 = *(unsigned int *)(v375 + 4);
        if ((*(_BYTE *)(v375 + 16) & 4) == 0)
        {
          if ((_DWORD)v383)
          {
            if ((_DWORD)v383 == 1)
              *(_WORD *)v380 = v382->i16[0];
            else
              memcpy(v380, v382, 2 * v383);
          }
          goto LABEL_329;
        }
        if (v383 < 0x40)
        {
          v394 = (unint64_t)v380;
          v401 = &v380[2 * v383];
          if (v380 != v401)
            goto LABEL_317;
        }
        else
        {
          v394 = (unint64_t)&v380[2 * (v383 & 0xFFFFFFC0)];
          v395 = v380;
          do
          {
            v731.val[0] = *v382;
            v396 = v382[1];
            v744.val[0] = v382[2];
            v397 = v382[3];
            v382 += 4;
            v757.val[0] = v397;
            v744.val[1] = v381;
            v763.val[0] = v396;
            v731.val[1] = v381;
            v398 = v395;
            vst2q_s8(v398, v731);
            v398 += 32;
            v757.val[1] = v381;
            v763.val[1] = v381;
            vst2q_s8(v398, v763);
            v399 = v395 + 64;
            vst2q_s8(v399, v744);
            v400 = v395 + 96;
            v395 += 128;
            vst2q_s8(v400, v757);
          }
          while (v395 != (char *)v394);
          v401 = &v380[2 * v383];
          if ((char *)v394 == v401)
            goto LABEL_329;
LABEL_317:
          v403 = (unint64_t)&v379[2 * v383 + 2 * v376 - v394 - 2];
          if (v403 < 0xE
            || (v394 < (unint64_t)v382->u64 + (v403 >> 1) + 1
              ? (v404 = (unint64_t)v382 >= v394 + (v403 & 0xFFFFFFFFFFFFFFFELL) + 2)
              : (v404 = 1),
                !v404))
          {
            v407 = (char *)v394;
            v408 = v382;
            goto LABEL_326;
          }
          v405 = (v403 >> 1) + 1;
          if (v403 >= 0x3E)
          {
            v406 = v405 & 0xFFFFFFFFFFFFFFE0;
            v605 = (uint8x8_t *)&v382[1];
            v606 = (uint16x8_t *)(v394 + 32);
            v607 = v405 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v608 = *(uint8x16_t *)v605[-2].i8;
              v609 = vmovl_u8(*v605);
              v610 = vmovl_high_u8(*(uint8x16_t *)v605->i8);
              v606[-2] = vmovl_u8(*(uint8x8_t *)v608.i8);
              v606[-1] = vmovl_high_u8(v608);
              *v606 = v609;
              v606[1] = v610;
              v606 += 4;
              v605 += 4;
              v607 -= 32;
            }
            while (v607);
            if (v405 != v406)
            {
              if ((v405 & 0x18) == 0)
              {
                v408 = (int8x16_t *)((char *)v382 + v406);
                v407 = (char *)(v394 + 2 * v406);
                goto LABEL_326;
              }
              goto LABEL_582;
            }
          }
          else
          {
            v406 = 0;
LABEL_582:
            v407 = (char *)(v394 + 2 * (v405 & 0xFFFFFFFFFFFFFFF8));
            v408 = (int8x16_t *)((char *)v382 + (v405 & 0xFFFFFFFFFFFFFFF8));
            v611 = (uint8x8_t *)&v382->i8[v406];
            v612 = (uint16x8_t *)(v394 + 2 * v406);
            v613 = v406 - (v405 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v614 = *v611++;
              *v612++ = vmovl_u8(v614);
              v613 += 8;
            }
            while (v613);
            if (v405 != (v405 & 0xFFFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_326:
                v409 = v408->u8[0];
                v408 = (int8x16_t *)((char *)v408 + 1);
                *(_WORD *)v407 = v409;
                v407 += 2;
              }
              while (v407 != v401);
            }
          }
        }
LABEL_329:
        v393 = *(unsigned int *)(v375 + 4);
        goto LABEL_330;
      }
      v384 = (char *)MEMORY[0x186DAB068]();
      if (!v384)
        goto LABEL_331;
      v385 = v384;
      if ((_DWORD)v376)
      {
        memset(v384, 32, v376);
        v386 = &v385[v376];
        if (!v375)
          goto LABEL_312;
      }
      else
      {
        v376 = 0;
        v386 = v384;
        if (!v375)
        {
LABEL_312:
          v402 = 0;
          goto LABEL_351;
        }
      }
      v387 = *(int8x16_t **)(v375 + 8);
      v388 = *(unsigned int *)(v375 + 4);
      if ((*(_BYTE *)(v375 + 16) & 4) != 0)
      {
        if ((_DWORD)v388)
        {
          if ((_DWORD)v388 == 1)
            *v386 = v387->i8[0];
          else
            memcpy(v386, v387, v388);
        }
        goto LABEL_350;
      }
      if (v388 >= 0x10)
      {
        v389 = (unint64_t)&v386[v388 & 0xFFFFFFF0];
        v390 = (unsigned __int128 *)v386;
        do
        {
          v391 = (unsigned __int128)vld2q_s8(v387->i8);
          v387 += 2;
          *v390++ = v391;
        }
        while (v390 != (unsigned __int128 *)v389);
        v392 = &v386[v388];
        if ((char *)v389 == &v386[v388])
          goto LABEL_350;
LABEL_338:
        v417 = (size_t)&v385[v388 + v376];
        v418 = v417 - v389;
        if (v417 - v389 < 8
          || (v389 < (unint64_t)v387 + 2 * v418 ? (v419 = (unint64_t)v387 >= v417) : (v419 = 1), !v419))
        {
          v421 = (char *)v389;
          v422 = v387;
          goto LABEL_347;
        }
        if (v418 >= 0x20)
        {
          v420 = v418 & 0xFFFFFFFFFFFFFFE0;
          v625 = v387 + 2;
          v626 = (int8x16_t *)(v389 + 16);
          v627 = v418 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v629 = v625[-2];
            v628 = v625[-1];
            v631 = *v625;
            v630 = v625[1];
            v625 += 4;
            v626[-1] = vuzp1q_s8(v629, v628);
            *v626 = vuzp1q_s8(v631, v630);
            v626 += 2;
            v627 -= 32;
          }
          while (v627);
          if (v418 == v420)
            goto LABEL_350;
          if ((v418 & 0x18) == 0)
          {
            v422 = (int8x16_t *)((char *)v387 + 2 * v420);
            v421 = (char *)(v389 + v420);
            do
            {
LABEL_347:
              v423 = v422->i8[0];
              v422 = (int8x16_t *)((char *)v422 + 2);
              *v421++ = v423;
            }
            while (v421 != v392);
            goto LABEL_350;
          }
        }
        else
        {
          v420 = 0;
        }
        v421 = (char *)(v389 + (v418 & 0xFFFFFFFFFFFFFFF8));
        v422 = (int8x16_t *)((char *)v387 + 2 * (v418 & 0xFFFFFFFFFFFFFFF8));
        v632 = (int16x8_t *)((char *)v387 + 2 * v420);
        v633 = (int8x8_t *)(v389 + v420);
        v634 = v420 - (v418 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v635 = *v632++;
          *v633++ = vmovn_s16(v635);
          v634 += 8;
        }
        while (v634);
        if (v418 == (v418 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_350;
        goto LABEL_347;
      }
      v389 = (unint64_t)v386;
      v392 = &v386[v388];
      if (v386 != &v386[v388])
        goto LABEL_338;
LABEL_350:
      v402 = *(unsigned int *)(v375 + 4);
LABEL_351:
      v424 = &v386[v402];
      *(_QWORD *)v424 = *(_QWORD *)" packed;\n";
      v424[8] = 10;
      v411 = *(unsigned int *)(v283 + 84);
      if (!(_DWORD)v411)
        goto LABEL_352;
LABEL_332:
      v412 = *(uint64_t **)(v283 + 72);
      v413 = 8 * v411;
      do
      {
        v414 = *v412;
        v415 = WGSL::Type::packing(*(WGSL::Type **)(*(_QWORD *)(*v412 + 104) + 24));
        v416 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
        if ((v415 & 0xC) != 0)
        {
          v721[0] = *((_DWORD *)this + 14);
          v713 = "packed.";
          v714 = 7;
          v720 = *(_QWORD *)(v414 + 48);
          v717 = v720;
          v718 = " = __pack(unpacked.";
          v719 = 19;
          v715 = ");\n";
          v716 = 3;
        }
        else
        {
          v721[0] = *((_DWORD *)this + 14);
          v713 = "packed.";
          v714 = 7;
          v720 = *(_QWORD *)(v414 + 48);
          v717 = v720;
          v718 = " = unpacked.";
          v719 = 12;
          v715 = ";\n";
          v716 = 2;
        }
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v416, v721, (uint64_t)&v713, &v720, (uint64_t)&v718, &v717, (uint64_t)&v715);
        ++v412;
        v413 -= 8;
      }
      while (v413);
LABEL_352:
      v425 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = *((_DWORD *)this + 14);
      v713 = "return packed;\n";
      v714 = 15;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v425, (int *)&v718, (uint64_t)&v713);
      v426 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v426;
      v427 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v428 = *(_QWORD *)(v283 + 48);
      v429 = (4 * v426);
      v430 = *((_QWORD *)v427 + 1);
      if ((v430 || (v430 = *(_QWORD *)v427) != 0) && (*(_BYTE *)(v430 + 16) & 4) == 0
        || v285 && (*(_BYTE *)(v285 + 16) & 4) == 0
        || v428 && (*(_BYTE *)(v428 + 16) & 4) == 0)
      {
        v431 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v427);
        if (v431)
        {
          v432 = v431;
          if ((_DWORD)v429)
          {
            memset_pattern16(v431, asc_18260FF50, 2 * v429);
            v432 += v429;
            *(_DWORD *)v432 = 655485;
            v432[2] = 10;
            memset_pattern16(v432 + 3, asc_18260FF50, 2 * v429);
            v433 = v429;
            v434 = v712;
            v435 = &v432[v429 + 3];
            if (v285)
              goto LABEL_362;
LABEL_375:
            v448 = 0;
LABEL_400:
            v465 = &v435[v448];
            *(_OWORD *)v465 = xmmword_18260FE10;
            *((_DWORD *)v465 + 4) = 2621547;
            v466 = v465 + 10;
            if (!v428)
            {
              v469 = 0;
              goto LABEL_425;
            }
            v467 = *(int8x16_t **)(v428 + 8);
            v468 = *(unsigned int *)(v428 + 4);
            if ((*(_BYTE *)(v428 + 16) & 4) == 0)
            {
              if ((_DWORD)v468)
              {
                if ((_DWORD)v468 == 1)
                  *v466 = v467->i16[0];
                else
                  memcpy(v466, v467, 2 * v468);
              }
LABEL_424:
              v469 = *(unsigned int *)(v428 + 4);
LABEL_425:
              v485 = &v466[v469];
              *(_OWORD *)v485 = xmmword_18260FE20;
              v485[8] = 10;
              v486 = v485 + 9;
              if ((_DWORD)v429)
                memset_pattern16(v485 + 9, asc_18260FF50, 2 * v429);
              else
                v429 = 0;
              *(_DWORD *)&v486[v429] = 655483;
              goto LABEL_429;
            }
            if (v468 < 0x40)
            {
              v470 = (unint64_t)(v465 + 10);
              v477 = &v466[v468];
              if (v466 == v477)
                goto LABEL_424;
            }
            else
            {
              v470 = (unint64_t)&v466[v468 & 0xFFFFFFC0];
              v471 = (char *)(v465 + 10);
              do
              {
                v733.val[0] = *v467;
                v472 = v467[1];
                v746.val[0] = v467[2];
                v473 = v467[3];
                v467 += 4;
                v759.val[0] = v473;
                v746.val[1] = v434;
                v765.val[0] = v472;
                v733.val[1] = v434;
                v474 = v471;
                vst2q_s8(v474, v733);
                v474 += 32;
                v759.val[1] = v434;
                v765.val[1] = v434;
                vst2q_s8(v474, v765);
                v475 = v471 + 64;
                vst2q_s8(v475, v746);
                v476 = v471 + 96;
                v471 += 128;
                vst2q_s8(v476, v759);
              }
              while (v471 != (char *)v470);
              v477 = &v466[v468];
              if ((_WORD *)v470 == v477)
                goto LABEL_424;
            }
            v478 = (unint64_t)&v432[v448 + 12 + v468 + v433] - v470;
            if (v478 < 0xE
              || (v470 < (unint64_t)v467->u64 + (v478 >> 1) + 1
                ? (v479 = (unint64_t)v467 >= v470 + (v478 & 0xFFFFFFFFFFFFFFFELL) + 2)
                : (v479 = 1),
                  !v479))
            {
              v482 = (_WORD *)v470;
              v483 = v467;
              goto LABEL_421;
            }
            v480 = (v478 >> 1) + 1;
            if (v478 < 0x3E)
            {
              v481 = 0;
              goto LABEL_574;
            }
            v481 = v480 & 0xFFFFFFFFFFFFFFE0;
            v595 = (uint8x8_t *)&v467[1];
            v596 = (uint16x8_t *)(v470 + 32);
            v597 = v480 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v598 = *(uint8x16_t *)v595[-2].i8;
              v599 = vmovl_u8(*v595);
              v600 = vmovl_high_u8(*(uint8x16_t *)v595->i8);
              v596[-2] = vmovl_u8(*(uint8x8_t *)v598.i8);
              v596[-1] = vmovl_high_u8(v598);
              *v596 = v599;
              v596[1] = v600;
              v596 += 4;
              v595 += 4;
              v597 -= 32;
            }
            while (v597);
            if (v480 == v481)
              goto LABEL_424;
            if ((v480 & 0x18) != 0)
            {
LABEL_574:
              v482 = (_WORD *)(v470 + 2 * (v480 & 0xFFFFFFFFFFFFFFF8));
              v483 = (int8x16_t *)((char *)v467 + (v480 & 0xFFFFFFFFFFFFFFF8));
              v601 = (uint8x8_t *)&v467->i8[v481];
              v602 = (uint16x8_t *)(v470 + 2 * v481);
              v603 = v481 - (v480 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v604 = *v601++;
                *v602++ = vmovl_u8(v604);
                v603 += 8;
              }
              while (v603);
              if (v480 == (v480 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_424;
            }
            else
            {
              v483 = (int8x16_t *)((char *)v467 + v481);
              v482 = (_WORD *)(v470 + 2 * v481);
            }
            do
            {
LABEL_421:
              v484 = v483->u8[0];
              v483 = (int8x16_t *)((char *)v483 + 1);
              *v482++ = v484;
            }
            while (v482 != v477);
            goto LABEL_424;
          }
          v433 = 0;
          *(_DWORD *)v431 = 655485;
          v431[2] = 10;
          v434 = v712;
          v435 = v431 + 3;
          if (!v285)
            goto LABEL_375;
LABEL_362:
          v436 = *(int8x16_t **)(v285 + 8);
          v437 = *(unsigned int *)(v285 + 4);
          if ((*(_BYTE *)(v285 + 16) & 4) == 0)
          {
            if ((_DWORD)v437)
            {
              if ((_DWORD)v437 == 1)
              {
                *v435 = v436->i16[0];
              }
              else
              {
                memcpy(v435, v436, 2 * v437);
                v434 = v712;
              }
            }
            goto LABEL_399;
          }
          if (v437 < 0x40)
          {
            v449 = (unint64_t)v435;
            v456 = &v435[v437];
            if (v435 != v456)
              goto LABEL_382;
          }
          else
          {
            v449 = (unint64_t)&v435[v437 & 0xFFFFFFC0];
            v450 = (char *)v435;
            do
            {
              v732.val[0] = *v436;
              v451 = v436[1];
              v745.val[0] = v436[2];
              v452 = v436[3];
              v436 += 4;
              v758.val[0] = v452;
              v745.val[1] = v434;
              v764.val[0] = v451;
              v732.val[1] = v434;
              v453 = v450;
              vst2q_s8(v453, v732);
              v453 += 32;
              v758.val[1] = v434;
              v764.val[1] = v434;
              vst2q_s8(v453, v764);
              v454 = v450 + 64;
              vst2q_s8(v454, v745);
              v455 = v450 + 96;
              v450 += 128;
              vst2q_s8(v455, v758);
            }
            while (v450 != (char *)v449);
            v456 = &v435[v437];
            if ((_WORD *)v449 == v456)
              goto LABEL_399;
LABEL_382:
            v457 = (unint64_t)&v432[v437 + 2 + v433] - v449;
            if (v457 < 0xE
              || (v449 < (unint64_t)v436->u64 + (v457 >> 1) + 1
                ? (v458 = (unint64_t)v436 >= v449 + (v457 & 0xFFFFFFFFFFFFFFFELL) + 2)
                : (v458 = 1),
                  !v458))
            {
              v461 = (_WORD *)v449;
              v462 = v436;
              goto LABEL_391;
            }
            v459 = (v457 >> 1) + 1;
            if (v457 >= 0x3E)
            {
              v460 = v459 & 0xFFFFFFFFFFFFFFE0;
              v585 = (uint8x8_t *)&v436[1];
              v586 = (uint16x8_t *)(v449 + 32);
              v587 = v459 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v588 = *(uint8x16_t *)v585[-2].i8;
                v589 = vmovl_u8(*v585);
                v590 = vmovl_high_u8(*(uint8x16_t *)v585->i8);
                v586[-2] = vmovl_u8(*(uint8x8_t *)v588.i8);
                v586[-1] = vmovl_high_u8(v588);
                *v586 = v589;
                v586[1] = v590;
                v586 += 4;
                v585 += 4;
                v587 -= 32;
              }
              while (v587);
              if (v459 != v460)
              {
                if ((v459 & 0x18) == 0)
                {
                  v462 = (int8x16_t *)((char *)v436 + v460);
                  v461 = (_WORD *)(v449 + 2 * v460);
                  goto LABEL_391;
                }
                goto LABEL_566;
              }
            }
            else
            {
              v460 = 0;
LABEL_566:
              v461 = (_WORD *)(v449 + 2 * (v459 & 0xFFFFFFFFFFFFFFF8));
              v462 = (int8x16_t *)((char *)v436 + (v459 & 0xFFFFFFFFFFFFFFF8));
              v591 = (uint8x8_t *)&v436->i8[v460];
              v592 = (uint16x8_t *)(v449 + 2 * v460);
              v593 = v460 - (v459 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v594 = *v591++;
                *v592++ = vmovl_u8(v594);
                v593 += 8;
              }
              while (v593);
              if (v459 != (v459 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_391:
                  v463 = v462->u8[0];
                  v462 = (int8x16_t *)((char *)v462 + 1);
                  *v461++ = v463;
                }
                while (v461 != v456);
              }
            }
          }
LABEL_399:
          v448 = *(unsigned int *)(v285 + 4);
          goto LABEL_400;
        }
      }
      else
      {
        v438 = (_BYTE *)MEMORY[0x186DAB068]();
        if (v438)
        {
          v439 = v438;
          if ((_DWORD)v429)
          {
            memset(v438, 32, v429);
            v440 = &v439[v429];
            *(_WORD *)v440 = 2685;
            v440[2] = 10;
            memset(&v439[v429 + 3], 32, v429);
            v441 = v429;
            v442 = &v439[v429 + 3 + v429];
            if (v285)
              goto LABEL_369;
LABEL_394:
            v464 = 0;
LABEL_445:
            v495 = &v442[v464];
            *(_QWORD *)v495 = *(_QWORD *)" __unpack(";
            *((_WORD *)v495 + 4) = 10347;
            v496 = &v442[v464 + 10];
            if (v428)
            {
              v497 = *(int8x16_t **)(v428 + 8);
              v498 = *(unsigned int *)(v428 + 4);
              if ((*(_BYTE *)(v428 + 16) & 4) != 0)
              {
                if ((_DWORD)v498)
                {
                  if ((_DWORD)v498 == 1)
                    *v496 = v497->i8[0];
                  else
                    memcpy(v496, v497, v498);
                }
              }
              else
              {
                if (v498 < 0x10)
                {
                  v499 = (unint64_t)v496;
                }
                else
                {
                  v499 = (unint64_t)&v496[v498 & 0xFFFFFFF0];
                  v500 = (unsigned __int128 *)v496;
                  do
                  {
                    v501 = (unsigned __int128)vld2q_s8(v497->i8);
                    v497 += 2;
                    *v500++ = v501;
                  }
                  while (v500 != (unsigned __int128 *)v499);
                }
                if ((_BYTE *)v499 != &v496[v498])
                {
                  v503 = &v439[v464];
                  v504 = (unint64_t)&v439[2 * v441 + v464 + v498 - v499 + 13];
                  if (v504 < 8
                    || ((v505 = (size_t)&v503[v498],
                         v499 < (unint64_t)&v497[1].u64[1] + 4 * v441 + 2 * v505 - 2 * v499 + 2)
                      ? (v506 = (unint64_t)v497 >= v505 + 2 * v441 + 13)
                      : (v506 = 1),
                        !v506))
                  {
                    v508 = (_BYTE *)v499;
                    v509 = v497;
                    goto LABEL_466;
                  }
                  if (v504 >= 0x20)
                  {
                    v507 = v504 & 0xFFFFFFFFFFFFFFE0;
                    v680 = v497 + 2;
                    v681 = (int8x16_t *)(v499 + 16);
                    v682 = v504 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v684 = v680[-2];
                      v683 = v680[-1];
                      v686 = *v680;
                      v685 = v680[1];
                      v680 += 4;
                      v681[-1] = vuzp1q_s8(v684, v683);
                      *v681 = vuzp1q_s8(v686, v685);
                      v681 += 2;
                      v682 -= 32;
                    }
                    while (v682);
                    if (v504 != v507)
                    {
                      if ((v504 & 0x18) == 0)
                      {
                        v509 = (int8x16_t *)((char *)v497 + 2 * v507);
                        v508 = (_BYTE *)(v499 + v507);
                        goto LABEL_466;
                      }
                      goto LABEL_638;
                    }
                  }
                  else
                  {
                    v507 = 0;
LABEL_638:
                    v508 = (_BYTE *)(v499 + (v504 & 0xFFFFFFFFFFFFFFF8));
                    v509 = (int8x16_t *)((char *)v497 + 2 * (v504 & 0xFFFFFFFFFFFFFFF8));
                    v687 = (int16x8_t *)((char *)v497 + 2 * v507);
                    v688 = (int8x8_t *)(v499 + v507);
                    v689 = v507 - (v504 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v690 = *v687++;
                      *v688++ = vmovn_s16(v690);
                      v689 += 8;
                    }
                    while (v689);
                    if (v504 != (v504 & 0xFFFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_466:
                        v510 = v509->i8[0];
                        v509 = (int8x16_t *)((char *)v509 + 2);
                        *v508++ = v510;
                      }
                      while (v508 != &v496[v498]);
                    }
                  }
                }
              }
              v502 = *(unsigned int *)(v428 + 4);
            }
            else
            {
              v502 = 0;
            }
            v511 = &v496[v502];
            *(_QWORD *)v511 = *(_QWORD *)" packed)\n";
            v511[8] = 10;
            v512 = v511 + 9;
            if ((_DWORD)v429)
              memset(v511 + 9, 32, v429);
            else
              v429 = 0;
            *(_WORD *)&v512[v429] = 2683;
            v487 = *((_DWORD *)this + 14) + 1;
            *((_DWORD *)this + 14) = v487;
            v488 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
            goto LABEL_474;
          }
          v441 = 0;
          v438[2] = 10;
          *(_WORD *)v438 = 2685;
          v442 = v438 + 3;
          if (!v285)
            goto LABEL_394;
LABEL_369:
          v443 = *(int8x16_t **)(v285 + 8);
          v444 = *(unsigned int *)(v285 + 4);
          if ((*(_BYTE *)(v285 + 16) & 4) != 0)
          {
            if ((_DWORD)v444)
            {
              if ((_DWORD)v444 == 1)
                *v442 = v443->i8[0];
              else
                memcpy(v442, v443, v444);
            }
          }
          else
          {
            if (v444 < 0x10)
            {
              v445 = (unint64_t)v442;
            }
            else
            {
              v445 = (unint64_t)&v442[v444 & 0xFFFFFFF0];
              v446 = (unsigned __int128 *)v442;
              do
              {
                v447 = (unsigned __int128)vld2q_s8(v443->i8);
                v443 += 2;
                *v446++ = v447;
              }
              while (v446 != (unsigned __int128 *)v445);
            }
            if ((_BYTE *)v445 != &v442[v444])
            {
              v489 = (unint64_t)&v439[2 * v441 + v444 - v445 + 3];
              if (v489 < 8
                || (v445 < (unint64_t)v443->u64 + 4 * v441 + 2 * (_QWORD)&v439[v444] - 2 * v445 + 6
                  ? (v490 = v443 >= (int8x16_t *)&v439[2 * v441 + 3 + v444])
                  : (v490 = 1),
                    !v490))
              {
                v492 = (_BYTE *)v445;
                v493 = v443;
                goto LABEL_441;
              }
              if (v489 >= 0x20)
              {
                v491 = v489 & 0xFFFFFFFFFFFFFFE0;
                v669 = v443 + 2;
                v670 = (int8x16_t *)(v445 + 16);
                v671 = v489 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v673 = v669[-2];
                  v672 = v669[-1];
                  v675 = *v669;
                  v674 = v669[1];
                  v669 += 4;
                  v670[-1] = vuzp1q_s8(v673, v672);
                  *v670 = vuzp1q_s8(v675, v674);
                  v670 += 2;
                  v671 -= 32;
                }
                while (v671);
                if (v489 != v491)
                {
                  if ((v489 & 0x18) == 0)
                  {
                    v493 = (int8x16_t *)((char *)v443 + 2 * v491);
                    v492 = (_BYTE *)(v445 + v491);
                    goto LABEL_441;
                  }
                  goto LABEL_630;
                }
              }
              else
              {
                v491 = 0;
LABEL_630:
                v492 = (_BYTE *)(v445 + (v489 & 0xFFFFFFFFFFFFFFF8));
                v493 = (int8x16_t *)((char *)v443 + 2 * (v489 & 0xFFFFFFFFFFFFFFF8));
                v676 = (int16x8_t *)((char *)v443 + 2 * v491);
                v677 = (int8x8_t *)(v445 + v491);
                v678 = v491 - (v489 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v679 = *v676++;
                  *v677++ = vmovn_s16(v679);
                  v678 += 8;
                }
                while (v678);
                if (v489 != (v489 & 0xFFFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_441:
                    v494 = v493->i8[0];
                    v493 = (int8x16_t *)((char *)v493 + 2);
                    *v492++ = v494;
                  }
                  while (v492 != &v442[v444]);
                }
              }
            }
          }
          v464 = *(unsigned int *)(v285 + 4);
          goto LABEL_445;
        }
      }
LABEL_429:
      v487 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v487;
      v488 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
LABEL_474:
      v513 = (4 * v487);
      v514 = *((_QWORD *)v488 + 1);
      if ((v514 || (v514 = *(_QWORD *)v488) != 0) && (*(_BYTE *)(v514 + 16) & 4) == 0
        || v285 && (*(_BYTE *)(v285 + 16) & 4) == 0)
      {
        v515 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v488);
        if (!v515)
          goto LABEL_522;
        v516 = v515;
        if ((_DWORD)v513)
        {
          memset_pattern16(v515, asc_18260FF50, 2 * v513);
          v517 = &v516[2 * v513];
          v518 = v712;
          if (v285)
            goto LABEL_482;
LABEL_496:
          v530 = 0;
LABEL_521:
          v547 = &v517[2 * v530];
          *(_OWORD *)v547 = xmmword_18260FDF0;
          *((_DWORD *)v547 + 4) = 3866724;
          *((_WORD *)v547 + 10) = 10;
LABEL_522:
          v548 = *(unsigned int *)(v283 + 84);
          if ((_DWORD)v548)
            goto LABEL_523;
          goto LABEL_543;
        }
        v513 = 0;
        v517 = v515;
        v518 = v712;
        if (!v285)
          goto LABEL_496;
LABEL_482:
        v519 = *(int8x16_t **)(v285 + 8);
        v520 = *(unsigned int *)(v285 + 4);
        if ((*(_BYTE *)(v285 + 16) & 4) == 0)
        {
          if ((_DWORD)v520)
          {
            if ((_DWORD)v520 == 1)
              *(_WORD *)v517 = v519->i16[0];
            else
              memcpy(v517, v519, 2 * v520);
          }
          goto LABEL_520;
        }
        if (v520 < 0x40)
        {
          v531 = (unint64_t)v517;
          v538 = &v517[2 * v520];
          if (v517 != v538)
            goto LABEL_508;
        }
        else
        {
          v531 = (unint64_t)&v517[2 * (v520 & 0xFFFFFFC0)];
          v532 = v517;
          do
          {
            v734.val[0] = *v519;
            v533 = v519[1];
            v747.val[0] = v519[2];
            v534 = v519[3];
            v519 += 4;
            v760.val[0] = v534;
            v747.val[1] = v518;
            v766.val[0] = v533;
            v734.val[1] = v518;
            v535 = v532;
            vst2q_s8(v535, v734);
            v535 += 32;
            v760.val[1] = v518;
            v766.val[1] = v518;
            vst2q_s8(v535, v766);
            v536 = v532 + 64;
            vst2q_s8(v536, v747);
            v537 = v532 + 96;
            v532 += 128;
            vst2q_s8(v537, v760);
          }
          while (v532 != (char *)v531);
          v538 = &v517[2 * v520];
          if ((char *)v531 == v538)
            goto LABEL_520;
LABEL_508:
          v540 = (unint64_t)&v516[2 * v520 + 2 * v513 - v531 - 2];
          if (v540 < 0xE
            || (v531 < (unint64_t)v519->u64 + (v540 >> 1) + 1
              ? (v541 = (unint64_t)v519 >= v531 + (v540 & 0xFFFFFFFFFFFFFFFELL) + 2)
              : (v541 = 1),
                !v541))
          {
            v544 = (char *)v531;
            v545 = v519;
            goto LABEL_517;
          }
          v542 = (v540 >> 1) + 1;
          if (v540 >= 0x3E)
          {
            v543 = v542 & 0xFFFFFFFFFFFFFFE0;
            v615 = (uint8x8_t *)&v519[1];
            v616 = (uint16x8_t *)(v531 + 32);
            v617 = v542 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v618 = *(uint8x16_t *)v615[-2].i8;
              v619 = vmovl_u8(*v615);
              v620 = vmovl_high_u8(*(uint8x16_t *)v615->i8);
              v616[-2] = vmovl_u8(*(uint8x8_t *)v618.i8);
              v616[-1] = vmovl_high_u8(v618);
              *v616 = v619;
              v616[1] = v620;
              v616 += 4;
              v615 += 4;
              v617 -= 32;
            }
            while (v617);
            if (v542 != v543)
            {
              if ((v542 & 0x18) == 0)
              {
                v545 = (int8x16_t *)((char *)v519 + v543);
                v544 = (char *)(v531 + 2 * v543);
                goto LABEL_517;
              }
              goto LABEL_590;
            }
          }
          else
          {
            v543 = 0;
LABEL_590:
            v544 = (char *)(v531 + 2 * (v542 & 0xFFFFFFFFFFFFFFF8));
            v545 = (int8x16_t *)((char *)v519 + (v542 & 0xFFFFFFFFFFFFFFF8));
            v621 = (uint8x8_t *)&v519->i8[v543];
            v622 = (uint16x8_t *)(v531 + 2 * v543);
            v623 = v543 - (v542 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v624 = *v621++;
              *v622++ = vmovl_u8(v624);
              v623 += 8;
            }
            while (v623);
            if (v542 != (v542 & 0xFFFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_517:
                v546 = v545->u8[0];
                v545 = (int8x16_t *)((char *)v545 + 1);
                *(_WORD *)v544 = v546;
                v544 += 2;
              }
              while (v544 != v538);
            }
          }
        }
LABEL_520:
        v530 = *(unsigned int *)(v285 + 4);
        goto LABEL_521;
      }
      v521 = (char *)MEMORY[0x186DAB068]();
      if (!v521)
        goto LABEL_522;
      v522 = v521;
      if ((_DWORD)v513)
      {
        memset(v521, 32, v513);
        v523 = &v522[v513];
        if (!v285)
          goto LABEL_503;
      }
      else
      {
        v513 = 0;
        v523 = v521;
        if (!v285)
        {
LABEL_503:
          v539 = 0;
          goto LABEL_542;
        }
      }
      v524 = *(int8x16_t **)(v285 + 8);
      v525 = *(unsigned int *)(v285 + 4);
      if ((*(_BYTE *)(v285 + 16) & 4) != 0)
      {
        if ((_DWORD)v525)
        {
          if ((_DWORD)v525 == 1)
            *v523 = v524->i8[0];
          else
            memcpy(v523, v524, v525);
        }
        goto LABEL_541;
      }
      if (v525 >= 0x10)
      {
        v526 = (unint64_t)&v523[v525 & 0xFFFFFFF0];
        v527 = (unsigned __int128 *)v523;
        do
        {
          v528 = (unsigned __int128)vld2q_s8(v524->i8);
          v524 += 2;
          *v527++ = v528;
        }
        while (v527 != (unsigned __int128 *)v526);
        v529 = &v523[v525];
        if ((char *)v526 == &v523[v525])
          goto LABEL_541;
LABEL_529:
        v554 = (size_t)&v522[v525 + v513];
        v555 = v554 - v526;
        if (v554 - v526 < 8
          || (v526 < (unint64_t)v524 + 2 * v555 ? (v556 = (unint64_t)v524 >= v554) : (v556 = 1), !v556))
        {
          v558 = (char *)v526;
          v559 = v524;
          goto LABEL_538;
        }
        if (v555 >= 0x20)
        {
          v557 = v555 & 0xFFFFFFFFFFFFFFE0;
          v636 = v524 + 2;
          v637 = (int8x16_t *)(v526 + 16);
          v638 = v555 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v640 = v636[-2];
            v639 = v636[-1];
            v642 = *v636;
            v641 = v636[1];
            v636 += 4;
            v637[-1] = vuzp1q_s8(v640, v639);
            *v637 = vuzp1q_s8(v642, v641);
            v637 += 2;
            v638 -= 32;
          }
          while (v638);
          if (v555 == v557)
            goto LABEL_541;
          if ((v555 & 0x18) == 0)
          {
            v559 = (int8x16_t *)((char *)v524 + 2 * v557);
            v558 = (char *)(v526 + v557);
            do
            {
LABEL_538:
              v560 = v559->i8[0];
              v559 = (int8x16_t *)((char *)v559 + 2);
              *v558++ = v560;
            }
            while (v558 != v529);
            goto LABEL_541;
          }
        }
        else
        {
          v557 = 0;
        }
        v558 = (char *)(v526 + (v555 & 0xFFFFFFFFFFFFFFF8));
        v559 = (int8x16_t *)((char *)v524 + 2 * (v555 & 0xFFFFFFFFFFFFFFF8));
        v643 = (int16x8_t *)((char *)v524 + 2 * v557);
        v644 = (int8x8_t *)(v526 + v557);
        v645 = v557 - (v555 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v646 = *v643++;
          *v644++ = vmovn_s16(v646);
          v645 += 8;
        }
        while (v645);
        if (v555 == (v555 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_541;
        goto LABEL_538;
      }
      v526 = (unint64_t)v523;
      v529 = &v523[v525];
      if (v523 != &v523[v525])
        goto LABEL_529;
LABEL_541:
      v539 = *(unsigned int *)(v285 + 4);
LABEL_542:
      v561 = &v523[v539];
      *(_QWORD *)v561 = *(_QWORD *)" unpacked;\n";
      *(_DWORD *)(v561 + 7) = 171664485;
      v548 = *(unsigned int *)(v283 + 84);
      if ((_DWORD)v548)
      {
LABEL_523:
        v549 = *(uint64_t **)(v283 + 72);
        v550 = 8 * v548;
        do
        {
          v551 = *v549;
          v552 = WGSL::Type::packing(*(WGSL::Type **)(*(_QWORD *)(*v549 + 104) + 24));
          v553 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
          if ((v552 & 0xC) != 0)
          {
            v721[0] = *((_DWORD *)this + 14);
            v713 = "unpacked.";
            v714 = 9;
            v720 = *(_QWORD *)(v551 + 48);
            v717 = v720;
            v718 = " = __unpack(packed.";
            v719 = 19;
            v715 = ");\n";
            v716 = 3;
          }
          else
          {
            v721[0] = *((_DWORD *)this + 14);
            v713 = "unpacked.";
            v714 = 9;
            v720 = *(_QWORD *)(v551 + 48);
            v717 = v720;
            v718 = " = packed.";
            v719 = 10;
            v715 = ";\n";
            v716 = 2;
          }
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v553, v721, (uint64_t)&v713, &v720, (uint64_t)&v718, &v717, (uint64_t)&v715);
          ++v549;
          v550 -= 8;
        }
        while (v550);
      }
LABEL_543:
      v562 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = *((_DWORD *)this + 14);
      v713 = "return unpacked;\n";
      v714 = 17;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v562, (int *)&v718, (uint64_t)&v713);
      v563 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v563;
      v564 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      LODWORD(v718) = v563;
      v713 = "}\n\n";
      v714 = 3;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v564, (int *)&v718, (uint64_t)&v713);
      v282 = v710;
      if (v285)
      {
        if (*(_DWORD *)v285 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v285 -= 2;
      }
LABEL_156:
      if (++v281 == v282)
      {
        v14 = *((_QWORD *)this + 6);
        break;
      }
    }
  }
LABEL_655:
  if (*(_BYTE *)(v14 + 392))
  {
    v691 = *(_DWORD *)(v14 + 372);
    if (v691 && **((_QWORD **)this + 13))
    {
      v692 = *(_QWORD *)(v14 + 360);
      v693 = v692 + 24 * v691;
      do
      {
        v694 = **((_QWORD **)this + 13);
        if (v694)
        {
          v695 = *(_DWORD *)(v694 - 8);
          v696 = *(WTF::StringImpl **)(v692 + 16);
          v697 = *((_DWORD *)v696 + 4);
          if (v697 < 0x100)
            v698 = WTF::StringImpl::hashSlowCase(v696);
          else
            v698 = v697 >> 8;
          for (j = 0; ; v698 = j + v700)
          {
            v700 = v698 & v695;
            v701 = *(WTF **)(v694 + 96 * (v698 & v695));
            if (v701 != (WTF *)-1)
            {
              if (!v701)
                goto LABEL_659;
              if ((WTF::equal(v701, *(const WTF::StringImpl **)(v692 + 16), a3) & 1) != 0)
                break;
            }
            ++j;
          }
          (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, _QWORD))(*(_QWORD *)this + 48))(this, *(_QWORD *)v692);
        }
LABEL_659:
        v692 += 24;
      }
      while (v692 != v693);
    }
  }
  else
  {
    __break(1u);
LABEL_672:
    v702 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>((WTF::StringBuilder *)v702, v703, v704, v705, v706, v707, v708, v709, a9, a10, a11, a12, a13);
  }
  return result;
}

double WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(WTF::StringBuilder *a1, int a2, int8x16_t *a3, uint64_t a4, int a5, _BYTE *a6, uint64_t a7, int a8, _BYTE *a9, uint64_t a10, int a11, char *a12, uint64_t a13)
{
  size_t v13;
  size_t v14;
  size_t v15;
  unint64_t v16;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double result;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  __int128 v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char *v44;
  char *v45;
  char *v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  int8x16_t *v53;
  __int16 v54;
  uint64_t v55;
  unint64_t v56;
  uint8x8_t *v57;
  uint16x8_t *v58;
  unint64_t v59;
  uint8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint8x8_t *v63;
  uint16x8_t *v64;
  unint64_t v65;
  uint8x8_t v66;
  size_t __n;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;

  if (a4)
    v13 = a4 - 1;
  else
    v13 = 0;
  if (v13 >> 31)
    goto LABEL_87;
  if (a7)
    v14 = a7 - 1;
  else
    v14 = 0;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824CB868);
  }
  if (a10)
    v15 = a10 - 1;
  else
    v15 = 0;
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1824CB888);
  }
  v16 = a13 ? a13 - 1 : 0;
  if (v16 >> 31)
  {
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x1824CB848);
  }
  v20 = (4 * a2);
  v21 = (4 * a5);
  v22 = (4 * a8);
  v23 = (4 * a11);
  __n = v16;
  v24 = *((_QWORD *)a1 + 1);
  if (!v24 && (v24 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v24 + 16) & 4) != 0)
  {
    v32 = (_BYTE *)MEMORY[0x186DAB068]();
    if (!v32)
      return result;
    v33 = v32;
    if ((_DWORD)v20)
    {
      memset(v32, 32, v20);
      v33 += v20;
      if (!(_DWORD)v13)
        goto LABEL_31;
    }
    else if (!(_DWORD)v13)
    {
      goto LABEL_31;
    }
    if ((_DWORD)v13 != 1)
    {
      memcpy(v33, a3, v13);
      v34 = &v33[v13];
      if ((_DWORD)v21)
      {
LABEL_32:
        memset(v34, 32, v21);
        v34 += v21;
        if (!(_DWORD)v14)
          goto LABEL_38;
        goto LABEL_36;
      }
LABEL_35:
      if (!(_DWORD)v14)
        goto LABEL_38;
LABEL_36:
      if ((_DWORD)v14 != 1)
      {
        memcpy(v34, a6, v14);
        v35 = &v34[v14];
        if ((_DWORD)v22)
        {
LABEL_39:
          memset(v35, 32, v22);
          v36 = &v35[v22];
          if (!(_DWORD)v15)
            goto LABEL_45;
          goto LABEL_43;
        }
LABEL_42:
        v36 = v35;
        if (!(_DWORD)v15)
          goto LABEL_45;
LABEL_43:
        if ((_DWORD)v15 != 1)
        {
          memcpy(v36, a9, v15);
          v37 = &v36[v15];
          if ((_DWORD)v23)
          {
LABEL_46:
            memset(v37, 32, v23);
            if (!(_DWORD)__n)
              return result;
LABEL_50:
            v38 = &v37[v23];
            if ((_DWORD)__n == 1)
              *v38 = *a12;
            else
              memcpy(v38, a12, __n);
            return result;
          }
LABEL_49:
          v23 = 0;
          if (!(_DWORD)__n)
            return result;
          goto LABEL_50;
        }
        *v36 = *a9;
LABEL_45:
        v37 = &v36[v15];
        if ((_DWORD)v23)
          goto LABEL_46;
        goto LABEL_49;
      }
      *v34 = *a6;
LABEL_38:
      v35 = &v34[v14];
      if ((_DWORD)v22)
        goto LABEL_39;
      goto LABEL_42;
    }
    *v33 = a3->i8[0];
LABEL_31:
    v34 = &v33[v13];
    if ((_DWORD)v21)
      goto LABEL_32;
    goto LABEL_35;
  }
  v25 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!v25)
    return result;
  v28 = v25;
  if ((_DWORD)v20)
  {
    memset_pattern16(v25, asc_18260FF50, 2 * v20);
    v29 = (unint64_t)&v28[2 * v20];
    v30 = (char *)(v29 + 2 * v13);
    v31 = v13 & 0xFFFFFFC0;
    if ((v13 & 0xFFFFFFC0) == 0)
      goto LABEL_58;
  }
  else
  {
    v20 = 0;
    v29 = (unint64_t)v25;
    v30 = &v25[2 * v13];
    v31 = v13 & 0xFFFFFFC0;
    if ((v13 & 0xFFFFFFC0) == 0)
      goto LABEL_58;
  }
  v39 = v29 + 2 * v31;
  v40 = 0uLL;
  do
  {
    v69.val[0] = *a3;
    v41 = a3[1];
    v70.val[0] = a3[2];
    v42 = a3[3];
    a3 += 4;
    v43 = v42;
    v70.val[1] = 0uLL;
    v71.val[0] = v41;
    v69.val[1] = 0uLL;
    v44 = (char *)v29;
    vst2q_s8(v44, v69);
    v44 += 32;
    v71.val[1] = 0uLL;
    vst2q_s8(v44, v71);
    v45 = (char *)(v29 + 64);
    vst2q_s8(v45, v70);
    v46 = (char *)(v29 + 96);
    vst2q_s8(v46, *(int8x16x2_t *)(&v40 - 1));
    v29 += 128;
  }
  while (v29 != v39);
  v29 = v39;
LABEL_58:
  if ((char *)v29 == v30)
    goto LABEL_69;
  v47 = (size_t)&v28[2 * v20 + 2 * a4 - v29];
  v48 = -2;
  if (a4)
    v49 = -2;
  else
    v49 = 0;
  v50 = v47 + v49 - 2;
  if (v50 < 0xE)
    goto LABEL_67;
  if (!a4)
    v48 = 0;
  v51 = v47 + v48 - 2;
  if (v29 < (unint64_t)a3->u64 + (v51 >> 1) + 1 && (unint64_t)a3 < (v51 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
  {
LABEL_67:
    v52 = (char *)v29;
    v53 = a3;
    goto LABEL_68;
  }
  v55 = (v50 >> 1) + 1;
  if (v50 >= 0x3E)
  {
    v56 = v55 & 0xFFFFFFFFFFFFFFE0;
    v57 = (uint8x8_t *)&a3[1];
    v58 = (uint16x8_t *)(v29 + 32);
    v59 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v60 = *(uint8x16_t *)v57[-2].i8;
      v61 = vmovl_u8(*v57);
      v62 = vmovl_high_u8(*(uint8x16_t *)v57->i8);
      v58[-2] = vmovl_u8(*(uint8x8_t *)v60.i8);
      v58[-1] = vmovl_high_u8(v60);
      *v58 = v61;
      v58[1] = v62;
      v58 += 4;
      v57 += 4;
      v59 -= 32;
    }
    while (v59);
    if (v55 == v56)
      goto LABEL_69;
    if ((v55 & 0x18) == 0)
    {
      v53 = (int8x16_t *)((char *)a3 + v56);
      v52 = (char *)(v29 + 2 * v56);
      do
      {
LABEL_68:
        v54 = v53->u8[0];
        v53 = (int8x16_t *)((char *)v53 + 1);
        *(_WORD *)v52 = v54;
        v52 += 2;
      }
      while (v52 != v30);
      goto LABEL_69;
    }
  }
  else
  {
    v56 = 0;
  }
  v52 = (char *)(v29 + 2 * (v55 & 0xFFFFFFFFFFFFFFF8));
  v53 = (int8x16_t *)((char *)a3 + (v55 & 0xFFFFFFFFFFFFFFF8));
  v63 = (uint8x8_t *)&a3->i8[v56];
  v64 = (uint16x8_t *)(v29 + 2 * v56);
  v65 = v56 - (v55 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v66 = *v63++;
    *v64++ = vmovl_u8(v66);
    v65 += 8;
  }
  while (v65);
  if (v55 != (v55 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_68;
LABEL_69:
  if ((_DWORD)v21)
    memset_pattern16(v30, asc_18260FF50, 2 * v21);
  else
    v21 = 0;
  *(_QWORD *)&result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v30[2 * v21], (unint64_t)a6, v14, a8, (unint64_t)a9, v15, a11, v26, (unint64_t)a12, __n).u64[0];
  return result;
}

uint64_t WGSL::Metal::FunctionDefinitionWriter::visitArgumentBufferParameter(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::Parameter *a2)
{
  uint64_t v4;
  WTF::StringBuilder *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BOOL8 v15;
  WGSL::AST::Structure *v16;
  uint64_t v17;
  const char *v18;
  uint64_t *v19;
  WGSL::Metal::FunctionDefinitionWriter *v20;
  WGSL::Metal::FunctionDefinitionWriter *v21;
  WGSL::Metal::FunctionDefinitionWriter *v22;
  WGSL::Metal::FunctionDefinitionWriter *v23;
  WGSL::Metal::FunctionDefinitionWriter *v24;
  WGSL::Metal::FunctionDefinitionWriter *v25;
  WGSL::Metal::FunctionDefinitionWriter *v26;
  WGSL::Metal::FunctionDefinitionWriter *v27;
  WGSL::Metal::FunctionDefinitionWriter *v28;
  WGSL::Metal::FunctionDefinitionWriter *v29;
  WGSL::Metal::FunctionDefinitionWriter *v30;
  const char **v31;

  WTF::StringBuilder::append();
  v17 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 24);
  v18 = (const char *)this;
  v19 = &v17;
  v20 = this;
  v21 = this;
  v22 = this;
  v23 = this;
  v24 = this;
  v25 = this;
  v26 = this;
  v27 = this;
  v28 = this;
  v29 = this;
  v30 = this;
  v4 = *(unsigned int *)(v17 + 48);
  if ((_DWORD)v4 == -1)
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::Metal::FunctionDefinitionWriter::visit((WGSL::Metal::FunctionDefinitionWriter *)v15, v16);
  }
  else
  {
    v31 = &v18;
    ((void (*)(const char ***))*(&off_1E0FD6CA0 + v4))(&v31);
    v5 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v18 = "& ";
    LODWORD(v19) = 2;
    v31 = (const char **)*((_QWORD *)a2 + 7);
    result = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(v5, (unint64_t *)&v18, (uint64_t *)&v31);
    v7 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)*((_QWORD *)a2 + 9);
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        result = *((_QWORD *)this + 5);
        LOBYTE(v18) = 32;
        v11 = *(_QWORD *)(result + 8);
        if (v11
          && (v12 = *(unsigned int *)(result + 16), v12 < *(_DWORD *)(v11 + 4))
          && !*(_QWORD *)result)
        {
          v13 = *(_DWORD *)(v11 + 16);
          v14 = *(_QWORD *)(v11 + 8);
          *(_DWORD *)(result + 16) = v12 + 1;
          if ((v13 & 4) != 0)
            *(_BYTE *)(v14 + v12) = 32;
          else
            *(_WORD *)(v14 + 2 * v12) = 32;
        }
        else
        {
          result = WTF::StringBuilder::append();
        }
        if (!*((_BYTE *)this + 32))
          result = (*(uint64_t (**)(WGSL::Metal::FunctionDefinitionWriter *, uint64_t))(*(_QWORD *)this + 88))(this, v10);
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

void WGSL::Metal::FunctionDefinitionWriter::visit(WGSL::Metal::FunctionDefinitionWriter *this, WGSL::AST::Structure *a2)
{
  WTF::StringBuilder *v4;
  int8x16_t v5;
  int v6;
  int v7;
  WTF::StringBuilder *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringBuilder *v18;
  size_t v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  void *v23;
  BOOL v24;
  uint64_t v25;
  WTF::StringBuilder *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::String *v36;
  uint64_t *v37;
  int v38;
  const char *v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  size_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  _WORD *v62;
  unint64_t v63;
  unint64_t v64;
  _WORD *v65;
  unint64_t v66;
  uint64_t v67;
  size_t v68;
  unsigned int v69;
  char *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  char *v75;
  _BYTE *v76;
  int8x16_t *v77;
  size_t v78;
  unint64_t v79;
  unsigned __int128 *v80;
  unsigned __int128 v81;
  _BYTE *v82;
  uint64_t v83;
  uint8x8_t *v84;
  unint64_t v85;
  uint16x8_t *v86;
  uint8x16_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint8x8_t *v90;
  uint16x8_t *v91;
  unint64_t v92;
  uint8x8_t v93;
  WTF::StringBuilder *v94;
  int v95;
  size_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  size_t v103;
  unint64_t v104;
  size_t v105;
  BOOL v106;
  unint64_t v107;
  _BYTE *v108;
  int8x16_t *v109;
  char v110;
  char *v111;
  _WORD *v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  int8x16_t v120;
  int8x16_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  __int128 v126;
  _BYTE *v127;
  int8x16_t *v128;
  size_t v129;
  unint64_t v130;
  unsigned __int128 *v131;
  unsigned __int128 v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  _WORD *v138;
  _WORD *v139;
  int8x16_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  int8x16_t v145;
  int8x16_t v146;
  char *v147;
  char *v148;
  char *v149;
  _WORD *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  BOOL v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _WORD *v159;
  int8x16_t *v160;
  __int16 v161;
  const char *v162;
  uint8x8_t *v163;
  uint16x8_t *v164;
  unint64_t v165;
  uint8x16_t v166;
  uint16x8_t v167;
  uint16x8_t v168;
  uint8x8_t *v169;
  uint16x8_t *v170;
  unint64_t v171;
  uint8x8_t v172;
  _WORD *v173;
  unint64_t v174;
  BOOL v175;
  uint64_t v176;
  unint64_t v177;
  _WORD *v178;
  int8x16_t *v179;
  __int16 v180;
  int8x16_t *v181;
  int8x16_t *v182;
  unint64_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int16x8_t *v188;
  int8x8_t *v189;
  unint64_t v190;
  int16x8_t v191;
  _WORD *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  _WORD *v196;
  int8x16_t *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  int8x16_t v202;
  int8x16_t v203;
  char *v204;
  char *v205;
  char *v206;
  _WORD *v207;
  unint64_t v208;
  BOOL v209;
  uint64_t v210;
  unint64_t v211;
  _WORD *v212;
  int8x16_t *v213;
  __int16 v214;
  _WORD *v215;
  _WORD *v216;
  _WORD *v217;
  _WORD *v218;
  int8x16_t *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  int8x16_t v224;
  int8x16_t v225;
  char *v226;
  char *v227;
  char *v228;
  _WORD *v229;
  unint64_t v230;
  unint64_t v231;
  BOOL v232;
  uint64_t v233;
  unint64_t v234;
  _WORD *v235;
  int8x16_t *v236;
  __int16 v237;
  _WORD *v238;
  char *v239;
  size_t v240;
  unint64_t v241;
  unint64_t v242;
  BOOL v243;
  unint64_t v244;
  _BYTE *v245;
  int8x16_t *v246;
  char v247;
  _BYTE *v248;
  _BYTE *v249;
  size_t v250;
  _BYTE *v251;
  _BYTE *v252;
  int8x16_t *v253;
  size_t v254;
  unint64_t v255;
  unsigned __int128 *v256;
  unsigned __int128 v257;
  uint64_t v258;
  unint64_t v259;
  size_t v260;
  BOOL v261;
  unint64_t v262;
  _BYTE *v263;
  int8x16_t *v264;
  char v265;
  char *v266;
  size_t v267;
  char *v268;
  _BYTE *v269;
  int8x16_t *v270;
  size_t v271;
  unint64_t v272;
  unsigned __int128 *v273;
  unsigned __int128 v274;
  uint64_t v275;
  unint64_t v276;
  size_t v277;
  BOOL v278;
  unint64_t v279;
  _BYTE *v280;
  int8x16_t *v281;
  char v282;
  char *v283;
  char *v284;
  char *v285;
  int8x16_t *v286;
  size_t v287;
  unint64_t v288;
  unsigned __int128 *v289;
  unsigned __int128 v290;
  uint64_t v291;
  char *v292;
  unint64_t v293;
  BOOL v294;
  unint64_t v295;
  char *v296;
  int8x16_t *v297;
  char v298;
  uint8x8_t *v299;
  uint16x8_t *v300;
  unint64_t v301;
  uint8x16_t v302;
  uint16x8_t v303;
  uint16x8_t v304;
  uint8x8_t *v305;
  uint16x8_t *v306;
  unint64_t v307;
  uint8x8_t v308;
  uint8x8_t *v309;
  uint16x8_t *v310;
  unint64_t v311;
  uint8x16_t v312;
  uint16x8_t v313;
  uint16x8_t v314;
  uint8x8_t *v315;
  uint16x8_t *v316;
  unint64_t v317;
  uint8x8_t v318;
  uint8x8_t *v319;
  uint16x8_t *v320;
  unint64_t v321;
  uint8x16_t v322;
  uint16x8_t v323;
  uint16x8_t v324;
  uint8x8_t *v325;
  uint16x8_t *v326;
  unint64_t v327;
  uint8x8_t v328;
  int8x16_t *v329;
  int8x16_t *v330;
  unint64_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int16x8_t *v336;
  int8x8_t *v337;
  unint64_t v338;
  int16x8_t v339;
  int8x16_t *v340;
  int8x16_t *v341;
  unint64_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  int8x16_t v346;
  int16x8_t *v347;
  int8x8_t *v348;
  unint64_t v349;
  int16x8_t v350;
  int8x16_t *v351;
  int8x16_t *v352;
  unint64_t v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int16x8_t *v358;
  int8x8_t *v359;
  unint64_t v360;
  int16x8_t v361;
  int8x16_t *v362;
  int8x16_t *v363;
  unint64_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int16x8_t *v369;
  int8x8_t *v370;
  unint64_t v371;
  int16x8_t v372;
  int v373;
  uint64_t v374;
  WTF::StringBuilder *v375;
  int v376;
  WTF::StringBuilder *v377;
  WTF::StringBuilder *v378;
  int v379;
  int v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  WTF::StringBuilder *v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  WTF::StringBuilder *v388;
  WTF::StringBuilder *v389;
  int v390;
  WTF::StringBuilder *v391;
  uint64_t v392;
  __int128 v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  size_t v397;
  int v398;
  int v399;
  unsigned int v400;
  uint64_t *v401;
  int8x16_t v402;
  int8x16_t v403;
  uint64_t v404;
  char v405;
  int v406;
  char v407;
  const char *v408;
  int v409;
  uint64_t v410;
  const char *v411;
  _QWORD v412[2];
  _QWORD v413[12];
  int8x16x2_t v414;
  int8x16x2_t v415;
  int8x16x2_t v416;
  int8x16x2_t v417;
  int8x16x2_t v418;
  int8x16x2_t v419;
  int8x16x2_t v420;
  int8x16x2_t v421;
  int8x16x2_t v422;
  int8x16x2_t v423;
  int8x16x2_t v424;
  int8x16x2_t v425;
  int8x16x2_t v426;
  int8x16x2_t v427;
  int8x16x2_t v428;

  v413[10] = *MEMORY[0x1E0C80C00];
  *((_WORD *)this + 30) = *((unsigned __int8 *)a2 + 88) | 0x100;
  v4 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  LODWORD(v404) = *((_DWORD *)this + 14);
  LODWORD(v412[0]) = 7;
  v410 = *((_QWORD *)a2 + 6);
  v411 = "struct ";
  v408 = " {\n";
  v409 = 3;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, (int *)&v404, (unint64_t *)&v411, &v410, (unint64_t *)&v408);
  v6 = *((_DWORD *)this + 14) + 1;
  *((_DWORD *)this + 14) = v6;
  v7 = *((unsigned __int8 *)a2 + 88);
  if (v7 == 7)
  {
    v8 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v9 = *((_QWORD *)a2 + 12);
    LODWORD(v404) = v6;
    LODWORD(v412[0]) = 28;
    v410 = *(_QWORD *)(v9 + 48);
    v411 = "using UnpackedType = struct ";
    v408 = ";\n\n";
    v409 = 3;
  }
  else
  {
    if (v7 != 6)
      goto LABEL_6;
    v8 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v10 = *((_QWORD *)a2 + 13);
    LODWORD(v404) = v6;
    LODWORD(v412[0]) = 26;
    v410 = *(_QWORD *)(v10 + 48);
    v411 = "using PackedType = struct ";
    v408 = ";\n\n";
    v409 = 3;
  }
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v8, (int *)&v404, (unint64_t *)&v411, &v410, (unint64_t *)&v408);
LABEL_6:
  v11 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v11)
  {
    v400 = 0;
    v12 = (uint64_t *)*((_QWORD *)a2 + 9);
    v401 = &v12[v11];
    v13 = 0uLL;
    v399 = v7;
    while (1)
    {
      v14 = *v12;
      v15 = *(_QWORD *)(*(_QWORD *)(*v12 + 104) + 24);
      v402 = v5;
      v403 = v13;
      if (!v15)
        break;
      if (*(_DWORD *)(v15 + 48) != 10)
        break;
      v16 = *(_QWORD *)(v15 + 8);
      if (!v16 || *(_DWORD *)(v16 + 48) || *(_BYTE *)v16 != 10)
        break;
      v17 = *(_QWORD *)(v14 + 48);
      v94 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
      v95 = *((_DWORD *)this + 14);
      v96 = (4 * v95);
      v97 = *((_QWORD *)v94 + 1);
      if ((!v97 && (v97 = *(_QWORD *)v94) == 0 || (*(_BYTE *)(v97 + 16) & 4) != 0)
        && (!v17 || (*(_BYTE *)(v17 + 16) & 4) != 0))
      {
        v101 = (char *)MEMORY[0x186DAB068]();
        if (v101)
        {
          v102 = v101;
          if ((_DWORD)v96)
          {
            memset(v101, 32, v96);
            v103 = v96;
          }
          else
          {
            v103 = 0;
          }
          v397 = v103;
          v125 = &v102[v103];
          v126 = *(_OWORD *)"texture2d<float> __";
          *(_OWORD *)v125 = *(_OWORD *)"texture2d<float> __";
          *(_DWORD *)(v125 + 15) = 1600069694;
          v127 = v125 + 19;
          if (v17)
          {
            v128 = *(int8x16_t **)(v17 + 8);
            v129 = *(unsigned int *)(v17 + 4);
            if ((*(_BYTE *)(v17 + 16) & 4) != 0)
            {
              if ((_DWORD)v129)
              {
                if ((_DWORD)v129 == 1)
                {
                  *v127 = v128->i8[0];
                }
                else
                {
                  memcpy(v127, v128, v129);
                  v126 = *(_OWORD *)"texture2d<float> __";
                }
              }
            }
            else
            {
              if (v129 < 0x10)
              {
                v130 = (unint64_t)(v125 + 19);
              }
              else
              {
                v130 = (unint64_t)&v127[v129 & 0xFFFFFFF0];
                v131 = (unsigned __int128 *)(v125 + 19);
                do
                {
                  v132 = (unsigned __int128)vld2q_s8(v128->i8);
                  v128 += 2;
                  *v131++ = v132;
                }
                while (v131 != (unsigned __int128 *)v130);
              }
              if ((_BYTE *)v130 != &v127[v129])
              {
                v239 = &v102[v129 + v397];
                v240 = (size_t)&v239[-v130];
                v241 = (unint64_t)&v239[-v130 + 19];
                if (v241 < 8
                  || ((v242 = (unint64_t)(v239 + 19), v130 < (unint64_t)v128[2].u64 + 2 * v240 + 6)
                    ? (v243 = (unint64_t)v128 >= v242)
                    : (v243 = 1),
                      !v243))
                {
                  v245 = (_BYTE *)v130;
                  v246 = v128;
                  goto LABEL_288;
                }
                if (v241 >= 0x20)
                {
                  v244 = v241 & 0xFFFFFFFFFFFFFFE0;
                  v329 = v128 + 2;
                  v330 = (int8x16_t *)(v130 + 16);
                  v331 = v241 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v333 = v329[-2];
                    v332 = v329[-1];
                    v335 = *v329;
                    v334 = v329[1];
                    v329 += 4;
                    v330[-1] = vuzp1q_s8(v333, v332);
                    *v330 = vuzp1q_s8(v335, v334);
                    v330 += 2;
                    v331 -= 32;
                  }
                  while (v331);
                  if (v241 != v244)
                  {
                    if ((v241 & 0x18) == 0)
                    {
                      v246 = (int8x16_t *)((char *)v128 + 2 * v244);
                      v245 = (_BYTE *)(v130 + v244);
                      goto LABEL_288;
                    }
                    goto LABEL_407;
                  }
                }
                else
                {
                  v244 = 0;
LABEL_407:
                  v245 = (_BYTE *)(v130 + (v241 & 0xFFFFFFFFFFFFFFF8));
                  v246 = (int8x16_t *)((char *)v128 + 2 * (v241 & 0xFFFFFFFFFFFFFFF8));
                  v336 = (int16x8_t *)((char *)v128 + 2 * v244);
                  v337 = (int8x8_t *)(v130 + v244);
                  v338 = v244 - (v241 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v339 = *v336++;
                    *v337++ = vmovn_s16(v339);
                    v338 += 8;
                  }
                  while (v338);
                  if (v241 != (v241 & 0xFFFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_288:
                      v247 = v246->i8[0];
                      v246 = (int8x16_t *)((char *)v246 + 2);
                      *v245++ = v247;
                    }
                    while (v245 != &v127[v129]);
                  }
                }
              }
            }
            v133 = *(unsigned int *)(v17 + 4);
          }
          else
          {
            v133 = 0;
          }
          v396 = v133;
          v248 = &v127[v133];
          qmemcpy(v248, "_FirstPlane;\n", 13);
          v249 = v248 + 13;
          if ((_DWORD)v96)
          {
            v393 = v126;
            memset(v248 + 13, 32, v96);
            v126 = v393;
            v250 = v96;
          }
          else
          {
            v250 = 0;
          }
          v251 = &v249[v250];
          *(_OWORD *)v251 = v126;
          *(_DWORD *)(v251 + 15) = 1600069694;
          v252 = v251 + 19;
          v394 = v102;
          if (v17)
          {
            v253 = *(int8x16_t **)(v17 + 8);
            v254 = *(unsigned int *)(v17 + 4);
            if ((*(_BYTE *)(v17 + 16) & 4) != 0)
            {
              if ((_DWORD)v254)
              {
                if ((_DWORD)v254 == 1)
                  *v252 = v253->i8[0];
                else
                  memcpy(v252, v253, v254);
              }
            }
            else
            {
              if (v254 < 0x10)
              {
                v255 = (unint64_t)(v251 + 19);
              }
              else
              {
                v255 = (unint64_t)&v252[v254 & 0xFFFFFFF0];
                v256 = (unsigned __int128 *)(v251 + 19);
                do
                {
                  v257 = (unsigned __int128)vld2q_s8(v253->i8);
                  v253 += 2;
                  *v256++ = v257;
                }
                while (v256 != (unsigned __int128 *)v255);
              }
              if ((_BYTE *)v255 != &v252[v254])
              {
                v259 = (unint64_t)&v102[2 * v397 + v396 + v254 - v255 + 51];
                if (v259 < 8
                  || ((v260 = (size_t)&v102[v396 + v254],
                       v255 < (unint64_t)v253[6].u64 + 4 * v397 + 2 * v260 - 2 * v255 + 6)
                    ? (v261 = (unint64_t)v253 >= v260 + 2 * v397 + 51)
                    : (v261 = 1),
                      !v261))
                {
                  v263 = (_BYTE *)v255;
                  v264 = v253;
                  goto LABEL_316;
                }
                if (v259 >= 0x20)
                {
                  v262 = v259 & 0xFFFFFFFFFFFFFFE0;
                  v340 = v253 + 2;
                  v341 = (int8x16_t *)(v255 + 16);
                  v342 = v259 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v344 = v340[-2];
                    v343 = v340[-1];
                    v346 = *v340;
                    v345 = v340[1];
                    v340 += 4;
                    v341[-1] = vuzp1q_s8(v344, v343);
                    *v341 = vuzp1q_s8(v346, v345);
                    v341 += 2;
                    v342 -= 32;
                  }
                  while (v342);
                  if (v259 != v262)
                  {
                    if ((v259 & 0x18) == 0)
                    {
                      v264 = (int8x16_t *)((char *)v253 + 2 * v262);
                      v263 = (_BYTE *)(v255 + v262);
                      goto LABEL_316;
                    }
                    goto LABEL_415;
                  }
                }
                else
                {
                  v262 = 0;
LABEL_415:
                  v263 = (_BYTE *)(v255 + (v259 & 0xFFFFFFFFFFFFFFF8));
                  v264 = (int8x16_t *)((char *)v253 + 2 * (v259 & 0xFFFFFFFFFFFFFFF8));
                  v347 = (int16x8_t *)((char *)v253 + 2 * v262);
                  v348 = (int8x8_t *)(v255 + v262);
                  v349 = v262 - (v259 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v350 = *v347++;
                    *v348++ = vmovn_s16(v350);
                    v349 += 8;
                  }
                  while (v349);
                  if (v259 != (v259 & 0xFFFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_316:
                      v265 = v264->i8[0];
                      v264 = (int8x16_t *)((char *)v264 + 2);
                      *v263++ = v265;
                    }
                    while (v263 != &v252[v254]);
                  }
                }
              }
            }
            v258 = *(unsigned int *)(v17 + 4);
          }
          else
          {
            v258 = 0;
          }
          qmemcpy(&v252[v258], "_SecondPlane;\n", 14);
          v266 = &v252[v258 + 14];
          if ((_DWORD)v96)
          {
            memset(v266, 32, v96);
            v267 = v96;
          }
          else
          {
            v267 = 0;
          }
          v268 = &v266[v267];
          *(_QWORD *)v268 = *(_QWORD *)"float3x2 __";
          *(_DWORD *)(v268 + 7) = 1600069682;
          v269 = v268 + 11;
          if (v17)
          {
            v270 = *(int8x16_t **)(v17 + 8);
            v271 = *(unsigned int *)(v17 + 4);
            if ((*(_BYTE *)(v17 + 16) & 4) != 0)
            {
              if ((_DWORD)v271)
              {
                if ((_DWORD)v271 == 1)
                  *v269 = v270->i8[0];
                else
                  memcpy(v269, v270, v271);
              }
            }
            else
            {
              if (v271 < 0x10)
              {
                v272 = (unint64_t)(v268 + 11);
              }
              else
              {
                v272 = (unint64_t)&v269[v271 & 0xFFFFFFF0];
                v273 = (unsigned __int128 *)(v268 + 11);
                do
                {
                  v274 = (unsigned __int128)vld2q_s8(v270->i8);
                  v270 += 2;
                  *v273++ = v274;
                }
                while (v273 != (unsigned __int128 *)v272);
              }
              if ((_BYTE *)v272 != &v269[v271])
              {
                v276 = (unint64_t)&v394[3 * v397 + v396 + v258 + v271 - v272 + 76];
                if (v276 < 8
                  || ((v277 = (size_t)&v394[v271 + v258 + v396],
                       v272 < (unint64_t)&v270[9].u64[1] + 2 * v277 + 6 * v397 - 2 * v272)
                    ? (v278 = (unint64_t)v270 >= v277 + 3 * v397 + 76)
                    : (v278 = 1),
                      !v278))
                {
                  v280 = (_BYTE *)v272;
                  v281 = v270;
                  goto LABEL_344;
                }
                if (v276 >= 0x20)
                {
                  v279 = v276 & 0xFFFFFFFFFFFFFFE0;
                  v351 = v270 + 2;
                  v352 = (int8x16_t *)(v272 + 16);
                  v353 = v276 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v355 = v351[-2];
                    v354 = v351[-1];
                    v357 = *v351;
                    v356 = v351[1];
                    v351 += 4;
                    v352[-1] = vuzp1q_s8(v355, v354);
                    *v352 = vuzp1q_s8(v357, v356);
                    v352 += 2;
                    v353 -= 32;
                  }
                  while (v353);
                  if (v276 != v279)
                  {
                    if ((v276 & 0x18) == 0)
                    {
                      v281 = (int8x16_t *)((char *)v270 + 2 * v279);
                      v280 = (_BYTE *)(v272 + v279);
                      goto LABEL_344;
                    }
                    goto LABEL_423;
                  }
                }
                else
                {
                  v279 = 0;
LABEL_423:
                  v280 = (_BYTE *)(v272 + (v276 & 0xFFFFFFFFFFFFFFF8));
                  v281 = (int8x16_t *)((char *)v270 + 2 * (v276 & 0xFFFFFFFFFFFFFFF8));
                  v358 = (int16x8_t *)((char *)v270 + 2 * v279);
                  v359 = (int8x8_t *)(v272 + v279);
                  v360 = v279 - (v276 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v361 = *v358++;
                    *v359++ = vmovn_s16(v361);
                    v360 += 8;
                  }
                  while (v360);
                  if (v276 != (v276 & 0xFFFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_344:
                      v282 = v281->i8[0];
                      v281 = (int8x16_t *)((char *)v281 + 2);
                      *v280++ = v282;
                    }
                    while (v280 != &v269[v271]);
                  }
                }
              }
            }
            v275 = *(unsigned int *)(v17 + 4);
          }
          else
          {
            v275 = 0;
          }
          *(_OWORD *)&v269[v275] = *(_OWORD *)"_UVRemapMatrix;\n";
          v283 = &v269[v275 + 16];
          if ((_DWORD)v96)
            memset(v283, 32, v96);
          else
            v96 = 0;
          v5 = v402;
          v13 = v403;
          v284 = &v283[v96];
          *(_QWORD *)v284 = *(_QWORD *)"float4x3 __";
          *(_DWORD *)(v284 + 7) = 1600069683;
          v285 = &v283[v96 + 11];
          if (v17)
          {
            v286 = *(int8x16_t **)(v17 + 8);
            v287 = *(unsigned int *)(v17 + 4);
            if ((*(_BYTE *)(v17 + 16) & 4) != 0)
            {
              if ((_DWORD)v287)
              {
                if ((_DWORD)v287 == 1)
                {
                  *v285 = v286->i8[0];
                }
                else
                {
                  memcpy(v285, v286, v287);
                  v5 = v402;
                  v13 = v403;
                }
              }
            }
            else
            {
              if (v287 < 0x10)
              {
                v288 = (unint64_t)v285;
              }
              else
              {
                v288 = (unint64_t)&v285[v287 & 0xFFFFFFF0];
                v289 = (unsigned __int128 *)v285;
                do
                {
                  v290 = (unsigned __int128)vld2q_s8(v286->i8);
                  v286 += 2;
                  *v289++ = v290;
                }
                while (v289 != (unsigned __int128 *)v288);
              }
              if ((char *)v288 != &v285[v287])
              {
                v292 = &v394[v275 + v396 + v258];
                v293 = (unint64_t)&v292[4 * v397 + v287 - v288 + 103];
                if (v293 < 8
                  || (v288 < (unint64_t)&v286[12].u64[1] + 8 * v397 + 2 * (_QWORD)&v292[v287] - 2 * v288 + 6
                    ? (v294 = v286 >= (int8x16_t *)&v394[4 * v397 + 103 + v396 + v275 + v258 + v287])
                    : (v294 = 1),
                      !v294))
                {
                  v296 = (char *)v288;
                  v297 = v286;
                  goto LABEL_372;
                }
                if (v293 >= 0x20)
                {
                  v295 = v293 & 0xFFFFFFFFFFFFFFE0;
                  v362 = v286 + 2;
                  v363 = (int8x16_t *)(v288 + 16);
                  v364 = v293 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v366 = v362[-2];
                    v365 = v362[-1];
                    v368 = *v362;
                    v367 = v362[1];
                    v362 += 4;
                    v363[-1] = vuzp1q_s8(v366, v365);
                    *v363 = vuzp1q_s8(v368, v367);
                    v363 += 2;
                    v364 -= 32;
                  }
                  while (v364);
                  if (v293 != v295)
                  {
                    if ((v293 & 0x18) == 0)
                    {
                      v297 = (int8x16_t *)((char *)v286 + 2 * v295);
                      v296 = (char *)(v288 + v295);
                      goto LABEL_372;
                    }
                    goto LABEL_431;
                  }
                }
                else
                {
                  v295 = 0;
LABEL_431:
                  v296 = (char *)(v288 + (v293 & 0xFFFFFFFFFFFFFFF8));
                  v297 = (int8x16_t *)((char *)v286 + 2 * (v293 & 0xFFFFFFFFFFFFFFF8));
                  v369 = (int16x8_t *)((char *)v286 + 2 * v295);
                  v370 = (int8x8_t *)(v288 + v295);
                  v371 = v295 - (v293 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v372 = *v369++;
                    *v370++ = vmovn_s16(v372);
                    v371 += 8;
                  }
                  while (v371);
                  if (v293 != (v293 & 0xFFFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_372:
                      v298 = v297->i8[0];
                      v297 = (int8x16_t *)((char *)v297 + 2);
                      *v296++ = v298;
                    }
                    while (v296 != &v285[v287]);
                  }
                }
              }
            }
            v291 = *(unsigned int *)(v17 + 4);
          }
          else
          {
            v291 = 0;
          }
          qmemcpy(&v285[v291], "_ColorSpaceConversionMatrix;\n", 29);
          v7 = v399;
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      v98 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v94);
      if (v98)
      {
        v99 = v98;
        if ((_DWORD)v96)
        {
          memset_pattern16(v98, asc_18260FF50, 2 * (4 * v95));
          v100 = (4 * v95);
        }
        else
        {
          v100 = 0;
        }
        v395 = v100;
        v111 = &v99[2 * v100];
        *(_OWORD *)v111 = xmmword_18260FD10;
        *((_OWORD *)v111 + 1) = xmmword_18260FD20;
        *((_DWORD *)v111 + 8) = 6225952;
        *((_WORD *)v111 + 18) = 95;
        v112 = v111 + 38;
        v113 = v402;
        v114 = v403;
        if (!v17)
        {
          v117 = 0;
          goto LABEL_220;
        }
        v115 = *(int8x16_t **)(v17 + 8);
        v116 = *(unsigned int *)(v17 + 4);
        if ((*(_BYTE *)(v17 + 16) & 4) == 0)
        {
          if ((_DWORD)v116)
          {
            if ((_DWORD)v116 == 1)
            {
              *v112 = v115->i16[0];
            }
            else
            {
              memcpy(v112, v115, 2 * v116);
              v113 = v402;
              v114 = v403;
            }
          }
LABEL_219:
          v117 = *(unsigned int *)(v17 + 4);
LABEL_220:
          v392 = v117;
          v192 = &v112[v117];
          *(_OWORD *)v192 = xmmword_18260FE30;
          *((_QWORD *)v192 + 2) = 0x3B0065006E0061;
          v192[12] = 10;
          v193 = (char *)(v192 + 13);
          v402 = v113;
          v403 = v114;
          if ((_DWORD)v96)
          {
            memset_pattern16(v193, asc_18260FF50, 2 * (4 * v95));
            v114 = v403;
            v194 = (4 * v95);
          }
          else
          {
            v194 = 0;
          }
          v195 = &v193[2 * v194];
          *(_OWORD *)v195 = xmmword_18260FD10;
          *((_OWORD *)v195 + 1) = xmmword_18260FD20;
          *((_DWORD *)v195 + 8) = 6225952;
          *((_WORD *)v195 + 18) = 95;
          v196 = v195 + 38;
          v398 = v95;
          if (!v17)
          {
            v199 = 0;
            goto LABEL_248;
          }
          v197 = *(int8x16_t **)(v17 + 8);
          v198 = *(unsigned int *)(v17 + 4);
          if ((*(_BYTE *)(v17 + 16) & 4) == 0)
          {
            if ((_DWORD)v198)
            {
              if ((_DWORD)v198 == 1)
              {
                *v196 = v197->i16[0];
              }
              else
              {
                memcpy(v196, v197, 2 * v198);
                v114 = v403;
              }
            }
LABEL_247:
            v199 = *(unsigned int *)(v17 + 4);
LABEL_248:
            v215 = &v196[v199];
            *v215 = 95;
            *(_OWORD *)(v215 + 1) = xmmword_18260FE40;
            *(_QWORD *)(v215 + 9) = 0x3B0065006E0061;
            v215[13] = 10;
            v216 = v215 + 14;
            if ((_DWORD)v96)
            {
              memset_pattern16(v215 + 14, asc_18260FF50, 2 * v96);
              v114 = v403;
            }
            else
            {
              v96 = 0;
            }
            v217 = &v216[v96];
            *v217 = 102;
            *(_OWORD *)(v217 + 1) = xmmword_18260FE50;
            *(_DWORD *)(v217 + 9) = 6226015;
            v218 = v217 + 11;
            if (!v17)
            {
              v221 = 0;
              goto LABEL_276;
            }
            v219 = *(int8x16_t **)(v17 + 8);
            v220 = *(unsigned int *)(v17 + 4);
            if ((*(_BYTE *)(v17 + 16) & 4) == 0)
            {
              if ((_DWORD)v220)
              {
                if ((_DWORD)v220 == 1)
                  *v218 = v219->i16[0];
                else
                  memcpy(v218, v219, 2 * v220);
              }
LABEL_275:
              v221 = *(unsigned int *)(v17 + 4);
LABEL_276:
              v238 = &v218[v221];
              *v238 = 95;
              *(_OWORD *)(v238 + 1) = xmmword_18260FE60;
              *(_QWORD *)(v238 + 9) = 0x69007200740061;
              *(_DWORD *)(v238 + 13) = 3866744;
              v238[15] = 10;
              WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)v238 + 32, v398, (unint64_t)"float4x3 __", 0xBu, v17, (unint64_t)"_ColorSpaceConversionMatrix;\n",
                0x1Du);
              v7 = v399;
              goto LABEL_9;
            }
            if (v220 < 0x40)
            {
              v222 = (unint64_t)(v217 + 11);
            }
            else
            {
              v222 = (unint64_t)&v218[v220 & 0xFFFFFFC0];
              v223 = (char *)(v217 + 11);
              do
              {
                v417.val[0] = *v219;
                v224 = v219[1];
                v421.val[0] = v219[2];
                v225 = v219[3];
                v219 += 4;
                v425.val[0] = v225;
                v421.val[1] = v114;
                v428.val[0] = v224;
                v417.val[1] = v114;
                v226 = v223;
                vst2q_s8(v226, v417);
                v226 += 32;
                v425.val[1] = v114;
                v428.val[1] = v114;
                vst2q_s8(v226, v428);
                v227 = v223 + 64;
                vst2q_s8(v227, v421);
                v228 = v223 + 96;
                v223 += 128;
                vst2q_s8(v228, v425);
              }
              while (v223 != (char *)v222);
            }
            v229 = &v218[v220];
            if ((_WORD *)v222 == v229)
              goto LABEL_275;
            v230 = (unint64_t)&v99[6 * v395 + 2 * v392 + 2 * v199 + 2 * v220 - v222 + 150];
            if (v230 < 0xE
              || ((v231 = (unint64_t)&v99[6 * v395 + 2 * v392 + 2 * v199 + 2 * v220 - v222 + 150],
                   v222 < (unint64_t)v219->u64 + (v231 >> 1) + 1)
                ? (v232 = (unint64_t)v219 >= v222 + (v231 & 0xFFFFFFFFFFFFFFFELL) + 2)
                : (v232 = 1),
                  !v232))
            {
              v235 = (_WORD *)v222;
              v236 = v219;
              goto LABEL_272;
            }
            v233 = (v230 >> 1) + 1;
            if (v230 < 0x3E)
            {
              v234 = 0;
              goto LABEL_398;
            }
            v234 = v233 & 0xFFFFFFFFFFFFFFE0;
            v319 = (uint8x8_t *)&v219[1];
            v320 = (uint16x8_t *)(v222 + 32);
            v321 = v233 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v322 = *(uint8x16_t *)v319[-2].i8;
              v323 = vmovl_u8(*v319);
              v324 = vmovl_high_u8(*(uint8x16_t *)v319->i8);
              v320[-2] = vmovl_u8(*(uint8x8_t *)v322.i8);
              v320[-1] = vmovl_high_u8(v322);
              *v320 = v323;
              v320[1] = v324;
              v320 += 4;
              v319 += 4;
              v321 -= 32;
            }
            while (v321);
            if (v233 == v234)
              goto LABEL_275;
            if ((v233 & 0x18) != 0)
            {
LABEL_398:
              v235 = (_WORD *)(v222 + 2 * (v233 & 0xFFFFFFFFFFFFFFF8));
              v236 = (int8x16_t *)((char *)v219 + (v233 & 0xFFFFFFFFFFFFFFF8));
              v325 = (uint8x8_t *)&v219->i8[v234];
              v326 = (uint16x8_t *)(v222 + 2 * v234);
              v327 = v234 - (v233 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v328 = *v325++;
                *v326++ = vmovl_u8(v328);
                v327 += 8;
              }
              while (v327);
              if (v233 == (v233 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_275;
            }
            else
            {
              v236 = (int8x16_t *)((char *)v219 + v234);
              v235 = (_WORD *)(v222 + 2 * v234);
            }
            do
            {
LABEL_272:
              v237 = v236->u8[0];
              v236 = (int8x16_t *)((char *)v236 + 1);
              *v235++ = v237;
            }
            while (v235 != v229);
            goto LABEL_275;
          }
          if (v198 < 0x40)
          {
            v200 = (unint64_t)(v195 + 38);
          }
          else
          {
            v200 = (unint64_t)&v196[v198 & 0xFFFFFFC0];
            v201 = v195 + 38;
            do
            {
              v416.val[0] = *v197;
              v202 = v197[1];
              v420.val[0] = v197[2];
              v203 = v197[3];
              v197 += 4;
              v424.val[0] = v203;
              v420.val[1] = v114;
              v427.val[0] = v202;
              v416.val[1] = v114;
              v204 = v201;
              vst2q_s8(v204, v416);
              v204 += 32;
              v424.val[1] = v114;
              v427.val[1] = v114;
              vst2q_s8(v204, v427);
              v205 = v201 + 64;
              vst2q_s8(v205, v420);
              v206 = v201 + 96;
              v201 += 128;
              vst2q_s8(v206, v424);
            }
            while (v201 != (char *)v200);
          }
          v207 = &v196[v198];
          if ((_WORD *)v200 == v207)
            goto LABEL_247;
          v208 = (unint64_t)&v99[4 * v395 + 2 * v392 + 2 * v198 - v200 + 100];
          if (v208 < 0xE
            || (v200 < (unint64_t)v197->u64 + (v208 >> 1) + 1
              ? (v209 = (unint64_t)v197 >= v200 + (v208 & 0xFFFFFFFFFFFFFFFELL) + 2)
              : (v209 = 1),
                !v209))
          {
            v212 = (_WORD *)v200;
            v213 = v197;
            goto LABEL_244;
          }
          v210 = (v208 >> 1) + 1;
          if (v208 < 0x3E)
          {
            v211 = 0;
            goto LABEL_390;
          }
          v211 = v210 & 0xFFFFFFFFFFFFFFE0;
          v309 = (uint8x8_t *)&v197[1];
          v310 = (uint16x8_t *)(v200 + 32);
          v311 = v210 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v312 = *(uint8x16_t *)v309[-2].i8;
            v313 = vmovl_u8(*v309);
            v314 = vmovl_high_u8(*(uint8x16_t *)v309->i8);
            v310[-2] = vmovl_u8(*(uint8x8_t *)v312.i8);
            v310[-1] = vmovl_high_u8(v312);
            *v310 = v313;
            v310[1] = v314;
            v310 += 4;
            v309 += 4;
            v311 -= 32;
          }
          while (v311);
          if (v210 == v211)
            goto LABEL_247;
          if ((v210 & 0x18) != 0)
          {
LABEL_390:
            v212 = (_WORD *)(v200 + 2 * (v210 & 0xFFFFFFFFFFFFFFF8));
            v213 = (int8x16_t *)((char *)v197 + (v210 & 0xFFFFFFFFFFFFFFF8));
            v315 = (uint8x8_t *)&v197->i8[v211];
            v316 = (uint16x8_t *)(v200 + 2 * v211);
            v317 = v211 - (v210 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v318 = *v315++;
              *v316++ = vmovl_u8(v318);
              v317 += 8;
            }
            while (v317);
            if (v210 == (v210 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_247;
          }
          else
          {
            v213 = (int8x16_t *)((char *)v197 + v211);
            v212 = (_WORD *)(v200 + 2 * v211);
          }
          do
          {
LABEL_244:
            v214 = v213->u8[0];
            v213 = (int8x16_t *)((char *)v213 + 1);
            *v212++ = v214;
          }
          while (v212 != v207);
          goto LABEL_247;
        }
        if (v116 < 0x40)
        {
          v118 = (unint64_t)(v111 + 38);
        }
        else
        {
          v118 = (unint64_t)&v112[v116 & 0xFFFFFFC0];
          v119 = v111 + 38;
          do
          {
            v414.val[0] = *v115;
            v120 = v115[1];
            v418.val[0] = v115[2];
            v121 = v115[3];
            v115 += 4;
            v113 = v121;
            v418.val[1] = v403;
            v422.val[0] = v120;
            v414.val[1] = v403;
            v122 = v119;
            vst2q_s8(v122, v414);
            v122 += 32;
            v422.val[1] = v403;
            vst2q_s8(v122, v422);
            v123 = v119 + 64;
            vst2q_s8(v123, v418);
            v124 = v119 + 96;
            vst2q_s8(v124, *(int8x16x2_t *)v113.i8);
            v119 += 128;
          }
          while (v119 != (char *)v118);
        }
        v173 = &v112[v116];
        if ((_WORD *)v118 == v173)
          goto LABEL_219;
        v174 = (unint64_t)&v99[2 * v116 + 2 * v395 - v118 + 36];
        if (v174 < 0xE
          || (v118 < (unint64_t)v115->u64 + (v174 >> 1) + 1
            ? (v175 = (unint64_t)v115 >= v118 + (v174 & 0xFFFFFFFFFFFFFFFELL) + 2)
            : (v175 = 1),
              !v175))
        {
          v178 = (_WORD *)v118;
          v179 = v115;
          goto LABEL_208;
        }
        v176 = (v174 >> 1) + 1;
        if (v174 < 0x3E)
        {
          v177 = 0;
          goto LABEL_382;
        }
        v177 = v176 & 0xFFFFFFFFFFFFFFE0;
        v299 = (uint8x8_t *)&v115[1];
        v300 = (uint16x8_t *)(v118 + 32);
        v301 = v176 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v302 = *(uint8x16_t *)v299[-2].i8;
          v303 = vmovl_u8(*v299);
          v304 = vmovl_high_u8(*(uint8x16_t *)v299->i8);
          v300[-2] = vmovl_u8(*(uint8x8_t *)v302.i8);
          v300[-1] = vmovl_high_u8(v302);
          *v300 = v303;
          v300[1] = v304;
          v300 += 4;
          v299 += 4;
          v301 -= 32;
        }
        while (v301);
        if (v176 == v177)
          goto LABEL_219;
        if ((v176 & 0x18) != 0)
        {
LABEL_382:
          v178 = (_WORD *)(v118 + 2 * (v176 & 0xFFFFFFFFFFFFFFF8));
          v179 = (int8x16_t *)((char *)v115 + (v176 & 0xFFFFFFFFFFFFFFF8));
          v305 = (uint8x8_t *)&v115->i8[v177];
          v306 = (uint16x8_t *)(v118 + 2 * v177);
          v307 = v177 - (v176 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v308 = *v305++;
            *v306++ = vmovl_u8(v308);
            v307 += 8;
          }
          while (v307);
          if (v176 == (v176 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_219;
        }
        else
        {
          v179 = (int8x16_t *)((char *)v115 + v177);
          v178 = (_WORD *)(v118 + 2 * v177);
        }
        do
        {
LABEL_208:
          v180 = v179->u8[0];
          v179 = (int8x16_t *)((char *)v179 + 1);
          *v178++ = v180;
        }
        while (v178 != v173);
        goto LABEL_219;
      }
      v7 = v399;
LABEL_9:
      v5 = v402;
      v13 = v403;
LABEL_10:
      if (++v12 == v401)
        goto LABEL_442;
    }
    v18 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v19 = (4 * *((_DWORD *)this + 14));
    v20 = *((_QWORD *)v18 + 1);
    if ((v20 || (v20 = *(_QWORD *)v18) != 0) && (*(_BYTE *)(v20 + 16) & 4) == 0)
    {
      v21 = (void *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v18);
      if (v21)
        v22 = (_DWORD)v19 == 0;
      else
        v22 = 1;
      if (!v22)
        memset_pattern16(v21, asc_18260FF50, 2 * v19);
    }
    else
    {
      v23 = (void *)MEMORY[0x186DAB068]();
      if (v23)
        v24 = (_DWORD)v19 == 0;
      else
        v24 = 1;
      if (!v24)
        memset(v23, 32, v19);
    }
    v410 = *(_QWORD *)(*(_QWORD *)(v14 + 104) + 24);
    v411 = (const char *)this;
    v412[0] = &v410;
    v412[1] = this;
    v413[0] = this;
    v413[1] = this;
    v413[2] = this;
    v413[3] = this;
    v413[4] = this;
    v413[5] = this;
    v413[6] = this;
    v413[7] = this;
    v413[8] = this;
    v413[9] = this;
    v25 = *(unsigned int *)(v410 + 48);
    if ((_DWORD)v25 == -1)
      std::__throw_bad_variant_access[abi:sn180100]();
    v408 = (const char *)&v411;
    ((void (*)(const char **))*(&off_1E0FD6CA0 + v25))(&v408);
    v26 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LOBYTE(v408) = 32;
    v411 = *(const char **)(v14 + 48);
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(v26, (__int8 *)&v408, (uint64_t *)&v411);
    v27 = *(unsigned int *)(v14 + 100);
    if ((_DWORD)v27)
    {
      v28 = *(uint64_t **)(v14 + 88);
      v29 = 8 * v27;
      do
      {
        v30 = *v28;
        v31 = *((_QWORD *)this + 5);
        LOBYTE(v411) = 32;
        v32 = *(_QWORD *)(v31 + 8);
        if (!v32 || (v33 = *(unsigned int *)(v31 + 16), v33 >= *(_DWORD *)(v32 + 4)) || *(_QWORD *)v31)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          v34 = *(_DWORD *)(v32 + 16);
          v35 = *(_QWORD *)(v32 + 8);
          *(_DWORD *)(v31 + 16) = v33 + 1;
          if ((v34 & 4) != 0)
            *(_BYTE *)(v35 + v33) = 32;
          else
            *(_WORD *)(v35 + 2 * v33) = 32;
        }
        (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, uint64_t))(*(_QWORD *)this + 88))(this, v30);
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    WTF::StringBuilder::append();
    if (v7 != 7)
      goto LABEL_9;
    v36 = (WTF::String *)*(unsigned int *)(v14 + 116);
    if (!(_DWORD)v36)
      goto LABEL_9;
    v37 = (uint64_t *)*((_QWORD *)this + 5);
    WTF::String::number(v36);
    v38 = 0;
    v39 = v408;
    v40 = ++v400;
    v41 = *((_DWORD *)v37 + 4);
    do
    {
      ++v38;
      v42 = v40 > 9;
      v40 /= 0xAu;
    }
    while (v42);
    if (v408)
      v43 = *((_DWORD *)v408 + 1);
    else
      v43 = 0;
    v44 = (4 * *((_DWORD *)this + 14));
    v45 = v43 + 5;
    if (v43 >= 0xFFFFFFFB)
      v45 = -1;
    v106 = __CFADD__(v38, v45);
    v46 = v38 + v45;
    if (v106)
      v46 = -1;
    v106 = __CFADD__(v46, 17);
    v47 = v46 + 17;
    if (v106)
      v47 = -1;
    v106 = __CFADD__((_DWORD)v44, v47);
    v48 = v44 + v47;
    if (v106)
      v48 = -1;
    v106 = __CFADD__(v41, v48);
    v49 = v41 + v48;
    if (v106)
      v50 = 0xFFFFFFFFLL;
    else
      v50 = v49;
    v51 = v37[1];
    if ((v51 || (v51 = *v37) != 0) && (*(_BYTE *)(v51 + 16) & 4) == 0 || v408 && (v408[16] & 4) == 0)
    {
      v52 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v37);
      v5 = v402;
      v13 = v403;
      if (v52)
      {
        v53 = v52;
        if ((_DWORD)v44)
          memset_pattern16(v52, asc_18260FF50, 2 * v44);
        else
          v44 = 0;
        v56 = 0;
        v57 = 0;
        v58 = &v53[2 * v44];
        *(_OWORD *)v58 = xmmword_18260FB60;
        *((_OWORD *)v58 + 1) = xmmword_18260FB70;
        *((_WORD *)v58 + 16) = 103;
        v59 = v400;
        do
        {
          v60 = v57;
          v61 = v56;
          *((_BYTE *)v412 + v56 + 4) = (v59 % 0xA) | 0x30;
          ++v57;
          --v56;
          v42 = v59 > 9;
          v59 /= 0xAu;
        }
        while (v42);
        v62 = v58 + 34;
        v5 = v402;
        v13 = v403;
        if (v56 + 14 <= 13)
        {
          v63 = -v56;
          if ((unint64_t)-v56 < 8)
          {
            v64 = v56 + 13;
            v65 = v62;
            goto LABEL_157;
          }
          if (v63 >= 0x20)
          {
            v66 = v63 & 0xFFFFFFFFFFFFFFE0;
            v84 = (uint8x8_t *)((char *)v413 - v60 + 4);
            v85 = (1 - v61) & 0xFFFFFFFFFFFFFFE0;
            v86 = (uint16x8_t *)&v53[2 * v44 + 66];
            do
            {
              v87 = *(uint8x16_t *)v84[-2].i8;
              v88 = vmovl_u8(*v84);
              v89 = vmovl_high_u8(*(uint8x16_t *)v84->i8);
              v86[-2] = vmovl_u8(*(uint8x8_t *)v87.i8);
              v86[-1] = vmovl_high_u8(v87);
              *v86 = v88;
              v86[1] = v89;
              v86 += 4;
              v84 += 4;
              v85 -= 32;
            }
            while (v85);
            if (v63 == v66)
              goto LABEL_158;
            if ((v63 & 0x18) == 0)
            {
              v65 = &v62[v66];
              v64 = (v57 & 0xFFFFFFFFFFFFFFE0) + v56 + 13;
              do
LABEL_157:
                *v65++ = *((unsigned __int8 *)&v412[-1] + v64++);
              while (v64 != 13);
              goto LABEL_158;
            }
          }
          else
          {
            v66 = 0;
          }
          v64 = (v57 & 0xFFFFFFFFFFFFFFF8) + v56 + 13;
          v65 = &v62[v63 & 0xFFFFFFFFFFFFFFF8];
          v90 = (uint8x8_t *)((char *)v412 + v66 - v60 + 4);
          v91 = (uint16x8_t *)&v53[2 * v66 + 34 + 2 * v44];
          v92 = v66 - ((1 - v61) & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v93 = *v90++;
            *v91++ = vmovl_u8(v93);
            v92 += 8;
          }
          while (v92);
          if (v63 != (v63 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_157;
        }
LABEL_158:
        LODWORD(v134) = 0;
        v135 = 1;
        v136 = v400;
        do
        {
          v137 = v135;
          v134 = (v134 + 1);
          ++v135;
          v42 = v136 > 9;
          v136 /= 0xAu;
        }
        while (v42);
        v138 = &v62[v134];
        *v138 = 91;
        v139 = v138 + 1;
        if (!v39)
        {
          v142 = 0;
LABEL_185:
          *(_QWORD *)&v139[v142] = 0xA0020003B005DLL;
          v7 = v399;
          goto LABEL_186;
        }
        v140 = (int8x16_t *)*((_QWORD *)v39 + 1);
        v141 = *((unsigned int *)v39 + 1);
        if ((v39[16] & 4) == 0)
        {
          if ((_DWORD)v141)
          {
            if ((_DWORD)v141 == 1)
            {
              *v139 = v140->i16[0];
            }
            else
            {
              memcpy(v139, v140, 2 * v141);
              v5 = v402;
              v13 = v403;
            }
          }
          goto LABEL_184;
        }
        if (v141 < 0x40)
        {
          v143 = (unint64_t)v139;
          v150 = &v139[v141];
          if (v139 == v150)
          {
LABEL_184:
            v142 = *((unsigned int *)v39 + 1);
            goto LABEL_185;
          }
        }
        else
        {
          v143 = (unint64_t)&v139[v141 & 0xFFFFFFC0];
          v144 = (char *)v139;
          do
          {
            v415.val[0] = *v140;
            v145 = v140[1];
            v419.val[0] = v140[2];
            v146 = v140[3];
            v140 += 4;
            v423.val[0] = v146;
            v419.val[1] = v403;
            v426.val[0] = v145;
            v415.val[1] = v403;
            v147 = v144;
            vst2q_s8(v147, v415);
            v147 += 32;
            v423.val[1] = v403;
            v426.val[1] = v403;
            vst2q_s8(v147, v426);
            v148 = v144 + 64;
            vst2q_s8(v148, v419);
            v149 = v144 + 96;
            v144 += 128;
            vst2q_s8(v149, v423);
          }
          while (v144 != (char *)v143);
          v150 = &v139[v141];
          if ((_WORD *)v143 == v150)
            goto LABEL_184;
        }
        v151 = (unint64_t)&v53[2 * v141 + 2 * v44 - v143 + 34];
        v152 = v134 + (v151 >> 1);
        v153 = v152 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v152 & 0x7FFFFFFFFFFFFFFFuLL) < 7
          || ((v154 = v143 + 2 * v152 + 2, v143 < (unint64_t)v140->u64 + v153 + 1)
            ? (v155 = (unint64_t)v140 >= v154)
            : (v155 = 1),
              !v155))
        {
          v159 = (_WORD *)v143;
          v160 = v140;
          goto LABEL_181;
        }
        v156 = v153 + 1;
        v157 = v151 >> 1;
        if (v153 >= 0x1F)
        {
          v158 = v156 & 0xFFFFFFFFFFFFFFE0;
          v163 = (uint8x8_t *)&v140[1];
          v164 = (uint16x8_t *)(v143 + 32);
          v165 = (((v157 + v137) & 0x7FFFFFFFFFFFFFFFLL) + 1) & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v166 = *(uint8x16_t *)v163[-2].i8;
            v167 = vmovl_u8(*v163);
            v168 = vmovl_high_u8(*(uint8x16_t *)v163->i8);
            v164[-2] = vmovl_u8(*(uint8x8_t *)v166.i8);
            v164[-1] = vmovl_high_u8(v166);
            *v164 = v167;
            v164[1] = v168;
            v164 += 4;
            v163 += 4;
            v165 -= 32;
          }
          while (v165);
          if (v156 == v158)
            goto LABEL_184;
          if ((v156 & 0x18) == 0)
          {
            v160 = (int8x16_t *)((char *)v140 + v158);
            v159 = (_WORD *)(v143 + 2 * v158);
            do
            {
LABEL_181:
              v161 = v160->u8[0];
              v160 = (int8x16_t *)((char *)v160 + 1);
              *v159++ = v161;
            }
            while (v159 != v150);
            goto LABEL_184;
          }
        }
        else
        {
          v158 = 0;
        }
        v159 = (_WORD *)(v143 + 2 * (v156 & 0xFFFFFFFFFFFFFFF8));
        v160 = (int8x16_t *)((char *)v140 + (v156 & 0xFFFFFFFFFFFFFFF8));
        v169 = (uint8x8_t *)&v140->i8[v158];
        v170 = (uint16x8_t *)(v143 + 2 * v158);
        v171 = v158 - ((((v157 + v137) & 0x7FFFFFFFFFFFFFFFLL) + 1) & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v172 = *v169++;
          *v170++ = vmovl_u8(v172);
          v171 += 8;
        }
        while (v171);
        if (v156 == (v156 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_184;
        goto LABEL_181;
      }
LABEL_186:
      v162 = v408;
      v408 = 0;
      if (!v162)
        goto LABEL_10;
      if (*(_DWORD *)v162 != 2)
      {
        *(_DWORD *)v162 -= 2;
        goto LABEL_10;
      }
      WTF::StringImpl::destroy();
      goto LABEL_9;
    }
    v54 = (void *)MEMORY[0x186DAB068](v37, v50);
    v5 = v402;
    v13 = v403;
    if (!v54)
      goto LABEL_186;
    v55 = v54;
    if ((_DWORD)v44)
      memset(v54, 32, v44);
    else
      v44 = 0;
    v67 = 0;
    v68 = (size_t)v55 + v44;
    *(_OWORD *)v68 = *(_OWORD *)"uint8_t __padding";
    *(_BYTE *)(v68 + 16) = 103;
    v69 = v400;
    do
    {
      *((_BYTE *)v412 + v67-- + 4) = (v69 % 0xA) | 0x30;
      v42 = v69 > 9;
      v69 /= 0xAu;
    }
    while (v42);
    v70 = (char *)(v68 + 17);
    if (v67 + 14 <= 13)
      memcpy(v70, (char *)v412 + v67 + 5, -v67);
    LODWORD(v71) = 0;
    v72 = 1;
    v73 = v400;
    v5 = v402;
    v13 = v403;
    do
    {
      v74 = v72;
      v71 = (v71 + 1);
      ++v72;
      v42 = v73 > 9;
      v73 /= 0xAu;
    }
    while (v42);
    v75 = &v70[v71];
    *v75 = 91;
    v76 = v75 + 1;
    if (!v39)
    {
      v83 = 0;
LABEL_133:
      *(_DWORD *)&v76[v83] = 169884509;
      goto LABEL_186;
    }
    v77 = (int8x16_t *)*((_QWORD *)v39 + 1);
    v78 = *((unsigned int *)v39 + 1);
    if ((v39[16] & 4) != 0)
    {
      if ((_DWORD)v78)
      {
        if ((_DWORD)v78 == 1)
        {
          *v76 = v77->i8[0];
        }
        else
        {
          memcpy(v76, v77, v78);
          v5 = v402;
          v13 = v403;
        }
      }
      goto LABEL_132;
    }
    if (v78 < 0x10)
    {
      v79 = (unint64_t)v76;
      v82 = &v76[v78];
      if (v76 == &v76[v78])
      {
LABEL_132:
        v83 = *((unsigned int *)v39 + 1);
        goto LABEL_133;
      }
    }
    else
    {
      v79 = (unint64_t)&v76[v78 & 0xFFFFFFF0];
      v80 = (unsigned __int128 *)v76;
      do
      {
        v81 = (unsigned __int128)vld2q_s8(v77->i8);
        v77 += 2;
        *v80++ = v81;
      }
      while (v80 != (unsigned __int128 *)v79);
      v82 = &v76[v78];
      if ((_BYTE *)v79 == &v76[v78])
        goto LABEL_132;
    }
    v104 = (unint64_t)v55 + v78 + v44 - v79 + v71 + 18;
    if (v104 < 8
      || ((v105 = (size_t)v55 + v78 + v44 + v71, v79 < (unint64_t)v77[2].u64 + 2 * v105 + -2 * v79 + 4)
        ? (v106 = (unint64_t)v77 >= v105 + 18)
        : (v106 = 1),
          !v106))
    {
      v108 = (_BYTE *)v79;
      v109 = v77;
      goto LABEL_128;
    }
    if (v104 >= 0x20)
    {
      v107 = v104 & 0xFFFFFFFFFFFFFFE0;
      v181 = v77 + 2;
      v182 = (int8x16_t *)(v79 + 16);
      v183 = ((unint64_t)v55 + v78 + v44 - v79 + v74 + 18) & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v185 = v181[-2];
        v184 = v181[-1];
        v187 = *v181;
        v186 = v181[1];
        v181 += 4;
        v182[-1] = vuzp1q_s8(v185, v184);
        *v182 = vuzp1q_s8(v187, v186);
        v182 += 2;
        v183 -= 32;
      }
      while (v183);
      if (v104 == v107)
        goto LABEL_132;
      if ((v104 & 0x18) == 0)
      {
        v109 = (int8x16_t *)((char *)v77 + 2 * v107);
        v108 = (_BYTE *)(v79 + v107);
        do
        {
LABEL_128:
          v110 = v109->i8[0];
          v109 = (int8x16_t *)((char *)v109 + 2);
          *v108++ = v110;
        }
        while (v108 != v82);
        goto LABEL_132;
      }
    }
    else
    {
      v107 = 0;
    }
    v108 = (_BYTE *)(v79 + (v104 & 0xFFFFFFFFFFFFFFF8));
    v109 = (int8x16_t *)((char *)v77 + 2 * (v104 & 0xFFFFFFFFFFFFFFF8));
    v188 = (int16x8_t *)((char *)v77 + 2 * v107);
    v189 = (int8x8_t *)(v79 + v107);
    v190 = v107 - (((unint64_t)v55 + v78 + v44 - v79 + v74 + 18) & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v191 = *v188++;
      *v189++ = vmovn_s16(v191);
      v190 += 8;
    }
    while (v190);
    if (v104 == (v104 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_132;
    goto LABEL_128;
  }
LABEL_442:
  v373 = *((unsigned __int8 *)a2 + 88);
  if (v373 != 4 && v373 != 8)
  {
    if (v373 != 9)
      goto LABEL_453;
    if (!*((_DWORD *)a2 + 21))
    {
      __break(0xC471u);
      return;
    }
    v374 = **((_QWORD **)a2 + 9);
    v375 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v407 = 10;
    LODWORD(v404) = *((_DWORD *)this + 14);
    LODWORD(v412[0]) = 21;
    v406 = v404;
    v410 = *((_QWORD *)a2 + 6);
    v411 = "template<typename T>\n";
    v408 = "(T value)\n";
    v409 = 10;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v375, &v407, (int *)&v404, (uint64_t)&v411, &v406, &v410, (uint64_t)&v408);
    v376 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v376;
    v377 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    LODWORD(v404) = v376;
    LODWORD(v412[0]) = 2;
    v410 = *(_QWORD *)(v374 + 48);
    v411 = ": ";
    v408 = "(value)\n";
    v409 = 8;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v377, (int *)&v404, (unint64_t *)&v411, &v410, (unint64_t *)&v408);
    goto LABEL_451;
  }
  v378 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  v407 = 10;
  LODWORD(v404) = *((_DWORD *)this + 14);
  LODWORD(v412[0]) = 21;
  v406 = v404;
  v410 = *((_QWORD *)a2 + 6);
  v411 = "template<typename T>\n";
  v408 = "(const thread T& other)\n";
  v409 = 24;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v378, &v407, (int *)&v404, (uint64_t)&v411, &v406, &v410, (uint64_t)&v408);
  v379 = *((_DWORD *)this + 14);
  v380 = v379 + 1;
  *((_DWORD *)this + 14) = v379 + 1;
  v381 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v381)
  {
    v382 = (uint64_t *)*((_QWORD *)a2 + 9);
    v383 = *v382;
    v384 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
    v406 = v380;
    v407 = 58;
    v405 = 32;
    v410 = *(_QWORD *)(v383 + 48);
    v411 = "(other.";
    LODWORD(v412[0]) = 7;
    v404 = v410;
    v408 = ")\n";
    v409 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v384, &v406, &v407, &v405, &v410, (unint64_t *)&v411, &v404, (unint64_t *)&v408);
    if ((_DWORD)v381 != 1)
    {
      v385 = v382 + 1;
      v386 = 8 * v381 - 8;
      do
      {
        v387 = *v385++;
        v388 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
        v406 = *((_DWORD *)this + 14);
        v407 = 44;
        v405 = 32;
        v410 = *(_QWORD *)(v387 + 48);
        v411 = "(other.";
        LODWORD(v412[0]) = 7;
        v404 = v410;
        v408 = ")\n";
        v409 = 2;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v388, &v406, &v407, &v405, &v410, (unint64_t *)&v411, &v404, (unint64_t *)&v408);
        v386 -= 8;
      }
      while (v386);
    }
LABEL_451:
    v379 = *((_DWORD *)this + 14) - 1;
  }
  *((_DWORD *)this + 14) = v379;
  v389 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  LODWORD(v408) = v379;
  v411 = "{ }\n";
  LODWORD(v412[0]) = 4;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v389, (int *)&v408, (uint64_t)&v411);
LABEL_453:
  v390 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v390;
  v391 = (WTF::StringBuilder *)*((_QWORD *)this + 5);
  LODWORD(v408) = v390;
  v411 = "};\n\n";
  LODWORD(v412[0]) = 4;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v391, (int *)&v408, (uint64_t)&v411);
  if (*((_BYTE *)this + 61))
    *((_BYTE *)this + 61) = 0;
}

